#!/usr/bin/python

import requests
import time
from datetime import datetime
import random
import md5
import logging


# player action codes
ACT = {
    "BUY": {
        "ATTRIB": 21,
        "BEER": 518,
        "LUXURY": 195,
        "MOUNT": 20
    },
    "CHANGE": {
        "FACE": 801,
        "MAIL": 804,
        "NAME": 803,
        "PASS": 805
    },
    "GUILD": {
        "COMMENCE_ATTACK": 114,
        "DELETE": 102,
        "DONATE": 111,
        "EXPEL": 104,
        "FOUND": 101,
        "IMPROVE": 107,
        "INVITE": 103,
        "JOIN": 110,
        "JOIN_ATTACK": 112,
        "JOIN_DEFENSE": 113,
        "RENAME": 109,
        "SET_DESC": 108,
        "SET_MASTER": 105,
        "SET_OFFICER": 106
    },
    "POST": {
        "DELETE": 508,
        "READ": 507,
        "SEND": 509,
        "SEND_GUILD": 536
    },
    "QUEST": {
        "BEGIN": 510,
        "CANCEL": 511,
        "SKIP": 189
    },
    "REQUEST": {
        "CHAR": 513,
        "GUILD": 503,
        "GUILD_NAMES": 533,
        "NEWWAREZ": 506,
        "TRANS_COUNT": 530
    },
    "SCREEN": {
        "ARBEITEN": 12,
        "ARENA": 11,
        "CHAR": 4,
        "EHRENHALLE": 7,
        "FREMDGILDE": 23,
        "GILDE_GRUENDEN": 17,
        "GILDEN": 6,
        "GILDENHALLE": 24,
        "OPTIONEN": 9,
        "PILZDEALER": 16,
        "POST": 5,
        "SCHMIEDE": 13,
        "STALL": 15,
        "TAVERNE": 10,
        "TOILET": 303,
        "TOWER": 312,
        "WELTKARTE": 8,
        "WITCH": 322,
        "ZAUBERLADEN": 14
    },
    "ACCOUNT_CREATE": 1,
    "ALBUM": 116,
    "ARBEIT": 502,
    "ARBEIT_CANCEL": 505,
    "CHAR_CREATE": 501,
    "COPYCAT_BOOST": 314,
    "DEALER_AKTION": 25,
    "DEALER_SPONSOR": 26,
    "DELETE_ACCOUNT": 802,
    "FORGOT_PASSWORD": 3,
    "GET_CHAT_HISTORY": 517,
    "INVENTORY_CHANGE": 504,
    "INVITE_PLAYER": 115,
    "KILL_POTION": 27,
    "LOAD_CATAPULT": 196,
    "LOGIN": 2,
    "LOGOUT": 535,
    "MAINQUEST": 519,
    "MOVE_COPYCAT_ITEM": 318,
    "PLACE_BET": 22,
    "RE_LOGIN": 515,
    "RESEND_EMAIL": 531,
    "REVOLT": 534,
    "ROB_PLAYER": 313,
    "SEND_CHAT": 516,
    "SET_PLAYER_DESC": 514,
    "START_FIGHT": 512,
    "TOILET_FLUSH": 302,
    "TOWER_TRY": 313,
    "VALIDATE": 532,
    "WHISPER": 537,
    "WITCH_DONATE": 323,
    "WITCH_ENCHANT": 325,
}


# Response codes
RESP = {
    "ARBEIT": {
        "ERLEDIGT": 103,
        "START": 104,
        "STOP": 105
    },
    "CHANGE": {
        "FACE_OK": 115,
        "MAIL_OK": 118,
        "NAME_OK": 117,
        "PASS_OK": 116
    },
    "GUILD": {
        "CHANGE_DESC_SUCCESS": 153,
        "COMMENCE_ATTACK_OK": 181,
        "DATA": 101,
        "DELETE_SUCCESS": 151,
        "DONATE_SUCCESS": 160,
        "EXPEL_SUCCESS": 156,
        "FIGHT": 178,
        "FOUND_SUCCESS": 150,
        "IMPROVE_SUCCESS": 154,
        "INVITE_SUCCESS": 157,
        "JOIN_ATTACK_OK": 179,
        "JOIN_DEFENSE_OK": 180,
        "JOIN_SUCCESS": 158,
        "MASTER_SUCCESS": 159,
        "NAMES": 183,
        "OFFICER_SUCCESS": 155,
        "RENAME_SUCCESS": 152
    },
    "PLAYER": {
        "DESC_SUCCESS": 109,
        "NOT_FOUND": 112,
        "SCREEN": 111
    },
    "QUEST": {
        "DONE": 106,
        "DONE_PIXEL": 188,
        "DONE_PIXEL_2": 197,
        "SKIP_ALLOWED": 193,
        "SKIP_ALLOWED_START": 194,
        "START": 107,
        "STOP": 108
    },
    "SAVEGAME": {
        "MIRROR": 317,
        "SHARD": 316,
        "STAY": 102,
        "STAY_ERROR": 173
    },
    "SCREEN": {
        "BUILDCHAR": 4,
        "GILDENHALLE": 170,
        "WITCH": 324
    },
    "TOILET": {
        "DROPPED": 305,
        "DROPTWICE": 357,
        "FLUSHED": 308,
        "FULL": 306,
        "LOCKED": 304,
        "TANKFULL": 311,
        "UNLOCKED": 309
    },
    "ACCOUNT_SUCCESS": 1,
    "ALBUM": 192,
    "ATTACK_NOT_EXIST": 114,
    "BET_LOST": 169,
    "BET_WON": 168,
    "CHAT_HISTORY": 161,
    "CHAT_LINE": 162,
    "DEALER_AKTION": 174,
    "DEALER_SPONSOR": 176,
    "DELETE_ACCOUNT_OK": 119,
    "DEMO_SCREEN": 113,
    "EMAIL_RESENT": 164,
    "FAME_LIST": 3,
    "INVITE_SUCCESS": 191,
    "LOGIN_SUCCESS": 2,
    "LOGIN_SUCCESS_BOUGHT": 184,
    "LOGOUT_SUCCESS": 187,
    "MAINQUEST": 122,
    "MESSAGE_SENT": 202,
    "MOVE_TOWER_ITEM": 319,
    "NO_LOGIN": 120,
    "OTHER_GUILD": 172,
    "PASSWORD_SENT": 165,
    "READ_MESSAGE": 201,
    "REQUEST_GUILD": 121,
    "REQUEST_GUILD_QUIET": 186,
    "TOWER_FIGHT": 321,
    "TOWER_SAVE": 315,
    "TRANS_COUNT": 163,
    "UPDATE_CHECK": 167,
    "VALIDATE_OK": 166,
    "WHISPER_SUCCESS": 190
}


# Error codes
ERR = {
    "GUILD": {
        "ALREADY_ATTACKING": -63,
        "ALREADY_MEMBER": -38,
        "ALREADY_UNDER_ATTACK": -61,
        "ALREADY_YOU_OTHER": -25,
        "ALREADY_YOU_THIS": -27,
        "ATTACK_DELAY": -62,
        "ATTACK_STATUS": -64,
        "BUILDING_MAX": -21,
        "BUILDING_NOT_FOUND": -20,
        "CHAT_HISTORY": -32,
        "CHAT_NOT_MEMBER": -31,
        "CHAT_TEXT_ERROR": -33,
        "DESCR_TOO_LONG": -102,
        "DONATE_FRA": -52,
        "DONATE_NEG": -51,
        "EMAIL_VALIDATE": -46,
        "FIGHT_TOO_EXPENSIVE": -60,
        "IS_FULL": -24,
        "LACK_GOLD": -19,
        "LACK_MUSH": -18,
        "MASTER_CANT_BE_OFFICER": -23,
        "MUSH_FREE": -47,
        "NAME_CHARACTERS": -45,
        "NAME_LENGTH": -44,
        "NAME_REJECTED": -43,
        "NOT_ALLOWED": -17,
        "NOT_FOUND": -16,
        "NOT_MEMBER": -22,
        "NOT_REAL_MEMBER": -26,
        "PLAYER_NOT_FOUND": -28,
        "RANK_WRONG": -95,
        "TOO_EXPENSIVE": -30
    },
    "INVITE": {
        "EMAIL_REJECTED": -92,
        "NOT_VALIDATED": -90,
        "TOO_MANY": -91
    },
    "NAME": {
        "EXISTS": -1,
        "REJECTED": -5,
        "TOO_SHORT": -2
    },
    "NO": {
        "ALBUM": -93,
        "CHAT_INFO": -96,
        "CHAT_OVERFLOW": -97,
        "ENDURANCE": -36,
        "INDEX_FREE": -14,
        "MUSH_BAR": -35,
        "MUSH_MQ": -41,
        "MUSH_PVP": -40
    },
    "ACCOUNTS_PER_IP": -56,
    "ALREADY_IN_GUILD": -13,
    "ATTACK_AGAIN": -48,
    "BEER": -34,
    "BOOST": -42,
    "DEALER_AKTION": 175,
    "DEALER_SPONSOR": 177,
    "EMAIL_REJECTED": -4,
    "EMAIL_WRONG": -10,
    "FACE_DATA_INCORRECT": -9,
    "FIGHT_SELF": -15,
    "GENDER_OR_RACE": -11,
    "INBOX_FULL": 203,
    "INVENTORY_FULL": -58,
    "INVENTORY_FULL_ADV": -86,
    "JOINED_TOO_RECENTLY": -68,
    "LOCKED_ADMIN": -54,
    "LOCKED_PAYMENT": -53,
    "LOGIN_FAILED": -6,
    "LUXURY_ALREADY": -94,
    "MAIL_EXISTS": -12,
    "MSG_LEVEL_TOO_LOW": -84,
    "MSG_NOT_VALIDATED": -85,
    "NO_SLOT_FOR_FLUSHING": -307,
    "NOT_INVITED": -39,
    "PASSWORD_TOO_SHORT": -3,
    "PLACE_BET": -57,
    "RECIPIENT_NOT_FOUND": 204,
    "RECIPIENT_SELF": 205,
    "REQUEST_PW": -49,
    "REVOLT_FAILED": -67,
    "SERVER_DOWN": -69,
    "SESSION_ID_EXPIRED": -65,
    "STOP_TUNNELING": -66,
    "SUBJECT_TOO_SHORT": -29,
    "TOILET_EMPTY": -310,
    "TOO_EXPENSIVE": -7,
    "TOO_SOON": -55,
    "TOWER_CLOSED": -98,
    "TOWER_ITEMMOVE": -100,
    "TOWER_NO_COPYCATS": -101,
    "VALIDATE": -50,
    "WORSE_MOUNT": -37,
    "WRONG_PASSWORD": -8,
}


# Savegame (request answer) Indices
SG = {
    "ATTR": {
        "AUSDAUER": 33,
        "AUSDAUER_BONUS": 38,
        "AUSDAUER_GEKAUFT": 43,
        "BEWEGLICHKEIT": 32,
        "BEWEGLICHKEIT_BONUS": 37,
        "BEWEGLICHKEIT_GEKAUFT": 42,
        "INTELLIGENZ": 34,
        "INTELLIGENZ_BONUS": 39,
        "INTELLIGENZ_GEKAUFT": 44,
        "STAERKE": 31,
        "STAERKE_BONUS": 36,
        "STAERKE_GEKAUFT": 41,
        "WILLENSKRAFT": 35,
        "WILLENSKRAFT_BONUS": 40,
        "WILLENSKRAFT_GEKAUFT": 45
    },
    "ACTION": {
        "ENDTIME": 48,
        "INDEX": 47,
        "STATUS": 46
    },
    "FACE": {
        "1": 18,
        "2": 19,
        "3": 20,
        "4": 21,
        "5": 22,
        "6": 23,
        "7": 24,
        "8": 25,
        "9": 26,
        "10": 27
    },
    "GUILD": {
        "FIGHT_STATUS": 509,
        "INDEX": 436,
        "JOIN_DATE": 444,
        "RANK": 437
    },
    "ITM": {
        "ATTRIBTYP1": 4,
        "ATTRIBTYP2": 5,
        "ATTRIBTYP3": 6,
        "ATTRIBVAL1": 7,
        "ATTRIBVAL2": 8,
        "ATTRIBVAL3": 9,
        "EXT_ENCHANT": 601,
        "EXT_ENCHANT_POWER": 602,
        "EXT_SOCKET": 600,
        "EXT_SOCKET_POWER": 603,
        "GOLD": 10,
        "MUSH": 11,
        "PIC": 1,
        "SCHADEN_MAX": 3,
        "SCHADEN_MIN": 2,
        "SIZE": 12,
        "TYP": 0
    },
    "LAST": {
        "ACTION_DATE": 3,
        "GUILD_FIGHT_EXP": 440,
        "LOGIN_IP": 504
    },
    "MUSH": {
        "BOUGHT_SINCE_LAST_LOGIN": 446,
        "GAINED": 16,
        "SPENT": 17
    },
    "POTION": {
        "DURATION": 497,
        "GAIN": 500,
        "TYPE": 494
    },
    "QUEST": {
        "OFFER": {
            "DURATION1": 242,
            "ENEMY1": 236,
            "EXP1": 281,
            "GOLD1": 284,
            "LEVEL1": 230,
            "LOCATION1": 239,
            "REWARD_ITM1": 245,
            "TYPE1": 233
        },
        "REROLL_TIME": 229
    },
    "ACCOUNT_PROTECTION_DATE": 441,
    "ACHIEVEMENTS": 466,
    "ALBUM": 439,
    "ARMOR": 448,
    "BACKPACK_OFFS": 169,
    "BACKPACK_SIZE": 5,
    "BAR": 478,
    "BEERS": 458,
    "CLASS": 30,
    "CLASS_RANK": 13,
    "DAMAGE_MAX": 450,
    "DAMAGE_MIN": 449,
    "DUNGEON_13": 491,
    "DUNGEON_LEVEL": 481,
    "EMAIL_DATE": 465,
    "EMAIL_VALID": 464,
    "EVASION": 454,
    "EVENT_TRIGGER_COUNT": 510,
    "EXP": 9,
    "EXP_BONUS": 462,
    "EXP_FOR_NEXTLEVEL": 10,
    "FIDGET_ITEM1": 362,
    "FIDGET_REROLL_TIME": 361,
    "FIRST_PAYMENT": 480,
    "FOO": 477,
    "GENDER": 29,
    "GOLD": 14,
    "GOLD_BONUS": 463,
    "HELLO": 479,
    "HONOR": 11,
    "INVENTORY_OFFS": 49,
    "INVENTORY_SIZE": 10,
    "LEVEL": 8,
    "LIFE": 451,
    "LOCKDURATION": 476,
    "MAGICRSISTANCE": 455,
    "MOUNT": 287,
    "MOUNT_DURATION": 452,
    "MQ_REROLL_TIME": 460,
    "MQ_STATE": 459,
    "MSG_COUNT": 6,
    "MUSH": 15,
    "MUSHROOM_BOUGHT_AMOUNT": 507,
    "MUSHROOM_BOUGHT_DATE": 508,
    "MUSHROOMS_MAY_DONATE": 438,
    "NEW_DUNGEONS": 442,
    "NEW_FLAGS": 445,
    "NEXT_BATTLE_TIME": 434,
    "PAYMENT_ID": 1,
    "PHP_SESSION": 493,
    "PLAYER_ID": 2,
    "POWER_LIFE_POTION": 503,
    "PVP_REROLL_TIME": 461,
    "RACE": 28,
    "RANK": 12,
    "REGISTRATION_DATE": 4,
    "REGISTRATION_IP": 5,
    "SERVER_TIME": 511,
    "SHAKES_ITEM1": 289,
    "SHAKES_REROLL_TIME": 288,
    "TIMEBAR": 457,
    "TIMEBAR_REROLL_TIME": 456,
    "TOILET": 492,
    "TRANSACTION_COUNT": 453,
    "UNREAD_MESSAGES": 435,
    "VALIDATION_IP": 7,
    "WE_MISS_YOU": 447,
}


# Text Snippet IDs
TXT = {
    "ACH": {
        "1": 6300,
        "2": 6310,
        "3": 6320,
        "4": 6330,
        "5": 6340
    },
    "ARBEIT_TEXT": {
        "1": 41,
        "2": 42,
        "3": 43,
        "4": 70,
        "5": 72,
        "6": 73,
        "7": 74
    },
    "ARENA": {
        "0": 2,
        "1": 113,
        "2": 114,
        "3": 211,
        "4": 212
    },
    "ATTACK": {
        "TXT": 166,
        "OK_STATUS": 8410,
        "STATUS": 8401
    },
    "ATTRIB": {
        "SUM": 9467,
        "HELP": {
            "TXT": 4530,
            "EXT": 4535,
            "HUNTER": 4541,
            "MAGE": 4542,
            "WARRIOR": 4540
        },
    },
    "BEERFEST": {
        "TEXT_OK": 9203,
        "TEXT_TOOHEALTHY": 9202,
        "TITLE_OK": 9201,
        "TITLE_TOOHEALTHY": 9200
    },
    "BO": {
        "BOUGHT": 190,
        "BUY": 184,
        "BUY_FREE": 9532,
        "TEXT_NO": 189,
        "TEXT_OK": 188,
        "TEXT_TOOHEALTHY": 192,
        "TIME": 185,
        "TITLE_NO": 187,
        "TITLE_OK": 186,
        "TITLE_TOOHEALTHY": 191
    },
    "BODY": {
        "GUILD": {
            "DELETED": 4405,
            "DELETED_BY_ADMIN": 4406,
            "EXPELLED": 4407,
            "EXPELLED_BY_ADMIN": 4408,
            "INVITE": 4409
        },
        "BODY_PVP": 4411
    },
    "BUILDING": {
        "1": 258,
        "2": 259,
        "COMPLETE": 306,
        "S_GOTO_CREST": 9447
    },
    "BUY": {
        "1": {
            "1": 1100,
            "1_AKTION": 1140,
            "2": 1101,
            "2_AKTION": 1141,
            "3": 1102,
            "3_AKTION": 1142
        },
        "2": {
            "1": 1103,
            "1_AKTION": 1143,
            "2": 1104,
            "2_AKTION": 1144,
            "3": 1105,
            "3_AKTION": 1145
        },
        "3": {
            "1": 1106,
            "1_AKTION": 1146,
            "2": 1107,
            "2_AKTION": 1147,
            "3": 1108,
            "3_AKTION": 1148
        },
        "4": {
            "1": 1109,
            "1_AKTION": 1149,
            "2": 1110,
            "2_AKTION": 1150,
            "3": 1111,
            "3_AKTION": 1151
        },
        "5": {
            "1": 1112,
            "1_AKTION": 1152,
            "2": 1113,
            "2_AKTION": 1153,
            "3": 1114,
            "3_AKTION": 1154
        },
        "6": {
            "1": 1115,
            "1_AKTION": 1155,
            "2": 1116,
            "2_AKTION": 1156,
            "3": 1117,
            "3_AKTION": 1157
        },
        "7": {
            "1": 1118,
            "1_AKTION": 1158,
            "2": 1119,
            "2_AKTION": 1159,
            "3": 1120,
            "3_AKTION": 1150
        }
    },
    "CHANGE": {
        "TXT": 127,
        "EMAIL": 129,
        "NAME": 128,
        "PASSWORD": 130,
        "IMG": 126
    },
    "CHAR": {
        "AUSDAUER": 62,
        "BEWEGLICHKEIT": 61,
        "INTELLIGENZ": 63,
        "KAMPFWERT": 66,
        "LEBEN": 67,
        "RUESTUNG": 68,
        "SCHADEN": 65,
        "STAERKE": 60,
        "WIDERSTAND": 69,
        "WILLENSKRAFT": 64,
        "IMG": 125
    },
    "CREATE": {
        "ACCOUNT": 21,
        "CHARACTER": 18,
        "CHARACTER": 36,
        "GOTO_LOGIN": 117
    },
    "CREST": {
        "APPLY": 9417,
        "ELEMENT": 9405,
        "GOTO_BUILDINGS": 9446,
        "INFO": 9445,
        "SUGGEST": 9416,
        "SUGGESTION": 9418,
        "TINCTUREBOXES": 9440,
        "TINCTURES": 9420
    },
    "DELETE": {
        "ACCOUNT": {
            "TXT": 131,
            "FIELD": {
                "1": 146,
                "2": 147,
                "3": 148
            },
            "TITLE": 145
        }
    },
    "DOCHANGE": {
        "TXT": 132,
        "EMAIL": {
            "FIELD": {
                "1": 138,
                "2": 139,
                "3": 140
            },
            "TITLE": 137
        },
        "NAME": {
            "FIELD": {
                "1": 134,
                "2": 135,
                "3": 136
            },
            "TITLE": 133
        },
        "PASSWORD": {
            "FIELD": {
                "1": 142,
                "2": 143,
                "3": 144
            },
            "TITLE": 141
        },
        "NAME": 156
    },
    "DONATE": {
        "GOLD": {
            "1": 250,
            "2": 251
        },
        "MUSH": {
            "1": 252,
            "2": 253
        }
    },
    "DU": {
        "GEWONNEN": 239,
        "VERLOREN": 240,
        "WAS": {
            "GEWONNEN": 8807,
            "VERLOREN": 8808
        }
    },
    "DUNGEON": {
        "INFO": 8250,
        "NAME": 8200,
        "NAMES": 8840
    },
    "ECONOMIC": {
        "LOSS": {
            "TXT": 9528,
            "NEXT": 9529,
            "SUFFIX": 9530
        }
    },
    "EMAIL": {
        "TXT": 19,
        "CHANGED": 154,
        "NAG": 234,
        "NAG_TITLE": 237,
        "RESEND": 235,
        "RESENT": 236
    },
    "ENCHANT": {
        "HINT": 10121,
        "NAMES": 10200,
        "VALUES": 10400
    },
    "ERROR": {
        "AGB": 507,
        "ALREADY_IN_GUILD": 520,
        "ARBEITEN": {
            "ARENA": 604,
            "MAINQUEST": 606,
            "TAVERNE": 605
        },
        "ATTACK_AGAIN": 554,
        "BEER": 541,
        "COMPROMISED_ACCOUNT": 9103,
        "EMAIL": {
            "MISMATCH": 517,
            "REJECTED": 504,
            "WRONG": 515
        },
        "EMPTY_GUILD_NAME": 519,
        "FACE_DATA_INCORRECT": 0x0202,
        "FIGHT_SELF": 522,
        "GUILD": {
            "ALREADY_ATTACKING": 8603,
            "ALREADY_MEMBER": 545,
            "ALREADY_UNDER_ATTACK": 8601,
            "ALREADY_YOU_OTHER": 532,
            "ALREADY_YOU_THIS": 534,
            "ATTACK_DELAY": 8602,
            "ATTACK_STATUS": 8604,
            "BUILDING_MAX": 528,
            "BUILDING_NOT_FOUND": 527,
            "CASH_FULL": 9468,
            "CHAT_HISTORY": 539,
            "CHAT_NOT_MEMBER": 538,
            "CHAT_TEXT_ERROR": 540,
            "DESCR_TOO_LONG": 9531,
            "DONATE_FRA": 558,
            "DONATE_NEG": 557,
            "EMAIL_VALIDATE": 552,
            "FIGHT_TOO_EXPENSIVE": 8600,
            "IS_FULL": 531,
            "LACK_GOLD": 526,
            "LACK_MUSH": 525,
            "MASTER_CANT_BE_OFFICER": 530,
            "MUSH_FREE": 553,
            "NAME_CHARACTERS": 551,
            "NAME_LENGTH": 550,
            "NAME_REJECTED": 549,
            "NOT_ALLOWED": 524,
            "NOT_FOUND": 523,
            "NOT_MEMBER": 529,
            "NOT_REAL_MEMBER": 533,
            "PLAYER_NOT_FOUND": 535,
            "RANK_WRONG": 9400,
            "TOO_EXPENSIVE": 537
        },
        "IMGSVR_DOWN": 607,
        "INBOX_FULL": 508,
        "INPUT_REQUIRED": 562,
        "INVENTORY_FULL": 609,
        "INVENTORY_FULL_ADV": 610,
        "INVITE": {
            "EMAIL_REJECTED": 565,
            "NOT_VALIDATED": 563,
            "TOO_MANY": 564
        },
        "LOGIN_FAILED": 506,
        "MAIL_EXISTS": 556,
        "MSG_LEVEL_TOO_LOW": 8811,
        "MSG_NOT_VALIDATED": 8812,
        "NAME": {
            "EXISTS": 501,
            "MISMATCH": 516,
            "REJECTED": 505,
            "TOO_SHORT": 502
        },
        "NO_ENDURANCE": 543,
        "NO_INDEX_FREE": 521,
        "NO_MUSH_BAR": 542,
        "NO_MUSH_MQ": 548,
        "NO_MUSH_PVP": 547,
        "NO_SLOT_FOR_FLUSHING": 9455,
        "NOT_INVITED": 546,
        "PASSWORD_MISMATCH": 511,
        "PASSWORD_TOO_SHORT": 503,
        "PLAYER_NOT_FOUND": 518,
        "RECIPIENT_NOT_FOUND": 509,
        "RECIPIENT_SELF": 510,
        "REQUEST_PW": 555,
        "SELECTCLASS": 600,
        "SELL_ITEM": 561,
        "SUBJECT_TOO_SHORT": 536,
        "TAVERNE": {
            "ARBEITEN": 602,
            "ARENA": 601,
            "MAINQUEST": 603
        },
        "TOILET_EMPTY": 9456,
        "TOO_EXPENSIVE": 0x0200,
        "TOO_SOON_SUGGESTION": 9419,
        "UNKNOWN": 999,
        "WORSE_MOUNT": 544,
        "WRONG_PASSWORD": 513,
        "ACCOUNTS_PER_IP": 608,
        "LOCKED_ADMIN": 560,
        "LOCKED_PAYMENT": 559
    },
    "GUILD": {
        "AUSBAUEN": 228,
        "GEBAEUDE": {
            "1_POPUP": 225,
            "1_POPUP_EX": 8993,
            "2_POPUP": 226,
            "3_POPUP": 227,
            "NAME1": 4500,
            "STUFE": 181,
            "WERT1": 4510
        },
        "GOLD": 0x0100,
        "GRUENDEN": {
            "TXT": 157,
            "OK": 158,
            "TITLE": 159
        },
        "INVITE": 174,
        "INVITE_TITLE": 175,
        "KICK": 170,
        "KICK_TITLE": 171,
        "MASTER": 172,
        "MASTER_TITLE": 173,
        "MUSH": 0x0101,
        "QUIT": 176,
        "QUIT_TITLE": 177,
        "RAIDSTART": 9101,
        "RAIDSTART_TITLE": 9100,
        "ATTACK": {
            "FAIL": 8656,
            "PLAYER": 8450,
            "SUCCESS": 8654
        },
        "BATTLE": {
            "LOST": 8505,
            "MSG": 8440,
            "POPUP": 8420,
            "SKIP": 8400,
            "WON": 8500
        },
        "DEFENSE_FAIL": 8658,
        "DEFENSE_SUCCESS": 8657,
        "DUNGEON_COMPLETED": 9449,
        "EPICITEM": 9450,
        "HONOR_GAINED": 8510,
        "HONOR_LOST": 8511,
        "JOINED": 270,
        "JOINED_TOO_RECENTLY": 8660,
        "LEVEL_UP": 9448,
        "QUIT": 271,
        "RAID_FAIL": 8991,
        "RAID_SUCCESS": 8990
    },
    "GOLD": {
        "TXT": 75,
        "GAINED": 123,
        "LOST": 124,
        "SPENT": 203,
        "BONUS_PREFIX": 232,
        "BONUS_SUFFIX": 233
    },
    "GOTO": {
        "GILDEN": 51,
        "LOGIN": 24,
        "SIGNUP": 25,
        "SPIELER": 50
    },
    "HALL": {
        "LIST": {
            "COLUMN": {
                "1": 52,
                "2": 53,
                "3": 54,
                "3G": 57,
                "4": 55,
                "4G": 58,
                "5": 56
            }
        },
        "GOTO": 49,
        "SUCHFELD_TEXT": 59
    },
    "HUTMANN": {
        "BACK": 303,
        "BETCOMMENT": {
            "1": 297,
            "2": 298,
            "3": 299
        },
        "CANTAFFORD": 300,
        "CHOOSECUP": 292,
        "DAMN": 302,
        "GOLDBET": 290,
        "INSTR": 293,
        "LOSE": 289,
        "MUSHBET": 291,
        "NEWGAME": 296,
        "OFFER": 287,
        "OK": 295,
        "START": 294,
        "WIN": 288,
        "YEAH": 301
    },
    "INV": {
        "ACC_TEXT": 8801,
        "ACC_TITLE": 8800,
        "VAL_TEXT": 8803,
        "VAL_TITLE": 8802
    },
    "INVITE": {
        "EMAIL": 9106,
        "INSTR": 9109,
        "SUBJECT": 9108,
        "SUCCESS": 9110,
        "TITLE": 9107
    },
    "ITEM": {
        "ATTRIB": {
            "CLASS": {
                "1": 1031,
                "10": 1040,
                "11": 1041,
                "12": 1042,
                "2": 1032,
                "3": 1033,
                "4": 1034,
                "5": 1035,
                "6": 1036,
                "7": 1037,
                "8": 1038,
                "9": 1039
            },
            "CLASSES": 1030
        },
        "CLASS": {
            "1": 1001,
            "10": 1010,
            "2": 1002,
            "3": 1003,
            "4": 1004,
            "5": 1005,
            "6": 1006,
            "7": 1007,
            "8": 1008,
            "9": 1009
        },
        "CLASSES": 1000
    },
    "ITMNAME": {
        "10": 3450,
        "10_EPIC": 7450,
        "11": 8300,
        "12": 8350,
        "13": 9112,
        "14": 10000,
        "1": {
            "1": 3000,
            "1_EPIC": 7000,
            "2": 3500,
            "2_EPIC": 7500,
            "3": 3850,
            "3_EPIC": 7850
        },
        "2": {
            "1": 3050,
            "1_EPIC": 7050
        },
        "3": {
            "1": 3100,
            "1_EPIC": 7100,
            "2": 3600,
            "2_EPIC": 7600,
            "3": 3950,
            "3_EPIC": 7950
        },
        "4": {
            "1": 3150,
            "1_EPIC": 7150,
            "2": 3650,
            "2_EPIC": 7650,
            "3": 4000,
            "3_EPIC": 8000
        },
        "5": {
            "1": 3200,
            "1_EPIC": 7200,
            "2": 3700,
            "2_EPIC": 7700,
            "3": 4050,
            "3_EPIC": 8050
        },
        "6": {
            "1": 3250,
            "1_EPIC": 7250,
            "2": 3750,
            "2_EPIC": 7750,
            "3": 4100,
            "3_EPIC": 8100
        },
        "7": {
            "1": 3300,
            "1_EPIC": 7300,
            "2": 3800,
            "2_EPIC": 7800,
            "3": 4150,
            "3_EPIC": 8150
        },
        "8": 3350,
        "8_EPIC": 7350,
        "9": 3400,
        "9_EPIC": 7400,
        "EXT": 4600
    },
    "LUXURY": {
        "ALREADY": 9260,
        "BTN": 9259,
        "BTN2": 9262,
        "BTN3": 9264,
        "BUTTON": 9256,
        "CONFIRM": 9261,
        "CONFIRM2": 9263,
        "TEXT": 9258,
        "TITLE": 9257
    },
    "MOUNT": {
        "TXT": 194,
        "DURATION": 195,
        "FOREVER": 9150,
        "GAIN1": 4520
    },
    "PASSWORD": {
        "TXT": 17,
        "CHANGED": 152,
        "SMILEY": {
            "HAPPY": 8997,
            "NEUTRAL": 8996,
            "SAD": 0x2323
        }
    },
    "PAYICON": {
        "1": 1200,
        "2": 1201,
        "3": 1202,
        "4": 1203,
        "5": 1204,
        "6": 1205
    },
    "POPUP": {
        "INVITE": 205,
        "KICK": 207,
        "LEITER": 209,
        "OFFIZIER": 208,
        "PROFILE": 206,
        "REVOLT": 8650
    },
    "POST": {
        "TXT": 8,
        "ACCEPT": 97,
        "CANCEL": 84,
        "DELETE": 81,
        "FLUSH_TEXT": 9451,
        "FORWARD": 9401,
        "FROM": 94,
        "LIST": {
            "COLUMN": {
                "1": 85,
                "2": 86,
                "3": 87
            }
        },
        "READ": 80,
        "REPLY": 178,
        "RETURN": 96,
        "SEND": 83,
        "TIME": 95,
        "TITLE": {
            "INBOX": 88,
            "READ": 89,
            "WRITE": 90
        },
        "VIEWFIGHT": 238,
        "WRITE": 82
    },
    "PURCHASE": {
        "CANCELLED": 9901,
        "CHECKIN_ERROR": 9905,
        "ERROR": 9902,
        "PAYWAIT": 9904,
        "SUCCESS": 9906,
        "WAIT": 9903
    },
    "QO": {
        "CHOOSE": 98,
        "NO_THIRST": 9784,
        "RETURN": 101,
        "REWARD": 99,
        "START": 100
    },
    "QUEST": {
        "CANCEL": 104,
        "CLOSER": 1450,
        "COLLECT": {
            "AMOUNT": 2050,
            "TITLE": 1330,
            "WHAT": 1650
        },
        "ESCORT": {
            "LOCATION": 6200,
            "PRECLOSER": 6250,
            "TITLE": 6100,
            "WHOM": 6150
        },
        "FETCH": {
            "FROM": 1800,
            "PRECLOSER": 2100,
            "TITLE": 1360,
            "WHAT": 2000
        },
        "KILL": {
            "LOCATION": 1600,
            "PRECLOSER": 1700,
            "TITLE": 5500,
            "WHOM": 5700
        },
        "LOCATION": 1500,
        "OFFER": {
            "TEXT": 6405,
            "TITLE": 0x1900
        },
        "OPENER": 1400,
        "SCOUT": {
            "TASK1": 1550,
            "TASK2": 1750,
            "TITLE": 1300
        },
        "TEXT": 5000,
        "TRANSPORT": {
            "LOCATION": 6000,
            "PRECLOSER": 6050,
            "TITLE": 5900,
            "WHAT": 5950
        }
    },
    "RAID": {
        "LOST": 9005,
        "TEXT": 8820,
        "WON": 9000
    },
    "RANKMSG": {
        "1": 260,
        "2": 261,
        "3": 262,
        "4": 263,
        "5": 264,
        "6": 265,
        "7": 266,
        "8": 267,
        "9": 268,
        "10": 269
    },
    "RESEND": {
        "BTN1": 281,
        "BTN2": 283,
        "TEXT": 282,
        "TITLE": 284
    },
    "REVOLT": {
        "CHAT_MSG": 8653,
        "WARNING": 8651,
        "WARNING_TITLE": 8652
    },
    "RUESTUNG": {
        "TXT": 163,
        "SUM": 199,
        "SUM_HINT": 202
    },
    "SCROLL": {
        "BOUGHT": 10128,
        "BUYHINT": 10123,
        "BUYNOW": 10127,
        "DATE": 10122,
        "NAME": 10120
    },
    "SPECIAL_ACTION": {
        "TEXT_OK": 9226,
        "TEXT_TOOHEALTHY": 0x2400,
        "TITLE": 9206
    },
    "STALL": {
        "BUY": 112,
        "LAUFZEIT": 111,
        "MOUNTTEXT": 2430,
        "MOUNTTITEL": 2420,
        "PROLONG": 213,
        "SCHATZ": 278,
        "TEXT": 110,
        "TITEL": 109,
        "UPGRADE": 214
    },
    "SUBJECT": {
        "GUILD": {
            "DELETED": 4400,
            "DELETED_BY_ADMIN": 4401,
            "EXPELLED": 4402,
            "EXPELLED_BY_ADMIN": 4403,
            "INVITE": 4404
        },
        "PVP": 4410
    },
    "TITLE": {
        "FORGOT_PASSWORD": 27,
        "SIGNUP": 26,
        "WORK": 40
    },
    "TOILET": {
        "DROPTWICE": 9786,
        "FULL": 9465,
        "HINT": 9457,
        "ITEM": 9785,
        "TANKFULL": 9466
    },
    "TOWER": {
        "TXT": 9470,
        "BONUS": 9773,
        "ENEMY_NAMES": 9570,
        "GUYS": 9770,
        "INFO": 9772,
        "LEVEL": 9771,
        "LOST": 9779,
        "TRY": 9565,
        "WON": 9774
    },
    "VALIDATE": {
        "ERR": 246,
        "ERR_TITLE": 243,
        "OK": 245,
        "OK_TITLE": 242,
        "UNN": 247,
        "UNN_TITLE": 244
    },
    "WITCH": {
        "BOOK": 10124,
        "HINT": 9907,
        "WRONGTYPE": 9915
    },
    "ABBRECHEN": 71,
    "AGB": 28,
    "AGB_LINK": 272,
    "ALBUM": 9111,
    "ALERT_TEXT": 8810,
    "ALERT_WORDS": 8809,
    "ALREADY_VALID": 285,
    "ANLEITUNG_LINK": 274,
    "ARBEITEN": 39,
    "ARENA_TITLE": 115,
    "AUSDAUER": 193,
    "AUSGEWICHEN": 106,
    "BACK": 37,
    "BAD_PASSWORDS": 8994,
    "BASIS": 167,
    "BEARD": 30,
    "BETREFF": 92,
    "BLOCKEN": 119,
    "BONUS": 168,
    "BOOST_COPYCAT": 9564,
    "BROWS": 33,
    "CATAPULT": 9246,
    "CHAT_CAPTION": 182,
    "CHARAKTER": 7,
    "CLASSDESC": 2459,
    "CLASSNAME": 2456,
    "CMD_DONATE_GOLD": 254,
    "CMD_DONATE_MUSH": 0xFF,
    "COLLECTION": 9114,
    "COLOR": 120,
    "COMPARE": 9469,
    "CONGRATS": 8804,
    "COPYCAT_NAME": 9471,
    "COUNTRY_NAMES": 9800,
    "CS": 9204,
    "DATENSCHUTZ": 275,
    "DATENSCHUTZ_LINK": 273,
    "DAY": 309,
    "DAYS": 310,
    "DEBUG_INFO": 286,
    "DISCONNECTED": 216,
    "DURATION": 103,
    "EARS": 34,
    "EHRENHALLE": 10,
    "EMPFAENGER": 91,
    "ENEMY_SELF": 307,
    "ENTERDESC": 116,
    "ENTERGUILDDESC": 179,
    "EXP": 102,
    "EXPBONUS_PREFIX": 230,
    "EXPBONUS_SUFFIX": 231,
    "EXPNEXTLEVEL": 108,
    "EYES": 32,
    "FIGHT_LOSE": 4320,
    "FIGHT_WIN": 4300,
    "FIGHTS_COUNTER": 9105,
    "FONT_NAME": 8700,
    "FORGOT_PASSWORD": 22,
    "FORUM_LINK": 223,
    "FRIEND_SUBJECT": 279,
    "GAMETITLE": 222,
    "GEBLOCKT": 164,
    "GEGNERSTUFE": 229,
    "GENDER_F": 249,
    "GENDER_M": 248,
    "GESAMT": 169,
    "GILDEN": 9,
    "GUILDHALL_LEADER": 304,
    "GUILDHALL_MEMBERS": 305,
    "GUILDNOTEXT": 180,
    "HAIR": 35,
    "HAPPY_HOUR": 9151,
    "HERO_OF_THE_DAY": 8452,
    "HERO_OF_THE_DAY_TITLE": 8451,
    "HEROES_OF_THE_DAY_TITLE": 8453,
    "HL_MAINQUESTS_NAME": 9534,
    "HL_MAINQUESTS_TITLE": 9533,
    "HONOR_GAINED": 121,
    "HONOR_LOST": 122,
    "HOUR": 311,
    "HOURS": 312,
    "IMPRESSUM_LINK": 161,
    "IMPRESSUM_TEXT": 162,
    "ITM_ILLEGAL_COPY": 9475,
    "KRITISCHMINMAX": 200,
    "LEGALCHARS": 280,
    "LM": 317,
    "LOCK_REASON": 9236,
    "LOGIN": 14,
    "LOGIN_LEGAL_1": 276,
    "LOGIN_LEGAL_2": 277,
    "LOGOUT": 48,
    "MAX": 215,
    "MESSAGE": 165,
    "MODIFY_CHARACTER": 155,
    "MONSTER_NAME": 2200,
    "MOUTH": 29,
    "MQ_MUSHHINT": 210,
    "MUSH_DONATE_OBSOLETE": 8998,
    "MUSH_SPENT": 204,
    "MUSHBET_BOUGHT": 308,
    "MUSHROOMS_BOUGHT": 9102,
    "MUTE": 150,
    "NACHRICHT": 93,
    "NAME": 16,
    "NAME_CHANGED": 153,
    "NECESSARY_CLASS": 9559,
    "NEW_HONOR_ACH": 8655,
    "NEW_HONOR_ACH2": 8659,
    "NEW_MONSTER_NAMES": 9010,
    "NOCLASS": 218,
    "NOCLASS_DESC": 219,
    "NODESC": 118,
    "NOGUILD": 107,
    "NOMOUNT": 196,
    "NOSE": 31,
    "OK": 44,
    "OLD_EMAIL": 9104,
    "OPTION_TITLE": 151,
    "OPTIONEN": 12,
    "PILZDEALER": 6,
    "PILZE": 77,
    "POTION_KILL_INSTRUCTIONS": 316,
    "PVP_LOSE": 4235,
    "PVP_WIN": 4215,
    "RACEDESC": 2448,
    "RACENAME": 2440,
    "RANDOM": 47,
    "RANKNAME": 4543,
    "RE": 221,
    "RECONNECT": 217,
    "REMAINING": 315,
    "REQUEST_PASSWORD": 20,
    "REQUEST_SIGNUP": 23,
    "ROB": 9526,
    "ROUNDS_PLURAL": 241,
    "SCHADEN": 160,
    "SCHMIEDE": 3,
    "SELECT_WORLD": 9900,
    "SERVER_STARTED": 8992,
    "SHIELD_FORMULA": 9205,
    "SHOP_LINK": 8805,
    "SHOPS_NEWWAREZ": 79,
    "SIGNUP": 13,
    "SILBER": 76,
    "SILVER_HINT": 220,
    "SKIP_FIGHT": 105,
    "SPECIAL": 45,
    "SPECIAL2": 46,
    "STALL": 5,
    "TAG": 197,
    "TAGE": 198,
    "TATTOO": 38,
    "TAVERNE": 1,
    "TEMPORARY": 313,
    "TIMEBAR": 224,
    "TV_DISABLE": 10125,
    "TV_HINT": 10126,
    "UND": 78,
    "UNKNOWN": 9113,
    "UNTIL": 314,
    "VOLUME": 149,
    "WAFFENSCHADEN": 201,
    "WELCOME": 15,
    "WELTKARTE": 11,
    "WHISPER": 8813,
    "WORK_FINISH": 8806,
    "ZAUBERLADEN": 4,
    "ZURGILDE": 183,
}


# Label Texts
LBL = {
    "ALBUM": {
        "COLLECTION": 24379,
        "HEADING": 24380,
        "HINT": 24384,
        "PAGENUMBER_LEFT": 24377,
        "PAGENUMBER_RIGHT": 24378
    },
    "CHAR": {
        "ALBUM": 22966,
        "DELAY": 23077,
        "MOUNT": {
            "DESCR": 22988,
            "GAIN": 22990,
            "NAME": 22987,
            "RUNTIME": 22989
        },
        "RUESTUNG": 22992
    },
    "CREATE": {
        "CLASS": 198,
        "CLASS_DESC": 199,
        "GOTO_LOGIN": 201,
        "RACE": 196,
        "RACE_DESC": 197
    },
    "DEALER": {
        "PAYICON": {
            "1": 23244,
            "2": 23245,
            "3": 23246,
            "4": 23247,
            "5": 23248,
            "6": 23249,
            "7": 23250,
            "8": 23251,
            "9": 23252
        }
    },
    "EMAIL": {
        "TXT": 52,
        "NAG": 24371,
        "RESEND": 24373
    },
    "FIGHT": {
        "CHAR": {
            "AUSDAUER": 24166,
            "AUSDAUER_CAPTION": 24176,
            "BEWEGLICHKEIT": 24165,
            "BEWEGLICHKEIT_CAPTION": 24175,
            "INTELLIGENZ": 24167,
            "INTELLIGENZ_CAPTION": 24177,
            "STAERKE": 24164,
            "STAERKE_CAPTION": 24174,
            "WILLENSKRAFT": 24168,
            "WILLENSKRAFT_CAPTION": 24178
        },
        "OPP": {
            "AUSDAUER": 24171,
            "AUSDAUER_CAPTION": 24181,
            "BEWEGLICHKEIT": 24170,
            "BEWEGLICHKEIT_CAPTION": 24180,
            "INTELLIGENZ": 24172,
            "INTELLIGENZ_CAPTION": 24182,
            "STAERKE": 24169,
            "STAERKE_CAPTION": 24179,
            "WILLENSKRAFT": 24173,
            "WILLENSKRAFT_CAPTION": 24183
        },
        "OPPGUILD": 23833,
        "PLAYERGUILD": 23832,
        "REWARDEXP": 24209,
        "REWARDGOLD": 24203,
        "REWARDMUSH": 24207,
        "REWARDSILVER": 24205,
        "SUMMARY": 24197
    },
    "GILDE": {
        "ATTACK": 0x5B5B,
        "CHAT": 23406,
        "CHAT_CAPTION": 23405,
        "CREST_ELEMENT": 24557,
        "CREST_INSCRIPTION": 24558,
        "DEFENCE": 23388,
        "DIALOG": {
            "TEXT": {
                "INVITE": 23504,
                "KICK": 23502,
                "MASTER": 23503,
                "QUIT": 23501,
                "RAID": 23506,
                "REVOLT": 23505
            }
        },
        "GEBAEUDE": {
            "KOSTEN_GOLD": 23468,
            "KOSTEN_MUSH": 23471,
            "NAME": 23453,
            "STUFE": 23465,
            "STUFE_CAPTION": 23462,
            "WERT": 23459,
            "WERT_CAPTION": 23456
        },
        "GOLD": 23487,
        "GOLD2": 23493,
        "GRUENDEN_TEXT": 23361,
        "LINK": 23447,
        "MUSH": 23488,
        "MUSH2": 23494,
        "RANG": 23366,
        "TITEL": 23364
    },
    "HALL": {
        "GOTO": {
            "GILDEN": 292,
            "GILDEN_HL": 293,
            "SPIELER": 289,
            "SPIELER_HL": 290
        }
    },
    "HUTMANN": {
        "GOLDBET": 23567,
        "GOLDBET2": 23574,
        "INSTR": 23580,
        "MUSHBET": 23568,
        "MUSHBET2": 23575,
        "TEXT": 23566
    },
    "IF": {
        "AGB": 20,
        "ANLEITUNG": 24,
        "DATENSCHUTZ": 22,
        "FORUM": 16,
        "GOLD": 30,
        "IMPRESSUM": 14,
        "LOGOUT": 12,
        "PILZE": 32,
        "SHOP": 26,
        "SILBER": 31
    },
    "INVITE": {
        "SUCCESS": 22976,
        "TEXT": {
            "1": 22968,
            "2": 22970,
            "3": 22972
        }
    },
    "LOGIN": {
        "LEGAL": {
            "0": 80,
            "LEGAL_1": 71,
            "LEGAL_2": 74
        },
        "PASSWORD": 59
    },
    "MAINQUEST": {
        "MUSHHINT": 24360,
        "TEXT": 24359,
        "TITLE": 24358,
        "TITLE": 24309
    },
    "OPTION": {
        "CHANGE": 24250,
        "DOCHANGE": 24257,
        "FIELD": {
            "1": 24258,
            "2": 24259,
            "3": 24260
        },
        "IMAGE": 24247,
        "TITLE": 24246,
        "VER": 24282,
        "VOLUME": 24268
    },
    "POST": {
        "_FLUSH_TEXT": 24596,
        "GUILD": 23290,
        "LIMIT": 23288,
        "TITLE": {
            "INBOX": 23266,
            "READ": 23267,
            "WRITE": 23268
        }
    },
    "QO": {
        "CHOICE": {
            "1": 23596,
            "1_HL": 23601,
            "2": 23597,
            "2_HL": 23602,
            "3": 23598,
            "3_HL": 23603,
            "4": 23599,
            "4_HL": 23604,
            "5": 23600,
            "5_HL": 23605
        },
        "CHOOSE": 23590,
        "QUESTNAME": 23606,
        "QUESTSTODAY": 23618,
        "QUESTTEXT": 23607,
        "REWARD": {
            "TXT": 23608,
            "EXP": 23613,
            "GOLD": 23610,
            "ITM": 23614,
            "SILVER": 23612
        },
        "TIME": 23615
    },
    "SCR": {
        "ARBEITEN": {
            "TEXT": 296,
            "TEXT2": 297,
            "TIME": 315
        },
        "CHAR": {
            "AUSDAUER": 365,
            "AUSDAUER_CAPTION": 375,
            "BEWEGLICHKEIT": 364,
            "BEWEGLICHKEIT_CAPTION": 374,
            "EHRE": 22956,
            "EXPLABEL": 359,
            "GILDE": 22955,
            "INTELLIGENZ": 366,
            "INTELLIGENZ_CAPTION": 376,
            "KAMPFWERT": 369,
            "KAMPFWERT_CAPTION": 379,
            "LEBEN": 370,
            "LEBEN_CAPTION": 380,
            "NAME": 355,
            "PREIS1": 388,
            "RUESTUNG": 371,
            "RUESTUNG_CAPTION": 381,
            "SCHADEN": 368,
            "SCHADEN_CAPTION": 378,
            "SILBER1": 398,
            "STAERKE": 363,
            "STAERKE_CAPTION": 373,
            "WIDERSTAND": 372,
            "WIDERSTAND_CAPTION": 382,
            "WILLENSKRAFT": 367,
            "WILLENSKRAFT_CAPTION": 377
        }
    },
    "STALL": {
        "GAIN": 23347,
        "GOLD": 23353,
        "LAUFZEIT": 23346,
        "MUSH": 23355,
        "SCHATZ": 23348,
        "SCHATZGOLD": 23350,
        "SCHATZSILBER": 23352,
        "TEXT": 23345,
        "TITEL": 23344
    },
    "AGB": 70,
    "ARENA_DELAY": 23303,
    "ARENA_TEXT": 23299,
    "BEARD": 190,
    "BROWS": 188,
    "COLOR": 195,
    "COMPARE": 24626,
    "COPYCAT_NAME": 24738,
    "COUNTRY": 25617,
    "CS": 24484,
    "DAMAGE_INDICATOR": 24196,
    "DATENSCHUTZ": 73,
    "DISCONNECTED": 24368,
    "DUNGEON_CONGRATS": 24355,
    "EARS": 192,
    "ERROR": 61,
    "EYES": 189,
    "FORGOT_PASSWORD": 63,
    "FUCK": 85,
    "GOTO_LOGIN": 65,
    "GOTO_SIGNUP": 67,
    "HAIR": 187,
    "HERO_OF_THE_DAY": 24211,
    "HERO_OF_THE_DAY_TITLE": 24210,
    "HLMAINQUESTS_TITLE": 24762,
    "LIFEBAR_CHAR": 24162,
    "LIFEBAR_OPP": 24163,
    "LM": 24285,
    "MOUTH": 186,
    "NAME": 50,
    "NAMERANK_CHAR": 24156,
    "NAMERANK_OPP": 24157,
    "NOSE": 191,
    "PASSWORD": 54,
    "PW_GOTO_LOGIN": 25616,
    "QUESTBAR_TEXT": 23210,
    "SCREEN_TITLE": 113,
    "SERVER": 25620,
    "SPECIAL": 193,
    "SPECIAL2": 194,
    "TIMEBAR_TEXT": 23545,
    "TOILET_AURA": 24620,
    "TOWER_BOOSTPRICELABEL": 25604,
    "TOWER_EXPLABEL": 25603,
    "TV_CHECKBOX": 25705,
    "WINDOW_TITLE": 46,
    "WINDOW_TITLE_HIGH": 25614,
    "WORLD_TITLE": 25623
}


# ???
BNC = {
    "CHAR": {
        "ACH": 23076,
        "PREISE": 409,
        "RIGHTPANE": 23078,
        "SECONDPROP": 408
    },
    "CHARSPECIALOVL": {
        "DARKELF_M": 351,
        "DWARF_F": 349,
        "DWARF_M": 343,
        "ELF_F": 347,
        "ELF_M": 341,
        "GNOM_M": 350,
        "GOBLIN_F": 345,
        "GOBLIN_M": 342,
        "HUMAN_F": 348,
        "HUMAN_M": 344,
        "ORC_F": 346
    },
    "CITY": {
        "CA_OVL": 264,
        "ORK": 266,
        "OVERLAYS": 267,
        "STATISTEN": 268,
        "ZWERG": 265
    },
    "GILDE": {
        "CHAT": 23449,
        "CREST": 24541,
        "CREST_CONTROLS": 24570,
        "DIALOG": {
            "INVITE": 23516,
            "KICK": 23514,
            "MASTER": 23515,
            "RAID": 23518,
            "REVOLT": 23517
        },
        "GEBAEUDE": 23486,
        "KATAPULT": 24528,
        "LISTBUTTONS": 23396,
        "SCHATZ": 23497,
        "SET": {
            "MASTER": 23402,
            "MEMBER": 23400,
            "OFFICER": 23401
        }
    },
    "HUTBECHER": {
        "1_HOVER": 23582,
        "2_HOVER": 23583,
        "3_HOVER": 23584
    },
    "HUTMANN": {
        "BECHERCHOOSE": 23585,
        "LOST": 23587,
        "PLACEBET": 23581,
        "WON": 23586
    },
    "IF": {
        "BUTTONS": 112,
        "MAIN": 9,
        "OVL": 10,
        "STATS": 33
    },
    "POST": {
        "DAWN": 23263,
        "FLUSHMSG": 24592,
        "LIST": 23291,
        "NIGHT": 23264,
        "READ": 23293,
        "WRITE": 23292
    },
    "SCREEN": {
        "ALBUM": 24438,
        "ARBEITEN": {
            "TXT": 316,
            "SUCCESS": 318,
            "WAIT": 317
        },
        "ARENA": {
            "TXT": 23304,
            "DAWN": 23307,
            "DAY": 23305,
            "NIGHT": 23306
        },
        "BUILDCHAR": 116,
        "CHAR": 23079,
        "CHAR_GOLDEN": 24531,
        "CITY": {
            "TXT": 263,
            "DAWN": 261,
            "DAY": 262,
            "NIGHT": 260
        },
        "DEALER": 23256,
        "DEALER2": 23257,
        "DEMO": 24243,
        "DISCONNECTED": 24370,
        "EMAIL_NAG": 24375,
        "FIDGET": 23103,
        "FIGHT": 24240,
        "GILDE_GRUENDEN": 23498,
        "GILDEN": 23499,
        "HALLE": 283,
        "HLMAINQUESTS": 24767,
        "HUTMANN": 23588,
        "INVITE": 22974,
        "MAINQUEST": 24366,
        "MAINQUESTS": 24353,
        "OPTION": 24308,
        "POST": 23294,
        "QUEST": 23213,
        "SHAKES": 23104,
        "STALL": 23358,
        "TAVERNE": 23532,
        "TOILET": 24598,
        "TOWER": 24716,
        "WITCH": 25635,
        "WORLDMAP": 23106
    },
    "VOLK": {
        "BTNS": {
            "ALL": 165,
            "F": 163,
            "M": 164
        }
    },
    "WINDOW": {
        "ARENA": 23302,
        "FORGOT_PASSWORD": 79,
        "LOGIN": 77,
        "SIGNUP": 78
    },
    "ALBUM_CAT_IN": 24435,
    "BEERFEST": 24481,
    "BEEROFFER": 23630,
    "BUBBLES": 281,
    "CHARIMG": 329,
    "CHARIMG2": 340,
    "DUNGEON_CONGRATS": 24356,
    "FIDGET_DAY": 23090,
    "FIDGET_NIGHT": 23091,
    "FIGHT_REWARDS": 24208,
    "FUCK": 81,
    "HERO_OF_THE_DAY": 24212,
    "INVITE_INPUTDIALOGUE": 22975,
    "INVITE_SUCCESS": 22978,
    "OPPIMG": 23844,
    "OPPIMG2": 23855,
    "OPTION_DOCHANGE": 24306,
    "OPTION_DORESEND": 24307,
    "PURCHASE_BUTTONS": 25634,
    "QUESTOFFER": 23625,
    "SCR_BUILDCHAR": 118,
    "SPECIAL_ACTION": 24496,
    "STALL_BOESE": 23342,
    "STALL_GUT": 23341,
    "TAVERNE_CAS": 23533,
    "TAVERNE_QUESTOVL": 23539,
    "TOILET_OVERLAYS": 24613,
    "TOWER_BOOSTPRICE": 25608,
    "TOWER_PIECES": 24752
}


# Buttons
BTN = {
    "CHAR": {
        "ALBUM": 22964,
        "ATTACK": 22961,
        "GILDE": 22962,
        "INVITE": 22963,
        "MESSAGE": 22960,
        "ROB": 24741
    },
    "DEALER": {
        "BUY": {
            "1": 23223,
            "2": 23224,
            "3": 23225
        }
    },
    "GILDE": {
        "ATTACK": 23381,
        "CHAT_DOWN": 23404,
        "CHAT_UP": 23403,
        "CREST": {
            "CHANGE_NEXT": 24556,
            "CHANGE_PREV": 24555,
            "COLOR_NEXT": 24554,
            "COLOR_PREV": 24553,
            "GOTO_GEBAEUDE": 24542,
            "OK": 24589
        },
        "DEFEND": 23382,
        "DEMOTE": 23375,
        "DIALOG": {
            "CANCEL": 23508,
            "OK": {
                "INVITE": 23511,
                "KICK": 23509,
                "MASTER": 23510,
                "RAID": 23513,
                "REVOLT": 23512
            }
        },
        "GEBAEUDE_GOTO_CREST": 24540,
        "GEBAEUDE_IMPROVE": 23480,
        "GOLD": 23491,
        "GRUENDEN": 23363,
        "INVITE": 23371,
        "KATAPULT": 24507,
        "KICK": 23373,
        "MASTER": 23376,
        "MUSH": 23492,
        "PROFILE": 23372,
        "PROMOTE": 23374,
        "RAID": 23378,
        "REVOLT": 23377,
        "SCROLL_DOWN": 23370,
        "SCROLL_UP": 23369
    },
    "HALL": {
        "DOWN": 285,
        "GOTO": 286,
        "UP": 284
    },
    "HUTMANN": {
        "BACK": 23579,
        "GOLDBET": 23571,
        "MUSHBET": 23572,
        "OK": 23578
    },
    "IF": {
        "ARBEITEN": 101,
        "ARENA": 100,
        "CHARAKTER": 106,
        "EHRENHALLE": 109,
        "EXIT": 115,
        "GILDEN": 108,
        "LOGIN": 48,
        "OPTIONEN": 111,
        "PILZDEALER": 105,
        "POST": 107,
        "REQUEST_PASSWORD": 49,
        "SCHMIEDE": 102,
        "SIGNUP": 47,
        "STALL": 104,
        "TAVERNE": 99,
        "WELTKARTE": 110,
        "ZAUBERLADEN": 103
    },
    "OPTION": {
        "CHANGE_EMAIL": 24253,
        "CHANGE": {
            "NAME": 24251,
            "PASSWORD": 24254,
            "IMG": 24249
        },
        "DELETE": 24255,
        "DOCHANGE": 24264,
        "LUXURY": 24529,
        "RESEND": 24252
    },
    "POST": {
        "ACCEPT": 23285,
        "CANCEL": 23283,
        "DELETE": 23271,
        "DELETEREAD": 23272,
        "DOWN": 23276,
        "FLUSH": {
            "TXT": 24591,
            "CANCEL": 24593,
            "OK": 24594
        },
        "FORWARD": 24539,
        "PROFILE": 23273,
        "READ": {
            "TXT": 23270,
            "NEXT": 23277,
            "PREV": 23278
        },
        "REPLY": 23286,
        "RETURN": 23284,
        "SEND": 23282,
        "UP": 23275,
        "VIEWFIGHT": 23287,
        "WRITE": 23274
    },
    "SCR": {
        "ARBEITEN": {
            "CANCEL": 311,
            "CLOSE": 312,
            "OK": 310
        },
        "CHAR_STEIGERN1": 383,
        "INVITE_OK": 22973
    },
    "ALBUM_NEXT": 24437,
    "ALBUM_PREV": 24436,
    "ARENA_OK": 23301,
    "BACK": 114,
    "BATTLE_SKIP": 24188,
    "BATTLE_SKIPONE": 24189,
    "BEARD_MINUS": 168,
    "BEARD_PLUS": 169,
    "BO_BUY": 23629,
    "BROWS_MINUS": 174,
    "BROWS_PLUS": 175,
    "COLOR_MINUS": 184,
    "COLOR_PLUS": 185,
    "COUNTRY_NEXT": 25619,
    "COUNTRY_PREV": 25618,
    "CREATE_CHARACTER": 202,
    "DEMO_LOGOFF": 24242,
    "DISCONNECTED": 24369,
    "EARS_MINUS": 176,
    "EARS_PLUS": 177,
    "EMAIL_NAG": 24374,
    "EYES_MINUS": 172,
    "EYES_PLUS": 173,
    "FIGHT_OK": 24187,
    "FIGHT_SKIP": 24186,
    "HAIR_MINUS": 178,
    "HAIR_PLUS": 179,
    "INVITE_SUCCESS_OK": 22977,
    "MAINQUEST_START": 24361,
    "MODIFY_CHARACTER": 203,
    "MOUTH_MINUS": 166,
    "MOUTH_PLUS": 167,
    "NEXT_COPYCAT": 24740,
    "NEXT_PLAYER": 357,
    "NOSE_MINUS": 170,
    "NOSE_PLUS": 171,
    "OPTIONEN": 24700,
    "PLAYER_GUILD_INVITE": 24485,
    "PREV_COPYCAT": 24739,
    "PREV_PLAYER": 356,
    "PURCHASE": 25624,
    "PURCHASE_MAX": 25633,
    "QO_RETURN": 23617,
    "QO_START": 23616,
    "QUEST_CANCEL": 23211,
    "QUEST_SKIP": 23212,
    "RANDOM": 119,
    "SERVER_NEXT": 25622,
    "SERVER_PREV": 25621,
    "SHOPS_NEWWAREZ": 23102,
    "SPECIAL2_MINUS": 182,
    "SPECIAL2_PLUS": 183,
    "SPECIAL_MINUS": 180,
    "SPECIAL_PLUS": 181,
    "STALL_BUY": 23357,
    "TOWER_STEIGERN1": 24788,
    "TOWER_TRY": 24791,
}


# Configuration file indices
CFG = {
    "ALLOW_SKIP_QUEST": 34,
    "BACKGROUND_ID": 57,
    "BUFFED_URL": 19,
    "BUFFEDMODE": 15,
    "BULLSHIT_BOX": 50,
    "BULLSHIT_CID": 51,
    "CENSORED": 40,
    "DATAPROT_URL": 13,
    "DONT_SAVE_CID": 44,
    "FLAG_NAMES": 47,
    "FLAGS": 46,
    "FORUM_URL": 10,
    "GAMESTAFF_EMAIL": 36,
    "IDLE_POLLING": 33,
    "IMAGE_TIMEOUT": 21,
    "URL": 2,
    "IMPRINT_URL": 11,
    "INSTR_URL": 14,
    "INTERNAL_PIXEL": 41,
    "LANG_CODE": 1,
    "LANG_URL": 8,
    "LEGAL_URL": 12,
    "LIGHT_MODE": 45,
    "LOWRES_URL": 48,
    "MOBILE_PAYMENT_OLD": 55,
    "MOBILE_PAYMENT_URL": 56,
    "MOBILE_VALIDATION": 54,
    "MP_PROJECT": 18,
    "NO_CROSSDOMAIN": 9,
    "NO_TUNNELING_TIME": 27,
    "PAPAYA_FILE": 31,
    "PAPAYA_PATH": 30,
    "PAYMETHODS": 16,
    "PHP_TUNNEL_URL": 25,
    "PIXEL_CALL": 53,
    "POLL_TUNNEL_URL": 28,
    "PORT_FIREWALL": 6,
    "PORT_OFFSET": 4,
    "PORT_RANGE": 5,
    "RECONNECT": 24,
    "RELOAD_PIXEL": 42,
    "REROLL_IMG": 23,
    "RESEND_COUNT": 32,
    "RESPONSE_TIMEOUT": 20,
    "SERVER": 7,
    "SERVER_ID": 17,
    "SERVER_VERSION": 43,
    "SHOP_URL": 35,
    "SND_URL": 3,
    "SOCIAL_BUTTONS": 52,
    "SPONSOR_IMG": 22,
    "SPONSOR_URL": 49,
    "SUPPORT_EMAIL": 29,
    "TRACKING_PIXEL": 26,
    "TV_FUNCTION": 59,
    "TV_POLL_INTERVAL_LONG": 61,
    "TV_POLL_INTERVAL_NORMAL": 60,
    "WORLDS": 58,
}


# ???
CNT = {
    "ALBUM": {
        "CAT_OUT": 24430,
        "MONSTER": 24388,
        "MONSTER_FRAME": 24392,
        "WEAPON": {
            "1": 24396,
            "2": 24400,
            "3": 24404,
            "4": 24408,
            "5": 24412,
            "EPIC": 24416
        }
    },
    "CHANGE": {
        "PASSWORD": {
            "SMILEY": {
                "HAPPY": 24267,
                "NEUTRAL": 24266,
                "SAD": 24265
            }
        }
    },
    "CHAR": {
        "ACH": 23033,
        "POTION": 23073,
        "SLOT": {
            "1": 410,
            "2": 411,
            "3": 412,
            "4": 413,
            "5": 414,
            "6": 415,
            "7": 416,
            "8": 417,
            "9": 418,
            "10": 419,
            "11": 420,
            "12": 421,
            "13": 422,
            "14": 423,
            "15": 424,
            "FIDGET": {
                "1": 425,
                "2": 426,
                "3": 427,
                "4": 428,
                "5": 429,
                "6": 430
            },
            "SHAKES": {
                "1": 431,
                "2": 432,
                "3": 433,
                "4": 434,
                "5": 435,
                "6": 436
            }
        }
    },
    "FIGHT": {
        "BOX3": 24200,
        "ONO": 24220,
        "OPP_BORDER": 24185,
        "REWARDGOLD": 24202,
        "REWARDMUSH": 24206,
        "REWARDSILVER": 24204,
        "SLOT": 24201
    },
    "GILDE": {
        "ATTACK": 23389,
        "CREST": 24559,
        "CREST_COLOR": 24584,
        "DEFENCE": 23390,
        "GEBAEUDE_GOLD": 23474,
        "GEBAEUDE_MUSH": 23477,
        "GOLD": 23489,
        "GOLD2": 23495,
        "LINK": 23446,
        "LIST": 23368,
        "MUSH": 23490,
        "MUSH2": 23496,
        "RANG": 23365
    },
    "HALL": {
        "GOTO_GILDEN": 291,
        "GOTO_SPIELER": 288,
        "LIST": 294
    },
    "HLMQS": {
        "BUTTON": 24768,
        "COMPLETED": 24783,
        "DISABLED": 24778
    },
    "HUTMANN": {
        "GOLDBET": 23569,
        "GOLDBET2": 23576,
        "MUSHBET": 23570,
        "MUSHBET2": 23577
    },
    "IF": {
        "AGB": 19,
        "ANLEITUNG": 23,
        "DATENSCHUTZ": 21,
        "DRAGON": {
            "1": 86,
            "2": 87,
            "3": 88,
            "4": 89,
            "5": 90,
            "6": 91,
            "7": 92,
            "8": 93,
            "9": 94,
            "10": 95,
            "11": 96,
            "12": 97,
            "13": 98
        },
        "FORUM": 15,
        "HUTMANN": 39,
        "IMPRESSUM": 13,
        "LOGOUT": 11,
        "SHOP": 25,
        "SPONSOR": 18,
        "TOILET": 25611,
    },
    "MAINQUEST": {
        "ENEMY": 24364,
        "ENEMY_BORDER": 24363,
        "SLOT": 24362
    },
    "MQS": {
        "BUTTON": 24311,
        "COMPLETED": 24342,
        "DISABLED": 24331
    },
    "QO": {
        "CHOICE": {
            "1": 23591,
            "2": 23592,
            "3": 23593,
            "4": 23594,
            "5": 23595
        },
        "REWARDGOLD": 23609,
        "REWARDSILVER": 23611
    },
    "SCR": {
        "ARBEITEN": {
            "BAR": 313,
            "FILL": 314
        },
        "CHAR": {
            "GILDE": 22957,
            "GOLD1": 393,
            "NAME": 354,
            "SILBER1": 403
        }
    },
    "STALL": {
        "GOLD": 23354,
        "MUSH": 23356,
        "SCHATZGOLD": 23349,
        "SCHATZSILBER": 23351
    },
    "TOWER": {
        "BOOSTCOIN": 25607,
        "FACE": 0x6400,
        "SCROLLAREA": 24743,
        "SLOT": 24720,
        "WINDOW": 24753
    },
    "AGB": 69,
    "BULLET_CHAR": 24194,
    "BULLET_OPP": 24195,
    "CREATE_GOTO_LOGIN": 200,
    "DATENSCHUTZ": 72,
    "EMAIL_RESEND": 24372,
    "FORGOT_PASSWORD": 62,
    "GOTO_LOGIN": 64,
    "GOTO_SIGNUP": 66,
    "LIFEBAR_FILL_OPP": 24161,
    "LIFEBAR_OPP": 24159,
    "POST_GUILD": 23289,
    "POST_LIST": 23269,
    "PW_GOTO_LOGIN": 25615,
    "QUEST_SLOT": 23619,
    "SHIELD_CHAR": 24192,
    "SHIELD_OPP": 24193,
    "SOCIAL": 24460,
    "TIMEBAR_FILL": 23544,
    "WEAPON_CHAR": 24190,
    "WEAPON_OPP": 24191,
    "WITCH_SCROLL": 25641,
}


# Image Indices
IMG = {
    "ALBUM": {
        "BG": 24376,
        "CAT_IN": 24425,
        "CAT_OUT": 24420
    },
    "ARENA": {
        "BG": {
            "DAWN": 23297,
            "DAY": 23295,
            "NIGHT": 0x5B00
        },
        "FEUER": 23298
    },
    "BO": {
        "PORTRAIT": {
            "NO": 23627,
            "OK": 23626,
            "TH": 23628
        }
    },
    "BUBBLE": {
        "ARENA": 269,
        "DEALER": 275,
        "ESEL": 270,
        "KRISTALL": 273,
        "ORAKEL": 274,
        "POST": 276,
        "RUHMESHALLE": 272,
        "SHAKES": 279,
        "STATUE": 278,
        "TAVERNE": 271,
        "WACHE": 277,
        "ZAUBERLADEN": 280
    },
    "CHAR": {
        "ACH": 22993,
        "ALBUM": 22965,
        "MOUNT_1": 22979,
        "RUESTUNG": 22991,
        "BACKGROUND": 319,
        "BACKGROUND2": 330,
        "BEARD": 321,
        "BEARD2": 332,
        "BROWS": 324,
        "BROWS2": 335,
        "EARS": 325,
        "EARS2": 336,
        "EYES": 323,
        "EYES2": 334,
        "HAIR": 326,
        "HAIR2": 337,
        "MOUTH": 320,
        "MOUTH2": 331,
        "NOSE": 322,
        "NOSE2": 333,
        "SPECIAL": 327,
        "SPECIAL12": 338,
        "SPECIAL2": 328,
        "SPECIAL22": 339
    },
    "CITY": {
        "ARENA": {
            "IMG": 222,
            "ONO": {
                "1": 223,
                "2": 224,
                "3": 225,
                "4": 226
            }
        },
        "DEALER": {
            "IMG": 228,
            "ANI": {
                "1": 229,
                "2": 230,
                "3": 231,
                "4": 232,
                "5": 233
            }
        },
        "ELF1": 0x0101,
        "ELF2": 258,
        "ESEL1": 235,
        "ESEL2": 236,
        "MAGIER1": 249,
        "MAGIER2": 250,
        "ORK1": 251,
        "ORK2": 252,
        "POST": 240,
        "RUHMESHALLE": 220,
        "SANDWICH1": 253,
        "SANDWICH2": 254,
        "SCHILD": {
            "1": 245,
            "2": 246,
            "3": 247,
            "4": 248
        },
        "SHAKES": 216,
        "TAVERNE": 238,
        "WACHE_DAY": 242,
        "WACHE_NIGHT": 243,
        "ZAUBERLADEN": 218,
        "ZWERG1": 0xFF,
        "ZWERG2": 0x0100
    },
    "DEALER": {
        "ARM": {
            "1": 23215,
            "2": 23216,
            "3": 23217,
            "4": 23218
        },
        "AUGEN": {
            "1": 23219,
            "2": 23220,
            "3": 23221,
            "4": 23222
        },
        "EFFECT": 23253,
        "PAYICON": {
            "1": 23226,
            "2": 23227,
            "3": 23228,
            "4": 23229,
            "5": 23230,
            "6": 23231,
            "7": 23232,
            "8": 23233,
            "9": 23234
        },
        "PAYICONHOVER": {
            "1": 23235,
            "2": 23236,
            "3": 23237,
            "4": 23238,
            "5": 23239,
            "6": 23240,
            "7": 23241,
            "8": 23242,
            "9": 23243
        }
    },
    "DUNGEON_CONGRATS": 24354,
    "EMPTY": {
        "SLOT": {
            "1": 438,
            "9_1": 446,
            "9_2": 447,
            "9_3": 448,
            "10": 449
        }
    },
    "FIDGET": {
        "AFFE": {
            "1": 23080,
            "2": 23081,
            "3": 23082
        },
        "BLINZELN": 23089,
        "DAY": 23085,
        "EPCIOVL": 24536,
        "IDLE": 23086,
        "NACHTKERZE": 23084,
        "NIGHT": 23088,
        "SALE": 23087,
        "TAGKERZE": 23083
    },
    "FIGHT": {
        "ARROW_SMASH": 24219,
        "BOX1": 24198,
        "BOX2": 24199,
        "CHAR_BORDER": 24184,
        "COPYCAT": 24759,
        "MUSH": 24534,
        "ONO": 24213
    },
    "GILDE": {
        "ATTACK_GRAY": 23383,
        "ATTACK_OK": 23384,
        "CREST": {
            "IMG": 24543,
            "COLOR": {
                "FILLIN": 24579,
                "SELECTED": 24575,
                "UNSELECTED": 24571
            },
            "SHIELDCOLOR": 24590
        },
        "DEFEND_GRAY": 23385,
        "DEFEND_OK": 23386,
        "GEBAEUDE": 23450,
        "GEBAEUDE_IMPROVE_GRAY": 23483,
        "INVITE_GRAY": 23391,
        "KATAPULT_GRAY": 24517,
        "KATAPULT_OK": 24518,
        "KICK_GRAY": 23393,
        "MASTER_GRAY": 23395,
        "PROFILE_GRAY": 23392,
        "PROMOTE_GRAY": 23394,
        "RAHMEN": 23360,
        "RAID_GRAY": 23379,
        "RAID_OK": 23380,
        "RANK": 23397,
        "GILDEN_BG": 23359
    },
    "HLMQS": {
        "BUTTON": 24773,
        "COMPLETED": 24764,
        "DISABLED": 24763,
        "TOWER_COMPLETED": 24766,
        "TOWER_DISABLED": 24765
    },
    "HUTBECHER": {
        "1_CLICK": 23555,
        "1_HOVER": 23554,
        "1_IDLE": 23553,
        "2_CLICK": 23558,
        "2_HOVER": 23557,
        "2_IDLE": 23556,
        "3_CLICK": 23561,
        "3_HOVER": 23560,
        "3_IDLE": 23559
    },
    "HUTFACE": {
        "HOVER": 23548,
        "IDLE": 23547,
        "LOSE": {
            "1": 23550,
            "2": 23551,
            "3": 0x5C00
        },
        "WIN": 23549
    },
    "IF": {
        "BACKGROUND": 5,
        "GOLD": 27,
        "HUTMANN": {
            "1": 37,
            "2": 38,
            "OVL": 40
        },
        "JAEGER": 35,
        "KRIEGER": 34,
        "LEFT": 6,
        "MAGIER": 36,
        "MAIN": 8,
        "PILZE": 29,
        "SILBER": 28,
        "SPONSOR": 17,
        "TOILET": 25610,
        "TOP": 7,
        "WINDOW": {
            "IMG": 45,
            "HIGH": 25612,
            "TOPHALF": 25613
        }
    },
    "KASTE": {
        "1_ACT": 158,
        "1_IDLE": 157,
        "2_ACT": 160,
        "2_IDLE": 159,
        "3_ACT": 162,
        "3_IDLE": 161
    },
    "MQS": {
        "BUTTON": 24321,
        "COMPLETED": 24352,
        "DISABLED": 24341
    },
    "OP": {
        "BEARD": 23836,
        "BEARD2": 23847,
        "BROWS": 23839,
        "BROWS2": 23850,
        "EARS": 23840,
        "EARS2": 23851,
        "HAIR": 23841,
        "HAIR2": 23852,
        "SPECIAL": 23842,
        "SPECIAL12": 23853,
        "SPECIAL2": 23843,
        "SPECIAL22": 23854
    },
    "OPP": {
        "BACKGROUND": 23834,
        "BACKGROUND2": 23845,
        "EYES": 23838,
        "EYES2": 23849,
        "MONSTER": 24800,
        "MOUTH": 23835,
        "MOUTH2": 23846,
        "NOSE": 23837,
        "NOSE2": 23848
    },
    "OPTION": {
        "BOX": 24256,
        "FLAG": 24627,
        "IMAGEBORDER": 24248
    },
    "PASSWORD": {
        "SMILEY": {
            "HAPPY": 58,
            "NEUTRAL": 57,
            "SAD": 56
        }
    },
    "POST": {
        "BG": 23258,
        "DAWN1": 23259,
        "DAWN2": 23260,
        "NIGHT1": 23261,
        "NIGHT2": 23262
    },
    "QUESTBAR": {
        "BG": 23207,
        "FILL": 23208,
        "LIGHT": 23209
    },
    "SCR": {
        "BUILDCHAR_BACKGROUND": 117,
        "CHAR": {
            "BG": {
                "IMG": 352,
                "GOLDEN": 24530,
                "RIGHT": 353
            },
            "EXPBAR": 358,
            "KLASSE": {
                "1": 22952,
                "2": 22953,
                "3": 22954
            }
        },
        "CITY": {
            "BACKG": {
                "DAWN": 205,
                "DAY": 206,
                "NIGHT": 204
            },
            "CLOUDS": {
                "DAWN": 211,
                "DAY": 212,
                "NIGHT": 210
            },
            "FOREG": {
                "DAWN": 214,
                "DAY": 215,
                "NIGHT": 213
            },
            "MAIN": {
                "DAWN": 208,
                "DAY": 209,
                "NIGHT": 207
            }
        },
        "DEALER_BG": 23214,
        "FIDGET_BG": 23101,
        "HALLE_BG": 282,
        "QUEST_BG_1": 23107,
        "SHAKES_BG": 23100,
        "TOWER_BG": 24792,
        "WORLDMAP_BG": 23105
    },
    "SHAKES": {
        "BLINZELN1": 23098,
        "BLINZELN2": 23099,
        "DAY": 23092,
        "EPCIOVL": 24537,
        "IDLE": {
            "IMG": 23093,
            "1": 23095,
            "2": 23096,
            "3": 23097
        },
        "NIGHT": 23094
    },
    "STALL": {
        "ARME": {
            "1": 23312,
            "2": 23313,
            "3": 23314,
            "4": 23315,
            "5": 23316
        },
        "BG_BOESE": 23309,
        "BG_GUT": 23308,
        "DAWN": 23310,
        "NIGHT": 23311,
        "OVL": {
            "BOESE": {
                "1": 23321,
                "2": 23322,
                "3": 23323,
                "4": 23324
            },
            "GUT": {
                "1": 23317,
                "2": 23318,
                "3": 23319,
                "4": 23320
            }
        }
    },
    "TAVERN": {
        "ADVENT": 25711,
        "BARKEEPER1": 23520,
        "BARKEEPER2": 23521,
        "BARKEEPER_HINT": 24538,
        "BAROVL": 23540,
        "BG": 23519,
        "HUTMANN_BLINZELN": 23522,
        "HUTMANN_OVL": 23523,
        "KERZEN": 23525,
        "QUEST": {
            "1": 23526,
            "2": 23527,
            "3": 23528,
            "4": 23529,
            "5": 23530
        },
        "QUESTOVL": {
            "1": 23534,
            "2": 23535,
            "3": 23536,
            "4": 23537,
            "5": 23538
        }
    },
    "TOILET": {
        "IMG": 24599,
        "CHAIN": 24610,
        "DROP": 24618,
        "FLUSH": 24602,
        "IDLE": 24617
    },
    "TOWER": {
        "BASE": 24744,
        "BG": 24715,
        "LEVEL": 24745,
        "PORTRAIT": 24756,
        "PORTRAIT": 24717,
        "ROOF": 24748,
        "WINDOW": {
            "BURNT": 24751,
            "CLOSED": 24750,
            "OPEN": 24749
        }
    },
    "VOLK": {
        "1": {
            "F_ACT": 145,
            "F_IDLE": 137,
            "M_ACT": 129,
            "M_IDLE": 120
        },
        "2": {
            "F_ACT": 146,
            "F_IDLE": 138,
            "M_ACT": 130,
            "M_IDLE": 121
        },
        "3": {
            "F_ACT": 147,
            "F_IDLE": 139,
            "M_ACT": 131,
            "M_IDLE": 122
        },
        "4": {
            "F_ACT": 148,
            "F_IDLE": 140,
            "M_ACT": 132,
            "M_IDLE": 123
        },
        "5": {
            "F_ACT": 149,
            "F_IDLE": 141,
            "M_ACT": 133,
            "M_IDLE": 124
        },
        "6": {
            "F_ACT": 150,
            "F_IDLE": 142,
            "M_ACT": 134,
            "M_IDLE": 125
        },
        "7": {
            "F_ACT": 151,
            "F_IDLE": 143,
            "M_ACT": 135,
            "M_IDLE": 126
        },
        "8": {
            "F_ACT": 152,
            "F_IDLE": 144,
            "M_ACT": 136,
            "M_IDLE": 127
        },
        "MARKER": 128
    },
    "WEAPON": {
        "BONE": 24223,
        "CLAW": 24231,
        "CLAW2": 24232,
        "CLAW3": 24233,
        "CLAW4": 24234,
        "FIRE": 24228,
        "FIRE2": 24229,
        "FIRE3": 24230,
        "FIST": 24221,
        "SPLAT": 24225,
        "SPLAT2": 24226,
        "SPLAT3": 24227,
        "STICK": 24224,
        "STONEFIST": 24222,
        "SWOOSH": 24235,
        "SWOOSH2": 24236,
        "SWOOSH3": 24237
    },
    "BEERFEST": 24480,
    "BG_DEMO": 24241,
    "GOLD": 42,
    "PILZE": 44,
    "SILBER": 43,
    "F_ACT": 156,
    "F_IDLE": 155,
    "FILLSPACE": 68,
    "GOLDEN_FRAME": 24506,
    "GOTO_WITCH_OVL": 25672,
    "GUILD_BATTLE_BG": 24238,
    "GUILD_RAID_BG": 24239,
    "HUTKUGEL": 23565,
    "HUTMANN_BG": 23546,
    "HUTMANN_MUSHBET_DISABLED": 23573,
    "LIFEBAR_CHAR": 0x5E5E,
    "LIFEBAR_FILL_CHAR": 24160,
    "LUXURY_SELLER": 24535,
    "M_ACT": 154,
    "M_IDLE": 153,
    "MAINQUEST_COMINGSOON": 24365,
    "MIRROR_PIECE": 24701,
    "NO_SHIELD": 25609,
    "QO_PORTRAIT1": 23620,
    "SLOT_SUGGESTION": 437,
    "SOCIAL": 24440,
    "SPECIAL_ACTION": 24486,
    "TIMEBAR_BG": 23542,
    "TIMEBAR_FILL": 23543,
    "TV": 25707,
    "UNKNOWN_ENEMY": 24439,
    "WITCH": 25637,
    "WITCH_ANI": 25673,
}


# Absolute positions X/Y
POS = {
    "BUBBLE": {
        "ARENA_X": 375,
        "ARENA_Y": 228,
        "DEALER_X": 606,
        "DEALER_Y": 480,
        "ESEL_X": 289,
        "ESEL_Y": 495,
        "KRISTALL_X": 582,
        "KRISTALL_Y": 175,
        "ORAKEL_X": 782,
        "ORAKEL_Y": 155,
        "POST_X": 775,
        "POST_Y": 440,
        "RUHMESHALLE_X": 1076,
        "RUHMESHALLE_Y": 593,
        "SHAKES_X": 1032,
        "SHAKES_Y": 517,
        "STATUE_X": 1136,
        "STATUE_Y": 381,
        "TAVERNE_X": 468,
        "TAVERNE_Y": 441,
        "WACHE_X": 500,
        "WACHE_Y": 625,
        "ZAUBERLADEN_X": 964,
        "ZAUBERLADEN_Y": 343
    },
    "CHAR": {
        "MOUNT_X": 805,
        "MOUNT_Y": 429,
        "NAME_X": 410,
        "NAME_Y": 345,
        "PLAYER": {
            "X1": 830,
            "X2": 1030,
            "Y": 715
        },
        "PROP": {
            "COLUMN": {
                "1_X": 304,
                "2_X": 405,
                "3_X": 470,
                "4_X": 520,
                "5_X": 520,
                "6_X": 650
            },
            "Y": 517
        },
        "SLOTS": {
            "LEFT_X": 304,
            "R4C2_X": 441,
            "R4C3_X": 543,
            "R5C2_X": 398,
            "R5C3_X": 493,
            "R5C4_X": 588,
            "RIGHT_X": 680,
            "ROW2_Y": 217,
            "ROW3_Y": 317,
            "ROW4_Y": 417,
            "ROW5_Y": 679,
            "TOP_Y": 117
        }
    },
    "CITY": {
        "ARENA_X": 280,
        "ARENA_Y": 100,
        "CA": {
            "ARENA_X": 280,
            "ARENA_Y": 170,
            "BUH_X": 1105,
            "BUH_Y": 410,
            "DEALER_X": 570,
            "DEALER_Y": 580,
            "ESEL_X": 280,
            "ESEL_Y": 618,
            "POST_X": 830,
            "POST_Y": 500,
            "RUHMESHALLE_X": 1150,
            "RUHMESHALLE_Y": 400,
            "SHAKES_X": 945,
            "SHAKES_Y": 550,
            "TAVERNE_X": 440,
            "TAVERNE_Y": 530,
            "WACHE_X": 670,
            "WACHE_Y": 570,
            "ZAUBERLADEN_X": 985,
            "ZAUBERLADEN_Y": 410
        },
        "DEALER_X": 578,
        "DEALER_Y": 593,
        "ELF_X": 943,
        "ELF_Y": 405,
        "ESEL_X": 280,
        "ESEL_Y": 618,
        "MAGIER_X": 655,
        "MAGIER_Y": 630,
        "ORK_X": 850,
        "ORK_Y": 580,
        "POST_X": 872,
        "POST_Y": 546,
        "RUHMESHALLE_X": 1135,
        "RUHMESHALLE_Y": 340,
        "SANDWICH_X": 780,
        "SANDWICH_Y": 610,
        "SCHILD_X": 739,
        "SCHILD_Y": 623,
        "SHAKES_X": 1023,
        "SHAKES_Y": 585,
        "TAVERNE_X": 471,
        "TAVERNE_Y": 560,
        "WACHE_X": 670,
        "WACHE_Y": 582,
        "ZAUBERLADEN_X": 1014,
        "ZAUBERLADEN_Y": 446,
        "ZWERG_X": 480,
        "ZWERG_Y": 580
    },
    "DEALER": {
        "AKTION_X": 290,
        "AKTION_Y": 235,
        "ARM_X": 455,
        "ARM_Y": 265,
        "AUGEN_X": 605,
        "AUGEN_Y": 265,
        "MENU_X": 760,
        "MENU_Y": 430,
        "SPONSOR_X": 1080,
        "SPONSOR_Y": 520
    },
    "DEMO": {
        "X": 1050,
        "Y": 700,
        "Y": 380
    },
    "FIGHT": {
        "Y": 710,
        "CHAR": {
            "PROP": {
                "COLUMN": {
                    "1_X": 324,
                    "2_X": 450,
                    "3_X": 1059,
                    "4_X": 1185
                },
                "Y": 520
            },
            "X": 315
        },
        "REWARD": {
            "EXP_X": 535,
            "GOLD_X": 1000,
            "GOLD_Y": 640,
            "MUSH_Y": 610
        },
        "SLOT_Y": 580,
        "SUMMARY_Y": 520,
        "WEAPONS_Y": 350
    },
    "GILDE": {
        "ATTACKX": 450,
        "ATTACKLABEL_X": 570,
        "CHAT": {
            "FIELD_Y": 743,
            "X": 305,
            "Y": 624
        },
        "DEFENDX": 505,
        "GEBAEUDE_X": 310,
        "GEBAEUDE_Y": 162,
        "GOLD_Y": 488,
        "GOLDMUSH_X": 670,
        "LIST": {
            "SCROLLX": 1205,
            "SCROLLY": 520,
            "X": 997,
            "Y": 160
        },
        "RANG_X": 300,
        "RANG_Y": 115,
        "TEXT_X": 580,
        "TOOLX": 989,
        "TOOLY": 564
    },
    "HALL": {
        "LIST_X": 580,
        "LIST_Y": 235,
        "GOTO": {
            "X": 875,
            "Y": 570,
            "GILDEN_X": 870,
            "SPIELER_X": 670,
            "SPIELERGILDEN_Y": 145
        },
        "DOWN_Y": 565,
        "INP_GOTO_X": 615,
        "INP_GOTO_Y": 585,
        "UP_Y": 195,
        "UPDOWN_X": 980
    },
    "HUTMANN": {
        "BACK_X": 1140,
        "BACK_Y": 620,
        "GOLD_Y": 660,
        "INSTR_X": 300,
        "INSTR_Y": 115,
        "KUGEL_X1": 535,
        "KUGEL_X2": 762,
        "KUGEL_X3": 1004,
        "OK_X": 960,
        "OK_Y": 650,
        "TEXT_Y": 635
    },
    "IF": {
        "X": 20,
        "Y": 180,
        "ERROR_X": 770,
        "ERROR_Y": 670,
        "EXIT_X": 1220,
        "EXIT_Y": 120,
        "HUTLINK_X": 35,
        "HUTLINK_Y": 185,
        "LBL_GOLD_Y": 115,
        "LBL_GOLDPILZE_X": 230,
        "LBL_PILZE_Y": 145,
        "WIN_X": 540,
        "WIN_Y": 250
    },
    "MQ": {
        "CS_X": 680,
        "CS_Y": 450,
        "ERROR_Y": 735,
        "SQUARE_X": 470,
        "SQUARE_Y": 80
    },
    "MQS": {
        "BUTTON_X": 380,
        "BUTTON_Y": 170,
        "TITLE_Y": 115
    },
    "POST": {
        "ADDRESS_Y": 190,
        "BUTTONS_X": 330,
        "BUTTONS_Y": 685,
        "ERROR_Y": 740,
        "INP_X": 330,
        "LIST_X": 330,
        "LIST_Y": 190,
        "PROFILE_X": 1170,
        "SCROLLX": 1190,
        "SCROLLDOWN_Y": 695,
        "SCROLLUP_Y": 190,
        "SENDBUTTON_Y": 685,
        "SQUARE_X": 320,
        "SQUARE_Y": 100,
        "SUBJECT_Y": 220,
        "TEXT_Y": 250
    },
    "QUEST": {
        "CANCEL_X": 780,
        "CANCEL_Y": 700,
        "ERROR_Y": 540
    },
    "QUESTBAR": {
        "LABEL_X": 778,
        "LABEL_Y": 625,
        "X": 390,
        "Y": 580
    },
    "SCR": {
        "BUILDCHAR": {
            "1_X": 312,
            "1_Y": 134,
            "CASTE_X": 332,
            "CASTE_Y": 610,
            "CREATE_X": 702,
            "CREATE_Y": 715,
            "GENDER_X": 372,
            "GENDER_Y": 195,
            "LOGIN_X": 1230,
            "LOGIN_Y": 725,
            "VOLK_X": 345,
            "VOLK_Y": 300
        },
        "CHAR": {
            "ACH_X": 795,
            "ACH_Y": 635,
            "CHARX": 408,
            "CHARY": 119
        },
        "SHOP_BG_X": 780
    },
    "SCREEN": {
        "BACK_BUTTON_X": 1120,
        "BACK_BUTTON_Y": 650,
        "RANDOM_BUTTON_X": 1030,
        "RANDOM_BUTTON_Y": 620,
        "TITLE": {
            "X": 770,
            "Y": 120,
            "Y_GUILD": 110,
            "Y_QUEST": 120
        }
    },
    "SHOP": {
        "ERROR_X": 1030,
        "ERROR_Y": 185,
        "SLOTS": {
            "C1_X": 856,
            "C2_X": 972,
            "C3_X": 1088,
            "R1_Y": 560,
            "R2_Y": 680
        },
        "X": 860
    },
    "STADT": {
        "BACKG_X": 280,
        "BACKG_Y": 101,
        "MAIN_X": 280,
        "MAIN_Y": 365
    },
    "STALL_ERROR_Y": 500,
    "STALL_SQUARE_Y": 560,
    "TAVERNE": {
        "BAR_X": 1030,
        "BAR_Y": 320,
        "BAROVL_X": 1093,
        "BAROVL_Y": 320
    },
    "TIMEBAR": {
        "LABEL_X": 0x0300,
        "LABEL_Y": 705,
        "X": 380,
        "Y": 660
    },
    "LBL": {
        "ARBEITEN": {
            "TEXT": {
                "2_Y": 475,
                "X": 590,
                "Y": 340
            }
        }
    },
    "AGB_X": 150,
    "ANLEITUNG_X": 1000,
    "ANLEITUNG_X_WITH_SHOP": 1035,
    "ARBEITEN_SLIDER_X": 650,
    "ARBEITEN_SLIDER_Y": 420,
    "ARENA_FEUER_X": 442,
    "ARENA_FEUER_Y": 126,
    "CREATE_RACE_X": 640,
    "CREATE_RACE_Y": 520,
    "DATENSCHUTZ_X": 250,
    "DISCONNECTED_X": 780,
    "DISCONNECTED_Y": 360,
    "EMAIL_NAG_X": 580,
    "EMAIL_NAG_Y": 340,
    "EXPERIENCE_BAR_X": 409,
    "EXPERIENCE_BAR_Y": 381,
    "FORUM_X": 900,
    "FORUM_X_WITH_SHOP": 945,
    "GILDEEHRE_X": 795,
    "GILDEEHRE_Y": 120,
    "IMPRESSUM_X": 380,
    "LM_X": 370,
    "LM_Y": 600,
    "LOGOUT_X": 1100,
    "LOGOUT_X_WITH_SHOP": 1130,
    "LOGOUT_Y": 50,
    "MAINQUEST_ENEMY_X": 630,
    "MAINQUEST_ENEMY_Y": 330,
    "MODIFY_CHARACTER_BUTTONS_X": 1020,
    "MODIFY_CHARACTER_BUTTONS_Y": 160,
    "NEW_WAREZ_X": 1025,
    "NEW_WAREZ_Y": 495,
    "OPPX": 930,
    "OPPY": 130,
    "OPTION_X": 350,
    "OPTION_Y": 180,
    "POTION_X": 1079,
    "POTION_Y": 590,
    "QO_BLACK_SQUARE_X": 410,
    "QO_BLACK_SQUARE_Y": 230,
    "SPONSOR_X": 1020,
    "SPONSOR_Y": 0
}


# Relative positions
REL = {
    "ARBEITEN": {
        "BAR_X": 55,
        "BAR_Y": 200,
        "Y": 270,
        "FILL_X": 110,
        "FILL_Y": 222
    },
    "ARENA": {
        "DELAY_X": 75,
        "DELAY_Y": 292,
        "INP_Y": 220,
        "OK_Y": 280,
        "TEXT_Y": 80
    },
    "CHAR": {
        "DELAY_X": 335,
        "DELAY_Y": 655,
        "EHRE_X": 20,
        "MOUNT_X": 274,
        "MOUNT_LINE_Y": 25,
        "PROP_Y": 32,
        "RUESTUNG": {
            "TEXT_X": 45,
            "TEXT_Y": 7,
            "X": 15,
            "Y": 495
        },
        "X": 20,
        "Y": 51
    },
    "FIDGET": {
        "AFFE_X": 425,
        "AFFE_Y": 128,
        "BLINZELN_X": 107,
        "BLINZELN_Y": 88,
        "NACHTKERZE_X": 63,
        "NACHTKERZE_Y": 236,
        "TAGKERZE_X": 212,
        "TAGKERZE_Y": 12,
        "X": 74,
        "Y": 168
    },
    "FIGHT": {
        "BOX": {
            "1_X": -17,
            "1_Y": -15,
            "3_X": -17
        },
        "CHAR_PROP_Y": 32
    },
    "GILDE": {
        "BUILDING_Y": 100,
        "CHAT": {
            "CAPTION_Y": 32,
            "DOWN_Y": 75,
            "UP_Y": 5,
            "Y": 22
        },
        "DEFENSELABEL_Y": 24,
        "GEBAEUDE": {
            "IMPROVE_X": 105,
            "IMPROVE_Y": 53,
            "LINE": 24,
            "Y": 133
        },
        "GOLDMUSH": {
            "C1": 10,
            "C2": 205,
            "C3": 0
        },
        "GRUENDEN": {
            "INP_Y": 220,
            "OK_Y": 280,
            "TEXT_Y": 80
        },
        "INP_Y": 220,
        "LIST": {
            "C1": 23,
            "X": 200,
            "Y": 26
        },
        "MUSH_Y": 27,
        "OK_Y": 280,
        "TEXT": {
            "IMPROVE_X": 143,
            "X": 105,
            "Y": 80
        },
        "TOOLX": 53,
        "EHRE_X": 10,
        "EHRE_Y": 10
    },
    "HALL": {
        "LIST": {
            "COLUMN": {
                "1_X": 0,
                "2_X": 60,
                "3_X": 80,
                "4_X": 200,
                "5_X": 320,
                "6_X": 370,
            },
            "LINE_Y": 20,
            "LINES_Y": 0
        }
    },
    "HUTMANN": {
        "BECHER": {
            "1_X": 204,
            "1_X2": 0,
            "1_X3": 0,
            "1_Y": 417,
            "1_Y2": -72,
            "1_Y3": -127,
            "2_X": 430,
            "2_X2": -201,
            "2_X3": -203,
            "2_Y": 417,
            "2_Y2": -54,
            "2_Y3": -120,
            "3_X": 669,
            "3_X2": -16,
            "3_X3": -16,
            "3_Y": 417,
            "3_Y2": -39,
            "3_Y3": -89
        },
        "FACE_X": 389,
        "FACE_Y": 115
    },
    "IF": {
        "1": 44,
        "2": 20,
        "GOTO_LOGIN_X": 450,
        "WIN": {
            "2_Y": 35,
            "X": -87,
            "Y": 250,
            "CB_X": 70,
            "CB_Y": 245,
            "INPUTS": {
                "DISTANCE_Y": 55,
                "FIELD_X": 80,
                "FIELD_Y": -15,
                "X": 70,
                "Y": 100
            },
            "LNK_1_Y": -40,
            "LNK_2_Y": 50,
            "WELCOME_X": 250,
            "WELCOME_Y": 45
        }
    },
    "MODIFY": {
        "CHARACTER": {
            "BUTTONS_1": 45,
            "BUTTONS_2": 55,
            "LABEL_X": 50,
            "LABEL_Y": 6
        }
    },
    "MQ": {
        "BORDER_X": 10,
        "BORDER_Y": 10,
        "BUTTON_Y": -20,
        "MUSHHINT_Y": -15,
        "TEXT_X": 20,
        "TEXT_Y": 130,
        "TITLE_Y": 90
    },
    "OPTION": {
        "BOX": {
            "1_X": -5,
            "1_Y": -5,
            "2_X": -5,
            "2_Y": -5
        },
        "CHANGE_X": 230,
        "DOCHANGE": {
            "X": 640,
            "FIELD_X": 570,
            "LABEL_X": 440,
            "X": 430
        },
        "IMAGE_X": 20,
        "TEXT_Y": 13,
        "VER_X": 825,
        "VER_Y": 450,
        "VOLUME_X": 287,
        "Y0": 15,
        "Y1": 65,
        "Y2": 105,
        "Y3": 170,
        "Y4": 235,
        "Y5": 300,
        "Y6": 380,
        "Y7": 430
    },
    "POPUP": {
        "TAB": 120,
        "TAB1": 35,
        "TAB2": 100,
        "TAB3": 130,
        "TAB_ADD": 17
    },
    "POST": {
        "BUTTONS_X": 5,
        "FENSTER_X": 479,
        "FENSTER_Y": 14,
        "LIMIT_X": -10,
        "LIMIT_Y": -55,
        "LIST": {
            "COLUMN": {
                "1_X": 0,
                "2_X": 160,
                "3_X": 660
            },
            "LINE_Y": 30,
            "LINES_Y": 0
        },
        "SQUARE_X": 910,
        "SQUARE_Y": 560,
        "VOGEL_X": 234,
        "VOGEL_Y": 100
    },
    "QO": {
        "CHOICES_Y": 40,
        "CHOOSE_X": 20,
        "CHOOSE_Y": 280,
        "PORTRAIT_X": 20,
        "PORTRAIT_Y": 20,
        "QUESTNAME_X": 480,
        "QUESTNAME_Y": 20,
        "QUESTSTODAY_X": 500,
        "QUESTSTODAY_Y": 20,
        "QUESTTEXT_X": 250,
        "QUESTTEXT_Y": 60,
        "RETURN_Y": 325,
        "REWARD_Y": 280,
        "REWARDS_Y": 40,
        "SLOT_X": 400,
        "SLOT_Y": 335,
        "START_X": 550,
        "START_Y": 380
    },
    "SCR": {
        "BUILDCHAR": {
            "CASTE_X": 80,
            "GENDER_X": 80,
            "VOLK_X": 130,
            "VOLK_Y": 70
        },
        "CHAR_ACH_X": 55,
        "CHAR_ACH_X_BUFFED": 65
    },
    "SHAKES": {
        "BLINZELN_X": 56,
        "BLINZELN_Y": 33,
        "IDLE2_X": 54,
        "IDLE2_Y": 115,
        "IDLE_X": 88,
        "IDLE_Y": 212,
        "X": 171,
        "Y": 112
    },
    "STALL": {
        "ARME_X": 373,
        "ARME_Y": 181,
        "BOX": {
            "1_X": 0,
            "1_Y": 50,
            "2_X": 225,
            "2_Y": 81,
            "3_X": 585,
            "3_Y": 78,
            "4_X": 778,
            "4_Y": 50
        },
        "GAIN_Y": 40,
        "OVL": {
            "BOESE": {
                "1_X": 100,
                "1_Y": 305,
                "2_X": 254,
                "2_Y": 217,
                "3_X": 578,
                "3_Y": 310,
                "4_X": 756,
                "4_Y": 168
            },
            "GUT": {
                "1_X": 80,
                "1_Y": 265,
                "2_X": 303,
                "2_Y": 291,
                "3_X": 580,
                "3_Y": 145,
                "4_X": 761,
                "4_Y": 263
            },
        },
        "TITEL_X": 10,
        "TITEL_Y": 10,
        "TUER_X": 428,
        "TUER_Y": 96,
        "ZEILEN_Y": 10
    },
    "TAVERNE": {
        "BARKEEPER_X": 796,
        "BARKEEPER_Y": 322,
        "HUT_X": 136,
        "HUT_Y": 344,
        "HUTAUGEN_X": 171,
        "HUTAUGEN_Y": 377,
        "KERZEN_X": 364,
        "KERZEN_Y": 21,
        "QUEST_X": 285,
        "QUEST_Y": 281,
        "QUESTOVL": {
            "1_X": 182,
            "1_Y": 60,
            "2_X": 149,
            "2_Y": 116,
            "3_X": 180,
            "3_Y": 58,
            "4_X": 169,
            "4_Y": 44,
            "5_X": 30,
            "5_Y": 31
        }
    },
    "AGB_LBL_X": 50,
    "AGB_LBL_Y": 8,
    "BLACK_CHARDESC_Y": 15,
    "BUILDCHAR_LINES_Y": 10,
    "COMPARE_TAB": 280,
    "DEALER_2Y": -15,
    "DEALER_3Y": -40,
    "DRAGON_X": 180,
    "DRAGON_Y": -10,
    "EMAIL_NAG_Y": 280,
    "EMAIL_RESEND_Y": 150,
    "HUTKUGEL_Y": 500,
    "LBL_ARBEITEN_TIME_Y": 160,
    "LIFEBAR_Y": 15,
    "LM_X": 50,
    "LM_Y": 6,
    "MQS_BUTTON_X": 280,
    "MQS_BUTTON_Y": 195,
    "POTION_X": 50,
    "STADT_FOREG_Y": 96,
}


# Element Sizes
SIZE = {
    "CITY": {
        "CA": {
            "ARENA_X": 360,
            "ARENA_Y": 220,
            "BUH_X": 45,
            "BUH_Y": 55,
            "DEALER_X": 60,
            "DEALER_Y": 85,
            "ESEL_X": 150,
            "ESEL_Y": 150,
            "POST_X": 120,
            "POST_Y": 140,
            "RUHMESHALLE_X": 150,
            "RUHMESHALLE_Y": 380,
            "SHAKES_X": 160,
            "SHAKES_Y": 170,
            "TAVERNE_X": 120,
            "TAVERNE_Y": 150,
            "WACHE_X": 115,
            "WACHE_Y": 130,
            "ZAUBERLADEN_X": 110,
            "ZAUBERLADEN_Y": 120
        }
    },
    "DEALER": {
        "AKTION_X": 190,
        "AKTION_Y": 170,
        "SPONSOR_X": 190,
        "SPONSOR_Y": 170
    },
    "GILDE": {
        "CHAT_EXT_X": 950,
        "GRUENDEN_TEXT_X": 400,
        "TEXT2_X": 400,
        "TEXT_X": 900,
        "EHRE_X": 375,
        "EHRE_Y": 40
    },
    "STALL": {
        "BOX": {
            "1_X": 200,
            "1_Y": 480,
            "2_X": 183,
            "2_Y": 382,
            "3_X": 176,
            "3_Y": 392,
            "4_X": 218,
            "4_Y": 476
        },
        "SQUARE_X": 700,
        "SQUARE_Y": 200
    },
    "TAVERNE": {
        "BAR_X": 200,
        "BAR_Y": 200,
        "HUT_X": 100,
        "HUT_Y": 130,
        "QUEST_X": 312,
        "QUEST_Y": 307
    },
    "ARENA_TEXT_X": 400,
    "BLACK_CHARDESC_X": 440,
    "BLACK_CHARDESC_Y": 200,
    "BUILDCHAR_LINES_X": 300,
    "COPYCAT": 148,
    "DISCONNECTED_X": 500,
    "EMAIL_NAG_TEXT_X": 420,
    "FIGHT_RESULT_TEXT_X": 490,
    "HUTMANN_BECHER_X": 130,
    "HUTMANN_BECHER_Y": 130,
    "LBL_ARBEITEN_TEXT_X": 400,
    "LBL_QO_TEXT_X": 470,
    "MQ_SQUARE_X": 610,
    "MQ_SQUARE_Y": 570,
    "OPTION_X": 845,
    "OPTION_Y": 520,
    "QO_BLACK_SQUARE_X": 740,
    "QO_BLACK_SQUARE_Y": 440,
    "TSG": 477
}


# ???
C = {
    "AUTO_LOGIN": True,
    "BEARD": 1,
    "BROWS": 2,
    "CHAREXT": ".png",
    "DISPLAY_ITEM_INFO": False,
    "HAIR": 4,
    "ITEMS_PER_TYPE": 110,
    "SHOW_CA": False,
    "SPECIAL2": 8,
    "TIMEOFDAY": -1
}


# ???
CA = {
    "CITY": {
        "ARENA": 227,
        "BUH": 259,
        "DEALER": 234,
        "ESEL": 237,
        "POST": 241,
        "RUHMESHALLE": 221,
        "SHAKES": 217,
        "TAVERNE": 239,
        "WACHE": 244,
        "ZAUBERLADEN": 219
    },
    "HUTBECHER": {
        "1": 23562,
        "2": 23563,
        "3": 23564
    },
    "SCR": {
        "ARBEITEN_BLOCKCITY": 295,
        "CHAR_EXPBAR": 360,
        "INVITE_BLOCKCITY": 22967
    },
    "STALL": {
        "BOX": {
            "BOESE": {
                "1": 23337,
                "2": 23338,
                "3": 23339,
                "4": 23340
            },
            "GUT": {
                "1": 23333,
                "2": 23334,
                "3": 23335,
                "4": 23336
            }
        }
    },
    "TAVERNE": {
        "BAR": 23541,
        "HUTMANN": 23524,
        "QUESTOFFER": 23531,
        "TOILETTE": 24597
    },
    "TOILET": {
        "BOWL": 24616,
        "CHAIN": 24615,
        "LID": 24619,
        "TANK": 24614
    },
    "CHALDRON": 25639,
    "DEALER_AKTION": 23254,
    "DEALER_SPONSOR": 23255,
    "GILDE_DIALOG_BLOCK": 23500,
    "GOTO_WITCH": 25640,
    "POST_BLOCK": 24595,
    "SELL_ITEM": 361,
    "TV": 25706,
    "USE_ITEM": 362,
    "WITCH": 25638,
}


# ???
CB = {
    "AGB_CHECKED": 76,
    "AGB_UNCHECKED": 75,
    "COMPARE_CHECKED": 24625,
    "COMPARE_UNCHECKED": 24624,
    "CS_CHECKED": 24483,
    "CS_UNCHECKED": 24482,
    "FUCK_CHECKED": 84,
    "FUCK_UNCHECKED": 83,
    "LM_CHECKED": 24284,
    "LM_UNCHECKED": 24283,
    "TV_CHECKED": 25704,
    "TV_UNCHECKED": 25703,
}


# Color values
CLR = {
    "ATTACK": {
        "ERROR": {
            "OFFLINE": 0xA10000,
            "OFFLINE_HALF": 0xB04000,
            "ONLINE": 0xFF2000,
            "ONLINE_HALF": 0xFF6000
        },
        "OK": 8978312
    },
    "SYSMSG": {
        "CLR": 16746564,
        "GREEN": 4521796,
        "GREEN_HIGHLIGHT": 8978312,
        "RED": 16729156,
        "RED_GRAYED": 13648964,
        "RED_HIGHLIGHT": 16746632,
        "RED_HIGHLIGHT_GRAYED": 13666440,
        "HIGHLIGHT": 16764040
    },
    "ATTRIBBONUS": 8947967,
    "BLACK": 0,
    "CHAT_WHISPER": 0xFF00FF,
    "EPICITEMQUOTE": 8947967,
    "ERROR": 0xFF0000,
    "GRAYED": 13664290,
    "GRAYED_HL": 15769634,
    "ITEMENCHANTMENT": 0xA300FF,
    "NOATTACK": 15761432,
    "OFFLINE": 15769634,
    "ONLINE": 15790146,
    "RED": 16729156,
    "SFHIGHLIGHT": 16777026,
    "SFHIGHLIGHT_WHISPER": 16746751,
    "SFORANGE": 15777858,
    "WHITE": 0xFFFFFF,
}


# ???
CPC = {
    "ARMOR": 19,
    "ATTRIBS": 4,
    "ATTRIBS_BONUS": 9,
    "ATTRIBS_BOUGHT": 14,
    "CLASS": 1,
    "DAMAGE_MAX": 21,
    "DAMAGE_MIN": 20,
    "FREE": 143,
    "GOLD_STOLEN": 2,
    "GOLD_STOLEN_NEXT": 3,
    "ITEMS": 22,
    "LEVEL": 0,
    "PRICE_NEXT_LEVEL": 142,
}


# Guild Indices
GUILD = {
    "ATTACK_TARGET": 364,
    "ATTACK_TIME": 365,
    "DEFENCE_TARGET": 366,
    "DEFENCE_TIME": 367,
    "EVENT_TRIGGER_COUNT": 368,
    "IS_RAID": 9,
    "MEMBER": {
        "GOLDSPENT": 214,
        "HONOR": 164,
        "ID": 14,
        "LEVEL": 64,
        "MUSHSPENT": 264,
        "ONLINE": 114,
        "RANK": 314
    },
    "RAID_LEVEL": 8,
}


# ???
INP = {
    "ARENA_ENEMY": 23300,
    "CHAR_INVITE": 22969,
    "CHAR_INVITE2": 22971,
    "CHARDESC": 22959,
    "EMAIL": 53,
    "GILDE": {
        "CHAT": 23448,
        "DIALOG_INVITE": 23507,
        "GRUENDEN": 23362,
        "TEXT": 23367
    },
    "HALLE_GOTO": 287,
    "LOGIN_PASSWORD": 60,
    "NAME": 51,
    "OPTION": {
        "FIELD": {
            "1": 24261,
            "2": 24262,
            "3": 24263
        }
    },
    "PASSWORD": 55,
    "POST_ADDRESS": 23280,
    "POST_SUBJECT": 23279,
    "POST_TEXT": 23281
}


# Shape indices
SHP = {
    "BLACK_CHARDESC": 22958,
    "BLACK_GILDEEHRE": 22951,
    "DISCONNECTED": 24367,
    "FIGHT_BLACK_SQUARE": 23831,
    "FUCK_BLACK_SQUARE": 82,
    "MAINQUEST": 24357,
    "OPTION_BLACK": 24245,
    "POST_BLACK_SQUARE": 23265,
    "QO_BLACK_SQUARE": 23589,
    "STALL_BLACK_SQUARE": 23343
}


#Slider Indices
SLDR = {
    "ARBEITEN": {
        "SLDR": 298,
        "BAR": 299,
        "TICK": {
            "1": 300,
            "2": 301,
            "3": 302,
            "4": 303,
            "5": 304,
            "6": 305,
            "7": 306,
            "8": 307,
            "9": 308,
            "10": 309
        }
    },
    "OPTION": {
        "BAR": 24270,
        "TICK1": 24271,
        "VOLUME": 24269
    }
}


# Sound Indices
SND = {
    "CATAPULT_HIT": 24533,
    "CATAPULT_LAUNCH": 24532,
    "CLICK": 2,
    "ERROR": 3,
    "HATCH": 24742,
    "JINGLE": 4,
    "MAINQUESTS_UNLOCK": 24310,
    "MIRROR": 24737,
    "MOUNT_1": 23325,
    "SHARD": 24736,
    "TEST": 24244,
    "TOILET_DROP": 24623,
    "TOILET_FLUSH": 24622,
    "TOILET_FLUSHTRY": 24621,
    "WEAPON": 23631,
    "WITCH_DROP": 25636,
}


# ???
TSG = {
    "COPYCATS": 3,
    "FILEOFFSET": 1,
    "FREE": 447,
    "LOOT_SACK": 477,
    "PLAYERID": 0,
    "TOWER_LEVEL": 2
}


ARROW_MAX = 22950
ARROW_OFFS = 21900
BLACK_SQUARE = 1
CLA_GILDE_CREST = 24560

DIST_DEALER_Y = 50

ITM_EMPTY = 30000
ITM_MAX = 60000
ITM_OFFS = 30001

POPUP_BEGIN_LINE = 5
POPUP_END_LINE = 0
POPUP_INFO = 41

RES_X = 0x0500
RES_Y = 800

# global for logger
log = ''


# Make switch statements possible
class switch(object):
    def __init__(self, value):
        self.value = value
        self.fall = False

    def __iter__(self):
        """Return the match method once, then stop"""
        yield self.match
        raise StopIteration

    def match(self, *args):
        """Indicate whether or not to enter a case suite"""
        if self.fall or not args:
            return True
        # changed for v1.5, see below
        elif self.value in args:
            self.fall = True
            return True
        else:
            return False


class session:
    def __init__(self):
        self.baseuri = 'http://s31.sfgame.de/request.php'
        self.loginparams = '?req=&random=%%2&rnd=%s%s'

        self.reqFormat = '%s%%3B%s%%3bv1.70'
        self.rndFormat = '%s%s'

        self.sessionId = '00000000000000000000000000000000'
        self.user = 'chocokiko'
        self.pwdmd5 = 'c33def595b633a53fbb6a3987ab54a05'
        random.seed()

    def login(self):
        action = '002'

        reqString = self.reqFormat % (
            self.sessionId + action + self.user, self.pwdmd5
        )

        randomString = '%2'
        # TODO: rework random number generation
        rndString = self.rndFormat % (
            random.randint(0, 9999999999),
            int(time.time() * 1000)
        )

        payload = {
            'req': reqString,
            'random': randomString,
            'rnd': rndString
        }

        r = requests.get(self.baseuri, params=payload)

        return r.text.split('/')

    def sendAction(self, action, *params):
        if action == ACT['GET_CHAT_HISTORY']:
            if not OnStage(CNT['IF_LOGOUT']):
                return
            if self.param_poll_tunnel_url != "":
                if self.pollLock:
                    return
            else:
                if self.pollLock or self.sendLock or self.fightLock:
                    return action
        else:
            if self.sendLock:
                if (
                    (action != ACT['VALIDATE'])
                    and (action != ACT['SEND_CHAT'])
                    and (action != ACT['GUILD']['DONATE'])
                    and (action != ACT.REQUEST_GUILD_NAMES)
                    and (action != ACT.REQUEST_CHAR)
                    and (action != ACT.POST_SEND)
                ):
                    log.warning(''.join([
                        "Aktionsbefehl wird ignoriert, weil noch auf eine ",
                        "Serverantwort gewartet wird: ",
                        str(action)
                    ]))
                    return
            else:
                if fightLock:
                    log.warning(''.join([
                        "Aktionsbefehl wird ignoriert, weil ein wichtiges ",
                        "Ereignis stattfindet:",
                        str(act)
                    ]))
                    return

        dataStr = str(action).zfill(3) + ';'.join(params)
        lastAct = action

        failTry = 1

        if self.sessionId == "":
            self.sessionId = "00000000000000000000000000000000"

            log.debug("SID: %s" % self.sessionId)
            log.debug("Action: %s" % act)
            log.debug("Action+Daten: %s" % dataStr)

        # TODO: This "if" switches base URL
        # self.param_poll_tunnel_url / param_php_tunnel_url
        if (
            (action == ACT.GET_CHAT_HISTORY)
            and (self.param_poll_tunnel_url != "")
        ):
            # TODO: move payload creation to method
            # self.param_poll_tunnel_url
            reqString = self.sessionId + dataStr
            randomString = '%2'
            rndString = str(round(random.random() * 0x77359400))
            rndString += str(int(time.time() * 1000))

            payload = {
                'req': reqString,
                'random': randomString,
                'rnd': rndString
            }

            self.pollLock = True
        else:
            # self.param_php_tunnel_url
            reqString = self.sessionId + dataStr
            randomString = '%2'
            rndString = str(round(random.random() * 0x77359400))
            rndString += str(int(time.time() * 1000))

            payload = {
                'req': reqString,
                'random': randomString,
                'rnd': rndString
            }

            if action != ACT_GET_CHAT_HISTORY:
                self.sendLock = True

        if self.mp_api_user_id != "notset":
            payload['mp_api_user_id'] = self.mp_api_user_id

        if self.mp_api_user_token != "notset":
            payload['mp_api_user_token'] = self.mp_api_user_token

        while failTry < param_fail_tries:
            r = requests.get(self.baseuri, params=payload)
            log.debug(r.url)

            # TODO : test success of request here !!

            if success:
                if (
                    (act == ACT_GET_CHAT_HISTORY)
                    and (param_poll_tunnel_url != "")
                ):
                    self.pollLock = False
                else:
                    self.sendLock = False

                data = r.text()

                log.debug("Antwort auf %s: %s" % (act, php_tunnel.data))

                if data == "":
                    log.error("Fehler: Keine (leere) Antwort vom Tunnelskript.")
                    success = False
                else:
                    return data

            if not success:
                if failTry < param_fail_tries:
                    log.warning(''.join([
                        "PHP-Request fehlgeschlagen (Versuch",
                        str(failTry), "/",
                        str(param_fail_tries) + ").",
                        evt, "Erneutes Senden..."
                    ]))
                    log.info("Erneut gesendet.")
                    pass
                else:
                    log.warning(''.join([
                        "PHP Tunneling fehlgeschlagen. ",
                        "Versuche, neu zu verbinden."
                    ]))
                    self.sessionId = ""
                    if (
                        (act == ACT_GET_CHAT_HISTORY)
                        and (param_poll_tunnel_url != "")
                    ):
                        self.pollLock = False
                    else:
                        self.sendLock = False

                    raise RequestFailedException()
                failTry += 1


class character:
    pass


class account:
    def __init__(self):
        pass


def md5hash(instr):
    '''
        Calculate MD5 Hash

        @param string inStr
        @return string MD5 hash
    '''
    return md5.new(instr).hexdigest().lower()

#------------------------------------------------------------------------------


def setupLogging():
    '''
        Setup logging module for console and file logging
    '''

    # TODO: make configurable
    # create logger
    log = logging.getLogger('simple_example')
    log.setLevel(logging.DEBUG)

    # Console Logging
    # create console handler and set level to debug
    ch = logging.StreamHandler()
    ch.setLevel(logging.DEBUG)

    # create formatter
    formatter = logging.Formatter(
        '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )

    # add formatter to ch
    ch.setFormatter(formatter)

    # add ch to logger
    log.addHandler(ch)

    # File Logger
    # create console handler and set level to debug
    ch = logging.FileHandler('sfclient.log')
    ch.setLevel(logging.DEBUG)

    # create formatter
    formatter = logging.Formatter(
        '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )

    # add formatter to ch
    ch.setFormatter(formatter)

    # add ch to logger
    log.addHandler(ch)

    return log


def initVars():
    '''
        Initialize tons of Variables
        ex frame1()

        TODO: check vars if needed
    '''

    '''
        paramObj = LoaderInfo(root.loaderInfo).parameters
        mp_api_user_id = "notset"
        mp_api_user_token = "notset"
        ssoMode = false
        param_id = ""
        param_rec = ""
        param_adv = ""
        param_valid = ""
        param_hall = ""
        param_cid = ""
        param_cid_original = false
        param_imgsvr = 0
        param_forceport = 0
        view_player = ""
        admin_login = ""
        PayMethods = new Array()
        ServerID = 0
        MPProject = "sfgame2"
        image_timeout = 3
        response_timeout = 10
        param_sponsor = ""
        param_sponsor_url = ""
        param_reroll_img = 0
        param_reconnect = 5000
        param_php_tunnel_url = ""
        param_poll_tunnel_url = ""
        trackPixels = new Array()
        intervalMultiplierChat = 1
        intervalMultiplierReconnect = 1
        param_support_email = "support@sfgame.de"
        param_gamestaff_email = param_support_email
        param_papaya_path = ""
        param_papaya_cfg_file = ""
        param_fail_tries = 1
        param_idle_polling = 0
        param_allow_skip_quest = false
        param_happy_hour = false
        param_censored = false
        param_internal_pixel = false
        param_reload_pixel = false
        noMush = false
        param_server_version_cfg = "unknown"
        param_server_version_act = "unknown"
        param_no_cid_save = false
        hadAccount = false
        param_languages = new Array()
        param_language_names = new Array()
        param_lowres_url = ""
        param_bullshit_text = ""
        param_bullshit_cid = ""
        param_social_buttons = new Array()
        defined_pixel_calls = new Array()
        beerFest = false
        towerLevelLabelPos = (SCR_CHAR_CHARX + 127)
        login_background_id = "3"
        worlds = new Array()
        preventTv = false

        buffed_reg = ""
        buffed_stuff = new Array()
        buffed_id = ""
        buffed_name = ""
        buffed_email = ""
        buffedReq = false
        buffedMode = false
        buffedLinkText = ""
        buffedLinkURL = ""
        lang_code = "de"
        original_lang_code = "de"
        smoothing = true
        forceSmoothing = true
        allowSmoothing = true
        img_url = new Array()
        snd_url = new Array()
        img_url_index = 0
        snd_url_index = 0
        lang_url = ""
        forum_url = ""
        shop_url = ""
        imprint_url = ""
        legal_url = ""
        dataprot_url = ""
        instr_url = ""
        no_crossdomain = false
        FriendLink = ""
        sessionId = ""
        server = "localhost"
        lastAct = 0
        sendLock = false
        fightLock = false
        pollLock = false
        pendingLanguageFile = false
        chosenLangFont = "Komika Text"
        countryName = new Array()
        pendingConfigurationFile = false
        actor = new Array()
        actorURL = new Array()
        actorLoaded = new Array()
        actorPersistent = new Array()
        actorBitmap = new Array()
        actorSoundLoader = new Array()
        actorPopupStamp = new Array()
        stObject = new SoundTransform()
        pendingLoaders = 0
        dragDropActive = false
        dragDropProhibit = false
        dragNotYet = false
        toErrorCount = 0
        ioErrorCount = 0
        pendingDebugFile = false
        FontFormat_Error = new TextFormat()
        FontFormat_Book = new TextFormat()
        FontFormat_BookHint = new TextFormat()
        FontFormat_BookLeft = new TextFormat()
        FontFormat_Default = new TextFormat()
        FontFormat_AttackLabel = new TextFormat()
        FontFormat_Speech = new TextFormat()
        FontFormat_Grayed = new TextFormat()
        FontFormat_GrayedHighLight = new TextFormat()
        FontFormat_ClassError = new TextFormat()
        FontFormat_Chat = new TextFormat()
        FontFormat_ChatWhisper = new TextFormat()
        FontFormat_ChatError = new TextFormat()
        FontFormat_GuildBuilding = new TextFormat()
        FontFormat_GuildMoney = new TextFormat()
        FontFormat_DefaultLeft = new TextFormat()
        FontFormat_Highlight = new TextFormat()
        FontFormat_HighlightWhisper = new TextFormat()
        FontFormat_Heading = new TextFormat()
        FontFormat_ScreenTitle = new TextFormat()
        FontFormat_Popup = new TextFormat()
        FontFormat_PopupCompare = new TextFormat()
        FontFormat_PopupCompareSum = new TextFormat()
        FontFormat_PopupCompareBetter = new TextFormat()
        FontFormat_PopupCompareWorse = new TextFormat()
        FontFormat_PopupCompareBetterHL = new TextFormat()
        FontFormat_PopupCompareWorseHL = new TextFormat()
        FontFormat_EpicItemQuote = new TextFormat()
        FontFormat_ItemEnchantment = new TextFormat()
        FontFormat_LogoutLink = new TextFormat()
        FontFormat_LogoutLinkHighLight = new TextFormat()
        FontFormat_HallListHeading = new TextFormat()
        FontFormat_HallListText = new TextFormat()
        FontFormat_GuildHallNoAttack = new TextFormat()
        FontFormat_HallListHighLight = new TextFormat()
        FontFormat_AttribBonus = new TextFormat()
        FontFormat_AttribTemp = new TextFormat()
        FontFormat_Attrib = new TextFormat()
        FontFormat_PayIcon = new TextFormat()
        FontFormat_PostListHeading = new TextFormat()
        FontFormat_PostListText = new TextFormat()
        FontFormat_PostListTextSys = new TextFormat()
        FontFormat_GuildListText = new TextFormat()
        FontFormat_GuildListTextOnline = new TextFormat()
        FontFormat_GuildListTextAttackError = new TextFormat()
        FontFormat_GuildListTextAttackErrorOnline = new TextFormat()
        FontFormat_GuildListTextAttackErrorHalf = new TextFormat()
        FontFormat_GuildListTextAttackErrorOnlineHalf = new TextFormat()
        FontFormat_GuildListTextAttackErrorOnlinePopup = new TextFormat()
        FontFormat_GuildListTextAttackOk = new TextFormat()
        FontFormat_GuildListTextAttackOkPopup = new TextFormat()
        FontFormat_PostListHighLight = new TextFormat()
        FontFormat_PostListHighLightSys = new TextFormat()
        FontFormat_PostListTextSysRed = new TextFormat()
        FontFormat_PostListHighLightSysRed = new TextFormat()
        FontFormat_PostListTextSysGreen = new TextFormat()
        FontFormat_PostListHighLightSysGreen = new TextFormat()
        FontFormat_QuestBar = new TextFormat()
        FontFormat_TimeBar = new TextFormat()
        FontFormat_LifeBar = new TextFormat()
        FontFormat_Damage = new TextFormat()
        FontFormat_CriticalDamage = new TextFormat()
        FontFormat_Bullshit = new TextFormat()
        FontFormat_CatapultDamage = new TextFormat()
        FontFormat_HighStakes = new TextFormat()
        FontFormat_HighStakesHighLight = new TextFormat()
        FontFormat_HighStakesGrayed = new TextFormat()
        FontFormat_HighStakesHighLightGrayed = new TextFormat()
        FontFormat_ToiletAura = new TextFormat()
        textDir = "left"
        SetFont(new SFGameFont().fontName)
        gameFont = ""
        fontEmbedded = true
        sizeMod = 0
        Filter_Shadow = [
            new DropShadowFilter(3, 45, 0, 0.8),
            new GradientGlowFilter(
                0, 45, [CLR_BLACK, CLR_BLACK], [0, 0.3],
                [0, 32], 1, 1, 5, 15, "outer")
        ]
        Filter_HeavyShadow = [
            new DropShadowFilter(2, 45, 0, 1, 5, 5, 3, 3),
            new GradientGlowFilter(
                0, 45, [CLR_BLACK, CLR_BLACK], [0, 0.3],
                [0, 32], 1, 1, 5, 15, "outer")
        ]
        CharVolk = 0
        CharMann = true
        CharKaste = 1
        CharColor = 1
        CharMouth = 1
        CharBeard = 1
        CharNose = 1
        CharEyes = 1
        CharBrows = 1
        CharEars = 1
        CharHair = 1
        CharSpecial = 1
        CharSpecial2 = 1
        revertCharVolk = 0
        revertCharMann = true
        slmCount = 0
        ststep = 0
        revertCharColor = 1
        revertCharMouth = 1
        revertCharBeard = 1
        revertCharNose = 1
        revertCharEyes = 1
        revertCharBrows = 1
        revertCharEars = 1
        revertCharHair = 1
        revertCharSpecial = 1
        revertCharSpecial2 = 1
        Savegame = new Array()
        MirrorPieces = new Array()
        hasMirror = false
        canRob = false
        towerLevel = 0
        ServerTime = new Date()
        LocalTime = new Date()
        GameTime = new Date()
        Stundenlohn = 10
        VerdientesGeld = 0
        Gilde = ""
        GildenID = 0
        PostScroll = 1
        PostMax = 1
        PostSel = 0
        PostScrollDown = false
        DealerMenuSelect = 0
        SelectedQuest = 1
        PlayerDesc = ""
        PreviousLogin = false
        DemoMode = false
        selName = ""
        selGilde = ""
        InviteGildenID = 0
        ReplyAddress = ""
        ReplySubject = ""
        optionNewData = ""
        ruhmesHalleSuchString = ""
        ruhmesHalleSuchName = true
        GildeBuildingGold = new Array()
        GildeBuildingPilz = new Array()
        GildeChatScroll = 0
        tmpBattleInfo = ""
        KlasseGewählt = false
        PostFightMode = false
        tmpAmount = 0
        PulseTaverne = false
        PulseArbeiten = false
        PulseGilde = false
        PulseGildeOnHistory = false
        PulsePost = false
        PulseChar = false
        PulseDealer = false
        notFirstVolChange = true
        notSecondVolChange = true
        LevelUp = false
        LastLevel = 0
        canBoost = new Array()
        GuildHallMode = false
        DealerAktion = 0
        SelectedGuild = ""
        SelectedDungeon = 0
        lightMode = false
        chatSound = false
        compareItems = false
        light_mode_default = false
        disableTV = false
        tvTest = false
        tvFunctionName = ""
        tvPollNormal = 5000
        tvPollLong = 300000
        CupChosen = 0
        oldAlbum = -1
        PresetGold = 0
        PresetMush = 0
        MushBought = 0
        specialAction = 0
        nextPxl = 0
        BlockReroll = false
        FrenzyMode = false
        fightFlushMode = false
        RollFrenzy = new Timer(1000)
        forceAdventure = false
        lastAttacked = new Array()
        forwardText = ""
        albumCat = 0
        albumPage = 0
        contentMax = 1700
        copyCatSel = 0
        towerScroll = 0
        towerScrollDest = 0
        towerScrollSpeed = 0
        towerScrollTimer = new Timer(25)
        towerScrollGrabPos = -1
        towerScrollTimer.addEventListener(
            TimerEvent.TIMER, TowerTimerFn
        )
        alternateCharOppImg = false
        hasFoughtGuildBattle = false
        skipAllowed = false
        specialActionHint = false
        suggestNames = new Array()
        crestElementPos = [
            [55, 8, 130, 90, 21],
            [0, 50, 240, 150, 34],
            [65, 75, 108, 114, 23],
            [15, 194, 210, 45, 12],
            [85, 17, 73, 70, 24],
            [98, 176, 43, 40, 16],
            [85, 100, 70, 70, 68]
        ]
        selecterCrestElement = -1
        crestSuggested = false
        crestColorSelection = 0
        crest = getRandomCrest()
        heraldicColors = [
            [0, 0, 1],
            [1, 0, 0],
            [0.7, 0, 0.8],
            [0.1, 0.1, 0.1],
            [0, 0.6, 0],
            [1, 0.8, 0],
            [0.9, 0.9, 0.9],
            [0.7, 0.4, 0.2],
            [0.5, 0.5, 0.5],
            [0.7, 0, 0],
            [0.5, 0, 0.3],
            [1, 0.6, 0],
            [1, 0.8, 0.8]
        ]
        crestColor = [0, 0, 0, 0]
        crestMoveTimer = new Timer(25)
        Filter_CrestSelected = new GradientGlowFilter(
            0, 0, [16777026, 16777026], [0, 0.6], [0, 127],
            26, 26, 1, 1, "outer"
        )
        crestMoveTimer.addEventListener(TimerEvent.TIMER, crestMoveFn)
        oldCrestStr = ""
        guildInstanceID = 0
        myOwnRank = -1
        myOwnAttackTarget = -1
        myOwnGuildMoney = -1
        lastGuildShown = ""
        lastGuildData = new Array()
        lastRaidCost = 0
        lastGuildMembers = new Array()
        lastHallMembers = new Array()
        arrowHallMode = false
        offlineGuildMembers = new Array()
        showActivityTime = false
        guildForumLink = ""
        showAlbumOffset = false
        avgLevel = 0
        DestroyGuildBtnTimer = false
        PostReturnToPlayer = ""
        oldSel = 0
        postInstance = 0
        mirrorFadeAmount = 0.2
        mirrorAniTimer = new Timer(25)
        mirrorAniTimer.addEventListener(TimerEvent.TIMER, MirrorAniFn)
        lastPlayer = ""
        AlbumEffect = false
        mirrorAniStep = 0
        indexInGuild = 0
        indexInHall = 0
        playerTowerLevel = 0
        MQSInstance = 0
        MQDelayTimer = new Timer(500)
        LastDungeonNr = 0
        LastDungeonEnemy = 0
        hasLostMQ = false
        CorrectItemType = [6, 3, 5, 4, 8, 7, 9, 10, 1, 2]
        crestSuggestion = new Array()
        newCrestSuggested = ""
        ChatHist = new Array()
        toiletTankAdjustTimer = new Timer(25)
        toiletTankCurrent = 0
        toiletTankDest = 0
        toiletTankAdjustTimer.addEventListener(
            TimerEvent.TIMER,
            toiletTankAdjustEvent
        )
        witchDesiredType = -1
        nextFightTimer = new Timer(10, 1)
        towerFightMode = false
        fights = new Array()
        guildFightCount = 0
        fightNumber = 0
        skipGuildFights = 0
        lastRoundFighterName = ""
        lastWhisperTarget = ""
        lastMessageTarget = ""
        guildAttackTime = 0
        guildDefenceTime = 0
        guildAttacked = ""
        guildAttacking = ""
        lastChatHist = ""
        lastChatIndex = 0
        guildBlinkReady = false
        firstChatFill = false
        SignupJumpRunning = false
        suggestionSlot = new Array()
        popupStamp = 0

    '''

    # get buffered registration?
    '''
        if (paramObj["reg"] != undefined){
            buffedReq = true
            buffed_reg = ExternalInterface.call("get_base64")
            if (((buffed_reg) and (!((buffed_reg == ""))))){
                buffed_stuff = buffed_reg.split("")
                if (buffed_stuff.length == 3){
                    buffed_id = buffed_stuff[0]
                    buffed_name = buffed_stuff[1]
                    buffed_email = buffed_stuff[2]
                }
            }
        }
    '''

    # pre populate text snippet list
    '''
        texts = new Array()
        while (txt.length < 20000) {
            txt.push("")
        }
    '''

    # setup image loading timeout event
    '''
        WhenLoadedFn = new Array()
        WhenLoadedActive = false
        WhenLoadedTimeout = new Timer((1000 * image_timeout), 1)
        WhenLoadedTimeout.addEventListener(
            TimerEvent.TIMER,
            WhenLoadedTimeoutEvent
        )
    '''

    # timer event to generate Ticks
    '''
        TimeCalc = new Timer(50)
        TimeCalc.addEventListener(TimerEvent.TIMER, TimeCalcEvent)
    '''

    # TV Stuff
    '''
            tvStatus = 0
            tvStatusDest = 0
            tvWobble = 0
            tvAni = 0
            tvReturnValue = 0
            tvTimer = new Timer(100)
            tvTimer.addEventListener(
                TimerEvent.TIMER, function (evt:TimerEvent)
            {
                var i:int
                tvWobble = (tvWobble + 0.1)
                while (tvWobble > (2 * Math.PI)) {
                    tvWobble = (tvWobble - (2 * Math.PI))
                }
                if ((tvStatusDest - tvStatus) >= 0.1){
                    tvStatus = (tvStatus + 0.1)
                } else {
                    if ((tvStatus - tvStatusDest) >= 0.1){
                        tvStatus = (tvStatus - 0.1)
                    } else {
                        tvStatus = tvStatusDest
                    }
                }
                tvAni++
                if (tvAni >= 4){
                    tvAni = 0
                }
                if (tvStatus == 1){
                    Show(CA_TV)
                }
                if (tvStatus == 0){
                    Hide(CA_TV)
                }
                i = 0
                while (i < 4) {
                    actor[(TV + i)].scaleX = tvStatus
                    actor[(TV + i)].scaleY = tvStatus
                    actor[(TV + i)].rotation = (Math.sin(tvWobble) * 5)
                    actor[(TV + i)].alpha = tvStatus
                    if ((((i == tvAni)) and ((tvStatus > 0)))){
                        Show((TV + i))
                    } else {
                        Hide((TV + i))
                    }
                    i++
                }
                if (!OnStage(TV)){
                    tvTimer.stop()
                    i = 0
                    while (i < 4) {
                        Hide((TV + i))
                        i++
                    }
                    tvStatus = 0
                    tvStatusDest = 0
                }
            })
            tvPollTimer = new Timer(5000)
            tvPollTimer.addEventListener(TimerEvent.TIMER, TryShowTV)
    '''

    # PvPDelayTimer = new Timer(500)

    # Witch Animation Timer
    '''
        witchAniStep = 0
        witchAniTimer = new Timer(50)
        witchAniTimer.addEventListener(
            TimerEvent.TIMER, function (evt:TimerEvent)
        {
            var i:int
            witchAniStep++
            if (witchAniStep >= 15){
                witchAniStep = 0
            }
            i = 0
            while (i < 15) {
                if (i == witchAniStep){
                    Show((WITCH_ANI + i))
                } else {
                    Hide((WITCH_ANI + i))
                }
                i++
            }
            if (!OnStage(WITCH)){
                witchAniTimer.stop()
            }
        })
    '''

    # Fight timers
    '''
        nextFightTimer.addEventListener(TimerEvent.TIMER, NextFight)
        guildFightTimer = new Timer(1000)
        guildFightTimer.addEventListener(TimerEvent.TIMER, guildFightTimerFn)
        guildFightTimer.start()
    '''

    # Guild chat poll
    '''
            GuildChatPoll = new Timer(1000)
            GuildChatPoll.addEventListener(TimerEvent.TIMER, GuildChatPollFn)
            GuildChatPoll.start()
    '''
    pass


def configure():
    '''
        Load configuration from server
        Load language file from server

        TODO: check event stuff??

        @oldname Start
    '''
    LoadConfigurationFile()
    WhenLoaded(DoLoadLanguageFile)
    pass


#------------------------------------------------------------------------------

def Geld(amount):
    '''
        Format money amout in silver into a string

        @param int amount
        @return str formatted money string
    '''
    gold = GoldAnteil()
    silber = SilberAnteil()

    GeldStr = ''

    if gold > 0:
        GeldStr += '%d %s' % (gold, texts[TXT["GOLD"]])
        if silber > 0:
            GeldStr += ' %s ' % (texts[TXT['UND']])
    if silber > 0:
        GeldStr += '%d %s' % (texts[TXT['SILBER']])

    return GeldStr


def GoldAnteil(amount):
    '''
        get gold part of money value

        @param int amount
        @return int
    '''
    return int(amount / 100)


def SilberAnteil(amount):
    '''
        get silver part of money value

        @param int amount
        @return int
    '''
    return int(amount % 100)

#------------------------------------------------------------------------------


def Tageszeit():
    '''
        get time of day
        0 - night
        1 - dusk/dawn
        2 - day

        @return int
    '''
    #TODO: make this a parameter?
    hours = time.strftime('%H')

    if hours < 4:
        return 0
    elif hours < 8:
        return 1
    elif hours < 18:
        return 2
    elif hours < 21:
        return 1
    else:
        return 0


def SleepTime():
    '''
        get charakters sleeping time

        @return bool True= Time to sleep
    '''
    #TODO: make this a parameter?
    hours = time.strftime('%H')

    if C.TIMEOFDAY >= 0:
        return C.TIMEOFDAY
    elif hours < 7:
        return True
    elif hours < 23:
        return False
    else:
        return True


def IsToday(reqTime):
    '''
        checks if timestamp is today
    '''
    reqDate = datetime.fromtimestamp(reqTime/1000)
    return reqDate.date() == datetime.today().date()


def TimeStr(reqTime, short=False):
    '''
        convert datetime object to formatted string

    '''

    reqDate = datetime.fromtimestamp(reqTime/1000)

    if lang_code == "de":
        if short:
            if IsToday(reqTime):
                return ''
            else:
                return reqDate.strftime('%d.%m. %H:%M')
        else:
            return reqDate.strftime('%d.%m.%Y %H:%M:%S')

    if lang_code == "pl":
        if short:
            if IsToday(reqTime):
                return ''
            else:
                return reqDate.strftime('%d/%m/ %H:%M')
        else:
            return reqDate.strftime('%d/%m/%Y %H:%M:%S')

    if short:
        if IsToday(reqTime):
            return ''
        else:
            return reqDate.strftime('%m/%d/ %H:%M')
    else:
        return reqDate.strftime('%m/%d/%Y %H:%M:%S')


def TimeCalcEvent(evt):
    '''
        Time Event Callback
    '''
    currentTime = datetime.now()
    if (slmCount > 23) and (ststep == 8):
        Add(FILLSPACE)
        slmCount = 0

    GameTime.setTime(
        currentTime.getTime() + ServerTime.getTime() - LocalTime.getTime()
    )

#------------------------------------------------------------------------------


def GetQuestTitle(questID):
    '''
        gets quest title snippet

        @param int questID
        @return string
    '''
    sgIdx = SG['QUEST']['OFFER']
    qst = TXT['QUEST']
    offs = qst['SCOUT']['TITLE']
    questType = int(Savegame[sgIdx['TYPE1'] + questID])

    for case in switch(questType):
        if case(1):
            offs = qst['SCOUT']['TITLE'] + GetQuestRandom(questID, 20, 0)
            break
        if case(2):
            offs = qst['COLLECT']['TITLE'] + GetQuestRandom(questID, 20, 0)
            break
        if case(3):
            offs = qst['FETCH']['TITLE'] + GetQuestRandom(questID, 20, 0)
        if case(4):
            offs = qst['KILL']['TITLE']
            offs -= int(Savegame[sgIdx['ENEMY1'] + questID]) - 1
            break
        if case(5):
            offs = qst['TRANSPORT']['TITLE'] + GetQuestRandom(questID, 21, 0)
            break
        if case(6):
            offs = qst['ESCORT']['TITLE'] + GetQuestRandom(questID, 23, 0)
            break

    if texts[offs]:
        return texts[offs]

    # Error msg if no quest title found
    return 'ERR QID=%d QT=%d OFS=%d' % (
        questID, questType, offs
    )


def GetQuestRandom(questID, randomRange, randomMod):
    '''
        Get quest random number

        @param int questID
        @param int randomRange
        @param int randomMod
        @return int
    '''
    qIndex = SG['QUEST']['OFFER']
    CheckSum = 0

    if randomMod != 1:
        modIdx += qIndex['LEVEL1']
    if randomMod != 2:
        modIdx += qIndex['TYPE1']
    if randomMod != 3:
        modIdx += qIndex['ENEMY1']

    CheckSum += Savegame[modIdx + questID]
    CheckSum += Savegame[qIndex['LOCATION1'] + questID]
    CheckSum += Savegame[qIndex['DURATION1'] + questID]
    CheckSum += Savegame[qIndex['EXP1'] + questID]
    CheckSum += Savegame[qIndex['GOLD1'] + questID]
    CheckSum += Savegame[
        qIndex['REWARD_ITM1'] + SG['ITM']['TYP'] + questID * SG['ITM']['SIZE']
    ]
    CheckSum += Savegame[
        qIndex['REWARD_ITM1'] + SG['ITM']['PIC'] + questID * SG['ITM']['SIZE']
    ]

    return CheckSum % randomRange


def GetQuestText(questID):
    '''
        get quest description

        @param int questID
        @return str
    '''
    sgIdx = SG['QUEST']['OFFER']
    idx = TXT['QUEST']
    location = int(Savegame[sgIdx['LOCATION1'] + questID])

    QuestText = ''
    QuestText += '\"%s ' % (
        texts[idx['OPENER'] + GetQuestRandom(questID, 10, 3)]
    )

    for case in switch(int(Savegame[SG.QUEST_OFFER_TYPE1 + questID])):
        if case(1):
            QuestText += texts[idx['LOCATION'] + location - 1] + " "
            QuestText += texts[
                idx['SCOUT']['TASK1'] + GetQuestRandom(questID, 20, 0)
            ] + " "
            QuestText += texts[
                idx['SCOUT']['TASK2'] + GetQuestRandom(questID, 10, 1)
            ] + " "
            break
        if case(2):
            QuestText += texts[
                idx['COLLECT']['WHAT'] + GetQuestRandom(questID, 20, 0)
            ] + " "
            QuestText += texts[idx['LOCATION'] + location - 1] + " "
            QuestText += texts[
                idx['COLLECT']['AMOUNT'] + GetQuestRandom(questID, 11, 1)
            ].replace("%", str(GetQuestRandom(questID, 10, 2) + 2)) + " "
            break
        if case(3):
            QuestText += texts[
                idx['FETCH']['WHAT'] + GetQuestRandom(questID, 20, 0)
            ] + " "
            QuestText += texts[idx['LOCATION'] + location - 1] + " "
            QuestText += texts[
                idx['FETCH']['FROM'] + GetQuestRandom(questID, 15, 1)
            ] + " "
            QuestText += texts[
                idx['FETCH']['PRECLOSER'] + GetQuestRandom(questID, 20, 0)
            ] + " "
            break
        if case(4):
            QuestText += texts[idx['KILL']['LOCATION'] + location - 1] + " "
            QuestText += texts[
                idx['KILL']['WHOM'] - Savegame[sgIdx['ENEMY1'] + questID] - 1
            ] + " "
            QuestText += texts[
                idx['KILL']['PRECLOSER'] + GetQuestRandom(questID, 10, 1)
            ] + " "
            break
        if case(5):
            QuestText += texts[
                idx['TRANSPORT']['WHAT'] + GetQuestRandom(questID, 21, 0)
            ] + " "
            QuestText += texts[
                idx['TRANSPORT']['LOCATION'] + location - 1
            ] + " "
            QuestText += texts[
                idx['TRANSPORT']['PRECLOSER'] + GetQuestRandom(questID, 10, 1)
            ] + " "
            break
        if case():
            QuestText += texts[
                idx['ESCORT']['WHOM'] + GetQuestRandom(questID, 23, 0)
            ] + " "
            QuestText += texts[
                idx['ESCORT']['LOCATION'] + location - 1
            ] + " "
            QuestText += texts[
                idx['ESCORT']['PRECLOSER'] + GetQuestRandom(questID, 23, 0)
            ] + " "

    return QuestText


def GetQuestBG():
    '''
        Get quest background index

        @return int
    '''
    action = Savegame[SG['ACTION']['INDEX']]
    location = Savegame[SG['QUEST']['OFFER']['LOCATION1'] + action - 1]
    return SCR['QUEST']['BG'][str(location)]


#------------------------------------------------------------------------------

class Item:
    def __init__(
        self, pic=0, typ=0, cclass=1, gold=0,
        maxd=0, mind=0, color=0, attr=False
    ):
        '''

        '''
        self.Pic = pic
        self.Typ = typ
        self.Class = cclass
        self.Gold = gold
        self.Damage['min'] = mind
        self.Damage['max'] = maxd
        self.Color = color
        if type(attr) is list:
            self.Attr = attr
        else:
            self.Attr = [
                {'typ': 0, 'val': 0},
                {'typ': 0, 'val': 0},
                {'typ': 0, 'val': 0}
            ]
        while self.Pic >= 1000:
            self.Pic -= 1000
            self.Class += 1

        return self

    def fromSG(self, SGIndex=0, SG=False):
        '''
            setup item object from savegame

            @param int SGIndex
            @param list SG

            @return self
        '''
        #Preset values
        Pic = 0
        Typ = 0
        Class = 1
        Gold = 0
        Color = 0
        Mush = 0
        Damage = {'max': 0, 'min': 0}
        Attr = [
            {'typ': 0, 'val': 0},
            {'typ': 0, 'val': 0},
            {'typ': 0, 'val': 0}
        ]

        if type(SG) is list:
            Pic = int(SG[SGIndex + SG['ITM']['PIC']])
            Typ = int(SG[SGIndex + SG['ITM']['TYP']])

            Gold = int(SG[SGIndex + SG['ITM']['GOLD']])
            Mush = int(SG[SGIndex + SG['ITM']['MUSH']])
            Damage['max'] = int(SG[SGIndex + SG['ITM']['SCHADEN_MAX']])
            Damage['min'] = int(SG[SGIndex + SG['ITM']['SCHADEN_MIN']])

            for i in range(3):
                self.attr[i]['typ'] = SG[SGIndex + SG['ITM']['ATTRIBTYP1'] + i]
                self.attr[i]['val'] = SG[SGIndex + SG['ITM']['ATTRIBVAL1'] + i]

            for i in range(8):
                Color += int(SG[SGIndex + SG['ITM']['SCHADEN_MIN'] + i])

            Color = Color % 5

        return self.__init__(
            Pic, Typ, Class, Gold, Mush, Damage['max'],
            Damage['min'], Color, Attr
        )

    def getName(self):
        '''
            get item name snippet

            @param int SGIndex index of item in savegame
            @param list SG savegame
            @param int albumMode

            @return str

            @oldname GetItemName
        '''

        txtIdx = TXT['ITMNAME']
        txtBase = 0
        txtSuffix = ""

        if self.Class <= 0:
            domAttrTyp = -1
            domAttrVal = 0
            attrValCode = 0
            attrValOffs = 0

            attribIn = list()
            for i in range(10):
                attribIn[i] = False

            for i in range(3):
                if self.Attr[i]['val'] > domAttrVal:
                    domAttrTyp = self.Attr[i]['typ']
                    domAttrVal = self.Attr[i]['val']
                if (self.Attr[i]['typ'] > 0) and (self.Attr[i]['val'] > 0):
                    attribIn[self.Attr[i]['typ'] - 1] = True

            attrValCode = pow(2, domAttrTyp - 1)

            if domAttrVal >= 25:
                attrValOffs = 250
            elif domAttrVal >= 16:
                attrValOffs = 200
            elif domAttrVal >= 11:
                attrValOffs = 150
            elif domAttrVal >= 6:
                attrValOffs = 100
            elif domAttrVal >= 3:
                attrValOffs = 50

            if attrValCode > 0:
                txtSuffix = texts[txtIdx['EXT'] + attrValCode + attrValOffs]

        if self.Typ >= 8:
            txtBase = txtIdx[str(self.Typ)]
        else:
            txtBase = txtIdx[str(self.Typ)][str(self.Class)]

        if (self.Pic >= 50) and (self.Typ != 14):
            txtBase += txtIdx['1']['1']['EPIC'] - txtIdx['1']['1']
            self.Pic -= 49
            txtSuffix = ""

        if (texts[txtBase + self.Pic - 1] == undefined):
            return "Unknown Item (base=%d, entry=%d)" % (
                txtBase, (txtBase + self.Pic - 1)
            )

        if texts[txtIdx['EXT']] == "1":
            if txtSuffix == "":
                return ""
            else:
                return texts[txtBase + self.Pic - 1]

        if texts[txtIdx['EXT']] == "2":
            if txtSuffix == "":
                return texts[txtBase + self.Pic - 1]
            else:
                return txtSuffix.replace("%1", texts[txtBase + self.Pic - 1])

        if txtSuffix == "":
            return texts[txtBase + self.Pic - 1]
        else:
            return texts[txtBase + self.Pic - 1] + " " + txtSuffix

    def getFile(self, itmColor):
        '''
            get item graphic relative url

            @oldname GetItemFile
            @param int itmColor
            @return str

            TODO: itmColor ???
        '''
        itemFile = "itm"

        if (self.Pic >= 50) and (self.Typ != 14):
            itmColor = 0

        itemFile += str(self.Typ) + "-" + str(self.Pic)

        if self.Typ in range(1, 8):
            itemFile = str(self.Typ) + "-" + str(self.Class + 1) + "/"
            itemFile += itemFile + "-" + str(itmColor + 1)
            itemFile += "-" + str(self.Class + 1)
        else:
            if self.Typ in range(8, 15):
                itemFile = str(self.Typ) + "-1/" + itemFile + "-"
                if self.Typ < 10:
                    itemFile += str(self.Color + 1) + "-"

                itemFile += "1"

        return "res/gfx/itm/" + itemFile + ".png"

    def getId(self):
        '''
            get item ID

            @return int
            @oldname GetItemID

        '''
        itemID = ITM['OFFS']
        slotNum = 0
        ownerClass = 0
        isSG = False
        noShieldFlag = False

        if self.Class < 0:
            slotID = self.Typ + self.Pic * SG['ITM']['SIZE']
            slotNum = self.Pic + 1

            if self.Class == -2:
                isSG = True
            elif self.Class <= -3:
                ownerClass = -1 * self.Class - 2
                noShieldFlag = True
                isSG = True

        itemID += self.Typ * C['ITEMS_PER_TYPE'] * 5 * 3
        itemID += self.Pic * 5 * 3
        itemID += self.Color * 3
        itemID += self.Class

        if itemID >= ITM['MAX']:
            #log.error("Fehler: Zu wenige Indizes für Items:", itemID,
            #">=", ITM_MAX, "Typ:", itmTyp, "Pic:", itmPic, "Color:",
            #itmColor, "Class:", itmClass)
            return 0

        if (isSG and (self.Typ == 0) and (slotNum > 0) and (slotNum <= 10)):
            if slotNum <= 8:
                itemID = IMG['EMPTY']['SLOT']['1'] + slotNum - 1
            else:
                if ownerClass == 1:
                    if slotNum == 9:
                        itemID = IMG['EMPTY']['SLOT']['9_1']
                    else:
                        if noShieldFlag:
                            itemID = IMG['NO_SHIELD']
                        else:
                            itemID = IMG['EMPTY']['SLOT']['10']
                elif ownerClass == 2:
                    if slotNum == 9:
                        itemID = IMG['EMPTY']['SLOT']['9_2']
                elif ownerClass == 3:
                    if slotNum == 9:
                        itemID = IMG['EMPTY']['SLOT']['9_3']

        return (itemID)


def GetArrowID(
    itmClass, itmPic, someObj=False, slotMode=False, colorOverride=-1
):
    arrowID = ARROW_OFFS
    if slotMode:
        if not (type(someObj) is list):
            someObj = Savegame

        slotID = itmClass + itmPic * SG_ITM_SIZE
        itmPic = someObj[slotID + SG_ITM_PIC]
        itmColor = 0

        for i in range(8):
            itmColor += int(someObj[slotID + SG_ITM_SCHADEN_MIN + i])

        itmColor = itmColor % 5

        itmClass = 0
        while itmPic >= 1000:
            itmPic -= 1000
            itmClass += 1
        itmClass -= 1
    else:
        itmColor = int(someObj)

    if colorOverride >= 0:
        itmColor = colorOverride

    arrowID += itmClass * 5 * 100
    arrowID += itmPic * 5
    arrowID += arrowID + itmColor

    if arrowID >= ARROW_MAX:
        # log "Fehler: Zu wenige Indizes für Pfeile:", arrowID, ">=",
        # ARROW_MAX, "Pic:", itmPic, "Color:", itmColor, "Class:", itmClass
        return 0

    return arrowID


#------------------------------------------------------------------------------


def GetWeaponSoundFile(wpnClass, wpnPic, useCase):
    useCaseStr = ""
    for case in switch(useCase):
        if case(0):
            useCaseStr = "s"
            break
        if case(1):
            useCaseStr = "n"
            break
        if case(2):
            useCaseStr = "b"
            break
        if case(3):
            useCaseStr = "k"
            break

    fileName = 'res/sfx/wpn/wpn'
    if wpnPic < 1:
        fileName += str(1)
    else:
        fileName += str(wpnClass)

    return fileName + "-%d-%s.mp3" % (
        GetWeaponLevel(wpnClass, wpnPic) + 1, useCaseStr
    )


def GetWeaponSound(wpnClass, wpnPic, useCase):
    sndActor = SND['WEAPON']
    sndActor += (wpnClass - 1) * 4 * 14 + GetWeaponLevel(wpnClass, wpnPic) * 4
    sndActor += sndActor + useCase
    return sndActor


def GetWeaponLevel(wpnClass, wpnPic):
    for case in switch(wpnClass):
        if case(1):
            if wpnPic == -7:
                return (7)
            elif wpnPic == -3:
                return (6)
            elif wpnPic in (-2, -1, 54):
                return (4)
            elif wpnPic == 0:
                return (5)
            elif wpnPic in (-5, -4, 1, 2, 3, 4):
                return (0)
            elif wpnPic in (
                5, 6, 8, 11, 15, 17, 19, 21, 22, 24, 26, 27, 29, 30, 50, 51, 60
            ):
                return (1)
            elif wpnPic in (-6, 7, 10, 13, 16, 20, 23, 25, 28, 52):
                return (2)
            elif wpnPic in (9, 12, 14, 18):
                return (3)
            elif wpnPic == 53:
                return (8)
            elif wpnPic == 55:
                return (9)
            elif wpnPic == 56:
                return (10)
            elif wpnPic == 57:
                return (11)
            elif wpnPic == 58:
                return (12)
            elif wpnPic == 59:
                return (13)
            break
        if case(2):
            if wpnPic in range(-5, 0):
                return (4)
            elif wpnPic == 0:
                return (5)
            elif wpnPic in (1, 60):
                return (0)
            elif wpnPic in (2, 9):
                return (1)
            elif wpnPic in (6, 7, 10, 52, 54):
                return (2)
            elif wpnPic in (3, 4, 5, 8, 50, 51):
                return (3)
            elif wpnPic == 53:
                return (4)
            elif wpnPic == 55:
                return (9)
            elif wpnPic == 56:
                return (10)
            elif wpnPic == 57:
                return (11)
            elif wpnPic == 58:
                return (12)
            elif wpnPic == 59:
                return (13)
            break
        if case(3):
            if wpnPic in range(-5, 0):
                return (4)
            elif wpnPic == 0:
                return (5)
            elif wpnPic in (1, 2):
                return (0)
            elif wpnPic == (3, 5, 6, 7, 50, 52, 53, 54):
                return (1)
            elif wpnPic in (4, 8, 9, 10, 59):
                return (2)
            elif wpnPic == 51:
                return (3)
            elif wpnPic == 55:
                return (9)
            elif wpnPic == 56:
                return (10)
            elif wpnPic == 57:
                return (11)
            elif wpnPic == 58:
                return (12)
            elif wpnPic == 60:
                return (13)
            break

    return (0)


#------------------------------------------------------------------------------

# TODO: How to do Event stuff?
def RequestSignup(evt):
    if evt is KeyboardEvent:
        if (
            (KeyboardEvent(evt).keyCode != 13)
            and (KeyboardEvent(evt).keyCode != 10)
            and (KeyboardEvent(evt).keyCode != 16777230)
        ):
            #inpText = actor[INP_NAME].getChildAt(1).text
            if (inpText.substr(0, 7) == "xxxtest"):
                #actor[INP_EMAIL].getChildAt(1).text =
                #   (inpText + "@playagames.com")
                #actor[INP_PASSWORD].getChildAt(1).text = "12345"
                #Add(CB_AGB_CHECKED)
                pass
            return

    if (getChildByName(actor[CB_AGB_CHECKED].name)):
        if ((param_bullshit_text != "") and (OnStage(CB_FUCK_CHECKED))):
            #param_cid = param_bullshit_cid
            #so.data.cid = param_cid
            #so.flush()
            pass

        # Create account
        # SendAction(
        #   ACT_ACCOUNT_CREATE, actor[INP_NAME].getChildAt(1).text,
        #   actor[INP_PASSWORD].getChildAt(1).text,
        #   actor[INP_EMAIL].getChildAt(1).text,
        #   param_rec, ((buffedReq) ? ("buf" + buffed_id) : param_adv),
        #   CharVolk, ((CharMann) ? 1 : 2), CharKaste,
        #   (((((((((((((((((CharMouth + "/") + CharHair) + "/") + CharBrows)
        #   + "/") + CharEyes) + "/") + CharBeard) + "/") + CharNose) + "/") +
        #   CharEars) + "/") + CharSpecial) + "/") +
        #   CharSpecial2) + "/"), param_cid)
    else:
        ErrorMessage(texts[TXT_ERROR_AGB])


def LoadTrackingPixel(url=''):
    req = null
    variables = null
    pixelLoader = null
    pixel_success = null
    pixel_failed = null
    url = url

    log.debug("Tracking Pixel Load:" + url)

    if (url.indexOf("?") == -1):
        url = url + "?random="
    else:
        url = url + "&random="

    url += str(int((Math.random() * 100000)))
    #url += ("&had_account=") + ((hadAccount) ? "1" : "0")

    if param_reload_pixel:
        #trc("Tracking Pixel Reload Mode for:", url)
        #trc("CID userd", param_cid)
        #trc("Action", act)
        #req = new URLRequest("index.php")
        #req.method = URLRequestMethod.POST
        #variables = new URLVariables()
        #variables.pixel_url = url
        #variables.pixel_cid = param_cid
        #variables.pixel_player_id = Savegame[SG_PLAYER_ID]
        #variables.pixel_action = (((nextPxl == 0)) ? act : Math.abs(nextPxl))
        #req.data = variables
        logInAfterPixel = False
        #navigateToURL(req, "_self")
    else:
        if param_internal_pixel:
            # pixel_success = function (evt:Event){
            #     var pixelData:String
            #     pixelData = pixelLoader.data
            #     if ((((pixelData.toLowerCase().substr(0, 7) == "http://"))
            #     or ((pixelData.toLowerCase().substr(0, 8) == "https://")))){
            #         ExternalInterface.call("loadpixel", pixelData)
            #     }
            #     pixelLoader.removeEventListener(Event.COMPLETE, pixel_success)
            #     pixelLoader.removeEventListener(
            #           IOErrorEvent.IO_ERROR, pixel_failed
            #     )
            #     pixelLoader.removeEventListener(
            #       SecurityErrorEvent.SECURITY_ERROR, pixel_failed
            #     )
            # }
            # pixel_failed = function (evt:Event){
            #     pixelLoader.removeEventListener(Event.COMPLETE, pixel_success)
            #     pixelLoader.removeEventListener(
            #       IOErrorEvent.IO_ERROR, pixel_failed
            #     )
            #     pixelLoader.removeEventListener(
            #       SecurityErrorEvent.SECURITY_ERROR, pixel_failed
            #     )
            # }
            # pixelLoader = new URLLoader()
            # pixelLoader.addEventListener(Event.COMPLETE, pixel_success)
            # pixelLoader.addEventListener(IOErrorEvent.IO_ERROR, pixel_failed)
            # pixelLoader.addEventListener(
            #   SecurityErrorEvent.SECURITY_ERROR, pixel_failed
            # )
            # pixelLoader.load(new URLRequest(url))
            pass
        else:
            ExternalInterface.call("loadpixel", url)


def DoActZauberladen():
    ErrorMessage(" ")
    Remove(CHAR_RIGHTPANE)
    Remove(FIDGET_EPCIOVL)
    Remove(SHAKES_EPCIOVL)
    Add(SCREEN_FIDGET)
    if Savegame[SG_LEVEL] >= 66:
        Add(CA_GOTO_WITCH)
    if ((specialAction == 2) or (specialAction == 5)):
        Add(FIDGET_EPCIOVL)
        actor[FIDGET_EPCIOVL].mouseEnabled = False
    if (not SleepTime()):
        Remove(FIDGET_NIGHT)
    else:
        Remove(FIDGET_DAY)
    if Capabilities.version.substr(0, 3) != "IOS":
        if lightMode:
            Remove(FIDGET_TAGKERZE)
            Remove(FIDGET_NACHTKERZE)
    Remove(FIDGET_BLINZELN)


def DoActSchmiede():
    ErrorMessage(" ")
    Remove(CHAR_RIGHTPANE)
    Remove(FIDGET_EPCIOVL)
    Remove(SHAKES_EPCIOVL)
    Add(SCREEN_SHAKES)
    if ((specialAction == 2) or (specialAction == 5)):
        Add(SHAKES_EPCIOVL)
        actor[SHAKES_EPCIOVL].mouseEnabled = false
    Remove(SHAKES_IDLE, SHAKES_IDLE1, SHAKES_IDLE2, SHAKES_IDLE3)
    if not SleepTime():
        Remove(SHAKES_NIGHT, SHAKES_BLINZELN1, SHAKES_BLINZELN2)
    else:
        Remove(SHAKES_DAY)


def RequestPlayerScreen(evt):
    selIndex = actor[HALL_LIST].getChildIndex(evt.target)
    if selIndex < 5:
        return

    selRow = int((selIndex - 5) / 6) + 1
    selName = HallListName[selRow]
    selGilde = HallListGilde[selRow]
    if selName == "":
        return
    SendAction(ACT_REQUEST_CHAR, selName)




'''

ParseSavegame:* = function (
    strSaveGame:String, FillFaceVariables:Boolean=true, noSpoil:Boolean=false
){
    var i:* = 0
    var debugInfo:* = null
    var binStr:* = null
    var strSaveGame:* = strSaveGame
    var FillFaceVariables:Boolean = FillFaceVariables
    var noSpoil:Boolean = noSpoil
    debugInfo = ""
    Savegame = ("0/" + strSaveGame).split("/")
    if (!noSpoil){
        towerLevel = int((Savegame[SG_MOUNT] / 65536))
    }
    Savegame[SG_MOUNT] = (Savegame[SG_MOUNT] - (towerLevel * 65536))
    binStr = Number(Savegame[SG_GENDER]).toString(2)
    while (binStr.length < 32) {
        binStr = ("0" + binStr)
    }
    i = 0
    while (i < 13) {
        MirrorPieces[i] = (binStr.substr((i + 1), 1) == "1")
        i = (i + 1)
    }
    hasMirror = (binStr.substr(23, 1) == "1")
    canRob = (binStr.substr(22, 1) == "1")
    if (binStr.substr(31) == "1"){
        Savegame[SG_GENDER] = 1
    } else {
        Savegame[SG_GENDER] = 2
    }
    if ((Savegame[SG_ALBUM] - 10000) > contentMax){
        Savegame[SG_ALBUM] = (contentMax + 10000)
    }
    i = 0
    while (i < SG_BACKPACK_SIZE) {
        ExpandItemStructure(Savegame, (SG_BACKPACK_OFFS + (i * SG_ITM_SIZE)))
        i = (i + 1)
    }
    i = 0
    while (i < SG_INVENTORY_SIZE) {
        ExpandItemStructure(Savegame, (SG_INVENTORY_OFFS + (i * SG_ITM_SIZE)))
        i = (i + 1)
    }
    i = 0
    while (i < 6) {
        ExpandItemStructure(Savegame, (SG_SHAKES_ITEM1 + (i * SG_ITM_SIZE)))
        ExpandItemStructure(Savegame, (SG_FIDGET_ITEM1 + (i * SG_ITM_SIZE)))
        i = (i + 1)
    }
    i = 0
    while (i < 3) {
        ExpandItemStructure(Savegame, (SG_QUEST_OFFER_REWARD_ITM1 + (i * SG_ITM_SIZE)))
        i = (i + 1)
    }
    i = 0
    while (i < Savegame.length) {
        debugInfo = (debugInfo + (((String(i) + "=") + Savegame[i]) + ", "))
        i = (i + 1)
    }
    if (((!((LastLevel == 0))) and ((int(Savegame[SG_LEVEL]) > LastLevel)))){
        LevelUp = true
        PulseChar = true
    }
    LastLevel = int(Savegame[SG_LEVEL])
    FriendLink = ((("http://" + server) + "/index.php?rec=") + Savegame[SG_PLAYER_ID])
    if (oldAch.length != 0){
        i = 0
        while (i < 8) {
            if (achLevel(Savegame, i) > oldAch[i]){
                oldAch[i] = -(achLevel(Savegame, i))
            } else {
                oldAch[i] = achLevel(Savegame, i)
            }
            i = (i + 1)
        }
    } else {
        i = 0
        while (i < 8) {
            oldAch[i] = achLevel(Savegame, i)
            i = (i + 1)
        }
    }
    if ((((oldAlbum >= 0)) and ((Savegame[SG_ALBUM] > oldAlbum)))){
        AlbumEffect = true
    }
    oldAlbum = Savegame[SG_ALBUM]
    if (FillFaceVariables){
        CharVolk = Savegame[SG_RACE]
        CharMann = (Savegame[SG_GENDER] == 1)
        CharKaste = Savegame[SG_CLASS]
        CharMouth = Savegame[SG_FACE_1]
        CharBeard = Savegame[SG_FACE_5]
        CharNose = Savegame[SG_FACE_6]
        CharEyes = Savegame[SG_FACE_4]
        CharBrows = Savegame[SG_FACE_3]
        CharEars = Savegame[SG_FACE_7]
        CharHair = Savegame[SG_FACE_2]
        CharSpecial = Savegame[SG_FACE_8]
        CharSpecial2 = Savegame[SG_FACE_9]
        i = CharHair
        CharColor = 0
        while (i > 100) {
            i = (i - 100)
            CharColor++
        }
    }
    if (!noSpoil){
        if (textDir == "right"){
            var _local5 = actor[IF_GOLD]
            with (_local5) {
                x = IF_LBL_GOLDPILZE_X
            }
            _local5 = actor[LBL_IF_GOLD]
            with (_local5) {
                text = String(int((Savegame[SG_GOLD] / 100)))
                x = ((IF_LBL_GOLDPILZE_X - textWidth) - 10)
            }
            _local5 = actor[IF_SILBER]
            with (_local5) {
                x = ((actor[LBL_IF_GOLD].x - width) - 10)
            }
            _local5 = actor[LBL_IF_SILBER]
            with (_local5) {
                text = ((((int((Savegame[SG_GOLD] % 100)) < 10)) ? "0" : "") + String(int((Savegame[SG_GOLD] % 100))))
                x = ((actor[IF_SILBER].x - textWidth) - 10)
            }
            _local5 = actor[LBL_IF_PILZE]
            with (_local5) {
                text = Savegame[SG_MUSH]
                x = ((IF_LBL_GOLDPILZE_X - textWidth) - 10)
            }
            if (txt[TXT_MUSHROOMS_BOUGHT]){
                EnablePopup(LBL_IF_PILZE, txt[TXT_MUSHROOMS_BOUGHT].split("%1").join(Savegame[SG_MUSHROOMS_MAY_DONATE]))
            }
        } else {
            _local5 = actor[LBL_IF_SILBER]
            with (_local5) {
                text = ((((int((Savegame[SG_GOLD] % 100)) < 10)) ? "0" : "") + String(int((Savegame[SG_GOLD] % 100))))
                x = ((IF_LBL_GOLDPILZE_X - textWidth) - 10)
            }
            _local5 = actor[IF_GOLD]
            with (_local5) {
                x = ((actor[LBL_IF_SILBER].x - 24) - 10)
            }
            _local5 = actor[LBL_IF_GOLD]
            with (_local5) {
                text = String(int((Savegame[SG_GOLD] / 100)))
                x = ((actor[IF_GOLD].x - textWidth) - 10)
            }
            _local5 = actor[LBL_IF_PILZE]
            with (_local5) {
                text = Savegame[SG_MUSH]
                x = ((IF_LBL_GOLDPILZE_X - textWidth) - 10)
            }
            if (txt[TXT_MUSHROOMS_BOUGHT]){
                EnablePopup(LBL_IF_PILZE, txt[TXT_MUSHROOMS_BOUGHT].split("%1").join(Savegame[SG_MUSHROOMS_MAY_DONATE]))
            }
        }
    }
    Add(IF_STATS)
    if (Number(Savegame[SG_SERVER_TIME]) > 0){
        ServerTime.setTime(((1000 * Number(Savegame[SG_SERVER_TIME])) - ((1000 * 60) * 60)))
        LocalTime = new Date()
        TimeCalc.start()
    }
    if (sessionId == ""){
        trc("Fehler: Keine Session ID für PHP-Tunneling vergeben. PHP-Tunneling wird deaktiviert.")
        ShowLoginScreen()
    } else {
        trc("Session ID für PHP Tunneling:", sessionId)
    }
    if (int(Savegame[SG_GUILD_INDEX]) != GildenID){
        GildenID = int(Savegame[SG_GUILD_INDEX])
        if (GildenID != 0){
            SendAction(ACT_REQUEST_GUILD, Savegame[SG_GUILD_INDEX])
        }
    }
    if ((((int(Savegame[SG_UNREAD_MESSAGES]) > 0)) and (!(OnStage(POST_LIST))))){
        PulsePost = true
    }
    if (int(Savegame[SG_LOCKDURATION]) != 0){
        RequestLogout()
    }
    if (nextPxl < 0){
        nextPxl = Math.abs(nextPxl)
    }
}


RequestPlayerGuildScreen:* = function (evt:MouseEvent){
    var selIndex:int
    var selRow:int
    selIndex = actor[HALL_LIST].getChildIndex(evt.target)
    if (selIndex < 5){
        return
    }
    selRow = (int(((selIndex - 5) / 6)) + 1)
    selName = HallListName[selRow]
    selGilde = HallListGilde[selRow]
    if (selGilde == txt[TXT_NOGUILD]){
        return
    }
    if (selGilde == ""){
        return
    }
    if (selGilde == Gilde){
        SendAction(ACT_SCREEN_GILDEN)
    } else {
        SendAction(ACT_SCREEN_FREMDGILDE, selGilde)
    }
}

HallListAddField:* = function (pos_x:int, pos_y:int, txt:String, fmt:TextFormat, maxWidth:int=0, isGuild:Boolean=false):void{
    var tmpObj:* = null
    var thisFieldPopup:* = null
    var pos_x:* = pos_x
    var pos_y:* = pos_y
    var txt:* = txt
    var fmt:* = fmt
    var maxWidth:int = maxWidth
    var isGuild:Boolean = isGuild
    var InstallHallPopup:* = function (evt:Event){
        if (thisFieldPopup != ""){
            EnablePopup(HALL_LIST, thisFieldPopup)
        } else {
            EnablePopup(HALL_LIST)
        }
    }
    thisFieldPopup = ""
    if (txt == "[K]"){
        tmpObj = new Bitmap(actor[IF_KRIEGER].content.bitmapData.clone())
        var _local8 = tmpObj
        with (_local8) {
            allowSmoothing = true
            forceSmoothing = true
            smoothing = true
            mouseEnabled = true
        }
    } else {
        if (txt == "[M]"){
            tmpObj = new Bitmap(actor[IF_MAGIER].content.bitmapData.clone())
            _local8 = tmpObj
            with (_local8) {
                allowSmoothing = true
                forceSmoothing = true
                smoothing = true
                mouseEnabled = true
            }
        } else {
            if (txt == "[J]"){
                tmpObj = new Bitmap(actor[IF_JAEGER].content.bitmapData.clone())
                _local8 = tmpObj
                with (_local8) {
                    allowSmoothing = true
                    forceSmoothing = true
                    smoothing = true
                    mouseEnabled = true
                }
            } else {
                tmpObj = new TextField()
                _local8 = tmpObj
                with (_local8) {
                    defaultTextFormat = fmt
                    autoSize = TextFieldAutoSize.LEFT
                    background = false
                    selectable = false
                    embedFonts = fontEmbedded
                    antiAliasType = AntiAliasType.ADVANCED
                    text = txt
                }
                if (maxWidth > 0){
                    thisFieldPopup = TrimTooLong(tmpObj, maxWidth)
                }
            }
        }
    }
    _local8 = tmpObj
    with (_local8) {
        if (isGuild){
            addEventListener(MouseEvent.CLICK, RequestPlayerGuildScreen)
        } else {
            addEventListener(MouseEvent.CLICK, RequestPlayerScreen)
        }
        addEventListener(MouseEvent.MOUSE_OVER, InstallHallPopup)
        if (textDir == "right"){
            x = (pos_x - width)
        } else {
            x = pos_x
        }
        y = pos_y
        visible = true
    }
    actor[HALL_LIST].addChild(tmpObj)
}
'''


def ActionHandler(event):
    '''
        handle server reply
    '''

    '''
        dataStr:* = null
        act:* = 0
        parStr:* = null
        i:* = 0
        ii:* = 0
        tmpArray:* = null
        tmpFmt:* = null
        line:* = 0
        HallListName:* = null
        HallListGilde:* = null
        isMine:* = false
        logInAfterPixel:* = false
        par:* = null
        pa:* = null
        pas:* = null
        pxlStr:* = null
        pxlArr:* = null
        inVar:* = false
        pixel:* = undefined
        DoActZauberladen:* = null
        DoActSchmiede:* = null
        tmpByteArray:* = null
        bitArray:* = null
        PaymentLink:* = null
        externalWhisperer:* = null
        postReadText:* = null
        tmpFighterArray:* = undefined
        ichAnfg:* = undefined
        erAnfg:* = undefined
        tmpFightArray:* = undefined
        ichEnde:* = undefined
        erEnde:* = undefined
        rundenZahl:* = undefined
        tmpHonor:* = undefined
        tmpGold:* = undefined
        tmpSilver:* = undefined
        alertWords:* = null
        event:* = event
    '''

    '''
    dataStr = str(event.data)
    isMine = False
    logInAfterPixel = False

    if dataStr.charAt(0) == "+":
        dataStr = dataStr.substr(1)
        if guildBlinkReady:
            SendAction(ACT_GET_CHAT_HISTORY)
            PulseGildeOnHistory = True

    if dataStr.charAt(0) == "E":
        act = -1 * int(dataStr.slice(1, 4))
        parStr = dataStr.slice(4)
    else:
        act = int(dataStr.slice(0, 3))
        parStr = dataStr.slice(3)

    par = parStr.split("")
    if (OnStage(FIGHT_SKIP)):
        return

    SetTitleBar()
    if (act != ERR_SERVER_DOWN):
        intervalMultiplierReconnect = 1

    skipAllowed = False

    for case in switch(act):
        if case(ERR_TOWER_CLOSED):
            break
        if case(RESP_TOWER_SAVE):
            ParseSavegame(par[0])
            ShowTowerScreen(par)
            break
        if case(RESP_TOILET_LOCKED):
            Remove(TAVERNE_BARKEEPER_HINT)
            Remove(TAVERNE_CAS)
            Add(BEEROFFER)
            EnablePopup(QO_REWARDGOLD)
            EnablePopup(QO_REWARDSILVER)
            EnablePopup(LBL_QO_REWARDGOLD)
            EnablePopup(LBL_QO_REWARDSILVER)
            EnablePopup(LBL_QO_REWARDEXP)

            _local3 = actor[LBL_QO_QUESTNAME]

            #with (_local3) do:
            #    text = txt[(TXT_TOILET_HINT + 5)]
            #    x = (
            #        (QO_BLACK_SQUARE_X + QO_QUESTNAME_X) - int((textWidth / 2))
            #    )

            _local3 = actor[LBL_QO_QUESTTEXT]

            #with (_local3) {
            #    text = texts[(TXT_TOILET_HINT + 6)].split("#").join(
            #        String.fromCharCode(13)
            #    )

            Arabize(LBL_QO_QUESTTEXT)
            actor[LBL_QO_TIME].text = ""
            actor[LBL_QO_REWARDEXP].text = ""
            Remove(BO_BUY)
            Add(BO_PORTRAIT_TH)
            break

        if case(RESP_TOILET_UNLOCKED):
            Play(SND_MAINQUESTS_UNLOCK)
        if case(RESP_TOILET_DROPPED):
            pass
        if case(RESP_TOILET_FULL):
            pass
        if case(RESP_TOILET_FLUSHED):
            pass
        if case(ACT_SCREEN_TOILET):
            pass
        if case(RESP_TOILET_TANKFULL):
            pass
        if case(REPS_TOILET_DROPTWICE):
            if (act == RESP_TOILET_DROPPED):
                Play(SND_TOILET_DROP)

            ParseSavegame(par[0])
            if (par.length > 1):
                if (act == RESP_TOILET_FLUSHED):
                    ShowToilet(par[1], par[2], par[3], par[4], par[5])
                else:
                    ShowToilet(par[1], par[2], par[3], par[4])

            if (act == RESP_TOILET_FULL):
                ErrorMessage(txt[TXT_TOILET_FULL])
            else:
                if (act == RESP_TOILET_TANKFULL):
                    ErrorMessage(txt[TXT_TOILET_TANKFULL])
                else:
                    if (act == REPS_TOILET_DROPTWICE):
                        ErrorMessage(txt[TXT_TOILET_DROPTWICE])
                    else:
                        ErrorMessage("")
            break
        case RESP_SCREEN_WITCH:
            ParseSavegame(par[0])
            # ShowWitch(
            #    par[1].split("/"),
            #    (par[2].split("/")[0] == "1"),
            #    par[2].split("/")[1])
            break
        case ERR_NO_SLOT_FOR_FLUSHING:
            ErrorMessage(txt[TXT_ERR_NO_SLOT_FOR_FLUSHING])
            break
        case ERR_TOILET_EMPTY:
            ErrorMessage(txt[TXT_ERR_TOILET_EMPTY])
            break
        case ERR_GUILD_DESCR_TOO_LONG:
            ErrorMessage(txt[TXT_ERR_GUILD_DESCR_TOO_LONG])
            break
        case ERR_NO_CHAT_INFO:
            break
        case ERR_NO_CHAT_OVERFLOW:
            break
        case ERR_GUILD_RANK_WRONG:
            ErrorMessage(txt[TXT_ERROR_GUILD_RANK_WRONG])
            break
        case RESP_ALBUM:
            tmpByteArray = Base64.decodeToByteArray(par.join("/"))
            bitArray = new Array()
            i = 0
            while (i < tmpByteArray.length):
                bitArray.push(((tmpByteArray[i] & 128) / 128))
                bitArray.push(((tmpByteArray[i] & 64) / 64))
                bitArray.push(((tmpByteArray[i] & 32) / 32))
                bitArray.push(((tmpByteArray[i] & 16) / 16))
                bitArray.push(((tmpByteArray[i] & 8) / 8))
                bitArray.push(((tmpByteArray[i] & 4) / 4))
                bitArray.push(((tmpByteArray[i] & 2) / 2))
                bitArray.push((tmpByteArray[i] & 1))
                i = (i + 1)

            AlbumContent = bitArray
            ShowScreenAlbum()
            break
        case RESP_INVITE_SUCCESS:
            Show(INVITE_SUCCESS)
            Hide(INVITE_INPUTDIALOGUE)
            break
        case ERR_INVITE_NOT_VALIDATED:
            pass
        case ERR_INVITE_TOO_MANY:
            pass
        case ERR_INVITE_EMAIL_REJECTED:
            ErrorMessage(txt[
                TXT_ERROR_INVITE_NOT_VALIDATED - act + ERR_INVITE_NOT_VALIDATED
            ])
            break
        case RESP_LOGOUT_SUCCESS:
            break
        case ERR_SERVER_DOWN:
            ShowDisconnectScreen()
            if (
                (param_reconnect * intervalMultiplierReconnect) < (1000 * 120)
            ):
                intervalMultiplierReconnect = intervalMultiplierReconnect + 0.1
            break
        case ERR_JOINED_TOO_RECENTLY:
            ParseSavegame(par[0])
            #ErrorMessage(txt[TXT_GUILD_JOINED_TOO_RECENTLY].split("%1").join(
            #      TimeStr((Number(Savegame[SG_GUILD_JOIN_DATE]
            #      ) + ((60 * 60) * 24)), true)))
            break
        case RESP_ATTACK_NOT_EXIST:
            ErrorMessage(txt[TXT_ERROR_PLAYER_NOT_FOUND])
            break
        case ERR_GUILD_FIGHT_TOO_EXPENSIVE:
            pass
        case ERR_GUILD_ALREADY_UNDER_ATTACK:
            pass
        case ERR_GUILD_ATTACK_DELAY:
            pass
        case ERR_GUILD_ALREADY_ATTACKING:
            pass
        case ERR_GUILD_ATTACK_STATUS:
            ErrorMessage(txt[
                ((TXT_ERROR_GUILD_FIGHT_TOO_EXPENSIVE - act)
                + ERR_GUILD_FIGHT_TOO_EXPENSIVE)
            ])
            break
        case RESP_GUILD_NAMES:
            if par[0] == "":
                if (lastGuildData[GUILD_IS_RAID] != 0):
                    if (txt[TXT_RAID_TEXT]):
                        #actor[LBL_GILDE_ATTACK].text = txt[
                        #    (TXT_RAID_TEXT
                        #     + ((IsToday(lastGuildData[GUILD_ATTACK_TIME]))
                        #        ? 13
                        #        : 12))
                        #].split("%1").join(
                        #   txt[(TXT_DUNGEON_NAMES
                        #        + int(lastGuildData[GUILD_RAID_LEVEL
                        #   ]))
                        #]).split("%2").join(
                        #  TimeStr(lastGuildData[GUILD_ATTACK_TIME], true)
                        #)
                        pass
                    else:
                        actor[LBL_GILDE_ATTACK].text = ""
                else:
                    actor[LBL_GILDE_ATTACK].text = ""
            else:
                #actor[LBL_GILDE_ATTACK].text = txt[
                #    (TXT_GUILD_BATTLE_MSG + ((IsToday(
                #        lastGuildData[GUILD_ATTACK_TIME])
                #        ) ? 2 : 0))].split("%1")
                #        .join(par[0])
                #        .split("%2")
                #        .join(TimeStr(lastGuildData[GUILD_ATTACK_TIME], true))
                pass

            #actor[LBL_GILDE_DEFENCE].text = ((par[1])=="")
            #    ? ""
            #    : txt[
            #    ((TXT_GUILD_BATTLE_MSG + 1)
            #     + ((IsToday(lastGuildData[GUILD_DEFENCE_TIME]))
            #        ? 2
            #        : 0))]
            #        .split("%1")
            #        .join(par[1])
            #        .split("%2")
            #        .join(TimeStr(lastGuildData[GUILD_DEFENCE_TIME], true))
            if par[2]:
                if lastGuildData[GUILD_IS_RAID] != 0:
                    if txt[TXT_RAID_TEXT]:
                        #EnablePopup(GILDE_ATTACK, txt[(TXT_RAID_TEXT + 14)]
                        #             .split("%1").join(par[2]))
                        pass
                else:
                    if (par[0] == "") or (par[2] == ""):
                        EnablePopup(GILDE_ATTACK)
                    else:
                        if (txt[TXT_GUILD_ATTACK_PLAYER]):
                            #EnablePopup(
                            #    GILDE_ATTACK,
                            #    txt[TXT_GUILD_ATTACK_PLAYER]
                            #        .split("%1")
                            #        .join(par[2]))
                            pass
                        else:
                            EnablePopup(GILDE_ATTACK, par[2])
            else:
                EnablePopup(GILDE_ATTACK)

            guildAttackTime = lastGuildData[GUILD_ATTACK_TIME]
            guildDefenceTime = lastGuildData[GUILD_DEFENCE_TIME]
            guildAttacked = par[0]
            guildAttacking = par[1]
            break
        case ERR_SESSION_ID_EXPIRED:
            #log trc("Achtung, sessionId ist abgelaufen.")
            sessionId = ""
            fightFlushMode = False
            ShowLoginScreen()
            break
        case ERR_MSG_LEVEL_TOO_LOW:
            if (txt[TXT_ERROR_MSG_LEVEL_TOO_LOW]):
                ErrorMessage(txt[TXT_ERROR_MSG_LEVEL_TOO_LOW])
            else:
                ErrorMessage(
                  "Error: You need to reach at least level 10 to send messages."
                )
            break
        case ERR_MSG_NOT_VALIDATED:
            if (txt[TXT_ERROR_MSG_NOT_VALIDATED]):
                ErrorMessage(txt[TXT_ERROR_MSG_NOT_VALIDATED])
            else:
                ErrorMessage(
                  "Error: Your email address has to be validated in order
                  to send messages."
                )
            break
        case ERR_INVENTORY_FULL:
            ErrorMessage(txt[TXT_ERROR_INVENTORY_FULL])
            break
        case ERR_INVENTORY_FULL_ADV:
            if (txt[TXT_ERROR_INVENTORY_FULL_ADV]):
                ErrorMessage(txt[TXT_ERROR_INVENTORY_FULL_ADV])
            else:
                ErrorMessage(txt[TXT_ERROR_INVENTORY_FULL])

            FadeOut(QUEST_SLOT, 20, 0.04, 0.3)
            forceAdventure = True
            break
        case ERR_PLACE_BET:
            break
        case RESP_BET_WON:
            ParseSavegame(par[0])
            ShowBetResult(true)
            break
        case RESP_BET_LOST:
            ParseSavegame(par[0])
            ShowBetResult(false)
            break
        case ERR_ACCOUNTS_PER_IP:
            ErrorMessage(txt[TXT_ERRROR_ACCOUNTS_PER_IP])
            break
        case ERR_TOO_SOON:
            break
        case ERR_LOCKED_PAYMENT:
            #ErrorMessage(txt[TXT_ERRROR_LOCKED_PAYMENT]
            #   .split("%supportemail%")
            #   .join(param_support_email)
            #   .split("%gamestaffemail%")
            #   .join(param_gamestaff_email))
            break
        case ERR_LOCKED_ADMIN:
            if (par[2]):
                if (txt[((TXT_LOCK_REASON + int(par[1])) - 1)]):
                    #ErrorMessage(txt[((TXT_LOCK_REASON + int(par[1])) - 1)]
                    #    .split("%1")
                    #    .join(String((1 + int((par[2] / ((60 * 60) * 24)))))))
                else:
                    ErrorMessage(txt[TXT_ERRROR_LOCKED_ADMIN])
            else:
                ErrorMessage(txt[TXT_ERRROR_LOCKED_ADMIN])
            break
        case RESP_REQUEST_GUILD_QUIET:
            DestroyGuildBtnTimer = True
            if (OnStage(LBL_GILDE_CHAT_CAPTION)):
                SendAction(ACT_SCREEN_GILDEN)
            break
        case RESP_REQUEST_GUILD:
            DestroyGuildBtnTimer = True
            if (OnStage(LBL_GILDE_CHAT_CAPTION)):
                SendAction(ACT_SCREEN_GILDEN)
            else:
                PulseGilde = True
            break
        case ERR_GUILD_DONATE_FRA:
            ErrorMessage(txt[TXT_ERROR_GUILD_DONATE_FRA])
            break
        case ERR_GUILD_DONATE_NEG:
            ErrorMessage(txt[TXT_ERROR_GUILD_DONATE_NEG])
            break
        case ERR_MAIL_EXISTS:
            ErrorMessage(txt[TXT_ERROR_MAIL_EXISTS])
            break
        case RESP_VALIDATE_OK:
            if (par[0]):
                param_cid = par[0]
                #log trc("cid set by server:", param_cid)
            ShowEmailNagScreen(1)
            break
        case ERR_VALIDATE:
            ShowEmailNagScreen(2)
            break
        case RESP_PASSWORD_SENT:
            ShowLoginScreen()
            break
        case ERR_REQUEST_PW:
            ErrorMessage(txt[TXT_ERROR_REQUEST_PW])
            break
        case RESP_TRANS_COUNT:
            #PaymentLink = ((((((
            #   ("http://www.payment.playa-games.com/legal/wiretransfer_"
            #    + lang_code) + ".php?amount=")
            #    + String(int((tmpAmount / 100))))
            #    + (((lang_code == "de")) ? "," : "."))
            #    + String((tmpAmount % 100))) + "&use=") + par[0])
            navigateToURL(new URLRequest(PaymentLink), "_blank")
            break
        case RESP_DEALER_AKTION:
            pass
        case RESP_DEALER_SPONSOR:
            pass
        case RESP_EMAIL_RESENT:
            actor[LBL_EMAIL_RESEND].htmlText = txt[TXT_EMAIL_RESENT]
            Arabize(LBL_EMAIL_RESEND)
            actor[LBL_OPTION_FIELD1].htmlText = txt[TXT_EMAIL_RESENT]
            Arabize(LBL_OPTION_FIELD1)
            Remove(OPTION_DOCHANGE)
            break
        case RESP_CHAT_HISTORY:
            if (par[0] != lastChatHist):
                lastChatHist = par[0]
                intervalMultiplierChat = 1
            else:
                if (intervalMultiplierChat < 5):
                    intervalMultiplierChat = (intervalMultiplierChat + 0.1)
                else:
                    if (intervalMultiplierChat < 30):
                        intervalMultiplierChat = (intervalMultiplierChat + 1)
            if (par[0] == ""):
                tmpArray = []
            else:
                tmpArray = par[0].split("/")
            firstChatFill = False
            if (lastChatIndex == 0):
                firstChatFill = True
                i = 0
                while (i < 40):
                    _local3 = actor[(LBL_GILDE_CHAT + i)]
                    with (_local3):
                        defaultTextFormat = FontFormat_Chat
                        text = ""

                    i = (i + 1)
            if (tmpArray.length > 0):
                i = (tmpArray.length - 1)
                while (i >= 0):
                    if (!par[3]):
                        if (((lastChatIndex != 0)
                            and (DecodeChat(tmpArray[i], false, true) == "1"))
                        ):
                            Remove(GILDE_CHAT)
                        ChatLine(
                            DecodeChat(tmpArray[i]),
                            false,
                            getHlIndex(tmpArray[i])
                        )
                        if (((((tmpArray[i].indexOf("§") != -1)
                            or (!(so.data.noPulseOnSysMsg))))
                            and (PulseGildeOnHistory))):
                            PulseGilde = True
                        if (lastChatIndex != 0):
                            ii = 0
                            while (ii < offlineGuildMembers.length):
                                if (tmpArray[i].toLowerCase().indexOf(
                                    (offlineGuildMembers[ii].toLowerCase()
                                     + ":§")) != -1
                                ):
                                    if (OnStage(INP_GILDE_CHAT)):
                                        SendAction(ACT_SCREEN_GILDEN)
                                    break
                                ii = (ii + 1)
                    else:
                        if (par[3].split("/")[i] > lastChatIndex):
                            if (((!(firstChatFill)) and (chatSound))):
                                Play(SND_ERROR)

                            lastChatIndex = par[3].split("/")[i]
                            if (((!((lastChatIndex == 0)))
                                and (DecodeChat(
                                     tmpArray[i], false, true
                                     ) == "1"))
                            ):
                                Remove(GILDE_CHAT)
                            ChatLine(
                                DecodeChat(
                                    tmpArray[i]
                                ),
                                false,
                                getHlIndex(tmpArray[i])
                            )
                            if (((((tmpArray[i].indexOf("§") != -1)
                                or (!(so.data.noPulseOnSysMsg))))
                                and (PulseGildeOnHistory))
                            ):
                                PulseGilde = True
                            ii = 0
                            while (ii < offlineGuildMembers.length):
                                if (tmpArray[i].toLowerCase().indexOf(
                                    (offlineGuildMembers[ii].toLowerCase()
                                     + ":§")) != -1
                                ):
                                    if (OnStage(INP_GILDE_CHAT)):
                                        SendAction(ACT_SCREEN_GILDEN)
                                    break
                                ii = (ii + 1)
                    i = (i - 1)
                PulseGildeOnHistory = False
            if (((par[1]) and (!(par[3])))):
                lastChatIndex = Number(par[1])
            if (par[2]):
                tmpArray = par[2].split("/")
            else:
                tmpArray = []
            if (tmpArray.length > 0):
                if (chatSound):
                    Play(SND_ERROR)
                i = (tmpArray.length - 1)
                while (i >= 0):
                    PulseGilde = True
                    externalWhisperer = tmpArray[i].substr(6)
                    externalWhisperer = externalWhisperer.substr(
                            0, externalWhisperer.indexOf(":§")
                    )
                    ChatLine(DecodeChat(
                        tmpArray[i]), false, getHlIndex(tmpArray[i]), true
                    )
                    addSuggestNames(externalWhisperer)
                    if (lastChatIndex != 0):
                        ii = 0
                        while (ii < offlineGuildMembers.length):
                            if (tmpArray[i].toLowerCase().indexOf(
                                (offlineGuildMembers[ii].toLowerCase()
                                 + ":§")) != -1
                            ):
                                if (OnStage(INP_GILDE_CHAT)):
                                    SendAction(ACT_SCREEN_GILDEN)
                                }
                                break
                            }
                            ii = (ii + 1)
                        }
                    }
                    i = (i - 1)
                }
            }
            guildBlinkReady = true
            if (((((!((newCrestSuggested == "")))
                and (!(firstChatFill)))) and (OnStage(INP_GILDE_CHAT)))
            ){
                clickChatLine(newCrestSuggested)
            }
            newCrestSuggested = ""
            break
        case RESP_WHISPER_SUCCESS:
            addSuggestNames(lastWhisperTarget)
            ChatLine(DecodeChat(par[0]), false, getHlIndex(par[0]), true)
            break
        case ERR_GUILD_NAME_REJECTED:
            ErrorMessage(txt[TXT_ERROR_GUILD_NAME_REJECTED])
            break
        case ERR_GUILD_NAME_LENGTH:
            ErrorMessage(txt[TXT_ERROR_GUILD_NAME_LENGTH])
            break
        case ERR_GUILD_NAME_CHARACTERS:
            ErrorMessage(txt[TXT_ERROR_GUILD_NAME_CHARACTERS])
            break
        case ERR_GUILD_EMAIL_VALIDATE:
            ErrorMessage(txt[TXT_ERROR_GUILD_EMAIL_VALIDATE])
            break
        case ERR_GUILD_MUSH_FREE:
            ErrorMessage(txt[TXT_ERROR_GUILD_MUSH_FREE])
            break
        case RESP_CHAT_LINE:
            if (DecodeChat(par[0], false, true) == "1"){
                Remove(GILDE_CHAT)
            }
            ChatLine(DecodeChat(par[0]), false, getHlIndex(par[0]))
            if (!OnStage(INP_GILDE_CHAT)){
                PulseGilde = true
            }
            break
        case RESP_GUILD_DONATE_SUCCESS:
            ParseSavegame(par[0])
            SendAction(ACT_SCREEN_GILDEN)
            break
        case RESP_NO_LOGIN:
            RequestLogout(undefined, true)
            ShowLoginScreen()
            break
        case RESP_DELETE_ACCOUNT_OK:
            RequestLogout()
            break
        case RESP_CHANGE_PASS_OK:
            so.data.password = optionNewData
            so.flush()
            actor[INP_LOGIN_PASSWORD].getChildAt(1).text = optionNewData
            ShowOptionScreen()
            ErrorMessage(txt[TXT_PASSWORD_CHANGED])
            break
        case RESP_CHANGE_NAME_OK:
            so.data.userName = optionNewData
            so.flush()
            actor[INP_NAME].getChildAt(1).text = optionNewData
            ParseSavegame(par[0])
            ShowOptionScreen()
            ErrorMessage(txt[TXT_NAME_CHANGED])
            break
        case RESP_CHANGE_MAIL_OK:
            ShowOptionScreen()
            ErrorMessage(txt[TXT_EMAIL_CHANGED])
            break
        case RESP_CHANGE_FACE_OK:
            ParseSavegame(par[0])
        case ACT_SCREEN_OPTIONEN:
            ShowOptionScreen()
            break
        case RESP_DEMO_SCREEN:
            ShowDemoScreen()
            break
        case RESP_PLAYER_SCREEN:
            ShowPlayerScreen(
                ("0/" + par[0]).split("/"),
                selName, par[2], resolveBreaks(par[1])
            )
            break
        case RESP_PLAYER_DESC_SUCCESS:
            PlayerDesc = actor[INP_CHARDESC].getChildAt(0).text
            break
        case RESP_GUILD_CHANGE_DESC_SUCCESS:
            break
        case RESP_GUILD_DATA:
            if (int(par[1]) == int(Savegame[SG_GUILD_INDEX])){
                Gilde = par[0]
            }
            lastChatIndex = 0
            SendAction(ACT_GET_CHAT_HISTORY)
            break
        case RESP_MAINQUEST:
            Hide(IF_STATS)
            ParseSavegame(par[10])
            PulseChar = false
        case RESP_QUEST_DONE:
        case RESP_QUEST_DONE_PIXEL:
        case RESP_QUEST_DONE_PIXEL_2:
            fightLock = true
            PostFightMode = false
            ShowFightScreen(
                par[0].split("/"), par[1].split("/"),
                (par[6] == "1"), par[2].split("/"),
                (par[5] == "2"), ((par[3] + "/") + par[4]).split("/"),
                int(par[7]), int(par[8]), (par[5] == "3"), false, int(par[9])
            )
            break
        case RESP_GUILD_FIGHT:
            towerFightMode = false
            alternateCharOppImg = true
            fightLock = true
            winners = new Array()
            lastRoundFighterName = ""
            fights = parStr.split("§")
            guildFightCount = int(((fights.length - 1) / 2))
            skipGuildFights = 0
            nextFightTimer.start()
            break
        case RESP_TOWER_FIGHT:
            towerFightMode = true
            alternateCharOppImg = true
            fightLock = true
            winners = new Array()
            lastRoundFighterName = ""
            fights = parStr.split("§")
            ParseSavegame(fights.pop(), true, true)
            guildFightCount = int(((fights.length - 1) / 2))
            skipGuildFights = 0
            nextFightTimer.start()
            break
        case RESP_QUEST_SKIP_ALLOWED_START:
            skipAllowed = true
        case RESP_QUEST_START:
            ParseSavegame(par[0])
            ShowQuestScreen()
            break
        case RESP_QUEST_SKIP_ALLOWED:
            skipAllowed = true
        case ACT_SCREEN_TAVERNE:
        case RESP_QUEST_STOP:
            ParseSavegame(par[0])
            if (par[1]){
                specialAction = par[1]
            } else {
                if (act != RESP_QUEST_STOP){
                    specialAction = 0
                } else {
                    trc("Quest cancelled, preserving special action flag!")
                }
            }
            trc("Tavern says special action is", specialAction)
            if (par[2] != undefined){
                preventTv = (par[2] == 1)
            }
            ShowTaverneScreen()
            break
        case ACT_SCREEN_GILDE_GRUENDEN:
            ShowScreenGildeGruenden()
            break
        case RESP_GUILD_FOUND_SUCCESS:
            _local3 = actor[LBL_IF_GOLD]
            with (_local3) {
                text = String((int(text) - 10))
                x = ((actor[IF_GOLD].x - textWidth) - 10)
            }
        case RESP_GUILD_RENAME_SUCCESS:
        case RESP_GUILD_IMPROVE_SUCCESS:
        case RESP_GUILD_OFFICER_SUCCESS:
        case RESP_GUILD_EXPEL_SUCCESS:
        case RESP_GUILD_INVITE_SUCCESS:
        case RESP_GUILD_MASTER_SUCCESS:
        case RESP_GUILD_JOIN_SUCCESS:
            SendAction(ACT_SCREEN_GILDEN)
            break
        case RESP_GUILD_DELETE_SUCCESS:
            Gilde = ""
            myOwnRank = -1
            myOwnAttackTarget = -1
            myOwnGuildMoney = -1
            ShowCityScreen()
            break
        case RESP_GUILD_COMMENCE_ATTACK_OK:
        case RESP_GUILD_JOIN_ATTACK_OK:
        case RESP_GUILD_JOIN_DEFENSE_OK:
            ParseSavegame(par[0])
            SendAction(ACT_SCREEN_GILDEN)
            break
        case ACT_SCREEN_GILDEN:
            Savegame[SG_GUILD_INDEX] = par[0].split("/")[0]
            Gilde = par[3]
            isMine = true
            intervalMultiplierChat = 1
        case RESP_OTHER_GUILD:
            DestroyGuildBtnTimer = true
            if (((((((!(OnStage(GILDE_CREST)))
                or ((act == RESP_OTHER_GUILD))))
                or (!((lastGuildCrestId == par[0].split("/")[0])))))
                or (((isMine) and ((oldCrestStr == getCrestStr())))))
            ){
                if (par[1].indexOf("§") != -1){
                    setCrestStr(par[1].split("§")[0])
                    par[1] = par[1].substr((par[1].indexOf("§") + 1))
                } else {
                    lastGuildData = par[0].split("/")
                    setDefaultCrest()
                }
                oldCrestStr = getCrestStr()
            } else {
                if (par[1].indexOf("§") != -1){
                    par[1] = par[1].substr((par[1].indexOf("§") + 1))
                }
            }
            if (lastGuildCrestId != par[0].split("/")[0]){
                oldCrestStr = getCrestStr()
            }
            ShowScreenGilden(
                par[0].split("/"),
                ((isMine) ? par[1] :
                (((par[1].indexOf("///") > -1)) ? par[1].split("///")[1] :
                par[1])), par[2].split("/"),
                par[3], isMine, int(par[5]), int(par[4]),
                ((par[6]) ? par[6] : 0)
            )
            break
        case ACT_SCREEN_STALL:
            Stundenlohn = Number(par[0])
            ShowStallScreen()
            break
        case ERR_ATTACK_AGAIN:
            ErrorMessage(txt[TXT_ERROR_ATTACK_AGAIN])
            break
        case ACT_SCREEN_ARENA:
            ShowArenaScreen(par[0], par[2], par[1])
            break
        case ERR_INBOX_FULL:
            ErrorMessage(txt[TXT_ERROR_INBOX_FULL])
            break
        case ERR_RECIPIENT_NOT_FOUND:
            ErrorMessage(txt[TXT_ERROR_RECIPIENT_NOT_FOUND])
            break
        case ERR_RECIPIENT_SELF:
            ErrorMessage(txt[TXT_ERROR_RECIPIENT_SELF])
            break
        case RESP_MESSAGE_SENT:
            addSuggestNames(lastMessageTarget)
            Remove(POST_WRITE)
            Remove(POST_READ)
            Add(POST_LIST)
            break
        case RESP_READ_MESSAGE:
            RemoveAll()
            Add(SCREEN_POST)
            if (Tageszeit() != 0){
                Remove(POST_NIGHT)
            }
            if (Tageszeit() != 1){
                Remove(POST_DAWN)
            }
            Remove(POST_LIST)
            Add(POST_READ)
            if (((PostSel + PostScroll) - 1) == 1){
                Remove(POST_READ_PREV)
            }
            if (((PostSel + PostScroll) - 1) == Savegame[SG_MSG_COUNT]){
                Remove(POST_READ_NEXT)
            }
            if (int(par[4]) > 0){
                InviteGildenID = int(par[4])
                Add(POST_ACCEPT)
            }
            _local3 = actor[INP_POST_ADDRESS].getChildAt(1)
            with (_local3) {
                type = TextFieldType.DYNAMIC
                text = (
                    (((((txt[TXT_POST_FROM] + " ") + par[0]) + " ")
                     + txt[TXT_POST_TIME]) + " ") + TimeStr(par[2])
                )
            }
            _local3 = actor[INP_POST_SUBJECT].getChildAt(1)
            with (_local3) {
                type = TextFieldType.DYNAMIC
                ReplyAddress = par[0]
                switch (par[1]){
                    case "1  ":
                    case "2  ":
                    case "3  ":
                    case "4  ":
                    case "5  ":
                    case "6  ":
                    case "7  ":
                    case "8  ":
                    case "9  ":
                        par[1] = "Moo!"
                        par[3] = "Holy Cow!"
                        break
                    case "1":
                        par[1] = txt[TXT_SUBJECT_GUILD_DELETED]
                        par[3] = txt[TXT_BODY_GUILD_DELETED]
                            .replace("%1", par[0])
                            .replace("%2", par[3])
                        break
                    case "2":
                        par[1] = txt[TXT_SUBJECT_GUILD_DELETED_BY_ADMIN]
                        par[3] = txt[TXT_BODY_GUILD_DELETED_BY_ADMIN]
                            .replace("%1", par[0])
                            .replace("%2", par[3])
                        break
                    case "3":
                        par[1] = txt[TXT_SUBJECT_GUILD_EXPELLED];
                        par[3] = txt[TXT_BODY_GUILD_EXPELLED]
                            .replace("%1", par[0])
                            .replace("%2", par[3]);
                        break;
                    case "4":
                        par[1] = txt[TXT_SUBJECT_GUILD_EXPELLED_BY_ADMIN];
                        par[3] = txt[TXT_BODY_GUILD_EXPELLED_BY_ADMIN]
                            .replace("%1", par[0])
                            .replace("%2", par[3]);
                        break;
                    case "5":
                        par[1] = txt[TXT_SUBJECT_GUILD_INVITE];
                        par[3] = txt[TXT_BODY_GUILD_INVITE]
                            .replace("%1", par[0])
                            .replace("%2", par[3]);
                        break;
                    case "6":
                    case "7":
                        par[1] = txt[TXT_SUBJECT_PVP].replace("%1", par[0]);
                        tmpBattleInfo = par[3];
                        tmpFighterArray = tmpBattleInfo
                            .split("#")[0]
                            .split("/");
                        ichAnfg = tmpFighterArray[0];
                        erAnfg = tmpFighterArray[6];
                        tmpFightArray = tmpBattleInfo.split("#")[1].split("/");
                        ichEnde = tmpFightArray[(tmpFightArray.length - 7)];
                        erEnde = tmpFightArray[(tmpFightArray.length - 4)];
                        rundenZahl = int((tmpFightArray.length / 6));
                        tmpHonor = Math.abs(tmpBattleInfo.split("#")[7]);
                        tmpGold = Math.abs(
                            int((tmpBattleInfo.split("#")[8] / 100))
                        );
                        tmpSilver = Math.abs(
                            int((tmpBattleInfo.split("#")[8] % 100))
                        );
                        par[3] = txt[TXT_BODY_PVP]
                            .replace("%1", par[0])
                            .replace("%2", par[3])
                            .replace("%3", String(ichAnfg))
                            .replace("%4", String(erAnfg))
                            .replace("%5", String(ichEnde))
                            .replace("%6", String(erEnde))
                            .replace("%7", String(rundenZahl))
                            .replace("%8", txt[(((ichEnde > erEnde))
                                     ? TXT_DU_GEWONNEN : TXT_DU_VERLOREN)])
                            .replace("%9", (((rundenZahl == 1))
                                     ? "" : txt[TXT_ROUNDS_PLURAL]))
                            .split("%10").join(String(tmpHonor))
                            .split("%11").join(String(tmpGold))
                            .split("%12").join(String(tmpSilver))
                            .split("%13").join(txt[(((ichEnde > erEnde))
                                 ? TXT_DU_WAS_GEWONNEN : TXT_DU_WAS_VERLOREN)])
                                .split("#").join(String.fromCharCode(13));
                        Add(POST_VIEWFIGHT);
                        break;
                    case "8":
                        if (txt[TXT_INV_ACC_TITLE] != ""){
                            par[1] = txt[TXT_INV_ACC_TITLE];
                            par[3] = txt[TXT_INV_ACC_TEXT]
                                .split("%1")
                                .join(par[0]);
                        } else {
                            par[1] = "FRIEND_LINK_ACCEPTED";
                            par[3] = (((("You are seeing this message in
                                english because it has not been translated
                                for your location yet. " + par[0]) +
                                " has accepted your invitation to the game.
                                Please wait for ") + par[0]) + " to verify
                                email address in order to get your bonus.");
                        };
                        Add(POST_REPLY);
                        break;
                    case "9":
                        if (txt[TXT_INV_VAL_TITLE] != ""){
                            par[1] = txt[TXT_INV_VAL_TITLE];
                            par[3] = txt[TXT_INV_VAL_TEXT]
                                .split("%1")
                                .join(par[0]);
                        } else {
                            par[1] = "FRIEND_EMAIL_VERIFIED";
                            par[3] = (par[0] + " has verified
                                      his/her email address.");
                        };
                        Add(POST_REPLY);
                        break;
                    default:
                        Add(POST_REPLY);
                };
                ReplySubject = par[1];
                text = par[1].split("%u20AC").join("€");
            };
            postReadText = par[3];
            if (txt[TXT_ALERT_WORDS]){
                alertWords = txt[TXT_ALERT_WORDS].split(" ");
                i = 0;
                while (i < alertWords.length) {
                    if (postReadText.toLowerCase()
                        .indexOf(alertWords[i].toLowerCase()) != -1
                    ){
                        postReadText = txt[TXT_ALERT_TEXT]
                            .split("%1").join(postReadText);
                        break;
                    };
                    i = (i + 1);
                };
            };
            _local3 = actor[INP_POST_TEXT].getChildAt(1);
            with (_local3) {
                type = TextFieldType.DYNAMIC;
                text = SwapWords(postReadText).split("#")
                    .join(String.fromCharCode(13)).split("%u20AC").join("€");
            };
            forwardText = postReadText;
            break;
        case ACT_SCREEN_POST:
            ShowPostScreen(par);
            break;
        case ACT_SCREEN_PILZDEALER:
            if (par[0]){
                DealerAktion = int(par[0]);
            } else {
                DealerAktion = 0;
            };
            PulseDealer = false;
            ShowDealerScreen();
            break;
        case ACT_SCREEN_WELTKARTE:
            ParseSavegame(par[0]);
            ShowMainQuestsScreen(par[1].split("/"));
            break;
        case ACT_SCREEN_EHRENHALLE:
            lastGuildShown = "";
        case RESP_SCREEN_GILDENHALLE:
            GuildHallMode = (act == RESP_SCREEN_GILDENHALLE);
            if (GuildHallMode){
                Hide(LBL_HALL_GOTO_SPIELER_HL, LBL_HALL_GOTO_GILDEN);
                Show(LBL_HALL_GOTO_SPIELER, LBL_HALL_GOTO_GILDEN_HL);
            } else {
                lastHallMembers = new Array();
                lastHallMembers.push("");
                Show(LBL_HALL_GOTO_SPIELER_HL, LBL_HALL_GOTO_GILDEN);
                Hide(LBL_HALL_GOTO_SPIELER, LBL_HALL_GOTO_GILDEN_HL);
            };
            if (par[1]){
                ruhmesHalleSuchString = par[1];
                ruhmesHalleSuchName = true;
            };
            if (!OnStage(SCR_HALLE_BG)){
                ShowHallScreen();
            };
            _local3 = actor[HALL_LIST];
            with (_local3) {
                while (numChildren > 0) {
                    removeChildAt(0);
                };
            };
            if (textDir == "right"){
                HallListAddField(
                    (HALL_LIST_COLUMN_6_X + 40),
                    HALL_LIST_LINES_Y,
                    txt[TXT_HALL_LIST_COLUMN_1],
                    FontFormat_HallListHeading
                );
                HallListAddField(
                    (HALL_LIST_COLUMN_6_X - 10),
                    HALL_LIST_LINES_Y,
                    txt[((GuildHallMode)
                         ? TXT_HALL_LIST_COLUMN_3
                         : TXT_HALL_LIST_COLUMN_2)],
                    FontFormat_HallListHeading);
                HallListAddField(
                    (HALL_LIST_COLUMN_2_X - 10),
                    HALL_LIST_LINES_Y,
                    txt[TXT_HALL_LIST_COLUMN_5],
                    FontFormat_HallListHeading);
                HallListAddField(
                     (HALL_LIST_COLUMN_4_X + 20),
                     HALL_LIST_LINES_Y,
                     txt[((GuildHallMode)
                          ? TXT_GUILDHALL_LEADER
                          : TXT_HALL_LIST_COLUMN_3)],
                    FontFormat_HallListHeading);
                HallListAddField(
                    (HALL_LIST_COLUMN_3_X + 25),
                    HALL_LIST_LINES_Y,
                    txt[((GuildHallMode)
                         ? TXT_GUILDHALL_MEMBERS
                         : TXT_HALL_LIST_COLUMN_4)],
                    FontFormat_HallListHeading);
            } else {
                HallListAddField(
                    HALL_LIST_COLUMN_1_X, HALL_LIST_LINES_Y, txt[TXT_HALL_LIST_COLUMN_1], FontFormat_HallListHeading);
                HallListAddField(HALL_LIST_COLUMN_2_X, HALL_LIST_LINES_Y, txt[((GuildHallMode) ? TXT_HALL_LIST_COLUMN_3 : TXT_HALL_LIST_COLUMN_2)], FontFormat_HallListHeading);
                HallListAddField(HALL_LIST_COLUMN_6_X, HALL_LIST_LINES_Y, txt[TXT_HALL_LIST_COLUMN_5], FontFormat_HallListHeading);
                HallListAddField(HALL_LIST_COLUMN_4_X, HALL_LIST_LINES_Y, txt[((GuildHallMode) ? TXT_GUILDHALL_LEADER : TXT_HALL_LIST_COLUMN_3)], FontFormat_HallListHeading);
                HallListAddField(HALL_LIST_COLUMN_5_X, HALL_LIST_LINES_Y, txt[((GuildHallMode) ? TXT_GUILDHALL_MEMBERS : TXT_HALL_LIST_COLUMN_4)], FontFormat_HallListHeading);
            };
            HallListName = new Array();
            HallListGilde = new Array();
            tmpArray = par[0].split("/");
            line = 1;
            i = 0;
            while (i < (tmpArray.length - 1)) {
                if ((((((((!(GuildHallMode)) and (!(ruhmesHalleSuchName)))) and ((tmpArray[i] < 0)))) ? "-" : "") + ruhmesHalleSuchString.toLowerCase()) == tmpArray[(i + ((ruhmesHalleSuchName) ? ((GuildHallMode) ? 2 : 1) : 0))].toLowerCase()){
                    tmpFmt = FontFormat_HallListHighLight;
                } else {
                    if (((GuildHallMode) and ((int(tmpArray[(i + 3)]) < 0)))){
                        tmpFmt = FontFormat_GuildHallNoAttack;
                    } else {
                        if (((!(GuildHallMode)) and (!((lastAttacked.indexOf(tmpArray[(i + 1)].toLowerCase()) == -1))))){
                            tmpFmt = FontFormat_GuildHallNoAttack;
                        } else {
                            tmpFmt = FontFormat_HallListText;
                        };
                    };
                };
                lastHallMembers.push(tmpArray[(i + 1)]);
                arrowHallMode = true;
                if (textDir == "right"){
                    HallListAddField((HALL_LIST_COLUMN_6_X + 40), (HALL_LIST_LINES_Y + (line * HALL_LIST_LINE_Y)), Math.abs(tmpArray[i]), tmpFmt, 0, GuildHallMode);
                    HallListAddField((HALL_LIST_COLUMN_6_X - 10), ((HALL_LIST_LINES_Y + (line * HALL_LIST_LINE_Y)) + 5), ((GuildHallMode) ? "" : (((tmpArray[i] < 0)) ? "[J]" : (((tmpArray[(i + 3)] < 0)) ? "[M]" : "[K]"))), tmpFmt);
                    i = (i + 1);
                    HallListName[line] = tmpArray[i];
                    i = (i + 1);
                    HallListAddField(((GuildHallMode) ? (HALL_LIST_COLUMN_4_X + 20) : (HALL_LIST_COLUMN_6_X - 30)), (HALL_LIST_LINES_Y + (line * HALL_LIST_LINE_Y)), tmpArray[i], tmpFmt, ((GuildHallMode) ? ((HALL_LIST_COLUMN_5_X - HALL_LIST_COLUMN_4_X) - 10) : ((HALL_LIST_COLUMN_4_X - HALL_LIST_COLUMN_3_X) - 10)));
                    HallListGilde[line] = tmpArray[i];
                    i = (i + 1);
                    HallListAddField(((GuildHallMode) ? (HALL_LIST_COLUMN_6_X - 10) : (HALL_LIST_COLUMN_4_X + 20)), (HALL_LIST_LINES_Y + (line * HALL_LIST_LINE_Y)), (((tmpArray[i] == "")) ? txt[TXT_NOGUILD] : tmpArray[(i - 1)]), tmpFmt, ((GuildHallMode) ? ((HALL_LIST_COLUMN_4_X - HALL_LIST_COLUMN_2_X) - 10) : ((HALL_LIST_COLUMN_5_X - HALL_LIST_COLUMN_4_X) - 10)), true);
                    i = (i + 1);
                    HallListAddField((HALL_LIST_COLUMN_3_X + 25), (HALL_LIST_LINES_Y + (line * HALL_LIST_LINE_Y)), Math.abs(tmpArray[i]), tmpFmt, 0, GuildHallMode);
                    HallListAddField((HALL_LIST_COLUMN_2_X - 10), (HALL_LIST_LINES_Y + (line * HALL_LIST_LINE_Y)), (((tmpArray[i] == 1)) ? 0 : tmpArray[i]), tmpFmt, 0, GuildHallMode);
                } else {
                    HallListAddField(HALL_LIST_COLUMN_1_X, (HALL_LIST_LINES_Y + (line * HALL_LIST_LINE_Y)), Math.abs(tmpArray[i]), tmpFmt, 0, GuildHallMode);
                    HallListAddField(HALL_LIST_COLUMN_2_X, ((HALL_LIST_LINES_Y + (line * HALL_LIST_LINE_Y)) + 5), ((GuildHallMode) ? "" : (((tmpArray[i] < 0)) ? "[J]" : (((tmpArray[(i + 3)] < 0)) ? "[M]" : "[K]"))), tmpFmt);
                    i = (i + 1);
                    HallListName[line] = tmpArray[i];
                    i = (i + 1);
                    HallListAddField(((GuildHallMode) ? HALL_LIST_COLUMN_4_X : HALL_LIST_COLUMN_3_X), (HALL_LIST_LINES_Y + (line * HALL_LIST_LINE_Y)), tmpArray[i], tmpFmt, ((GuildHallMode) ? ((HALL_LIST_COLUMN_5_X - HALL_LIST_COLUMN_4_X) - 10) : ((HALL_LIST_COLUMN_4_X - HALL_LIST_COLUMN_3_X) - 10)));
                    HallListGilde[line] = tmpArray[i];
                    i = (i + 1);
                    HallListAddField(((GuildHallMode) ? HALL_LIST_COLUMN_2_X : HALL_LIST_COLUMN_4_X), (HALL_LIST_LINES_Y + (line * HALL_LIST_LINE_Y)), (((tmpArray[i] == "")) ? txt[TXT_NOGUILD] : tmpArray[(i - 1)]), tmpFmt, ((GuildHallMode) ? ((HALL_LIST_COLUMN_4_X - HALL_LIST_COLUMN_2_X) - 10) : ((HALL_LIST_COLUMN_5_X - HALL_LIST_COLUMN_4_X) - 10)), true);
                    i = (i + 1);
                    HallListAddField(HALL_LIST_COLUMN_5_X, (HALL_LIST_LINES_Y + (line * HALL_LIST_LINE_Y)), Math.abs(tmpArray[i]), tmpFmt, 0, GuildHallMode);
                    HallListAddField(HALL_LIST_COLUMN_6_X, (HALL_LIST_LINES_Y + (line * HALL_LIST_LINE_Y)), (((tmpArray[i] == 1)) ? 0 : tmpArray[i]), tmpFmt, 0, GuildHallMode);
                };
                line = (line + 1);
                i = (i + 1);
            };
            break;
        case RESP_ARBEIT_START:
        case RESP_ARBEIT_STOP:
            ParseSavegame(par[0]);
            ShowWorkScreen();
            break;
        case RESP_ARBEIT_ERLEDIGT:
            ParseSavegame(par[0]);
            VerdientesGeld = par[1];
            ShowWorkSuccessScreen();
            break;
        case ACT_SCREEN_ARBEITEN:
            Stundenlohn = Number(par[0]);
            ShowWorkScreen();
            break;
        case RESP_SAVEGAME_STAY_ERROR:
            ErrorMessage(txt[TXT_ERROR_SELL_ITEM]);
        case RESP_SAVEGAME_STAY:
        case RESP_SAVEGAME_SHARD:
        case RESP_SAVEGAME_MIRROR:
        case RESP_MOVE_TOWER_ITEM:
            ParseSavegame(par[0]);
            if (OnStage(SCR_CHAR_BG)){
                if (act == RESP_MOVE_TOWER_ITEM){
                    ShowTowerScreen(par);
                } else {
                    if (act == RESP_SAVEGAME_SHARD){
                        Play(SND_SHARD);
                        mirrorFadeAmount = 0.2;
                        mirrorAniTimer.start();
                    };
                    if (act == RESP_SAVEGAME_MIRROR){
                        Play(SND_MIRROR);
                    };
                    DisplayInventory(undefined, OnStage(SCR_CHAR_BG_RIGHT));
                    i = 0;
                    while (i < 13) {
                        if (MirrorPieces[i]){
                            Add((MIRROR_PIECE + i));
                        } else {
                            Remove((MIRROR_PIECE + i));
                        };
                        i = (i + 1);
                    };
                };
            };
            break;
        case ACT_SCREEN_CHAR:
            ParseSavegame(par[0]);
            PlayerDesc = resolveBreaks(par[1]);
            if (Savegame[SG_FACE_1] == 0){
                ShowBuildCharacterScreen();
            } else {
                ShowCharacterScreen(undefined, true);
            };
            break;
        case ACT_SCREEN_ZAUBERLADEN:
            ParseSavegame(par[0]);
            if (par[1]){
                specialAction = par[1];
            } else {
                specialAction = 0;
            };
            trc("Magic shop says special action is", specialAction);
            if (OnStage(SCR_FIDGET_BG)){
                DisplayInventory();
            } else {
                Load(SCR_FIDGET_BG);
                ShowCharacterScreen();
                WhenLoaded(DoActZauberladen);
            };
            break;
        case ACT_SCREEN_SCHMIEDE:
            ParseSavegame(par[0]);
            if (par[1]){
                specialAction = par[1];
            } else {
                specialAction = 0;
            };
            trc("Weapon shop says special action is", specialAction);
            if (OnStage(SCR_SHAKES_BG)){
                DisplayInventory();
            } else {
                Load(SCR_SHAKES_BG);
                ShowCharacterScreen();
                WhenLoaded(DoActSchmiede);
            };
            break;
        case RESP_UPDATE_CHECK:
            ExternalInterface.call("refresh");
            break;
        case RESP_LOGIN_SUCCESS_BOUGHT:
        case RESP_LOGIN_SUCCESS:
            mirrorFadeAmount = 0.2;
            admin_login = "";
            if (act == RESP_LOGIN_SUCCESS_BOUGHT){
                MushBought = int(par[3]);
            } else {
                MushBought = 0;
            };
            beerFest = false;
            if (par[5]){
                beerFest = !((int(par[5]) == 0));
            };
            if (par[4]){
                param_server_version_act = par[4];
            };
            sessionId = "";
            if (par[2]){
                sessionId = par[2];
            };
            LevelUp = false;
            LastLevel = 0;
            oldAch = new Array();
            oldAlbum = -1;
            AlbumEffect = false;
            PreviousLogin = true;
            GildenID = 0;
            ParseSavegame(par[0], false);
            if (par[1]){
                DealerAktion = int(par[1]);
            } else {
                DealerAktion = 0;
            };
            if (DealerAktion > 0){
                PulseDealer = true;
            } else {
                PulseDealer = false;
            };
            so.data.skipAutoLogin = false;
            if (!so.data.HasAccount){
                so.data.PaymentMethod = 4;
            };
            so.data.HasAccount = true;
            so.data.userName = actor[INP_NAME].getChildAt(1).text;
            so.data.password = actor[INP_LOGIN_PASSWORD].getChildAt(1).text;
            so.flush();
            Add(IF_LOGOUT);
            if (Savegame[SG_FACE_1] == 0){
                trc("Fehler: Charakter nicht initialisiert.");
                RequestLogout();
            } else {
                ParseSavegame(par[0]);
                if (view_player != ""){
                    selName = view_player;
                    SendAction(ACT_REQUEST_CHAR, view_player);
                } else {
                    if (param_hall != ""){
                        SendAction(ACT_SCREEN_EHRENHALLE, param_hall, "-2");
                        param_valid = "";
                    } else {
                        if ((((int(Savegame[SG_EMAIL_VALID]) < 1)) and ((int(Savegame[SG_SERVER_TIME]) > (int(Savegame[SG_EMAIL_DATE]) + (((2 * 60) * 24) * 60)))))){
                            if (param_valid != ""){
                                SendAction(ACT_VALIDATE, param_valid);
                                param_valid = "";
                            } else {
                                ShowEmailNagScreen();
                            };
                        } else {
                            if (int(Savegame[SG_EMAIL_VALID]) == 1){
                                if (param_valid != ""){
                                    ShowEmailNagScreen(3);
                                } else {
                                    ShowCityScreen();
                                };
                            } else {
                                if (param_valid != ""){
                                    SendAction(ACT_VALIDATE, param_valid);
                                    param_valid = "";
                                } else {
                                    ShowCityScreen();
                                };
                            };
                        };
                    };
                };
            };
            break;
        case ERR_ALREADY_IN_GUILD:
        case ERR_NO_INDEX_FREE:
        case ERR_FIGHT_SELF:
        case ERR_GUILD_NOT_FOUND:
        case ERR_GUILD_NOT_ALLOWED:
        case ERR_GUILD_LACK_MUSH:
        case ERR_GUILD_LACK_GOLD:
        case ERR_GUILD_BUILDING_NOT_FOUND:
        case ERR_GUILD_BUILDING_MAX:
        case ERR_GUILD_NOT_MEMBER:
        case ERR_GUILD_MASTER_CANT_BE_OFFICER:
        case ERR_GUILD_IS_FULL:
        case ERR_GUILD_ALREADY_YOU_OTHER:
        case ERR_GUILD_NOT_REAL_MEMBER:
        case ERR_GUILD_ALREADY_YOU_THIS:
        case ERR_GUILD_PLAYER_NOT_FOUND:
        case ERR_SUBJECT_TOO_SHORT:
        case ERR_GUILD_TOO_EXPENSIVE:
        case ERR_GUILD_CHAT_NOT_MEMBER:
        case ERR_GUILD_CHAT_HISTORY:
        case ERR_GUILD_CHAT_TEXT_ERROR:
        case ERR_BEER:
        case ERR_NO_MUSH_BAR:
        case ERR_NO_ENDURANCE:
        case ERR_WORSE_MOUNT:
        case ERR_GUILD_ALREADY_MEMBER:
        case ERR_NOT_INVITED:
        case ERR_NO_MUSH_PVP:
        case ERR_NO_MUSH_MQ:
            ErrorMessage(txt[((TXT_ERROR_ALREADY_IN_GUILD - Math.abs(ERR_ALREADY_IN_GUILD)) + Math.abs(act))]);
            break;
        case ERR_BOOST:
            break;
        case RESP_ACCOUNT_SUCCESS:
            actor[INP_LOGIN_PASSWORD].getChildAt(1).text = actor[INP_PASSWORD].getChildAt(1).text;
            so.data.skipAutoLogin = false;
            so.data.HasAccount = true;
            so.data.hadAccount = true;
            so.data.userName = actor[INP_NAME].getChildAt(1).text;
            so.data.password = actor[INP_LOGIN_PASSWORD].getChildAt(1).text;
            so.data.advpar = paramObj;
            so.flush();
            logInAfterPixel = true;
            break;
        case ERR_NAME_EXISTS:
            ErrorMessage(txt[TXT_ERROR_NAME_EXISTS]);
            break;
        case ERR_NAME_TOO_SHORT:
            ErrorMessage(txt[TXT_ERROR_NAME_TOO_SHORT]);
            break;
        case ERR_PASSWORD_TOO_SHORT:
            ErrorMessage(txt[TXT_ERROR_PASSWORD_TOO_SHORT]);
            break;
        case ERR_EMAIL_REJECTED:
            ErrorMessage(txt[TXT_ERROR_EMAIL_REJECTED]);
            break;
        case ERR_NAME_REJECTED:
            ErrorMessage(txt[TXT_ERROR_NAME_REJECTED]);
            break;
        case ERR_LOGIN_FAILED:
            so.data.skipAutoLogin = true;
            so.data.password = "";
            so.flush();
            actor[INP_EMAIL].getChildAt(1).text = "";
            actor[INP_PASSWORD].getChildAt(1).text = "";
            CharVolk = 0;
            ShowLoginScreen(undefined, true, true);
            ErrorMessage(txt[TXT_ERROR_LOGIN_FAILED]);
            break;
        case ERR_TOO_EXPENSIVE:
            if (OnStage(MODIFY_CHARACTER)){
                CharVolk = revertCharVolk;
                CharMann = revertCharMann;
                CharColor = revertCharColor;
                CharMouth = revertCharMouth;
                CharBeard = revertCharBeard;
                CharNose = revertCharNose;
                CharEyes = revertCharEyes;
                CharBrows = revertCharBrows;
                CharEars = revertCharEars;
                CharHair = revertCharHair;
                CharSpecial = revertCharSpecial;
                CharSpecial2 = revertCharSpecial2;
                ShowOptionScreen();
            };
            ErrorMessage(txt[TXT_ERROR_TOO_EXPENSIVE]);
            break;
        case ERR_WRONG_PASSWORD:
            ErrorMessage(txt[TXT_ERROR_WRONG_PASSWORD]);
            break;
        case ERR_FACE_DATA_INCORRECT:
            ErrorMessage(txt[TXT_ERROR_FACE_DATA_INCORRECT]);
            break;
        case ERR_EMAIL_WRONG:
            ErrorMessage(txt[TXT_ERROR_EMAIL_WRONG]);
            break;
        case RESP_PLAYER_NOT_FOUND:
            ErrorMessage(txt[TXT_ERROR_PLAYER_NOT_FOUND]);
            break;
            if (act < 0){
                ErrorMessage((((txt[TXT_ERROR_UNKNOWN] + " (#") + String(act)) + ")"));
            } else {
                trc((("Warning: Action unknown: " + act) + ". Ignored!"));
            };
    };
    if (defined_pixel_calls[act]){
        ExternalInterface.call(defined_pixel_calls[act], String(act), param_cid, ((act)==RESP_ACCOUNT_SUCCESS) ? par[0] : Savegame[SG_PLAYER_ID], paramObj, so.data.advpar);
    };
    pas = new Array();
    pxlStr = "";
    inVar = false;
    for each (pixel in trackPixels) {
        if ((((int(pixel[0]) == act)) or ((((nextPxl > 0)) and ((nextPxl == int(pixel[0]))))))){
            pas = new Array();
            for each (pa in pixel[1].split(",")) {
                if (pa.indexOf("-") != -1){
                    i = int(pa.split("-")[0]);
                    while (i <= int(pa.split("-")[1])) {
                        pas.push(int(i));
                        i = (i + 1);
                    };
                } else {
                    pas.push(int(pa));
                };
            };
            if ((((pixel[1] == "")) or (!((pas.indexOf(int(param_adv)) == -1))))){
                pxlStr = pixel[2].split("%playerid%").join(Savegame[SG_PLAYER_ID]);
                pxlStr = pxlStr.split("%cid%").join(param_cid);
                pxlStr = pxlStr.split("%mushbought%").join(String((MushBought / 100)));
                if (so.data.advpar){
                    pxlArr = pxlStr.split("<").join(">").split(">");
                    pxlStr = "";
                    inVar = false;
                    i = 0;
                    while (i < pxlArr.length) {
                        if (inVar){
                            if (so.data.advpar[pxlArr[i]]){
                                pxlStr = (pxlStr + String(so.data.advpar[pxlArr[i]]));
                            } else {
                                trc("Warning: Constructing tracking pixel url: Variable", pxlArr[i], "was not within the stored parameters.");
                            };
                        } else {
                            pxlStr = (pxlStr + pxlArr[i]);
                        };
                        inVar = !(inVar);
                        i = (i + 1);
                    };
                };
                if (int(Savegame[SG_PLAYER_ID]) == 0){
                    nextPxl = -(act);
                } else {
                    LoadTrackingPixel(pxlStr);
                };
            };
        };
    };
    if (nextPxl > 0){
        nextPxl = 0;
    };
    if (logInAfterPixel){
        RequestLogin(event);
    };
}
'''

'''

public function RequestLogin(evt:Event=undefined):void{
    var tmpPw:String;
    if ((evt is KeyboardEvent)){
        if (((((!((KeyboardEvent(evt).keyCode == 13))) and (!((KeyboardEvent(evt).keyCode == 10))))) and (!((KeyboardEvent(evt).keyCode == 16777230))))){
            return;
        };
    };
    tmpPw = actor[INP_LOGIN_PASSWORD].getChildAt(1).text;
    if (C_MD5){
        if (tmpPw.length < 32){
            tmpPw = MD5(tmpPw);
        };
    };
    SendAction(ACT_LOGIN, actor[INP_NAME].getChildAt(1).text, tmpPw, "v1.70");
}


public function RequestLogout(evt:Event=undefined, keepData:Boolean=false):void{
    RemoveAll();
    nextPxl = 0;
    actor[LBL_ERROR].text = "";
    if (!keepData){
        so.data.userName = "";
        so.data.password = "";
        actor[INP_NAME].getChildAt(1).text = "";
        actor[INP_LOGIN_PASSWORD].getChildAt(1).text = "";
        so.flush();
        actor[INP_EMAIL].getChildAt(1).text = "";
        actor[INP_PASSWORD].getChildAt(1).text = "";
    };
    SendAction(ACT_LOGOUT);
    Savegame = new Array();
    CharVolk = 0;
    Gilde = "";
    myOwnRank = -1;
    myOwnAttackTarget = -1;
    myOwnGuildMoney = -1;
    guildAttackTime = 0;
    guildDefenceTime = 0;
    guildAttacked = "";
    guildAttacking = "";
    PulseTaverne = false;
    PulseArbeiten = false;
    PulseGilde = false;
    PulseGildeOnHistory = false;
    PulsePost = false;
    PulseDealer = false;
    guildBlinkReady = false;
    sessionId = "";
    fightFlushMode = false;
    if (!keepData){
        ShowLoginScreen();
    };
}


public function RequestCancelArbeiten(evt:Event=undefined):void{
    SendAction(ACT_ARBEIT_CANCEL);
}


public function RequestArbeiten(evt:Event=undefined):void{
    SendAction(ACT_ARBEIT, GetSliderValue(SLDR_ARBEITEN));
}


public function RequestCreateCharacter(evt:Event=undefined):void{
}


public function RequestChangeFace(evt:Event=undefined):void{
    if ((((((((((((((((((((((((CharVolk == revertCharVolk)) and ((CharMann == revertCharMann)))) and ((CharColor == revertCharColor)))) and ((CharMouth == revertCharMouth)))) and ((CharBeard == revertCharBeard)))) and ((CharNose == revertCharNose)))) and ((CharEyes == revertCharEyes)))) and ((CharBrows == revertCharBrows)))) and ((CharEars == revertCharEars)))) and ((CharHair == revertCharHair)))) and ((CharSpecial == revertCharSpecial)))) and ((CharSpecial2 == revertCharSpecial2)))){
        SendAction(ACT_SCREEN_OPTIONEN);
    } else {
        SendAction(ACT_CHANGE_FACE, actor[INP_NAME].getChildAt(1).text, actor[INP_LOGIN_PASSWORD].getChildAt(1).text, CharVolk, ((CharMann) ? 1 : 2), (((((((((((((((((CharMouth + "/") + CharHair) + "/") + CharBrows) + "/") + CharEyes) + "/") + CharBeard) + "/") + CharNose) + "/") + CharEars) + "/") + CharSpecial) + "/") + CharSpecial2) + "/"));
    };
}


public function RequestCharScreen(evt:Event=undefined):void{
    arrowHallMode = false;
    SendAction(ACT_SCREEN_CHAR);
}


public function RequestCityScreen(evt:Event=undefined):void{
}


'''


#------------------------------------------------------------------------------
# (File) Loaders


'''
var LanguageFileError:* = function (evt:Event){
    trc((("Chosen language " + lang_code) + " not available!"));
    if (lang_code == original_lang_code){
        lang_code = original_lang_code;
    };
    if (lang_code == "ar"){
        textDir = "right";
    };
    loader.load(new URLRequest((((lang_url + "lang/sfgame_") + lang_code) + ".txt")));
};


var LanguageFileLoaded:* = function (evt:Event):void{
    var strData:String;
    var i:int;
    var c:int;
    var inValue:Boolean;
    var tmpStr:String;
    var lastIndex:int;
    strData = loader.data;
    inValue = false;
    tmpStr = "";
    lastIndex = 0;
    i = 0;
    while (i < (strData.length - 1)) {
        c = strData.charCodeAt(i);
        switch (c){
            case 10:
            case 13:
                inValue = false;
                if (tmpStr.length > 0){
                    txt[lastIndex] = SwapWords(tmpStr);
                    tmpStr = "";
                } else {
                    if (!txt[lastIndex]){
                        txt[lastIndex] = "";
                    };
                };
                break;
            case 20:
            case 9:
                if (!inValue){
                    lastIndex = int(tmpStr);
                    tmpStr = "";
                    inValue = true;
                } else {
                    tmpStr = (tmpStr + strData.charAt(i));
                };
                break;
            case 136:
                tmpStr = (tmpStr + (String.fromCharCode(13) + String.fromCharCode(10)));
            default:
                tmpStr = (tmpStr + strData.charAt(i));
        };
        i++;
    };
    pendingLanguageFile = false;
    if (lang_code == original_lang_code){
        if (txt[TXT_FONT_NAME] != ""){
            SetFont(txt[TXT_FONT_NAME]);
        } else {
            SetFont("Komika Text");
        };
    } else {
        chosenLangFont = ((txt[TXT_FONT_NAME]) ? txt[TXT_FONT_NAME] : "Komika Text");
        LoadOriginalLanguageFile();
    };
    i = TXT_COUNTRY_NAMES;
    while (i < (TXT_COUNTRY_NAMES + 100)) {
        if (txt[i]){
            countryName[txt[i].split("=")[0]] = txt[i].split("=")[1];
        } else {
            break;
        };
        i++;
    };
    LoaderComplete(evt);
};
'''


'''
public function LoadLanguageFile():void{
    var loader:* = null;
    loader = new URLLoader();
    var _local2 = loader;
    with (_local2) {
        dataFormat = URLLoaderDataFormat.TEXT;
        addEventListener(Event.COMPLETE, LanguageFileLoaded);
        addEventListener(IOErrorEvent.IO_ERROR, LanguageFileError);
        addEventListener(SecurityErrorEvent.SECURITY_ERROR, LanguageFileError);
        if (lang_code == "ar"){
            textDir = "right";
        };
        load(new URLRequest(((((lang_url + "lang/sfgame_") + lang_code) + ".txt?rnd=") + String(Math.random()))));
    };
    pendingLoaders = (pendingLoaders + 1);
    pendingLanguageFile = true;
}

public function LoadOriginalLanguageFile():void{
    var loader:* = null;
    var OriginalLanguageFileLoaded:* = function (evt:Event):void{
        var strData:String;
        var i:int;
        var c:int;
        var inValue:Boolean;
        var tmpStr:String;
        var lastIndex:int;
        var oldStr:String;
        var w:int;
        var originalFont:String;
        strData = loader.data;
        inValue = false;
        tmpStr = "";
        lastIndex = 0;
        originalFont = "Komika Text";
        i = 0;
        while (i < (strData.length - 1)) {
            c = strData.charCodeAt(i);
            switch (c){
                case 10:
                case 13:
                    inValue = false;
                    if (tmpStr.length > 0){
                        oldStr = tmpStr;
                        if (lastIndex == TXT_FONT_NAME){
                            originalFont = tmpStr;
                        };
                        tmpStr = "";
                    };
                    break;
                case 20:
                case 9:
                    if (!inValue){
                        lastIndex = int(tmpStr);
                        tmpStr = "";
                        inValue = true;
                    } else {
                        tmpStr = (tmpStr + strData.charAt(i));
                    };
                    break;
                case 136:
                    tmpStr = (tmpStr + (String.fromCharCode(13) + String.fromCharCode(10)));
                default:
                    tmpStr = (tmpStr + strData.charAt(i));
            };
            i++;
        };
        pendingLanguageFile = false;
        SetFont(SuperiorFont(chosenLangFont, originalFont));
        LoaderComplete(evt);
    };
    loader = new URLLoader();
    var _local2 = loader;
    with (_local2) {
        dataFormat = URLLoaderDataFormat.TEXT;
        addEventListener(Event.COMPLETE, OriginalLanguageFileLoaded);
        load(new URLRequest((((lang_url + "lang/sfgame_") + original_lang_code) + ".txt")));
    };
    pendingLoaders = (pendingLoaders + 1);
    pendingLanguageFile = true;
}

public function LoadConfigurationFile():void{
    var loader:* = null;
    var loader2:* = null;
    var pendingConfigurationFiles:* = undefined;
    var ConfigurationFileLoaded:* = function (evt:Event):void{
        var strData:String;
        var i:int;
        var j:int;
        var c:int;
        var inValue:Boolean;
        var tmpStr:String;
        var lastIndex:int;
        var tmpWorlds:Array;
        var tmpWorld:Array;
        var forceReroll:Boolean;
        strData = evt.target.data;
        inValue = false;
        tmpStr = "";
        lastIndex = 0;
        i = 0;
        while (i < (strData.length - 1)) {
            c = strData.charCodeAt(i);
            switch (c){
                case 10:
                case 13:
                    inValue = false;
                    if (tmpStr.length > 0){
                        switch (lastIndex){
                            case LANG_CODE:
                                lang_code = tmpStr;
                                original_lang_code = lang_code;
                                break;
                            case URL:
                                img_url[img_url.length] = tmpStr;
                                break;
                            case SND_URL:
                                snd_url[snd_url.length] = tmpStr;
                                break;
                            case LIGHT_MODE:
                                light_mode_default = !((int(tmpStr) == 0));
                                break;
                            case SERVER:
                                server = tmpStr;
                                break;
                            case LANG_URL:
                                lang_url = tmpStr;
                                break;
                            case NO_CROSSDOMAIN:
                                no_crossdomain = !((int(tmpStr) == 0));
                                break;
                            case FORUM_URL:
                                forum_url = tmpStr;
                                break;
                            case SHOP_URL:
                                shop_url = tmpStr;
                                break;
                            case IMPRINT_URL:
                                imprint_url = tmpStr;
                                break;
                            case LEGAL_URL:
                                legal_url = tmpStr;
                                break;
                            case DATAPROT_URL:
                                dataprot_url = tmpStr;
                                break;
                            case INSTR_URL:
                                instr_url = tmpStr;
                                break;
                            case BUFFEDMODE:
                                buffedMode = !((tmpStr == ""));
                                buffedLinkText = tmpStr;
                                break;
                            case PAYMETHODS:
                                PayMethods = tmpStr.split("/");
                                j = 0;
                                while (j < PayMethods.length) {
                                    PayMethods[j] = int(PayMethods[j]);
                                    j++;
                                };
                                break;
                            case SERVER_ID:
                                ServerID = int(tmpStr);
                                break;
                            case MP_PROJECT:
                                MPProject = tmpStr;
                                break;
                            case BUFFED_URL:
                                buffedLinkURL = tmpStr;
                                break;
                            case RESPONSE_TIMEOUT:
                                response_timeout = int(tmpStr);
                                break;
                            case IMAGE_TIMEOUT:
                                image_timeout = int(tmpStr);
                                break;
                            case SPONSOR_IMG:
                                param_sponsor = tmpStr;
                                break;
                            case REROLL_IMG:
                                param_reroll_img = int(tmpStr);
                                break;
                            case RECONNECT:
                                param_reconnect = int(tmpStr);
                                break;
                            case PHP_TUNNEL_URL:
                                param_php_tunnel_url = tmpStr;
                                break;
                            case TRACKING_PIXEL:
                                trackPixels.push(tmpStr.split(";"));
                                trc(("Tracking pixel definition old " + tmpStr));
                                break;
                            case POLL_TUNNEL_URL:
                                param_poll_tunnel_url = tmpStr;
                                break;
                            case SUPPORT_EMAIL:
                                param_support_email = tmpStr;
                                break;
                            case GAMESTAFF_EMAIL:
                                param_gamestaff_email = tmpStr;
                                break;
                            case PAPAYA_PATH:
                                param_papaya_path = tmpStr;
                                break;
                            case PAPAYA_FILE:
                                param_papaya_cfg_file = tmpStr;
                                break;
                            case RESEND_COUNT:
                                param_fail_tries = int(tmpStr);
                                break;
                            case IDLE_POLLING:
                                param_idle_polling = int(tmpStr);
                                break;
                            case ALLOW_SKIP_QUEST:
                                param_allow_skip_quest = (int(tmpStr) == 1);
                                param_happy_hour = (int(tmpStr) == 2);
                                break;
                            case CENSORED:
                                param_censored = !((int(tmpStr) == 0));
                                break;
                            case INTERNAL_PIXEL:
                                param_internal_pixel = !((int(tmpStr) == 0));
                                break;
                            case RELOAD_PIXEL:
                                param_reload_pixel = !((int(tmpStr) == 0));
                                break;
                            case SERVER_VERSION:
                                param_server_version_cfg = tmpStr;
                                break;
                            case DONT_SAVE_CID:
                                param_no_cid_save = !((int(tmpStr) == 0));
                                break;
                            case FLAGS:
                                param_languages = tmpStr.split("/");
                                break;
                            case FLAG_NAMES:
                                param_language_names = tmpStr.split("/");
                                break;
                            case LOWRES_URL:
                                break;
                            case SPONSOR_URL:
                                param_sponsor_url = tmpStr;
                                break;
                            case BULLSHIT_BOX:
                                param_bullshit_text = tmpStr;
                                break;
                            case BULLSHIT_CID:
                                param_bullshit_cid = tmpStr;
                                break;
                            case SOCIAL_BUTTONS:
                                param_social_buttons = tmpStr.split("/");
                                break;
                            case PIXEL_CALL:
                                defined_pixel_calls[tmpStr.split(":")[0]] = tmpStr.split(":")[1];
                                break;
                            case BACKGROUND_ID:
                                login_background_id = tmpStr;
                                break;
                            case WORLDS:
                                worlds = new Array();
                                tmpWorlds = tmpStr.split(";");
                                j = 0;
                                while (j < tmpWorlds.length) {
                                    tmpWorld = new Array();
                                    tmpWorld[0] = tmpWorlds[j].split(":")[0];
                                    tmpWorld[1] = tmpWorlds[j].split(":")[1].split("/");
                                    worlds.push(tmpWorld);
                                    j++;
                                };
                                break;
                            case TV_FUNCTION:
                                tvFunctionName = tmpStr;
                                break;
                            case TV_POLL_INTERVAL_NORMAL:
                                tvPollNormal = (int(tmpStr) * 1000);
                                break;
                            case TV_POLL_INTERVAL_LONG:
                                tvPollLong = (int(tmpStr) * 1000);
                                break;
                        };
                    };
                    tmpStr = "";
                    break;
                case 20:
                case 9:
                    if (!inValue){
                        lastIndex = int(tmpStr);
                        tmpStr = "";
                        inValue = true;
                    } else {
                        tmpStr = (tmpStr + strData.charAt(i));
                    };
                    break;
                case 136:
                    tmpStr = (tmpStr + (String.fromCharCode(13) + String.fromCharCode(10)));
                default:
                    tmpStr = (tmpStr + strData.charAt(i));
            };
            i++;
        };
        pendingConfigurationFiles--;
        if (pendingConfigurationFiles == 1){
            loader2.load(new URLRequest("config_txt"));
        } else {
            pendingConfigurationFile = false;
            so = SharedObject.getLocal(("SFGame/" + server.split(".").join("/")), "/");
            if (so.data.lang_code){
                lang_code = so.data.lang_code;
            };
            lightMode = light_mode_default;
            chatSound = false;
            compareItems = false;
            disableTV = false;
            if (so.data.lightMode === false){
                lightMode = false;
            };
            if (so.data.lightMode === true){
                lightMode = true;
            };
            if (so.data.chatSound === false){
                chatSound = false;
            };
            if (so.data.chatSound === true){
                chatSound = true;
            };
            if (so.data.compareItems === false){
                compareItems = false;
            };
            if (so.data.compareItems === true){
                compareItems = true;
            };
            if (so.data.disableTV === false){
                disableTV = false;
            };
            if (so.data.disableTV === true){
                disableTV = true;
            };
            if (paramObj["lang"] != undefined){
                lang_code = paramObj["lang"];
            };
            if (paramObj["id"] != undefined){
                param_id = String(paramObj["id"]);
            };
            if (paramObj["rec"] != undefined){
                param_rec = String(paramObj["rec"]);
                if (so.data.hadAccount){
                    param_rec = "";
                };
            };
            if (paramObj["viewplayer"] != undefined){
                view_player = String(paramObj["viewplayer"]);
            };
            if (paramObj["adminlogin"] != undefined){
                admin_login = String(paramObj["adminlogin"]);
            };
            if (paramObj["mp_api_user_id"] != undefined){
                mp_api_user_id = String(paramObj["mp_api_user_id"]);
            };
            if (paramObj["mp_api_user_token"] != undefined){
                mp_api_user_token = String(paramObj["mp_api_user_token"]);
            };
            if (((!((paramObj["mp_api_user_id"] == undefined))) and (!((paramObj["mp_api_user_token"] == undefined))))){
                ssoMode = true;
            };
            if (paramObj["cid"] != undefined){
                param_cid = String(paramObj["cid"]);
                param_cid_original = true;
                so.data.cid = param_cid;
                so.flush();
            } else {
                if (paramObj["CID"] != undefined){
                    param_cid = String(paramObj["CID"]);
                    param_cid_original = true;
                    so.data.cid = param_cid;
                    so.flush();
                } else {
                    if (paramObj["Cid"] != undefined){
                        param_cid = String(paramObj["Cid"]);
                        param_cid_original = true;
                        so.data.cid = param_cid;
                        so.flush();
                    } else {
                        if (so.data.cid){
                            if ((((so.data.cid.indexOf("_") == -1)) and ((so.data.cid.length == 15)))){
                                param_cid = (so.data.cid + "_r");
                            } else {
                                if (!param_no_cid_save){
                                    param_cid = so.data.cid;
                                };
                            };
                        };
                    };
                };
            };
            hadAccount = so.data.hadAccount;
            if (paramObj["adv"] != undefined){
                param_adv = String(paramObj["adv"]);
                so.data.adv = param_adv;
                so.data.advpar = paramObj;
                so.flush();
            } else {
                if (paramObj["cid"] != undefined){
                    so.data.advpar = paramObj;
                    so.flush();
                } else {
                    if (so.data.adv){
                        param_adv = so.data.adv;
                    };
                };
            };
            if (paramObj["valid"] != undefined){
                param_valid = String(paramObj["valid"]);
            };
            if (paramObj["val"] != undefined){
                param_valid = String(paramObj["val"]);
            };
            if (paramObj["hall"] != undefined){
                param_hall = String(paramObj["hall"]);
            };
            if (paramObj["imgsvr"] != undefined){
                param_imgsvr = int(paramObj["imgsvr"]);
            };
            if (paramObj["port"] != undefined){
                param_forceport = int(paramObj["port"]);
            };
            forceReroll = (param_reroll_img > int(so.data.force_reroll));
            if (forceReroll){
                so.data.force_reroll = param_reroll_img;
                so.flush();
            };
            if (img_url.length == 0){
                img_url[0] = "";
            };
            if (snd_url.length == 0){
                snd_url[0] = "";
            };
            if (so.data.img_url_index){
                if (param_imgsvr > 0){
                    img_url_index = (param_imgsvr - 1);
                } else {
                    if ((((so.data.img_url_index <= img_url.length)) and (!(forceReroll)))){
                        img_url_index = (so.data.img_url_index - 1);
                    } else {
                        img_url_index = int((Math.random() * img_url.length));
                    };
                };
            } else {
                img_url_index = int((Math.random() * img_url.length));
            };
            if (so.data.snd_url_index){
                if (param_imgsvr > 0){
                    snd_url_index = (param_imgsvr - 1);
                } else {
                    if ((((so.data.snd_url_index <= snd_url.length)) and (!(forceReroll)))){
                        snd_url_index = (so.data.snd_url_index - 1);
                    } else {
                        snd_url_index = int((Math.random() * snd_url.length));
                    };
                };
            } else {
                snd_url_index = int((Math.random() * snd_url.length));
            };
            if (img_url.length == snd_url.length){
                snd_url_index = img_url_index;
            };
            so.data.img_url_index = (img_url_index + 1);
            so.data.snd_url_index = (snd_url_index + 1);
            so.flush();
            if (lightMode){
                if (param_lowres_url != ""){
                    img_url[img_url_index] = param_lowres_url;
                };
                if (param_lowres_url != ""){
                    snd_url[snd_url_index] = param_lowres_url;
                };
            };
        };
        LoaderComplete(evt);
    };
    loader = new URLLoader();
    loader2 = new URLLoader();
    var _local2 = loader;
    with (_local2) {
        dataFormat = URLLoaderDataFormat.TEXT;
        addEventListener(Event.COMPLETE, ConfigurationFileLoaded);
        load(new URLRequest("client_cfg.php"));
    };
    _local2 = loader2;
    with (_local2) {
        dataFormat = URLLoaderDataFormat.TEXT;
        addEventListener(Event.COMPLETE, ConfigurationFileLoaded);
    };
    pendingLoaders = (pendingLoaders + 2);
    pendingConfigurationFiles = 1;
    pendingConfigurationFile = true;
}

DoLoadLanguageFile = function (){
    var i:* = 0;
    var StripSlashes:* = function (source:str):str{
        return (source.split("http://").join("").split("/").join(""));
    };
    Security.loadPolicyFile((img_url[img_url_index] + "crossdomain.xml"));
    Security.loadPolicyFile((snd_url[snd_url_index] + "crossdomain.xml"));
    Security.loadPolicyFile((lang_url + "crossdomain.xml"));
    Security.loadPolicyFile((("http://" + server) + "/crossdomain.xml"));
    Security.allowDomain(StripSlashes(img_url[img_url_index]), StripSlashes(snd_url[snd_url_index]), StripSlashes(lang_url), server);
    LoadLanguageFile();
    WhenLoaded(BuildInterface);


public function Load(... _args):void{
    var i:* = 0;
    var req:* = null;
    var iBunch:* = 0;
    var actorIDs:* = _args;
    var _Load:* = function (actorID:int):void{
        if (actorLoaded[actorID] == 0){
            if ((actor[actorID] is Sound)){
                Security.allowDomain(actorURL[actorID]);
                req = new URLRequest(actorURL[actorID]);
                actor[actorID].load(req, actorSoundLoader[actorID]);
                actorLoaded[actorID] = 2;
            } else {
                if (actorLoaded[actorID] != 0){
                };
                actor[actorID].contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, LoaderError);
                actor[actorID].contentLoaderInfo.addEventListener(Event.COMPLETE, LoaderComplete);
                Security.allowDomain(actorURL[actorID]);
                req = new URLRequest(actorURL[actorID]);
                if ((((actorURL[actorID].substr(-4) == ".png")) and (!(no_crossdomain)))){
                    actor[actorID].load(req, new LoaderContext(true, new ApplicationDomain(null), SecurityDomain.currentDomain));
                } else {
                    actor[actorID].load(req);
                };
                actorLoaded[actorID] = 1;
            };
        };
    };
    i = 0;
    while (i < actorIDs.length) {
        if ((actor[actorIDs[i]] is Array)){
            iBunch = 0;
            while (iBunch < actor[actorIDs[i]].length) {
                Load(actor[actorIDs[i]][iBunch]);
                iBunch = (iBunch + 1);
            };
            return;
        };
        _Load(actorIDs[i]);
        i = (i + 1);
    };
}

public function WhenLoaded(fn:Function=undefined):void{
    var i:int;
    var pending:Boolean;
    var tmpFn:Function;
    var WhenLoadedFnTemp:Array;
    pending = false;
    if ((fn is Function)){
        WhenLoadedFn[WhenLoadedFn.length] = fn;
        WhenLoadedActive = true;
        WhenLoadedTimeout.stop();
        WhenLoadedTimeout.start();
    };
    i = 0;
    while (i < actor.length) {
        if (actorLoaded[i] == 1){
            pending = true;
            break;
        };
        i++;
    };
    if (pendingLanguageFile){
        pending = true;
    };
    if (pendingDebugFile){
        pending = true;
    };
    if (pendingConfigurationFile){
        pending = true;
    };
    if (!pending){
        if (WhenLoadedActive){
            WhenLoadedTimeout.stop();
            WhenLoadedActive = false;
            WhenLoadedFnTemp = WhenLoadedFn;
            WhenLoadedFn = new Array();
            i = 0;
            while (i < WhenLoadedFnTemp.length) {
                tmpFn = WhenLoadedFnTemp[i];
                WhenLoadedFnTemp[i] = new Function();
                tmpFn();
                i++;
            };
        };
    };
}

public function WhenLoadedTimeoutEvent(evt:TimerEvent){
    var i:int;
    var old_img_url_index:int;
    var old_snd_url_index:int;
    WhenLoadedTimeout.stop();
    i = 0;
    while (i < actor.length) {
        if ((actor[i] is Loader)){
            if (actorLoaded[i] == 1){
                trc("Fehler: Timeout beim Laden. Ladezustand wird zurückgesetzt für Aktor", i, actorURL[i]);
                actorLoaded[i] = 0;
            };
        };
        i++;
    };
    WhenLoaded();
    toErrorCount++;
    if (toErrorCount == 10){
        old_img_url_index = img_url_index;
        if (img_url.length > 1){
            do  {
                img_url_index = int((Math.random() * img_url.length));
            } while (img_url_index == old_img_url_index);
        };
        old_snd_url_index = snd_url_index;
        if (snd_url.length > 1){
            do  {
                snd_url_index = int((Math.random() * snd_url.length));
            } while (snd_url_index == old_snd_url_index);
        };
        if (img_url.length == snd_url.length){
            snd_url_index = img_url_index;
        };
        so.data.img_url_index = (img_url_index + 1);
        so.data.snd_url_index = (snd_url_index + 1);
        so.flush();
    };
}

public function LoaderComplete(evt:Event=undefined):void{
    var evt:* = evt;
    if ((evt.target is LoaderInfo)){
        actorLoaded[GetActorID(evt.target.loader)] = 2;
        Security.allowDomain(evt.target.loaderURL);
        var _local3 = actor[GetActorID(evt.target.loader)].content;
        with (_local3) {
            forceSmoothing = true;
            allowSmoothing = true;
            smoothing = true;
        };
    };
    WhenLoaded();
}

public function LoaderError(evt:ErrorEvent=undefined):void{
    var i:int;
    var old_img_url_index:int;
    var old_snd_url_index:int;
    if ((evt.target is LoaderInfo)){
        i = 0;
        while (i < actor.length) {
            if ((actor[i] is Loader)){
                if (actorLoaded[i] == 1){
                    trc("Fehler: IO-Fehler beim Laden. Ladezustand wird zurückgesetzt für Aktor", i, actorURL[i]);
                    actorLoaded[i] = 0;
                };
            };
            i++;
        };
    };
    WhenLoaded();
    ioErrorCount++;
    if (ioErrorCount == 10){
        old_img_url_index = img_url_index;
        if (img_url.length > 1){
            do  {
                img_url_index = int((Math.random() * img_url.length));
            } while (img_url_index == old_img_url_index);
        };
        old_snd_url_index = snd_url_index;
        if (snd_url.length > 1){
            do  {
                snd_url_index = int((Math.random() * snd_url.length));
            } while (snd_url_index == old_snd_url_index);
        };
        if (img_url.length == snd_url.length){
            snd_url_index = img_url_index;
        };
        so.data.img_url_index = (img_url_index + 1);
        so.data.snd_url_index = (snd_url_index + 1);
        so.flush();
    };
}


'''


#------------------------------------------------------------------------------

'''
    BuildInterface = function (){
        var i:* = 0;
        var ii:* = 0;
        var iii:* = 0;
        var attPriceLimitation:* = false;
        var iPosi:* = undefined;
        var yOffs:* = undefined;
        var dungeonBtnUpdateDelayTimer:* = null;
        var dungeonBtnHover:* = null;
        var dungeonBtnLeave:* = null;
        var dungeonBtnUpdateDelay:* = null;
        var workBtnUpdateDelayTimer:* = null;
        var workBtnHover:* = null;
        var workBtnLeave:* = null;
        var workBtnUpdateDelay:* = null;
        var tavBtnUpdateDelayTimer:* = null;
        var tavBtnHover:* = null;
        var tavBtnLeave:* = null;
        var tavBtnUpdateDelay:* = null;
        var arenaBtnUpdateDelayTimer:* = null;
        var arenaBtnHover:* = null;
        var arenaBtnLeave:* = null;
        var arenaBtnUpdateDelay:* = null;
        var HutmannLinkTimer:* = null;
        var HutmannLinkVis:* = false;
        var HutmannLinkOver:* = false;
        var HutmannRelY:* = 0;
        var HutmannAniStep:* = 0;
        var HutmannCountdown:* = 0;
        var HutmannLinkAniEvent:* = null;
        var AIRRelMoveY:* = 0;
        var AIRRelMoveYButton:* = 0;
        var AIRRelMoveYButton2:* = 0;
        var gradePassword:* = null;
        var RequestPassword:* = null;
        var CheckAGB:* = null;
        var UncheckAGB:* = null;
        var CheckFuck:* = null;
        var UncheckFuck:* = null;
        var PulseTimer:* = null;
        var PulseLevel:* = 0;
        var CloneMarker:* = null;
        var pos_x:* = 0;
        var pos_y:* = 0;
        var volk:* = null;
        var SelectRace:* = null;
        var SelectGender:* = null;
        var SelectCaste:* = null;
        var MimickInterfaceButtonHover:* = null;
        var Buh:* = false;
        var BuhHover:* = null;
        var BuhOut:* = null;
        var BubbleTimer:* = null;
        var BubbleWait:* = 0;
        var Bubbles:* = null;
        var CityAniTimer:* = null;
        var CityAniFrame:* = 0;
        var SandwichPause:* = 0;
        var ZwergFussTapp:* = 0;
        var CityAni:* = null;
        var iFrame:* = 0;
        var SchildDir:* = 0;
        var SchildTimer:* = null;
        var WacheOver:* = null;
        var WacheOut:* = null;
        var SchildFrame:* = null;
        var EselOver:* = null;
        var EselOut:* = null;
        var DealerAniTimer:* = null;
        var DealerStepTimer:* = null;
        var DealerAniStep:* = 0;
        var ShowDealerEyes:* = null;
        var HideDealerEyes:* = null;
        var DealerStep:* = null;
        var OnoTimer:* = null;
        var LastOno:* = 0;
        var ThisOno:* = 0;
        var OnoPopupTimer:* = null;
        var PopupDir:* = false;
        var ShowArenaOno:* = null;
        var HideArenaOno:* = null;
        var PopupArenaOno:* = null;
        var StepArenaOno:* = null;
        var InterfaceButtonHover:* = null;
        var ExitScreen:* = null;
        var HalleSuchClick:* = null;
        var RuhmesHalleScroll:* = null;
        var RemoveInviteWindow:* = null;
        var SendPlayerInvite:* = null;
        var PrevPlayer:* = null;
        var NextPlayer:* = null;
        var RequestAlbum:* = null;
        var PlayerGuildInviteCancel:* = null;
        var PlayerGuildInviteOK:* = null;
        var PlayerGuildInvite:* = null;
        var ZurGilde:* = null;
        var PlayerSendMessage:* = null;
        var PlayerAttack:* = null;
        var PlayerInvite:* = null;
        var BoostBtnRepeatTimer:* = null;
        var DestroyBoostBtnTimer:* = false;
        var BoostAttribute:* = null;
        var inBoostBtn:* = false;
        var BoostBtnChange:* = 0;
        var BoostBtnTimer:* = null;
        var BoostBtnTimerFunction:* = null;
        var itmTyp:* = 0;
        var itmPic:* = 0;
        var itmColor:* = 0;
        var itmClass:* = 0;
        var InventoryItemMouseDown:* = null;
        var BackpackItemMouseDown:* = null;
        var InventoryItemMouseUp:* = null;
        var DropHandler:* = null;
        var PotionSingleClick:* = null;
        var PotionDoubleClick:* = null;
        var towerLevelLabelTimer:* = null;
        var towerBoostPriceFadeoutTimer:* = null;
        var towerBoostPriceFadeout:* = null;
        var towerLevelLabelMoveFn:* = null;
        var ShowTowerBoostPrices:* = null;
        var HideTowerBoostPrices:* = null;
        var BoostCopycat:* = null;
        var AffeBlinzeln:* = 0;
        var FidgetBlinzeln:* = 0;
        var ShakesBlinzeln:* = 0;
        var ShakesIdleStep:* = 0;
        var ShakesIdlePhase:* = 0;
        var WasIdleCount:* = 0;
        var ShopIdle:* = NaN;
        var PlayerIdle:* = false;
        var ShopAniTimer:* = null;
        var SaleRecoverTime:* = NaN;
        var ShopAniFrame:* = null;
        var ShopMouseDownEvent:* = null;
        var ShopMouseUpEvent:* = null;
        var RequestNewWarez:* = null;
        var RequestWitchScreen:* = null;
        var spellClicking:* = false;
        var CancelQuest:* = null;
        var SkipQuest:* = null;
        var AttackEnemy:* = null;
        var SelectedMount:* = 0;
        var OldMount:* = 0;
        var ClickMount:* = null;
        var BuyMount:* = null;
        var crestClaI:* = 0;
        var ShowExtendedHistory:* = null;
        var HideExtendedHistory:* = null;
        var lastChatLine:* = null;
        var AdvancedChatHandler:* = null;
        var SendChatMsg:* = null;
        var nextSuggestionTimer:* = null;
        var suggestionAllowed:* = false;
        var nextSuggestionAllow:* = null;
        var GildeBtnHandler:* = null;
        var GildeGruenden:* = null;
        var HutBtnRepeatTimer:* = null;
        var DestroyHutBtnTimer:* = false;
        var HutFaceResetTimer:* = null;
        var HutFaceReset:* = null;
        var HutBtnHandler:* = null;
        var ChooseCup:* = null;
        var cursedDescr:* = null;
        var RequestToilet:* = null;
        var ShowHutmann:* = null;
        var BuyBeer:* = null;
        var ShowBeerOffer:* = null;
        var TimeBarAniTimer:* = null;
        var timeBarAni:* = NaN;
        var TimeBarAniEvent:* = null;
        var ShowQuestOffer:* = null;
        var ReturnQuest:* = null;
        var RequestQuest:* = null;
        var toiletChainTimer:* = null;
        var toiletChainFrame:* = 0;
        var toiletChainAni:* = null;
        var ToiletHandler:* = null;
        var k:* = 0;
        var monsterChecksum:* = null;
        var SkipFight:* = null;
        var CheckLM:* = null;
        var UncheckLM:* = null;
        var CheckCS:* = null;
        var UncheckCS:* = null;
        var CheckCompare:* = null;
        var UncheckCompare:* = null;
        var CheckTV:* = null;
        var UncheckTV:* = null;
        var VolumeChange:* = null;
        var Filter_Glow:* = null;
        var ChooseLanguageIcon:* = null;
        var optionMenuSelect:* = 0;
        var OptionBtnHandler:* = null;
        var RequestMainQuest:* = null;
        var AdvancedPostHandler:* = null;
        var killFieldContent:* = null;
        var fillFieldContent:* = null;
        var ShowSocial:* = function (evt:MouseEvent){
            var thisActor:int;
            thisActor = GetActorID(evt.target);
            ExternalInterface.call("showSocial", param_social_buttons[(thisActor - SOCIAL)].split(":")[0]);
        };
        var ShowDatenschutz:* = function (){
            navigateToURLEx(new URLRequest(dataprot_url), "_blank");
        };
        var ShowAnleitung:* = function (){
            navigateToURLEx(new URLRequest(instr_url), "_blank");
        };
        var ShowImpressum:* = function (){
            navigateToURLEx(new URLRequest(imprint_url), "_blank");
        };
        var ShowForum:* = function (){
            navigateToURLEx(new URLRequest(forum_url), "_blank");
        };
        var ShowShop:* = function (){
            navigateToURLEx(new URLRequest(shop_url.split("<playerid>").join(Savegame[SG_PLAYER_ID]).split("<paymentid>").join(Savegame[SG_PAYMENT_ID]).split("<playername>").join(actor[INP_NAME].getChildAt(1).text).split("<face>").join((((((((((((((((((((((((CharVolk + "/") + str(((CharMann) ? 1 : 2))) + "/") + CharKaste) + "/") + CharMouth) + "/") + CharHair) + "/") + CharBrows) + "/") + CharEyes) + "/") + CharBeard) + "/") + CharNose) + "/") + CharEars) + "/") + CharSpecial) + "/") + CharSpecial2) + "/"))), "_blank");
        };
        var navigateToURLEx:* = function (req:URLRequest, frameName:str){
            var req:* = req;
            var frameName:* = frameName;
            try {
                ExternalInterface.call("openUrl", req.url);
            } catch(e:Error) {
                navigateToURL(req, frameName);
            };
        };
        dungeonBtnHover = function (evt:MouseEvent){
            dungeonBtnUpdateDelay();
            dungeonBtnUpdateDelayTimer.start();
        };
        dungeonBtnLeave = function (evt:MouseEvent=undefined){
            dungeonBtnUpdateDelayTimer.stop();
            SetBtnText(IF_WELTKARTE, txt[TXT_WELTKARTE]);
        };
        dungeonBtnUpdateDelay = function (evt:TimerEvent=undefined){
            if (WaitingFor(Savegame[SG_MQ_REROLL_TIME])){
                SetBtnText(IF_WELTKARTE, WaitingTime(Savegame[SG_MQ_REROLL_TIME]));
            } else {
                dungeonBtnLeave();
            };
        };
        workBtnHover = function (evt:MouseEvent){
            workBtnUpdateDelay();
            workBtnUpdateDelayTimer.start();
        };
        workBtnLeave = function (evt:MouseEvent=undefined){
            workBtnUpdateDelayTimer.stop();
            SetBtnText(IF_ARBEITEN, txt[TXT_ARBEITEN]);
        };
        workBtnUpdateDelay = function (evt:TimerEvent=undefined){
            if (((WaitingFor(Savegame[SG_ACTION_ENDTIME])) and ((Savegame[SG_ACTION_STATUS] == 1)))){
                SetBtnText(IF_ARBEITEN, WaitingTime(Savegame[SG_ACTION_ENDTIME]));
            } else {
                workBtnLeave();
            };
        };
        tavBtnHover = function (evt:MouseEvent){
            tavBtnUpdateDelay();
            tavBtnUpdateDelayTimer.start();
        };
        tavBtnLeave = function (evt:MouseEvent=undefined){
            tavBtnUpdateDelayTimer.stop();
            SetBtnText(IF_TAVERNE, txt[TXT_TAVERNE]);
        };
        tavBtnUpdateDelay = function (evt:TimerEvent=undefined){
            if (((WaitingFor(Savegame[SG_ACTION_ENDTIME])) and ((Savegame[SG_ACTION_STATUS] == 2)))){
                SetBtnText(IF_TAVERNE, WaitingTime(Savegame[SG_ACTION_ENDTIME]));
            } else {
                tavBtnLeave();
            };
        };
        arenaBtnHover = function (evt:MouseEvent){
            arenaBtnUpdateDelay();
            arenaBtnUpdateDelayTimer.start();
        };
        arenaBtnLeave = function (evt:MouseEvent=undefined){
            arenaBtnUpdateDelayTimer.stop();
            SetBtnText(IF_ARENA, txt[TXT_ARENA]);
        };
        arenaBtnUpdateDelay = function (evt:TimerEvent=undefined){
            if (WaitingFor(Savegame[SG_PVP_REROLL_TIME])){
                SetBtnText(IF_ARENA, WaitingTime(Savegame[SG_PVP_REROLL_TIME]));
            } else {
                arenaBtnLeave();
            };
        };
        var TaverneBtnIn:* = function (evt:Event){
            actor[IF_TOILET].visible = ((!((Savegame[SG_TOILET] == 0))) and (!(OnStage(CA_TOILET_BOWL))));
            actor[IF_HUTMANN].visible = !(OnStage(HUTMANN_BG));
            if (((!((int(Savegame[SG_ACTION_STATUS]) == 0))) and (!(PulseTaverne)))){
                HutmannCountdown = 20;
                HutmannLinkOver = true;
            };
        };
        var TaverneBtnOut:* = function (evt:Event){
            HutmannCountdown = 1;
            HutmannLinkOver = false;
        };
        HutmannLinkAniEvent = function (evt:Event){
            var i:* = 0;
            var evt:* = evt;
            if (HutmannCountdown > 0){
                HutmannCountdown--;
                if (HutmannCountdown == 0){
                    HutmannLinkVis = HutmannLinkOver;
                };
            };
            if (HutmannLinkVis){
                if (HutmannRelY > -(actor[IF_HUTMANN1].height)){
                    HutmannRelY = (HutmannRelY - 10);
                } else {
                    if (HutmannAniStep < 100){
                        HutmannAniStep++;
                    };
                    switch (HutmannAniStep){
                        case 2:
                        case 8:
                        case 14:
                        case 20:
                        case 26:
                            HutmannFrame = 1;
                            break;
                        case 4:
                        case 10:
                        case 16:
                        case 22:
                        case 28:
                            HutmannFrame = 0;
                            break;
                    };
                };
            } else {
                if (HutmannRelY < 0){
                    HutmannRelY = (HutmannRelY + 10);
                };
                HutmannAniStep = 0;
                HutmannFrame = 0;
            };
            i = 0;
            while (i < 2) {
                var _local3 = actor[(IF_HUTMANN1 + i)];
                with (_local3) {
                    visible = (i == HutmannFrame);
                };
                i = (i + 1);
            };
            _local3 = actor[IF_HUTMANN];
            with (_local3) {
                y = (IF_HUTLINK_Y + HutmannRelY);
            };
            _local3 = actor[IF_TOILET];
            with (_local3) {
                y = ((IF_HUTLINK_Y + HutmannRelY) + 40);
            };
        };
        var DefiniereInterfaceButton:* = function (actorID:int, txtID:int){
            var dragonID:* = 0;
            var InterfaceButtonDown:* = null;
            var InterfaceButtonUp:* = null;
            var actorID:* = actorID;
            var txtID:* = txtID;
            InterfaceButtonDown = function (evt:MouseEvent):void{
                var x:int;
                var y:int;
                var i:int;
                i = dragonID;
                x = actor[i].x;
                y = actor[i].y;
                removeChild(actor[i]);
                delete actor[i];
                actor[i] = new interface_dragon5_png();
                actor[i].x = x;
                actor[i].y = y;
                addChild(actor[i]);
            };
            InterfaceButtonUp = function (evt:MouseEvent):void{
                var x:int;
                var y:int;
                var i:int;
                var d:int;
                i = dragonID;
                if (actor[i]){
                    x = actor[i].x;
                    y = actor[i].y;
                    removeChild(actor[i]);
                    delete actor[i];
                    d = actorBitmap[i];
                    switch (d){
                        case 0:
                            actor[i] = new interface_dragon1_png();
                            break;
                        case 1:
                            actor[i] = new interface_dragon2_png();
                            break;
                        case 2:
                            actor[i] = new interface_dragon3_png();
                            break;
                        case 3:
                            actor[i] = new interface_dragon4_png();
                            break;
                        case 4:
                        case 5:
                            actor[i] = new interface_dragon6_png();
                            break;
                    };
                    actor[i].x = x;
                    actor[i].y = y;
                    addChild(actor[i]);
                };
                Remove(CITY_OVERLAYS);
                HideArenaOno();
                WacheOut();
                if (((((OnStage(SCR_CITY_BACKG_NIGHT)) or (OnStage(SCR_CITY_BACKG_DAWN)))) or (OnStage(SCR_CITY_BACKG_DAY)))){
                    Add(CITY_ESEL1);
                    Add(CITY_CA_OVL);
                };
                if (OnStage(CA_SCR_ARBEITEN_BLOCKCITY)){
                    if (OnStage(LBL_SCR_ARBEITEN_TIME)){
                        Add(SCREEN_ARBEITEN_WAIT);
                    } else {
                        if (OnStage(SCR_ARBEITEN_OK)){
                            Add(SCREEN_ARBEITEN);
                        } else {
                            Add(SCREEN_ARBEITEN_SUCCESS);
                        };
                    };
                };
                if (OnStage(CA_SCR_INVITE_BLOCKCITY)){
                    Add(SCREEN_INVITE);
                };
                if (OnStage(BLACK_SQUARE)){
                    Add(BLACK_SQUARE);
                };
            };
            DefineBtn(actorID, txt[txtID], InterfaceBtnHandler, btnClassInterface, IF_X, ((IF_Y + (IF_1 * iPosi++)) + yOffs));
            DefineFromClass(((IF_DRAGON_1 + iPosi) - 1), interface_dragon1_png, (actor[actorID].x + DRAGON_X), (actor[actorID].y + DRAGON_Y));
            dragonID = ((IF_DRAGON_1 + iPosi) - 1);
            actor[actorID].addEventListener(MouseEvent.MOUSE_DOWN, InterfaceButtonDown);
            actor[actorID].addEventListener(MouseEvent.MOUSE_UP, InterfaceButtonUp);
            actor[actorID].addEventListener(MouseEvent.MOUSE_OUT, InterfaceButtonUp);
            actor[actorID].addEventListener(MouseEvent.MOUSE_OVER, InterfaceButtonHover);
            MakePersistent(((IF_DRAGON_1 + iPosi) - 1), actorID);
        };
        gradePassword = function (evt:Event=undefined, pwd_str:String=""){
            var pwd:String;
            var badWords:Array;
            var newPwd:String;
            var lastChar:String;
            var pwdScore:int;
            var i:int;
            var ii:int;
            var cmp:String;
            var badSequences:*;
            var hasBadSequence:Boolean;
            var hasNumerals:Boolean;
            var hasUpperCase:Boolean;
            var hasLowerCase:Boolean;
            var hasSpecial:Boolean;
            pwd = pwd_str;
            badWords = new Array();
            if (txt[TXT_BAD_PASSWORDS]){
                badWords = txt[TXT_BAD_PASSWORDS].split(" ");
            };
            if (actor[INP_NAME].getChildAt(1).text.length >= 3){
                badWords.push(actor[INP_NAME].getChildAt(1).text);
            };
            if (evt){
                if (GetActorID(evt.target.parent) == INP_PASSWORD){
                    pwd = actor[INP_PASSWORD].getChildAt(1).text;
                    Hide(PASSWORD_SMILEY_SAD);
                    Hide(PASSWORD_SMILEY_NEUTRAL);
                    Hide(PASSWORD_SMILEY_HAPPY);
                } else {
                    if (optionMenuSelect == 3){
                        Hide(CHANGE_PASSWORD_SMILEY_SAD);
                        Hide(CHANGE_PASSWORD_SMILEY_NEUTRAL);
                        Hide(CHANGE_PASSWORD_SMILEY_HAPPY);
                        if (actor[INP_OPTION_FIELD2].getChildAt(1).text == actor[INP_OPTION_FIELD3].getChildAt(1).text){
                            pwd = actor[INP_OPTION_FIELD2].getChildAt(1).text;
                        } else {
                            return;
                        };
                    } else {
                        return;
                    };
                };
            };
            newPwd = "";
            lastChar = "";
            pwdScore = 0;
            cmp = "";
            badSequences = ["01234567890", "abcdefghijklmnopqrstuvwxyz", "ABCDEFGHIJKLMNOPQRSTUVWXYZ", "qwertzuiopasdfghjklyxcvbnm", "qwertyuiopasdfghjklzxcvbnm", "09876543210", "mnbvcxylkjhgfdsapoiuztrewq", "mnbvcxzlkjhgfdsapoiuytrewq"];
            i = 0;
            while (i < badWords.length) {
                if (pwd.toLowerCase().indexOf(badWords[i].toLowerCase()) != -1){
                    pwdScore = (pwdScore - 5);
                };
                i++;
            };
            i = 0;
            while (i < pwd.length) {
                if (pwd.substr(i, 1) != lastChar){
                    newPwd = (newPwd + pwd.substr(i, 1));
                };
                lastChar = pwd.substr(i, 1);
                i++;
            };
            pwd = newPwd;
            newPwd = "";
            hasBadSequence = false;
            i = 0;
            while (i < pwd.length) {
                if (i >= 2){
                    cmp = pwd.substr((i - 2), 3);
                } else {
                    cmp = "";
                    newPwd = (newPwd + pwd.substr(i, 1));
                };
                hasBadSequence = false;
                ii = 0;
                while (ii < badSequences.length) {
                    if (badSequences[ii].indexOf(cmp) != -1){
                        hasBadSequence = true;
                        break;
                    };
                    ii++;
                };
                if (!hasBadSequence){
                    newPwd = (newPwd + pwd.substr(i, 1));
                };
                i++;
            };
            pwd = newPwd;
            i = 3;
            while (i < pwd.length) {
                ii = 0;
                while (ii < (pwd.length - i)) {
                    cmp = pwd.substr(ii, i);
                    if (pwd.lastIndexOf(cmp) != ii){
                        pwdScore--;
                    };
                    ii++;
                };
                i++;
            };
            if (pwd.length >= 12){
                pwdScore = (pwdScore + 2);
            } else {
                if (pwd.length >= 8){
                    pwdScore = (pwdScore + 1);
                } else {
                    if (pwd.length >= 5){
                        pwdScore = (pwdScore + 0);
                    } else {
                        pwdScore = (pwdScore - 10);
                    };
                };
            };
            hasNumerals = false;
            hasUpperCase = false;
            hasLowerCase = false;
            hasSpecial = false;
            i = 0;
            while (i < pwd.length) {
                if (pwd.substr(i, 1) == String(int(pwd.substr(i, 1)))){
                    hasNumerals = true;
                } else {
                    if (pwd.substr(i, 1) != pwd.substr(i, 1).toLowerCase()){
                        hasUpperCase = true;
                    } else {
                        if (pwd.substr(i, 1) != pwd.substr(i, 1).toUpperCase()){
                            hasLowerCase = true;
                        } else {
                            hasSpecial = true;
                        };
                    };
                };
                i++;
            };
            if (hasNumerals){
                pwdScore = (pwdScore + 1);
            };
            if (hasUpperCase){
                pwdScore = (pwdScore + 1);
            };
            if (hasLowerCase){
                pwdScore = (pwdScore + 1);
            };
            if (hasSpecial){
                pwdScore = (pwdScore + 1);
            };
            if (evt){
                if (GetActorID(evt.target.parent) == INP_PASSWORD){
                    if (pwdScore >= 3){
                        Show(PASSWORD_SMILEY_HAPPY);
                    } else {
                        if (pwdScore >= 2){
                            Show(PASSWORD_SMILEY_NEUTRAL);
                        } else {
                            Show(PASSWORD_SMILEY_SAD);
                        };
                    };
                } else {
                    if (pwdScore >= 3){
                        Show(CHANGE_PASSWORD_SMILEY_HAPPY);
                    } else {
                        if (pwdScore >= 2){
                            Show(CHANGE_PASSWORD_SMILEY_NEUTRAL);
                        } else {
                            Show(CHANGE_PASSWORD_SMILEY_SAD);
                        };
                    };
                };
            } else {
                if (pwdScore >= 3){
                    ChatLine("Your password is secure.");
                } else {
                    if (pwdScore >= 2){
                        ChatLine("Your password is ok, could be better.");
                    } else {
                        ChatLine("Your password is insecure.");
                    };
                };
            };
        };
        var DoGotoSignup:* = function (evt:Event){
            if (buffedMode){
                navigateToURL(new URLRequest(buffedLinkURL));
            } else {
                ShowBuildCharacterScreen(evt);
            };
        };
        var ShowAGB:* = function (evt:Event=undefined){
            navigateToURL(new URLRequest(legal_url), "_blank");
        };
        var ShowForgotPasswordScreen:* = function (evt:Event=undefined):void{
            RemoveAll();
            actor[LBL_WINDOW_TITLE].text = txt[TXT_TITLE_FORGOT_PASSWORD];
            actor[LBL_WINDOW_TITLE].x = ((IF_WIN_X + IF_WIN_WELCOME_X) - int((actor[LBL_WINDOW_TITLE].textWidth / 2)));
            actor[INP_NAME].addEventListener(KeyboardEvent.KEY_DOWN, RequestPassword);
            actor[INP_EMAIL].addEventListener(KeyboardEvent.KEY_DOWN, RequestPassword);
            LogonRTL();
            Add(WINDOW_FORGOT_PASSWORD);
        };
        RequestPassword = function (evt:Event):void{
            if ((evt is KeyboardEvent)){
                if (((((!((KeyboardEvent(evt).keyCode == 13))) and (!((KeyboardEvent(evt).keyCode == 10))))) and (!((KeyboardEvent(evt).keyCode == 16777230))))){
                    return;
                };
            };
            SendAction(ACT_FORGOT_PASSWORD, actor[INP_NAME].getChildAt(1).text, actor[INP_EMAIL].getChildAt(1).text);
        };
        CheckAGB = function (evt:MouseEvent):void{
            Add(CB_AGB_CHECKED);
        };
        UncheckAGB = function (evt:MouseEvent):void{
            Remove(CB_AGB_CHECKED);
        };
        CheckFuck = function (evt:MouseEvent):void{
            Add(CB_FUCK_CHECKED);
        };
        UncheckFuck = function (evt:MouseEvent):void{
            Remove(CB_FUCK_CHECKED);
        };
        var PulseEvent:* = function (evt:Event){
            var evt:* = evt;
            var ButtonPulse:* = function (doPulse:Boolean, btnID:int){
                var doPulse:* = doPulse;
                var btnID:* = btnID;
                var LabelPulse:* = function (obj:DisplayObjectContainer){
                    var obj:* = obj;
                    var _local3 = obj.getChildAt(1);
                    with (_local3) {
                        alpha = ((doPulse) ? ((Math.sin((((PulseLevel / 200) * 2) * Math.PI)) * 0.4) + 0.8) : 1);
                    };
                };
                PulseLevel = (PulseLevel + 1);
                if (PulseLevel > 200){
                    PulseLevel = 0;
                };
                var _local4 = actor[btnID];
                with (_local4) {
                    LabelPulse(upState);
                    LabelPulse(overState);
                    LabelPulse(downState);
                    LabelPulse(hitTestState);
                };
            };
            if (Savegame.length == 0){
                return;
            };
            if (int(Savegame[SG_ACTION_STATUS]) == 1){
                if (!WaitingFor(Savegame[SG_ACTION_ENDTIME])){
                    PulseArbeiten = true;
                };
            };
            if (int(Savegame[SG_ACTION_STATUS]) == 2){
                if (!WaitingFor(Savegame[SG_ACTION_ENDTIME])){
                    PulseTaverne = true;
                };
            };
            if (((((OnStage(TAVERNE_BG)) or (OnStage(FIGHT_BOX1)))) or (OnStage(QUESTBAR_BG)))){
                PulseTaverne = false;
            };
            if (OnStage(LBL_SCR_ARBEITEN_TEXT)){
                PulseArbeiten = false;
            };
            if (OnStage(GILDEN_BG)){
                PulseGilde = false;
                PulseGildeOnHistory = false;
            };
            if (OnStage(SCR_DEALER_BG)){
                PulseDealer = false;
            };
            if (OnStage(POST_LIST)){
                PulsePost = false;
            };
            if (((((OnStage(SCR_CHAR_BG_RIGHT)) or (OnStage(SCR_SHAKES_BG)))) or (OnStage(SCR_FIDGET_BG)))){
                PulseChar = false;
            };
            if (((((((((((PulseTaverne) or (PulseArbeiten))) or (PulseGilde))) or (PulsePost))) or (PulseChar))) or (PulseDealer))){
                PulseTimer.delay = 20;
            } else {
                PulseTimer.delay = 500;
            };
            ButtonPulse(PulseTaverne, IF_TAVERNE);
            ButtonPulse(PulseArbeiten, IF_ARBEITEN);
            ButtonPulse(PulseGilde, IF_GILDEN);
            ButtonPulse(PulsePost, IF_POST);
            ButtonPulse(PulseChar, IF_CHARAKTER);
            ButtonPulse(PulseDealer, IF_PILZDEALER);
        };
        CloneMarker = function ():void{
            var i:int;
            SetCnt(M_ACT, VOLK_MARKER);
            SetCnt(F_ACT, VOLK_MARKER);
            SetCnt(KASTE_1_ACT, VOLK_MARKER);
            SetCnt(KASTE_2_ACT, VOLK_MARKER);
            SetCnt(KASTE_3_ACT, VOLK_MARKER);
            i = 0;
            while (i <= 7) {
                SetCnt((VOLK_1_M_ACT + i), VOLK_MARKER);
                SetCnt((VOLK_1_F_ACT + i), VOLK_MARKER);
                i++;
            };
        };
        SelectRace = function (evt:MouseEvent):void{
            var actorID:int;
            actorID = GetActorID(evt.target);
            if ((((actorID >= VOLK_1_M_IDLE)) and ((actorID <= VOLK_8_M_IDLE)))){
                CharVolk = ((actorID - VOLK_1_M_IDLE) + 1);
                CharMann = true;
            };
            if ((((actorID >= VOLK_1_F_IDLE)) and ((actorID <= VOLK_8_F_IDLE)))){
                CharVolk = ((actorID - VOLK_1_F_IDLE) + 1);
                CharMann = false;
            };
            RandomizeCharImage();
            if (OnStage(POPUP_INFO)){
                Add(POPUP_INFO);
            };
        };
        SelectGender = function (evt:MouseEvent):void{
            var actorID:int;
            actorID = GetActorID(evt.target);
            if (actorID == M_IDLE){
                CharMann = true;
            };
            if (actorID == F_IDLE){
                CharMann = false;
            };
            RandomizeCharImage();
            if (OnStage(POPUP_INFO)){
                Add(POPUP_INFO);
            };
        };
        SelectCaste = function (evt:MouseEvent):void{
            var actorID:int;
            actorID = GetActorID(evt.target);
            KlasseGewählt = true;
            if (actorID == KASTE_1_IDLE){
                CharKaste = 1;
            };
            if (actorID == KASTE_2_IDLE){
                CharKaste = 2;
            };
            if (actorID == KASTE_3_IDLE){
                CharKaste = 3;
            };
            LoadCharacterImage();
            if (OnStage(POPUP_INFO)){
                Add(POPUP_INFO);
            };
        };
        var AddMimickInterfaceButtonHoverHandler:* = function (actorID:int){
            actor[actorID].addEventListener(MouseEvent.MOUSE_OVER, MimickInterfaceButtonHover);
        };
        MimickInterfaceButtonHover = function (evt:MouseEvent):void{
            var tmpContainer:* = null;
            var EndMimickInterfaceButtonHover:* = null;
            var evt:* = evt;
            var MimickHover:* = function (actorID:int){
                tmpContainer = new MovieClip();
                tmpContainer.x = actor[actorID].x;
                tmpContainer.y = actor[actorID].y;
                tmpContainer.addChild(actor[actorID].overState);
                addChild(tmpContainer);
            };
            EndMimickInterfaceButtonHover = function (evt:MouseEvent):void{
                if (getChildByName(tmpContainer.name)){
                    removeChild(tmpContainer);
                };
            };
            evt.target.addEventListener(MouseEvent.MOUSE_OUT, EndMimickInterfaceButtonHover);
            switch (GetActorID(evt.target)){
                case CA_CITY_SHAKES:
                    MimickHover(IF_SCHMIEDE);
                    break;
                case CA_CITY_ZAUBERLADEN:
                    MimickHover(IF_ZAUBERLADEN);
                    break;
                case CA_CITY_RUHMESHALLE:
                    MimickHover(IF_EHRENHALLE);
                    break;
                case CA_CITY_ARENA:
                    MimickHover(IF_ARENA);
                    break;
                case CA_CITY_DEALER:
                    MimickHover(IF_PILZDEALER);
                    break;
                case CA_CITY_ESEL:
                    MimickHover(IF_STALL);
                    break;
                case CA_CITY_TAVERNE:
                    MimickHover(IF_TAVERNE);
                    break;
                case CA_CITY_POST:
                    MimickHover(IF_POST);
                    break;
                case CA_CITY_WACHE:
                    MimickHover(IF_ARBEITEN);
                    break;
            };
        };
        BuhHover = function ():void{
            Buh = true;
        };
        BuhOut = function ():void{
            Buh = false;
        };
        Bubbles = function (evt:Event):void{
            var evt:* = evt;
            var BubbleFade:* = function (inOut:Boolean, bubbleID:int):void{
                if (inOut){
                    if (((((!(OnStage(bubbleID))) and (!(OnStage(CA_SCR_ARBEITEN_BLOCKCITY))))) and (!(OnStage(CA_SCR_INVITE_BLOCKCITY))))){
                        Add(bubbleID);
                        Add(CITY_CA_OVL);
                        actor[bubbleID].alpha = 0;
                        BubbleWait = 30;
                    } else {
                        if (actor[bubbleID].alpha < 1){
                            if (((OnStage(CA_SCR_ARBEITEN_BLOCKCITY)) or (OnStage(CA_SCR_INVITE_BLOCKCITY)))){
                                Remove(bubbleID);
                                actor[bubbleID].alpha = 0;
                                BubbleWait = 0;
                            } else {
                                if (BubbleWait > 0){
                                    BubbleWait--;
                                } else {
                                    Add(bubbleID);
                                    Add(CITY_CA_OVL);
                                    if (lightMode){
                                        actor[bubbleID].alpha = 1;
                                    } else {
                                        actor[bubbleID].alpha = (actor[bubbleID].alpha + 0.1);
                                    };
                                };
                            };
                        } else {
                            if (((OnStage(CA_SCR_ARBEITEN_BLOCKCITY)) or (OnStage(CA_SCR_INVITE_BLOCKCITY)))){
                                Remove(bubbleID);
                            };
                        };
                    };
                } else {
                    if (OnStage(bubbleID)){
                        if (((OnStage(CA_SCR_ARBEITEN_BLOCKCITY)) or (OnStage(CA_SCR_INVITE_BLOCKCITY)))){
                            Remove(bubbleID);
                            actor[bubbleID].alpha = 0;
                            BubbleWait = 0;
                        };
                        if (actor[bubbleID].alpha > 0){
                            if (lightMode){
                                actor[bubbleID].alpha = 0;
                            } else {
                                actor[bubbleID].alpha = (actor[bubbleID].alpha - 0.1);
                            };
                            Add(bubbleID);
                            Add(CITY_CA_OVL);
                            BubbleWait = 30;
                        };
                        if (actor[bubbleID].alpha == 0){
                            Remove(bubbleID);
                        };
                    };
                };
            };
            if (((((OnStage(SCR_CITY_MAIN_DAWN)) or (OnStage(SCR_CITY_MAIN_DAY)))) or (OnStage(SCR_CITY_MAIN_NIGHT)))){
                BubbleTimer.delay = 20;
            } else {
                BubbleTimer.delay = 500;
            };
            BubbleFade(Buh, BUBBLE_STATUE);
            BubbleFade(OnStage(CITY_ARENA), BUBBLE_ARENA);
            BubbleFade(OnStage(CITY_ESEL2), BUBBLE_ESEL);
            BubbleFade(OnStage(CITY_TAVERNE), BUBBLE_TAVERNE);
            BubbleFade(OnStage(CITY_RUHMESHALLE), BUBBLE_RUHMESHALLE);
            BubbleFade(OnStage(CITY_DEALER), BUBBLE_DEALER);
            BubbleFade(OnStage(CITY_POST), BUBBLE_POST);
            BubbleFade(((((((OnStage(CITY_SCHILD1)) or (OnStage(CITY_SCHILD2)))) or (OnStage(CITY_SCHILD3)))) or (OnStage(CITY_SCHILD4))), BUBBLE_WACHE);
            BubbleFade(OnStage(CITY_SHAKES), BUBBLE_SHAKES);
            BubbleFade(OnStage(CITY_ZAUBERLADEN), BUBBLE_ZAUBERLADEN);
        };
        CityAni = function (evt:Event):void{
            if (!lightMode){
                CityAniFrame++;
                if ((((CityAniFrame == 5)) and (getChildByName(actor[CITY_ELF1].name)))){
                    Remove(CITY_ELF1);
                    Add(CITY_ELF2);
                    if (OnStage(BUBBLE_POST)){
                        Add(BUBBLE_POST);
                    };
                    Add(CITY_CA_OVL);
                } else {
                    if (getChildByName(actor[CITY_ELF2].name)){
                        Remove(CITY_ELF2);
                        Add(CITY_ELF1);
                        if (OnStage(BUBBLE_POST)){
                            Add(BUBBLE_POST);
                        };
                        Add(CITY_CA_OVL);
                    };
                };
                if ((((CityAniFrame == 3)) and ((int((Math.random() * 2)) == 0)))){
                    if (getChildByName(actor[CITY_ORK1].name)){
                        Remove(CITY_ORK1);
                        Add(CITY_ORK2);
                        DefineBunch(CITY_ORK, CITY_ORK2);
                        Add(CITY_CA_OVL);
                        if (OnStage(LBL_ERROR)){
                            Add(LBL_ERROR);
                        };
                    } else {
                        if (getChildByName(actor[CITY_ORK2].name)){
                            Remove(CITY_ORK2);
                            Add(CITY_ORK1);
                            DefineBunch(CITY_ORK, CITY_ORK1);
                            Add(CITY_CA_OVL);
                            if (OnStage(LBL_ERROR)){
                                Add(LBL_ERROR);
                            };
                        };
                    };
                };
                if ((((((CityAniFrame == 2)) and ((int((Math.random() * 2)) == 0)))) and (getChildByName(actor[CITY_ZWERG1].name)))){
                    Remove(CITY_ZWERG1);
                    Add(CITY_ZWERG2);
                    DefineBunch(CITY_ZWERG, CITY_ZWERG2);
                    Add(CITY_CA_OVL);
                } else {
                    if ((((CityAniFrame == 3)) and (OnStage(CITY_ZWERG2)))){
                        Remove(CITY_ZWERG2);
                        Add(CITY_ZWERG1);
                        DefineBunch(CITY_ZWERG, CITY_ZWERG1);
                        Add(CITY_CA_OVL);
                    };
                };
                if (SandwichPause > 0){
                    SandwichPause--;
                } else {
                    if (((((CityAniFrame % 2) == 0)) and (getChildByName(actor[CITY_SANDWICH1].name)))){
                        Remove(CITY_SANDWICH1);
                        Add(CITY_SANDWICH2);
                        if (OnStage(LBL_ERROR)){
                            Add(LBL_ERROR);
                        };
                    };
                    if (((!(((CityAniFrame % 2) == 0))) and (getChildByName(actor[CITY_SANDWICH2].name)))){
                        Remove(CITY_SANDWICH2);
                        Add(CITY_SANDWICH1);
                        if (OnStage(LBL_ERROR)){
                            Add(LBL_ERROR);
                        };
                        if (int((Math.random() * 8)) == 0){
                            SandwichPause = 4;
                        };
                    };
                };
                if (ZwergFussTapp > 0){
                    if (((OnStage(CITY_MAGIER1)) or (OnStage(CITY_MAGIER2)))){
                        if ((ZwergFussTapp % 2) == 0){
                            Remove(CITY_MAGIER1);
                            Add(CITY_MAGIER2);
                            if (OnStage(BUBBLE_WACHE)){
                                Add(BUBBLE_WACHE);
                            };
                            if (OnStage(LBL_ERROR)){
                                Add(LBL_ERROR);
                            };
                            Add(CITY_CA_OVL);
                        } else {
                            Remove(CITY_MAGIER2);
                            Add(CITY_MAGIER1);
                            if (OnStage(BUBBLE_WACHE)){
                                Add(BUBBLE_WACHE);
                            };
                            if (OnStage(LBL_ERROR)){
                                Add(LBL_ERROR);
                            };
                            Add(CITY_CA_OVL);
                        };
                        ZwergFussTapp--;
                    };
                } else {
                    if (((OnStage(CITY_MAGIER1)) and ((int((Math.random() * 15)) == 0)))){
                        ZwergFussTapp = 6;
                    };
                };
            };
            if (CityAniFrame >= 10){
                CityAniFrame = 0;
            };
            if (OnStage(CA_SCR_ARBEITEN_BLOCKCITY)){
                if (OnStage(LBL_SCR_ARBEITEN_TIME)){
                    Add(SCREEN_ARBEITEN_WAIT);
                } else {
                    if (OnStage(SCR_ARBEITEN_OK)){
                        Add(SCREEN_ARBEITEN);
                    } else {
                        Add(SCREEN_ARBEITEN_SUCCESS);
                    };
                };
            };
            if (OnStage(CA_SCR_INVITE_BLOCKCITY)){
                Add(SCREEN_INVITE);
            };
        };
        WacheOver = function ():void{
            SchildTimer.addEventListener(TimerEvent.TIMER, SchildFrame);
            SchildTimer.start();
            SchildDir = 1;
        };
        WacheOut = function ():void{
            SchildTimer.addEventListener(TimerEvent.TIMER, SchildFrame);
            SchildTimer.start();
            SchildDir = -1;
        };
        SchildFrame = function (evt:Event):void{
            if (((((!(((OnStage(CITY_WACHE_DAY)) or (OnStage(CITY_WACHE_NIGHT))))) or (OnStage(CA_SCR_ARBEITEN_BLOCKCITY)))) or (OnStage(CA_SCR_INVITE_BLOCKCITY)))){
                SchildTimer.stop();
                SchildTimer.removeEventListener(TimerEvent.TIMER, SchildFrame);
                return;
            };
            Remove(CITY_SCHILD1, CITY_SCHILD2, CITY_SCHILD3, CITY_SCHILD4);
            if (iFrame >= 0){
                Add((CITY_SCHILD1 + iFrame));
            };
            Add(CA_CITY_WACHE);
            if ((((iFrame < 0)) and ((SchildDir < 0)))){
                iFrame = -1;
                SchildTimer.stop();
                SchildTimer.removeEventListener(TimerEvent.TIMER, SchildFrame);
                return;
            };
            if ((((iFrame >= 3)) and ((SchildDir > 0)))){
                iFrame = 3;
                SchildTimer.stop();
                SchildTimer.removeEventListener(TimerEvent.TIMER, SchildFrame);
                return;
            };
            iFrame = (iFrame + SchildDir);
        };
        EselOver = function ():void{
            Remove(CITY_ESEL1);
        };
        EselOut = function ():void{
            if (((OnStage(STALL_BG_GUT)) or (OnStage(STALL_BG_BOESE)))){
                return;
            };
            Add(CITY_ESEL1);
            Add(CITY_CA_OVL);
        };
        ShowDealerEyes = function ():void{
            if (((((OnStage(SCR_CITY_BACKG_NIGHT)) or (OnStage(SCR_CITY_BACKG_DAWN)))) or (OnStage(SCR_CITY_BACKG_DAY)))){
                Add(CITY_DEALER_ANI5);
                Add(CA_CITY_DEALER);
                if (OnStage(CA_SCR_ARBEITEN_BLOCKCITY)){
                    if (OnStage(LBL_SCR_ARBEITEN_TIME)){
                        Add(SCREEN_ARBEITEN_WAIT);
                    } else {
                        if (OnStage(SCR_ARBEITEN_OK)){
                            Add(SCREEN_ARBEITEN);
                        } else {
                            Add(SCREEN_ARBEITEN_SUCCESS);
                        };
                    };
                };
                if (OnStage(CA_SCR_INVITE_BLOCKCITY)){
                    Add(SCREEN_INVITE);
                };
            };
        };
        HideDealerEyes = function ():void{
            DealerStepTimer.stop();
            DealerStepTimer.removeEventListener(TimerEvent.TIMER, DealerStep);
        };
        var DealerAni:* = function (evt:Event):void{
            if (((((OnStage(SCR_CITY_BACKG_NIGHT)) or (OnStage(SCR_CITY_BACKG_DAWN)))) or (OnStage(SCR_CITY_BACKG_DAY)))){
                if (!getChildByName(actor[CITY_DEALER].name)){
                    DealerStepTimer.addEventListener(TimerEvent.TIMER, DealerStep);
                    if (int((Math.random() * 5)) == 0){
                        DealerAniStep = 5;
                    } else {
                        DealerAniStep = 1;
                    };
                    DealerStepTimer.start();
                };
            } else {
                DealerStepTimer.stop();
                DealerStepTimer.removeEventListener(TimerEvent.TIMER, DealerStep);
            };
        };
        DealerStep = function (evt:Event):void{
            if (((((OnStage(SCR_CITY_BACKG_NIGHT)) or (OnStage(SCR_CITY_BACKG_DAWN)))) or (OnStage(SCR_CITY_BACKG_DAY)))){
                switch (DealerAniStep){
                    case 1:
                        Add(CITY_DEALER_ANI2);
                        break;
                    case 2:
                        Add(CITY_DEALER_ANI1);
                        break;
                    case 3:
                        Add(CITY_DEALER_ANI2);
                        break;
                    case 4:
                        Add(CITY_DEALER_ANI5);
                        DealerAniStep = 0;
                        break;
                    case 5:
                    case 6:
                    case 7:
                        Add(CITY_DEALER_ANI3);
                        break;
                    case 8:
                        Add(CITY_DEALER_ANI5);
                        break;
                    case 9:
                    case 10:
                    case 11:
                        Add(CITY_DEALER_ANI4);
                        break;
                    case 12:
                        Add(CITY_DEALER_ANI5);
                        DealerAniStep = 0;
                        break;
                };
                Add(CA_CITY_DEALER);
                if (OnStage(CA_SCR_ARBEITEN_BLOCKCITY)){
                    if (OnStage(LBL_SCR_ARBEITEN_TIME)){
                        Add(SCREEN_ARBEITEN_WAIT);
                    } else {
                        if (OnStage(SCR_ARBEITEN_OK)){
                            Add(SCREEN_ARBEITEN);
                        } else {
                            Add(SCREEN_ARBEITEN_SUCCESS);
                        };
                    };
                };
                if (OnStage(CA_SCR_INVITE_BLOCKCITY)){
                    Add(SCREEN_INVITE);
                };
                if (DealerAniStep == 0){
                    DealerStepTimer.stop();
                    DealerStepTimer.removeEventListener(TimerEvent.TIMER, DealerStep);
                    return;
                };
                DealerAniStep++;
            };
        };
        ShowArenaOno = function ():void{
            OnoTimer = new Timer(2000);
            OnoTimer.addEventListener(TimerEvent.TIMER, PopupArenaOno);
            OnoTimer.start();
            PopupArenaOno();
        };
        HideArenaOno = function ():void{
            if (OnoTimer){
                OnoTimer.removeEventListener(TimerEvent.TIMER, PopupArenaOno);
            };
            OnoPopupTimer.removeEventListener(TimerEvent.TIMER, StepArenaOno);
            Remove(ThisOno);
        };
        PopupArenaOno = function (evt:Event=undefined):void{
            while (ThisOno == LastOno) {
                ThisOno = (CITY_ARENA_ONO1 + int((Math.random() * 4)));
            };
            LastOno = ThisOno;
            OnoPopupTimer.addEventListener(TimerEvent.TIMER, StepArenaOno);
            OnoPopupTimer.start();
            Add(ThisOno);
            Add(CA_CITY_ARENA);
            actor[ThisOno].alpha = 0;
        };
        StepArenaOno = function (evt:Event):void{
            if (PopupDir){
                actor[ThisOno].alpha = (actor[ThisOno].alpha - 0.1);
                if (actor[ThisOno].alpha <= 0){
                    PopupDir = false;
                    Remove(ThisOno);
                    OnoPopupTimer.removeEventListener(TimerEvent.TIMER, StepArenaOno);
                };
            } else {
                actor[ThisOno].alpha = (actor[ThisOno].alpha + 0.1);
                if (actor[ThisOno].alpha >= 1){
                    PopupDir = true;
                };
            };
        };
        InterfaceButtonHover = function (evt:MouseEvent):void{
            if (((((((((OnStage(SCR_CITY_BACKG_NIGHT)) or (OnStage(SCR_CITY_BACKG_DAWN)))) or (OnStage(SCR_CITY_BACKG_DAY)))) and (!(OnStage(CA_SCR_ARBEITEN_BLOCKCITY))))) and (!(OnStage(CA_SCR_INVITE_BLOCKCITY))))){
                switch (GetActorID(evt.target)){
                    case IF_SCHMIEDE:
                        Add(CITY_SHAKES);
                        break;
                    case IF_ZAUBERLADEN:
                        Add(CITY_ZAUBERLADEN);
                        break;
                    case IF_EHRENHALLE:
                        Add(CITY_RUHMESHALLE);
                        Add(CITY_CA_OVL);
                        break;
                    case IF_ARENA:
                        Add(CITY_ARENA);
                        Add(CITY_CA_OVL);
                        ShowArenaOno();
                        break;
                    case IF_PILZDEALER:
                        Add(CITY_DEALER_ANI5);
                        Add(CITY_DEALER);
                        HideDealerEyes();
                        break;
                    case IF_STALL:
                        Add(CITY_ESEL2);
                        Remove(CITY_ESEL1);
                        Add(CITY_CA_OVL);
                        break;
                    case IF_TAVERNE:
                        Add(CITY_TAVERNE);
                        Add(CITY_ZWERG);
                        Add(CITY_CA_OVL);
                        break;
                    case IF_POST:
                        Add(CITY_POST);
                        Add(CITY_ORK);
                        Add(CITY_CA_OVL);
                        break;
                    case IF_ARBEITEN:
                        WacheOver();
                        break;
                };
                if (OnStage(CA_SCR_ARBEITEN_BLOCKCITY)){
                    Add(SCREEN_ARBEITEN);
                };
                if (OnStage(CA_SCR_INVITE_BLOCKCITY)){
                    Add(SCREEN_INVITE);
                };
            };
        };
        ExitScreen = function (evt:Event=undefined){
            if (OnStage(TOILET)){
                SendAction(ACT_SCREEN_TAVERNE);
            } else {
                if (OnStage(WITCH)){
                    SendAction(ACT_SCREEN_ZAUBERLADEN);
                } else {
                    if (((OnStage(TOWER_SCROLLAREA)) or (OnStage(LBL_MAINQUEST_TITLE)))){
                        SendAction(ACT_SCREEN_WELTKARTE);
                    } else {
                        ShowCityScreen();
                    };
                };
            };
        };
        HalleSuchClick = function (evt:Event):void{
            if (actor[INP_HALLE_GOTO].getChildAt(1).text == txt[TXT_HALLE_SUCHFELD_TEXT]){
                actor[INP_HALLE_GOTO].getChildAt(1).text = "";
            };
        };
        RuhmesHalleScroll = function (evt:Event):void{
            var evt:* = evt;
            if ((evt is KeyboardEvent)){
                if (((((!((KeyboardEvent(evt).keyCode == 13))) and (!((KeyboardEvent(evt).keyCode == 10))))) and (!((KeyboardEvent(evt).keyCode == 16777230))))){
                    return;
                };
            };
            switch (GetActorID(evt.target)){
                case HALL_GOTO_SPIELER:
                    ruhmesHalleSuchName = true;
                    ruhmesHalleSuchString = actor[INP_NAME].getChildAt(1).text;
                    SendAction(ACT_SCREEN_EHRENHALLE, actor[INP_NAME].getChildAt(1).text, -1);
                    break;
                case HALL_GOTO_GILDEN:
                    if (Savegame[SG_GUILD_INDEX] > 0){
                        ruhmesHalleSuchName = true;
                        ruhmesHalleSuchString = Gilde;
                        SendAction(ACT_SCREEN_GILDENHALLE, "", Savegame[SG_GUILD_INDEX], 0);
                    } else {
                        ruhmesHalleSuchName = false;
                        ruhmesHalleSuchString = "";
                        SendAction(ACT_SCREEN_GILDENHALLE, "", 0, 1);
                    };
                    break;
                case HALLE_UP:
                    if (GuildHallMode){
                        SendAction(ACT_SCREEN_GILDENHALLE, "", "0", (Math.abs(int(actor[HALL_LIST].getChildAt(((6 * 7) + 5)).text)) - 15));
                    } else {
                        SendAction(ACT_SCREEN_EHRENHALLE, "", (Math.abs(int(actor[HALL_LIST].getChildAt(((6 * 7) + 5)).text)) - 15));
                    };
                    break;
                case HALLE_DOWN:
                    if (GuildHallMode){
                        SendAction(ACT_SCREEN_GILDENHALLE, "", "0", (Math.abs(int(actor[HALL_LIST].getChildAt(((6 * 7) + 5)).text)) + 15));
                    } else {
                        SendAction(ACT_SCREEN_EHRENHALLE, "", (Math.abs(int(actor[HALL_LIST].getChildAt(((6 * 7) + 5)).text)) + 15));
                    };
                    break;
                default:
                    ruhmesHalleSuchString = actor[INP_HALLE_GOTO].getChildAt(1).text;
                    if ((((((((ruhmesHalleSuchString.toLowerCase() == "/s [p: 332]")) or ((ruhmesHalleSuchString.toLowerCase() == "/s[p: 332]")))) or ((ruhmesHalleSuchString.toLowerCase() == "/s [p:332]")))) or ((ruhmesHalleSuchString.toLowerCase() == "/s[p:332]")))){
                        Play(SND_MOUNT_1);
                        SendAction(ACT_SEND_CHAT, EncodeChat("Moo!"), lastChatIndex);
                        if (textDir == "right"){
                            var _local3 = actor[IF_GOLD];
                            with (_local3) {
                                x = IF_LBL_GOLDPILZE_X;
                            };
                            _local3 = actor[LBL_IF_GOLD];
                            with (_local3) {
                                text = "0";
                                x = ((IF_LBL_GOLDPILZE_X - textWidth) - 10);
                            };
                            _local3 = actor[IF_SILBER];
                            with (_local3) {
                                x = ((actor[LBL_IF_GOLD].x - width) - 10);
                            };
                            _local3 = actor[LBL_IF_SILBER];
                            with (_local3) {
                                text = "00";
                                x = ((actor[IF_SILBER].x - textWidth) - 10);
                            };
                            _local3 = actor[LBL_IF_PILZE];
                            with (_local3) {
                                text = "0";
                                x = ((IF_LBL_GOLDPILZE_X - textWidth) - 10);
                            };
                            EnablePopup(LBL_IF_PILZE);
                        } else {
                            _local3 = actor[LBL_IF_SILBER];
                            with (_local3) {
                                text = "00";
                                x = ((IF_LBL_GOLDPILZE_X - textWidth) - 10);
                            };
                            _local3 = actor[IF_GOLD];
                            with (_local3) {
                                x = ((actor[LBL_IF_SILBER].x - 24) - 10);
                            };
                            _local3 = actor[LBL_IF_GOLD];
                            with (_local3) {
                                text = "0";
                                x = ((actor[IF_GOLD].x - textWidth) - 10);
                            };
                            _local3 = actor[LBL_IF_PILZE];
                            with (_local3) {
                                text = "0";
                                x = ((IF_LBL_GOLDPILZE_X - textWidth) - 10);
                            };
                            EnablePopup(LBL_IF_PILZE);
                        };
                    };
                    if (int(actor[INP_HALLE_GOTO].getChildAt(1).text) > 0){
                        ruhmesHalleSuchName = false;
                        if (GuildHallMode){
                            SendAction(ACT_SCREEN_GILDENHALLE, "", "0", int(actor[INP_HALLE_GOTO].getChildAt(1).text));
                        } else {
                            SendAction(ACT_SCREEN_EHRENHALLE, "", int(actor[INP_HALLE_GOTO].getChildAt(1).text));
                        };
                    } else {
                        ruhmesHalleSuchName = true;
                        if (GuildHallMode){
                            SendAction(ACT_SCREEN_GILDENHALLE, actor[INP_HALLE_GOTO].getChildAt(1).text, "0", "0");
                        } else {
                            SendAction(ACT_SCREEN_EHRENHALLE, actor[INP_HALLE_GOTO].getChildAt(1).text, -1);
                        };
                    };
            };
        };
        RemoveInviteWindow = function (evt:Event=undefined){
            RemoveAll();
            ShowCityScreen();
        };
        SendPlayerInvite = function (evt:Event=undefined){
            if ((evt is KeyboardEvent)){
                if (((((!((KeyboardEvent(evt).keyCode == 13))) and (!((KeyboardEvent(evt).keyCode == 10))))) and (!((KeyboardEvent(evt).keyCode == 16777230))))){
                    return;
                };
            };
            if (((!((actor[INP_CHAR_INVITE].getChildAt(1).text == ""))) and (!((actor[INP_CHAR_INVITE2].getChildAt(1).text == ""))))){
                SendAction(ACT_INVITE_PLAYER, actor[INP_CHAR_INVITE].getChildAt(1).text.split(";").join("AAASEMIAAA"), actor[INP_CHAR_INVITE2].getChildAt(1).text.split(";").join("AAASEMIAAA"));
            } else {
                ErrorMessage(txt[TXT_ERROR_INPUT_REQUIRED]);
            };
        };
        var GotoPlayerGilde:* = function (evt:MouseEvent){
            if (OnStage(TOWER_SCROLLAREA)){
                return;
            };
            if (SelectedGuild != ""){
                if (SelectedGuild == Gilde){
                    SendAction(ACT_SCREEN_GILDEN);
                } else {
                    SendAction(ACT_SCREEN_FREMDGILDE, SelectedGuild);
                };
            };
        };
        PrevPlayer = function (evt:MouseEvent=undefined){
            if (arrowHallMode){
                selName = lastHallMembers[indexInHall];
                SendAction(ACT_REQUEST_CHAR, lastHallMembers[indexInHall]);
            } else {
                selName = lastGuildMembers[indexInGuild];
                SendAction(ACT_REQUEST_CHAR, lastGuildMembers[indexInGuild]);
            };
        };
        NextPlayer = function (evt:MouseEvent=undefined){
            if (arrowHallMode){
                selName = lastHallMembers[(indexInHall + 2)];
                SendAction(ACT_REQUEST_CHAR, lastHallMembers[(indexInHall + 2)]);
            } else {
                selName = lastGuildMembers[(indexInGuild + 2)];
                SendAction(ACT_REQUEST_CHAR, lastGuildMembers[(indexInGuild + 2)]);
            };
        };
        var JumpToPlayerHall:* = function (evt:Event=undefined){
            ruhmesHalleSuchString = lastPlayer;
            ruhmesHalleSuchName = true;
            SendAction(ACT_SCREEN_EHRENHALLE, ruhmesHalleSuchString, -1);
        };
        var EnterPlayerDesc:* = function (evt:FocusEvent){
            var evt:* = evt;
            var _local3 = actor[INP_CHARDESC].getChildAt(0);
            with (_local3) {
                if (type == TextFieldType.INPUT){
                    if (text == txt[TXT_ENTERDESC]){
                        text = "";
                    };
                };
            };
        };
        var LeavePlayerDesc:* = function (evt:FocusEvent){
            var evt:* = evt;
            var _local3 = actor[INP_CHARDESC].getChildAt(0);
            with (_local3) {
                if (type == TextFieldType.INPUT){
                    if (text != PlayerDesc){
                        SendAction(ACT_SET_PLAYER_DESC, RemoveIllegalChars(SemiStrip(text)));
                    };
                    if (text == ""){
                        text = txt[TXT_ENTERDESC];
                    };
                };
            };
        };
        RequestAlbum = function (evt:Event=undefined){
            SendAction(ACT_ALBUM);
            ShowScreenAlbum();
        };
        PlayerGuildInviteCancel = function (evt:Event=undefined){
            if (!OnStage(PLAYER_GUILD_INVITE)){
                return;
            };
            Remove(GILDE_DIALOG_INVITE);
        };
        PlayerGuildInviteOK = function (evt:Event=undefined){
            if (!OnStage(PLAYER_GUILD_INVITE)){
                return;
            };
            SendAction(ACT_GUILD_INVITE, actor[INP_NAME].getChildAt(1).text, Gilde, actor[INP_GILDE_DIALOG_INVITE].getChildAt(1).text, MD5(actor[INP_LOGIN_PASSWORD].getChildAt(1).text), "");
        };
        PlayerGuildInvite = function (evt:Event=undefined){
            var evt:* = evt;
            Add(GILDE_DIALOG_INVITE);
            actor[INP_GILDE_DIALOG_INVITE].getChildAt(1).text = lastPlayer;
            var _local3 = actor[LBL_WINDOW_TITLE];
            with (_local3) {
                text = txt[TXT_GILDE_INVITE_TITLE];
                x = ((IF_WIN_X + IF_WIN_WELCOME_X) - int((textWidth / 2)));
            };
        };
        var RequestStableScreen:* = function (evt:Event){
            SendAction(ACT_SCREEN_STALL);
        };
        ZurGilde = function (evt:Event=undefined){
            SendAction(ACT_SCREEN_GILDEN);
        };
        PlayerSendMessage = function (){
            ShowPostScreen();
        };
        PlayerAttack = function (){
            if (WaitingFor(Savegame[SG_PVP_REROLL_TIME])){
                var _local2 = actor[LBL_IF_PILZE];
                with (_local2) {
                    if (int(Savegame[SG_MUSH]) > 0){
                        text = String((int(Savegame[SG_MUSH]) - 1));
                    };
                    x = ((IF_LBL_GOLDPILZE_X - textWidth) - 10);
                };
                EnablePopup(LBL_IF_PILZE);
            };
            SendAction(ACT_START_FIGHT, selName);
            if (lastAttacked.indexOf(selName.toLowerCase()) == -1){
                lastAttacked.push(selName.toLowerCase());
            };
        };
        PlayerInvite = function (){
            var ShowInviteScreen:* = null;
            ShowInviteScreen = function (){
                RemoveAll();
                ShowCityScreen();
                Hide(INVITE_SUCCESS);
                Show(INVITE_INPUTDIALOGUE);
                actor[INP_CHAR_INVITE].getChildAt(1).text = "";
                stage.focus = actor[INP_CHAR_INVITE].getChildAt(1);
                actor[INP_CHAR_INVITE2].getChildAt(1).text = "";
                actor[LBL_WINDOW_TITLE].text = txt[TXT_INVITETITLE];
                actor[LBL_WINDOW_TITLE].x = ((IF_WIN_X + IF_WIN_WELCOME_X) - int((actor[LBL_WINDOW_TITLE].textWidth / 2)));
                Add(SCREEN_INVITE);
            };
            Load(SCREEN_INVITE);
            WhenLoaded(ShowInviteScreen);
        };
        var BoostBtnDownHandler:* = function (evt:Event){
            var ClickCount:* = 0;
            var evt:* = evt;
            var DoPushBoostBtn:* = function (timerevt:Event){
                var timerevt:* = timerevt;
                if (DestroyBoostBtnTimer){
                    DestroyBoostBtnTimer = false;
                    var _local3 = BoostBtnRepeatTimer;
                    with (_local3) {
                        stop();
                        delay = 1000;
                        removeEventListener(TimerEvent.TIMER, DoPushBoostBtn);
                    };
                } else {
                    ClickCount++;
                    switch (ClickCount){
                        case 1:
                            BoostBtnRepeatTimer.delay = 500;
                            break;
                        case 3:
                            BoostBtnRepeatTimer.delay = 250;
                            break;
                    };
                    if (BoostAttribute(evt)){
                        Play(SND_CLICK);
                    };
                };
            };
            ClickCount = 0;
            if (BoostBtnRepeatTimer.running){
                return;
            };
            DestroyBoostBtnTimer = false;
            var _local3 = BoostBtnRepeatTimer;
            with (_local3) {
                delay = 1000;
                addEventListener(TimerEvent.TIMER, DoPushBoostBtn);
                start();
            };
        };
        var BoostBtnUpHandler:* = function (evt:Event){
            if (BoostBtnRepeatTimer.running){
                DestroyBoostBtnTimer = true;
            };
        };
        BoostAttribute = function (evt:Event):Boolean{
            if (canBoost[(GetActorID(evt.target) - SCR_CHAR_STEIGERN1)]){
                SendAction(ACT_BUY_ATTRIB, ((GetActorID(evt.target) - SCR_CHAR_STEIGERN1) + 1));
            };
            return (canBoost[(GetActorID(evt.target) - SCR_CHAR_STEIGERN1)]);
        };
        BoostBtnTimerFunction = function (evt:TimerEvent){
            if (BoostBtnChange > 1){
                BoostBtnChange--;
                return;
            };
            if (BoostBtnChange == 1){
                BoostBtnChange = 0;
                if (inBoostBtn){
                    if (lightMode){
                        SetAlpha(CHAR_PREISE, 1);
                        SetAlpha(CHAR_SECONDPROP, 0);
                    } else {
                        FadeIn(CHAR_PREISE, 20, 0.2);
                        FadeOut(CHAR_SECONDPROP, 20, 0.2);
                    };
                } else {
                    if (OnStage(LBL_SCR_CHAR_PREIS1)){
                        if (lightMode){
                            Add(CHAR_SECONDPROP);
                            if (OnStage(POPUP_INFO)){
                                Add(POPUP_INFO);
                            };
                            SetAlpha(CHAR_PREISE, 0);
                            SetAlpha(CHAR_SECONDPROP, 1);
                        } else {
                            FadeOut(CHAR_PREISE, 20, 0.2);
                            Add(CHAR_SECONDPROP);
                            if (OnStage(POPUP_INFO)){
                                Add(POPUP_INFO);
                            };
                            FadeIn(CHAR_SECONDPROP, 20, 0.2);
                        };
                    };
                };
            };
        };
        var BoostBtnOver:* = function (evt:Event){
            if (!inBoostBtn){
                BoostBtnChange = 6;
            };
            inBoostBtn = true;
        };
        var BoostBtnOut:* = function (evt:Event){
            if (inBoostBtn){
                BoostBtnChange = 6;
            };
            inBoostBtn = false;
        };
        InventoryItemMouseDown = function (evt:MouseEvent){
            if (((((OnStage(SCR_FIDGET_BG)) or (OnStage(SCR_SHAKES_BG)))) or (OnStage(TOWER_SCROLLAREA)))){
                Add(CA_SELL_ITEM);
            };
        };
        BackpackItemMouseDown = function (evt:MouseEvent){
            Add(CA_USE_ITEM);
        };
        InventoryItemMouseUp = function (evt:MouseEvent){
            Remove(CA_SELL_ITEM);
            Remove(CA_USE_ITEM);
        };
        DropHandler = function (actorID:int, targetID:int):Boolean{
            var towerMode:Boolean;
            var sourceSlot:int;
            var targetSlot:int;
            towerMode = OnStage(PREV_COPYCAT);
            trc("dragdrop", actorID, targetID, towerMode);
            sourceSlot = 0;
            targetSlot = 0;
            if (targetID == CA_SELL_ITEM){
                trc("sell item");
                if ((((actorID >= CHAR_SLOT_1)) and ((actorID <= CHAR_SLOT_15)))){
                    trc("selling can be done");
                    sourceSlot = ((actorID - CHAR_SLOT_1) + 1);
                    if (towerMode){
                        trc("impossible here");
                        return (false);
                    };
                    SendAction(ACT_INVENTORY_CHANGE, (((sourceSlot <= 10)) ? 1 : (((sourceSlot <= 15)) ? 2 : (((sourceSlot <= 21)) ? 4 : 3))), (sourceSlot - (((sourceSlot <= 10)) ? 0 : (((sourceSlot <= 15)) ? 10 : (((sourceSlot <= 21)) ? 15 : 21)))), 0, 0);
                    return (true);
                };
                trc("wrong source");
            } else {
                if (targetID == CA_USE_ITEM){
                    trc("use item");
                    if ((((actorID >= CHAR_SLOT_10)) and ((actorID <= CHAR_SLOT_SHAKES_6)))){
                        trc("using can be done");
                        sourceSlot = ((actorID - CHAR_SLOT_1) + 1);
                        if (towerMode){
                            SendAction(ACT_MOVE_COPYCAT_ITEM, 2, (sourceSlot - 10), (copyCatSel + 101), -1);
                        } else {
                            SendAction(ACT_INVENTORY_CHANGE, (((sourceSlot <= 10)) ? 1 : (((sourceSlot <= 15)) ? 2 : (((sourceSlot <= 21)) ? 4 : 3))), (sourceSlot - (((sourceSlot <= 10)) ? 0 : (((sourceSlot <= 15)) ? 10 : (((sourceSlot <= 21)) ? 15 : 21)))), 1, -1);
                        };
                        return (true);
                    };
                    trc("wrong source");
                } else {
                    if (targetID == CA_CHALDRON){
                        if ((((actorID >= CHAR_SLOT_1)) and ((actorID <= CHAR_SLOT_15)))){
                            trc("donating to witch can be done");
                            sourceSlot = ((actorID - CHAR_SLOT_1) + 1);
                            if (towerMode){
                                trc("impossible here");
                                return (false);
                            };
                            SendAction(ACT_WITCH_DONATE, (((sourceSlot <= 10)) ? 1 : (((sourceSlot <= 15)) ? 2 : (((sourceSlot <= 21)) ? 4 : 3))), (sourceSlot - (((sourceSlot <= 10)) ? 0 : (((sourceSlot <= 15)) ? 10 : (((sourceSlot <= 21)) ? 15 : 21)))));
                            return (true);
                        };
                        trc("wrong source");
                    } else {
                        trc("moving items around");
                        if ((((((actorID >= CHAR_SLOT_1)) and ((actorID <= CHAR_SLOT_SHAKES_6)))) and (!((targetID == CA_TOILET_BOWL))))){
                            trc("source is ok");
                            sourceSlot = ((actorID - CHAR_SLOT_1) + 1);
                            if ((((targetID >= CHAR_SLOT_1)) and ((targetID <= CHAR_SLOT_SHAKES_6)))){
                                trc("target is ok");
                                targetSlot = ((targetID - CHAR_SLOT_1) + 1);
                                if (towerMode){
                                    if (towerSG[(((((sourceSlot <= 10)) ? ((TSG_COPYCATS + (copyCatSel * COPYCAT)) + CPC_ITEMS) : TSG_LOOT_SACK) + ((((sourceSlot <= 10)) ? (sourceSlot - 1) : (sourceSlot - 11)) * SG_ITM_SIZE)) + SG_ITM_TYP)] > 0){
                                        trc("do it");
                                        SendAction(ACT_MOVE_COPYCAT_ITEM, (((sourceSlot <= 10)) ? (copyCatSel + 101) : 2), (((sourceSlot <= 10)) ? sourceSlot : (sourceSlot - 10)), (((targetSlot <= 10)) ? (copyCatSel + 101) : 2), (((targetSlot <= 10)) ? targetSlot : (targetSlot - 10)));
                                        return (true);
                                    };
                                    trc("source slot empty");
                                } else {
                                    if (Savegame[(((((sourceSlot <= 15)) ? SG_INVENTORY_OFFS : (((sourceSlot <= 21)) ? SG_FIDGET_ITEM1 : SG_SHAKES_ITEM1)) + ((sourceSlot - (((sourceSlot <= 15)) ? 1 : (((sourceSlot <= 21)) ? 16 : 22))) * SG_ITM_SIZE)) + SG_ITM_TYP)] > 0){
                                        trc("do it");
                                        SendAction(ACT_INVENTORY_CHANGE, (((sourceSlot <= 10)) ? 1 : (((sourceSlot <= 15)) ? 2 : (((sourceSlot <= 21)) ? 4 : 3))), (sourceSlot - (((sourceSlot <= 10)) ? 0 : (((sourceSlot <= 15)) ? 10 : (((sourceSlot <= 21)) ? 15 : 21)))), (((targetSlot <= 10)) ? 1 : (((targetSlot <= 15)) ? 2 : (((targetSlot <= 21)) ? 4 : 3))), (targetSlot - (((targetSlot <= 10)) ? 0 : (((targetSlot <= 15)) ? 10 : (((targetSlot <= 21)) ? 15 : 21)))));
                                        return (true);
                                    };
                                    trc("source slot empty");
                                };
                            } else {
                                trc("target wrong");
                            };
                        } else {
                            if (targetID == CA_TOILET_BOWL){
                                trc("drop in toilet");
                                if ((((actorID >= CHAR_SLOT_10)) and ((actorID <= CHAR_SLOT_SHAKES_6)))){
                                    sourceSlot = ((actorID - CHAR_SLOT_1) + 1);
                                    SendAction(ACT_INVENTORY_CHANGE, (((sourceSlot <= 10)) ? 1 : (((sourceSlot <= 15)) ? 2 : (((sourceSlot <= 21)) ? 4 : 3))), (sourceSlot - (((sourceSlot <= 10)) ? 0 : (((sourceSlot <= 15)) ? 10 : (((sourceSlot <= 21)) ? 15 : 21)))), 10, 0);
                                    Show(TOILET_DROP);
                                    return (true);
                                };
                            } else {
                                trc("source wrong");
                            };
                        };
                    };
                };
            };
            return (false);
        };
        PotionSingleClick = function (evt:Event=undefined){
        };
        PotionDoubleClick = function (evt:Event=undefined){
            if (!OnStage(CHAR_MESSAGE)){
                SendAction(ACT_KILL_POTION, ((GetActorID(evt.target) - CHAR_POTION) + 1));
            };
        };
        var OpenFriendLink:* = function (evt:Event){
            navigateToURL(new URLRequest(((("mailto:?subject=" + txt[TXT_FRIEND_SUBJECT].split(" ").join("%20").split("&").join("%26")) + "&body=") + FriendLink)));
        };
        var TowerScrollSingle:* = function (evt:Event){
        };
        towerBoostPriceFadeout = function (evt:TimerEvent){
            FadeOut(TOWER_BOOSTPRICE);
        };
        towerLevelLabelMoveFn = function (evt:TimerEvent){
            if (Math.abs((actor[LBL_TOWER_EXPLABEL].x - towerLevelLabelPos)) >= 1){
                actor[LBL_TOWER_EXPLABEL].x = ((actor[LBL_TOWER_EXPLABEL].x + towerLevelLabelPos) / 2);
            } else {
                actor[LBL_TOWER_EXPLABEL].x = towerLevelLabelPos;
                towerLevelLabelTimer.stop();
            };
        };
        ShowTowerBoostPrices = function (evt:MouseEvent){
            var i:int;
            towerBoostPriceFadeoutTimer.stop();
            FadeIn(TOWER_BOOSTPRICE);
            towerLevelLabelPos = (SCR_CHAR_CHARX + 3);
            towerLevelLabelTimer.start();
        };
        HideTowerBoostPrices = function (evt:MouseEvent){
            var i:int;
            towerBoostPriceFadeoutTimer.start();
            towerLevelLabelPos = ((SCR_CHAR_CHARX + 127) - int((actor[LBL_TOWER_EXPLABEL].textWidth / 2)));
            towerLevelLabelTimer.start();
        };
        BoostCopycat = function (){
            SendAction(ACT_COPYCAT_BOOST, (copyCatSel + 1), ((towerSG[((TSG_COPYCATS + (COPYCAT * copyCatSel)) + CPC_LEVEL)] * 1) + 1));
        };
        ShopAniFrame = function (evt:TimerEvent){
            var pv:Boolean;
            var AffeStep:int;
            var FidgetAugenZu:Boolean;
            var ShakesAugenZu:int;
            var WasPassiert:Boolean;
            pv = OnStage(POPUP_INFO);
            WasPassiert = false;
            if (dragDropActive){
                PlayerIdle = false;
                WasIdleCount = 0;
                ShopIdle = 0;
                Remove(FIDGET_DAY);
                Remove(FIDGET_IDLE);
                SaleRecoverTime = 10;
                return;
            };
            if (ShopIdle == 400){
                PlayerIdle = true;
                WasPassiert = true;
                if (OnStage(SCR_SHAKES_BG)){
                    if (WasIdleCount > 2){
                        ShakesIdlePhase = 4;
                        ShakesIdleStep = 0;
                    } else {
                        ShakesIdleStep++;
                        switch (int(ShakesIdleStep)){
                            case 1:
                            case 5:
                            case 9:
                            case 12:
                            case 15:
                            case 19:
                            case 23:
                            case 27:
                            case 33:
                                ShakesIdlePhase = 1;
                                break;
                            case 2:
                            case 4:
                            case 6:
                            case 8:
                            case 10:
                            case 13:
                            case 16:
                            case 18:
                            case 20:
                            case 22:
                            case 24:
                            case 26:
                            case 28:
                            case 31:
                                ShakesIdlePhase = 2;
                                break;
                            case 3:
                            case 7:
                            case 11:
                            case 14:
                            case 17:
                            case 21:
                            case 25:
                            case 29:
                                ShakesIdlePhase = 3;
                                break;
                            case 35:
                                WasIdleCount++;
                                PlayerIdle = false;
                                ShakesIdlePhase = 0;
                                ShopIdle = 0;
                                ShakesIdleStep = 0;
                                break;
                            default:
                                WasPassiert = false;
                        };
                    };
                };
            } else {
                ShopIdle++;
            };
            if (SaleRecoverTime > 0){
                SaleRecoverTime--;
                if (SaleRecoverTime == 0){
                    WasPassiert = true;
                };
            };
            if (OnStage(SCR_SHAKES_BG)){
                ShakesBlinzeln++;
                if (ShakesBlinzeln > 73){
                    ShakesBlinzeln = int((Math.random() * 30));
                    WasPassiert = true;
                    ShakesAugenZu = 0;
                } else {
                    if (ShakesBlinzeln > 72){
                        WasPassiert = true;
                        ShakesAugenZu = 0;
                    } else {
                        if (ShakesBlinzeln > 71){
                            WasPassiert = true;
                            ShakesAugenZu = 0;
                        } else {
                            if (ShakesBlinzeln > 70){
                                WasPassiert = true;
                                ShakesAugenZu = 2;
                            };
                        };
                    };
                };
                if (WasPassiert){
                    Add(SCREEN_SHAKES);
                    if ((((specialAction == 2)) or ((specialAction == 5)))){
                        Add(SHAKES_EPCIOVL);
                        actor[SHAKES_EPCIOVL].mouseEnabled = false;
                    };
                    if (!SleepTime()){
                        if (((PlayerIdle) and (!((ShakesIdlePhase == 0))))){
                            Remove(SHAKES_NIGHT);
                            Remove(SHAKES_DAY);
                            Remove(SHAKES_BLINZELN1, SHAKES_BLINZELN2);
                            switch (ShakesIdlePhase){
                                case 1:
                                    Remove(SHAKES_IDLE, SHAKES_IDLE2, SHAKES_IDLE3);
                                    break;
                                case 2:
                                    Remove(SHAKES_IDLE, SHAKES_IDLE1, SHAKES_IDLE3);
                                    break;
                                case 3:
                                    Remove(SHAKES_IDLE, SHAKES_IDLE1, SHAKES_IDLE2);
                                    break;
                                case 4:
                                    Remove(SHAKES_IDLE1, SHAKES_IDLE2, SHAKES_IDLE3);
                                    break;
                            };
                        } else {
                            Remove(SHAKES_IDLE, SHAKES_IDLE1, SHAKES_IDLE2, SHAKES_IDLE3);
                            Remove(SHAKES_NIGHT);
                            if (ShakesAugenZu != 2){
                                Remove(SHAKES_BLINZELN2);
                            };
                            if (ShakesAugenZu != 1){
                                Remove(SHAKES_BLINZELN1);
                            };
                        };
                    } else {
                        Remove(SHAKES_IDLE, SHAKES_IDLE1, SHAKES_IDLE2, SHAKES_IDLE3);
                        Remove(SHAKES_DAY);
                    };
                    if (pv){
                        Add(POPUP_INFO);
                    };
                };
                Add(LBL_ERROR);
            } else {
                if (OnStage(SCR_FIDGET_BG)){
                    AffeBlinzeln++;
                    FidgetBlinzeln++;
                    if (AffeBlinzeln > 73){
                        AffeBlinzeln = int((Math.random() * 30));
                        if (int((Math.random() * 2)) == 1){
                            AffeStep = 1;
                            WasPassiert = true;
                        } else {
                            AffeStep = 3;
                            WasPassiert = true;
                        };
                    } else {
                        if (AffeBlinzeln > 70){
                            AffeStep = 2;
                            WasPassiert = true;
                        };
                    };
                    if (FidgetBlinzeln > 73){
                        FidgetBlinzeln = int((Math.random() * 30));
                        FidgetAugenZu = false;
                        WasPassiert = true;
                    } else {
                        if (FidgetBlinzeln > 70){
                            if (OnStage(FIDGET_DAY)){
                                FidgetAugenZu = true;
                                WasPassiert = true;
                            };
                        };
                    };
                    if (((WasPassiert) and (!(OnStage(GOTO_WITCH_OVL))))){
                        Add(SCREEN_FIDGET);
                        if (Savegame[SG_LEVEL] >= 66){
                            Add(CA_GOTO_WITCH);
                        };
                        if ((((specialAction == 2)) or ((specialAction == 5)))){
                            Add(FIDGET_EPCIOVL);
                            actor[FIDGET_EPCIOVL].mouseEnabled = false;
                        };
                        if (AffeStep >= 2){
                            Remove(FIDGET_AFFE1);
                        };
                        if (AffeStep == 2){
                            Remove(FIDGET_AFFE3);
                        };
                        if (!SleepTime()){
                            if (PlayerIdle){
                                Remove(FIDGET_DAY);
                            };
                            Remove(FIDGET_NIGHT);
                        } else {
                            Remove(FIDGET_DAY);
                        };
                        if (((!(FidgetAugenZu)) or (PlayerIdle))){
                            Remove(FIDGET_BLINZELN);
                        };
                        if (pv){
                            Add(POPUP_INFO);
                        };
                    };
                    Add(LBL_ERROR);
                } else {
                    PlayerIdle = false;
                    WasIdleCount = 0;
                    ShopIdle = 0;
                };
            };
        };
        ShopMouseDownEvent = function (evt:MouseEvent){
            Add(CA_USE_ITEM);
        };
        ShopMouseUpEvent = function (evt:MouseEvent){
            Remove(CA_USE_ITEM);
        };
        RequestNewWarez = function (evt:Event=undefined){
            var RerollResetTimer:* = null;
            var RerollReset:* = null;
            var evt:* = evt;
            RerollReset = function (evt:Event){
                BlockReroll = false;
                RerollResetTimer.removeEventListener(TimerEvent.TIMER, RerollReset);
            };
            if ((((evt is MouseEvent)) and (FrenzyMode))){
                if (RollFrenzy.running){
                    ErrorMessage("Frenzy stopped!");
                    RollFrenzy.stop();
                    return;
                };
                ErrorMessage("Frenzy started!");
                RollFrenzy.start();
            };
            if (!BlockReroll){
                BlockReroll = true;
                RerollResetTimer = new Timer(5000, 1);
                RerollResetTimer.addEventListener(TimerEvent.TIMER, RerollReset);
                RerollResetTimer.start();
                PlayerIdle = false;
                ShopIdle = 0;
                Remove(FIDGET_DAY);
                Remove(FIDGET_IDLE);
                SaleRecoverTime = 10;
                SendAction(ACT_REQUEST_NEWWAREZ, ((OnStage(SCR_FIDGET_BG)) ? 1 : 2));
            };
        };
        RequestWitchScreen = function (evt:Event=undefined){
            SendAction(ACT_SCREEN_WITCH);
        };
        CancelQuest = function (evt:Event=undefined){
            SendAction(ACT_QUEST_CANCEL);
        };
        SkipQuest = function (evt:Event=undefined){
            SendAction(ACT_QUEST_SKIP);
        };
        var GuildMsgMode:* = function (evt:Event){
            if (OnStage(INP_POST_ADDRESS)){
                if (textDir == "right"){
                    actor[POST_GUILD].x = (((POST_INP_X + actor[INP_POST_ADDRESS].width) - actor[POST_GUILD].width) - 5);
                } else {
                    actor[POST_GUILD].x = (POST_INP_X + 5);
                };
                Remove(INP_POST_ADDRESS);
                actor[INP_POST_ADDRESS].getChildAt(1).text = "";
            } else {
                if (textDir == "right"){
                    actor[POST_GUILD].x = (POST_INP_X + 5);
                } else {
                    actor[POST_GUILD].x = (((POST_INP_X + actor[INP_POST_ADDRESS].width) - actor[POST_GUILD].width) - 5);
                };
                Add(INP_POST_ADDRESS);
                Add(POST_GUILD);
                actor[INP_POST_ADDRESS].getChildAt(1).text = txt[TXT_EMPFAENGER];
            };
        };
        AttackEnemy = function (evt:Event=undefined){
            var evt:* = evt;
            if ((evt is KeyboardEvent)){
                if (((((!((KeyboardEvent(evt).keyCode == 13))) and (!((KeyboardEvent(evt).keyCode == 10))))) and (!((KeyboardEvent(evt).keyCode == 16777230))))){
                    return;
                };
            };
            if (WaitingFor(Savegame[SG_PVP_REROLL_TIME])){
                var _local3 = actor[LBL_IF_PILZE];
                with (_local3) {
                    if (int(Savegame[SG_MUSH]) > 0){
                        text = String((int(Savegame[SG_MUSH]) - 1));
                    };
                    x = ((IF_LBL_GOLDPILZE_X - textWidth) - 10);
                };
            };
            EnablePopup(LBL_IF_PILZE);
            SendAction(ACT_START_FIGHT, actor[INP_ARENA_ENEMY].getChildAt(1).text);
            if (lastAttacked.indexOf(actor[INP_ARENA_ENEMY].getChildAt(1).text.toLowerCase()) == -1){
                lastAttacked.push(actor[INP_ARENA_ENEMY].getChildAt(1).text.toLowerCase());
            };
        };
        ClickMount = function (evt:MouseEvent){
            var actorID:int;
            var GoldKosten:int;
            var PilzKosten:int;
            var tmpX:int;
            actorID = GetActorID(evt.target);
            GoldKosten = 0;
            PilzKosten = 0;
            tmpX = 0;
            if (!OnStage(LBL_STALL_LAUFZEIT)){
                OldMount = 0;
            };
            switch (actorID){
                case CA_STALL_BOX_GUT1:
                    SelectedMount = 3;
                    break;
                case CA_STALL_BOX_GUT2:
                    SelectedMount = 1;
                    break;
                case CA_STALL_BOX_GUT3:
                    SelectedMount = 2;
                    break;
                default:
                    SelectedMount = ((((((actorID >= CA_STALL_BOX_GUT1)) and ((actorID <= CA_STALL_BOX_GUT4)))) ? (actorID - CA_STALL_BOX_GUT1) : (actorID - CA_STALL_BOX_BOESE1)) + 1);
            };
            AddSome(LBL_STALL_LAUFZEIT, STALL_BUY);
            SetCnt(STALL_MUSH, IF_PILZE);
            SetCnt(STALL_GOLD, IF_GOLD);
            SetCnt(STALL_SCHATZGOLD, IF_GOLD);
            SetCnt(STALL_SCHATZSILBER, IF_SILBER);
            actor[LBL_STALL_TITEL].text = txt[((TXT_STALL_MOUNTTITEL + SelectedMount) + (((CharVolk >= 5)) ? 3 : -1))];
            actor[LBL_STALL_TEXT].text = txt[((TXT_STALL_MOUNTTEXT + SelectedMount) + (((CharVolk >= 5)) ? 3 : -1))];
            actor[LBL_STALL_GAIN].text = txt[((TXT_MOUNT_GAIN1 + SelectedMount) - 1)].split("|").join("");
            if (textDir == "right"){
                actor[LBL_STALL_TITEL].x = ((actor[LBL_STALL_TEXT].x + actor[LBL_STALL_TEXT].width) - actor[LBL_STALL_TITEL].textWidth);
                actor[LBL_STALL_GAIN].x = ((actor[LBL_STALL_TEXT].x + actor[LBL_STALL_TEXT].width) - actor[LBL_STALL_GAIN].textWidth);
            };
            Remove(LBL_STALL_SCHATZGOLD, STALL_SCHATZGOLD, LBL_STALL_SCHATZSILBER, STALL_SCHATZSILBER, LBL_STALL_SCHATZ);
            if (txt[((TXT_MOUNT_GAIN1 + SelectedMount) - 1)].split("|").length > 1){
                if (textDir == "right"){
                    tmpX = (actor[LBL_STALL_GAIN].x - 10);
                } else {
                    tmpX = ((actor[LBL_STALL_GAIN].x + actor[LBL_STALL_GAIN].width) + 10);
                };
                if (GoldAnteil(Stundenlohn) > 0){
                    AddSome(LBL_STALL_SCHATZGOLD, STALL_SCHATZGOLD);
                    actor[LBL_STALL_SCHATZGOLD].text = String(GoldAnteil(Stundenlohn));
                    if (textDir == "right"){
                        actor[STALL_SCHATZGOLD].x = (tmpX - actor[STALL_SCHATZGOLD].width);
                        tmpX = (tmpX - (actor[STALL_SCHATZGOLD].width + 10));
                        actor[LBL_STALL_SCHATZGOLD].x = (tmpX - actor[LBL_STALL_SCHATZGOLD].textWidth);
                        tmpX = (tmpX - (actor[LBL_STALL_SCHATZGOLD].textWidth + 10));
                    } else {
                        actor[LBL_STALL_SCHATZGOLD].x = tmpX;
                        tmpX = (tmpX + (actor[LBL_STALL_SCHATZGOLD].textWidth + 10));
                        actor[STALL_SCHATZGOLD].x = tmpX;
                        tmpX = (tmpX + (actor[STALL_SCHATZGOLD].width + 10));
                    };
                };
                if (SilberAnteil(Stundenlohn) > 0){
                    AddSome(LBL_STALL_SCHATZSILBER, STALL_SCHATZSILBER);
                    actor[LBL_STALL_SCHATZSILBER].text = String(SilberAnteil(Stundenlohn));
                    if (textDir == "right"){
                        actor[STALL_SCHATZSILBER].x = (tmpX - actor[STALL_SCHATZSILBER].width);
                        tmpX = (tmpX - (actor[STALL_SCHATZSILBER].width + 10));
                        actor[LBL_STALL_SCHATZSILBER].x = (tmpX - actor[LBL_STALL_SCHATZSILBER].textWidth);
                        tmpX = (tmpX - (actor[LBL_STALL_SCHATZSILBER].textWidth + 10));
                    } else {
                        actor[LBL_STALL_SCHATZSILBER].x = tmpX;
                        tmpX = (tmpX + (actor[LBL_STALL_SCHATZSILBER].textWidth + 10));
                        actor[STALL_SCHATZSILBER].x = tmpX;
                        tmpX = (tmpX + (actor[STALL_SCHATZSILBER].width + 10));
                    };
                };
                Add(LBL_STALL_SCHATZ);
                if (textDir == "right"){
                    actor[LBL_STALL_SCHATZ].x = (tmpX - actor[LBL_STALL_SCHATZ].textWidth);
                } else {
                    actor[LBL_STALL_SCHATZ].x = tmpX;
                };
            };
            switch ((SelectedMount + (((CharVolk >= 5)) ? 4 : 0))){
                case 1:
                    if ((((ststep == 0)) or ((ststep == 4)))){
                        ststep++;
                    } else {
                        ststep = 0;
                    };
                    GoldKosten = 1;
                    PilzKosten = 0;
                    break;
                case 2:
                    if ((((ststep == 1)) or ((ststep == 5)))){
                        ststep++;
                    } else {
                        ststep = 0;
                    };
                    GoldKosten = 5;
                    PilzKosten = 0;
                    break;
                case 3:
                    if ((((ststep == 2)) or ((ststep == 6)))){
                        ststep++;
                    } else {
                        ststep = 0;
                    };
                    GoldKosten = 10;
                    PilzKosten = 1;
                    break;
                case 4:
                    if ((((ststep == 3)) or ((ststep == 7)))){
                        ststep++;
                    } else {
                        ststep = 0;
                    };
                    GoldKosten = 0;
                    PilzKosten = 25;
                    break;
                case 5:
                    if ((((ststep == 0)) or ((ststep == 4)))){
                        ststep++;
                    } else {
                        ststep = 0;
                    };
                    GoldKosten = 1;
                    PilzKosten = 0;
                    break;
                case 6:
                    if ((((ststep == 1)) or ((ststep == 5)))){
                        ststep++;
                    } else {
                        ststep = 0;
                    };
                    GoldKosten = 5;
                    PilzKosten = 0;
                    break;
                case 7:
                    if ((((ststep == 2)) or ((ststep == 6)))){
                        ststep++;
                    } else {
                        ststep = 0;
                    };
                    GoldKosten = 10;
                    PilzKosten = 1;
                    break;
                case 8:
                    if ((((ststep == 3)) or ((ststep == 7)))){
                        ststep++;
                    };
                    GoldKosten = 0;
                    PilzKosten = 25;
                    break;
            };
            if (((!((SelectedMount == OldMount))) or ((OldMount == 0)))){
                Play((((SND_MOUNT_1 + SelectedMount) + (((((CharVolk >= 5)) and (!(param_censored)))) ? 4 : 0)) - 1));
            };
            OldMount = SelectedMount;
            if (Savegame[SG_MOUNT] > SelectedMount){
                Remove(STALL_BUY);
            } else {
                if (Savegame[SG_MOUNT] == 0){
                    SetBtnText(STALL_BUY, txt[TXT_STALL_BUY]);
                } else {
                    SetBtnText(STALL_BUY, txt[(((Savegame[SG_MOUNT] < SelectedMount)) ? TXT_STALL_UPGRADE : TXT_STALL_PROLONG)]);
                };
            };
            Remove(LBL_STALL_GOLD, STALL_GOLD, LBL_STALL_MUSH, STALL_MUSH);
            if (GoldKosten > 0){
                if (GoldKosten > int((Savegame[SG_GOLD] / 100))){
                    Remove(STALL_BUY);
                };
                AddSome(LBL_STALL_GOLD, STALL_GOLD);
                actor[LBL_STALL_GOLD].text = String(GoldKosten);
                actor[STALL_GOLD].x = ((actor[LBL_STALL_GOLD].x + actor[LBL_STALL_GOLD].textWidth) + 10);
            };
            if (PilzKosten > 0){
                if (PilzKosten > int(Savegame[SG_MUSH])){
                    Remove(STALL_BUY);
                };
                AddSome(LBL_STALL_MUSH, STALL_MUSH);
                actor[LBL_STALL_MUSH].text = String(PilzKosten);
                if (GoldKosten > 0){
                    actor[LBL_STALL_MUSH].x = ((actor[STALL_GOLD].x + actor[STALL_GOLD].width) + 15);
                } else {
                    actor[LBL_STALL_MUSH].x = actor[LBL_STALL_GOLD].x;
                };
                actor[STALL_MUSH].x = ((actor[LBL_STALL_MUSH].x + actor[LBL_STALL_MUSH].textWidth) + 10);
            };
        };
        BuyMount = function (evt:Event=undefined){
            SendAction(ACT_BUY_MOUNT, SelectedMount);
        };
        var JumpToGuildHall:* = function (evt:Event=undefined){
            ruhmesHalleSuchString = lastGuildShown;
            ruhmesHalleSuchName = true;
            SendAction(ACT_SCREEN_GILDENHALLE, ruhmesHalleSuchString, "0", "0");
        };
        var AttackLinkClick:* = function (evt:Event){
            if (guildAttacked != ""){
                if (guildAttacked == Gilde){
                    SendAction(ACT_SCREEN_GILDEN);
                } else {
                    SendAction(ACT_SCREEN_FREMDGILDE, guildAttacked);
                };
            };
        };
        var DefenceLinkClick:* = function (evt:Event){
            if (guildAttacking != ""){
                if (guildAttacking == Gilde){
                    SendAction(ACT_SCREEN_GILDEN);
                } else {
                    SendAction(ACT_SCREEN_FREMDGILDE, guildAttacking);
                };
            };
        };
        var OpenGuildLink:* = function (evt:MouseEvent=undefined){
            navigateToURL(new URLRequest(guildForumLink), "_blank");
        };
        var CleanupField:* = function (actorID:int){
            var actorID:* = actorID;
            var FixContent:* = function (evt:KeyboardEvent){
                if (actor[actorID].getChildAt(0).text != RemoveIllegalChars(actor[actorID].getChildAt(0).text)){
                    actor[actorID].getChildAt(0).text = RemoveIllegalChars(actor[actorID].getChildAt(0).text);
                };
            };
            var _local3 = actor[actorID];
            with (_local3) {
                addEventListener(KeyboardEvent.KEY_UP, FixContent);
                addEventListener(KeyboardEvent.KEY_DOWN, FixContent);
            };
        };
        ShowExtendedHistory = function (evt:Event){
        };
        HideExtendedHistory = function (evt:Event){
        };
        AdvancedChatHandler = function (evt:KeyboardEvent){
            var whisperCmd:String;
            var i:int;
            var textEntered:String;
            whisperCmd = "/whisper ";
            if (txt[TXT_WHISPER]){
                whisperCmd = (txt[TXT_WHISPER] + " ");
            };
            if (evt.keyCode == 38){
                actor[INP_GILDE_CHAT].getChildAt(0).text = lastChatLine;
                actor[INP_GILDE_CHAT].getChildAt(0).setSelection(lastChatLine.length, lastChatLine.length);
                return;
            };
            if ((((((((((((evt.keyCode == 37)) or ((evt.keyCode == 39)))) or ((evt.keyCode == 40)))) or ((evt.keyCode == 8)))) or ((evt.keyCode == 16)))) or ((evt.keyCode == 17)))){
            } else {
                textEntered = actor[INP_GILDE_CHAT].getChildAt(0).text.substr(0, actor[INP_GILDE_CHAT].getChildAt(0).caretIndex);
                i = 0;
                while (i < suggestNames.length) {
                    if ((((textEntered.length >= 3)) and ((textEntered.toLowerCase() == ("/w " + suggestNames[i].toLowerCase().split(" ").join("#")).substr(0, textEntered.length))))){
                        actor[INP_GILDE_CHAT].getChildAt(0).text = (actor[INP_GILDE_CHAT].getChildAt(0).text.substr(0, actor[INP_GILDE_CHAT].getChildAt(0).caretIndex) + ("/w " + suggestNames[i].split(" ").join("#")).substr(actor[INP_GILDE_CHAT].getChildAt(0).caretIndex));
                        actor[INP_GILDE_CHAT].getChildAt(0).setSelection(actor[INP_GILDE_CHAT].getChildAt(0).caretIndex, actor[INP_GILDE_CHAT].getChildAt(0).text.length);
                        break;
                    };
                    if ((((textEntered.length >= whisperCmd.length)) and ((textEntered.toLowerCase() == (whisperCmd + suggestNames[i].toLowerCase()).substr(0, textEntered.length))))){
                        actor[INP_GILDE_CHAT].getChildAt(0).text = (actor[INP_GILDE_CHAT].getChildAt(0).text.substr(0, actor[INP_GILDE_CHAT].getChildAt(0).caretIndex) + (whisperCmd + suggestNames[i].split(" ").join("#")).substr(actor[INP_GILDE_CHAT].getChildAt(0).caretIndex));
                        actor[INP_GILDE_CHAT].getChildAt(0).setSelection(actor[INP_GILDE_CHAT].getChildAt(0).caretIndex, actor[INP_GILDE_CHAT].getChildAt(0).text.length);
                        break;
                    };
                    i++;
                };
            };
        };
        SendChatMsg = function (evt:KeyboardEvent=undefined){
            var whisperCmd:* = null;
            var textToSend:* = null;
            var destR:* = 0;
            var destG:* = 0;
            var destB:* = 0;
            var req:* = null;
            var myFlt:* = undefined;
            var evt:* = evt;
            whisperCmd = "/whisper ";
            if (txt[TXT_WHISPER]){
                whisperCmd = (txt[TXT_WHISPER] + " ");
            };
            if (evt){
                trc("Keycode", KeyboardEvent(evt).keyCode);
                if (((((!((KeyboardEvent(evt).keyCode == 13))) and (!((KeyboardEvent(evt).keyCode == 10))))) and (!((KeyboardEvent(evt).keyCode == 16777230))))){
                    return;
                };
            };
            lastChatLine = actor[INP_GILDE_CHAT].getChildAt(0).text;
            GildeChatScroll = 0;
            i = 0;
            while (i < 40) {
                var _local3 = actor[(LBL_GILDE_CHAT + i)];
                with (_local3) {
                    y = (GILDE_CHAT_Y + (((i - 35) + GildeChatScroll) * GILDE_CHAT_Y));
                    visible = (((i >= (35 - GildeChatScroll))) and ((i < (40 - GildeChatScroll))));
                };
                i++;
            };
            textToSend = RemoveIllegalChars(actor[INP_GILDE_CHAT].getChildAt(0).text);
            if (textToSend.length <= 0){
                return;
            };
            if (textToSend.toLowerCase() == "/level"){
                ChatLine(("Average level of guild members: " + String(avgLevel)));
                actor[INP_GILDE_CHAT].getChildAt(0).text = "";
                return;
            };
            if (textToSend.toLowerCase().substr(0, 5) == "/coa "){
                setCrestStr(textToSend.substr(5));
                Remove(GILDE_GEBAEUDE);
                Add(GILDE_CREST);
                if (actor[GILDE_CREST].y == GILDE_GEBAEUDE_Y){
                    SetAlpha(GILDE_CREST_CONTROLS, 1);
                    Add(GILDE_CREST_CONTROLS);
                };
                loadCrest();
                actor[INP_GILDE_CHAT].getChildAt(0).text = getCrestStr();
                actor[INP_GILDE_CHAT].getChildAt(0).setSelection(0, getCrestStr().length);
                return;
            };
            if (textToSend.toLowerCase() == "/coa"){
                actor[INP_GILDE_CHAT].getChildAt(0).text = getCrestStr();
                actor[INP_GILDE_CHAT].getChildAt(0).setSelection(0, getCrestStr().length);
                return;
            };
            if (textToSend.toLowerCase() == "/delfights"){
                PostScroll = 1;
                fightFlushMode = true;
                SendAction(ACT_SCREEN_POST);
                actor[INP_GILDE_CHAT].getChildAt(0).text = "";
                return;
            };
            if (textToSend.toLowerCase() == "/test"){
                if ((actor[INP_NAME].getChildAt(1).text.length % 2) == 0){
                    ChatLine("Test successful!");
                } else {
                    ChatLine("Test failed!");
                };
                actor[INP_GILDE_CHAT].getChildAt(0).text = "";
                return;
            };
            if (textToSend.toLowerCase().substr(0, 9) == "/apptest "){
                ChatLine("Command unavailable in SWF mode.");
                actor[INP_GILDE_CHAT].getChildAt(0).text = "";
                return;
            };
            if (textToSend.toLowerCase() == "/upload virus"){
                ChatLine("Error: Could not upload virus. Please install backdoor first!");
                actor[INP_GILDE_CHAT].getChildAt(0).text = "";
                return;
            };
            if (textToSend.toLowerCase() == "/install backdoor"){
                ChatLine("Error: Could not install backdoor. Please apply crack first!");
                actor[INP_GILDE_CHAT].getChildAt(0).text = "";
                return;
            };
            if (textToSend.toLowerCase() == "/apply crack"){
                ChatLine("Error: Could not apply crack. Please generate master password first!");
                actor[INP_GILDE_CHAT].getChildAt(0).text = "";
                return;
            };
            if (textToSend.toLowerCase() == "/generate master password"){
                ChatLine("Error: Could not generate master password. Please hack gibson first!");
                actor[INP_GILDE_CHAT].getChildAt(0).text = "";
                return;
            };
            if (textToSend.toLowerCase() == "/hack gibson"){
                ChatLine("Error: Could not hack gibson. Please disable firewall first!");
                actor[INP_GILDE_CHAT].getChildAt(0).text = "";
                return;
            };
            if (textToSend.toLowerCase() == "/disable firewall"){
                ChatLine("Error: Could not disable firewall. Please upload virus first!");
                actor[INP_GILDE_CHAT].getChildAt(0).text = "";
                return;
            };
            if ((((textToSend.toLowerCase().substr(0, 4) == "/bg ")) or ((textToSend.toLowerCase() == "/bg")))){
                if (textToSend.length == 10){
                    destR = int(("0x" + textToSend.substr(4, 2)));
                    destG = int(("0x" + textToSend.substr(6, 2)));
                    destB = int(("0x" + textToSend.substr(8, 2)));
                    actor[GILDEN_BG].filters = [new ColorMatrixFilter([0, 0, 0, 0, destR, 0, 0, 0, 0, destG, 0, 0, 0, 0, destB, 0, 0, 0, 0, 0xFF])];
                    Hide(GILDE_RAHMEN);
                } else {
                    actor[GILDEN_BG].filters = new Array();
                    Show(GILDE_RAHMEN);
                };
                actor[INP_GILDE_CHAT].getChildAt(0).text = "";
                return;
            };
            if (textToSend.toLowerCase().substr(0, 13) == "/cleandungeon"){
                if (textToSend.length > 17){
                    ChatLine("Error: Dungeon code too long. Must be exactly 4 digits.");
                } else {
                    if (textToSend.length == 17){
                        if (actor[INP_NAME].getChildAt(1).text.toLowerCase() == "dream 25"){
                            ChatLine("Please stop leaking our top secret cheat commands. Seriously.");
                        } else {
                            ChatLine("Error: Dungeon already cleaned by player 'dream 25'. Please try another code.");
                        };
                    } else {
                        if (textToSend.length > 13){
                            ChatLine("Error: Dungeon code too short. Must be exactly 4 digits.");
                        } else {
                            ChatLine("Error: Dungeon code missing.");
                        };
                    };
                };
                actor[INP_GILDE_CHAT].getChildAt(0).text = "";
                return;
            };
            if (textToSend.toLowerCase() == "/act"){
                showActivityTime = !(showActivityTime);
                actor[INP_GILDE_CHAT].getChildAt(0).text = "";
                ChatLine(("/act mode is now " + ((showActivityTime) ? "on" : "off")));
                return;
            };
            if (textToSend.toLowerCase() == "/album"){
                showAlbumOffset = !(showAlbumOffset);
                actor[INP_GILDE_CHAT].getChildAt(0).text = "";
                ChatLine(("/album mode is now " + ((showAlbumOffset) ? "on" : "off")));
                return;
            };
            if (textToSend.toLowerCase().substr(0, 6) == "/lang "){
                if ((((textToSend.substr(6) == "")) or ((textToSend.substr(6) == original_lang_code)))){
                    so.data.lang_code = undefined;
                } else {
                    so.data.lang_code = textToSend.substr(6);
                };
                so.flush();
                actor[INP_GILDE_CHAT].getChildAt(0).text = "";
                ChatLine((("Language code set to " + so.data.lang_code) + ". Requires reload."));
                req = new URLRequest("index.php");
                navigateToURL(req, "_self");
                return;
            };
            if (textToSend.toLowerCase() == "/sysblink off"){
                so.data.noPulseOnSysMsg = true;
                so.flush();
                actor[INP_GILDE_CHAT].getChildAt(0).text = "";
                ChatLine("/sysblink mode is now off");
                return;
            };
            if (textToSend.toLowerCase() == "/sysblink on"){
                so.data.noPulseOnSysMsg = false;
                so.flush();
                actor[INP_GILDE_CHAT].getChildAt(0).text = "";
                ChatLine("/sysblink mode is now on");
                return;
            };
            if (textToSend.toLowerCase() == "/powerplay"){
                actor[INP_GILDE_CHAT].getChildAt(0).text = "";
                ChatLine("Nope damnit!");
                return;
            };
            if (textToSend.toLowerCase() == "/heybigspender"){
                FrenzyMode = !(FrenzyMode);
                actor[INP_GILDE_CHAT].getChildAt(0).text = "";
                ChatLine(("Frenzy is now " + ((FrenzyMode) ? "on" : "off")));
                return;
            };
            if (textToSend.toLowerCase() == "/cheat"){
                i = 0;
                while (i < actor.length) {
                    myFlt = [new ColorMatrixFilter([Math.random(), Math.random(), 0, 0, 0, 0, Math.random(), Math.random(), 0, 0, Math.random(), 0, Math.random(), 0, 0, 0, 0, 0, ((Math.random() * 0.5) + 0.5), 0]), new BlurFilter((10 * Math.random()), (10 * Math.random()), 1)];
                    if ((actor[i] is DisplayObject)){
                        actor[i].filters = myFlt;
                        actor[i].scaleX = (actor[i].scaleX * (1.1 - (Math.random() * 0.2)));
                        actor[i].scaleY = (actor[i].scaleY * (1.1 - (Math.random() * 0.2)));
                        actor[i].x = (actor[i].x + (2 - (Math.random() * 4)));
                        actor[i].y = (actor[i].y + (2 - (Math.random() * 4)));
                    };
                    i++;
                };
                actor[INP_GILDE_CHAT].getChildAt(0).text = "";
                return;
            };
            if (textToSend.toLowerCase() == "/pudo shroomster"){
                FrenzyMode = false;
                actor[INP_GILDE_CHAT].getChildAt(0).text = "";
                ChatLine("Also nope.");
                return;
            };
            if (textToSend.toLowerCase() == "/frenzy"){
                FrenzyMode = false;
                actor[INP_GILDE_CHAT].getChildAt(0).text = "";
                ChatLine("Nope.");
                return;
            };
            if (textToSend.toLowerCase() == "/steal"){
                actor[INP_GILDE_CHAT].getChildAt(0).text = "";
                if (int(actor[LBL_GILDE_MUSH].text) > 0){
                    actor[LBL_GILDE_MUSH].text = String((int(actor[LBL_GILDE_MUSH].text) - 1));
                    _local3 = actor[LBL_IF_PILZE];
                    with (_local3) {
                        text = String((int(text) + 1));
                        x = ((IF_LBL_GOLDPILZE_X - textWidth) - 10);
                    };
                    ChatLine("1 mushroom stolen from guild!");
                } else {
                    ChatLine("No mushrooms to steal from guild!");
                };
                return;
            };
            if (textToSend.toLowerCase() == "/tvtest"){
                tvTest = true;
                actor[INP_GILDE_CHAT].getChildAt(0).text = "";
                ChatLine("TV test");
                return;
            };
            if (textToSend.toLowerCase() == "/gid"){
                actor[INP_GILDE_CHAT].getChildAt(0).text = "";
                ChatLine(("Guild id: " + lastGuildData[0]));
                return;
            };
            if (textToSend.toLowerCase() == "/pid"){
                actor[INP_GILDE_CHAT].getChildAt(0).text = "";
                ChatLine(("Player id: " + Savegame[SG_PLAYER_ID]));
                return;
            };
            if (textToSend.toLowerCase() == "/pwdscore"){
                actor[INP_GILDE_CHAT].getChildAt(0).text = "";
                gradePassword(undefined, actor[INP_LOGIN_PASSWORD].getChildAt(1).text);
                return;
            };
            if (textToSend.substr(0, (txt[TXT_CMD_DONATE_GOLD].length + 5)).toLowerCase() == (txt[TXT_CMD_DONATE_GOLD].toLowerCase() + " ;-) ")){
                PresetGold = int(textToSend.split(" ")[2]);
                actor[INP_GILDE_CHAT].getChildAt(0).text = "";
                ChatLine("ok");
                return;
            };
            if (textToSend.substr(0, (txt[TXT_CMD_DONATE_MUSH].length + 5)).toLowerCase() == (txt[TXT_CMD_DONATE_MUSH].toLowerCase() + " ;-) ")){
                PresetMush = int(textToSend.split(" ")[2]);
                actor[INP_GILDE_CHAT].getChildAt(0).text = "";
                ChatLine("ok");
                return;
            };
            if (textToSend.substr(0, (txt[TXT_CMD_DONATE_GOLD].length + 1)).toLowerCase() == (txt[TXT_CMD_DONATE_GOLD].toLowerCase() + " ")){
                if (textToSend.split(" ")[1] == "*"){
                    if ((int(actor[LBL_GILDE_GOLD].text) + int((actor[LBL_IF_GOLD].text + "00"))) <= 10000000){
                        SendAction(ACT_GUILD_DONATE, 1, (actor[LBL_IF_GOLD].text + "00"));
                    } else {
                        ErrorMessage(txt[TXT_ERROR_GUILD_CASH_FULL]);
                    };
                } else {
                    if (int(textToSend.split(" ")[1]) != 0){
                        if ((int(actor[LBL_GILDE_GOLD].text) + int(textToSend.split(" ")[1])) <= 10000000){
                            SendAction(ACT_GUILD_DONATE, 1, String((int(textToSend.split(" ")[1]) * 100)));
                        } else {
                            ErrorMessage(txt[TXT_ERROR_GUILD_CASH_FULL]);
                        };
                    };
                };
                actor[INP_GILDE_CHAT].getChildAt(0).text = "";
                return;
            };
            if (textToSend.substr(0, (txt[TXT_CMD_DONATE_MUSH].length + 1)).toLowerCase() == (txt[TXT_CMD_DONATE_MUSH].toLowerCase() + " ")){
                if (noMush){
                    ChatLine(((txt[TXT_MUSH_DONATE_OBSOLETE]) ? txt[TXT_MUSH_DONATE_OBSOLETE] : "Command is obsolete."));
                    return;
                };
                SendAction(ACT_GUILD_DONATE, 2, textToSend.split(" ")[1]);
                actor[INP_GILDE_CHAT].getChildAt(0).text = "";
                return;
            };
            if (textToSend.toLowerCase().substr(0, 3) == "/w "){
                textToSend = textToSend.substr(3);
                if (textToSend.indexOf(" ") != -1){
                    lastWhisperTarget = textToSend.substr(0, textToSend.indexOf(" ")).split("#").join(" ");
                    SendAction(ACT_WHISPER, textToSend.substr(0, textToSend.indexOf(" ")).split("#").join(" "), EncodeChat(textToSend.substr((textToSend.indexOf(" ") + 1))));
                    actor[INP_GILDE_CHAT].getChildAt(0).text = "";
                } else {
                    if (actor[INP_GILDE_CHAT].getChildAt(0).text.substr(-1) != " "){
                        actor[INP_GILDE_CHAT].getChildAt(0).text = (actor[INP_GILDE_CHAT].getChildAt(0).text + " ");
                    };
                    actor[INP_GILDE_CHAT].getChildAt(0).setSelection(actor[INP_GILDE_CHAT].getChildAt(0).length, actor[INP_GILDE_CHAT].getChildAt(0).length);
                };
                return;
            };
            if (textToSend.toLowerCase().substr(0, whisperCmd.length) == whisperCmd){
                textToSend = textToSend.substr(whisperCmd.length);
                if (textToSend.indexOf(" ") != -1){
                    lastWhisperTarget = textToSend.substr(0, textToSend.indexOf(" ")).split("#").join(" ");
                    SendAction(ACT_WHISPER, textToSend.substr(0, textToSend.indexOf(" ")).split("#").join(" "), EncodeChat(textToSend.substr((textToSend.indexOf(" ") + 1))));
                    actor[INP_GILDE_CHAT].getChildAt(0).text = "";
                } else {
                    if (actor[INP_GILDE_CHAT].getChildAt(0).text.substr(-1) != " "){
                        actor[INP_GILDE_CHAT].getChildAt(0).text = (actor[INP_GILDE_CHAT].getChildAt(0).text + " ");
                    };
                    actor[INP_GILDE_CHAT].getChildAt(0).setSelection(actor[INP_GILDE_CHAT].getChildAt(0).length, actor[INP_GILDE_CHAT].getChildAt(0).length);
                };
                return;
            };
            if (textToSend.substr(0, 1) == "/"){
                actor[INP_GILDE_CHAT].getChildAt(0).text = "";
                ChatLine("Unknown command.");
                return;
            };
            textToSend = textToSend.split("/steal").join((txt[TXT_CMD_DONATE_MUSH] + " 1"));
            SendAction(ACT_SEND_CHAT, EncodeChat(textToSend), lastChatIndex);
            actor[INP_GILDE_CHAT].getChildAt(0).text = "";
        };
        var EncodeChat:* = function (inStr:String):String{
            inStr = inStr.split("#").join("##");
            inStr = inStr.split("/").join("#{");
            inStr = inStr.split(";").join("#}");
            return (inStr);
        };
        nextSuggestionAllow = function (evt:TimerEvent){
            nextSuggestionTimer.stop();
            suggestionAllowed = true;
        };
        GildeBtnHandler = function (evt:Event=undefined){
            var i:* = 0;
            var evt:* = evt;
            switch (GetActorID(evt.target)){
                case (GILDE_CREST_COLOR + 1):
                case (GILDE_CREST_COLOR + 2):
                case (GILDE_CREST_COLOR + 3):
                    crestColorSelection = (GetActorID(evt.target) - GILDE_CREST_COLOR);
                    i = 1;
                    while (i < crestColor.length) {
                        if (i == crestColorSelection){
                            Show((GILDE_CREST_COLOR_SELECTED + i));
                        } else {
                            Hide((GILDE_CREST_COLOR_SELECTED + i));
                        };
                        i = (i + 1);
                    };
                    loadCrest();
                    break;
                case GILDE_CREST_COLOR_PREV:
                    crestSuggested = false;
                    SetBtnText(GILDE_CREST_OK, txt[TXT_CREST_SUGGEST]);
                    var _local3 = crestColor;
                    var _local4 = crestColorSelection;
                    var _local5 = (_local3[_local4] - 1);
                    _local3[_local4] = _local5;
                    if (crestColor[crestColorSelection] < 0){
                        crestColor[crestColorSelection] = (heraldicColors.length - 1);
                    };
                    loadCrest();
                    break;
                case GILDE_CREST_COLOR_NEXT:
                    crestSuggested = false;
                    SetBtnText(GILDE_CREST_OK, txt[TXT_CREST_SUGGEST]);
                    _local3 = crestColor;
                    _local4 = crestColorSelection;
                    _local5 = (_local3[_local4] + 1);
                    _local3[_local4] = _local5;
                    if (crestColor[crestColorSelection] >= heraldicColors.length){
                        crestColor[crestColorSelection] = 0;
                    };
                    loadCrest();
                    break;
                case GILDE_CREST_CHANGE_PREV:
                    crestSuggested = false;
                    SetBtnText(GILDE_CREST_OK, txt[TXT_CREST_SUGGEST]);
                    _local3 = crest;
                    _local4 = selecterCrestElement;
                    _local5 = (_local3[_local4] - 1);
                    _local3[_local4] = _local5;
                    if (crest[selecterCrestElement] < 0){
                        crest[selecterCrestElement] = (crestElementPos[selecterCrestElement][4] - 1);
                    };
                    loadCrest();
                    break;
                case GILDE_CREST_CHANGE_NEXT:
                    crestSuggested = false;
                    SetBtnText(GILDE_CREST_OK, txt[TXT_CREST_SUGGEST]);
                    _local3 = crest;
                    _local4 = selecterCrestElement;
                    _local5 = (_local3[_local4] + 1);
                    _local3[_local4] = _local5;
                    if (crest[selecterCrestElement] >= crestElementPos[selecterCrestElement][4]){
                        crest[selecterCrestElement] = 0;
                    };
                    loadCrest();
                    break;
                case GILDE_CREST_OK:
                    if ((((myOwnRank == 1)) and (crestSuggested))){
                        SendAction(ACT_GUILD_SET_DESC, actor[INP_NAME].getChildAt(1).text, Gilde, ((getCrestStr() + "§") + RemoveIllegalChars(SemiStrip(actor[INP_GILDE_TEXT].getChildAt(0).text))), MD5(actor[INP_LOGIN_PASSWORD].getChildAt(1).text));
                        oldCrestStr = getCrestStr();
                    } else {
                        if (suggestionAllowed){
                            nextSuggestionTimer.start();
                            suggestionAllowed = false;
                            if (myOwnRank == 1){
                                crestSuggested = true;
                                SetBtnText(GILDE_CREST_OK, txt[TXT_CREST_APPLY]);
                            };
                            SendAction(ACT_SEND_CHAT, ("#?" + getCrestStr()), lastChatIndex);
                        } else {
                            ErrorMessage(txt[TXT_ERROR_TOO_SOON_SUGGESTION]);
                        };
                    };
                    break;
                case CLA_GILDE_CREST:
                case (CLA_GILDE_CREST + 1):
                case (CLA_GILDE_CREST + 2):
                case (CLA_GILDE_CREST + 3):
                case (CLA_GILDE_CREST + 4):
                case (CLA_GILDE_CREST + 5):
                case (CLA_GILDE_CREST + 6):
                case (CLA_GILDE_CREST + 7):
                case (CLA_GILDE_CREST + 8):
                    if (lastGuildShown == Gilde){
                        if (!OnStage(LBL_GILDE_CREST_ELEMENT)){
                            crestMoveDest = GILDE_GEBAEUDE_Y;
                            crestMoveTimer.start();
                            SetAlpha(GILDE_CREST_CONTROLS, 0);
                            Add(GILDE_CREST_CONTROLS);
                            FadeIn(GILDE_CREST_CONTROLS);
                        };
                    };
                    selecterCrestElement = (GetActorID(evt.target) - CLA_GILDE_CREST);
                    i = 0;
                    while (i < crestColor.length) {
                        if (i == crestColorSelection){
                            Show((GILDE_CREST_COLOR_SELECTED + i));
                        } else {
                            Hide((GILDE_CREST_COLOR_SELECTED + i));
                        };
                        Load((GILDE_CREST_COLOR_UNSELECTED + i));
                        Load((GILDE_CREST_COLOR_SELECTED + i));
                        Load((GILDE_CREST_COLOR_FILLIN + i));
                        i = (i + 1);
                    };
                    loadCrest();
                    break;
                case GILDE_GEBAEUDE_GOTO_CREST:
                    Remove(GILDE_GEBAEUDE);
                    Add(GILDE_CREST);
                    if (actor[GILDE_CREST].y == GILDE_GEBAEUDE_Y){
                        SetAlpha(GILDE_CREST_CONTROLS, 1);
                        Add(GILDE_CREST_CONTROLS);
                    } else {
                        setCrestStr(oldCrestStr);
                        selecterCrestElement = -1;
                    };
                    crestSuggested = false;
                    SetBtnText(GILDE_CREST_OK, txt[TXT_CREST_SUGGEST]);
                    loadCrest();
                    break;
                case GILDE_CREST_GOTO_GEBAEUDE:
                    setCrestStr(oldCrestStr);
                    selecterCrestElement = -1;
                    Remove(GILDE_CREST);
                    Remove(GILDE_CREST_CONTROLS);
                    actor[GILDE_CREST].y = (GILDE_GEBAEUDE_Y + 60);
                    Add(GILDE_GEBAEUDE);
                    break;
                case GILDE_RAID:
                    if (myOwnAttackTarget == 0){
                        if (txt[TXT_GILDE_RAIDSTART]){
                            Add(GILDE_DIALOG_RAID);
                            _local3 = actor[LBL_GILDE_DIALOG_TEXT_RAID];
                            with (_local3) {
                                wordWrap = true;
                                width = GILDE_TEXT2_X;
                                text = txt[TXT_GILDE_RAIDSTART].split("%1").join(txt[(TXT_DUNGEON_NAMES + int(lastGuildData[GUILD_RAID_LEVEL]))]).split("%2").join(String(lastRaidCost));
                            };
                            _local3 = actor[LBL_WINDOW_TITLE];
                            with (_local3) {
                                text = txt[TXT_GILDE_RAIDSTART_TITLE];
                                x = ((IF_WIN_X + IF_WIN_WELCOME_X) - int((textWidth / 2)));
                            };
                        } else {
                            SendAction(ACT_GUILD_COMMENCE_ATTACK, -1);
                        };
                    } else {
                        SendAction(ACT_GUILD_JOIN_ATTACK, "", "");
                    };
                    break;
                case GILDE_ATTACK:
                    if (myOwnAttackTarget == 0){
                        if (lastGuildShown == Gilde){
                            SendAction(ACT_SCREEN_GILDENHALLE, "", Savegame[SG_GUILD_INDEX], 0);
                        } else {
                            SendAction(ACT_GUILD_COMMENCE_ATTACK, lastGuildShown);
                        };
                    } else {
                        SendAction(ACT_GUILD_JOIN_ATTACK, "", "");
                    };
                    break;
                case GILDE_DEFEND:
                    SendAction(ACT_GUILD_JOIN_DEFENSE, "", "");
                    break;
                case GILDE_CHAT_DOWN:
                    GildeChatScroll--;
                    if (GildeChatScroll < 0){
                        GildeChatScroll = 0;
                    };
                    break;
                case GILDE_CHAT_UP:
                    GildeChatScroll++;
                    if (GildeChatScroll > 35){
                        GildeChatScroll = 35;
                    };
                    while (actor[((LBL_GILDE_CHAT + 35) - GildeChatScroll)].text == "") {
                        GildeChatScroll--;
                        if (GildeChatScroll < 0){
                            GildeChatScroll = 0;
                            break;
                        };
                    };
                    break;
            };
            i = 0;
            while (i < 40) {
                _local3 = actor[(LBL_GILDE_CHAT + i)];
                with (_local3) {
                    y = (GILDE_CHAT_Y + (((i - 35) + GildeChatScroll) * GILDE_CHAT_Y));
                    visible = (((i >= (35 - GildeChatScroll))) and ((i < (40 - GildeChatScroll))));
                };
                i = (i + 1);
            };
        };
        GildeGruenden = function (){
            var GildenName:String;
            GildenName = actor[INP_GILDE_GRUENDEN].getChildAt(1).text;
            if (GildenName == ""){
                ErrorMessage(txt[TXT_ERROR_EMPTY_GUILD_NAME]);
            } else {
                SendAction(ACT_GUILD_FOUND, actor[INP_NAME].getChildAt(1).text, actor[INP_GILDE_GRUENDEN].getChildAt(1).text, MD5(actor[INP_LOGIN_PASSWORD].getChildAt(1).text));
            };
        };
        var HutBtnDownHandler:* = function (evt:Event){
            var ClickCount:* = 0;
            var evt:* = evt;
            var DoPushHutBtn:* = function (timerevt:Event){
                var timerevt:* = timerevt;
                if (DestroyHutBtnTimer){
                    DestroyHutBtnTimer = false;
                    var _local3 = HutBtnRepeatTimer;
                    with (_local3) {
                        stop();
                        delay = 1000;
                        removeEventListener(TimerEvent.TIMER, DoPushHutBtn);
                    };
                } else {
                    ClickCount++;
                    switch (ClickCount){
                        case 1:
                            HutBtnRepeatTimer.delay = 500;
                            break;
                        case 3:
                            HutBtnRepeatTimer.delay = 250;
                            break;
                        case 10:
                            HutBtnRepeatTimer.delay = 125;
                            break;
                        case 20:
                            HutBtnRepeatTimer.delay = 62;
                            break;
                    };
                    if (HutBtnHandler(evt)){
                        Play(SND_CLICK);
                    };
                };
            };
            ClickCount = 0;
            if (HutBtnRepeatTimer.running){
                return;
            };
            DestroyHutBtnTimer = false;
            var _local3 = HutBtnRepeatTimer;
            with (_local3) {
                delay = 1000;
                addEventListener(TimerEvent.TIMER, DoPushHutBtn);
                start();
            };
        };
        var HutBtnUpHandler:* = function (evt:Event){
            if (HutBtnRepeatTimer.running){
                DestroyHutBtnTimer = true;
            };
        };
        HutFaceReset = function (evt:TimerEvent){
            if (OnStage(HUTMANN_BG)){
                Add(HUTFACE_IDLE);
            };
        };
        HutBtnHandler = function (evt:Event=undefined):Boolean{
            var evt:* = evt;
            var BetRisen:* = function (){
                if ((int(actor[LBL_HUTMANN_GOLDBET].text) + int(actor[LBL_HUTMANN_MUSHBET].text)) > 0){
                    SetBtnText(HUTMANN_OK, txt[TXT_HUTMANN_START]);
                    Add(HUTMANN_OK);
                    if ((((int(actor[LBL_HUTMANN_GOLDBET].text) >= (50 * int(GetSpendAmount())))) or ((int(actor[LBL_HUTMANN_MUSHBET].text) >= 20)))){
                        actor[LBL_HUTMANN_TEXT].text = txt[TXT_HUTMANN_BETCOMMENT3];
                        Add(HUTFACE_LOSE3);
                    } else {
                        if ((((int(actor[LBL_HUTMANN_GOLDBET].text) >= (10 * int(GetSpendAmount())))) or ((int(actor[LBL_HUTMANN_MUSHBET].text) >= 10)))){
                            actor[LBL_HUTMANN_TEXT].text = txt[TXT_HUTMANN_BETCOMMENT2];
                            Add(HUTFACE_WIN);
                        } else {
                            actor[LBL_HUTMANN_TEXT].text = txt[TXT_HUTMANN_BETCOMMENT1];
                            Add(HUTFACE_WIN);
                        };
                    };
                    actor[LBL_HUTMANN_TEXT].x = (SCREEN_TITLE_X - (actor[LBL_HUTMANN_TEXT].textWidth / 2));
                    HutFaceResetTimer.stop();
                    HutFaceResetTimer.start();
                };
            };
            Remove(HUTBECHER_1_CLICK, HUTBECHER_2_CLICK, HUTBECHER_3_CLICK);
            AddSome(HUTBECHER_1_IDLE, HUTBECHER_2_IDLE, HUTBECHER_3_IDLE);
            switch (GetActorID(evt.target)){
                case HUTMANN_GOLDBET:
                    if (int((int(Savegame[SG_GOLD]) / 100)) > int(actor[LBL_HUTMANN_GOLDBET2].text)){
                        actor[LBL_HUTMANN_GOLDBET].text = String((int(actor[LBL_HUTMANN_GOLDBET].text) + int(actor[LBL_HUTMANN_GOLDBET2].text)));
                        BetRisen();
                    } else {
                        var _local3 = actor[LBL_HUTMANN_TEXT];
                        with (_local3) {
                            text = txt[TXT_HUTMANN_CANTAFFORD];
                            x = (SCREEN_TITLE_X - (textWidth / 2));
                        };
                        Add(HUTFACE_LOSE2);
                        HutFaceResetTimer.stop();
                        HutFaceResetTimer.start();
                        if (HutBtnRepeatTimer.running){
                            DestroyHutBtnTimer = true;
                        };
                        return (false);
                    };
                    break;
                case HUTMANN_MUSHBET:
                    if (int(Savegame[SG_MUSH]) > int(actor[LBL_HUTMANN_MUSHBET2].text)){
                        actor[LBL_HUTMANN_MUSHBET].text = String((int(actor[LBL_HUTMANN_MUSHBET].text) + int(actor[LBL_HUTMANN_MUSHBET2].text)));
                        BetRisen();
                    } else {
                        _local3 = actor[LBL_HUTMANN_TEXT];
                        with (_local3) {
                            text = txt[TXT_HUTMANN_CANTAFFORD];
                            x = (SCREEN_TITLE_X - (textWidth / 2));
                        };
                        Add(HUTFACE_LOSE2);
                        HutFaceResetTimer.stop();
                        HutFaceResetTimer.start();
                        if (HutBtnRepeatTimer.running){
                            DestroyHutBtnTimer = true;
                        };
                        return (false);
                    };
                    break;
                case HUTMANN_OK:
                    if (((((int(actor[LBL_HUTMANN_GOLDBET].text) + int(actor[LBL_HUTMANN_MUSHBET].text)) > 0)) and (OnStage(HUTMANN_GOLDBET)))){
                        Remove(HUTMANN_OK, HUTMANN_PLACEBET);
                        Add(HUTMANN_BECHERCHOOSE);
                        PlaceHutBet(true);
                        HutFaceResetTimer.stop();
                        _local3 = actor[LBL_HUTMANN_TEXT];
                        with (_local3) {
                            text = txt[TXT_HUTMANN_CHOOSECUP];
                            x = (SCREEN_TITLE_X - (textWidth / 2));
                        };
                    } else {
                        Remove(HUTMANN_OK);
                        Add(HUTMANN_PLACEBET);
                        if (int(Savegame[SG_FIRST_PAYMENT]) == 0){
                            Remove(HUTMANN_MUSHBET);
                        };
                        actor[LBL_HUTMANN_GOLDBET].text = "0";
                        actor[LBL_HUTMANN_MUSHBET].text = "0";
                        PlaceHutBet();
                        _local3 = actor[LBL_HUTMANN_TEXT];
                        with (_local3) {
                            text = txt[TXT_HUTMANN_NEWGAME];
                            x = (SCREEN_TITLE_X - (textWidth / 2));
                        };
                    };
                    break;
            };
            return (true);
        };
        ChooseCup = function (evt:Event=undefined){
            Remove(HUTMANN_BECHERCHOOSE);
            Add(HUTFACE_HOVER);
            CupChosen = (GetActorID(evt.target) - CA_HUTBECHER_1);
            SendAction(ACT_PLACE_BET, String((int(actor[LBL_HUTMANN_GOLDBET].text) * 100)), actor[LBL_HUTMANN_MUSHBET].text);
        };
        var PlaceHutBet:* = function (LeftToCenter:Boolean=false){
            var LeftBoxWidth:* = 0;
            var RightBoxWidth:* = 0;
            var LeftToCenter:Boolean = LeftToCenter;
            RightBoxWidth = ((((actor[HUTMANN_GOLDBET].width + GILDE_GOLDMUSH_C1) + actor[LBL_HUTMANN_GOLDBET2].textWidth) + GILDE_GOLDMUSH_C1) + actor[HUTMANN_GOLDBET2].width);
            if (((((actor[HUTMANN_MUSHBET].width + GILDE_GOLDMUSH_C1) + actor[LBL_HUTMANN_MUSHBET2].textWidth) + GILDE_GOLDMUSH_C1) + actor[HUTMANN_MUSHBET2].width) > RightBoxWidth){
                RightBoxWidth = ((((actor[HUTMANN_MUSHBET].width + GILDE_GOLDMUSH_C1) + actor[LBL_HUTMANN_MUSHBET2].textWidth) + GILDE_GOLDMUSH_C1) + actor[HUTMANN_MUSHBET2].width);
            };
            actor[HUTMANN_GOLDBET].x = ((GILDE_GOLDMUSH_X + GILDE_GOLDMUSH_C2) - int((RightBoxWidth / 2)));
            actor[HUTMANN_MUSHBET].x = actor[HUTMANN_GOLDBET].x;
            actor[HUTMANN_MUSHBET_DISABLED].x = actor[HUTMANN_GOLDBET].x;
            actor[LBL_HUTMANN_GOLDBET2].x = ((actor[HUTMANN_GOLDBET].x + actor[HUTMANN_GOLDBET].width) + GILDE_GOLDMUSH_C1);
            actor[LBL_HUTMANN_MUSHBET2].x = ((actor[HUTMANN_MUSHBET].x + actor[HUTMANN_MUSHBET].width) + GILDE_GOLDMUSH_C1);
            actor[HUTMANN_GOLDBET2].x = ((actor[LBL_HUTMANN_GOLDBET2].x + actor[LBL_HUTMANN_GOLDBET2].textWidth) + GILDE_GOLDMUSH_C1);
            actor[HUTMANN_MUSHBET2].x = ((actor[LBL_HUTMANN_MUSHBET2].x + actor[LBL_HUTMANN_MUSHBET2].textWidth) + GILDE_GOLDMUSH_C1);
            var _local3 = actor[LBL_HUTMANN_GOLDBET];
            with (_local3) {
                LeftBoxWidth = ((textWidth + GILDE_GOLDMUSH_C1) + actor[HUTMANN_GOLDBET].width);
            };
            _local3 = actor[LBL_HUTMANN_MUSHBET];
            with (_local3) {
                if (((textWidth + GILDE_GOLDMUSH_C1) + actor[HUTMANN_MUSHBET].width) > LeftBoxWidth){
                    LeftBoxWidth = ((textWidth + GILDE_GOLDMUSH_C1) + actor[HUTMANN_MUSHBET].width);
                };
                actor[HUTMANN_MUSHBET].x = ((LeftToCenter) ? SCREEN_TITLE_X : (GILDE_GOLDMUSH_X - int((LeftBoxWidth / 2))));
                actor[HUTMANN_GOLDBET].x = actor[HUTMANN_MUSHBET].x;
                actor[LBL_HUTMANN_GOLDBET].x = ((actor[HUTMANN_GOLDBET].x + actor[HUTMANN_GOLDBET].width) + GILDE_GOLDMUSH_C1);
                x = ((actor[HUTMANN_MUSHBET].x + actor[HUTMANN_MUSHBET].width) + GILDE_GOLDMUSH_C1);
            };
        };
        RequestToilet = function (evt:Event=undefined){
            SendAction(ACT_SCREEN_TOILET);
        };
        ShowHutmann = function (evt:Event=undefined){
            var doShowHutmann:* = null;
            var evt:* = evt;
            doShowHutmann = function (){
                RemoveAll();
                var _local2 = actor[LBL_HUTMANN_TEXT];
                with (_local2) {
                    text = txt[TXT_HUTMANN_OFFER];
                    x = (SCREEN_TITLE_X - (textWidth / 2));
                };
                if (PresetGold > int((int(Savegame[SG_GOLD]) / 100))){
                    PresetGold = int((int(Savegame[SG_GOLD]) / 100));
                };
                if (PresetMush > int(Savegame[SG_MUSH])){
                    PresetMush = int(Savegame[SG_MUSH]);
                };
                if (int(Savegame[SG_FIRST_PAYMENT]) == 0){
                    PresetMush = 0;
                };
                actor[LBL_HUTMANN_GOLDBET].text = String(PresetGold);
                actor[LBL_HUTMANN_MUSHBET].text = String(PresetMush);
                SetCnt(HUTMANN_GOLDBET, IF_GOLD);
                SetCnt(HUTMANN_GOLDBET2, IF_GOLD);
                SetCnt(HUTMANN_MUSHBET, IF_PILZE);
                SetCnt(HUTMANN_MUSHBET2, IF_PILZE);
                PlaceHutBet();
                Add(SCREEN_HUTMANN);
                if ((((PresetGold > 0)) or ((PresetMush > 0)))){
                    Add(HUTMANN_OK);
                };
                PresetGold = 0;
                PresetMush = 0;
                if (int(Savegame[SG_ACTION_STATUS]) != 0){
                    Remove(HUTMANN_BACK);
                };
                if (int(Savegame[SG_FIRST_PAYMENT]) == 0){
                    Remove(HUTMANN_MUSHBET);
                };
            };
            Load(SCREEN_HUTMANN);
            Load(HUTBECHER_1_HOVER, HUTBECHER_1_HOVER, HUTBECHER_1_HOVER);
            actor[LBL_HUTMANN_GOLDBET2].text = GetSpendAmount();
            WhenLoaded(doShowHutmann);
        };
        BuyBeer = function (evt:Event=undefined){
            SendAction(ACT_BUY_BEER);
        };
        ShowBeerOffer = function (evt:Event=undefined){
            var i:* = 0;
            var canBuy:* = false;
            var tooHealthy:* = false;
            var evt:* = evt;
            canBuy = (int(Savegame[SG_BEERS]) < 10);
            if (Savegame[((SG_INVENTORY_OFFS + (SG_ITM_SIZE * 5)) + SG_ITM_EXT_ENCHANT)] == 71){
                canBuy = (int(Savegame[SG_BEERS]) < 11);
            };
            tooHealthy = false;
            specialActionHint = true;
            Remove(TAVERNE_BARKEEPER_HINT);
            if (((canBuy) and ((int(Savegame[SG_TIMEBAR]) > (80 * 60))))){
                canBuy = false;
                tooHealthy = true;
            };
            RefreshTimeBar(((canBuy) ? (20 * 60) : 0));
            Remove(TAVERNE_CAS);
            Add(BEEROFFER);
            EnablePopup(QO_REWARDGOLD);
            EnablePopup(QO_REWARDSILVER);
            EnablePopup(LBL_QO_REWARDGOLD);
            EnablePopup(LBL_QO_REWARDSILVER);
            EnablePopup(LBL_QO_REWARDEXP);
            if (!txt[TXT_BEERFEST_TITLE_TOOHEALTHY]){
                txt[TXT_BEERFEST_TITLE_TOOHEALTHY] = "Beerfest!";
                txt[TXT_BEERFEST_TITLE_OK] = "Beerfest!";
                txt[TXT_BEERFEST_TEXT_TOOHEALTHY] = txt[TXT_BO_TEXT_TOOHEALTHY];
                txt[TXT_BEERFEST_TEXT_OK] = txt[TXT_BO_TEXT_OK];
            };
            var _local3 = actor[LBL_QO_QUESTNAME];
            with (_local3) {
                if (beerFest){
                    text = txt[((tooHealthy) ? TXT_BEERFEST_TITLE_TOOHEALTHY : ((canBuy) ? TXT_BEERFEST_TITLE_OK : TXT_BO_TITLE_NO))];
                } else {
                    if (specialAction > 0){
                        text = txt[((((canBuy) or (tooHealthy))) ? ((TXT_SPECIAL_ACTION_TITLE + specialAction) - 1) : TXT_BO_TITLE_NO)];
                    } else {
                        text = txt[((canBuy) ? TXT_BO_TITLE_OK : ((tooHealthy) ? TXT_BO_TITLE_TOOHEALTHY : TXT_BO_TITLE_NO))];
                    };
                };
                x = ((QO_BLACK_SQUARE_X + QO_QUESTNAME_X) - int((textWidth / 2)));
            };
            _local3 = actor[LBL_QO_QUESTTEXT];
            with (_local3) {
                if (beerFest){
                    text = txt[((tooHealthy) ? TXT_BEERFEST_TEXT_TOOHEALTHY : ((canBuy) ? TXT_BEERFEST_TEXT_OK : TXT_BO_TEXT_NO))];
                } else {
                    if (specialAction > 0){
                        text = txt[((canBuy) ? ((TXT_SPECIAL_ACTION_TEXT_OK + specialAction) - 1) : ((tooHealthy) ? ((TXT_SPECIAL_ACTION_TEXT_TOOHEALTHY + specialAction) - 1) : TXT_BO_TEXT_NO))];
                    } else {
                        text = txt[((canBuy) ? TXT_BO_TEXT_OK : ((tooHealthy) ? TXT_BO_TEXT_TOOHEALTHY : TXT_BO_TEXT_NO))];
                    };
                };
            };
            Arabize(LBL_QO_QUESTTEXT);
            actor[LBL_QO_REWARDEXP].text = ((canBuy) ? txt[TXT_BO_TIME] : "");
            if (Savegame[((SG_INVENTORY_OFFS + (SG_ITM_SIZE * 5)) + SG_ITM_EXT_ENCHANT)] == 71){
                if (textDir == "right"){
                    actor[LBL_QO_TIME].text = ((("11/" + Savegame[SG_BEERS]) + " ") + txt[TXT_BO_BOUGHT]);
                } else {
                    actor[LBL_QO_TIME].text = (((txt[TXT_BO_BOUGHT] + " ") + Savegame[SG_BEERS]) + "/11");
                };
            } else {
                if (textDir == "right"){
                    actor[LBL_QO_TIME].text = ((("10/" + Savegame[SG_BEERS]) + " ") + txt[TXT_BO_BOUGHT]);
                } else {
                    actor[LBL_QO_TIME].text = (((txt[TXT_BO_BOUGHT] + " ") + Savegame[SG_BEERS]) + "/10");
                };
            };
            if (beerFest){
                SetBtnText(BO_BUY, txt[TXT_BO_BUY_FREE]);
            } else {
                SetBtnText(BO_BUY, txt[TXT_BO_BUY]);
            };
            if (!canBuy){
                Remove(BO_BUY);
            };
            Add(((canBuy) ? BO_PORTRAIT_OK : ((tooHealthy) ? BO_PORTRAIT_TH : BO_PORTRAIT_NO)));
        };
        TimeBarAniEvent = function (evt:Event=undefined){
            var evt:* = evt;
            if (OnStage(TIMEBAR_FILL)){
                TimeBarAniTimer.delay = 20;
                timeBarAni = (timeBarAni + 0.2);
                if (timeBarAni > (2 * Math.PI)){
                    timeBarAni = 0;
                };
                var _local3 = actor[TIMEBAR_FILL];
                with (_local3) {
                    alpha = ((Math.sin(timeBarAni) * 0.2) + 0.5);
                };
            } else {
                TimeBarAniTimer.delay = 500;
            };
        };
        ShowQuestOffer = function (evt:Event=undefined){
            var i:int;
            var enoughTime:Boolean;
            var highStakes:Boolean;
            i = 0;
            while (i < 3) {
                highStakes = false;
                switch (Math.abs(int(Savegame[(SG_QUEST_OFFER_ENEMY1 + i)]))){
                    case 139:
                    case 145:
                    case 148:
                    case 152:
                    case 155:
                    case 157:
                        highStakes = true;
                        break;
                };
                enoughTime = (int(Savegame[(SG_QUEST_OFFER_DURATION1 + i)]) <= int(Savegame[SG_TIMEBAR]));
                if (highStakes){
                    if (enoughTime){
                        actor[(LBL_QO_CHOICE1 + i)].defaultTextFormat = FontFormat_HighStakes;
                        actor[(LBL_QO_CHOICE1_HL + i)].defaultTextFormat = FontFormat_HighStakesHighLight;
                    } else {
                        actor[(LBL_QO_CHOICE1 + i)].defaultTextFormat = FontFormat_HighStakesGrayed;
                        actor[(LBL_QO_CHOICE1_HL + i)].defaultTextFormat = FontFormat_HighStakesHighLightGrayed;
                    };
                } else {
                    if (enoughTime){
                        actor[(LBL_QO_CHOICE1 + i)].defaultTextFormat = FontFormat_Default;
                        actor[(LBL_QO_CHOICE1_HL + i)].defaultTextFormat = FontFormat_Highlight;
                    } else {
                        actor[(LBL_QO_CHOICE1 + i)].defaultTextFormat = FontFormat_Grayed;
                        actor[(LBL_QO_CHOICE1_HL + i)].defaultTextFormat = FontFormat_GrayedHighLight;
                    };
                };
                actor[(LBL_QO_CHOICE1 + i)].text = GetQuestTitle(i);
                actor[(LBL_QO_CHOICE1_HL + i)].text = GetQuestTitle(i);
                Hide((LBL_QO_CHOICE1_HL + i));
                if (textDir == "right"){
                    actor[LBL_QO_CHOOSE].x = (((QO_BLACK_SQUARE_X + QO_CHOOSE_X) + 140) - actor[LBL_QO_CHOOSE].textWidth);
                    actor[(QO_CHOICE1 + i)].x = (((QO_BLACK_SQUARE_X + QO_CHOOSE_X) + 140) - actor[(LBL_QO_CHOICE1 + i)].textWidth);
                };
                i++;
            };
            SelectQuestOffer(-1);
            Remove(TAVERNE_CAS);
            Add(QUESTOFFER);
            Add((QO_PORTRAIT1 + GetQuestRandom(0, 5)));
        };
        ReturnQuest = function (evt:Event=undefined){
            actor[QUEST_SLOT].alpha = 1;
            forceAdventure = false;
            Add(TAVERNE_CAS);
            Remove(QUESTOFFER);
            Remove(BEEROFFER);
            RefreshTimeBar();
        };

        var ChooseQuest:* = function (evt:Event=undefined){
            var questID:int;
            questID = (GetActorID(evt.target) - QO_CHOICE1);
            SelectQuestOffer(questID);
        };
        var SelectQuestOffer:* = function (questID:int){
            var i:* = 0;
            var rewardX:* = 0;
            var GoldBonusText:* = null;
            var questID:* = questID;
            SelectedQuest = questID;
            rewardX = ((QO_BLACK_SQUARE_X + QO_QUESTTEXT_X) + (((textDir == "right")) ? 130 : 0));
            GoldBonusText = "";
            if ((int(Savegame[SG_GOLD_BONUS]) > 0)){
                GoldBonusText = (txt[TXT_GOLDBONUS_PREFIX] + " ");
                if ((int(Savegame[SG_GOLD_BONUS]) > 0)){
                    GoldBonusText = (((GoldBonusText + Savegame[SG_GOLD_BONUS]) + "% ") + txt[TXT_GOLDBONUS_SUFFIX]);
                    if (towerLevel > 0){
                        GoldBonusText = ((((GoldBonusText + " + ") + String(towerLevel)) + "% ") + txt[TXT_TOWER_BONUS]);
                    };
                };
            };
            i = 0;
            while (i < 3) {
                actor[(LBL_QO_CHOICE1_HL + i)].visible = (i == questID);
                actor[(LBL_QO_CHOICE1 + i)].visible = !((i == questID));
                i = (i + 1);
            };
            var _local3 = actor[LBL_QO_QUESTNAME];
            with (_local3) {
                text = ((questID)==-1) ? txt[(TXT_QUEST_OFFER_TITLE + GetQuestRandom(0, 5))] : GetQuestTitle(questID);
                x = ((QO_BLACK_SQUARE_X + QO_QUESTNAME_X) - int((textWidth / 2)));
            };
            actor[LBL_QO_QUESTTEXT].text = ((questID)==-1) ? txt[(TXT_QUEST_OFFER_TEXT + GetQuestRandom(0, 5))] : GetQuestText(questID);
            Arabize(LBL_QO_QUESTTEXT);
            if (questID == -1){
                Hide(QO_REWARDGOLD, LBL_QO_REWARDGOLD, QO_REWARDSILVER, LBL_QO_REWARDSILVER);
                Hide(LBL_QO_REWARD);
                Hide(QO_START);
                actor[LBL_QO_REWARDEXP].text = "";
                actor[LBL_QO_TIME].text = "";
                SetCnt(QUEST_SLOT, C_EMPTY);
                EnablePopup(FIGHT_SLOT);
            } else {
                Show(LBL_QO_REWARD);
                Show(QO_START);
                Hide(QO_REWARDGOLD, LBL_QO_REWARDGOLD, QO_REWARDSILVER, LBL_QO_REWARDSILVER);
                if (textDir == "right"){
                    actor[LBL_QO_REWARD].x = (rewardX - actor[LBL_QO_REWARD].textWidth);
                };
                if (GoldAnteil(Savegame[(SG_QUEST_OFFER_GOLD1 + questID)]) > 0){
                    _local3 = actor[QO_REWARDGOLD];
                    with (_local3) {
                        visible = true;
                        if (textDir == "right"){
                            x = (rewardX - width);
                            rewardX = (x - 8);
                        } else {
                            x = rewardX;
                            rewardX = ((x + width) + 8);
                        };
                    };
                    _local3 = actor[LBL_QO_REWARDGOLD];
                    with (_local3) {
                        visible = true;
                        text = GoldAnteil(Savegame[(SG_QUEST_OFFER_GOLD1 + questID)]);
                        if (textDir == "right"){
                            x = (rewardX - textWidth);
                            rewardX = (x - 8);
                        } else {
                            x = rewardX;
                            rewardX = ((x + textWidth) + 14);
                        };
                    };
                };
                if (SilberAnteil(Savegame[(SG_QUEST_OFFER_GOLD1 + questID)]) > 0){
                    _local3 = actor[QO_REWARDSILVER];
                    with (_local3) {
                        visible = true;
                        if (textDir == "right"){
                            x = (rewardX - width);
                            rewardX = (x - 8);
                        } else {
                            x = rewardX;
                            rewardX = ((x + width) + 8);
                        };
                    };
                    _local3 = actor[LBL_QO_REWARDSILVER];
                    with (_local3) {
                        visible = true;
                        text = SilberAnteil(Savegame[(SG_QUEST_OFFER_GOLD1 + questID)]);
                        if (textDir == "right"){
                            x = (rewardX - textWidth);
                            rewardX = (x - 8);
                        } else {
                            x = rewardX;
                            rewardX = ((x + textWidth) + 14);
                        };
                    };
                };
                if (textDir == "right"){
                    actor[LBL_QO_REWARDEXP].text = ((Savegame[(SG_QUEST_OFFER_EXP1 + questID)] + " :") + txt[TXT_EXP]);
                    actor[LBL_QO_REWARDEXP].x = (((QO_BLACK_SQUARE_X + QO_QUESTTEXT_X) + 130) - actor[LBL_QO_REWARDEXP].textWidth);
                } else {
                    actor[LBL_QO_REWARDEXP].text = ((txt[TXT_EXP] + ": ") + Savegame[(SG_QUEST_OFFER_EXP1 + questID)]);
                };
                if (int(Savegame[SG_EXP_BONUS]) > 0){
                    if (Math.round((((Savegame[SG_ALBUM] - 10000) / contentMax) * 100)) >= 1){
                        EnablePopup(LBL_QO_REWARDEXP, ((((((((txt[TXT_EXPBONUS_PREFIX] + " ") + Savegame[SG_EXP_BONUS]) + "% ") + txt[TXT_EXPBONUS_SUFFIX]) + " + ") + String(Math.round((((Savegame[SG_ALBUM] - 10000) / contentMax) * 100)))) + "% ") + txt[(TXT_COLLECTION + 1)]));
                    } else {
                        EnablePopup(LBL_QO_REWARDEXP, ((((txt[TXT_EXPBONUS_PREFIX] + " ") + Savegame[SG_EXP_BONUS]) + "% ") + txt[TXT_EXPBONUS_SUFFIX]));
                    };
                } else {
                    if (Math.round((((Savegame[SG_ALBUM] - 10000) / contentMax) * 100)) >= 1){
                        EnablePopup(LBL_QO_REWARDEXP, ((((txt[TXT_EXPBONUS_PREFIX] + " ") + String(Math.round((((Savegame[SG_ALBUM] - 10000) / contentMax) * 100)))) + "% ") + txt[(TXT_COLLECTION + 1)]));
                    } else {
                        EnablePopup(LBL_QO_REWARDEXP);
                    };
                };
                if (GoldBonusText != ""){
                    EnablePopup(QO_REWARDGOLD, GoldBonusText);
                    EnablePopup(QO_REWARDSILVER, GoldBonusText);
                    EnablePopup(LBL_QO_REWARDGOLD, GoldBonusText);
                    EnablePopup(LBL_QO_REWARDSILVER, GoldBonusText);
                } else {
                    EnablePopup(QO_REWARDGOLD);
                    EnablePopup(QO_REWARDSILVER);
                    EnablePopup(LBL_QO_REWARDGOLD);
                    EnablePopup(LBL_QO_REWARDSILVER);
                };
                if (int(Savegame[((SG_QUEST_OFFER_REWARD_ITM1 + (questID * SG_ITM_SIZE)) + SG_ITM_TYP)]) > 0){
                    SetCnt(QUEST_SLOT, GetItemID(SG_QUEST_OFFER_REWARD_ITM1, questID));
                    ItemPopup(QUEST_SLOT, (SG_QUEST_OFFER_REWARD_ITM1 + (questID * SG_ITM_SIZE)), undefined, false, false, false);
                } else {
                    SetCnt(QUEST_SLOT, C_EMPTY);
                    EnablePopup(FIGHT_SLOT);
                };
                if (textDir == "right"){
                    actor[LBL_QO_TIME].text = (((((String(int((int(Savegame[(SG_QUEST_OFFER_DURATION1 + questID)]) / 60))) + ":") + (((String(int((int(Savegame[(SG_QUEST_OFFER_DURATION1 + questID)]) % 60))).length == 1)) ? "0" : "")) + String(int((int(Savegame[(SG_QUEST_OFFER_DURATION1 + questID)]) % 60)))) + " :") + txt[TXT_DURATION]);
                    actor[LBL_QO_TIME].x = (((QO_BLACK_SQUARE_X + QO_QUESTTEXT_X) + 130) - actor[LBL_QO_TIME].textWidth);
                } else {
                    actor[LBL_QO_TIME].text = (((((txt[TXT_DURATION] + ": ") + String(int((int(Savegame[(SG_QUEST_OFFER_DURATION1 + questID)]) / 60)))) + ":") + (((String(int((int(Savegame[(SG_QUEST_OFFER_DURATION1 + questID)]) % 60))).length == 1)) ? "0" : "")) + String(int((int(Savegame[(SG_QUEST_OFFER_DURATION1 + questID)]) % 60))));
                };
                RefreshTimeBar(-(int(Savegame[(SG_QUEST_OFFER_DURATION1 + questID)])));
            };
        };
        RequestQuest = function (evt:Event=undefined){
            if (SelectedQuest >= 0){
                SendAction(ACT_QUEST_BEGIN, (SelectedQuest + 1), ((forceAdventure) ? 1 : 0));
            };
        };
        toiletChainAni = function (evt:TimerEvent){
            var i:int;
            if (toiletChainFrame >= 6){
                toiletChainTimer.stop();
                return;
            };
            i = 0;
            while (i < 3) {
                Hide((TOILET_CHAIN + i));
                i++;
            };
            if (toiletChainFrame <= 2){
                Show((TOILET_CHAIN + toiletChainFrame));
            } else {
                Show(((TOILET_CHAIN + 5) - toiletChainFrame));
            };
            toiletChainFrame++;
        };
        ToiletHandler = function (evt:Event=undefined){
            if (GetActorID(evt.target) == CA_TOILET_CHAIN){
                toiletChainFrame = 0;
                toiletChainTimer.start();
                Play(SND_TOILET_FLUSHTRY);
                SendAction(ACT_TOILET_FLUSH);
            };
        };
        SkipFight = function (evt:Event=undefined){
        };
        CheckLM = function (evt:Event=undefined){
            var req:URLRequest;
            Add(CB_LM_CHECKED);
            lightMode = true;
            so.data.lightMode = lightMode;
            so.flush();
            if (param_lowres_url != ""){
                req = new URLRequest("index.php");
                navigateToURL(req, "_self");
            };
        };
        UncheckLM = function (evt:Event=undefined){
            var req:URLRequest;
            Remove(CB_LM_CHECKED);
            lightMode = false;
            so.data.lightMode = lightMode;
            so.flush();
            if (param_lowres_url != ""){
                req = new URLRequest("index.php");
                navigateToURL(req, "_self");
            };
        };
        CheckCS = function (evt:Event=undefined){
            Add(CB_CS_CHECKED);
            chatSound = true;
            so.data.chatSound = chatSound;
            so.flush();
            Play(SND_ERROR);
        };
        UncheckCS = function (evt:Event=undefined){
            Remove(CB_CS_CHECKED);
            chatSound = false;
            so.data.chatSound = chatSound;
            so.flush();
        };
        CheckCompare = function (evt:Event=undefined){
            Add(CB_COMPARE_CHECKED);
            compareItems = true;
            so.data.compareItems = compareItems;
            so.flush();
        };
        UncheckCompare = function (evt:Event=undefined){
            Remove(CB_COMPARE_CHECKED);
            compareItems = false;
            so.data.compareItems = compareItems;
            so.flush();
        };
        CheckTV = function (evt:Event=undefined){
            Add(CB_TV_CHECKED);
            disableTV = true;
            so.data.disableTV = disableTV;
            so.flush();
        };
        UncheckTV = function (evt:Event=undefined){
            Remove(CB_TV_CHECKED);
            disableTV = false;
            so.data.disableTV = disableTV;
            so.flush();
        };
        VolumeChange = function (value:int):void{
            var value:* = value;
            if (notFirstVolChange){
                notFirstVolChange = false;
                if (so.data.volume == undefined){
                    so.data.volume = 5;
                };
                so.flush();
                SetVolume((so.data.volume / 10));
                SetSliderValue(SLDR_OPTION_VOLUME, (so.data.volume + 1));
            } else {
                so.data.volume = (value - 1);
                so.flush();
                SetVolume((so.data.volume / 10));
                if (notSecondVolChange){
                    notSecondVolChange = false;
                } else {
                    Play(SND_TEST);
                };
            };
            var _local3 = actor[LBL_OPTION_VOLUME];
            with (_local3) {
                if (textDir == "right"){
                    text = (((so.data.volume == 0)) ? txt[TXT_MUTE] : ((String((so.data.volume * 10)) + "% ") + txt[TXT_VOLUME]));
                } else {
                    text = (((so.data.volume == 0)) ? txt[TXT_MUTE] : (((txt[TXT_VOLUME] + " ") + String((so.data.volume * 10))) + "%"));
                };
                x = (((OPTION_X + 250) + int((OPTION_X / 2))) - int((textWidth / 2)));
            };
        };
        ChooseLanguageIcon = function (evt:MouseEvent){
            var req:URLRequest;
            so.data.lang_code = param_languages[(GetActorID(evt.target) - OPTION_FLAG)];
            so.flush();
            trc("Language set:", so.data.lang_code);
            req = new URLRequest("index.php");
            navigateToURL(req, "_self");
        };
        OptionBtnHandler = function (evt:Event){
            Hide(CHANGE_PASSWORD_SMILEY_SAD);
            Hide(CHANGE_PASSWORD_SMILEY_NEUTRAL);
            Hide(CHANGE_PASSWORD_SMILEY_HAPPY);
            if ((evt is KeyboardEvent)){
                if (((((!((KeyboardEvent(evt).keyCode == 13))) and (!((KeyboardEvent(evt).keyCode == 10))))) and (!((KeyboardEvent(evt).keyCode == 16777230))))){
                    return;
                };
            };
            Remove(LUXURY_SELLER);
            switch (GetActorID(evt.target)){
                case OPTION_LUXURY:
                    Remove(OPTION_DOCHANGE);
                    optionMenuSelect = 6;
                    actor[LBL_OPTION_DOCHANGE].text = txt[TXT_LUXURY_TITLE];
                    actor[LBL_OPTION_FIELD1].text = txt[TXT_LUXURY_TEXT];
                    SetBtnText(OPTION_DOCHANGE, txt[TXT_LUXURY_BTN]);
                    Add(OPTION_DORESEND);
                    Add(LUXURY_SELLER);
                    if ((uint(Savegame[SG_NEW_FLAGS]) & 32)){
                        actor[LBL_OPTION_FIELD1].text = txt[TXT_LUXURY_ALREADY];
                        Remove(OPTION_DOCHANGE);
                    };
                    Arabize(LBL_OPTION_FIELD1);
                    break;
                case OPTION_CHANGE_NAME:
                    optionMenuSelect = 1;
                    actor[LBL_OPTION_DOCHANGE].text = txt[TXT_DOCHANGE_NAME_TITLE];
                    actor[LBL_OPTION_FIELD1].text = txt[TXT_DOCHANGE_NAME_FIELD_1];
                    actor[LBL_OPTION_FIELD2].text = txt[TXT_DOCHANGE_NAME_FIELD_2];
                    actor[LBL_OPTION_FIELD3].text = txt[TXT_DOCHANGE_NAME_FIELD_3];
                    SetBtnText(OPTION_DOCHANGE, txt[TXT_DOCHANGENAME]);
                    actor[INP_OPTION_FIELD1].getChildAt(1).text = "";
                    actor[INP_OPTION_FIELD2].getChildAt(1).text = "";
                    actor[INP_OPTION_FIELD3].getChildAt(1).text = "";
                    actor[INP_OPTION_FIELD1].getChildAt(1).displayAsPassword = true;
                    actor[INP_OPTION_FIELD2].getChildAt(1).displayAsPassword = false;
                    actor[INP_OPTION_FIELD3].getChildAt(1).displayAsPassword = false;
                    Add(OPTION_DOCHANGE);
                    break;
                case OPTION_CHANGE_EMAIL:
                    optionMenuSelect = 2;
                    actor[LBL_OPTION_DOCHANGE].text = txt[TXT_DOCHANGE_EMAIL_TITLE];
                    actor[LBL_OPTION_FIELD1].text = txt[TXT_DOCHANGE_EMAIL_FIELD_1];
                    if (Savegame[SG_EMAIL_VALID] == 1){
                        actor[LBL_OPTION_FIELD2].text = ((txt[TXT_OLD_EMAIL]) ? txt[TXT_OLD_EMAIL] : "Old E-Mail:");
                        actor[LBL_OPTION_FIELD3].text = txt[TXT_DOCHANGE_EMAIL_FIELD_2];
                    } else {
                        actor[LBL_OPTION_FIELD2].text = txt[TXT_DOCHANGE_EMAIL_FIELD_2];
                        actor[LBL_OPTION_FIELD3].text = txt[TXT_DOCHANGE_EMAIL_FIELD_3];
                    };
                    SetBtnText(OPTION_DOCHANGE, txt[TXT_DOCHANGE]);
                    actor[INP_OPTION_FIELD1].getChildAt(1).text = "";
                    actor[INP_OPTION_FIELD2].getChildAt(1).text = "";
                    actor[INP_OPTION_FIELD3].getChildAt(1).text = "";
                    actor[INP_OPTION_FIELD1].getChildAt(1).displayAsPassword = true;
                    actor[INP_OPTION_FIELD2].getChildAt(1).displayAsPassword = false;
                    actor[INP_OPTION_FIELD3].getChildAt(1).displayAsPassword = false;
                    Add(OPTION_DOCHANGE);
                    break;
                case OPTION_CHANGE_PASSWORD:
                    optionMenuSelect = 3;
                    actor[LBL_OPTION_DOCHANGE].text = txt[TXT_DOCHANGE_PASSWORD_TITLE];
                    actor[LBL_OPTION_FIELD1].text = txt[TXT_DOCHANGE_PASSWORD_FIELD_1];
                    actor[LBL_OPTION_FIELD2].text = txt[TXT_DOCHANGE_PASSWORD_FIELD_2];
                    actor[LBL_OPTION_FIELD3].text = txt[TXT_DOCHANGE_PASSWORD_FIELD_3];
                    SetBtnText(OPTION_DOCHANGE, txt[TXT_DOCHANGE]);
                    actor[INP_OPTION_FIELD1].getChildAt(1).text = "";
                    actor[INP_OPTION_FIELD2].getChildAt(1).text = "";
                    actor[INP_OPTION_FIELD3].getChildAt(1).text = "";
                    actor[INP_OPTION_FIELD1].getChildAt(1).displayAsPassword = true;
                    actor[INP_OPTION_FIELD2].getChildAt(1).displayAsPassword = true;
                    actor[INP_OPTION_FIELD3].getChildAt(1).displayAsPassword = true;
                    Add(OPTION_DOCHANGE);
                    break;
                case OPTION_DELETE:
                    optionMenuSelect = 4;
                    actor[LBL_OPTION_DOCHANGE].text = txt[TXT_DELETE_ACCOUNT_TITLE];
                    actor[LBL_OPTION_FIELD1].text = txt[TXT_DELETE_ACCOUNT_FIELD_1];
                    actor[LBL_OPTION_FIELD2].text = txt[TXT_DELETE_ACCOUNT_FIELD_2];
                    actor[LBL_OPTION_FIELD3].text = txt[TXT_DELETE_ACCOUNT_FIELD_3];
                    SetBtnText(OPTION_DOCHANGE, txt[TXT_DOCHANGE]);
                    actor[INP_OPTION_FIELD1].getChildAt(1).text = "";
                    actor[INP_OPTION_FIELD2].getChildAt(1).text = "";
                    actor[INP_OPTION_FIELD3].getChildAt(1).text = "";
                    actor[INP_OPTION_FIELD1].getChildAt(1).displayAsPassword = true;
                    actor[INP_OPTION_FIELD2].getChildAt(1).displayAsPassword = true;
                    actor[INP_OPTION_FIELD3].getChildAt(1).displayAsPassword = false;
                    Add(OPTION_DOCHANGE);
                    break;
                case OPTION_RESEND:
                    Remove(OPTION_DOCHANGE);
                    optionMenuSelect = 5;
                    actor[LBL_OPTION_DOCHANGE].text = txt[TXT_RESEND_TITLE];
                    actor[LBL_OPTION_FIELD1].text = txt[TXT_RESEND_TEXT];
                    SetBtnText(OPTION_DOCHANGE, txt[TXT_RESEND_BTN2]);
                    Add(OPTION_DORESEND);
                    if (int(Savegame[SG_EMAIL_VALID]) == 1){
                        actor[LBL_OPTION_FIELD1].text = txt[TXT_ALREADY_VALID];
                        Remove(OPTION_DOCHANGE);
                    };
                    Arabize(LBL_OPTION_FIELD1);
                    break;
                case OPTION_CHANGEIMG:
                    ShowBuildCharacterScreen(evt);
                    break;
                default:
                    switch (optionMenuSelect){
                        case 1:
                            if (actor[INP_OPTION_FIELD2].getChildAt(1).text == actor[INP_OPTION_FIELD3].getChildAt(1).text){
                                SendAction(ACT_CHANGE_NAME, actor[INP_NAME].getChildAt(1).text, actor[INP_OPTION_FIELD1].getChildAt(1).text, actor[INP_OPTION_FIELD2].getChildAt(1).text, actor[INP_OPTION_FIELD3].getChildAt(1).text);
                                optionNewData = actor[INP_OPTION_FIELD2].getChildAt(1).text;
                            } else {
                                ErrorMessage(txt[TXT_ERROR_NAME_MISMATCH]);
                            };
                            break;
                        case 2:
                            if ((((actor[INP_OPTION_FIELD2].getChildAt(1).text == actor[INP_OPTION_FIELD3].getChildAt(1).text)) or ((Savegame[SG_EMAIL_VALID] == 1)))){
                                SendAction(ACT_CHANGE_MAIL, actor[INP_NAME].getChildAt(1).text, actor[INP_OPTION_FIELD1].getChildAt(1).text, actor[INP_OPTION_FIELD2].getChildAt(1).text, actor[INP_OPTION_FIELD3].getChildAt(1).text);
                                optionNewData = actor[INP_OPTION_FIELD2].getChildAt(1).text;
                            } else {
                                ErrorMessage(txt[TXT_ERROR_EMAIL_MISMATCH]);
                            };
                            break;
                        case 3:
                            if (actor[INP_OPTION_FIELD2].getChildAt(1).text == actor[INP_OPTION_FIELD3].getChildAt(1).text){
                                SendAction(ACT_CHANGE_PASS, actor[INP_NAME].getChildAt(1).text, actor[INP_OPTION_FIELD1].getChildAt(1).text, actor[INP_OPTION_FIELD2].getChildAt(1).text, actor[INP_OPTION_FIELD3].getChildAt(1).text);
                                optionNewData = actor[INP_OPTION_FIELD2].getChildAt(1).text;
                            } else {
                                ErrorMessage(txt[TXT_ERROR_PASSWORD_MISMATCH]);
                            };
                            break;
                        case 4:
                            if (actor[INP_OPTION_FIELD1].getChildAt(1).text == actor[INP_OPTION_FIELD2].getChildAt(1).text){
                                SendAction(ACT_DELETE_ACCOUNT, actor[INP_NAME].getChildAt(1).text, actor[INP_OPTION_FIELD1].getChildAt(1).text, actor[INP_OPTION_FIELD3].getChildAt(1).text.toLowerCase());
                            } else {
                                ErrorMessage(txt[TXT_ERROR_PASSWORD_MISMATCH]);
                            };
                            break;
                        case 5:
                            ResendConfirmationEmail();
                            break;
                        case 6:
                            Remove(OPTION_DOCHANGE);
                            optionMenuSelect = 7;
                            actor[LBL_OPTION_DOCHANGE].text = txt[TXT_LUXURY_TITLE];
                            actor[LBL_OPTION_FIELD1].text = txt[TXT_LUXURY_CONFIRM];
                            SetBtnText(OPTION_DOCHANGE, txt[TXT_LUXURY_BTN2]);
                            Add(OPTION_DORESEND);
                            Add(LUXURY_SELLER);
                            Arabize(LBL_OPTION_FIELD1);
                            break;
                        case 7:
                            Remove(OPTION_DOCHANGE);
                            optionMenuSelect = 8;
                            actor[LBL_OPTION_DOCHANGE].text = txt[TXT_LUXURY_TITLE];
                            actor[LBL_OPTION_FIELD1].text = txt[TXT_LUXURY_CONFIRM2];
                            SetBtnText(OPTION_DOCHANGE, txt[TXT_LUXURY_BTN3]);
                            Add(OPTION_DORESEND);
                            Add(LUXURY_SELLER);
                            Arabize(LBL_OPTION_FIELD1);
                            break;
                        case 8:
                            SendAction(ACT_BUY_LUXURY);
                            break;
                    };
                    break;
                case OPTION_CHANGEIMG:
            };
            if (textDir == "right"){
                actor[LBL_OPTION_DOCHANGE].x = ((OPTION_X + OPTION_VER_X) - actor[LBL_OPTION_DOCHANGE].textWidth);
                actor[LBL_OPTION_FIELD1].width = 385;
                actor[LBL_OPTION_FIELD2].x = ((OPTION_X + OPTION_VER_X) - actor[LBL_OPTION_FIELD2].textWidth);
                actor[LBL_OPTION_FIELD3].x = ((OPTION_X + OPTION_VER_X) - actor[LBL_OPTION_FIELD3].textWidth);
                actor[INP_OPTION_FIELD1].x = (OPTION_X + OPTION_DOCHANGE_LABEL_X);
                actor[INP_OPTION_FIELD2].x = (OPTION_X + OPTION_DOCHANGE_LABEL_X);
                actor[INP_OPTION_FIELD3].x = (OPTION_X + OPTION_DOCHANGE_LABEL_X);
            };
        };
        RequestMainQuest = function (evt:Event=undefined){
            var evt:* = evt;
            if (WaitingFor(Savegame[SG_MQ_REROLL_TIME])){
                if (int(actor[LBL_IF_PILZE].text) <= 0){
                    return;
                };
                var _local3 = actor[LBL_IF_PILZE];
                with (_local3) {
                    text = String((int(Savegame[SG_MUSH]) - 1));
                    x = ((IF_LBL_GOLDPILZE_X - textWidth) - 10);
                };
            };
            EnablePopup(LBL_IF_PILZE);
            if (SelectedDungeon == 100){
                SendAction(ACT_TOWER_TRY, String((towerLevel + 1)), ((WaitingFor(Savegame[SG_MQ_REROLL_TIME])) ? 1 : 0));
            } else {
                SendAction(ACT_MAINQUEST, String((SelectedDungeon + 1)));
            };
        };
        var ResendConfirmationEmail:* = function (evt:Event=undefined){
            SendAction(ACT_RESEND_EMAIL);
        };
        attPriceLimitation = false;
        GoldKurve = new Array();
        TrueAttPreis = new Array();
        GoldKurve[1] = 25;
        GoldKurve[2] = 50;
        GoldKurve[3] = 75;
        i = 4;
        while (i <= 15000) {
            GoldKurve[i] = ((int(GoldKurve[(i - 1)]) + int((GoldKurve[int((i / 2))] / 3))) + int((GoldKurve[int((i / 3))] / 4)));
            GoldKurve[i] = int((GoldKurve[i] / 5));
            GoldKurve[i] = (GoldKurve[i] * 5);
            i = (i + 1);
        };
        i = 0;
        while (i <= 15000) {
            TrueAttPreis[i] = GoldKurve[int((1 + (i / 5)))];
            i = (i + 1);
        };
        i = 0;
        while (i <= 14996) {
            if (attPriceLimitation){
                TrueAttPreis[i] = 0x3B9ACA00;
            } else {
                TrueAttPreis[i] = ((((int(TrueAttPreis[i]) + int(TrueAttPreis[(i + 1)])) + int(TrueAttPreis[(i + 2)])) + int(TrueAttPreis[(i + 3)])) + int(TrueAttPreis[(i + 4)]));
                TrueAttPreis[i] = int((TrueAttPreis[i] / 5));
                TrueAttPreis[i] = int((TrueAttPreis[i] / 5));
                TrueAttPreis[i] = int((TrueAttPreis[i] * 5));
                if (TrueAttPreis[i] > 0x3B9ACA00){
                    TrueAttPreis[i] = 0x3B9ACA00;
                    attPriceLimitation = true;
                };
            };
            i = (i + 1);
        };
        i = 1;
        while (i <= 200) {
            GildeBuildingGold[i] = int((GoldKurve[(i * 2)] * 10));
            GildeBuildingGold[i] = (GildeBuildingGold[i] / 100);
            GildeBuildingGold[i] = int(GildeBuildingGold[i]);
            GildeBuildingGold[i] = (GildeBuildingGold[i] * 100);
            if (GildeBuildingGold[i] < 100){
                GildeBuildingGold[i] = 100;
            };
            if (i > 50){
                GildeBuildingGold[i] = (GildeBuildingGold[i] * 30);
                GildeBuildingPilz[i] = 0;
            } else {
                if (i > 25){
                    if (noMush){
                        GildeBuildingGold[i] = (GildeBuildingGold[i] * (i - 25));
                    };
                    GildeBuildingPilz[i] = ((noMush) ? 0 : ((i - 25) * 5));
                };
            };
            i = (i + 1);
        };
        DefineSnd(SND_CLICK, "res/sfx/click.mp3", true);
        DefineSnd(SND_ERROR, "res/sfx/error.mp3", false);
        DefineSnd(SND_JINGLE, "res/sfx/jingle.mp3", true);
        DefineImg(IF_BACKGROUND, (("res/gfx/if/login" + login_background_id) + ".jpg"), true, 280, 100);
        DefineFromClass(IF_LEFT, interface_left_jpg, 0, 100);
        DefineFromClass(IF_TOP, interface_top_jpg, 0, 0);
        DefineFromClass(IF_MAIN, interface_main_jpg, 280, 100);
        actor[IF_MAIN].mouseEnabled = false;
        DefineBunch(IF_MAIN, IF_BACKGROUND, IF_LEFT, IF_TOP, IF_MAIN, IF_IMPRESSUM, IF_FORUM, IF_AGB, IF_DATENSCHUTZ, IF_ANLEITUNG);
        if (shop_url != ""){
            AddBunch(IF_MAIN, IF_SHOP);
        };
        i = 0;
        while (i < param_social_buttons.length) {
            DefineCnt((SOCIAL + i), (120 + (i * 40)), 2);
            DefineImg((SOCIAL + i), (("res/gfx/if/social_" + param_social_buttons[i].split(":")[0]) + ".png"), true, 0, 0);
            MakePersistent((SOCIAL + i), (SOCIAL + i));
            var _local2 = actor[(SOCIAL + i)];
            with (_local2) {
                addChild(actor[(SOCIAL + i)]);
                textLinkMakeClickable(getChildAt(0).parent);
                addEventListener(MouseEvent.CLICK, ShowSocial);
                buttonMode = true;
                useHandCursor = true;
                mouseChildren = false;
            };
            if (param_social_buttons[i].split(":").length > 1){
                if (txt[int(param_social_buttons[i].split(":")[1])]){
                    EnablePopup((SOCIAL + i), txt[param_social_buttons[i].split(":")[1]]);
                };
            };
            AddBunch(IF_MAIN, (SOCIAL + i));
            i = (i + 1);
        };
        DefineBunch(IF_OVL, IF_MAIN);
        if (param_sponsor != ""){
            var ShowSponsor:* = function (evt:MouseEvent=undefined){
                navigateToURL(new URLRequest(param_sponsor_url), "_blank");
            };
            DefineCnt(IF_SPONSOR, SPONSOR_X, SPONSOR_Y);
            DefineImg(IF_SPONSOR, (("res/gfx/if/sponsor_" + param_sponsor) + ".png"), true, 0, 0);
            if (param_sponsor_url != ""){
                MakePersistent(IF_SPONSOR, IF_SPONSOR);
                AddBunch(IF_MAIN, IF_SPONSOR);
                _local2 = actor[IF_SPONSOR];
                with (_local2) {
                    addChild(actor[IF_SPONSOR]);
                    addEventListener(MouseEvent.CLICK, ShowSponsor);
                    mouseChildren = false;
                    useHandCursor = true;
                    buttonMode = true;
                };
            } else {
                MakePersistent(IF_SPONSOR);
                AddBunch(IF_MAIN, IF_SPONSOR);
                _local2 = actor[IF_SPONSOR];
                with (_local2) {
                    x = SPONSOR_X;
                    y = SPONSOR_Y;
                };
            };
        };
        DefineCnt(IF_LOGOUT, ((shop_url)!="") ? LOGOUT_X_WITH_SHOP : LOGOUT_X, LOGOUT_Y);
        DefineLbl(LBL_IF_LOGOUT, txt[TXT_LOGOUT], 0, 0, FontFormat_LogoutLink);
        AddFilter(LBL_IF_LOGOUT, Filter_Shadow);
        MakePersistent(IF_LOGOUT, LBL_IF_LOGOUT);
        _local2 = actor[IF_LOGOUT];
        with (_local2) {
            addChild(actor[LBL_IF_LOGOUT]);
            textLinkMakeClickable(getChildAt(0).parent);
            x = (((shop_url)!="") ? LOGOUT_X_WITH_SHOP : LOGOUT_X - int((width / 2)));
            addEventListener(MouseEvent.CLICK, RequestLogout);
            mouseChildren = false;
            useHandCursor = true;
            buttonMode = true;
        };
        DefineCnt(IF_IMPRESSUM, IMPRESSUM_X, LOGOUT_Y);
        DefineLbl(LBL_IF_IMPRESSUM, txt[TXT_IMPRESSUM_LINK], 0, 0, FontFormat_LogoutLink);
        AddFilter(LBL_IF_IMPRESSUM, Filter_Shadow);
        MakePersistent(IF_IMPRESSUM, LBL_IF_IMPRESSUM);
        _local2 = actor[IF_IMPRESSUM];
        with (_local2) {
            addChild(actor[LBL_IF_IMPRESSUM]);
            textLinkMakeClickable(getChildAt(0).parent);
            x = (IMPRESSUM_X - int((width / 2)));
            addEventListener(MouseEvent.CLICK, ShowImpressum);
            mouseChildren = false;
            useHandCursor = true;
            buttonMode = true;
        };
        DefineCnt(IF_FORUM, ((shop_url)!="") ? FORUM_X_WITH_SHOP : FORUM_X, LOGOUT_Y);
        DefineLbl(LBL_IF_FORUM, txt[TXT_FORUM_LINK], 0, 0, FontFormat_LogoutLink);
        AddFilter(LBL_IF_FORUM, Filter_Shadow);
        MakePersistent(IF_FORUM, LBL_IF_FORUM);
        _local2 = actor[IF_FORUM];
        with (_local2) {
            addChild(actor[LBL_IF_FORUM]);
            textLinkMakeClickable(getChildAt(0).parent);
            x = (((shop_url)!="") ? FORUM_X_WITH_SHOP : FORUM_X - int((width / 2)));
            addEventListener(MouseEvent.CLICK, ShowForum);
            mouseChildren = false;
            useHandCursor = true;
            buttonMode = true;
        };
        DefineCnt(IF_AGB, AGB_X, LOGOUT_Y);
        DefineLbl(LBL_IF_AGB, txt[TXT_AGB_LINK], 0, 0, FontFormat_LogoutLink);
        AddFilter(LBL_IF_AGB, Filter_Shadow);
        MakePersistent(IF_AGB, LBL_IF_AGB);
        _local2 = actor[IF_AGB];
        with (_local2) {
            addChild(actor[LBL_IF_AGB]);
            textLinkMakeClickable(getChildAt(0).parent);
            x = (AGB_X - int((width / 2)));
            addEventListener(MouseEvent.CLICK, ShowAGB);
            mouseChildren = false;
            useHandCursor = true;
            buttonMode = true;
        };
        DefineCnt(IF_DATENSCHUTZ, DATENSCHUTZ_X, LOGOUT_Y);
        DefineLbl(LBL_IF_DATENSCHUTZ, txt[TXT_DATENSCHUTZ_LINK], 0, 0, FontFormat_LogoutLink);
        AddFilter(LBL_IF_DATENSCHUTZ, Filter_Shadow);
        MakePersistent(IF_DATENSCHUTZ, LBL_IF_DATENSCHUTZ);
        _local2 = actor[IF_DATENSCHUTZ];
        with (_local2) {
            addChild(actor[LBL_IF_DATENSCHUTZ]);
            textLinkMakeClickable(getChildAt(0).parent);
            x = (DATENSCHUTZ_X - int((width / 2)));
            addEventListener(MouseEvent.CLICK, ShowDatenschutz);
            mouseChildren = false;
            useHandCursor = true;
            buttonMode = true;
        };
        DefineCnt(IF_ANLEITUNG, ((shop_url)!="") ? ANLEITUNG_X_WITH_SHOP : ANLEITUNG_X, LOGOUT_Y);
        DefineLbl(LBL_IF_ANLEITUNG, txt[TXT_ANLEITUNG_LINK], 0, 0, FontFormat_LogoutLink);
        AddFilter(LBL_IF_ANLEITUNG, Filter_Shadow);
        MakePersistent(IF_ANLEITUNG, LBL_IF_ANLEITUNG);
        _local2 = actor[IF_ANLEITUNG];
        with (_local2) {
            addChild(actor[LBL_IF_ANLEITUNG]);
            textLinkMakeClickable(getChildAt(0).parent);
            x = (((shop_url)!="") ? ANLEITUNG_X_WITH_SHOP : ANLEITUNG_X - int((width / 2)));
            addEventListener(MouseEvent.CLICK, ShowAnleitung);
            mouseChildren = false;
            useHandCursor = true;
            buttonMode = true;
        };
        DefineCnt(IF_SHOP, SHOP_X, LOGOUT_Y);
        DefineLbl(LBL_IF_SHOP, txt[TXT_SHOP_LINK], 0, 0, FontFormat_LogoutLink);
        AddFilter(LBL_IF_SHOP, Filter_Shadow);
        MakePersistent(IF_SHOP, LBL_IF_SHOP);
        _local2 = actor[IF_SHOP];
        with (_local2) {
            addChild(actor[LBL_IF_SHOP]);
            textLinkMakeClickable(getChildAt(0).parent);
            x = (SHOP_X - int((width / 2)));
            addEventListener(MouseEvent.CLICK, ShowShop);
            mouseChildren = false;
            useHandCursor = true;
            buttonMode = true;
        };
        DefineImg(IF_KRIEGER, "res/gfx/scr/hall/punkt_krieger.png", true, 0, 0);
        DefineImg(IF_JAEGER, "res/gfx/scr/hall/punkt_dieb.png", true, 0, 0);
        DefineImg(IF_MAGIER, "res/gfx/scr/hall/punkt_magier.png", true, 0, 0);
        DefineImg(IF_GOLD, "res/gfx/if/icon_gold.png", true, 0, IF_LBL_GOLD_Y);
        DefineLbl(LBL_IF_GOLD, "", 0, IF_LBL_GOLD_Y, FontFormat_Default);
        DefineImg(IF_SILBER, "res/gfx/if/icon_silber.png", true, IF_LBL_GOLDPILZE_X, IF_LBL_GOLD_Y);
        DefineLbl(LBL_IF_SILBER, "", 0, IF_LBL_GOLD_Y, FontFormat_Default);
        EnablePopup(LBL_IF_SILBER, txt[TXT_SILVER_HINT]);
        EnablePopup(IF_SILBER, txt[TXT_SILVER_HINT]);
        DefineImg(IF_PILZE, "res/gfx/if/icon_pilz.png", true, IF_LBL_GOLDPILZE_X, IF_LBL_PILZE_Y);
        DefineLbl(LBL_IF_PILZE, "", 0, IF_LBL_PILZE_Y, FontFormat_Default);
        MakePersistent(LBL_IF_GOLD, LBL_IF_PILZE, LBL_IF_SILBER, IF_GOLD, IF_SILBER, IF_PILZE);
        DefineBunch(IF_STATS, LBL_IF_GOLD, LBL_IF_PILZE, LBL_IF_SILBER, IF_GOLD, IF_SILBER, IF_PILZE);
        DefineImg(IF_HUTMANN1, "res/gfx/scr/taverne/huetchenspieler/hatplayer1.png", true, 0, 0);
        DefineImg(IF_HUTMANN2, "res/gfx/scr/taverne/huetchenspieler/hatplayer2.png", true, 0, 0);
        DefineImg(IF_HUTMANN_OVL, "res/gfx/scr/taverne/huetchenspieler/hatplayer_ovl.jpg", true, IF_HUTLINK_X, IF_HUTLINK_Y);
        DefineCnt(IF_HUTMANN, IF_HUTLINK_X, IF_HUTLINK_Y);
        DefineImg(IF_TOILET, "res/gfx/scr/taverne/wc_sign.png", true, 0, 0);
        DefineCnt(IF_TOILET, (IF_HUTLINK_X + 90), (IF_HUTLINK_Y + 40));
        MakePersistent(IF_HUTMANN1, IF_HUTMANN2, IF_HUTMANN_OVL, IF_HUTMANN, IF_TOILET, IF_TOILET);
        _local2 = actor[IF_HUTMANN];
        with (_local2) {
            addChild(actor[IF_HUTMANN1]);
            addChild(actor[IF_HUTMANN2]);
        };
        _local2 = actor[IF_TOILET];
        with (_local2) {
            addChild(actor[IF_TOILET]);
        };
        iPosi = 0;
        yOffs = 0;
        DefiniereInterfaceButton(IF_TAVERNE, TXT_TAVERNE);
        DefiniereInterfaceButton(IF_ARENA, TXT_ARENA);
        DefiniereInterfaceButton(IF_ARBEITEN, TXT_ARBEITEN);
        DefiniereInterfaceButton(IF_SCHMIEDE, TXT_SCHMIEDE);
        DefiniereInterfaceButton(IF_ZAUBERLADEN, TXT_ZAUBERLADEN);
        DefiniereInterfaceButton(IF_STALL, TXT_STALL);
        DefiniereInterfaceButton(IF_PILZDEALER, TXT_PILZDEALER);
        yOffs = (yOffs + IF_2);
        DefiniereInterfaceButton(IF_CHARAKTER, TXT_CHARAKTER);
        DefiniereInterfaceButton(IF_POST, TXT_POST);
        DefiniereInterfaceButton(IF_GILDEN, TXT_GILDEN);
        DefiniereInterfaceButton(IF_EHRENHALLE, TXT_EHRENHALLE);
        DefiniereInterfaceButton(IF_WELTKARTE, TXT_WELTKARTE);
        DefiniereInterfaceButton(IF_OPTIONEN, TXT_OPTIONEN);
        actor[IF_WELTKARTE].addEventListener(MouseEvent.MOUSE_OVER, dungeonBtnHover);
        actor[IF_WELTKARTE].addEventListener(MouseEvent.MOUSE_OUT, dungeonBtnLeave);
        dungeonBtnUpdateDelayTimer = new Timer(500);
        dungeonBtnUpdateDelayTimer.addEventListener(TimerEvent.TIMER, dungeonBtnUpdateDelay);
        actor[IF_ARBEITEN].addEventListener(MouseEvent.MOUSE_OVER, workBtnHover);
        actor[IF_ARBEITEN].addEventListener(MouseEvent.MOUSE_OUT, workBtnLeave);
        workBtnUpdateDelayTimer = new Timer(500);
        workBtnUpdateDelayTimer.addEventListener(TimerEvent.TIMER, workBtnUpdateDelay);
        actor[IF_TAVERNE].addEventListener(MouseEvent.MOUSE_OVER, tavBtnHover);
        actor[IF_TAVERNE].addEventListener(MouseEvent.MOUSE_OUT, tavBtnLeave);
        tavBtnUpdateDelayTimer = new Timer(500);
        tavBtnUpdateDelayTimer.addEventListener(TimerEvent.TIMER, tavBtnUpdateDelay);
        actor[IF_ARENA].addEventListener(MouseEvent.MOUSE_OVER, arenaBtnHover);
        actor[IF_ARENA].addEventListener(MouseEvent.MOUSE_OUT, arenaBtnLeave);
        arenaBtnUpdateDelayTimer = new Timer(500);
        arenaBtnUpdateDelayTimer.addEventListener(TimerEvent.TIMER, arenaBtnUpdateDelay);
        DefineBunch(IF_BUTTONS, IF_HUTMANN, IF_TOILET, IF_HUTMANN_OVL, IF_TAVERNE, IF_ARENA, IF_ARBEITEN, IF_SCHMIEDE, IF_ZAUBERLADEN);
        AddBunch(IF_BUTTONS, IF_STALL, IF_PILZDEALER, IF_CHARAKTER, IF_POST, IF_GILDEN, IF_EHRENHALLE, IF_WELTKARTE, IF_OPTIONEN);
        i = IF_DRAGON_1;
        while (i <= IF_DRAGON_13) {
            AddBunch(IF_BUTTONS, i);
            i = (i + 1);
        };
        HutmannLinkTimer = new Timer(50);
        HutmannLinkTimer.addEventListener(TimerEvent.TIMER, HutmannLinkAniEvent);
        HutmannLinkTimer.start();
        HutmannLinkVis = false;
        HutmannLinkOver = false;
        HutmannRelY = 0;
        var HutmannFrame:* = 0;
        HutmannAniStep = 0;
        HutmannCountdown = 0;
        _local2 = actor[IF_TAVERNE];
        with (_local2) {
            addEventListener(MouseEvent.MOUSE_OVER, TaverneBtnIn);
            addEventListener(MouseEvent.MOUSE_OUT, TaverneBtnOut);
            addEventListener(MouseEvent.MOUSE_UP, TaverneBtnOut);
        };
        _local2 = actor[IF_HUTMANN];
        with (_local2) {
            addEventListener(MouseEvent.MOUSE_OVER, TaverneBtnIn);
            addEventListener(MouseEvent.MOUSE_OUT, TaverneBtnOut);
            addEventListener(MouseEvent.MOUSE_UP, TaverneBtnOut);
            addEventListener(MouseEvent.MOUSE_DOWN, ShowHutmann);
            mouseChildren = false;
            useHandCursor = true;
            buttonMode = true;
        };
        _local2 = actor[IF_TOILET];
        with (_local2) {
            addEventListener(MouseEvent.MOUSE_OVER, TaverneBtnIn);
            addEventListener(MouseEvent.MOUSE_OUT, TaverneBtnOut);
            addEventListener(MouseEvent.MOUSE_UP, TaverneBtnOut);
            addEventListener(MouseEvent.MOUSE_DOWN, RequestToilet);
            mouseChildren = false;
            useHandCursor = true;
            buttonMode = true;
        };
        MakePersistent(IF_BACKGROUND, IF_LEFT, IF_TOP, IF_MAIN);
        DefineFromClass(IF_WINDOW, interface_window_png, IF_WIN_X, IF_WIN_Y);
        DefineFromClass(BLACK_SQUARE, black_square, 0, 0);
        actor[BLACK_SQUARE].alpha = 0.5;
        DefineLbl(LBL_WINDOW_TITLE, "", 0, (IF_WIN_Y + IF_WIN_WELCOME_Y), FontFormat_Heading);
        AddFilter(LBL_WINDOW_TITLE, Filter_Shadow);
        iPosi = 0;
        AIRRelMoveY = 0;
        AIRRelMoveYButton = 0;
        AIRRelMoveYButton2 = 0;
        iPosi = (iPosi + 1);
        DefineLbl(LBL_NAME, txt[TXT_NAME], (IF_WIN_X + IF_WIN_INPUTS_X), (((IF_WIN_Y + IF_WIN_INPUTS_Y) + (IF_WIN_INPUTS_DISTANCE_Y * iPosi)) + AIRRelMoveY), FontFormat_Default);
        DefineLbl(LBL_LOGIN_PASSWORD, txt[TXT_PASSWORD], (IF_WIN_X + IF_WIN_INPUTS_X), (((IF_WIN_Y + IF_WIN_INPUTS_Y) + (IF_WIN_INPUTS_DISTANCE_Y * iPosi)) + AIRRelMoveY), FontFormat_Default);
        iPosi = (iPosi + 1);
        DefineLbl(LBL_EMAIL, txt[TXT_EMAIL], (IF_WIN_X + IF_WIN_INPUTS_X), (((IF_WIN_Y + IF_WIN_INPUTS_Y) + (IF_WIN_INPUTS_DISTANCE_Y * iPosi)) + AIRRelMoveY), FontFormat_Default);
        iPosi = (iPosi + 1);
        DefineLbl(LBL_PASSWORD, txt[TXT_PASSWORD], (IF_WIN_X + IF_WIN_INPUTS_X), (((IF_WIN_Y + IF_WIN_INPUTS_Y) + (IF_WIN_INPUTS_DISTANCE_Y * iPosi)) + AIRRelMoveY), FontFormat_Default);
        AddFilter(LBL_NAME, Filter_Shadow);
        AddFilter(LBL_LOGIN_PASSWORD, Filter_Shadow);
        AddFilter(LBL_EMAIL, Filter_Shadow);
        AddFilter(LBL_PASSWORD, Filter_Shadow);
        DefineFromClass(INP_NAME, text_input1, (actor[LBL_NAME].x + IF_WIN_INPUTS_FIELD_X), (actor[LBL_NAME].y + IF_WIN_INPUTS_FIELD_Y), 2, "name");
        DefineFromClass(INP_LOGIN_PASSWORD, text_input2, (actor[LBL_LOGIN_PASSWORD].x + IF_WIN_INPUTS_FIELD_X), (actor[LBL_LOGIN_PASSWORD].y + IF_WIN_INPUTS_FIELD_Y), 2, "password");
        DefineFromClass(INP_EMAIL, text_input2, (actor[LBL_EMAIL].x + IF_WIN_INPUTS_FIELD_X), (actor[LBL_EMAIL].y + IF_WIN_INPUTS_FIELD_Y), 2, "email");
        DefineFromClass(INP_PASSWORD, text_input1, (actor[LBL_PASSWORD].x + IF_WIN_INPUTS_FIELD_X), (actor[LBL_PASSWORD].y + IF_WIN_INPUTS_FIELD_Y), 2, "password");
        DefineImg(FILLSPACE, (("res/gfx/if/file" + "space.pn") + "g"), false, 280, 100);
        DefineImg(PASSWORD_SMILEY_SAD, "res/gfx/if/smiley_sad.png", false, (((actor[LBL_PASSWORD].x + IF_WIN_INPUTS_FIELD_X) + actor[INP_PASSWORD].width) + 5), ((actor[LBL_PASSWORD].y + IF_WIN_INPUTS_FIELD_Y) + 3));
        DefineImg(PASSWORD_SMILEY_NEUTRAL, "res/gfx/if/smiley_neutral.png", false, (((actor[LBL_PASSWORD].x + IF_WIN_INPUTS_FIELD_X) + actor[INP_PASSWORD].width) + 5), ((actor[LBL_PASSWORD].y + IF_WIN_INPUTS_FIELD_Y) + 3));
        DefineImg(PASSWORD_SMILEY_HAPPY, "res/gfx/if/smiley_happy.png", false, (((actor[LBL_PASSWORD].x + IF_WIN_INPUTS_FIELD_X) + actor[INP_PASSWORD].width) + 5), ((actor[LBL_PASSWORD].y + IF_WIN_INPUTS_FIELD_Y) + 3));
        EnablePopup(PASSWORD_SMILEY_SAD, txt[TXT_PASSWORD_SMILEY_SAD].split("#").join(String.fromCharCode(13)));
        EnablePopup(PASSWORD_SMILEY_NEUTRAL, txt[TXT_PASSWORD_SMILEY_NEUTRAL].split("#").join(String.fromCharCode(13)));
        EnablePopup(PASSWORD_SMILEY_HAPPY, txt[TXT_PASSWORD_SMILEY_HAPPY].split("#").join(String.fromCharCode(13)));
        actor[INP_PASSWORD].addEventListener(KeyboardEvent.KEY_UP, gradePassword);
        DefineCnt(FORGOT_PASSWORD, 0, (((IF_WIN_Y + IF_WIN_Y) + IF_WIN_LNK_1_Y) + AIRRelMoveY));
        DefineLbl(LBL_FORGOT_PASSWORD, txt[TXT_FORGOT_PASSWORD], 0, 0, FontFormat_Default);
        AddFilter(LBL_FORGOT_PASSWORD, Filter_Shadow);
        DefineCnt(GOTO_LOGIN, 0, (((IF_WIN_Y + IF_WIN_Y) + IF_WIN_LNK_2_Y) + AIRRelMoveYButton));
        DefineLbl(LBL_GOTO_LOGIN, txt[TXT_GOTO_LOGIN], 0, 0, FontFormat_Default);
        DefineCnt(GOTO_SIGNUP, 0, (((IF_WIN_Y + IF_WIN_Y) + IF_WIN_LNK_2_Y) + AIRRelMoveYButton2));
        DefineLbl(LBL_GOTO_SIGNUP, txt[TXT_GOTO_SIGNUP], 0, 0, FontFormat_Default);
        AddFilter(LBL_GOTO_LOGIN, Filter_Shadow);
        AddFilter(LBL_GOTO_SIGNUP, Filter_Shadow);
        MakePersistent(LBL_FORGOT_PASSWORD, LBL_GOTO_LOGIN, LBL_GOTO_SIGNUP);
        _local2 = actor[FORGOT_PASSWORD];
        with (_local2) {
            x = ((IF_WIN_X + IF_WIN_WELCOME_X) - int((actor[LBL_FORGOT_PASSWORD].textWidth / 2)));
            addChild(actor[LBL_FORGOT_PASSWORD]);
            textLinkMakeClickable(getChildAt(0).parent);
            addEventListener(MouseEvent.CLICK, ShowForgotPasswordScreen);
            mouseChildren = false;
            useHandCursor = true;
            buttonMode = true;
        };
        _local2 = actor[GOTO_LOGIN];
        with (_local2) {
            x = ((IF_WIN_X + IF_GOTO_LOGIN_X) - int(actor[LBL_GOTO_LOGIN].textWidth));
            addChild(actor[LBL_GOTO_LOGIN]);
            textLinkMakeClickable(getChildAt(0).parent);
            addEventListener(MouseEvent.CLICK, ShowBuildCharacterScreen);
            mouseChildren = false;
            useHandCursor = true;
            buttonMode = true;
        };
        _local2 = actor[GOTO_SIGNUP];
        with (_local2) {
            x = ((IF_WIN_X + IF_WIN_WELCOME_X) - int((actor[LBL_GOTO_SIGNUP].textWidth / 2)));
            addChild(actor[LBL_GOTO_SIGNUP]);
            textLinkMakeClickable(getChildAt(0).parent);
            addEventListener(MouseEvent.CLICK, DoGotoSignup);
            mouseChildren = false;
            useHandCursor = true;
            buttonMode = true;
        };
        actor[INP_PASSWORD].getChildAt(1).displayAsPassword = true;
        actor[INP_LOGIN_PASSWORD].getChildAt(1).displayAsPassword = true;
        DefineFromClass(CB_AGB_UNCHECKED, cb_unchecked, (IF_WIN_X + IF_WIN_CB_X), ((IF_WIN_Y + IF_WIN_CB_Y) + AIRRelMoveY));
        actor[CB_AGB_UNCHECKED].addEventListener(MouseEvent.CLICK, CheckAGB);
        DefineFromClass(CB_AGB_CHECKED, cb_checked, (IF_WIN_X + IF_WIN_CB_X), ((IF_WIN_Y + IF_WIN_CB_Y) + AIRRelMoveY));
        actor[CB_AGB_CHECKED].addEventListener(MouseEvent.CLICK, UncheckAGB);
        DefineLbl(LBL_LOGIN_LEGAL_0, (((txt[TXT_LOGIN_LEGAL_2] == "")) ? txt[TXT_LOGIN_LEGAL_1].split("%link")[0] : ""), (actor[CB_AGB_UNCHECKED].x + AGB_LBL_X), (actor[CB_AGB_UNCHECKED].y + AGB_LBL_Y));
        AddFilter(LBL_LOGIN_LEGAL_0, Filter_Shadow);
        DefineCnt(AGB, ((actor[LBL_LOGIN_LEGAL_0].x + 6) + actor[LBL_LOGIN_LEGAL_0].width), (actor[CB_AGB_UNCHECKED].y + AGB_LBL_Y));
        DefineLbl(LBL_AGB, txt[TXT_AGB], 0, 0, FontFormat_Default);
        AddFilter(LBL_AGB, Filter_Shadow);
        MakePersistent(LBL_AGB);
        _local2 = actor[AGB];
        with (_local2) {
            addChild(actor[LBL_AGB]);
            addEventListener(MouseEvent.CLICK, ShowAGB);
            mouseChildren = false;
            useHandCursor = true;
            buttonMode = true;
        };
        DefineLbl(LBL_LOGIN_LEGAL_1, (((txt[TXT_LOGIN_LEGAL_2] == "")) ? txt[TXT_LOGIN_LEGAL_1].split("%link")[1] : txt[TXT_LOGIN_LEGAL_1]), ((actor[AGB].x + 6) + actor[AGB].width), (actor[CB_AGB_UNCHECKED].y + AGB_LBL_Y));
        AddFilter(LBL_LOGIN_LEGAL_1, Filter_Shadow);
        DefineCnt(DATENSCHUTZ, ((actor[LBL_LOGIN_LEGAL_1].x + 6) + actor[LBL_LOGIN_LEGAL_1].width), (actor[CB_AGB_UNCHECKED].y + AGB_LBL_Y));
        DefineLbl(LBL_DATENSCHUTZ, txt[TXT_DATENSCHUTZ], 0, 0, FontFormat_Default);
        AddFilter(LBL_DATENSCHUTZ, Filter_Shadow);
        MakePersistent(LBL_DATENSCHUTZ);
        _local2 = actor[DATENSCHUTZ];
        with (_local2) {
            addChild(actor[LBL_DATENSCHUTZ]);
            addEventListener(MouseEvent.CLICK, ShowDatenschutz);
            mouseChildren = false;
            useHandCursor = true;
            buttonMode = true;
        };
        DefineLbl(LBL_LOGIN_LEGAL_2, (((txt[TXT_LOGIN_LEGAL_2] == "")) ? txt[TXT_LOGIN_LEGAL_1].split("%link")[2] : txt[TXT_LOGIN_LEGAL_2]), ((actor[DATENSCHUTZ].x + 6) + actor[DATENSCHUTZ].width), (actor[CB_AGB_UNCHECKED].y + AGB_LBL_Y));
        AddFilter(LBL_LOGIN_LEGAL_2, Filter_Shadow);
        textLinkMakeClickable(actor[AGB]);
        textLinkMakeClickable(actor[DATENSCHUTZ]);
        DefineFromClass(SHP_FUCK_BLACK_SQUARE, black_square, 310, ((IF_WIN_Y + IF_WIN_CB_Y) + 125));
        _local2 = actor[SHP_FUCK_BLACK_SQUARE];
        with (_local2) {
            width = 930;
            height = 90;
            alpha = 0.6;
        };
        DefineFromClass(CB_FUCK_UNCHECKED, cb_unchecked, 320, ((IF_WIN_Y + IF_WIN_CB_Y) + 150));
        actor[CB_FUCK_UNCHECKED].addEventListener(MouseEvent.CLICK, CheckFuck);
        DefineFromClass(CB_FUCK_CHECKED, cb_checked, 320, ((IF_WIN_Y + IF_WIN_CB_Y) + 150));
        actor[CB_FUCK_CHECKED].addEventListener(MouseEvent.CLICK, UncheckFuck);
        DefineLbl(LBL_FUCK, param_bullshit_text, 380, ((IF_WIN_Y + IF_WIN_CB_Y) + 150), FontFormat_Bullshit);
        AddFilter(LBL_FUCK, Filter_Shadow);
        _local2 = actor[LBL_FUCK];
        with (_local2) {
            width = 840;
            wordWrap = true;
        };
        DefineBunch(FUCK, SHP_FUCK_BLACK_SQUARE, CB_FUCK_UNCHECKED, LBL_FUCK);
        DefineBtn(IF_LOGIN, txt[TXT_LOGIN], RequestLogin, btnClassBasic, ((IF_WIN_X + IF_WIN_WELCOME_X) + IF_WIN_X), ((IF_WIN_Y + IF_WIN_Y) + AIRRelMoveYButton2));
        DefineBtn(IF_SIGNUP, txt[TXT_SIGNUP], RequestSignup, btnClassBasic, ((IF_WIN_X + IF_WIN_WELCOME_X) + IF_WIN_X), (((IF_WIN_Y + IF_WIN_Y) + IF_WIN_2_Y) + AIRRelMoveYButton));
        DefineBtn(IF_REQUEST_PASSWORD, txt[TXT_REQUEST_PASSWORD], RequestPassword, btnClassBasic, ((IF_WIN_X + IF_WIN_WELCOME_X) + IF_WIN_X), ((IF_WIN_Y + IF_WIN_Y) + AIRRelMoveY));
        DefineLbl(LBL_ERROR, "", IF_ERROR_X, IF_ERROR_Y, FontFormat_Error);
        AddFilter(LBL_ERROR, Filter_Shadow);
        DefineBunch(WINDOW_LOGIN, BLACK_SQUARE, IF_WINDOW, LBL_WINDOW_TITLE, IF_LOGIN, LBL_NAME, INP_NAME);
        AddBunch(WINDOW_LOGIN, LBL_LOGIN_PASSWORD, INP_LOGIN_PASSWORD, GOTO_SIGNUP, FORGOT_PASSWORD);
        DefineBunch(WINDOW_SIGNUP, BLACK_SQUARE, IF_WINDOW, LBL_WINDOW_TITLE, IF_SIGNUP, LBL_NAME, INP_NAME);
        AddBunch(WINDOW_SIGNUP, LBL_EMAIL, INP_EMAIL, LBL_PASSWORD, INP_PASSWORD, GOTO_LOGIN, CB_AGB_UNCHECKED, AGB, LBL_LOGIN_LEGAL_0, LBL_LOGIN_LEGAL_1, LBL_LOGIN_LEGAL_2, DATENSCHUTZ);
        AddBunch(WINDOW_SIGNUP, PASSWORD_SMILEY_SAD, PASSWORD_SMILEY_NEUTRAL, PASSWORD_SMILEY_HAPPY);
        DefineBunch(WINDOW_FORGOT_PASSWORD, BLACK_SQUARE, IF_WINDOW, LBL_WINDOW_TITLE, IF_REQUEST_PASSWORD, LBL_NAME, INP_NAME);
        AddBunch(WINDOW_FORGOT_PASSWORD, LBL_EMAIL, INP_EMAIL, GOTO_LOGIN);
        DrachenSetzen();
        PulseTimer = new Timer(20);
        PulseLevel = 0;
        _local2 = PulseTimer;
        with (_local2) {
            addEventListener(TimerEvent.TIMER, PulseEvent);
            start();
        };
        DefineImg(SCR_BUILDCHAR_BACKGROUND, "res/gfx/scr/buildchar/char_erstellung.png", false, SCR_BUILDCHAR_1_X, SCR_BUILDCHAR_1_Y);
        DefineBunch(SCR_BUILDCHAR, SCR_BUILDCHAR_BACKGROUND, IF_MAIN);
        DefineLbl(LBL_SCREEN_TITLE, txt[TXT_CREATE_CHARACTER], SCREEN_TITLE_X, SCREEN_TITLE_Y, FontFormat_ScreenTitle);
        AddFilter(LBL_SCREEN_TITLE, Filter_Shadow);
        actor[LBL_SCREEN_TITLE].x = (SCREEN_TITLE_X - int((actor[LBL_SCREEN_TITLE].textWidth / 2)));
        DefineBtn(RANDOM, txt[TXT_RANDOM], RandomizeCharImage, btnClassLogin, SCREEN_RANDOM_BUTTON_X, SCREEN_RANDOM_BUTTON_Y);
        DefineBtn(CREATE_CHARACTER, txt[TXT_CREATE_CHARACTER], ShowSignupScreen, btnClassBasic, SCR_BUILDCHAR_CREATE_X, SCR_BUILDCHAR_CREATE_Y);
        DefineBtn(MODIFY_CHARACTER, txt[TXT_MODIFY_CHARACTER], RequestChangeFace, btnClassBasic, SCR_BUILDCHAR_CREATE_X, SCR_BUILDCHAR_CREATE_Y);
        DefineLbl(LBL_CREATE_RACE, "", CREATE_RACE_X, CREATE_RACE_Y, FontFormat_Default);
        DefineLbl(LBL_CREATE_RACE_DESC, "", CREATE_RACE_X, 0, FontFormat_DefaultLeft);
        _local2 = actor[LBL_CREATE_RACE_DESC];
        with (_local2) {
            width = BUILDCHAR_LINES_X;
            wordWrap = true;
        };
        DefineLbl(LBL_CREATE_CLASS, "", CREATE_RACE_X, 0, FontFormat_Default);
        DefineLbl(LBL_CREATE_CLASS_DESC, "", CREATE_RACE_X, 0, FontFormat_DefaultLeft);
        _local2 = actor[LBL_CREATE_CLASS_DESC];
        with (_local2) {
            width = BUILDCHAR_LINES_X;
            wordWrap = true;
        };
        AddFilter(LBL_CREATE_RACE, Filter_Shadow);
        AddFilter(LBL_CREATE_RACE_DESC, Filter_Shadow);
        AddFilter(LBL_CREATE_CLASS, Filter_Shadow);
        AddFilter(LBL_CREATE_CLASS_DESC, Filter_Shadow);
        DefineLbl(LBL_CREATE_GOTO_LOGIN, txt[TXT_CREATE_GOTO_LOGIN], 0, 0, FontFormat_Default);
        AddFilter(LBL_CREATE_GOTO_LOGIN, Filter_Shadow);
        MakePersistent(LBL_CREATE_GOTO_LOGIN);
        DefineCnt(CREATE_GOTO_LOGIN, 0, SCR_BUILDCHAR_LOGIN_Y);
        _local2 = actor[CREATE_GOTO_LOGIN];
        with (_local2) {
            addChild(actor[LBL_CREATE_GOTO_LOGIN]);
            textLinkMakeClickable(getChildAt(0).parent);
            mouseChildren = false;
            mouseEnabled = true;
            buttonMode = true;
            useHandCursor = true;
            addEventListener(MouseEvent.CLICK, ShowLoginScreen);
            x = (SCR_BUILDCHAR_LOGIN_X - actor[LBL_CREATE_GOTO_LOGIN].textWidth);
        };
        DefineImg(M_IDLE, "res/gfx/scr/buildchar/button_male_idle.jpg", false, SCR_BUILDCHAR_GENDER_X, SCR_BUILDCHAR_GENDER_Y);
        DefineCnt(M_ACT, SCR_BUILDCHAR_GENDER_X, SCR_BUILDCHAR_GENDER_Y);
        DefineImg(F_IDLE, "res/gfx/scr/buildchar/button_female_idle.jpg", false, (SCR_BUILDCHAR_GENDER_X + SCR_BUILDCHAR_GENDER_X), SCR_BUILDCHAR_GENDER_Y);
        DefineCnt(F_ACT, (SCR_BUILDCHAR_GENDER_X + SCR_BUILDCHAR_GENDER_X), SCR_BUILDCHAR_GENDER_Y);
        actor[M_IDLE].addEventListener(MouseEvent.CLICK, SelectGender);
        actor[F_IDLE].addEventListener(MouseEvent.CLICK, SelectGender);
        i = 0;
        while (i < 2) {
            EnablePopup((M_IDLE + (i * 2)), txt[(TXT_GENDER_M + i)]);
            EnablePopup((M_ACT + (i * 2)), txt[(TXT_GENDER_M + i)]);
            i = (i + 1);
        };
        DefineImg(KASTE_1_IDLE, "res/gfx/scr/buildchar/button_warrior_idle.jpg", false, SCR_BUILDCHAR_CASTE_X, SCR_BUILDCHAR_CASTE_Y);
        DefineCnt(KASTE_1_ACT, SCR_BUILDCHAR_CASTE_X, SCR_BUILDCHAR_CASTE_Y);
        DefineImg(KASTE_2_IDLE, "res/gfx/scr/buildchar/button_mage_idle.jpg", false, (SCR_BUILDCHAR_CASTE_X + SCR_BUILDCHAR_CASTE_X), SCR_BUILDCHAR_CASTE_Y);
        DefineCnt(KASTE_2_ACT, (SCR_BUILDCHAR_CASTE_X + SCR_BUILDCHAR_CASTE_X), SCR_BUILDCHAR_CASTE_Y);
        DefineImg(KASTE_3_IDLE, "res/gfx/scr/buildchar/button_hunter_idle.jpg", false, (SCR_BUILDCHAR_CASTE_X + (SCR_BUILDCHAR_CASTE_X * 2)), SCR_BUILDCHAR_CASTE_Y);
        DefineCnt(KASTE_3_ACT, (SCR_BUILDCHAR_CASTE_X + (SCR_BUILDCHAR_CASTE_X * 2)), SCR_BUILDCHAR_CASTE_Y);
        actor[KASTE_1_IDLE].addEventListener(MouseEvent.CLICK, SelectCaste);
        actor[KASTE_2_IDLE].addEventListener(MouseEvent.CLICK, SelectCaste);
        actor[KASTE_3_IDLE].addEventListener(MouseEvent.CLICK, SelectCaste);
        i = 0;
        while (i < 3) {
            EnablePopup((KASTE_1_IDLE + (i * 2)), txt[(TXT_CLASSNAME + i)]);
            EnablePopup((KASTE_1_ACT + (i * 2)), txt[(TXT_CLASSNAME + i)]);
            i = (i + 1);
        };
        DefineBunch(VOLK_BTNS_M);
        DefineBunch(VOLK_BTNS_F);
        DefineBunch(VOLK_BTNS_ALL);
        DefineImg(VOLK_MARKER, "res/gfx/scr/buildchar/button_marked.png", true);
        WhenLoaded(CloneMarker);
        i = 0;
        while (i <= 7) {
            pos_x = (SCR_BUILDCHAR_VOLK_X + ((i)<4) ? 0 : SCR_BUILDCHAR_VOLK_X);
            pos_y = (SCR_BUILDCHAR_VOLK_Y + (((i)<4) ? i : (i - 4) * SCR_BUILDCHAR_VOLK_Y));
            switch ((i + 1)){
                case 1:
                    volk = "human";
                    break;
                case 2:
                    volk = "elf";
                    break;
                case 3:
                    volk = "dwarf";
                    break;
                case 4:
                    volk = "gnome";
                    break;
                case 5:
                    volk = "orc";
                    break;
                case 6:
                    volk = "darkelf";
                    break;
                case 7:
                    volk = "goblin";
                    break;
                case 8:
                    volk = "demon";
                    break;
            };
            DefineImg((VOLK_1_M_IDLE + i), (("res/gfx/scr/buildchar/button_" + volk) + "_male_idle.jpg"), false, pos_x, pos_y);
            DefineCnt((VOLK_1_M_ACT + i), pos_x, pos_y);
            DefineImg((VOLK_1_F_IDLE + i), (("res/gfx/scr/buildchar/button_" + volk) + "_female_idle.jpg"), false, pos_x, pos_y);
            DefineCnt((VOLK_1_F_ACT + i), pos_x, pos_y);
            AddBunch(VOLK_BTNS_M, (VOLK_1_M_IDLE + i));
            AddBunch(VOLK_BTNS_F, (VOLK_1_F_IDLE + i));
            AddBunch(VOLK_BTNS_ALL, (VOLK_1_M_IDLE + i), (VOLK_1_M_ACT + i), (VOLK_1_F_IDLE + i), (VOLK_1_F_ACT + i));
            actor[(VOLK_1_M_IDLE + i)].addEventListener(MouseEvent.CLICK, SelectRace);
            actor[(VOLK_1_F_IDLE + i)].addEventListener(MouseEvent.CLICK, SelectRace);
            EnablePopup((VOLK_1_M_IDLE + i), txt[(TXT_RACENAME + i)]);
            EnablePopup((VOLK_1_M_ACT + i), txt[(TXT_RACENAME + i)]);
            EnablePopup((VOLK_1_F_IDLE + i), txt[(TXT_RACENAME + i)]);
            EnablePopup((VOLK_1_F_ACT + i), txt[(TXT_RACENAME + i)]);
            i = (i + 1);
        };
        i = 0;
        while (i < 10) {
            DefineImg((CHARBACKGROUND + i), "", false, ((SCREEN_TITLE_X - 150) + CHARX), (SCREEN_TITLE_Y + CHARY));
            DefineImg((CHARBACKGROUND2 + i), "", false, ((SCREEN_TITLE_X - 150) + CHARX), (SCREEN_TITLE_Y + CHARY));
            i = (i + 1);
        };
        DefineBtn(MOUTH_MINUS, "", ModifyCharacter, btnClassArrowLeft);
        DefineBtn(MOUTH_PLUS, "", ModifyCharacter, btnClassArrowRight);
        DefineBtn(HAIR_MINUS, "", ModifyCharacter, btnClassArrowLeft);
        DefineBtn(HAIR_PLUS, "", ModifyCharacter, btnClassArrowRight);
        DefineBtn(BROWS_MINUS, "", ModifyCharacter, btnClassArrowLeft);
        DefineBtn(BROWS_PLUS, "", ModifyCharacter, btnClassArrowRight);
        DefineBtn(EYES_MINUS, "", ModifyCharacter, btnClassArrowLeft);
        DefineBtn(EYES_PLUS, "", ModifyCharacter, btnClassArrowRight);
        DefineBtn(NOSE_MINUS, "", ModifyCharacter, btnClassArrowLeft);
        DefineBtn(NOSE_PLUS, "", ModifyCharacter, btnClassArrowRight);
        DefineBtn(EARS_MINUS, "", ModifyCharacter, btnClassArrowLeft);
        DefineBtn(EARS_PLUS, "", ModifyCharacter, btnClassArrowRight);
        DefineBtn(BEARD_MINUS, "", ModifyCharacter, btnClassArrowLeft);
        DefineBtn(BEARD_PLUS, "", ModifyCharacter, btnClassArrowRight);
        DefineBtn(SPECIAL_MINUS, "", ModifyCharacter, btnClassArrowLeft);
        DefineBtn(SPECIAL_PLUS, "", ModifyCharacter, btnClassArrowRight);
        DefineBtn(SPECIAL2_MINUS, "", ModifyCharacter, btnClassArrowLeft);
        DefineBtn(SPECIAL2_PLUS, "", ModifyCharacter, btnClassArrowRight);
        DefineBtn(COLOR_MINUS, "", ModifyCharacter, btnClassArrowLeft);
        DefineBtn(COLOR_PLUS, "", ModifyCharacter, btnClassArrowRight);
        i = 0;
        while (i < 10) {
            DefineLbl((LBL_MOUTH + i), (((i == 9)) ? txt[TXT_COLOR] : ((i)<7) ? txt[(TXT_MOUTH + i)] : txt[((TXT_SPECIAL + i) - 7)]), 0, 0, FontFormat_Default);
            AddFilter((LBL_MOUTH + i), Filter_Shadow);
            i = (i + 1);
        };
        DefineBunch(CHARIMG, CHARBACKGROUND, CHARMOUTH, CHAREARS, CHARBEARD, CHARNOSE, CHAREYES, CHARBROWS, CHARSPECIAL, CHARSPECIAL2, CHARHAIR);
        DefineBunch(CHARIMG2, CHARBACKGROUND2, CHARMOUTH2, CHAREARS2, CHARBEARD2, CHARNOSE2, CHAREYES2, CHARBROWS2, CHARSPECIAL12, CHARSPECIAL22, CHARHAIR2);
        DefineBunch(CHARSPECIALOVL_ELF_M, CHARBROWS);
        DefineBunch(CHARSPECIALOVL_GOBLIN_M, CHARBROWS, CHAREARS, CHARBEARD, CHARMOUTH, CHARNOSE);
        DefineBunch(CHARSPECIALOVL_DWARF_M, CHAREYES, CHARSPECIAL, CHARHAIR);
        DefineBunch(CHARSPECIALOVL_HUMAN_M, CHARBEARD);
        DefineBunch(CHARSPECIALOVL_GOBLIN_F, CHARMOUTH, CHARHAIR, CHARNOSE);
        DefineBunch(CHARSPECIALOVL_ORC_F, CHARMOUTH, CHARHAIR);
        DefineBunch(CHARSPECIALOVL_ELF_F, CHARNOSE, CHAREYES, CHARBROWS, CHARHAIR, CHAREARS, CHARMOUTH);
        DefineBunch(CHARSPECIALOVL_HUMAN_F, CHARBROWS, CHAREYES, CHARHAIR, CHAREARS);
        DefineBunch(CHARSPECIALOVL_DWARF_F, CHARBROWS, CHAREYES, CHARHAIR);
        DefineBunch(CHARSPECIALOVL_GNOM_M, CHARBEARD, CHARHAIR);
        DefineBunch(CHARSPECIALOVL_DARKELF_M, CHAREARS);
        DefineBunch(SCREEN_BUILDCHAR, SCR_BUILDCHAR, BLACK_SQUARE, LBL_SCREEN_TITLE, CHARIMG, RANDOM, CREATE_CHARACTER);
        AddBunch(SCREEN_BUILDCHAR, LBL_CREATE_RACE, LBL_CREATE_RACE_DESC, LBL_CREATE_CLASS, LBL_CREATE_CLASS_DESC, CREATE_GOTO_LOGIN);
        AddBunch(SCREEN_BUILDCHAR, MOUTH_MINUS, MOUTH_PLUS);
        AddBunch(SCREEN_BUILDCHAR, HAIR_MINUS, HAIR_PLUS);
        AddBunch(SCREEN_BUILDCHAR, COLOR_MINUS, COLOR_PLUS);
        AddBunch(SCREEN_BUILDCHAR, BROWS_MINUS, BROWS_PLUS);
        AddBunch(SCREEN_BUILDCHAR, EYES_MINUS, EYES_PLUS);
        AddBunch(SCREEN_BUILDCHAR, BEARD_MINUS, BEARD_PLUS);
        AddBunch(SCREEN_BUILDCHAR, NOSE_MINUS, NOSE_PLUS);
        AddBunch(SCREEN_BUILDCHAR, EARS_MINUS, EARS_PLUS);
        AddBunch(SCREEN_BUILDCHAR, SPECIAL_MINUS, SPECIAL_PLUS);
        AddBunch(SCREEN_BUILDCHAR, SPECIAL2_MINUS, SPECIAL2_PLUS);
        i = 0;
        while (i < 9) {
            AddBunch(SCREEN_BUILDCHAR, (LBL_MOUTH + i));
            i = (i + 1);
        };
        DefineImg(SCR_CITY_BACKG_NIGHT, "res/gfx/scr/stadt/stadt_nacht_background.jpg", false, STADT_BACKG_X, STADT_BACKG_Y);
        DefineImg(SCR_CITY_BACKG_DAWN, "res/gfx/scr/stadt/stadt_abend_background.jpg", false, STADT_BACKG_X, STADT_BACKG_Y);
        DefineImg(SCR_CITY_BACKG_DAY, "res/gfx/scr/stadt/stadt_tag_background.jpg", false, STADT_BACKG_X, STADT_BACKG_Y);
        DefineImg(SCR_CITY_MAIN_NIGHT, "res/gfx/scr/stadt/stadt_nacht_unten.jpg", false, STADT_MAIN_X, STADT_MAIN_Y);
        DefineImg(SCR_CITY_MAIN_DAWN, "res/gfx/scr/stadt/stadt_abend_unten.jpg", false, STADT_MAIN_X, STADT_MAIN_Y);
        DefineImg(SCR_CITY_MAIN_DAY, "res/gfx/scr/stadt/stadt_tag_unten.jpg", false, STADT_MAIN_X, STADT_MAIN_Y);
        DefineImg(SCR_CITY_FOREG_NIGHT, "res/gfx/scr/stadt/stadt_nacht_vordergrund.png", false, STADT_BACKG_X, (STADT_BACKG_Y + STADT_FOREG_Y));
        DefineImg(SCR_CITY_FOREG_DAWN, "res/gfx/scr/stadt/stadt_abend_vordergrund.png", false, STADT_BACKG_X, (STADT_BACKG_Y + STADT_FOREG_Y));
        DefineImg(SCR_CITY_FOREG_DAY, "res/gfx/scr/stadt/stadt_tag_vordergrund.png", false, STADT_BACKG_X, (STADT_BACKG_Y + STADT_FOREG_Y));
        if (Capabilities.version.substr(0, 3) == "IOS"){
            DefineBunch(SCREEN_CITY_NIGHT, SCR_CITY_BACKG_NIGHT, SCR_CITY_MAIN_NIGHT, SCR_CITY_FOREG_NIGHT, CITY_WACHE_NIGHT);
            DefineBunch(SCREEN_CITY_DAWN, SCR_CITY_BACKG_DAWN, SCR_CITY_MAIN_DAWN, SCR_CITY_FOREG_DAWN, CITY_WACHE_NIGHT);
            DefineBunch(SCREEN_CITY_DAY, SCR_CITY_BACKG_DAY, SCR_CITY_MAIN_DAY, SCR_CITY_FOREG_DAY, CITY_WACHE_DAY);
        } else {
            DefineImg(SCR_CITY_CLOUDS_NIGHT, "res/gfx/scr/stadt/wolken_nacht.swf", false, STADT_BACKG_X, STADT_BACKG_Y);
            DefineImg(SCR_CITY_CLOUDS_DAWN, "res/gfx/scr/stadt/wolken_abend.swf", false, STADT_BACKG_X, STADT_BACKG_Y);
            DefineImg(SCR_CITY_CLOUDS_DAY, "res/gfx/scr/stadt/wolken_tag.swf", false, STADT_BACKG_X, STADT_BACKG_Y);
            DefineBunch(SCREEN_CITY_NIGHT, SCR_CITY_BACKG_NIGHT, SCR_CITY_MAIN_NIGHT, SCR_CITY_CLOUDS_NIGHT, SCR_CITY_FOREG_NIGHT, CITY_WACHE_NIGHT);
            DefineBunch(SCREEN_CITY_DAWN, SCR_CITY_BACKG_DAWN, SCR_CITY_MAIN_DAWN, SCR_CITY_CLOUDS_DAWN, SCR_CITY_FOREG_DAWN, CITY_WACHE_NIGHT);
            DefineBunch(SCREEN_CITY_DAY, SCR_CITY_BACKG_DAY, SCR_CITY_MAIN_DAY, SCR_CITY_CLOUDS_DAY, SCR_CITY_FOREG_DAY, CITY_WACHE_DAY);
        };
        DefineImg(CITY_SHAKES, "res/gfx/scr/stadt/overlay_waffenladen.png", false, CITY_SHAKES_X, CITY_SHAKES_Y);
        DefineImg(CITY_ZAUBERLADEN, "res/gfx/scr/stadt/overlay_zauberladen.png", false, CITY_ZAUBERLADEN_X, CITY_ZAUBERLADEN_Y);
        DefineImg(CITY_RUHMESHALLE, "res/gfx/scr/stadt/overlay_ruhmeshalle.png", false, CITY_RUHMESHALLE_X, CITY_RUHMESHALLE_Y);
        DefineImg(CITY_ARENA, "res/gfx/scr/stadt/arena_glow.png", false, CITY_ARENA_X, CITY_ARENA_Y);
        DefineImg(CITY_ARENA_ONO1, "res/gfx/scr/stadt/arena2.png", false, CITY_ARENA_X, CITY_ARENA_Y);
        DefineImg(CITY_ARENA_ONO2, "res/gfx/scr/stadt/arena3.png", false, CITY_ARENA_X, CITY_ARENA_Y);
        DefineImg(CITY_ARENA_ONO3, "res/gfx/scr/stadt/arena4.png", false, CITY_ARENA_X, CITY_ARENA_Y);
        DefineImg(CITY_ARENA_ONO4, "res/gfx/scr/stadt/arena5.png", false, CITY_ARENA_X, CITY_ARENA_Y);
        DefineImg(CITY_DEALER, "res/gfx/scr/stadt/dealer_mouseover.png", false, CITY_DEALER_X, CITY_DEALER_Y);
        DefineImg(CITY_DEALER_ANI1, "res/gfx/scr/stadt/dealer1.png", false, CITY_DEALER_X, CITY_DEALER_Y);
        DefineImg(CITY_DEALER_ANI2, "res/gfx/scr/stadt/dealer2.png", false, CITY_DEALER_X, CITY_DEALER_Y);
        DefineImg(CITY_DEALER_ANI3, "res/gfx/scr/stadt/dealer3.png", false, CITY_DEALER_X, CITY_DEALER_Y);
        DefineImg(CITY_DEALER_ANI4, "res/gfx/scr/stadt/dealer4.png", false, CITY_DEALER_X, CITY_DEALER_Y);
        DefineImg(CITY_DEALER_ANI5, "res/gfx/scr/stadt/dealer5.png", false, CITY_DEALER_X, CITY_DEALER_Y);
        DefineImg(CITY_ESEL1, "res/gfx/scr/stadt/esel1.png", false, CITY_ESEL_X, CITY_ESEL_Y);
        DefineImg(CITY_ESEL2, "res/gfx/scr/stadt/esel2.png", true, CITY_ESEL_X, CITY_ESEL_Y);
        DefineImg(CITY_TAVERNE, "res/gfx/scr/stadt/kneipe.png", false, CITY_TAVERNE_X, CITY_TAVERNE_Y);
        DefineImg(CITY_POST, "res/gfx/scr/stadt/post.png", false, CITY_POST_X, CITY_POST_Y);
        DefineImg(CITY_WACHE_DAY, "res/gfx/scr/stadt/stadtwache_tag.png", false, CITY_WACHE_X, CITY_WACHE_Y);
        DefineImg(CITY_WACHE_NIGHT, "res/gfx/scr/stadt/stadtwache_abend_nacht.png", false, CITY_WACHE_X, CITY_WACHE_Y);
        DefineImg(CITY_SCHILD1, "res/gfx/scr/stadt/schild1.png", true, CITY_SCHILD_X, CITY_SCHILD_Y);
        DefineImg(CITY_SCHILD2, "res/gfx/scr/stadt/schild2.png", true, CITY_SCHILD_X, CITY_SCHILD_Y);
        DefineImg(CITY_SCHILD3, "res/gfx/scr/stadt/schild3.png", true, CITY_SCHILD_X, CITY_SCHILD_Y);
        DefineImg(CITY_SCHILD4, "res/gfx/scr/stadt/schild4.png", true, CITY_SCHILD_X, CITY_SCHILD_Y);
        DefineImg(CITY_MAGIER1, "res/gfx/scr/stadt/magier1.png", false, CITY_MAGIER_X, CITY_MAGIER_Y);
        DefineImg(CITY_MAGIER2, "res/gfx/scr/stadt/magier2.png", true, CITY_MAGIER_X, CITY_MAGIER_Y);
        DefineImg(CITY_ORK1, "res/gfx/scr/stadt/ork1.png", false, CITY_ORK_X, CITY_ORK_Y);
        DefineImg(CITY_ORK2, "res/gfx/scr/stadt/ork2.png", true, CITY_ORK_X, CITY_ORK_Y);
        DefineImg(CITY_SANDWICH1, "res/gfx/scr/stadt/sandwichtyp1.png", false, CITY_SANDWICH_X, CITY_SANDWICH_Y);
        DefineImg(CITY_SANDWICH2, "res/gfx/scr/stadt/sandwichtyp2.png", true, CITY_SANDWICH_X, CITY_SANDWICH_Y);
        DefineImg(CITY_ZWERG1, "res/gfx/scr/stadt/zwerg2.png", false, CITY_ZWERG_X, CITY_ZWERG_Y);
        DefineImg(CITY_ZWERG2, "res/gfx/scr/stadt/zwerg1.png", true, CITY_ZWERG_X, CITY_ZWERG_Y);
        DefineImg(CITY_ELF1, "res/gfx/scr/stadt/elf1.png", false, CITY_ELF_X, CITY_ELF_Y);
        DefineImg(CITY_ELF2, "res/gfx/scr/stadt/elf2.png", true, CITY_ELF_X, CITY_ELF_Y);
        DefineBunch(CITY_STATISTEN, CITY_MAGIER1, CITY_MAGIER2, CITY_ORK1, CITY_ORK2, CITY_SANDWICH1, CITY_SANDWICH2);
        AddBunch(CITY_STATISTEN, CITY_ZWERG1, CITY_ZWERG2, CITY_ELF1, CITY_ELF2, CITY_ZWERG, CITY_ORK);
        AddBunch(CITY_STATISTEN, CITY_SCHILD1, CITY_SCHILD2, CITY_SCHILD3, CITY_SCHILD4);
        DefineBunch(CITY_CA_OVL, IF_OVL, CA_CITY_SHAKES, CA_CITY_ZAUBERLADEN, CA_CITY_RUHMESHALLE, CA_CITY_ARENA, CA_CITY_DEALER, CA_CITY_ESEL, CA_CITY_TAVERNE, CA_CITY_POST, CA_CITY_WACHE, CA_CITY_BUH);
        DefineClickArea(CA_CITY_SHAKES, CITY_SHAKES, InterfaceBtnHandler, CITY_CA_SHAKES_X, CITY_CA_SHAKES_Y, CITY_CA_SHAKES_X, CITY_CA_SHAKES_Y, CITY_CA_OVL);
        DefineClickArea(CA_CITY_ZAUBERLADEN, CITY_ZAUBERLADEN, InterfaceBtnHandler, CITY_CA_ZAUBERLADEN_X, CITY_CA_ZAUBERLADEN_Y, CITY_CA_ZAUBERLADEN_X, CITY_CA_ZAUBERLADEN_Y, CITY_CA_OVL);
        DefineClickArea(CA_CITY_RUHMESHALLE, CITY_RUHMESHALLE, InterfaceBtnHandler, CITY_CA_RUHMESHALLE_X, CITY_CA_RUHMESHALLE_Y, (CITY_CA_RUHMESHALLE_X - 45), CITY_CA_RUHMESHALLE_Y, CITY_CA_OVL);
        DefineClickArea(CA_CITY_ARENA, CITY_ARENA, InterfaceBtnHandler, CITY_CA_ARENA_X, CITY_CA_ARENA_Y, CITY_CA_ARENA_X, CITY_CA_ARENA_Y, CITY_CA_OVL, ShowArenaOno, HideArenaOno);
        DefineClickArea(CA_CITY_DEALER, CITY_DEALER, InterfaceBtnHandler, CITY_CA_DEALER_X, CITY_CA_DEALER_Y, CITY_CA_DEALER_X, CITY_CA_DEALER_Y, CITY_CA_OVL, HideDealerEyes, ShowDealerEyes);
        DefineClickArea(CA_CITY_ESEL, CITY_ESEL2, InterfaceBtnHandler, CITY_CA_ESEL_X, CITY_CA_ESEL_Y, CITY_CA_ESEL_X, CITY_CA_ESEL_Y, CITY_CA_OVL, EselOver, EselOut);
        DefineClickArea(CA_CITY_TAVERNE, CITY_TAVERNE, InterfaceBtnHandler, CITY_CA_TAVERNE_X, CITY_CA_TAVERNE_Y, CITY_CA_TAVERNE_X, CITY_CA_TAVERNE_Y, CITY_ZWERG);
        DefineClickArea(CA_CITY_POST, CITY_POST, InterfaceBtnHandler, CITY_CA_POST_X, CITY_CA_POST_Y, CITY_CA_POST_X, CITY_CA_POST_Y, CITY_ORK);
        DefineClickArea(CA_CITY_WACHE, C_EMPTY, InterfaceBtnHandler, CITY_CA_WACHE_X, CITY_CA_WACHE_Y, CITY_CA_WACHE_X, CITY_CA_WACHE_Y, CITY_CA_OVL, WacheOver, WacheOut);
        DefineClickArea(CA_CITY_BUH, C_EMPTY, InterfaceBtnHandler, CITY_CA_BUH_X, CITY_CA_BUH_Y, CITY_CA_BUH_X, CITY_CA_BUH_Y, CITY_CA_OVL, BuhHover, BuhOut);
        AddMimickInterfaceButtonHoverHandler(CA_CITY_SHAKES);
        AddMimickInterfaceButtonHoverHandler(CA_CITY_ZAUBERLADEN);
        AddMimickInterfaceButtonHoverHandler(CA_CITY_RUHMESHALLE);
        AddMimickInterfaceButtonHoverHandler(CA_CITY_ARENA);
        AddMimickInterfaceButtonHoverHandler(CA_CITY_DEALER);
        AddMimickInterfaceButtonHoverHandler(CA_CITY_ESEL);
        AddMimickInterfaceButtonHoverHandler(CA_CITY_TAVERNE);
        AddMimickInterfaceButtonHoverHandler(CA_CITY_POST);
        AddMimickInterfaceButtonHoverHandler(CA_CITY_WACHE);
        DefineBunch(CITY_OVERLAYS, CITY_SHAKES, CITY_ZAUBERLADEN, CITY_RUHMESHALLE, CITY_ARENA, CITY_DEALER, CITY_ESEL2, CITY_TAVERNE, CITY_POST);
        DefineBunch(SCREEN_CITY, IF_MAIN, CA_CITY_SHAKES, CA_CITY_ZAUBERLADEN, CA_CITY_RUHMESHALLE, CA_CITY_ARENA, CITY_DEALER_ANI5, CA_CITY_DEALER, CITY_ESEL1, CA_CITY_ESEL, CITY_CA_OVL, CA_CITY_TAVERNE, CA_CITY_POST, CA_CITY_BUH);
        DefineBunch(CITY_ZWERG);
        DefineBunch(CITY_ORK);
        Buh = false;
        if (lang_code == "de"){
            DefineImg(BUBBLE_ARENA, (("res/gfx/scr/stadt/" + lang_code) + "/bubble_arena.png"), false, BUBBLE_ARENA_X, BUBBLE_ARENA_Y);
            DefineImg(BUBBLE_ESEL, (("res/gfx/scr/stadt/" + lang_code) + "/bubble_esel.png"), false, BUBBLE_ESEL_X, BUBBLE_ESEL_Y);
            DefineImg(BUBBLE_TAVERNE, (("res/gfx/scr/stadt/" + lang_code) + "/bubble_gasthaus.png"), false, BUBBLE_TAVERNE_X, BUBBLE_TAVERNE_Y);
            DefineImg(BUBBLE_RUHMESHALLE, (("res/gfx/scr/stadt/" + lang_code) + "/bubble_heldenhalle.png"), false, BUBBLE_RUHMESHALLE_X, BUBBLE_RUHMESHALLE_Y);
            DefineImg(BUBBLE_KRISTALL, (("res/gfx/scr/stadt/" + lang_code) + "/bubble_kristall.png"), false, BUBBLE_KRISTALL_X, BUBBLE_KRISTALL_Y);
            DefineImg(BUBBLE_ORAKEL, (("res/gfx/scr/stadt/" + lang_code) + "/bubble_orakel.png"), false, BUBBLE_ORAKEL_X, BUBBLE_ORAKEL_Y);
            DefineImg(BUBBLE_DEALER, (("res/gfx/scr/stadt/" + lang_code) + "/bubble_pilzdealer.png"), false, BUBBLE_DEALER_X, BUBBLE_DEALER_Y);
            DefineImg(BUBBLE_POST, (("res/gfx/scr/stadt/" + lang_code) + "/bubble_post.png"), false, BUBBLE_POST_X, BUBBLE_POST_Y);
            DefineImg(BUBBLE_WACHE, (("res/gfx/scr/stadt/" + lang_code) + "/bubble_stadtwache.png"), false, BUBBLE_WACHE_X, BUBBLE_WACHE_Y);
            DefineImg(BUBBLE_STATUE, (("res/gfx/scr/stadt/" + lang_code) + "/bubble_statue.png"), false, BUBBLE_STATUE_X, BUBBLE_STATUE_Y);
            DefineImg(BUBBLE_SHAKES, (("res/gfx/scr/stadt/" + lang_code) + "/bubble_waffenladen.png"), false, BUBBLE_SHAKES_X, BUBBLE_SHAKES_Y);
            DefineImg(BUBBLE_ZAUBERLADEN, (("res/gfx/scr/stadt/" + lang_code) + "/bubble_zauberladen.png"), false, BUBBLE_ZAUBERLADEN_X, BUBBLE_ZAUBERLADEN_Y);
        } else {
            DefineImg(BUBBLE_ARENA, "res/gfx/empty.png", false, BUBBLE_ARENA_X, BUBBLE_ARENA_Y);
            DefineImg(BUBBLE_ESEL, "res/gfx/empty.png", false, BUBBLE_ESEL_X, BUBBLE_ESEL_Y);
            DefineImg(BUBBLE_TAVERNE, "res/gfx/empty.png", false, BUBBLE_TAVERNE_X, BUBBLE_TAVERNE_Y);
            DefineImg(BUBBLE_RUHMESHALLE, "res/gfx/empty.png", false, BUBBLE_RUHMESHALLE_X, BUBBLE_RUHMESHALLE_Y);
            DefineImg(BUBBLE_KRISTALL, "res/gfx/empty.png", false, BUBBLE_KRISTALL_X, BUBBLE_KRISTALL_Y);
            DefineImg(BUBBLE_ORAKEL, "res/gfx/empty.png", false, BUBBLE_ORAKEL_X, BUBBLE_ORAKEL_Y);
            DefineImg(BUBBLE_DEALER, "res/gfx/empty.png", false, BUBBLE_DEALER_X, BUBBLE_DEALER_Y);
            DefineImg(BUBBLE_POST, "res/gfx/empty.png", false, BUBBLE_POST_X, BUBBLE_POST_Y);
            DefineImg(BUBBLE_WACHE, "res/gfx/empty.png", false, BUBBLE_WACHE_X, BUBBLE_WACHE_Y);
            DefineImg(BUBBLE_STATUE, "res/gfx/empty.png", false, BUBBLE_STATUE_X, BUBBLE_STATUE_Y);
            DefineImg(BUBBLE_SHAKES, "res/gfx/empty.png", false, BUBBLE_SHAKES_X, BUBBLE_SHAKES_Y);
            DefineImg(BUBBLE_ZAUBERLADEN, "res/gfx/empty.png", false, BUBBLE_ZAUBERLADEN_X, BUBBLE_ZAUBERLADEN_Y);
        };
        DefineBunch(BUBBLES, BUBBLE_ARENA, BUBBLE_ESEL, BUBBLE_TAVERNE, BUBBLE_RUHMESHALLE, BUBBLE_KRISTALL, BUBBLE_ORAKEL);
        AddBunch(BUBBLES, BUBBLE_DEALER, BUBBLE_POST, BUBBLE_WACHE, BUBBLE_STATUE, BUBBLE_SHAKES, BUBBLE_ZAUBERLADEN);
        BubbleTimer = new Timer(20);
        BubbleWait = 0;
        BubbleTimer.addEventListener(TimerEvent.TIMER, Bubbles);
        BubbleTimer.start();
        CityAniTimer = new Timer(400);
        CityAniFrame = 0;
        SandwichPause = 0;
        ZwergFussTapp = 0;
        CityAniTimer.addEventListener(TimerEvent.TIMER, CityAni);
        CityAniTimer.start();
        iFrame = -1;
        SchildDir = 1;
        SchildTimer = new Timer(100);
        DealerAniTimer = new Timer(4000);
        DealerStepTimer = new Timer(100);
        DealerAniStep = 0;
        _local2 = DealerAniTimer;
        with (_local2) {
            addEventListener(TimerEvent.TIMER, DealerAni);
            if (!lightMode){
                start();
            } else {
                stop();
            };
        };
        LastOno = 0;
        ThisOno = LastOno;
        OnoPopupTimer = new Timer(50);
        PopupDir = false;
        DefineBtn(IF_EXIT, "", ExitScreen, btnClassExitScreen, IF_EXIT_X, IF_EXIT_Y);
        DefineImg(SCR_HALLE_BG, "res/gfx/scr/hall/heldenhalle.jpg", false, 280, 100);
        DefineBtn(HALLE_UP, "", RuhmesHalleScroll, btnClassArrowUp, HALLE_UPDOWN_X, HALLE_UP_Y);
        DefineBtn(HALLE_DOWN, "", RuhmesHalleScroll, btnClassArrowDown, HALLE_UPDOWN_X, HALLE_DOWN_Y);
        DefineBtn(HALLE_GOTO, txt[TXT_HALLE_GOTO], RuhmesHalleScroll, btnClassLogin, HALLE_GOTO_X, HALLE_GOTO_Y);
        DefineFromClass(INP_HALLE_GOTO, text_input1, HALLE_INP_GOTO_X, HALLE_INP_GOTO_Y, 2, "name");
        actor[INP_HALLE_GOTO].addEventListener(KeyboardEvent.KEY_DOWN, RuhmesHalleScroll);
        actor[INP_HALLE_GOTO].addEventListener(MouseEvent.CLICK, HalleSuchClick);
        DefineCnt(HALL_GOTO_SPIELER, 0, HALLE_GOTO_SPIELERGILDEN_Y);
        DefineCnt(HALL_GOTO_GILDEN, HALLE_GOTO_GILDEN_X, HALLE_GOTO_SPIELERGILDEN_Y);
        DefineLbl(LBL_HALL_GOTO_SPIELER, txt[TXT_GOTO_SPIELER], 0, 0, FontFormat_LogoutLink);
        AddFilter(LBL_HALL_GOTO_SPIELER, Filter_Shadow);
        DefineLbl(LBL_HALL_GOTO_GILDEN, txt[TXT_GOTO_GILDEN], 0, 0, FontFormat_LogoutLink);
        AddFilter(LBL_HALL_GOTO_GILDEN, Filter_Shadow);
        DefineLbl(LBL_HALL_GOTO_SPIELER_HL, txt[TXT_GOTO_SPIELER], 0, 0, FontFormat_LogoutLinkHighLight);
        AddFilter(LBL_HALL_GOTO_SPIELER_HL, Filter_Shadow);
        DefineLbl(LBL_HALL_GOTO_GILDEN_HL, txt[TXT_GOTO_GILDEN], 0, 0, FontFormat_LogoutLinkHighLight);
        AddFilter(LBL_HALL_GOTO_GILDEN_HL, Filter_Shadow);
        MakePersistent(LBL_HALL_GOTO_SPIELER, LBL_HALL_GOTO_GILDEN);
        MakePersistent(LBL_HALL_GOTO_SPIELER_HL, LBL_HALL_GOTO_GILDEN_HL);
        _local2 = actor[HALL_GOTO_SPIELER];
        with (_local2) {
            addChild(actor[LBL_HALL_GOTO_SPIELER]);
            addChild(actor[LBL_HALL_GOTO_SPIELER_HL]);
            textLinkMakeClickable(getChildAt(0).parent);
            addEventListener(MouseEvent.CLICK, RuhmesHalleScroll);
            x = (HALLE_GOTO_SPIELER_X - actor[LBL_HALL_GOTO_SPIELER].textWidth);
            mouseChildren = false;
            useHandCursor = true;
            buttonMode = true;
        };
        _local2 = actor[HALL_GOTO_GILDEN];
        with (_local2) {
            addChild(actor[LBL_HALL_GOTO_GILDEN]);
            addChild(actor[LBL_HALL_GOTO_GILDEN_HL]);
            textLinkMakeClickable(getChildAt(0).parent);
            addEventListener(MouseEvent.CLICK, RuhmesHalleScroll);
            mouseChildren = false;
            useHandCursor = true;
            buttonMode = true;
        };
        DefineCnt(HALL_LIST, HALL_LIST_X, HALL_LIST_Y);
        DefineBunch(SCREEN_HALLE, SCR_HALLE_BG, IF_OVL, IF_EXIT, HALLE_UP, HALLE_DOWN, HALLE_GOTO, INP_HALLE_GOTO, HALL_LIST, HALL_GOTO_SPIELER, HALL_GOTO_GILDEN);
        DefineClickArea(CA_SCR_ARBEITEN_BLOCKCITY, C_EMPTY, InterfaceBtnHandler, 280, 100, (RES_X - 280), (RES_Y - 100));
        _local2 = actor[CA_SCR_ARBEITEN_BLOCKCITY];
        with (_local2) {
            useHandCursor = false;
            buttonMode = false;
        };
        DefineLbl(LBL_SCR_ARBEITEN_TEXT, txt[TXT_ARBEIT_TEXT], LBL_ARBEITEN_TEXT_X, LBL_ARBEITEN_TEXT_Y, FontFormat_Default);
        DefineLbl(LBL_SCR_ARBEITEN_TEXT2, "", LBL_ARBEITEN_TEXT_X, LBL_ARBEITEN_TEXT2_Y, FontFormat_Default);
        actor[LBL_SCR_ARBEITEN_TEXT].width = LBL_ARBEITEN_TEXT_X;
        actor[LBL_SCR_ARBEITEN_TEXT].wordWrap = true;
        actor[LBL_SCR_ARBEITEN_TEXT2].width = LBL_ARBEITEN_TEXT_X;
        actor[LBL_SCR_ARBEITEN_TEXT2].wordWrap = true;
        AddFilter(LBL_SCR_ARBEITEN_TEXT, Filter_Shadow);
        AddFilter(LBL_SCR_ARBEITEN_TEXT2, Filter_Shadow);
        DefineLbl(LBL_SCR_ARBEITEN_TIME, "", 0, (IF_WIN_Y + LBL_ARBEITEN_TIME_Y), FontFormat_Default);
        AddFilter(LBL_SCR_ARBEITEN_TIME, Filter_Shadow);
        DefineCnt(SCR_ARBEITEN_BAR, (IF_WIN_X + ARBEITEN_BAR_X), (IF_WIN_Y + ARBEITEN_BAR_Y));
        DefineCnt(SCR_ARBEITEN_FILL, (IF_WIN_X + ARBEITEN_FILL_X), (IF_WIN_Y + ARBEITEN_FILL_Y));
        DefineSlider(SLDR_ARBEITEN, 10, ARBEITEN_SLIDER_X, ARBEITEN_SLIDER_Y, ArbeitenSliderChange);
        DefineBtn(SCR_ARBEITEN_OK, txt[TXT_OK], RequestArbeiten, btnClassBasic, ((IF_WIN_X + IF_WIN_WELCOME_X) + IF_WIN_X), (IF_WIN_Y + ARBEITEN_Y));
        DefineBtn(SCR_ARBEITEN_CLOSE, txt[TXT_OK], ShowCityScreen, btnClassBasic, ((IF_WIN_X + IF_WIN_WELCOME_X) + IF_WIN_X), (IF_WIN_Y + ARBEITEN_Y));
        DefineBtn(SCR_ARBEITEN_CANCEL, txt[TXT_ABBRECHEN], RequestCancelArbeiten, btnClassBasic, ((IF_WIN_X + IF_WIN_WELCOME_X) + IF_WIN_X), (IF_WIN_Y + ARBEITEN_Y));
        DefineBunch(SCREEN_ARBEITEN, CA_SCR_ARBEITEN_BLOCKCITY, IF_WINDOW, LBL_WINDOW_TITLE, LBL_SCR_ARBEITEN_TEXT, SLDR_ARBEITEN, LBL_SCR_ARBEITEN_TEXT2, SCR_ARBEITEN_OK, IF_EXIT);
        DefineBunch(SCREEN_ARBEITEN_WAIT, CA_SCR_ARBEITEN_BLOCKCITY, IF_WINDOW, LBL_WINDOW_TITLE, LBL_SCR_ARBEITEN_TEXT, SCR_ARBEITEN_BAR, SCR_ARBEITEN_FILL, LBL_SCR_ARBEITEN_TIME, SCR_ARBEITEN_CANCEL, IF_EXIT);
        DefineBunch(SCREEN_ARBEITEN_SUCCESS, CA_SCR_ARBEITEN_BLOCKCITY, IF_WINDOW, LBL_WINDOW_TITLE, LBL_SCR_ARBEITEN_TEXT, LBL_SCR_ARBEITEN_TEXT2, SCR_ARBEITEN_CLOSE, IF_EXIT);
        DefineClickArea(CA_SCR_INVITE_BLOCKCITY, C_EMPTY, InterfaceBtnHandler, 280, 100, (RES_X - 280), (RES_Y - 100));
        _local2 = actor[CA_SCR_INVITE_BLOCKCITY];
        with (_local2) {
            useHandCursor = false;
            buttonMode = false;
        };
        DefineLbl(LBL_INVITE_SUCCESS, "", ((IF_WIN_X + IF_WIN_WELCOME_X) - (420 / 2)), ((IF_WIN_Y + ARENA_TEXT_Y) + AIRRelMoveY), FontFormat_Default);
        AddFilter(LBL_INVITE_SUCCESS, Filter_Shadow);
        _local2 = actor[LBL_INVITE_SUCCESS];
        with (_local2) {
            wordWrap = true;
            width = 420;
            text = txt[TXT_INVITESUCCESS];
        };
        DefineLbl(LBL_INVITE_TEXT, "", ((IF_WIN_X + IF_WIN_WELCOME_X) - (420 / 2)), ((IF_WIN_Y + ARENA_TEXT_Y) + AIRRelMoveY), FontFormat_Default);
        AddFilter(LBL_INVITE_TEXT, Filter_Shadow);
        _local2 = actor[LBL_INVITE_TEXT];
        with (_local2) {
            wordWrap = true;
            width = 420;
            text = txt[TXT_INVITEINSTR];
        };
        DefineFromClass(INP_CHAR_INVITE, text_input1, 0, (((IF_WIN_Y + ARENA_INP_Y) - 40) + AIRRelMoveY), 2, "email");
        _local2 = actor[INP_CHAR_INVITE];
        with (_local2) {
            getChildAt(1).text = "";
            x = (((IF_WIN_X + IF_WIN_WELCOME_X) - int((width / 2))) + 40);
            addEventListener(KeyboardEvent.KEY_DOWN, SendPlayerInvite);
        };
        DefineLbl(LBL_INVITE_TEXT2, txt[TXT_INVITEEMAIL], 0, ((actor[INP_CHAR_INVITE].y + 10) + AIRRelMoveY), FontFormat_Default);
        AddFilter(LBL_INVITE_TEXT2, Filter_Shadow);
        actor[LBL_INVITE_TEXT2].x = ((actor[INP_CHAR_INVITE].x - actor[LBL_INVITE_TEXT2].width) - 5);
        DefineFromClass(INP_CHAR_INVITE2, text_input1, 0, (((IF_WIN_Y + ARENA_INP_Y) + 10) + AIRRelMoveY), 2, "text");
        _local2 = actor[INP_CHAR_INVITE2];
        with (_local2) {
            getChildAt(1).text = "";
            x = (((IF_WIN_X + IF_WIN_WELCOME_X) - int((width / 2))) + 40);
            addEventListener(KeyboardEvent.KEY_DOWN, SendPlayerInvite);
        };
        DefineLbl(LBL_INVITE_TEXT3, txt[TXT_INVITESUBJECT], 0, ((actor[INP_CHAR_INVITE2].y + 10) + AIRRelMoveY), FontFormat_Default);
        AddFilter(LBL_INVITE_TEXT3, Filter_Shadow);
        actor[LBL_INVITE_TEXT3].x = ((actor[INP_CHAR_INVITE2].x - actor[LBL_INVITE_TEXT3].width) - 5);
        DefineBtn(SCR_INVITE_OK, txt[TXT_OK], SendPlayerInvite, btnClassBasic, ((IF_WIN_X + IF_WIN_WELCOME_X) + IF_WIN_X), (((IF_WIN_Y + ARBEITEN_Y) + 15) + AIRRelMoveY));
        DefineBtn(INVITE_SUCCESS_OK, txt[TXT_OK], RemoveInviteWindow, btnClassBasic, ((IF_WIN_X + IF_WIN_WELCOME_X) + IF_WIN_X), (((IF_WIN_Y + ARBEITEN_Y) + 15) + AIRRelMoveY));
        DefineBunch(SCREEN_INVITE, CA_SCR_INVITE_BLOCKCITY, IF_WINDOW, LBL_WINDOW_TITLE, LBL_INVITE_TEXT, INP_CHAR_INVITE, LBL_INVITE_TEXT2, INP_CHAR_INVITE2, LBL_INVITE_TEXT3, SCR_INVITE_OK, IF_EXIT, LBL_INVITE_SUCCESS, INVITE_SUCCESS_OK);
        DefineBunch(INVITE_INPUTDIALOGUE, LBL_INVITE_TEXT, INP_CHAR_INVITE, LBL_INVITE_TEXT2, INP_CHAR_INVITE2, LBL_INVITE_TEXT3, SCR_INVITE_OK);
        DefineBunch(INVITE_SUCCESS, LBL_INVITE_SUCCESS, INVITE_SUCCESS_OK);
        DefineImg(ALBUM_BG, "res/gfx/scr/album/album.jpg", false, 280, 100);
        DefineLbl(LBL_ALBUM_PAGENUMBER_LEFT, "", 340, 690, FontFormat_Book);
        DefineLbl(LBL_ALBUM_PAGENUMBER_RIGHT, "", 0, 690, FontFormat_Book);
        DefineLbl(LBL_ALBUM_COLLECTION, "", 330, 135, FontFormat_BookLeft);
        DefineBunch(SCREEN_ALBUM, ALBUM_BG, IF_OVL, IF_EXIT, LBL_ALBUM_PAGENUMBER_LEFT, LBL_ALBUM_PAGENUMBER_RIGHT, LBL_ALBUM_COLLECTION);
        DefineImg(UNKNOWN_ENEMY, "res/gfx/scr/fight/monster/unknown.jpg", false, 0, 0);
        i = 0;
        while (i < 4) {
            DefineLbl((LBL_ALBUM_HEADING + i), "", 0, (((i % 2))==0) ? 135 : 440, FontFormat_Book);
            DefineLbl((LBL_ALBUM_HINT + i), "", 0, (((i % 2))==0) ? 165 : 470, FontFormat_BookHint);
            DefineCnt((ALBUM_MONSTER + i), ((i)<=1) ? 420 : 890, (((i % 2))==0) ? 170 : 475);
            DefineCnt((ALBUM_MONSTER_FRAME + i), (actor[(ALBUM_MONSTER + i)].x - 8), (actor[(ALBUM_MONSTER + i)].y - 8));
            actor[(ALBUM_MONSTER + i)].scaleX = 0.8;
            actor[(ALBUM_MONSTER + i)].scaleY = 0.8;
            actor[(ALBUM_MONSTER_FRAME + i)].scaleX = 0.8;
            actor[(ALBUM_MONSTER_FRAME + i)].scaleY = 0.8;
            DefineCnt((ALBUM_WEAPON_1 + i), (actor[(ALBUM_MONSTER + i)].x + 25), (actor[(ALBUM_MONSTER + i)].y + (((i % 2))==0) ? 10 : 130));
            DefineCnt((ALBUM_WEAPON_2 + i), (actor[(ALBUM_MONSTER + i)].x + 135), (actor[(ALBUM_MONSTER + i)].y + (((i % 2))==0) ? 10 : 130));
            DefineCnt((ALBUM_WEAPON_3 + i), (actor[(ALBUM_MONSTER + i)].x - 30), (actor[(ALBUM_MONSTER + i)].y + (((i % 2))==0) ? 130 : 10));
            DefineCnt((ALBUM_WEAPON_4 + i), (actor[(ALBUM_MONSTER + i)].x + 75), (actor[(ALBUM_MONSTER + i)].y + (((i % 2))==0) ? 130 : 10));
            DefineCnt((ALBUM_WEAPON_5 + i), (actor[(ALBUM_MONSTER + i)].x + 180), (actor[(ALBUM_MONSTER + i)].y + (((i % 2))==0) ? 130 : 10));
            DefineCnt((ALBUM_WEAPON_EPIC + i), (actor[(ALBUM_MONSTER + i)].x + 75), (actor[(ALBUM_MONSTER + i)].y + 70));
            AddBunch(SCREEN_ALBUM, (LBL_ALBUM_HEADING + i), (LBL_ALBUM_HINT + i), (ALBUM_MONSTER + i), (ALBUM_MONSTER_FRAME + i));
            AddBunch(SCREEN_ALBUM, (ALBUM_WEAPON_1 + i), (ALBUM_WEAPON_2 + i), (ALBUM_WEAPON_3 + i));
            AddBunch(SCREEN_ALBUM, (ALBUM_WEAPON_4 + i), (ALBUM_WEAPON_5 + i), (ALBUM_WEAPON_EPIC + i));
            i = (i + 1);
        };
        DefineBunch(ALBUM_CAT_IN);
        i = 0;
        while (i < 5) {
            DefineImg((ALBUM_CAT_OUT + i), (("res/gfx/scr/album/tab_" + String(i)) + "_out.jpg"), false, 0, 0);
            DefineImg((ALBUM_CAT_IN + i), (("res/gfx/scr/album/tab_" + String(i)) + "_in.jpg"), false, 290, (300 + (i * 80)));
            DefineCnt((ALBUM_CAT_OUT + i), 290, (300 + (i * 80)));
            MakePersistent((ALBUM_CAT_OUT + i));
            _local2 = actor[(ALBUM_CAT_OUT + i)];
            with (_local2) {
                addChild(actor[(ALBUM_CAT_OUT + i)]);
                addEventListener(MouseEvent.CLICK, ShowAlbumContent);
                mouseChildren = false;
                buttonMode = true;
                useHandCursor = true;
            };
            EnablePopup((ALBUM_CAT_IN + i), txt[((TXT_COLLECTION + 2) + i)]);
            EnablePopup((ALBUM_CAT_OUT + i), txt[((TXT_COLLECTION + 2) + i)]);
            AddBunch(ALBUM_CAT_IN, (ALBUM_CAT_IN + i));
            AddBunch(SCREEN_ALBUM, (ALBUM_CAT_OUT + i), (ALBUM_CAT_IN + i));
            i = (i + 1);
        };
        DefineBtn(ALBUM_PREV, "", ShowAlbumContent, btnClassArrowLeft, 340, 715);
        DefineBtn(ALBUM_NEXT, "", ShowAlbumContent, btnClassArrowRight, 1180, 715);
        AddBunch(SCREEN_ALBUM, ALBUM_PREV, ALBUM_NEXT);
        DefineImg(SCR_CHAR_BG, "res/gfx/scr/char/charbg.jpg", false, 280, 100);
        DefineImg(SCR_CHAR_BG_GOLDEN, "res/gfx/scr/char/gold_bg.jpg", false, 280, 100);
        DefineImg(SCR_CHAR_BG_RIGHT, "res/gfx/scr/char/character_right_new.jpg", false, (280 + 500), 100);
        i = 0;
        while (i < 13) {
            DefineImg((MIRROR_PIECE + i), (("res/gfx/scr/char/mirror/mirror" + String((i + 1))) + ".png"), false, SCR_CHAR_CHARX, SCR_CHAR_CHARY);
            actor[(MIRROR_PIECE + i)].alpha = 0.3;
            actor[(MIRROR_PIECE + i)].mouseEnabled = false;
            i = (i + 1);
        };
        DefineImg(GOLDEN_FRAME, "res/gfx/scr/char/gold_frame.png", false, (SCR_CHAR_CHARX - 3), (SCR_CHAR_CHARY - 5));
        DefineClickArea(CA_SELL_ITEM, C_EMPTY, undefined, (280 + 550), 100, 450, 700);
        DefineClickArea(CA_USE_ITEM, C_EMPTY, undefined, 280, 100, 500, 415);
        DefineCnt(SCR_CHAR_NAME, CHAR_NAME_X, CHAR_NAME_Y);
        DefineLbl(LBL_SCR_CHAR_NAME, "", 0, 0, FontFormat_Default);
        MakePersistent(LBL_SCR_CHAR_NAME);
        _local2 = actor[SCR_CHAR_NAME];
        with (_local2) {
            addChild(actor[LBL_SCR_CHAR_NAME]);
            textLinkMakeClickable(getChildAt(0).parent);
            addEventListener(MouseEvent.CLICK, GotoPlayerGilde);
            mouseChildren = false;
            useHandCursor = true;
            buttonMode = true;
        };
        DefineBtn(PREV_PLAYER, "", PrevPlayer, btnClassArrowLeft, (SCR_CHAR_CHARX + 10), (SCR_CHAR_CHARY + 10));
        DefineBtn(NEXT_PLAYER, "", NextPlayer, btnClassArrowRight, (SCR_CHAR_CHARX + 215), (SCR_CHAR_CHARY + 10));
        DefineFromClass(SHP_BLACK_GILDEEHRE, black_square_neutral, GILDEEHRE_X, GILDEEHRE_Y);
        _local2 = actor[SHP_BLACK_GILDEEHRE];
        with (_local2) {
            width = GILDEEHRE_X;
            height = GILDEEHRE_Y;
            alpha = 0.65;
        };
        DefineCnt(SCR_CHAR_GILDE, ((GILDEEHRE_X + GILDEEHRE_X) + 40), (GILDEEHRE_Y + GILDEEHRE_Y));
        DefineLbl(LBL_SCR_CHAR_GILDE, "", 0, 0, FontFormat_Default);
        MakePersistent(LBL_SCR_CHAR_GILDE);
        _local2 = actor[SCR_CHAR_GILDE];
        with (_local2) {
            addChild(actor[LBL_SCR_CHAR_GILDE]);
            textLinkMakeClickable(getChildAt(0).parent);
            addEventListener(MouseEvent.CLICK, JumpToPlayerHall);
            mouseEnabled = true;
            buttonMode = true;
            useHandCursor = true;
            mouseChildren = false;
        };
        DefineImg(SLOT_SUGGESTION, "res/gfx/scr/char/slot_suggestion.png", false, 0, 0);
        actor[SLOT_SUGGESTION].mouseEnabled = false;
        DefineLbl(LBL_SCR_CHAR_EHRE, "", 0, (GILDEEHRE_Y + GILDEEHRE_Y), FontFormat_Default);
        DefineImg(SCR_CHAR_KLASSE_1, "res/gfx/scr/char/char_krieger.jpg", false, ((GILDEEHRE_X + GILDEEHRE_X) - 10), ((GILDEEHRE_Y + GILDEEHRE_Y) - 10));
        DefineImg(SCR_CHAR_KLASSE_2, "res/gfx/scr/char/char_magier.jpg", false, ((GILDEEHRE_X + GILDEEHRE_X) - 10), ((GILDEEHRE_Y + GILDEEHRE_Y) - 10));
        DefineImg(SCR_CHAR_KLASSE_3, "res/gfx/scr/char/char_dieb.jpg", false, ((GILDEEHRE_X + GILDEEHRE_X) - 10), ((GILDEEHRE_Y + GILDEEHRE_Y) - 10));
        EnablePopup(SCR_CHAR_KLASSE_1, txt[TXT_CLASSNAME]);
        EnablePopup(SCR_CHAR_KLASSE_2, txt[(TXT_CLASSNAME + 1)]);
        EnablePopup(SCR_CHAR_KLASSE_3, txt[(TXT_CLASSNAME + 2)]);
        DefineFromClass(SHP_BLACK_CHARDESC, black_square_neutral, GILDEEHRE_X, ((GILDEEHRE_Y + GILDEEHRE_Y) + BLACK_CHARDESC_Y));
        _local2 = actor[SHP_BLACK_CHARDESC];
        with (_local2) {
            width = BLACK_CHARDESC_X;
            height = BLACK_CHARDESC_Y;
            alpha = 0.65;
        };
        DefineFromClass(INP_CHARDESC, SimpleTextAreaSmall, (GILDEEHRE_X + GILDEEHRE_X), (((GILDEEHRE_Y + GILDEEHRE_Y) + BLACK_CHARDESC_Y) + GILDEEHRE_Y), 1, "text");
        CleanupField(INP_CHARDESC);
        AddFilter(INP_CHARDESC, Filter_Shadow);
        _local2 = actor[INP_CHARDESC];
        with (_local2) {
            mouseEnabled = true;
            addEventListener(FocusEvent.FOCUS_IN, EnterPlayerDesc);
            addEventListener(FocusEvent.FOCUS_OUT, LeavePlayerDesc);
        };
        DefineLbl(LBL_CHAR_DELAY, "", 0, (100 + CHAR_DELAY_Y), FontFormat_Default);
        AddFilter(LBL_CHAR_DELAY, Filter_Shadow);
        DefineBunch(CHAR_RIGHTPANE, SCR_CHAR_BG_RIGHT, IF_OVL, SCR_CHAR_KLASSE_1, SCR_CHAR_KLASSE_2, SCR_CHAR_KLASSE_3, SCR_CHAR_GILDE, LBL_SCR_CHAR_EHRE, INP_CHARDESC);
        AddFilter(LBL_SCR_CHAR_NAME, Filter_Shadow);
        AddFilter(LBL_SCR_CHAR_GILDE, Filter_Shadow);
        AddFilter(LBL_SCR_CHAR_EHRE, Filter_Shadow);
        DefineImg(SCR_CHAR_EXPBAR, "res/gfx/scr/char/experience.jpg", false, EXPERIENCE_BAR_X, EXPERIENCE_BAR_Y);
        DefineLbl(LBL_SCR_CHAR_EXPLABEL, "", 0, (EXPERIENCE_BAR_Y + 2), FontFormat_LifeBar);
        AddFilter(LBL_SCR_CHAR_EXPLABEL, Filter_Shadow);
        DefineClickArea(CA_SCR_CHAR_EXPBAR, C_EMPTY, undefined, EXPERIENCE_BAR_X, EXPERIENCE_BAR_Y, 254, 24);
        DefineBtn(CHAR_MESSAGE, txt[TXT_MESSAGE], PlayerSendMessage, btnClassBasic, CHAR_PLAYERX1, CHAR_PLAYERY);
        DefineBtn(CHAR_ATTACK, txt[TXT_ATTACK], PlayerAttack, btnClassBasic, CHAR_PLAYERX2, CHAR_PLAYERY);
        DefineBtn(CHAR_GILDE, txt[TXT_ZURGILDE], ZurGilde, btnClassBasic, CHAR_PLAYERX2, CHAR_PLAYERY);
        DefineBtn(CHAR_ALBUM, txt[TXT_ALBUM], RequestAlbum, btnClassBasic, CHAR_PLAYERX1, CHAR_PLAYERY);
        DefineBtn(PLAYER_GUILD_INVITE, "", PlayerGuildInvite, btnClassInvite, (((280 + 500) + CHAR_RUESTUNG_X) + 223), ((100 + CHAR_RUESTUNG_Y) - 7));
        EnablePopup(PLAYER_GUILD_INVITE, txt[TXT_SUBJECT_GUILD_INVITE]);
        DefineBtn(CHAR_INVITE, txt[(TXT_ACH_4 + 4)], PlayerInvite, btnClassBasic, CHAR_PLAYERX2, CHAR_PLAYERY);
        EnablePopup(CHAR_INVITE, txt[(TXT_ACH_4 + 5)]);
        i = 0;
        while (i < 8) {
            DefineImg((CHAR_MOUNT_1 + i), (("res/gfx/scr/char/mount_portrait_" + String((i + 1))) + ".jpg"), false, (CHAR_MOUNT_X + CHAR_MOUNT_X), CHAR_MOUNT_Y);
            _local2 = actor[(CHAR_MOUNT_1 + i)];
            with (_local2) {
                addEventListener(MouseEvent.CLICK, RequestStableScreen);
            };
            AddBunch(CHAR_RIGHTPANE, (CHAR_MOUNT_1 + i));
            i = (i + 1);
        };
        DefineLbl(LBL_CHAR_MOUNT_NAME, "", CHAR_MOUNT_X, CHAR_MOUNT_Y, FontFormat_Default);
        AddFilter(LBL_CHAR_MOUNT_NAME, Filter_Shadow);
        DefineLbl(LBL_CHAR_MOUNT_DESCR, "", CHAR_MOUNT_X, (CHAR_MOUNT_Y + CHAR_MOUNT_LINE_Y), FontFormat_DefaultLeft);
        _local2 = actor[LBL_CHAR_MOUNT_DESCR];
        with (_local2) {
            wordWrap = true;
            width = (CHAR_MOUNT_X - 5);
        };
        AddFilter(LBL_CHAR_MOUNT_DESCR, Filter_Shadow);
        DefineLbl(LBL_CHAR_MOUNT_RUNTIME, "", CHAR_MOUNT_X, (CHAR_MOUNT_Y + (CHAR_MOUNT_LINE_Y * 5)), FontFormat_Default);
        AddFilter(LBL_CHAR_MOUNT_RUNTIME, Filter_Shadow);
        DefineLbl(LBL_CHAR_MOUNT_GAIN, "", CHAR_MOUNT_X, (CHAR_MOUNT_Y + (CHAR_MOUNT_LINE_Y * 4)), FontFormat_Default);
        AddFilter(LBL_CHAR_MOUNT_GAIN, Filter_Shadow);
        DefineImg(CHAR_RUESTUNG, "res/gfx/scr/char/icon_schild.jpg", false, ((280 + 500) + CHAR_RUESTUNG_X), (100 + CHAR_RUESTUNG_Y));
        DefineLbl(LBL_CHAR_RUESTUNG, "", (((280 + 500) + CHAR_RUESTUNG_X) + CHAR_RUESTUNG_TEXT_X), ((100 + CHAR_RUESTUNG_Y) + CHAR_RUESTUNG_TEXT_Y), FontFormat_Default);
        AddFilter(LBL_CHAR_RUESTUNG, Filter_Shadow);
        DefineImg(CHAR_ALBUM, "res/gfx/scr/char/icon_foliant.png", false, ((280 + 500) + 350), (100 + 20));
        AddBunch(CHAR_RIGHTPANE, LBL_CHAR_MOUNT_NAME, LBL_CHAR_MOUNT_RUNTIME, LBL_CHAR_MOUNT_GAIN, LBL_CHAR_MOUNT_DESCR, CHAR_RUESTUNG, LBL_CHAR_RUESTUNG);
        DefineBunch(SCREEN_CHAR, SCR_CHAR_BG, SCR_CHAR_EXPBAR, IF_OVL, CHAR_RIGHTPANE, LBL_SCR_CHAR_EXPLABEL, CA_SCR_CHAR_EXPBAR, SCR_CHAR_NAME, IF_EXIT);
        DefineBunch(SCREEN_CHAR_GOLDEN, SCR_CHAR_BG, SCR_CHAR_BG_GOLDEN, SCR_CHAR_EXPBAR, IF_OVL, CHAR_RIGHTPANE, LBL_SCR_CHAR_EXPLABEL, CA_SCR_CHAR_EXPBAR, SCR_CHAR_NAME, IF_EXIT);
        DefineBunch(CHAR_SECONDPROP);
        DefineBunch(CHAR_PREISE);
        BoostBtnRepeatTimer = new Timer(1000);
        DestroyBoostBtnTimer = false;
        i = 0;
        while (i < 5) {
            DefineLbl((LBL_SCR_CHAR_STAERKE_CAPTION + i), txt[(TXT_CHAR_STAERKE + i)], CHAR_PROP_COLUMN_1_X, (CHAR_PROP_Y + (i * CHAR_PROP_Y)), FontFormat_Default);
            DefineLbl((LBL_SCR_CHAR_STAERKE + i), "", CHAR_PROP_COLUMN_2_X, (CHAR_PROP_Y + (i * CHAR_PROP_Y)), FontFormat_Attrib);
            DefineBtn((SCR_CHAR_STEIGERN1 + i), "", BoostAttribute, btnClassPlus, CHAR_PROP_COLUMN_3_X, ((CHAR_PROP_Y + (i * CHAR_PROP_Y)) - 3));
            _local2 = actor[(SCR_CHAR_STEIGERN1 + i)];
            with (_local2) {
                addEventListener(MouseEvent.MOUSE_DOWN, BoostBtnDownHandler);
                addEventListener(MouseEvent.MOUSE_UP, BoostBtnUpHandler);
                addEventListener(MouseEvent.MOUSE_OUT, BoostBtnUpHandler);
                addEventListener(MouseEvent.MOUSE_OVER, BoostBtnOver);
                addEventListener(MouseEvent.MOUSE_OUT, BoostBtnOut);
            };
            DefineLbl((LBL_SCR_CHAR_PREIS1 + i), "", 0, (CHAR_PROP_Y + (i * CHAR_PROP_Y)), FontFormat_Default);
            DefineCnt((SCR_CHAR_GOLD1 + i), 0, (CHAR_PROP_Y + (i * CHAR_PROP_Y)));
            DefineLbl((LBL_SCR_CHAR_SILBER1 + i), "", 0, (CHAR_PROP_Y + (i * CHAR_PROP_Y)), FontFormat_Default);
            DefineCnt((SCR_CHAR_SILBER1 + i), 0, (CHAR_PROP_Y + (i * CHAR_PROP_Y)));
            DefineLbl((LBL_SCR_CHAR_SCHADEN_CAPTION + i), txt[(TXT_CHAR_SCHADEN + i)], CHAR_PROP_COLUMN_5_X, (CHAR_PROP_Y + (i * CHAR_PROP_Y)), FontFormat_Default);
            DefineLbl((LBL_SCR_CHAR_SCHADEN + i), "", CHAR_PROP_COLUMN_6_X, (CHAR_PROP_Y + (i * CHAR_PROP_Y)), FontFormat_Attrib);
            AddBunch(CHAR_SECONDPROP, (LBL_SCR_CHAR_SCHADEN_CAPTION + i));
            AddBunch(SCREEN_CHAR, (SCR_CHAR_STEIGERN1 + i), (LBL_SCR_CHAR_PREIS1 + i), (SCR_CHAR_GOLD1 + i), (LBL_SCR_CHAR_SILBER1 + i), (SCR_CHAR_SILBER1 + i));
            AddBunch(SCREEN_CHAR, (LBL_SCR_CHAR_STAERKE + i), (LBL_SCR_CHAR_STAERKE_CAPTION + i), (LBL_SCR_CHAR_SCHADEN + i), (LBL_SCR_CHAR_SCHADEN_CAPTION + i));
            AddBunch(SCREEN_CHAR_GOLDEN, (SCR_CHAR_STEIGERN1 + i), (LBL_SCR_CHAR_PREIS1 + i), (SCR_CHAR_GOLD1 + i), (LBL_SCR_CHAR_SILBER1 + i), (SCR_CHAR_SILBER1 + i));
            AddBunch(SCREEN_CHAR_GOLDEN, (LBL_SCR_CHAR_STAERKE + i), (LBL_SCR_CHAR_STAERKE_CAPTION + i), (LBL_SCR_CHAR_SCHADEN + i), (LBL_SCR_CHAR_SCHADEN_CAPTION + i));
            AddBunch(CHAR_PREISE, (LBL_SCR_CHAR_PREIS1 + i), (SCR_CHAR_GOLD1 + i), (LBL_SCR_CHAR_SILBER1 + i), (SCR_CHAR_SILBER1 + i));
            AddBunch(CHAR_RIGHTPANE, (SCR_CHAR_STEIGERN1 + i));
            i = (i + 1);
        };
        BoostBtnChange = 0;
        BoostBtnTimer = new Timer(40);
        BoostBtnTimer.addEventListener(TimerEvent.TIMER, BoostBtnTimerFunction);
        BoostBtnTimer.start();
        DefineCnt(CHAR_SLOT_1, CHAR_SLOTS_LEFT_X, CHAR_SLOTS_TOP_Y);
        DefineCnt(CHAR_SLOT_2, CHAR_SLOTS_LEFT_X, CHAR_SLOTS_ROW2_Y);
        DefineCnt(CHAR_SLOT_3, CHAR_SLOTS_LEFT_X, CHAR_SLOTS_ROW3_Y);
        DefineCnt(CHAR_SLOT_4, CHAR_SLOTS_LEFT_X, CHAR_SLOTS_ROW4_Y);
        DefineCnt(CHAR_SLOT_5, CHAR_SLOTS_RIGHT_X, CHAR_SLOTS_TOP_Y);
        DefineCnt(CHAR_SLOT_6, CHAR_SLOTS_RIGHT_X, CHAR_SLOTS_ROW2_Y);
        DefineCnt(CHAR_SLOT_7, CHAR_SLOTS_RIGHT_X, CHAR_SLOTS_ROW3_Y);
        DefineCnt(CHAR_SLOT_8, CHAR_SLOTS_RIGHT_X, CHAR_SLOTS_ROW4_Y);
        DefineCnt(CHAR_SLOT_9, CHAR_SLOTS_R4C2_X, CHAR_SLOTS_ROW4_Y);
        DefineCnt(CHAR_SLOT_10, CHAR_SLOTS_R4C3_X, CHAR_SLOTS_ROW4_Y);
        DefineCnt(CHAR_SLOT_11, CHAR_SLOTS_LEFT_X, CHAR_SLOTS_ROW5_Y);
        DefineCnt(CHAR_SLOT_12, CHAR_SLOTS_R5C2_X, CHAR_SLOTS_ROW5_Y);
        DefineCnt(CHAR_SLOT_13, CHAR_SLOTS_R5C3_X, CHAR_SLOTS_ROW5_Y);
        DefineCnt(CHAR_SLOT_14, CHAR_SLOTS_R5C4_X, CHAR_SLOTS_ROW5_Y);
        DefineCnt(CHAR_SLOT_15, CHAR_SLOTS_RIGHT_X, CHAR_SLOTS_ROW5_Y);
        i = 0;
        while (i < 8) {
            DefineImg((EMPTY_SLOT_1 + i), (("res/gfx/scr/char/slot" + String((i + 1))) + ".png"), false, 0, 0);
            i = (i + 1);
        };
        DefineImg(EMPTY_SLOT_9_1, "res/gfx/scr/char/slot9_1.png", false, 0, 0);
        DefineImg(EMPTY_SLOT_9_2, "res/gfx/scr/char/slot9_2.png", false, 0, 0);
        DefineImg(EMPTY_SLOT_9_3, "res/gfx/scr/char/slot9_3.png", false, 0, 0);
        DefineImg(EMPTY_SLOT_10, "res/gfx/scr/char/slot10.png", false, 0, 0);
        DefineImg(NO_SHIELD, "res/gfx/itm/no_shield.png", false, 0, 0);
        itmTyp = 0;
        while (itmTyp <= 14) {
            itmPic = 0;
            while (itmPic < C_ITEMS_PER_TYPE) {
                itmColor = 0;
                while (itmColor < 5) {
                    switch (itmTyp){
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                        case 6:
                        case 7:
                            itmClass = 0;
                            while (itmClass < 3) {
                                DefineImg(GetItemID(itmTyp, itmPic, itmColor, itmClass), GetItemFile(itmTyp, itmPic, itmColor, itmClass), false, 0, 0);
                                itmClass = (itmClass + 1);
                            };
                            break;
                        default:
                            DefineImg(GetItemID(itmTyp, itmPic, itmColor, 0), GetItemFile(itmTyp, itmPic, itmColor, 0), false, 0, 0);
                    };
                    itmColor = (itmColor + 1);
                };
                itmPic = (itmPic + 1);
            };
            itmTyp = (itmTyp + 1);
        };
        itmTyp = 0;
        while (itmTyp <= 1) {
            itmPic = 0;
            while (itmPic < C_ITEMS_PER_TYPE) {
                itmColor = 0;
                while (itmColor < 5) {
                    DefineImg(GetArrowID(itmTyp, itmPic, itmColor), (((((((("res/gfx/itm/1-" + String((itmTyp + 2))) + "/shot") + (((itmTyp == 0)) ? 2 : 1)) + "-") + String(itmPic)) + "-") + String(((((itmPic >= 50)) ? (((itmTyp == 0)) ? (((itmColor == 3)) ? 3 : 0) : 0) : itmColor) + 1))) + ".png"), false, 0, 0);
                    itmColor = (itmColor + 1);
                };
                itmPic = (itmPic + 1);
            };
            itmTyp = (itmTyp + 1);
        };
        i = 0;
        while (i < 15) {
            SetCnt((CHAR_SLOT_1 + i), ITM_OFFS);
            actor[(CHAR_SLOT_1 + i)].addEventListener(MouseEvent.MOUSE_DOWN, InventoryItemMouseDown);
            if (i >= 10){
                actor[(CHAR_SLOT_1 + i)].addEventListener(MouseEvent.MOUSE_DOWN, BackpackItemMouseDown);
            };
            AddBunch(SCREEN_CHAR, (CHAR_SLOT_1 + i));
            AddBunch(SCREEN_CHAR_GOLDEN, (CHAR_SLOT_1 + i));
            EnableDragDrop((CHAR_SLOT_1 + i), DropHandler);
            actor[(CHAR_SLOT_1 + i)].addEventListener(MouseEvent.MOUSE_UP, InventoryItemMouseUp);
            i = (i + 1);
        };
        DefineBunch(CHAR_ACH);
        i = 0;
        while (i < 40) {
            DefineCnt((CHAR_ACH + i), (SCR_CHAR_ACH_X + (((buffedMode) ? SCR_CHAR_ACH_X_BUFFED : SCR_CHAR_ACH_X) * (i % 8))), SCR_CHAR_ACH_Y);
            DefineImg((CHAR_ACH + i), (((("res/gfx/scr/char/ach/ach-" + String(((i % 8) + 1))) + "-") + String(int((i / 8)))) + ".png"), false, 0, 0);
            SetCnt((CHAR_ACH + i), (CHAR_ACH + i));
            MakePersistent((CHAR_ACH + i));
            if (!txt[(TXT_ACH_4 + 4)]){
                if ((i % 8) == 7){
                    _local2 = actor[(CHAR_ACH + i)];
                    with (_local2) {
                        addEventListener(MouseEvent.CLICK, OpenFriendLink);
                        buttonMode = true;
                        useHandCursor = true;
                        mouseChildren = false;
                    };
                };
            };
            AddBunch(CHAR_ACH, (CHAR_ACH + i));
            i = (i + 1);
        };
        i = 0;
        while (i < 3) {
            DefineCnt((CHAR_POTION + i), (POTION_X + (POTION_X * i)), POTION_Y);
            _local2 = actor[(CHAR_POTION + i)];
            with (_local2) {
                scaleX = 0.5;
                scaleY = 0.5;
            };
            AddBunch(SCREEN_CHAR, (CHAR_POTION + i));
            AddBunch(SCREEN_CHAR_GOLDEN, (CHAR_POTION + i));
            AddBunch(CHAR_RIGHTPANE, (CHAR_POTION + i));
            DoubleClickHandler(actor[(CHAR_POTION + i)], PotionSingleClick, PotionDoubleClick);
            i = (i + 1);
        };
        DefineSnd(SND_SHARD, "res/sfx/tower/shard.mp3");
        DefineSnd(SND_MIRROR, "res/sfx/tower/mirror.mp3");
        DefineSnd(SND_HATCH, "res/sfx/tower/hatch.mp3");
        DefineCnt(TOWER_SCROLLAREA, (280 + 500), 100);
        _local2 = actor[TOWER_SCROLLAREA];
        with (_local2) {
            scrollRect = new Rectangle(0, 0, 500, 700);
            mouseChildren = false;
            tabEnabled = false;
            tabChildren = false;
            focuseRect = false;
        };
        DefineBtn(TOWER_TRY, txt[TXT_TOWER_TRY], TowerBtnHandler, btnClassBasic, 940, 700);
        DefineImg(SCR_TOWER_BG, "res/gfx/scr/quest/locations/location_tower.jpg", false, 280, 100);
        DefineBunch(SCREEN_TOWER, SCR_CHAR_BG, TOWER_SCROLLAREA, TOWER_TRY, IF_OVL, IF_EXIT);
        towerLevelLabelTimer = new Timer(25);
        towerLevelLabelTimer.addEventListener(TimerEvent.TIMER, towerLevelLabelMoveFn);
        towerBoostPriceFadeoutTimer = new Timer(250, 1);
        towerBoostPriceFadeoutTimer.addEventListener(TimerEvent.TIMER, towerBoostPriceFadeout);
        i = 0;
        while (i < 3) {
            DefineImg((TOWER_PORTRAIT + i), (("res/gfx/npc/copycat_" + String((i + 1))) + ".jpg"), false, SCR_CHAR_CHARX, (SCR_CHAR_CHARY - 1));
            DefineImg((TOWER_NO_PORTRAIT + i), (("res/gfx/npc/copycat_" + String((i + 1))) + "_empty.jpg"), false, SCR_CHAR_CHARX, (SCR_CHAR_CHARY - 1));
            DefineBtn((TOWER_STEIGERN1 + i), "", BoostCopycat, btnClassPlus, (SCR_CHAR_CHARX + 232), (SCR_CHAR_CHARY + 260));
            actor[(TOWER_STEIGERN1 + i)].scaleX = 0.8;
            actor[(TOWER_STEIGERN1 + i)].scaleY = 0.8;
            actor[(TOWER_STEIGERN1 + i)].addEventListener(MouseEvent.MOUSE_OVER, ShowTowerBoostPrices);
            actor[(TOWER_STEIGERN1 + i)].addEventListener(MouseEvent.MOUSE_OUT, HideTowerBoostPrices);
            EnablePopup((TOWER_STEIGERN1 + i), txt[TXT_BOOST_COPYCAT]);
            DefineLbl((LBL_TOWER_BOOSTPRICELABEL + i), "", 0, (EXPERIENCE_BAR_Y + 2), FontFormat_Default);
            AddFilter((LBL_TOWER_BOOSTPRICELABEL + i), Filter_Shadow);
            actor[(LBL_TOWER_BOOSTPRICELABEL + i)].alpha = 0;
            AddBunch(SCREEN_TOWER, (TOWER_PORTRAIT + i), (TOWER_NO_PORTRAIT + i), (TOWER_STEIGERN1 + i), (LBL_TOWER_BOOSTPRICELABEL + i));
            i = (i + 1);
        };
        i = 0;
        while (i < 15) {
            AddBunch(SCREEN_TOWER, (CHAR_SLOT_1 + i));
            i = (i + 1);
        };
        DefineBtn(PREV_COPYCAT, "", TowerBtnHandler, btnClassArrowLeft, (SCR_CHAR_CHARX + 10), (SCR_CHAR_CHARY + 10));
        DefineBtn(NEXT_COPYCAT, "", TowerBtnHandler, btnClassArrowRight, (SCR_CHAR_CHARX + 215), (SCR_CHAR_CHARY + 10));
        DefineCnt(TOWER_BOOSTCOIN, (SCR_CHAR_CHARX + 205), EXPERIENCE_BAR_Y);
        actor[TOWER_BOOSTCOIN].alpha = 0;
        DefineBunch(TOWER_BOOSTPRICE, LBL_TOWER_BOOSTPRICELABEL, (LBL_TOWER_BOOSTPRICELABEL + 1), (LBL_TOWER_BOOSTPRICELABEL + 2), TOWER_BOOSTCOIN);
        DefineLbl(LBL_TOWER_EXPLABEL, "", (SCR_CHAR_CHARX + 3), (EXPERIENCE_BAR_Y + 2), FontFormat_LifeBar);
        AddFilter(LBL_TOWER_EXPLABEL, Filter_Shadow);
        AddBunch(SCREEN_TOWER, PREV_COPYCAT, NEXT_COPYCAT);
        AddBunch(SCREEN_TOWER, LBL_TOWER_EXPLABEL, TOWER_BOOSTCOIN, SCR_CHAR_NAME);
        i = 0;
        while (i < 5) {
            AddBunch(SCREEN_TOWER, (LBL_SCR_CHAR_STAERKE + i), (LBL_SCR_CHAR_STAERKE_CAPTION + i), (LBL_SCR_CHAR_SCHADEN + i), (LBL_SCR_CHAR_SCHADEN_CAPTION + i));
            i = (i + 1);
        };
        DefineImg(TOWER_BG, "res/gfx/scr/tower/tower_back.jpg", false, 0, 0);
        DefineImg(TOWER_BASE, "res/gfx/scr/tower/tower_base.png", false, 0, 0);
        DefineImg(TOWER_LEVEL, "res/gfx/scr/tower/tower_level.png", false, 0, 0);
        DefineImg((TOWER_LEVEL + 1), "res/gfx/scr/tower/tower_level.png", false, 0, 0);
        DefineImg((TOWER_LEVEL + 2), "res/gfx/scr/tower/tower_level.png", false, 0, 0);
        DefineImg(TOWER_ROOF, "res/gfx/scr/tower/tower_roof.png", false, 0, 0);
        DefineImg(TOWER_WINDOW_OPEN, "res/gfx/scr/tower/tower_window_open.png", false, 0, 0);
        DefineImg(TOWER_WINDOW_CLOSED, "res/gfx/scr/tower/tower_window_closed.png", false, 0, 0);
        DefineImg(TOWER_WINDOW_BURNT, "res/gfx/scr/tower/tower_window_destroyed.png", false, 0, 0);
        DefineCnt(TOWER_WINDOW, 0, 0);
        DefineCnt((TOWER_WINDOW + 1), 0, 0);
        DefineCnt((TOWER_WINDOW + 2), 0, 0);
        i = 0;
        while (i < 3) {
            DefineCnt((TOWER_FACE + i), 175, 0);
            actor[(TOWER_FACE + i)].scaleX = 0.5;
            actor[(TOWER_FACE + i)].scaleY = 0.5;
            i = (i + 1);
        };
        DefineBunch(TOWER_PIECES, TOWER_BG, TOWER_BASE, TOWER_LEVEL, (TOWER_LEVEL + 1), (TOWER_LEVEL + 2), TOWER_ROOF);
        AddBunch(TOWER_PIECES, TOWER_FACE, (TOWER_FACE + 1), (TOWER_FACE + 2), TOWER_WINDOW_OPEN, TOWER_WINDOW_CLOSED, TOWER_WINDOW_BURNT);
        MakePersistent(TOWER_BG, TOWER_BASE, TOWER_LEVEL, (TOWER_LEVEL + 1), (TOWER_LEVEL + 2), TOWER_ROOF);
        MakePersistent(TOWER_WINDOW, (TOWER_WINDOW + 1), (TOWER_WINDOW + 2), TOWER_FACE, (TOWER_FACE + 1), (TOWER_FACE + 2));
        DefineImg(SCR_FIDGET_BG, "res/gfx/scr/shops/fidget.jpg", false, SCR_SHOP_BG_X, 100);
        DefineImg(FIDGET_AFFE1, "res/gfx/scr/shops/fidget_affe1.jpg", false, (SCR_SHOP_BG_X + FIDGET_AFFE_X), (100 + FIDGET_AFFE_Y));
        DefineImg(FIDGET_AFFE2, "res/gfx/scr/shops/fidget_affe2.jpg", false, (SCR_SHOP_BG_X + FIDGET_AFFE_X), (100 + FIDGET_AFFE_Y));
        DefineImg(FIDGET_AFFE3, "res/gfx/scr/shops/fidget_affe3.jpg", false, (SCR_SHOP_BG_X + FIDGET_AFFE_X), (100 + FIDGET_AFFE_Y));
        actor[FIDGET_AFFE1].mouseEnabled = false;
        actor[FIDGET_AFFE2].mouseEnabled = false;
        actor[FIDGET_AFFE3].mouseEnabled = false;
        if (Capabilities.version.substr(0, 3) != "IOS"){
            DefineImg(FIDGET_TAGKERZE, "res/gfx/scr/shops/tagkerze.swf", false, (SCR_SHOP_BG_X + FIDGET_TAGKERZE_X), (100 + FIDGET_TAGKERZE_Y));
            DefineImg(FIDGET_NACHTKERZE, "res/gfx/scr/shops/nachtkerze.swf", false, (SCR_SHOP_BG_X + FIDGET_NACHTKERZE_X), (100 + FIDGET_NACHTKERZE_Y));
            actor[FIDGET_TAGKERZE].mouseEnabled = false;
            actor[FIDGET_NACHTKERZE].mouseEnabled = false;
        };
        DefineImg(FIDGET_DAY, "res/gfx/scr/shops/fidget_normal.jpg", false, (SCR_SHOP_BG_X + FIDGET_X), (100 + FIDGET_Y));
        DefineImg(FIDGET_IDLE, "res/gfx/scr/shops/fidget_langeweile.jpg", false, (SCR_SHOP_BG_X + FIDGET_X), (100 + FIDGET_Y));
        DefineImg(FIDGET_SALE, "res/gfx/scr/shops/fidget_wasverkauft.jpg", false, (SCR_SHOP_BG_X + FIDGET_X), (100 + FIDGET_Y));
        DefineImg(FIDGET_NIGHT, "res/gfx/scr/shops/fidget_nachts.jpg", false, (SCR_SHOP_BG_X + FIDGET_X), (100 + FIDGET_Y));
        actor[FIDGET_DAY].mouseEnabled = false;
        actor[FIDGET_IDLE].mouseEnabled = false;
        actor[FIDGET_SALE].mouseEnabled = false;
        actor[FIDGET_NIGHT].mouseEnabled = false;
        DefineImg(FIDGET_BLINZELN, "res/gfx/scr/shops/fidget_normal_blinzeln.jpg", false, ((SCR_SHOP_BG_X + FIDGET_X) + FIDGET_BLINZELN_X), ((100 + FIDGET_Y) + FIDGET_BLINZELN_Y));
        actor[FIDGET_BLINZELN].mouseEnabled = false;
        DefineImg(SHAKES_DAY, "res/gfx/scr/shops/shakes_normal.jpg", false, (SCR_SHOP_BG_X + SHAKES_X), (100 + SHAKES_Y));
        DefineImg(SHAKES_NIGHT, "res/gfx/scr/shops/shakes_nacht.jpg", false, (SCR_SHOP_BG_X + SHAKES_X), (100 + SHAKES_Y));
        DefineImg(SHAKES_IDLE, "res/gfx/scr/shops/shakes_gelangweilt.jpg", false, (SCR_SHOP_BG_X + SHAKES_IDLE_X), (100 + SHAKES_IDLE_Y));
        DefineImg(SHAKES_IDLE1, "res/gfx/scr/shops/shakes_spielt1.jpg", false, (SCR_SHOP_BG_X + SHAKES_IDLE2_X), (100 + SHAKES_IDLE2_Y));
        DefineImg(SHAKES_IDLE2, "res/gfx/scr/shops/shakes_spielt2.jpg", false, (SCR_SHOP_BG_X + SHAKES_IDLE2_X), (100 + SHAKES_IDLE2_Y));
        DefineImg(SHAKES_IDLE3, "res/gfx/scr/shops/shakes_spielt3.jpg", false, (SCR_SHOP_BG_X + SHAKES_IDLE2_X), (100 + SHAKES_IDLE2_Y));
        DefineImg(SHAKES_BLINZELN1, "res/gfx/scr/shops/shakes_augen1.jpg", false, ((SCR_SHOP_BG_X + SHAKES_X) + SHAKES_BLINZELN_X), ((100 + SHAKES_Y) + SHAKES_BLINZELN_Y));
        DefineImg(SHAKES_BLINZELN2, "res/gfx/scr/shops/shakes_augen2.jpg", false, ((SCR_SHOP_BG_X + SHAKES_X) + SHAKES_BLINZELN_X), ((100 + SHAKES_Y) + SHAKES_BLINZELN_Y));
        if (Capabilities.version.substr(0, 3) == "IOS"){
            DefineBunch(FIDGET_DAY, FIDGET_DAY);
            DefineBunch(FIDGET_NIGHT, FIDGET_NIGHT);
        } else {
            DefineBunch(FIDGET_DAY, FIDGET_DAY, FIDGET_TAGKERZE);
            DefineBunch(FIDGET_NIGHT, FIDGET_NIGHT, FIDGET_NACHTKERZE);
        };
        DefineImg(SCR_SHAKES_BG, "res/gfx/scr/shops/shakes.jpg", false, SCR_SHOP_BG_X, 100);
        DefineBtn(SHOPS_NEWWAREZ, txt[TXT_SHOPS_NEWWAREZ], RequestNewWarez, btnClassBasic, 0, NEW_WAREZ_Y);
        actor[SHOPS_NEWWAREZ].x = (NEW_WAREZ_X - int((actor[SHOPS_NEWWAREZ].width / 2)));
        DefineCnt(CHAR_SLOT_FIDGET_1, SHOP_SLOTS_C1_X, SHOP_SLOTS_R1_Y);
        DefineCnt(CHAR_SLOT_FIDGET_2, SHOP_SLOTS_C2_X, SHOP_SLOTS_R1_Y);
        DefineCnt(CHAR_SLOT_FIDGET_3, SHOP_SLOTS_C3_X, SHOP_SLOTS_R1_Y);
        DefineCnt(CHAR_SLOT_FIDGET_4, SHOP_SLOTS_C1_X, SHOP_SLOTS_R2_Y);
        DefineCnt(CHAR_SLOT_FIDGET_5, SHOP_SLOTS_C2_X, SHOP_SLOTS_R2_Y);
        DefineCnt(CHAR_SLOT_FIDGET_6, SHOP_SLOTS_C3_X, SHOP_SLOTS_R2_Y);
        DefineCnt(CHAR_SLOT_SHAKES_1, SHOP_SLOTS_C1_X, SHOP_SLOTS_R1_Y);
        DefineCnt(CHAR_SLOT_SHAKES_2, SHOP_SLOTS_C2_X, SHOP_SLOTS_R1_Y);
        DefineCnt(CHAR_SLOT_SHAKES_3, SHOP_SLOTS_C3_X, SHOP_SLOTS_R1_Y);
        DefineCnt(CHAR_SLOT_SHAKES_4, SHOP_SLOTS_C1_X, SHOP_SLOTS_R2_Y);
        DefineCnt(CHAR_SLOT_SHAKES_5, SHOP_SLOTS_C2_X, SHOP_SLOTS_R2_Y);
        DefineCnt(CHAR_SLOT_SHAKES_6, SHOP_SLOTS_C3_X, SHOP_SLOTS_R2_Y);
        DefineBunch(SCREEN_FIDGET, SCR_FIDGET_BG, FIDGET_AFFE2, FIDGET_AFFE3, FIDGET_AFFE1, FIDGET_SALE, FIDGET_IDLE, FIDGET_DAY, FIDGET_BLINZELN, FIDGET_NIGHT, IF_OVL, SHOPS_NEWWAREZ, CA_SCR_CHAR_EXPBAR, IF_EXIT);
        DefineBunch(SCREEN_SHAKES, SCR_SHAKES_BG, SHAKES_IDLE, SHAKES_IDLE1, SHAKES_IDLE2, SHAKES_IDLE3, SHAKES_DAY, SHAKES_BLINZELN1, SHAKES_BLINZELN2, SHAKES_NIGHT, IF_OVL, SHOPS_NEWWAREZ, CA_SCR_CHAR_EXPBAR, IF_EXIT);
        DefineImg(FIDGET_EPCIOVL, "res/gfx/scr/shops/epics_overlay_fidget.png", false, (SCR_SHOP_BG_X - 65), (100 + 210));
        DefineImg(SHAKES_EPCIOVL, "res/gfx/scr/shops/epics_overlay_shakes.png", false, (SCR_SHOP_BG_X + 200), (100 + 250));
        AffeBlinzeln = int((Math.random() * 30));
        FidgetBlinzeln = int((Math.random() * 30));
        ShakesBlinzeln = int((Math.random() * 30));
        ShakesIdleStep = 0;
        ShakesIdlePhase = 0;
        WasIdleCount = 0;
        ShopIdle = 0;
        PlayerIdle = false;
        ShopAniTimer = new Timer(100);
        SaleRecoverTime = 0;
        ShopAniTimer.addEventListener(TimerEvent.TIMER, ShopAniFrame);
        if (!lightMode){
            ShopAniTimer.start();
        } else {
            ShopAniTimer.stop();
        };
        i = 0;
        while (i < 5) {
            AddBunch(SCREEN_FIDGET, (LBL_SCR_CHAR_STAERKE + i), (LBL_SCR_CHAR_STAERKE_CAPTION + i), (LBL_SCR_CHAR_SCHADEN + i), (LBL_SCR_CHAR_SCHADEN_CAPTION + i));
            AddBunch(SCREEN_SHAKES, (LBL_SCR_CHAR_STAERKE + i), (LBL_SCR_CHAR_STAERKE_CAPTION + i), (LBL_SCR_CHAR_SCHADEN + i), (LBL_SCR_CHAR_SCHADEN_CAPTION + i));
            i = (i + 1);
        };
        i = 0;
        while (i < 6) {
            SetCnt((CHAR_SLOT_FIDGET_1 + i), ITM_OFFS);
            SetCnt((CHAR_SLOT_SHAKES_1 + i), ITM_OFFS);
            AddBunch(SCREEN_FIDGET, (CHAR_SLOT_FIDGET_1 + i));
            AddBunch(SCREEN_SHAKES, (CHAR_SLOT_SHAKES_1 + i));
            actor[(CHAR_SLOT_FIDGET_1 + i)].addEventListener(MouseEvent.MOUSE_DOWN, ShopMouseDownEvent);
            actor[(CHAR_SLOT_SHAKES_1 + i)].addEventListener(MouseEvent.MOUSE_DOWN, ShopMouseDownEvent);
            EnableDragDrop((CHAR_SLOT_FIDGET_1 + i), DropHandler);
            EnableDragDrop((CHAR_SLOT_SHAKES_1 + i), DropHandler);
            actor[(CHAR_SLOT_FIDGET_1 + i)].addEventListener(MouseEvent.MOUSE_UP, ShopMouseUpEvent);
            actor[(CHAR_SLOT_SHAKES_1 + i)].addEventListener(MouseEvent.MOUSE_UP, ShopMouseUpEvent);
            i = (i + 1);
        };
        i = 0;
        while (i < 15) {
            AddBunch(SCREEN_FIDGET, (CHAR_SLOT_1 + i));
            AddBunch(SCREEN_SHAKES, (CHAR_SLOT_1 + i));
            i = (i + 1);
        };
        RollFrenzy.addEventListener(TimerEvent.TIMER, RequestNewWarez);
        DefineImg(GOTO_WITCH_OVL, "res/gfx/scr/shops/book_down.jpg", false, ((280 + 500) + 360), (100 + 220));
        actor[GOTO_WITCH_OVL].mouseEnabled = false;
        DefineClickArea(CA_GOTO_WITCH, GOTO_WITCH_OVL, RequestWitchScreen, ((280 + 500) + 359), (100 + 215), 45, 65);
        EnablePopup(CA_GOTO_WITCH, txt[TXT_WITCH_BOOK]);
        DefineBunch(SCREEN_WITCH);
        DefineSnd(SND_WITCH_DROP, "res/sfx/toilet/drop.mp3", false);
        AddBunch(SCREEN_WITCH, SND_WITCH_DROP);
        DefineImg(WITCH, "res/gfx/scr/shops/witch.jpg", false, SCR_SHOP_BG_X, 100);
        AddBunch(SCREEN_WITCH, WITCH);
        i = 0;
        while (i < 15) {
            AddBunch(SCREEN_WITCH, (CHAR_SLOT_1 + i));
            i = (i + 1);
        };
        i = 0;
        while (i < 15) {
            DefineImg((WITCH_ANI + i), (("res/gfx/scr/shops/witch_animation/witch" + String(((i * 2) + 1))) + ".jpg"), false, (280 + 500), (100 + 380));
            Hide((WITCH_ANI + i));
            AddBunch(SCREEN_WITCH, (WITCH_ANI + i));
            i = (i + 1);
        };
        spellClicking = false;
        i = 0;
        while (i < 10) {
            DefineCnt((WITCH_SCROLL + i), (((280 + 500) + 37) + ((i % 5) * 83)), ((100 + 11) + (Math.floor((i / 5)) * 95)));
            actor[(WITCH_SCROLL + i)].useHandCursor = true;
            actor[(WITCH_SCROLL + i)].buttonMode = true;
            actor[(WITCH_SCROLL + i)].addEventListener(MouseEvent.CLICK, function (evt:MouseEvent){
                var id:int;
                id = ((GetActorID(evt.target) - WITCH_SCROLL) + 1);
                if (spellClicking){
                    SendAction(ACT_WITCH_ENCHANT, id);
                };
                spellClicking = false;
            });
            actor[(WITCH_SCROLL + i)].addEventListener(MouseEvent.MOUSE_DOWN, function (evt:MouseEvent){
                var actorId:int;
                var i:int;
                actorId = GetActorID(evt.target);
                i = (actorId - WITCH_SCROLL);
                actor[actorId].x = ((((280 + 500) + 37) + ((i % 5) * 83)) + 1);
                actor[actorId].y = (((100 + 11) + (Math.floor((i / 5)) * 95)) + 2);
                spellClicking = true;
            });
            actor[(WITCH_SCROLL + i)].addEventListener(MouseEvent.MOUSE_UP, function (evt:MouseEvent){
                var actorId:int;
                var i:int;
                actorId = GetActorID(evt.target);
                i = (actorId - WITCH_SCROLL);
                actor[actorId].x = (((280 + 500) + 37) + ((i % 5) * 83));
                actor[actorId].y = ((100 + 11) + (Math.floor((i / 5)) * 95));
            });
            actor[(WITCH_SCROLL + i)].addEventListener(MouseEvent.MOUSE_OUT, function (evt:MouseEvent){
                var actorId:int;
                var i:int;
                actorId = GetActorID(evt.target);
                i = (actorId - WITCH_SCROLL);
                actor[actorId].x = (((280 + 500) + 37) + ((i % 5) * 83));
                actor[actorId].y = ((100 + 11) + (Math.floor((i / 5)) * 95));
                spellClicking = false;
            });
            i = (i + 1);
        };
        DefineClickArea(CA_WITCH, C_EMPTY, undefined, (SCR_SHOP_BG_X + 180), 400, 135, 155);
        DefineClickArea(CA_CHALDRON, C_EMPTY, undefined, (SCR_SHOP_BG_X + 120), 585, 260, 160);
        EnablePopup(CA_WITCH, txt[TXT_WITCH_HINT]);
        EnablePopup(CA_CHALDRON, txt[(TXT_WITCH_HINT + 1)]);
        actor[CA_WITCH].useHandCursor = false;
        actor[CA_CHALDRON].useHandCursor = false;
        AddBunch(SCREEN_WITCH, IF_OVL, CA_WITCH, CA_CHALDRON, IF_EXIT);
        DefineImg(SCR_DEALER_BG, "", false, 280, 100);
        DefineBunch(SCREEN_DEALER, SCR_DEALER_BG, IF_OVL, IF_EXIT);
        DefineImg(SCR_WORLDMAP_BG, "res/gfx/scr/map/worldmap.jpg", false, 280, 100);
        DefineBunch(SCREEN_WORLDMAP, SCR_WORLDMAP_BG, IF_OVL, IF_EXIT);
        i = 0;
        while (i < 100) {
            DefineImg((SCR_QUEST_BG_1 + i), (("res/gfx/scr/quest/locations/location" + String((i + 1))) + ".jpg"), false, 280, 100);
            i = (i + 1);
        };
        DefineImg(QUESTBAR_BG, "res/gfx/if/adventurebar.png", false, QUESTBAR_X, QUESTBAR_Y);
        DefineImg(QUESTBAR_FILL, "res/gfx/if/adventurebar_inside.jpg", false, (QUESTBAR_X + 110), (QUESTBAR_Y + 44));
        DefineImg(QUESTBAR_LIGHT, "res/gfx/if/laden_effekt.png", false, ((QUESTBAR_X + 110) - 5), (QUESTBAR_Y + 44));
        DefineLbl(LBL_QUESTBAR_TEXT, "", 0, QUESTBAR_LABEL_Y, FontFormat_QuestBar);
        DefineBtn(QUEST_CANCEL, txt[TXT_QUEST_CANCEL], CancelQuest, btnClassBasic, 0, QUEST_CANCEL_Y);
        DefineBtn(QUEST_SKIP, (txt[TXT_SKIP_FIGHT] + " ~P"), SkipQuest, btnClassBasic, 0, QUEST_CANCEL_Y);
        DefineBunch(SCREEN_QUEST, QUESTBAR_BG, QUESTBAR_FILL, QUESTBAR_LIGHT, LBL_QUESTBAR_TEXT, IF_OVL, LBL_SCREEN_TITLE, QUEST_CANCEL, QUEST_SKIP, IF_EXIT);
        i = 0;
        while (i < 4) {
            AddBunch(SCREEN_QUEST, (TV + i));
            i = (i + 1);
        };
        AddBunch(SCREEN_QUEST, CA_TV);
        actor[QUEST_SKIP].x = int(((QUEST_CANCEL_X - actor[QUEST_SKIP].width) - 5));
        actor[QUESTBAR_FILL].scaleX = 0;
        DefineImg(POST_BG, "res/gfx/scr/post/postamt.jpg", false, 280, 100);
        DefineImg(POST_DAWN1, "res/gfx/scr/post/postamt_abend1.jpg", false, (280 + POST_VOGEL_X), (100 + POST_VOGEL_Y));
        DefineImg(POST_DAWN2, "res/gfx/scr/post/postamt_abend2.jpg", false, (280 + POST_FENSTER_X), (100 + POST_FENSTER_Y));
        DefineImg(POST_NIGHT1, "res/gfx/scr/post/postamt_nacht1.jpg", false, (280 + POST_VOGEL_X), (100 + POST_VOGEL_Y));
        DefineImg(POST_NIGHT2, "res/gfx/scr/post/postamt_nacht2.jpg", false, (280 + POST_FENSTER_X), (100 + POST_FENSTER_Y));
        DefineBunch(POST_DAWN, POST_DAWN1, POST_DAWN2);
        DefineBunch(POST_NIGHT, POST_NIGHT1, POST_NIGHT2);
        DefineFromClass(SHP_POST_BLACK_SQUARE, black_square, POST_SQUARE_X, POST_SQUARE_Y);
        _local2 = actor[SHP_POST_BLACK_SQUARE];
        with (_local2) {
            width = POST_SQUARE_X;
            height = POST_SQUARE_Y;
            alpha = 0.6;
        };
        DefineLbl(LBL_POST_TITLE_INBOX, txt[TXT_POST_TITLE_INBOX], SCREEN_TITLE_X, SCREEN_TITLE_Y, FontFormat_ScreenTitle);
        actor[LBL_POST_TITLE_INBOX].x = (SCREEN_TITLE_X - int((actor[LBL_POST_TITLE_INBOX].textWidth / 2)));
        DefineLbl(LBL_POST_TITLE_READ, txt[TXT_POST_TITLE_READ], SCREEN_TITLE_X, SCREEN_TITLE_Y, FontFormat_ScreenTitle);
        actor[LBL_POST_TITLE_READ].x = (SCREEN_TITLE_X - int((actor[LBL_POST_TITLE_READ].textWidth / 2)));
        DefineLbl(LBL_POST_TITLE_WRITE, txt[TXT_POST_TITLE_WRITE], SCREEN_TITLE_X, SCREEN_TITLE_Y, FontFormat_ScreenTitle);
        actor[LBL_POST_TITLE_WRITE].x = (SCREEN_TITLE_X - int((actor[LBL_POST_TITLE_WRITE].textWidth / 2)));
        AddFilter(LBL_POST_TITLE_INBOX, Filter_Shadow);
        AddFilter(LBL_POST_TITLE_READ, Filter_Shadow);
        AddFilter(LBL_POST_TITLE_WRITE, Filter_Shadow);
        DefineCnt(POST_LIST, POST_LIST_X, POST_LIST_Y);
        DefineBtn(POST_READ, txt[TXT_POST_READ], PostBtnHandler, btnClassBasic, POST_BUTTONS_X, POST_BUTTONS_Y);
        DefineBtn(POST_DELETE, txt[TXT_POST_DELETE], PostBtnHandler, btnClassBasic, (POST_BUTTONS_X + ((actor[POST_READ].width + POST_BUTTONS_X) * 2)), POST_BUTTONS_Y);
        DefineBtn(POST_WRITE, txt[TXT_POST_WRITE], PostBtnHandler, btnClassBasic, (POST_BUTTONS_X + ((actor[POST_READ].width + POST_BUTTONS_X) * 1)), POST_BUTTONS_Y);
        DefineBtn(POST_FLUSH, txt[(TXT_POST_FLUSH_TEXT + 2)], PostBtnHandler, btnClassBasic, (POST_BUTTONS_X + ((actor[POST_READ].width + POST_BUTTONS_X) * 3)), POST_BUTTONS_Y);
        DefineBtn(POST_DELETEREAD, txt[TXT_POST_DELETE], PostBtnHandler, btnClassBasic, (POST_BUTTONS_X + ((actor[POST_READ].width + POST_BUTTONS_X) * 2)), POST_BUTTONS_Y);
        DefineBtn(POST_FORWARD, txt[TXT_POST_FORWARD], PostBtnHandler, btnClassBasic, (POST_BUTTONS_X + ((actor[POST_READ].width + POST_BUTTONS_X) * 3)), POST_BUTTONS_Y);
        DefineBtn(POST_PROFILE, "", PostBtnHandler, btnClassView, POST_PROFILE_X, POST_BUTTONS_Y);
        DefineBtn(POST_UP, "", PostBtnHandler, btnClassArrowUp, POST_SCROLLX, POST_SCROLLUP_Y);
        DefineBtn(POST_DOWN, "", PostBtnHandler, btnClassArrowDown, POST_SCROLLX, POST_SCROLLDOWN_Y);
        DefineBtn(POST_READ_NEXT, "", PostBtnHandler, btnClassArrowRight, ((POST_BUTTONS_X + ((actor[POST_READ].width + POST_BUTTONS_X) * 4)) + 50), (POST_BUTTONS_Y + 3));
        DefineBtn(POST_READ_PREV, "", PostBtnHandler, btnClassArrowLeft, ((POST_BUTTONS_X + ((actor[POST_READ].width + POST_BUTTONS_X) * 4)) + 5), (POST_BUTTONS_Y + 3));
        EnablePopup(POST_PROFILE, txt[TXT_POPUP_PROFILE]);
        DefineLbl(LBL_POST_FLUSH_TEXT, txt[(TXT_POST_FLUSH_TEXT + 1)].split("#").join(String.fromCharCode(13)), ((IF_WIN_X + IF_WIN_WELCOME_X) - (ARENA_TEXT_X / 2)), (IF_WIN_Y + ARENA_TEXT_Y), FontFormat_DefaultLeft);
        AddFilter(LBL_POST_FLUSH_TEXT, Filter_Shadow);
        DefineBtn(POST_FLUSH_CANCEL, txt[TXT_ABBRECHEN], PostBtnHandler, btnClassBasic, 0, (IF_WIN_Y + GILDE_OK_Y));
        DefineBtn(POST_FLUSH_OK, txt[TXT_OK], PostBtnHandler, btnClassBasic, 0, (IF_WIN_Y + GILDE_OK_Y));
        _local2 = actor[POST_FLUSH_CANCEL];
        with (_local2) {
            x = ((IF_WIN_X + IF_WIN_WELCOME_X) + 10);
        };
        _local2 = actor[POST_FLUSH_OK];
        with (_local2) {
            x = (((IF_WIN_X + IF_WIN_WELCOME_X) - int(width)) - 10);
        };
        DefineBunch(POST_FLUSHMSG);
        AddBunch(POST_FLUSHMSG, CA_POST_BLOCK, IF_WINDOW, LBL_WINDOW_TITLE, LBL_POST_FLUSH_TEXT, POST_FLUSH_OK, POST_FLUSH_CANCEL, IF_EXIT);
        DefineClickArea(CA_POST_BLOCK, C_EMPTY, undefined, 280, 100, (RES_X - 280), (RES_Y - 100));
        _local2 = actor[CA_POST_BLOCK];
        with (_local2) {
            useHandCursor = false;
            buttonMode = false;
        };
        DefineFromClass(INP_POST_SUBJECT, SimpleTextField, POST_INP_X, POST_SUBJECT_Y, 2, "text");
        DefineFromClass(INP_POST_ADDRESS, SimpleTextField, POST_INP_X, POST_ADDRESS_Y, 2, "name");
        DefineFromClass(INP_POST_TEXT, SimpleTextArea, POST_INP_X, POST_TEXT_Y, 2, "text");
        CleanupField(INP_POST_SUBJECT);
        CleanupField(INP_POST_ADDRESS);
        CleanupField(INP_POST_TEXT);
        AdvancedPostHandler = function (evt:TextEvent){
            var i:int;
            var textEntered:String;
            if (evt.text.length == 1){
                textEntered = (actor[INP_POST_ADDRESS].getChildAt(1).text.substr(0, actor[INP_POST_ADDRESS].getChildAt(1).selectionBeginIndex) + evt.text);
                i = 0;
                while (i < suggestNames.length) {
                    if ((((textEntered.length > 0)) and ((textEntered.toLowerCase() == suggestNames[i].toLowerCase().substr(0, textEntered.length))))){
                        actor[INP_POST_ADDRESS].getChildAt(1).text = (textEntered + suggestNames[i].substr(textEntered.length));
                        actor[INP_POST_ADDRESS].getChildAt(1).setSelection(textEntered.length, actor[INP_POST_ADDRESS].getChildAt(1).text.length);
                        evt.preventDefault();
                        break;
                    };
                    i++;
                };
            };
        };
        killFieldContent = function (evt:Event){
            var actorID:int;
            actorID = GetActorID(evt.target.parent);
            if (actor[actorID].getChildAt(1).type == TextFieldType.DYNAMIC){
                return;
            };
            switch (actorID){
                case INP_POST_ADDRESS:
                    if (actor[actorID].getChildAt(1).text == txt[TXT_EMPFAENGER]){
                        actor[actorID].getChildAt(1).text = "";
                    };
                    break;
                case INP_POST_SUBJECT:
                    if (actor[actorID].getChildAt(1).text == txt[TXT_BETREFF]){
                        actor[actorID].getChildAt(1).text = "";
                    };
                    break;
                case INP_POST_TEXT:
                    if (actor[actorID].getChildAt(1).text == txt[TXT_NACHRICHT]){
                        actor[actorID].getChildAt(1).text = "";
                    };
                    break;
            };
        };
        fillFieldContent = function (evt:Event){
            var actorID:int;
            actorID = GetActorID(evt.target.parent);
            switch (actorID){
                case INP_POST_ADDRESS:
                    if (actor[actorID].getChildAt(1).text == ""){
                        actor[actorID].getChildAt(1).text = txt[TXT_EMPFAENGER];
                    };
                    break;
                case INP_POST_SUBJECT:
                    if (actor[actorID].getChildAt(1).text == ""){
                        actor[actorID].getChildAt(1).text = txt[TXT_BETREFF];
                    };
                    break;
                case INP_POST_TEXT:
                    if (actor[actorID].getChildAt(1).text == ""){
                        actor[actorID].getChildAt(1).text = txt[TXT_NACHRICHT];
                    };
                    break;
            };
        };
        actor[INP_POST_ADDRESS].getChildAt(1).addEventListener(TextEvent.TEXT_INPUT, AdvancedPostHandler);
        actor[INP_POST_SUBJECT].addEventListener(MouseEvent.MOUSE_DOWN, killFieldContent);
        actor[INP_POST_ADDRESS].addEventListener(MouseEvent.MOUSE_DOWN, killFieldContent);
        actor[INP_POST_TEXT].addEventListener(MouseEvent.MOUSE_DOWN, killFieldContent);
        actor[INP_POST_SUBJECT].addEventListener(FocusEvent.FOCUS_OUT, fillFieldContent);
        actor[INP_POST_ADDRESS].addEventListener(FocusEvent.FOCUS_OUT, fillFieldContent);
        actor[INP_POST_TEXT].addEventListener(FocusEvent.FOCUS_OUT, fillFieldContent);
        DefineBtn(POST_SEND, txt[TXT_POST_SEND], PostBtnHandler, btnClassBasic, POST_BUTTONS_X, POST_SENDBUTTON_Y);
        DefineBtn(POST_CANCEL, txt[TXT_POST_CANCEL], PostBtnHandler, btnClassBasic, ((POST_BUTTONS_X + actor[POST_SEND].width) + POST_BUTTONS_X), POST_SENDBUTTON_Y);
        DefineBtn(POST_RETURN, txt[TXT_POST_RETURN], PostBtnHandler, btnClassBasic, POST_BUTTONS_X, POST_SENDBUTTON_Y);
        DefineBtn(POST_ACCEPT, txt[TXT_POST_ACCEPT], PostBtnHandler, btnClassBasic, ((POST_BUTTONS_X + actor[POST_SEND].width) + POST_BUTTONS_X), POST_SENDBUTTON_Y);
        DefineBtn(POST_REPLY, txt[TXT_POST_REPLY], PostBtnHandler, btnClassBasic, ((POST_BUTTONS_X + actor[POST_SEND].width) + POST_BUTTONS_X), POST_SENDBUTTON_Y);
        DefineBtn(POST_VIEWFIGHT, txt[TXT_POST_VIEWFIGHT], PostBtnHandler, btnClassBasic, ((POST_BUTTONS_X + actor[POST_SEND].width) + POST_BUTTONS_X), POST_SENDBUTTON_Y);
        DefineLbl(LBL_POST_LIMIT, "", POST_SQUARE_X, (POST_SQUARE_Y - POST_LIMIT_Y), FontFormat_Default);
        AddFilter(LBL_POST_LIMIT, Filter_Shadow);
        DefineCnt(POST_GUILD, 0, (POST_ADDRESS_Y + 2));
        DefineLbl(LBL_POST_GUILD, txt[TXT_GILDEN], 0, 0, FontFormat_Default);
        AddFilter(LBL_POST_GUILD, Filter_Shadow);
        MakePersistent(LBL_POST_GUILD);
        _local2 = actor[POST_GUILD];
        with (_local2) {
            addChild(actor[LBL_POST_GUILD]);
            textLinkMakeClickable(getChildAt(0).parent);
            x = (((POST_INP_X + actor[INP_POST_ADDRESS].width) - width) - 5);
            addEventListener(MouseEvent.CLICK, GuildMsgMode);
            mouseChildren = false;
            useHandCursor = true;
            buttonMode = true;
        };
        DefineBunch(POST_LIST, LBL_POST_TITLE_INBOX, POST_LIST, POST_READ, POST_DELETE, POST_FLUSH, POST_WRITE, POST_UP, POST_DOWN, LBL_POST_LIMIT);
        DefineBunch(POST_WRITE, LBL_POST_TITLE_WRITE, INP_POST_SUBJECT, INP_POST_ADDRESS, POST_GUILD, INP_POST_TEXT, POST_SEND, POST_CANCEL);
        DefineBunch(POST_READ, LBL_POST_TITLE_READ, INP_POST_SUBJECT, INP_POST_ADDRESS, INP_POST_TEXT, POST_RETURN, POST_DELETEREAD, POST_READ_NEXT, POST_READ_PREV, POST_PROFILE, POST_FORWARD);
        DefineBunch(SCREEN_POST, POST_BG, IF_OVL, POST_NIGHT, POST_DAWN, SHP_POST_BLACK_SQUARE, POST_LIST, IF_EXIT);
        DefineImg(ARENA_BG_DAY, "res/gfx/scr/arena/arena_tag.jpg", false, 280, 100);
        DefineImg(ARENA_BG_DAWN, "res/gfx/scr/arena/arena_abend.jpg", false, 280, 100);
        DefineImg(ARENA_BG_NIGHT, "res/gfx/scr/arena/arena_nacht.jpg", false, 280, 100);
        if (Capabilities.version.substr(0, 3) != "IOS"){
            DefineImg(ARENA_FEUER, "res/gfx/scr/arena/arenafeuer.swf", false, ARENA_FEUER_X, ARENA_FEUER_Y);
        };
        DefineLbl(LBL_ARENA_TEXT, "", ((IF_WIN_X + IF_WIN_WELCOME_X) - (ARENA_TEXT_X / 2)), ((IF_WIN_Y + ARENA_TEXT_Y) + AIRRelMoveY), FontFormat_Default);
        DefineLbl(LBL_ARENA_DELAY, "", (IF_WIN_X + ARENA_DELAY_X), ((IF_WIN_Y + ARENA_DELAY_Y) + AIRRelMoveY), FontFormat_Default);
        AddFilter(LBL_ARENA_TEXT, Filter_Shadow);
        AddFilter(LBL_ARENA_DELAY, Filter_Shadow);
        _local2 = actor[LBL_ARENA_TEXT];
        with (_local2) {
            wordWrap = true;
            width = ARENA_TEXT_X;
            text = txt[TXT_ARENA_1];
        };
        DefineFromClass(INP_ARENA_ENEMY, text_input1, 0, ((IF_WIN_Y + ARENA_INP_Y) + AIRRelMoveY), 2, "name");
        _local2 = actor[INP_ARENA_ENEMY];
        with (_local2) {
            getChildAt(1).text = "";
            x = ((IF_WIN_X + IF_WIN_WELCOME_X) - int((width / 2)));
            addEventListener(KeyboardEvent.KEY_DOWN, AttackEnemy);
        };
        DefineBtn(ARENA_OK, txt[TXT_OK], AttackEnemy, btnClassBasic, 0, ((IF_WIN_Y + ARENA_OK_Y) + AIRRelMoveY));
        _local2 = actor[ARENA_OK];
        with (_local2) {
            x = ((IF_WIN_X + IF_WIN_WELCOME_X) - int((width / 2)));
        };
        DefineBunch(WINDOW_ARENA, IF_WINDOW, LBL_WINDOW_TITLE, LBL_ARENA_TEXT, INP_ARENA_ENEMY, LBL_ARENA_DELAY, ARENA_OK);
        DefineBunch(SCREEN_ARENA_DAY, ARENA_BG_DAY);
        DefineBunch(SCREEN_ARENA_DAWN, ARENA_BG_DAWN);
        DefineBunch(SCREEN_ARENA_NIGHT, ARENA_BG_NIGHT);
        if (Capabilities.version.substr(0, 3) == "IOS"){
            DefineBunch(SCREEN_ARENA, IF_OVL, WINDOW_ARENA, IF_EXIT);
        } else {
            DefineBunch(SCREEN_ARENA, ARENA_FEUER, IF_OVL, WINDOW_ARENA, IF_EXIT);
        };
        DefineImg(STALL_BG_GUT, "res/gfx/scr/stall/stall_gut.jpg", false, 280, 100);
        DefineImg(STALL_BG_BOESE, "res/gfx/scr/stall/stall_boese.jpg", false, 280, 100);
        DefineImg(STALL_DAWN, "res/gfx/scr/stall/stall_abend.jpg", false, (280 + STALL_TUER_X), (100 + STALL_TUER_Y));
        DefineImg(STALL_NIGHT, "res/gfx/scr/stall/stall_nacht.jpg", false, (280 + STALL_TUER_X), (100 + STALL_TUER_Y));
        DefineImg(STALL_ARME1, "res/gfx/scr/stall/stall_arme1.png", false, (280 + STALL_ARME_X), (100 + STALL_ARME_Y));
        DefineImg(STALL_ARME2, "res/gfx/scr/stall/stall_arme2.png", false, (280 + STALL_ARME_X), (100 + STALL_ARME_Y));
        DefineImg(STALL_ARME3, "res/gfx/scr/stall/stall_arme3.png", false, (280 + STALL_ARME_X), (100 + STALL_ARME_Y));
        DefineImg(STALL_ARME4, "res/gfx/scr/stall/stall_arme4.png", false, (280 + STALL_ARME_X), (100 + STALL_ARME_Y));
        DefineImg(STALL_ARME5, "res/gfx/scr/stall/stall_arme5.png", false, (280 + STALL_ARME_X), (100 + STALL_ARME_Y));
        DefineImg(STALL_OVL_GUT1, "res/gfx/scr/stall/tiger2_mouseover.jpg", false, (280 + STALL_OVL_GUT1_X), (100 + STALL_OVL_GUT1_Y));
        DefineImg(STALL_OVL_GUT2, "res/gfx/scr/stall/kuh_mouseover.jpg", false, (280 + STALL_OVL_GUT2_X), (100 + STALL_OVL_GUT2_Y));
        DefineImg(STALL_OVL_GUT3, "res/gfx/scr/stall/horse_mouseover.jpg", false, (280 + STALL_OVL_GUT3_X), (100 + STALL_OVL_GUT3_Y));
        DefineImg(STALL_OVL_GUT4, "res/gfx/scr/stall/greif_mouseover.jpg", false, (280 + STALL_OVL_GUT4_X), (100 + STALL_OVL_GUT4_Y));
        DefineImg(STALL_OVL_BOESE1, "res/gfx/scr/stall/pig_mouseover.jpg", false, (280 + STALL_OVL_BOESE1_X), (100 + STALL_OVL_BOESE1_Y));
        DefineImg(STALL_OVL_BOESE2, "res/gfx/scr/stall/wolf_mouseover.jpg", false, (280 + STALL_OVL_BOESE2_X), (100 + STALL_OVL_BOESE2_Y));
        DefineImg(STALL_OVL_BOESE3, "res/gfx/scr/stall/raptor_mouseover.jpg", false, (280 + STALL_OVL_BOESE3_X), (100 + STALL_OVL_BOESE3_Y));
        DefineImg(STALL_OVL_BOESE4, "res/gfx/scr/stall/dragon_mouseover.jpg", false, (280 + STALL_OVL_BOESE4_X), (100 + STALL_OVL_BOESE4_Y));
        DefineClickArea(CA_STALL_BOX_GUT1, STALL_OVL_GUT1, ClickMount, (STALL_BOX1_X + 280), (STALL_BOX1_Y + 100), STALL_BOX1_X, STALL_BOX1_Y);
        DefineClickArea(CA_STALL_BOX_GUT2, STALL_OVL_GUT2, ClickMount, (STALL_BOX2_X + 280), (STALL_BOX2_Y + 100), STALL_BOX2_X, STALL_BOX2_Y);
        DefineClickArea(CA_STALL_BOX_GUT3, STALL_OVL_GUT3, ClickMount, (STALL_BOX3_X + 280), (STALL_BOX3_Y + 100), STALL_BOX3_X, STALL_BOX3_Y);
        DefineClickArea(CA_STALL_BOX_GUT4, STALL_OVL_GUT4, ClickMount, (STALL_BOX4_X + 280), (STALL_BOX4_Y + 100), STALL_BOX4_X, STALL_BOX4_Y);
        DefineClickArea(CA_STALL_BOX_BOESE1, STALL_OVL_BOESE1, ClickMount, (STALL_BOX1_X + 280), (STALL_BOX1_Y + 100), STALL_BOX1_X, STALL_BOX1_Y);
        DefineClickArea(CA_STALL_BOX_BOESE2, STALL_OVL_BOESE2, ClickMount, (STALL_BOX2_X + 280), (STALL_BOX2_Y + 100), STALL_BOX2_X, STALL_BOX2_Y);
        DefineClickArea(CA_STALL_BOX_BOESE3, STALL_OVL_BOESE3, ClickMount, (STALL_BOX3_X + 280), (STALL_BOX3_Y + 100), STALL_BOX3_X, STALL_BOX3_Y);
        DefineClickArea(CA_STALL_BOX_BOESE4, STALL_OVL_BOESE4, ClickMount, (STALL_BOX4_X + 280), (STALL_BOX4_Y + 100), STALL_BOX4_X, STALL_BOX4_Y);
        i = 0;
        while (i < 8) {
            DefineSnd((SND_MOUNT_1 + i), (("res/sfx/mounts/mount" + String((i + 1))) + ".mp3"));
            i = (i + 1);
        };
        DefineBunch(STALL_GUT, STALL_BG_GUT, IF_OVL, CA_STALL_BOX_GUT1, CA_STALL_BOX_GUT2, CA_STALL_BOX_GUT3, CA_STALL_BOX_GUT4);
        DefineBunch(STALL_BOESE, STALL_BG_BOESE, IF_OVL, CA_STALL_BOX_BOESE1, CA_STALL_BOX_BOESE2, CA_STALL_BOX_BOESE3, CA_STALL_BOX_BOESE4);
        DefineBunch(SCREEN_STALL, STALL_DAWN, STALL_NIGHT, STALL_ARME1, STALL_ARME2, STALL_ARME3, STALL_ARME4, STALL_ARME5, IF_EXIT);
        DefineFromClass(SHP_STALL_BLACK_SQUARE, black_square_neutral, (SCREEN_TITLE_X - int((STALL_SQUARE_X / 2))), STALL_SQUARE_Y);
        _local2 = actor[SHP_STALL_BLACK_SQUARE];
        with (_local2) {
            width = STALL_SQUARE_X;
            height = STALL_SQUARE_Y;
            alpha = 0.65;
        };
        DefineLbl(LBL_STALL_TITEL, txt[TXT_STALL_TITEL], (actor[SHP_STALL_BLACK_SQUARE].x + STALL_TITEL_X), (actor[SHP_STALL_BLACK_SQUARE].y + STALL_TITEL_Y), FontFormat_Heading);
        DefineLbl(LBL_STALL_TEXT, txt[TXT_STALL_TEXT], (actor[SHP_STALL_BLACK_SQUARE].x + STALL_TITEL_X), ((actor[LBL_STALL_TITEL].y + actor[LBL_STALL_TITEL].textHeight) + STALL_ZEILEN_Y), FontFormat_DefaultLeft);
        _local2 = actor[LBL_STALL_TEXT];
        with (_local2) {
            wordWrap = true;
            width = (STALL_SQUARE_X - (STALL_TITEL_X * 2));
        };
        DefineLbl(LBL_STALL_GAIN, "", (actor[SHP_STALL_BLACK_SQUARE].x + STALL_TITEL_X), (((actor[LBL_STALL_TITEL].y + actor[LBL_STALL_TITEL].textHeight) + STALL_ZEILEN_Y) + STALL_GAIN_Y), FontFormat_DefaultLeft);
        DefineLbl(LBL_STALL_SCHATZ, txt[TXT_STALL_SCHATZ], 0, actor[LBL_STALL_GAIN].y, FontFormat_DefaultLeft);
        DefineLbl(LBL_STALL_SCHATZGOLD, "", 0, actor[LBL_STALL_GAIN].y, FontFormat_DefaultLeft);
        DefineLbl(LBL_STALL_SCHATZSILBER, "", 0, actor[LBL_STALL_GAIN].y, FontFormat_DefaultLeft);
        DefineCnt(STALL_SCHATZGOLD, 0, actor[LBL_STALL_GAIN].y);
        DefineCnt(STALL_SCHATZSILBER, 0, actor[LBL_STALL_GAIN].y);
        DefineLbl(LBL_STALL_GOLD, "0", (actor[SHP_STALL_BLACK_SQUARE].x + STALL_TITEL_X), 0, FontFormat_Default);
        _local2 = actor[LBL_STALL_GOLD];
        with (_local2) {
            y = (((STALL_SQUARE_Y + STALL_SQUARE_Y) - STALL_TITEL_Y) - textHeight);
            DefineCnt(STALL_GOLD, (actor[SHP_STALL_BLACK_SQUARE].x + STALL_TITEL_X), y);
            DefineLbl(LBL_STALL_MUSH, "0", 0, y, FontFormat_Default);
            DefineCnt(STALL_MUSH, 0, y);
            DefineLbl(LBL_STALL_LAUFZEIT, txt[TXT_STALL_LAUFZEIT], (actor[SHP_STALL_BLACK_SQUARE].x + STALL_TITEL_X), ((y - textHeight) - STALL_ZEILEN_Y), FontFormat_Default);
        };
        DefineBtn(STALL_BUY, txt[TXT_STALL_BUY], BuyMount, btnClassBasic, 0, 0);
        _local2 = actor[STALL_BUY];
        with (_local2) {
            x = (((SCREEN_TITLE_X + int((STALL_SQUARE_X / 2))) - width) - STALL_TITEL_X);
            y = (((STALL_SQUARE_Y + STALL_SQUARE_Y) - STALL_TITEL_Y) - height);
        };
        AddBunch(SCREEN_STALL, SHP_STALL_BLACK_SQUARE, LBL_STALL_TITEL, LBL_STALL_TEXT, LBL_STALL_GAIN);
        SelectedMount = 0;
        OldMount = 0;
        DefineImg(GILDEN_BG, "res/gfx/scr/gilde/gilde.jpg", false, 280, 100);
        DefineImg(GILDE_RAHMEN, "res/gfx/scr/gilde/gilde_interface.png", false, 280, 100);
        DefineLbl(LBL_GILDE_GRUENDEN_TEXT, "", ((IF_WIN_X + IF_WIN_WELCOME_X) - (GILDE_GRUENDEN_TEXT_X / 2)), ((IF_WIN_Y + GILDE_GRUENDEN_TEXT_Y) + AIRRelMoveY), FontFormat_Default);
        AddFilter(LBL_GILDE_GRUENDEN_TEXT, Filter_Shadow);
        _local2 = actor[LBL_GILDE_GRUENDEN_TEXT];
        with (_local2) {
            wordWrap = true;
            width = GILDE_GRUENDEN_TEXT_X;
            text = txt[TXT_GILDE_GRUENDEN];
        };
        Arabize(LBL_GILDE_GRUENDEN_TEXT);
        DefineFromClass(INP_GILDE_GRUENDEN, text_input1, 0, ((IF_WIN_Y + GILDE_GRUENDEN_INP_Y) + AIRRelMoveY), 2, "name");
        _local2 = actor[INP_GILDE_GRUENDEN];
        with (_local2) {
            getChildAt(1).text = "";
            x = ((IF_WIN_X + IF_WIN_WELCOME_X) - int((width / 2)));
        };
        DefineBtn(GILDE_GRUENDEN, txt[TXT_GILDE_GRUENDEN_OK], GildeGruenden, btnClassBasic, 0, ((IF_WIN_Y + GILDE_GRUENDEN_OK_Y) + AIRRelMoveY));
        _local2 = actor[GILDE_GRUENDEN];
        with (_local2) {
            x = ((IF_WIN_X + IF_WIN_WELCOME_X) - int((width / 2)));
        };
        DefineBunch(GILDE_GEBAEUDE);
        i = 0;
        while (i < 3) {
            DefineImg((GILDE_GEBAEUDE + i), (("res/gfx/scr/gilde/building" + String((i + 1))) + ".png"), false, GILDE_GEBAEUDE_X, (GILDE_GEBAEUDE_Y + (GILDE_GEBAEUDE_Y * i)));
            DefineLbl((LBL_GILDE_GEBAEUDE_NAME + i), txt[(TXT_GILDE_GEBAEUDE_NAME1 + i)], (GILDE_GEBAEUDE_X + GILDE_TEXT_X), (GILDE_GEBAEUDE_Y + (GILDE_GEBAEUDE_Y * i)), FontFormat_GuildBuilding);
            DefineLbl((LBL_GILDE_GEBAEUDE_WERT_CAPTION + i), txt[(TXT_GILDE_GEBAEUDE_WERT1 + i)], (GILDE_GEBAEUDE_X + GILDE_TEXT_X), ((GILDE_GEBAEUDE_Y + (GILDE_GEBAEUDE_Y * i)) + (GILDE_GEBAEUDE_LINE * 1)), FontFormat_GuildBuilding);
            DefineLbl((LBL_GILDE_GEBAEUDE_WERT + i), "", (GILDE_GEBAEUDE_X + GILDE_TEXT_IMPROVE_X), ((GILDE_GEBAEUDE_Y + (GILDE_GEBAEUDE_Y * i)) + (GILDE_GEBAEUDE_LINE * 2)), FontFormat_GuildBuilding);
            DefineLbl((LBL_GILDE_GEBAEUDE_STUFE_CAPTION + i), txt[TXT_GILDE_GEBAEUDE_STUFE], (GILDE_GEBAEUDE_X + GILDE_TEXT_IMPROVE_X), ((GILDE_GEBAEUDE_Y + (GILDE_GEBAEUDE_Y * i)) + (GILDE_GEBAEUDE_LINE * 3)), FontFormat_GuildBuilding);
            DefineLbl((LBL_GILDE_GEBAEUDE_STUFE + i), "", ((actor[(LBL_GILDE_GEBAEUDE_STUFE_CAPTION + i)].x + actor[(LBL_GILDE_GEBAEUDE_STUFE_CAPTION + i)].textWidth) + 10), actor[(LBL_GILDE_GEBAEUDE_STUFE_CAPTION + i)].y, FontFormat_GuildBuilding);
            DefineLbl((LBL_GILDE_GEBAEUDE_KOSTEN_GOLD + i), "", 0, ((GILDE_GEBAEUDE_Y + (GILDE_GEBAEUDE_Y * i)) + (GILDE_GEBAEUDE_LINE * 4)), FontFormat_GuildBuilding);
            DefineLbl((LBL_GILDE_GEBAEUDE_KOSTEN_MUSH + i), "", 0, ((GILDE_GEBAEUDE_Y + (GILDE_GEBAEUDE_Y * i)) + (GILDE_GEBAEUDE_LINE * 4)), FontFormat_GuildBuilding);
            DefineCnt((GILDE_GEBAEUDE_GOLD + i), 0, ((GILDE_GEBAEUDE_Y + (GILDE_GEBAEUDE_Y * i)) + (GILDE_GEBAEUDE_LINE * 4)));
            DefineCnt((GILDE_GEBAEUDE_MUSH + i), 0, ((GILDE_GEBAEUDE_Y + (GILDE_GEBAEUDE_Y * i)) + (GILDE_GEBAEUDE_LINE * 4)));
            DefineBtn((GILDE_GEBAEUDE_IMPROVE + i), "", GildeBtnHandler, btnClassPlus, (GILDE_GEBAEUDE_X + GILDE_GEBAEUDE_IMPROVE_X), ((GILDE_GEBAEUDE_Y + (GILDE_GEBAEUDE_Y * i)) + GILDE_GEBAEUDE_IMPROVE_Y));
            DefineImg((GILDE_GEBAEUDE_IMPROVE_GRAY + i), "res/gfx/scr/gilde/plus_disabled.png", false, (GILDE_GEBAEUDE_X + GILDE_GEBAEUDE_IMPROVE_X), ((GILDE_GEBAEUDE_Y + (GILDE_GEBAEUDE_Y * i)) + GILDE_GEBAEUDE_IMPROVE_Y));
            AddFilter((LBL_GILDE_GEBAEUDE_NAME + i), Filter_Shadow);
            AddFilter((LBL_GILDE_GEBAEUDE_WERT_CAPTION + i), Filter_Shadow);
            AddFilter((LBL_GILDE_GEBAEUDE_WERT + i), Filter_Shadow);
            AddFilter((LBL_GILDE_GEBAEUDE_STUFE_CAPTION + i), Filter_Shadow);
            AddFilter((LBL_GILDE_GEBAEUDE_STUFE + i), Filter_Shadow);
            AddFilter((LBL_GILDE_GEBAEUDE_KOSTEN_GOLD + i), Filter_Shadow);
            AddFilter((LBL_GILDE_GEBAEUDE_KOSTEN_MUSH + i), Filter_Shadow);
            EnablePopup((GILDE_GEBAEUDE + i), txt[(TXT_GILDE_GEBAEUDE1_POPUP + i)]);
            EnablePopup((LBL_GILDE_GEBAEUDE_NAME + i), txt[(TXT_GILDE_GEBAEUDE1_POPUP + i)]);
            EnablePopup((LBL_GILDE_GEBAEUDE_WERT_CAPTION + i), txt[(TXT_GILDE_GEBAEUDE1_POPUP + i)]);
            EnablePopup((LBL_GILDE_GEBAEUDE_WERT + i), txt[(TXT_GILDE_GEBAEUDE1_POPUP + i)]);
            EnablePopup((LBL_GILDE_GEBAEUDE_STUFE_CAPTION + i), txt[(TXT_GILDE_GEBAEUDE1_POPUP + i)]);
            EnablePopup((LBL_GILDE_GEBAEUDE_STUFE + i), txt[(TXT_GILDE_GEBAEUDE1_POPUP + i)]);
            EnablePopup((GILDE_GEBAEUDE_IMPROVE + i), txt[TXT_GILDE_AUSBAUEN]);
            AddBunch(GILDE_GEBAEUDE, (GILDE_GEBAEUDE + i), (LBL_GILDE_GEBAEUDE_NAME + i), (LBL_GILDE_GEBAEUDE_WERT_CAPTION + i), (LBL_GILDE_GEBAEUDE_WERT + i), (LBL_GILDE_GEBAEUDE_STUFE_CAPTION + i));
            AddBunch(GILDE_GEBAEUDE, (LBL_GILDE_GEBAEUDE_STUFE + i), (LBL_GILDE_GEBAEUDE_KOSTEN_GOLD + i), (LBL_GILDE_GEBAEUDE_KOSTEN_MUSH + i), (GILDE_GEBAEUDE_GOLD + i), (GILDE_GEBAEUDE_MUSH + i), (GILDE_GEBAEUDE_IMPROVE_GRAY + i), (GILDE_GEBAEUDE_IMPROVE + i));
            i = (i + 1);
        };
        DefineBtn(GILDE_GEBAEUDE_GOTO_CREST, " ", GildeBtnHandler, btnClassBack, (GILDE_GEBAEUDE_X + 211), (GILDE_GEBAEUDE_Y - 5));
        _local2 = actor[GILDE_GEBAEUDE_GOTO_CREST];
        with (_local2) {
            scaleX = 0.4;
            scaleY = 0.4;
        };
        EnablePopup(GILDE_GEBAEUDE_GOTO_CREST, txt[TXT_BUILDINGS_GOTO_CREST]);
        AddBunch(GILDE_GEBAEUDE, GILDE_GEBAEUDE_GOTO_CREST);
        DefineBunch(GILDE_CREST);
        DefineCnt(GILDE_CREST, (GILDE_GEBAEUDE_X - 2), (GILDE_GEBAEUDE_Y + 60));
        i = 0;
        while (i < crestElementPos.length) {
            DefineImg((GILDE_CREST + i), "", false, 0, 0);
            actor[(GILDE_CREST + i)].mouseEnabled = false;
            MakePersistent((GILDE_CREST + i));
            crestClaI = i;
            if (crestClaI == 1){
                crestClaI = 0;
            } else {
                if (crestClaI == 0){
                    crestClaI = 1;
                };
            };
            DefineClickArea((CLA_GILDE_CREST + crestClaI), C_EMPTY, GildeBtnHandler, crestElementPos[crestClaI][0], crestElementPos[crestClaI][1], crestElementPos[crestClaI][2], crestElementPos[crestClaI][3], 0, undefined, undefined, true);
            MakePersistent((CLA_GILDE_CREST + crestClaI));
            _local2 = actor[GILDE_CREST];
            with (_local2) {
                addChild(actor[(GILDE_CREST + i)]);
                addChild(actor[(CLA_GILDE_CREST + crestClaI)]);
                if (i == 2){
                    DefineImg(GILDE_CREST_SHIELDCOLOR, "", false, 0, 0);
                    actor[GILDE_CREST_SHIELDCOLOR].mouseEnabled = false;
                    MakePersistent(GILDE_CREST_SHIELDCOLOR);
                    addChild(actor[GILDE_CREST_SHIELDCOLOR]);
                };
                if (i == 3){
                    DefineLbl(LBL_GILDE_CREST_INSCRIPTION, "Gildenname", 15, 210, FontFormat_Book);
                    actor[LBL_GILDE_CREST_INSCRIPTION].mouseEnabled = false;
                    MakePersistent(LBL_GILDE_CREST_INSCRIPTION);
                    addChild(actor[LBL_GILDE_CREST_INSCRIPTION]);
                };
            };
            i = (i + 1);
        };
        DefineBtn(GILDE_CREST_GOTO_GEBAEUDE, " ", GildeBtnHandler, btnClassBack, (GILDE_GEBAEUDE_X + 211), (GILDE_GEBAEUDE_Y - 5));
        _local2 = actor[GILDE_CREST_GOTO_GEBAEUDE];
        with (_local2) {
            scaleX = 0.4;
            scaleY = 0.4;
        };
        EnablePopup(GILDE_CREST_GOTO_GEBAEUDE, txt[TXT_CREST_GOTO_BUILDINGS]);
        DefineBunch(GILDE_CREST_CONTROLS);
        DefineBtn(GILDE_CREST_CHANGE_PREV, "", GildeBtnHandler, btnClassArrowLeft, (GILDE_GEBAEUDE_X + 10), (GILDE_GEBAEUDE_Y + 250));
        DefineBtn(GILDE_CREST_CHANGE_NEXT, "", GildeBtnHandler, btnClassArrowRight, (GILDE_GEBAEUDE_X + 193), (GILDE_GEBAEUDE_Y + 250));
        DefineLbl(LBL_GILDE_CREST_ELEMENT, "Element", (GILDE_GEBAEUDE_X + 120), (GILDE_GEBAEUDE_Y + 0xFF), FontFormat_Default);
        AddFilter(LBL_GILDE_CREST_ELEMENT, Filter_Shadow);
        DefineBtn(GILDE_CREST_COLOR_PREV, "", GildeBtnHandler, btnClassArrowLeft, (GILDE_GEBAEUDE_X + 10), (GILDE_GEBAEUDE_Y + 295));
        DefineBtn(GILDE_CREST_COLOR_NEXT, "", GildeBtnHandler, btnClassArrowRight, (GILDE_GEBAEUDE_X + 193), (GILDE_GEBAEUDE_Y + 295));
        DefineBtn(GILDE_CREST_OK, txt[TXT_CREST_SUGGEST], GildeBtnHandler, btnClassBasic, (GILDE_GEBAEUDE_X + 30), (GILDE_GEBAEUDE_Y + 340));
        EnablePopup(GILDE_CREST_OK, txt[TXT_CREST_INFO].split("#").join(String.fromCharCode(13)));
        i = 1;
        while (i < 4) {
            DefineCnt((GILDE_CREST_COLOR + i), ((GILDE_GEBAEUDE_X + 23) + (i * 40)), (GILDE_GEBAEUDE_Y + 296));
            DefineImg((GILDE_CREST_COLOR_UNSELECTED + i), "res/gfx/scr/gilde/crest/color_idle.jpg", false, 0, 0);
            DefineImg((GILDE_CREST_COLOR_SELECTED + i), "res/gfx/scr/gilde/crest/color_hover.jpg", false, 0, 0);
            DefineImg((GILDE_CREST_COLOR_FILLIN + i), "res/gfx/scr/gilde/crest/color_field.jpg", false, 2, 2);
            MakePersistent((GILDE_CREST_COLOR_UNSELECTED + i));
            MakePersistent((GILDE_CREST_COLOR_SELECTED + i));
            MakePersistent((GILDE_CREST_COLOR_FILLIN + i));
            _local2 = actor[(GILDE_CREST_COLOR + i)];
            with (_local2) {
                addChild(actor[(GILDE_CREST_COLOR_UNSELECTED + i)]);
                addChild(actor[(GILDE_CREST_COLOR_SELECTED + i)]);
                addChild(actor[(GILDE_CREST_COLOR_FILLIN + i)]);
            };
            actor[(GILDE_CREST_COLOR + i)].addEventListener(MouseEvent.CLICK, GildeBtnHandler);
            actor[(GILDE_CREST_COLOR + i)].buttonMode = true;
            actor[(GILDE_CREST_COLOR + i)].useHandCursor = true;
            actor[(GILDE_CREST_COLOR + i)].mouseChildren = false;
            AddBunch(GILDE_CREST_CONTROLS, (GILDE_CREST_COLOR + i));
            i = (i + 1);
        };
        AddBunch(GILDE_CREST_CONTROLS, GILDE_CREST_CHANGE_PREV, GILDE_CREST_CHANGE_NEXT, LBL_GILDE_CREST_ELEMENT, GILDE_CREST_COLOR_PREV, GILDE_CREST_COLOR_NEXT, GILDE_CREST_OK);
        AddBunch(GILDE_CREST, GILDE_CREST, GILDE_CREST_GOTO_GEBAEUDE);
        DefineLbl(LBL_GILDE_GOLD, "", 0, (GILDE_GOLD_Y + ((noMush) ? 15 : 0)), FontFormat_GuildMoney);
        AddFilter(LBL_GILDE_GOLD, Filter_Shadow);
        DefineLbl(LBL_GILDE_MUSH, "", 0, (GILDE_GOLD_Y + GILDE_MUSH_Y), FontFormat_GuildMoney);
        AddFilter(LBL_GILDE_MUSH, Filter_Shadow);
        DefineCnt(GILDE_GOLD, GILDE_GOLDMUSH_X, (GILDE_GOLD_Y + ((noMush) ? 15 : 0)));
        DefineCnt(GILDE_MUSH, GILDE_GOLDMUSH_X, (GILDE_GOLD_Y + GILDE_MUSH_Y));
        DefineBtn(GILDE_GOLD, "", GildeBtnHandler, btnClassPlus, (GILDE_GOLDMUSH_X + GILDE_GOLDMUSH_C2), (GILDE_GOLD_Y + ((noMush) ? 15 : 0)));
        _local2 = actor[GILDE_GOLD];
        with (_local2) {
            scaleX = 0.8;
            scaleY = 0.8;
        };
        EnablePopup(GILDE_GOLD, txt[TXT_GILDE_GOLD]);
        DefineBtn(GILDE_MUSH, "", GildeBtnHandler, btnClassPlus, (GILDE_GOLDMUSH_X + GILDE_GOLDMUSH_C2), (GILDE_GOLD_Y + GILDE_MUSH_Y));
        _local2 = actor[GILDE_MUSH];
        with (_local2) {
            scaleX = 0.8;
            scaleY = 0.8;
        };
        EnablePopup(GILDE_MUSH, txt[TXT_GILDE_MUSH]);
        DefineLbl(LBL_GILDE_GOLD2, "1", (GILDE_GOLDMUSH_X + GILDE_GOLDMUSH_C3), (GILDE_GOLD_Y + ((noMush) ? 15 : 0)), FontFormat_GuildMoney);
        AddFilter(LBL_GILDE_GOLD2, Filter_Shadow);
        EnablePopup(LBL_GILDE_GOLD2, txt[TXT_GILDE_GOLD]);
        DefineLbl(LBL_GILDE_MUSH2, "1", 0, (GILDE_GOLD_Y + GILDE_MUSH_Y), FontFormat_GuildMoney);
        AddFilter(LBL_GILDE_MUSH2, Filter_Shadow);
        EnablePopup(LBL_GILDE_MUSH2, txt[TXT_GILDE_MUSH]);
        actor[LBL_GILDE_MUSH2].x = ((actor[LBL_GILDE_GOLD2].x + actor[LBL_GILDE_GOLD2].textWidth) - actor[LBL_GILDE_MUSH2].textWidth);
        DefineCnt(GILDE_GOLD2, ((actor[LBL_GILDE_GOLD2].x + actor[LBL_GILDE_GOLD2].textWidth) + 15), (GILDE_GOLD_Y + ((noMush) ? 15 : 0)));
        DefineCnt(GILDE_MUSH2, ((actor[LBL_GILDE_GOLD2].x + actor[LBL_GILDE_GOLD2].textWidth) + 15), (GILDE_GOLD_Y + GILDE_MUSH_Y));
        if (noMush){
            DefineBunch(GILDE_SCHATZ, LBL_GILDE_GOLD, GILDE_GOLD, GILDE_GOLD, LBL_GILDE_GOLD2, GILDE_GOLD2);
        } else {
            DefineBunch(GILDE_SCHATZ, LBL_GILDE_GOLD, LBL_GILDE_MUSH, GILDE_GOLD, GILDE_MUSH, GILDE_GOLD, GILDE_MUSH, LBL_GILDE_GOLD2, LBL_GILDE_MUSH2, GILDE_GOLD2, GILDE_MUSH2);
        };
        DefineBunch(SCREEN_GILDE_GRUENDEN, GILDEN_BG, IF_WINDOW, LBL_WINDOW_TITLE, IF_OVL, LBL_GILDE_GRUENDEN_TEXT, INP_GILDE_GRUENDEN, GILDE_GRUENDEN, IF_EXIT);
        DefineBunch(SCREEN_GILDEN, GILDEN_BG, IF_OVL, GILDE_RAHMEN, IF_EXIT, LBL_SCREEN_TITLE, GILDE_GEBAEUDE, GILDE_CREST, GILDE_SCHATZ);
        DefineCnt(GILDE_RANG, GILDE_RANG_X, GILDE_RANG_Y);
        DefineLbl(LBL_GILDE_RANG, "", 0, 0, FontFormat_Default);
        AddFilter(LBL_GILDE_RANG, Filter_Shadow);
        _local2 = actor[GILDE_RANG];
        with (_local2) {
            addChild(actor[LBL_GILDE_RANG]);
            textLinkMakeClickable(getChildAt(0).parent);
            mouseChildren = false;
            mouseEnabled = true;
            buttonMode = true;
            useHandCursor = true;
            addEventListener(MouseEvent.CLICK, JumpToGuildHall);
        };
        MakePersistent(LBL_GILDE_RANG);
        DefineFromClass(INP_GILDE_TEXT, SimpleTextAreaGuild, GILDE_TEXT_X, GILDE_LIST_Y, 1, "text");
        CleanupField(INP_GILDE_TEXT);
        AddFilter(INP_GILDE_TEXT, Filter_Shadow);
        DefineCnt(GILDE_LIST, GILDE_LIST_X, GILDE_LIST_Y);
        DefineImg(GILDE_RANK, "res/gfx/scr/gilde/punkt_krone.png", false, 0, 0);
        DefineImg((GILDE_RANK + 1), "res/gfx/scr/gilde/punkt_orden.png", false, 0, 0);
        DefineImg((GILDE_RANK + 2), "res/gfx/scr/gilde/punkt_normalo.png", false, 0, 0);
        DefineBtn(GILDE_SCROLL_UP, "", GildeBtnHandler, btnClassArrowUp, GILDE_LIST_SCROLLX, GILDE_LIST_Y);
        DefineBtn(GILDE_SCROLL_DOWN, "", GildeBtnHandler, btnClassArrowDown, GILDE_LIST_SCROLLX, GILDE_LIST_SCROLLY);
        i = 0;
        DefineImg(GILDE_INVITE_GRAY, "res/gfx/scr/gilde/button_gilde_einladen_grau.jpg", false, (GILDE_TOOLX + (i * GILDE_TOOLX)), GILDE_TOOLY);
        i = (i + 1);
        DefineBtn(GILDE_INVITE, "", GildeBtnHandler, btnClassInvite, (GILDE_TOOLX + (i * GILDE_TOOLX)), GILDE_TOOLY);
        i = (i + 1);
        DefineBtn(GILDE_PROFILE, "", GildeBtnHandler, btnClassView, (GILDE_TOOLX + (i * GILDE_TOOLX)), GILDE_TOOLY);
        DefineImg(GILDE_KICK_GRAY, "res/gfx/scr/gilde/button_gilde_rauswerfen_grau.jpg", false, (GILDE_TOOLX + (i * GILDE_TOOLX)), GILDE_TOOLY);
        i = (i + 1);
        DefineBtn(GILDE_KICK, "", GildeBtnHandler, btnClassKick, (GILDE_TOOLX + (i * GILDE_TOOLX)), GILDE_TOOLY);
        DefineImg(GILDE_PROMOTE_GRAY, "res/gfx/scr/gilde/button_gilde_orden_grau.jpg", false, (GILDE_TOOLX + (i * GILDE_TOOLX)), GILDE_TOOLY);
        DefineBtn(GILDE_PROMOTE, "", GildeBtnHandler, btnClassPromote, (GILDE_TOOLX + (i * GILDE_TOOLX)), GILDE_TOOLY);
        i = (i + 1);
        DefineBtn(GILDE_DEMOTE, "", GildeBtnHandler, btnClassDemote, (GILDE_TOOLX + (i * GILDE_TOOLX)), GILDE_TOOLY);
        DefineImg(GILDE_MASTER_GRAY, "res/gfx/scr/gilde/button_gilde_gildenleiter_grau.jpg", false, (GILDE_TOOLX + (i * GILDE_TOOLX)), GILDE_TOOLY);
        DefineBtn(GILDE_MASTER, "", GildeBtnHandler, btnClassMaster, (GILDE_TOOLX + (i * GILDE_TOOLX)), GILDE_TOOLY);
        i = (i + 1);
        DefineBtn(GILDE_REVOLT, "", GildeBtnHandler, btnClassRevolt, (GILDE_TOOLX + (i * GILDE_TOOLX)), GILDE_TOOLY);
        DefineBtn(GILDE_RAID, "", GildeBtnHandler, btnClassRaid, (GILDE_ATTACKX - 50), GILDE_TOOLY);
        DefineImg(GILDE_RAID_GRAY, "res/gfx/scr/gilde/button_gilde_raid_grey.jpg", false, (GILDE_ATTACKX - 50), GILDE_TOOLY);
        DefineImg(GILDE_RAID_OK, "res/gfx/scr/gilde/button_gilde_raid_check.jpg", false, (GILDE_ATTACKX - 50), GILDE_TOOLY);
        DefineBtn(GILDE_ATTACK, "", GildeBtnHandler, btnClassAttack, (GILDE_ATTACKX + 5), GILDE_TOOLY);
        DefineBtn(GILDE_DEFEND, "", GildeBtnHandler, btnClassDefend, (GILDE_DEFENDX + 5), GILDE_TOOLY);
        DefineImg(GILDE_ATTACK_GRAY, "res/gfx/scr/gilde/button_gilde_attack_grau.jpg", false, (GILDE_ATTACKX + 5), GILDE_TOOLY);
        DefineImg(GILDE_ATTACK_OK, "res/gfx/scr/gilde/button_gilde_attack_check.jpg", false, (GILDE_ATTACKX + 5), GILDE_TOOLY);
        DefineImg(GILDE_DEFEND_GRAY, "res/gfx/scr/gilde/button_gilde_defend_grau.jpg", false, (GILDE_DEFENDX + 5), GILDE_TOOLY);
        DefineImg(GILDE_DEFEND_OK, "res/gfx/scr/gilde/button_gilde_defend_check.jpg", false, (GILDE_DEFENDX + 5), GILDE_TOOLY);
        DefineBtn(GILDE_KATAPULT, "", GildeBtnHandler, btnClassCatapult0, (GILDE_ATTACKX - 105), GILDE_TOOLY);
        DefineBtn((GILDE_KATAPULT + 1), "", GildeBtnHandler, btnClassCatapult1, actor[GILDE_KATAPULT].x, actor[GILDE_KATAPULT].y);
        DefineBtn((GILDE_KATAPULT + 2), "", GildeBtnHandler, btnClassCatapult2, actor[GILDE_KATAPULT].x, actor[GILDE_KATAPULT].y);
        DefineImg(GILDE_KATAPULT_GRAY, "res/gfx/scr/gilde/button_gilde_catapult0_grau.png", false, actor[GILDE_KATAPULT].x, actor[GILDE_KATAPULT].y);
        DefineImg(GILDE_KATAPULT_OK, "res/gfx/scr/gilde/button_gilde_catapult1_idle.png", false, actor[GILDE_KATAPULT].x, actor[GILDE_KATAPULT].y);
        DefineImg((GILDE_KATAPULT_OK + 1), "res/gfx/scr/gilde/button_gilde_catapult2_idle.png", false, actor[GILDE_KATAPULT].x, actor[GILDE_KATAPULT].y);
        DefineImg((GILDE_KATAPULT_OK + 2), "res/gfx/scr/gilde/button_gilde_catapult3_idle.png", false, actor[GILDE_KATAPULT].x, actor[GILDE_KATAPULT].y);
        DefineBunch(GILDE_KATAPULT, GILDE_KATAPULT, (GILDE_KATAPULT + 1), (GILDE_KATAPULT + 2), GILDE_KATAPULT_GRAY, GILDE_KATAPULT_OK, (GILDE_KATAPULT_OK + 1), (GILDE_KATAPULT_OK + 2));
        DefineCnt(GILDE_ATTACK, GILDE_ATTACKLABEL_X, GILDE_TOOLY);
        DefineCnt(GILDE_DEFENCE, GILDE_ATTACKLABEL_X, (GILDE_TOOLY + GILDE_DEFENSELABEL_Y));
        DefineLbl(LBL_GILDE_ATTACK, "", 0, 0, FontFormat_AttackLabel);
        DefineLbl(LBL_GILDE_DEFENCE, "", 0, 0, FontFormat_AttackLabel);
        AddFilter(LBL_GILDE_ATTACK, Filter_Shadow);
        AddFilter(LBL_GILDE_DEFENCE, Filter_Shadow);
        MakePersistent(LBL_GILDE_ATTACK, LBL_GILDE_DEFENCE);
        _local2 = actor[GILDE_ATTACK];
        with (_local2) {
            addChild(actor[LBL_GILDE_ATTACK]);
            textLinkMakeClickable(getChildAt(0).parent);
            mouseChildren = false;
            useHandCursor = true;
            buttonMode = true;
            addEventListener(MouseEvent.CLICK, AttackLinkClick);
        };
        _local2 = actor[GILDE_DEFENCE];
        with (_local2) {
            addChild(actor[LBL_GILDE_DEFENCE]);
            textLinkMakeClickable(getChildAt(0).parent);
            mouseChildren = false;
            useHandCursor = true;
            buttonMode = true;
            addEventListener(MouseEvent.CLICK, DefenceLinkClick);
        };
        EnablePopup(GILDE_INVITE, txt[TXT_POPUP_INVITE]);
        EnablePopup(GILDE_INVITE_GRAY, txt[TXT_POPUP_INVITE]);
        EnablePopup(GILDE_PROFILE, txt[TXT_POPUP_PROFILE]);
        EnablePopup(GILDE_KICK, txt[TXT_POPUP_KICK]);
        EnablePopup(GILDE_KICK_GRAY, txt[TXT_POPUP_KICK]);
        EnablePopup(GILDE_PROMOTE, txt[TXT_POPUP_OFFIZIER]);
        EnablePopup(GILDE_PROMOTE_GRAY, txt[TXT_POPUP_OFFIZIER]);
        EnablePopup(GILDE_DEMOTE, txt[TXT_POPUP_OFFIZIER]);
        EnablePopup(GILDE_MASTER, txt[TXT_POPUP_LEITER]);
        EnablePopup(GILDE_MASTER_GRAY, txt[TXT_POPUP_LEITER]);
        EnablePopup(GILDE_REVOLT, txt[TXT_POPUP_REVOLT]);
        DefineBunch(GILDE_SET_MEMBER, GILDE_INVITE_GRAY, GILDE_PROFILE, GILDE_KICK_GRAY, GILDE_PROMOTE_GRAY, GILDE_MASTER_GRAY);
        DefineBunch(GILDE_SET_OFFICER, GILDE_INVITE, GILDE_PROFILE, GILDE_KICK, GILDE_PROMOTE_GRAY, GILDE_MASTER_GRAY);
        DefineBunch(GILDE_SET_MASTER, GILDE_INVITE, GILDE_PROFILE, GILDE_KICK, GILDE_PROMOTE, GILDE_MASTER);
        DefineBunch(GILDE_LISTBUTTONS, GILDE_SET_MEMBER, GILDE_SET_OFFICER, GILDE_SET_MASTER);
        AddBunch(SCREEN_GILDEN, INP_GILDE_TEXT, GILDE_LIST, LBL_GILDE_CHAT_CAPTION, GILDE_CHAT_UP, GILDE_CHAT_DOWN);
        AddBunch(SCREEN_GILDEN, INP_GILDE_CHAT, GILDE_SCROLL_UP, GILDE_SCROLL_DOWN, GILDE_RANG, GILDE_ATTACK, GILDE_DEFENCE);
        DefineLbl(LBL_GILDE_CHAT_CAPTION, txt[TXT_CHAT_CAPTION], GILDE_CHAT_X, (GILDE_CHAT_Y - GILDE_CHAT_CAPTION_Y));
        AddFilter(LBL_GILDE_CHAT_CAPTION, Filter_Shadow);
        Hide(LBL_GILDE_CHAT_CAPTION);
        DefineCnt(GILDE_LINK, 0, GILDE_RANG_Y);
        DefineLbl(LBL_GILDE_LINK, txt[TXT_FORUM_LINK], 0, 0);
        AddFilter(LBL_GILDE_LINK, Filter_HeavyShadow);
        MakePersistent(LBL_GILDE_LINK);
        _local2 = actor[GILDE_LINK];
        with (_local2) {
            addChild(actor[LBL_GILDE_LINK]);
            textLinkMakeClickable(getChildAt(0).parent);
            addEventListener(MouseEvent.CLICK, OpenGuildLink);
            x = ((GILDE_LIST_SCROLLX - 30) - actor[LBL_GILDE_LINK].textWidth);
            mouseChildren = false;
            useHandCursor = true;
            buttonMode = true;
        };
        DefineBtn(GILDE_CHAT_UP, "", GildeBtnHandler, btnClassArrowUp, GILDE_LIST_SCROLLX, (GILDE_CHAT_Y + GILDE_CHAT_UP_Y));
        DefineBtn(GILDE_CHAT_DOWN, "", GildeBtnHandler, btnClassArrowDown, GILDE_LIST_SCROLLX, (GILDE_CHAT_Y + GILDE_CHAT_DOWN_Y));
        DefineBunch(GILDE_CHAT, LBL_GILDE_CHAT_CAPTION, GILDE_CHAT_UP, GILDE_CHAT_DOWN, INP_GILDE_CHAT);
        i = 0;
        while (i < 40) {
            DefineLbl((LBL_GILDE_CHAT + i), "", GILDE_CHAT_X, (GILDE_CHAT_Y + ((i - 35) * GILDE_CHAT_Y)));
            actor[(LBL_GILDE_CHAT + i)].visible = (i >= 35);
            actor[(LBL_GILDE_CHAT + i)].addEventListener(MouseEvent.CLICK, clickChatLine);
            AddFilter((LBL_GILDE_CHAT + i), Filter_Shadow);
            AddBunch(SCREEN_GILDEN, (LBL_GILDE_CHAT + i));
            AddBunch(GILDE_CHAT, (LBL_GILDE_CHAT + i));
            i = (i + 1);
        };
        DefineFromClass(INP_GILDE_CHAT, ChatInputField, GILDE_CHAT_X, GILDE_CHAT_FIELD_Y, 1, "chat");
        actor[INP_GILDE_CHAT].getChildAt(0).text = "";
        AddFilter(INP_GILDE_CHAT, Filter_Shadow);
        actor[INP_GILDE_CHAT].addEventListener(KeyboardEvent.KEY_DOWN, SendChatMsg);
        actor[INP_GILDE_CHAT].addEventListener(KeyboardEvent.KEY_UP, AdvancedChatHandler);
        actor[INP_GILDE_CHAT].addEventListener(FocusEvent.FOCUS_IN, ShowExtendedHistory);
        actor[INP_GILDE_CHAT].addEventListener(FocusEvent.FOCUS_OUT, HideExtendedHistory);
        CleanupField(INP_GILDE_CHAT);
        lastChatLine = "";
        nextSuggestionTimer = new Timer((62 * 1000));
        suggestionAllowed = true;
        nextSuggestionTimer.addEventListener(TimerEvent.TIMER, nextSuggestionAllow);
        DefineClickArea(CA_GILDE_DIALOG_BLOCK, C_EMPTY, undefined, 280, 100, (RES_X - 280), (RES_Y - 100));
        _local2 = actor[CA_GILDE_DIALOG_BLOCK];
        with (_local2) {
            useHandCursor = false;
            buttonMode = false;
        };
        DefineLbl(LBL_GILDE_DIALOG_TEXT_KICK, "", ((IF_WIN_X + IF_WIN_WELCOME_X) - (GILDE_TEXT2_X / 2)), (IF_WIN_Y + GILDE_TEXT_Y), FontFormat_Default);
        DefineLbl(LBL_GILDE_DIALOG_TEXT_QUIT, "", ((IF_WIN_X + IF_WIN_WELCOME_X) - (GILDE_TEXT2_X / 2)), (IF_WIN_Y + GILDE_TEXT_Y), FontFormat_Default);
        DefineLbl(LBL_GILDE_DIALOG_TEXT_MASTER, "", ((IF_WIN_X + IF_WIN_WELCOME_X) - (GILDE_TEXT2_X / 2)), (IF_WIN_Y + GILDE_TEXT_Y), FontFormat_Default);
        DefineLbl(LBL_GILDE_DIALOG_TEXT_INVITE, "", ((IF_WIN_X + IF_WIN_WELCOME_X) - (GILDE_TEXT2_X / 2)), (IF_WIN_Y + GILDE_TEXT_Y), FontFormat_Default);
        DefineLbl(LBL_GILDE_DIALOG_TEXT_REVOLT, "", ((IF_WIN_X + IF_WIN_WELCOME_X) - (GILDE_TEXT2_X / 2)), (IF_WIN_Y + GILDE_TEXT_Y), FontFormat_Default);
        DefineLbl(LBL_GILDE_DIALOG_TEXT_RAID, "", ((IF_WIN_X + IF_WIN_WELCOME_X) - (GILDE_TEXT2_X / 2)), (IF_WIN_Y + GILDE_TEXT_Y), FontFormat_Default);
        _local2 = actor[LBL_GILDE_DIALOG_TEXT_KICK];
        with (_local2) {
            wordWrap = true;
            width = GILDE_TEXT2_X;
            text = txt[TXT_GILDE_KICK];
        };
        _local2 = actor[LBL_GILDE_DIALOG_TEXT_QUIT];
        with (_local2) {
            wordWrap = true;
            width = GILDE_TEXT2_X;
            text = txt[TXT_GILDE_QUIT];
        };
        _local2 = actor[LBL_GILDE_DIALOG_TEXT_MASTER];
        with (_local2) {
            wordWrap = true;
            width = GILDE_TEXT2_X;
            text = txt[TXT_GILDE_MASTER];
        };
        _local2 = actor[LBL_GILDE_DIALOG_TEXT_INVITE];
        with (_local2) {
            wordWrap = true;
            width = GILDE_TEXT2_X;
            text = txt[TXT_GILDE_INVITE];
        };
        _local2 = actor[LBL_GILDE_DIALOG_TEXT_REVOLT];
        with (_local2) {
            wordWrap = true;
            width = GILDE_TEXT2_X;
            text = txt[TXT_REVOLT_WARNING];
        };
        DefineFromClass(INP_GILDE_DIALOG_INVITE, text_input1, 0, (IF_WIN_Y + GILDE_INP_Y), 2, "name");
        _local2 = actor[INP_GILDE_DIALOG_INVITE];
        with (_local2) {
            getChildAt(1).text = "";
            x = ((IF_WIN_X + IF_WIN_WELCOME_X) - int((width / 2)));
        };
        DefineBtn(GILDE_DIALOG_CANCEL, txt[TXT_ABBRECHEN], GildeBtnHandler, btnClassBasic, 0, (IF_WIN_Y + GILDE_OK_Y));
        DefineBtn(GILDE_DIALOG_OK_KICK, txt[TXT_OK], GildeBtnHandler, btnClassBasic, 0, (IF_WIN_Y + GILDE_OK_Y));
        DefineBtn(GILDE_DIALOG_OK_MASTER, txt[TXT_OK], GildeBtnHandler, btnClassBasic, 0, (IF_WIN_Y + GILDE_OK_Y));
        DefineBtn(GILDE_DIALOG_OK_INVITE, txt[TXT_OK], GildeBtnHandler, btnClassBasic, 0, (IF_WIN_Y + GILDE_OK_Y));
        DefineBtn(GILDE_DIALOG_OK_REVOLT, txt[TXT_OK], GildeBtnHandler, btnClassBasic, 0, (IF_WIN_Y + GILDE_OK_Y));
        DefineBtn(GILDE_DIALOG_OK_RAID, txt[TXT_OK], GildeBtnHandler, btnClassBasic, 0, (IF_WIN_Y + GILDE_OK_Y));
        _local2 = actor[GILDE_DIALOG_CANCEL];
        with (_local2) {
            x = ((IF_WIN_X + IF_WIN_WELCOME_X) + 10);
        };
        _local2 = actor[GILDE_DIALOG_OK_KICK];
        with (_local2) {
            x = (((IF_WIN_X + IF_WIN_WELCOME_X) - int(width)) - 10);
        };
        _local2 = actor[GILDE_DIALOG_OK_MASTER];
        with (_local2) {
            x = (((IF_WIN_X + IF_WIN_WELCOME_X) - int(width)) - 10);
        };
        _local2 = actor[GILDE_DIALOG_OK_INVITE];
        with (_local2) {
            x = (((IF_WIN_X + IF_WIN_WELCOME_X) - int(width)) - 10);
        };
        _local2 = actor[GILDE_DIALOG_OK_REVOLT];
        with (_local2) {
            x = (((IF_WIN_X + IF_WIN_WELCOME_X) - int(width)) - 10);
        };
        _local2 = actor[GILDE_DIALOG_OK_RAID];
        with (_local2) {
            x = (((IF_WIN_X + IF_WIN_WELCOME_X) - int(width)) - 10);
        };
        DefineBunch(GILDE_DIALOG_KICK, CA_GILDE_DIALOG_BLOCK, IF_WINDOW, LBL_WINDOW_TITLE, LBL_GILDE_DIALOG_TEXT_KICK, GILDE_DIALOG_OK_KICK, GILDE_DIALOG_CANCEL);
        DefineBunch(GILDE_DIALOG_MASTER, CA_GILDE_DIALOG_BLOCK, IF_WINDOW, LBL_WINDOW_TITLE, LBL_GILDE_DIALOG_TEXT_MASTER, GILDE_DIALOG_OK_MASTER, GILDE_DIALOG_CANCEL);
        DefineBunch(GILDE_DIALOG_INVITE, CA_GILDE_DIALOG_BLOCK, IF_WINDOW, LBL_WINDOW_TITLE, LBL_GILDE_DIALOG_TEXT_INVITE, INP_GILDE_DIALOG_INVITE, GILDE_DIALOG_OK_INVITE, GILDE_DIALOG_CANCEL);
        DefineBunch(GILDE_DIALOG_REVOLT, CA_GILDE_DIALOG_BLOCK, IF_WINDOW, LBL_WINDOW_TITLE, LBL_GILDE_DIALOG_TEXT_REVOLT, GILDE_DIALOG_OK_REVOLT, GILDE_DIALOG_CANCEL);
        DefineBunch(GILDE_DIALOG_RAID, CA_GILDE_DIALOG_BLOCK, IF_WINDOW, LBL_WINDOW_TITLE, LBL_GILDE_DIALOG_TEXT_RAID, GILDE_DIALOG_OK_RAID, GILDE_DIALOG_CANCEL);
        actor[GILDE_DIALOG_CANCEL].addEventListener(MouseEvent.CLICK, PlayerGuildInviteCancel);
        actor[GILDE_DIALOG_OK_INVITE].addEventListener(MouseEvent.CLICK, PlayerGuildInviteOK);
        DefineImg(HUTMANN_BG, "res/gfx/scr/taverne/huetchenspieler/huetchenspieler.jpg", false, 280, 100);
        DefineImg(HUTFACE_IDLE, "res/gfx/scr/taverne/huetchenspieler/huetchenspieler_neutral.jpg", false, (280 + HUTMANN_FACE_X), (100 + HUTMANN_FACE_Y));
        DefineImg(HUTFACE_HOVER, "res/gfx/scr/taverne/huetchenspieler/huetchenspieler_keinelust.jpg", false, (280 + HUTMANN_FACE_X), (100 + HUTMANN_FACE_Y));
        DefineImg(HUTFACE_WIN, "res/gfx/scr/taverne/huetchenspieler/huetchenspieler_gewonnen.jpg", false, (280 + HUTMANN_FACE_X), (100 + HUTMANN_FACE_Y));
        DefineImg(HUTFACE_LOSE1, "res/gfx/scr/taverne/huetchenspieler/huetchenspieler_verloren.jpg", false, (280 + HUTMANN_FACE_X), (100 + HUTMANN_FACE_Y));
        DefineImg(HUTFACE_LOSE2, "res/gfx/scr/taverne/huetchenspieler/huetchenspieler_verloren2.jpg", false, (280 + HUTMANN_FACE_X), (100 + HUTMANN_FACE_Y));
        DefineImg(HUTFACE_LOSE3, "res/gfx/scr/taverne/huetchenspieler/huetchenspieler_verloren3.jpg", false, (280 + HUTMANN_FACE_X), (100 + HUTMANN_FACE_Y));
        DefineImg(HUTBECHER_1_IDLE, "res/gfx/scr/taverne/huetchenspieler/huetchenspieler_becher1_1.jpg", false, (280 + HUTMANN_BECHER1_X), (100 + HUTMANN_BECHER1_Y));
        DefineImg(HUTBECHER_1_HOVER, "res/gfx/scr/taverne/huetchenspieler/huetchenspieler_becher1_2.jpg", false, ((280 + HUTMANN_BECHER1_X) + HUTMANN_BECHER1_X2), ((100 + HUTMANN_BECHER1_Y) + HUTMANN_BECHER1_Y2));
        DefineImg(HUTBECHER_1_CLICK, "res/gfx/scr/taverne/huetchenspieler/huetchenspieler_becher1_3.jpg", false, ((280 + HUTMANN_BECHER1_X) + HUTMANN_BECHER1_X3), ((100 + HUTMANN_BECHER1_Y) + HUTMANN_BECHER1_Y3));
        DefineBunch(HUTBECHER_1_HOVER, HUTBECHER_1_HOVER, HUTFACE_HOVER);
        DefineClickArea(CA_HUTBECHER_1, HUTBECHER_1_HOVER, ChooseCup, (280 + HUTMANN_BECHER1_X), (100 + HUTMANN_BECHER1_Y), HUTMANN_BECHER_X, HUTMANN_BECHER_Y);
        DefineImg(HUTBECHER_2_IDLE, "res/gfx/scr/taverne/huetchenspieler/huetchenspieler_becher2_1.jpg", false, (280 + HUTMANN_BECHER2_X), (100 + HUTMANN_BECHER2_Y));
        DefineImg(HUTBECHER_2_HOVER, "res/gfx/scr/taverne/huetchenspieler/huetchenspieler_becher2_2.jpg", false, ((280 + HUTMANN_BECHER2_X) + HUTMANN_BECHER2_X2), ((100 + HUTMANN_BECHER2_Y) + HUTMANN_BECHER2_Y2));
        DefineImg(HUTBECHER_2_CLICK, "res/gfx/scr/taverne/huetchenspieler/huetchenspieler_becher2_3.jpg", false, ((280 + HUTMANN_BECHER2_X) + HUTMANN_BECHER2_X3), ((100 + HUTMANN_BECHER2_Y) + HUTMANN_BECHER2_Y3));
        DefineBunch(HUTBECHER_2_HOVER, HUTBECHER_2_HOVER, HUTFACE_HOVER);
        DefineClickArea(CA_HUTBECHER_2, HUTBECHER_2_HOVER, ChooseCup, (280 + HUTMANN_BECHER2_X), (100 + HUTMANN_BECHER2_Y), HUTMANN_BECHER_X, HUTMANN_BECHER_Y);
        DefineImg(HUTBECHER_3_IDLE, "res/gfx/scr/taverne/huetchenspieler/huetchenspieler_becher3_1.jpg", false, (280 + HUTMANN_BECHER3_X), (100 + HUTMANN_BECHER3_Y));
        DefineImg(HUTBECHER_3_HOVER, "res/gfx/scr/taverne/huetchenspieler/huetchenspieler_becher3_2.jpg", false, ((280 + HUTMANN_BECHER3_X) + HUTMANN_BECHER3_X2), ((100 + HUTMANN_BECHER3_Y) + HUTMANN_BECHER3_Y2));
        DefineImg(HUTBECHER_3_CLICK, "res/gfx/scr/taverne/huetchenspieler/huetchenspieler_becher3_3.jpg", false, ((280 + HUTMANN_BECHER3_X) + HUTMANN_BECHER3_X3), ((100 + HUTMANN_BECHER3_Y) + HUTMANN_BECHER3_Y3));
        DefineBunch(HUTBECHER_3_HOVER, HUTBECHER_3_HOVER, HUTFACE_HOVER);
        DefineClickArea(CA_HUTBECHER_3, HUTBECHER_3_HOVER, ChooseCup, (280 + HUTMANN_BECHER3_X), (100 + HUTMANN_BECHER3_Y), HUTMANN_BECHER_X, HUTMANN_BECHER_Y);
        DefineBunch(HUTMANN_BECHERCHOOSE, CA_HUTBECHER_1, CA_HUTBECHER_2, CA_HUTBECHER_3, HUTFACE_IDLE);
        DefineImg(HUTKUGEL, "res/gfx/scr/taverne/huetchenspieler/huetchenspieler_ball.png", false, 0, (100 + HUTKUGEL_Y));
        DefineLbl(LBL_HUTMANN_TEXT, txt[TXT_HUTMANN_OFFER], 0, (100 + HUTMANN_TEXT_Y), FontFormat_Default);
        actor[LBL_HUTMANN_TEXT].x = (SCREEN_TITLE_X - (actor[LBL_HUTMANN_TEXT].textWidth / 2));
        AddFilter(LBL_HUTMANN_TEXT, Filter_Shadow);
        DefineLbl(LBL_HUTMANN_GOLDBET, "", 0, HUTMANN_GOLD_Y, FontFormat_GuildMoney);
        AddFilter(LBL_HUTMANN_GOLDBET, Filter_Shadow);
        DefineLbl(LBL_HUTMANN_MUSHBET, "", 0, (HUTMANN_GOLD_Y + GILDE_MUSH_Y), FontFormat_GuildMoney);
        AddFilter(LBL_HUTMANN_MUSHBET, Filter_Shadow);
        DefineCnt(HUTMANN_GOLDBET, 0, HUTMANN_GOLD_Y);
        DefineCnt(HUTMANN_MUSHBET, 0, (HUTMANN_GOLD_Y + GILDE_MUSH_Y));
        DefineBtn(HUTMANN_GOLDBET, "", HutBtnHandler, btnClassPlus, 0, HUTMANN_GOLD_Y);
        _local2 = actor[HUTMANN_GOLDBET];
        with (_local2) {
            scaleX = 0.8;
            scaleY = 0.8;
        };
        EnablePopup(HUTMANN_GOLDBET, txt[TXT_HUTMANN_GOLDBET]);
        DefineImg(HUTMANN_MUSHBET_DISABLED, "res/gfx/scr/gilde/plus_disabled.png", false, 0, (HUTMANN_GOLD_Y + GILDE_MUSH_Y));
        EnablePopup(HUTMANN_MUSHBET_DISABLED, txt[TXT_MUSHBET_BOUGHT]);
        DefineBtn(HUTMANN_MUSHBET, "", HutBtnHandler, btnClassPlus, 0, (HUTMANN_GOLD_Y + GILDE_MUSH_Y));
        _local2 = actor[HUTMANN_MUSHBET];
        with (_local2) {
            scaleX = 0.8;
            scaleY = 0.8;
        };
        _local2 = actor[HUTMANN_MUSHBET_DISABLED];
        with (_local2) {
            scaleX = 0.8;
            scaleY = 0.8;
        };
        EnablePopup(HUTMANN_MUSHBET, txt[TXT_HUTMANN_MUSHBET]);
        DefineLbl(LBL_HUTMANN_GOLDBET2, "1", 0, HUTMANN_GOLD_Y, FontFormat_GuildMoney);
        AddFilter(LBL_HUTMANN_GOLDBET2, Filter_Shadow);
        EnablePopup(LBL_HUTMANN_GOLDBET2, txt[TXT_HUTMANN_GOLDBET]);
        DefineLbl(LBL_HUTMANN_MUSHBET2, "1", 0, (HUTMANN_GOLD_Y + GILDE_MUSH_Y), FontFormat_GuildMoney);
        AddFilter(LBL_HUTMANN_MUSHBET2, Filter_Shadow);
        EnablePopup(LBL_HUTMANN_MUSHBET2, txt[TXT_HUTMANN_MUSHBET]);
        DefineCnt(HUTMANN_GOLDBET2, 0, HUTMANN_GOLD_Y);
        DefineCnt(HUTMANN_MUSHBET2, 0, (HUTMANN_GOLD_Y + GILDE_MUSH_Y));
        DefineBunch(HUTMANN_PLACEBET, HUTMANN_MUSHBET_DISABLED, HUTMANN_MUSHBET, LBL_HUTMANN_MUSHBET2, HUTMANN_MUSHBET2, HUTMANN_GOLDBET, LBL_HUTMANN_GOLDBET2, HUTMANN_GOLDBET2, HUTFACE_IDLE);
        DefineLbl(LBL_HUTMANN_INSTR, txt[TXT_HUTMANN_INSTR].split("#").join(((textDir)=="right") ? "" : String.fromCharCode(13)), HUTMANN_INSTR_X, HUTMANN_INSTR_Y, FontFormat_DefaultLeft);
        AddFilter(LBL_HUTMANN_INSTR, Filter_Shadow);
        DefineBunch(SCREEN_HUTMANN, HUTMANN_BG, IF_OVL, IF_EXIT, HUTFACE_HOVER, HUTFACE_WIN, HUTFACE_LOSE1, HUTFACE_LOSE2, HUTFACE_LOSE3, HUTFACE_IDLE);
        DefineBtn(HUTMANN_OK, txt[TXT_HUTMANN_START], HutBtnHandler, btnClassLogin, HUTMANN_OK_X, HUTMANN_OK_Y);
        DefineBtn(HUTMANN_BACK, txt[TXT_HUTMANN_BACK], InterfaceBtnHandler, btnClassBack, HUTMANN_BACK_X, HUTMANN_BACK_Y);
        HutBtnRepeatTimer = new Timer(1000);
        DestroyHutBtnTimer = false;
        _local2 = actor[HUTMANN_GOLDBET];
        with (_local2) {
            addEventListener(MouseEvent.MOUSE_DOWN, HutBtnDownHandler);
            addEventListener(MouseEvent.MOUSE_UP, HutBtnUpHandler);
            addEventListener(MouseEvent.MOUSE_OUT, HutBtnUpHandler);
        };
        _local2 = actor[HUTMANN_MUSHBET];
        with (_local2) {
            addEventListener(MouseEvent.MOUSE_DOWN, HutBtnDownHandler);
            addEventListener(MouseEvent.MOUSE_UP, HutBtnUpHandler);
            addEventListener(MouseEvent.MOUSE_OUT, HutBtnUpHandler);
        };
        DefineBunch(HUTMANN_WON, HUTFACE_WIN);
        DefineBunch(HUTMANN_LOST, HUTFACE_LOSE1);
        AddBunch(SCREEN_HUTMANN, HUTBECHER_1_IDLE);
        AddBunch(SCREEN_HUTMANN, HUTBECHER_2_IDLE);
        AddBunch(SCREEN_HUTMANN, HUTBECHER_3_IDLE);
        AddBunch(SCREEN_HUTMANN, LBL_HUTMANN_TEXT, LBL_HUTMANN_GOLDBET, LBL_HUTMANN_MUSHBET, LBL_HUTMANN_GOLDBET2, LBL_HUTMANN_MUSHBET2, LBL_HUTMANN_INSTR, HUTMANN_BACK);
        AddBunch(SCREEN_HUTMANN, HUTMANN_GOLDBET, HUTMANN_MUSHBET, HUTMANN_GOLDBET2, HUTMANN_MUSHBET2, HUTMANN_GOLDBET, HUTMANN_MUSHBET_DISABLED, HUTMANN_MUSHBET);
        HutFaceResetTimer = new Timer(2000, 1);
        HutFaceResetTimer.addEventListener(TimerEvent.TIMER, HutFaceReset);
        DefineImg(TAVERNE_BG, "res/gfx/scr/taverne/taverne.jpg", false, 280, 100);
        DefineImg(TAVERNE_BARKEEPER1, "res/gfx/scr/taverne/taverne_barkeeper1.jpg", false, (280 + TAVERNE_BARKEEPER_X), (100 + TAVERNE_BARKEEPER_Y));
        DefineImg(TAVERNE_BARKEEPER2, "res/gfx/scr/taverne/taverne_barkeeper2.jpg", false, (280 + TAVERNE_BARKEEPER_X), (100 + TAVERNE_BARKEEPER_Y));
        DefineImg(TAVERNE_BARKEEPER_HINT, "res/gfx/scr/taverne/exclamation.png", false, ((280 + TAVERNE_BARKEEPER_X) + 50), ((100 + TAVERNE_BARKEEPER_Y) - 215));
        DefineImg(TAVERNE_HUTMANN_BLINZELN, "res/gfx/scr/taverne/huetchenspieler_blink.jpg", false, (280 + TAVERNE_HUTAUGEN_X), (100 + TAVERNE_HUTAUGEN_Y));
        DefineImg(TAVERNE_HUTMANN_OVL, "res/gfx/scr/taverne/huetchenspieler_mouseover.jpg", false, (280 + TAVERNE_HUTAUGEN_X), (100 + TAVERNE_HUTAUGEN_Y));
        DefineClickArea(CA_TAVERNE_HUTMANN, TAVERNE_HUTMANN_OVL, ShowHutmann, (TAVERNE_HUT_X + 280), (TAVERNE_HUT_Y + 100), TAVERNE_HUT_X, TAVERNE_HUT_Y);
        DefineClickArea(CA_TAVERNE_QUESTOFFER, TAVERNE_QUESTOVL, ShowQuestOffer, (TAVERNE_QUEST_X + 280), (TAVERNE_QUEST_Y + 100), TAVERNE_QUEST_X, TAVERNE_QUEST_Y);
        DefineClickArea(CA_TAVERNE_TOILETTE, C_EMPTY, RequestToilet, (280 + 470), (100 + 195), 36, 30);
        DefineImg(TAVERNE_KERZEN, "res/gfx/scr/taverne/taverne_kerzen.jpg", false, (280 + TAVERNE_KERZEN_X), (100 + TAVERNE_KERZEN_Y));
        DefineImg(TAVERNE_QUESTOVL1, "res/gfx/scr/taverne/taverne_orc_mouseover.jpg", false, ((TAVERNE_QUEST_X + 280) + TAVERNE_QUESTOVL1_X), ((TAVERNE_QUEST_Y + 100) + TAVERNE_QUESTOVL1_Y));
        DefineImg(TAVERNE_QUESTOVL2, "res/gfx/scr/taverne/taverne_bauer_mouseover.jpg", false, ((TAVERNE_QUEST_X + 280) + TAVERNE_QUESTOVL2_X), ((TAVERNE_QUEST_Y + 100) + TAVERNE_QUESTOVL2_Y));
        DefineImg(TAVERNE_QUESTOVL3, "res/gfx/scr/taverne/taverne_zauberin_mouseover.jpg", false, ((TAVERNE_QUEST_X + 280) + TAVERNE_QUESTOVL3_X), ((TAVERNE_QUEST_Y + 100) + TAVERNE_QUESTOVL3_Y));
        DefineImg(TAVERNE_QUESTOVL4, "res/gfx/scr/taverne/taverne_questgeber_mouseover.jpg", false, ((TAVERNE_QUEST_X + 280) + TAVERNE_QUESTOVL4_X), ((TAVERNE_QUEST_Y + 100) + TAVERNE_QUESTOVL4_Y));
        DefineImg(TAVERNE_QUESTOVL5, "res/gfx/scr/taverne/taverne_tourist_mouseover.jpg", false, ((TAVERNE_QUEST_X + 280) + TAVERNE_QUESTOVL5_X), ((TAVERNE_QUEST_Y + 100) + TAVERNE_QUESTOVL5_Y));
        DefineImg(TAVERNE_BAROVL, "res/gfx/scr/taverne/barkeeper_mouseover.jpg", false, TAVERNE_BAROVL_X, TAVERNE_BAROVL_Y);
        DefineClickArea(CA_TAVERNE_BAR, TAVERNE_BAROVL, ShowBeerOffer, TAVERNE_BAR_X, TAVERNE_BAR_Y, TAVERNE_BAR_X, TAVERNE_BAR_Y);
        DefineImg(TIMEBAR_BG, "res/gfx/if/adventurebar.png", false, TIMEBAR_X, TIMEBAR_Y);
        DefineImg(TIMEBAR_FILL, "res/gfx/scr/taverne/ausdauer.jpg", false, (TIMEBAR_X + 110), (TIMEBAR_Y + 44));
        DefineCnt(TIMEBAR_FILL, 0, (TIMEBAR_Y + 44));
        DefineLbl(LBL_TIMEBAR_TEXT, "", 0, TIMEBAR_LABEL_Y, FontFormat_TimeBar);
        AddFilter(LBL_TIMEBAR_TEXT, Filter_Shadow);
        EnablePopup(TIMEBAR_BG, txt[TXT_TIMEBAR]);
        EnablePopup(TIMEBAR_FILL, txt[TXT_TIMEBAR]);
        EnablePopup(TIMEBAR_FILL, txt[TXT_TIMEBAR]);
        EnablePopup(LBL_TIMEBAR_TEXT, txt[TXT_TIMEBAR]);
        DefineBunch(SCREEN_TAVERNE, TAVERNE_BG, IF_OVL, TAVERNE_BARKEEPER1, TAVERNE_BARKEEPER2, TAVERNE_HUTMANN_BLINZELN, CA_TAVERNE_BAR);
        DefineBunch(TAVERNE_CAS, CA_TAVERNE_QUESTOFFER, CA_TAVERNE_HUTMANN, CA_TAVERNE_TOILETTE, CA_TAVERNE_BAR);
        DefineImg(BEERFEST, "res/gfx/scr/taverne/beerfest.png", false, 280, 100);
        actor[BEERFEST].mouseEnabled = false;
        DefineBunch(BEERFEST, BEERFEST, TIMEBAR_BG, TIMEBAR_FILL, TIMEBAR_FILL, LBL_TIMEBAR_TEXT, IF_OVL, IF_EXIT);
        i = 0;
        while (i < 4) {
            DefineImg((TV + i), (("res/gfx/scr/taverne/tv_animation/tv" + String((i + 1))) + ".png"), false, (280 + 20), (100 + 20));
            Hide((TV + i));
            AddBunch(SCREEN_TAVERNE, (TV + i));
            i = (i + 1);
        };
        DefineClickArea(CA_TV, C_EMPTY, RequestTV, (280 + 20), (100 + 20), 280, 160);
        Hide(CA_TV);
        AddBunch(SCREEN_TAVERNE, CA_TV);
        cursedDescr = "Fliegende";
        if (int((Math.random() * 100)) == 0){
            cursedDescr = "Verfluchte";
        };
        EnablePopup(CA_TV, POPUP_BEGIN_LINE, txt[TXT_TV_HINT].split("|")[0].split("Fliegende").join(cursedDescr), POPUP_END_LINE, POPUP_BEGIN_LINE, FontFormat_EpicItemQuote, txt[TXT_TV_HINT].split("|")[1].split("#").join(String.fromCharCode(13)), POPUP_END_LINE);
        i = 0;
        while (i < 4) {
            DefineImg((TAVERN_ADVENT + i), (("res/gfx/scr/taverne/advent_wreath_" + String((i + 1))) + ".jpg"), false, (280 + 337), 100);
            actor[(TAVERN_ADVENT + i)].mouseEnabled = false;
            i = (i + 1);
        };
        i = 0;
        while (i < 5) {
            DefineImg((SPECIAL_ACTION + i), (("res/gfx/scr/taverne/event_ovl_" + String((i + 1))) + ".png"), false, 280, 100);
            DefineBunch((SPECIAL_ACTION + i), (SPECIAL_ACTION + i), TIMEBAR_BG, TIMEBAR_FILL, TIMEBAR_FILL, LBL_TIMEBAR_TEXT, IF_OVL, IF_EXIT);
            i = (i + 1);
        };
        i = 0;
        while (i < 5) {
            DefineImg((TAVERNE_QUEST1 + i), (("res/gfx/scr/taverne/taverne_quest" + String((i + 1))) + ".jpg"), false, (280 + TAVERNE_QUEST_X), (100 + TAVERNE_QUEST_Y));
            AddBunch(SCREEN_TAVERNE, (TAVERNE_QUEST1 + i));
            i = (i + 1);
        };
        AddBunch(SCREEN_TAVERNE, TAVERNE_KERZEN, IF_EXIT, TIMEBAR_BG, TIMEBAR_FILL, TIMEBAR_FILL, LBL_TIMEBAR_TEXT);
        AddBunch(SCREEN_TAVERNE, CA_TAVERNE_QUESTOFFER, CA_TAVERNE_HUTMANN, CA_TAVERNE_TOILETTE);
        DefineFromClass(SHP_QO_BLACK_SQUARE, black_square_neutral, QO_BLACK_SQUARE_X, QO_BLACK_SQUARE_Y);
        _local2 = actor[SHP_QO_BLACK_SQUARE];
        with (_local2) {
            width = QO_BLACK_SQUARE_X;
            height = QO_BLACK_SQUARE_Y;
            alpha = 0.6;
        };
        DefineLbl(LBL_QO_CHOOSE, txt[TXT_QO_CHOOSE], (QO_BLACK_SQUARE_X + QO_CHOOSE_X), (QO_BLACK_SQUARE_Y + QO_CHOOSE_Y), FontFormat_Default);
        i = 0;
        while (i < 3) {
            DefineLbl((LBL_QO_CHOICE1 + i), "TEST", 0, 0, FontFormat_Default);
            DefineLbl((LBL_QO_CHOICE1_HL + i), "TEST", 0, 0, FontFormat_Highlight);
            MakePersistent((LBL_QO_CHOICE1 + i), (LBL_QO_CHOICE1_HL + i));
            DefineCnt((QO_CHOICE1 + i), (QO_BLACK_SQUARE_X + QO_CHOOSE_X), ((QO_BLACK_SQUARE_Y + QO_CHOOSE_Y) + ((i + 1) * QO_CHOICES_Y)));
            _local2 = actor[(QO_CHOICE1 + i)];
            with (_local2) {
                addChild(actor[(LBL_QO_CHOICE1 + i)]);
                addChild(actor[(LBL_QO_CHOICE1_HL + i)]);
                addEventListener(MouseEvent.CLICK, ChooseQuest);
                mouseChildren = false;
                useHandCursor = true;
                buttonMode = true;
            };
            i = (i + 1);
        };
        DefineBunch(QUESTOFFER);
        DefineLbl(LBL_QO_QUESTNAME, "QuestName", 0, (QO_BLACK_SQUARE_Y + QO_QUESTNAME_Y), FontFormat_Heading);
        DefineLbl(LBL_QO_QUESTTEXT, "QuestText", (QO_BLACK_SQUARE_X + QO_QUESTTEXT_X), (QO_BLACK_SQUARE_Y + QO_QUESTTEXT_Y), FontFormat_DefaultLeft);
        actor[LBL_QO_QUESTTEXT].width = LBL_QO_TEXT_X;
        actor[LBL_QO_QUESTTEXT].wordWrap = true;
        actor[LBL_QO_QUESTTEXT].defaultTextFormat.align = "right";
        DefineLbl(LBL_QO_REWARD, txt[TXT_QO_REWARD], (QO_BLACK_SQUARE_X + QO_QUESTTEXT_X), (QO_BLACK_SQUARE_Y + QO_REWARD_Y), FontFormat_Default);
        DefineCnt(QO_REWARDGOLD, 0, ((QO_BLACK_SQUARE_Y + QO_REWARD_Y) + QO_REWARDS_Y));
        DefineCnt(QO_REWARDSILVER, 0, ((QO_BLACK_SQUARE_Y + QO_REWARD_Y) + QO_REWARDS_Y));
        DefineLbl(LBL_QO_REWARDGOLD, "", 0, ((QO_BLACK_SQUARE_Y + QO_REWARD_Y) + QO_REWARDS_Y), FontFormat_Default);
        DefineLbl(LBL_QO_REWARDSILVER, "", 0, ((QO_BLACK_SQUARE_Y + QO_REWARD_Y) + QO_REWARDS_Y), FontFormat_Default);
        DefineLbl(LBL_QO_REWARDEXP, "", (QO_BLACK_SQUARE_X + QO_QUESTTEXT_X), ((QO_BLACK_SQUARE_Y + QO_REWARD_Y) + (QO_REWARDS_Y * 2)), FontFormat_Default);
        DefineLbl(LBL_QO_TIME, "", (QO_BLACK_SQUARE_X + QO_QUESTTEXT_X), ((QO_BLACK_SQUARE_Y + QO_REWARD_Y) + (QO_REWARDS_Y * 3)), FontFormat_Default);
        DefineBtn(QO_START, txt[TXT_QO_START], RequestQuest, btnClassBasic, (QO_BLACK_SQUARE_X + QO_START_X), (QO_BLACK_SQUARE_Y + QO_RETURN_Y));
        DefineBtn(BO_BUY, txt[TXT_BO_BUY], BuyBeer, btnClassBasic, (QO_BLACK_SQUARE_X + QO_START_X), (QO_BLACK_SQUARE_Y + QO_RETURN_Y));
        DefineBtn(QO_RETURN, txt[TXT_QO_RETURN], ReturnQuest, btnClassBasic, (QO_BLACK_SQUARE_X + QO_START_X), (QO_BLACK_SQUARE_Y + QO_START_Y));
        DefineLbl(LBL_QO_QUESTSTODAY, "", 0, (QO_BLACK_SQUARE_Y + QO_QUESTSTODAY_Y), FontFormat_Default);
        DefineCnt(QUEST_SLOT, ((QO_BLACK_SQUARE_X + QO_SLOT_X) + 20), (QO_BLACK_SQUARE_Y + QO_SLOT_Y));
        AddBunch(QUESTOFFER, SHP_QO_BLACK_SQUARE, LBL_QO_CHOOSE, QO_CHOICE1, QO_CHOICE2, QO_CHOICE3, LBL_QO_QUESTNAME, LBL_QO_QUESTTEXT);
        AddBunch(QUESTOFFER, LBL_QO_REWARD, LBL_QO_REWARDGOLD, LBL_QO_REWARDSILVER, QO_REWARDGOLD, QO_REWARDSILVER, LBL_QO_REWARDEXP, LBL_QO_TIME, QUEST_SLOT, QO_START, QO_RETURN, LBL_QO_QUESTSTODAY);
        i = 0;
        while (i < 5) {
            DefineImg((QO_PORTRAIT1 + i), (("res/gfx/scr/taverne/portrait_questgeber_" + String((i + 1))) + ".png"), false, (QO_BLACK_SQUARE_X + QO_PORTRAIT_X), (QO_BLACK_SQUARE_Y + QO_PORTRAIT_Y));
            AddBunch(QUESTOFFER, (QO_PORTRAIT1 + i));
            i = (i + 1);
        };
        DefineImg(BO_PORTRAIT_OK, "res/gfx/scr/taverne/portrait_barkeeper_2.png", false, (QO_BLACK_SQUARE_X + QO_PORTRAIT_X), (QO_BLACK_SQUARE_Y + QO_PORTRAIT_Y));
        DefineImg(BO_PORTRAIT_NO, "res/gfx/scr/taverne/portrait_barkeeper_3.png", false, (QO_BLACK_SQUARE_X + QO_PORTRAIT_X), (QO_BLACK_SQUARE_Y + QO_PORTRAIT_Y));
        DefineImg(BO_PORTRAIT_TH, "res/gfx/scr/taverne/portrait_barkeeper_1.png", false, (QO_BLACK_SQUARE_X + QO_PORTRAIT_X), (QO_BLACK_SQUARE_Y + QO_PORTRAIT_Y));
        DefineBunch(BEEROFFER, SHP_QO_BLACK_SQUARE, LBL_QO_QUESTNAME, LBL_QO_QUESTTEXT, LBL_QO_TIME, LBL_QO_REWARDEXP, BO_BUY, BO_BUY, QO_RETURN, BO_PORTRAIT_OK, BO_PORTRAIT_NO, BO_PORTRAIT_TH);
        TimeBarAniTimer = new Timer(20);
        TimeBarAniTimer.addEventListener(TimerEvent.TIMER, TimeBarAniEvent);
        TimeBarAniTimer.start();
        timeBarAni = 0;
        DefineBunch(SCREEN_TOILET);
        DefineSnd(SND_TOILET_FLUSHTRY, "res/sfx/toilet/flush_try.mp3", false);
        DefineSnd(SND_TOILET_FLUSH, "res/sfx/toilet/flush.mp3", false);
        DefineSnd(SND_TOILET_DROP, "res/sfx/toilet/drop.mp3", false);
        AddBunch(SCREEN_TOILET, SND_TOILET_FLUSHTRY, SND_TOILET_FLUSH, SND_TOILET_DROP);
        DefineImg(TOILET, "res/gfx/scr/taverne/toilet/toilet_bg.png", false, SCR_SHOP_BG_X, 100);
        DefineImg((TOILET + 1), "res/gfx/scr/taverne/toilet/tank_content.png", false, (SCR_SHOP_BG_X + 170), 190);
        DefineImg((TOILET + 2), "res/gfx/scr/taverne/toilet/toilet_ovl.png", false, SCR_SHOP_BG_X, 100);
        i = 0;
        while (i < 3) {
            AddBunch(SCREEN_TOILET, (TOILET + i));
            i = (i + 1);
        };
        DefineImg(TOILET_IDLE, "res/gfx/scr/taverne/toilet/bowl_idle.png", false, SCR_SHOP_BG_X, 100);
        DefineImg(TOILET_DROP, "res/gfx/scr/taverne/toilet/bowl_dropitem.png", false, SCR_SHOP_BG_X, 100);
        AddBunch(SCREEN_TOILET, TOILET_IDLE, TOILET_DROP);
        DefineBunch(TOILET_OVERLAYS, TOILET_IDLE, TOILET_DROP);
        DefineLbl(LBL_TOILET_AURA, "0", (SCR_SHOP_BG_X + 240), 430, FontFormat_ToiletAura);
        AddBunch(SCREEN_TOILET, LBL_TOILET_AURA);
        i = 0;
        while (i < 7) {
            DefineImg((TOILET_FLUSH + i), (("res/gfx/scr/taverne/toilet/bowl_flush_" + String((i + 1))) + ".png"), false, SCR_SHOP_BG_X, 100);
            Hide((TOILET_FLUSH + i));
            AddBunch(SCREEN_TOILET, (TOILET_FLUSH + i));
            AddBunch(TOILET_OVERLAYS, (TOILET_FLUSH + i));
            i = (i + 1);
        };
        i = 0;
        while (i < 3) {
            DefineImg((TOILET_CHAIN + i), (("res/gfx/scr/taverne/toilet/chain_" + String((i + 1))) + ".png"), false, SCR_SHOP_BG_X, 100);
            Hide((TOILET_CHAIN + i));
            AddBunch(SCREEN_TOILET, (TOILET_CHAIN + i));
            AddBunch(TOILET_OVERLAYS, (TOILET_CHAIN + i));
            i = (i + 1);
        };
        i = 0;
        while (i < 15) {
            AddBunch(SCREEN_TOILET, (CHAR_SLOT_1 + i));
            i = (i + 1);
        };
        DefineClickArea(CA_TOILET_TANK, C_EMPTY, undefined, (SCR_SHOP_BG_X + 170), 190, 156, 120);
        DefineClickArea(CA_TOILET_CHAIN, C_EMPTY, ToiletHandler, (SCR_SHOP_BG_X + 320), 210, 36, 206);
        DefineClickArea(CA_TOILET_BOWL, C_EMPTY, undefined, (SCR_SHOP_BG_X + 120), 540, 260, 120);
        DefineClickArea(CA_TOILET_LID, C_EMPTY, undefined, (SCR_SHOP_BG_X + 180), 380, 135, 155);
        EnablePopup(CA_TOILET_CHAIN, txt[(TXT_TOILET_HINT + 1)]);
        EnablePopup(CA_TOILET_BOWL, txt[(TXT_TOILET_HINT + 2)]);
        EnablePopup(CA_TOILET_LID, txt[(TXT_TOILET_HINT + 3)]);
        actor[CA_TOILET_TANK].useHandCursor = false;
        actor[CA_TOILET_BOWL].useHandCursor = false;
        AddBunch(SCREEN_TOILET, IF_OVL, CA_TOILET_LID, CA_TOILET_TANK, CA_TOILET_CHAIN, CA_TOILET_BOWL, IF_EXIT);
        toiletChainTimer = new Timer(50);
        toiletChainFrame = 0;
        toiletChainTimer.addEventListener(TimerEvent.TIMER, toiletChainAni);
        i = 0;
        while (i < 6) {
            DefineImg((FIGHT_ONO + i), (("res/gfx/scr/fight/smash" + String((i + 1))) + ".png"), false, 0, 0);
            i = (i + 1);
        };
        DefineImg(FIGHT_ARROW_SMASH, "res/gfx/scr/fight/arrowsmash.png", false, 0, 0);
        DefineCnt(FIGHT_ONO, 0, 0);
        DefineLbl(LBL_FIGHT_PLAYERGUILD, "", 0, (OPPY + 5), FontFormat_ScreenTitle);
        DefineLbl(LBL_FIGHT_OPPGUILD, "", 0, (OPPY + 5), FontFormat_ScreenTitle);
        AddFilter(LBL_FIGHT_PLAYERGUILD, Filter_Shadow);
        AddFilter(LBL_FIGHT_OPPGUILD, Filter_Shadow);
        DefineBunch(OPPIMG);
        DefineBunch(OPPIMG2);
        i = 0;
        while (i < 10) {
            DefineImg((OPPBACKGROUND + i), "", false, OPPX, OPPY);
            AddBunch(OPPIMG, (OPPBACKGROUND + i));
            DefineImg((OPPBACKGROUND2 + i), "", false, OPPX, OPPY);
            AddBunch(OPPIMG2, (OPPBACKGROUND2 + i));
            i = (i + 1);
        };
        k = 0;
        k = 0;
        while (k < 500) {
            i = k;
            if (param_censored){
                if ((((i >= 66)) and ((i <= 68)))){
                    i = 69;
                };
                if (i == 73){
                    i = 128;
                };
                if ((((i >= 117)) and ((i <= 118)))){
                    i = 69;
                };
            };
            if (i >= 399){
                monsterChecksum = MD5((String(i) + "ScriptKiddieLovesToPeek"));
                DefineImg((OPPMONSTER + k), (("res/gfx/scr/fight/monster/monster" + monsterChecksum) + ".jpg"), false, OPPX, OPPY);
            } else {
                DefineImg((OPPMONSTER + k), (("res/gfx/scr/fight/monster/monster" + String((i + 1))) + ".jpg"), false, OPPX, OPPY);
            };
            k = (k + 1);
        };
        i = 0;
        while (i < 3) {
            ii = -7;
            while (ii < 100) {
                iii = 0;
                while (iii < 4) {
                    DefineSnd(GetWeaponSound((i + 1), (ii + 1), iii), GetWeaponSoundFile((i + 1), (ii + 1), iii));
                    iii = (iii + 1);
                };
                ii = (ii + 1);
            };
            i = (i + 1);
        };
        DefineLbl(LBL_NAMERANK_CHAR, "", (FIGHT_CHARX + 310), OPPY, FontFormat_Default);
        AddFilter(LBL_NAMERANK_CHAR, Filter_Shadow);
        DefineLbl(LBL_NAMERANK_OPP, "", 0, OPPY, FontFormat_Default);
        AddFilter(LBL_NAMERANK_OPP, Filter_Shadow);
        DefineImg(LIFEBAR_CHAR, "res/gfx/scr/fight/lifebar.png", false, FIGHT_CHARX, ((OPPY + 300) + LIFEBAR_Y));
        DefineImg(LIFEBAR_FILL_CHAR, "res/gfx/scr/fight/lifebar_red.png", false, (FIGHT_CHARX + 10), (((OPPY + 300) + 8) + LIFEBAR_Y));
        DefineCnt(LIFEBAR_OPP, OPPX, ((OPPY + 300) + LIFEBAR_Y));
        DefineCnt(LIFEBAR_FILL_OPP, (OPPX + 10), (((OPPY + 300) + 8) + LIFEBAR_Y));
        DefineLbl(LBL_LIFEBAR_CHAR, "", 0, (((OPPY + 300) + 13) + LIFEBAR_Y), FontFormat_LifeBar);
        DefineLbl(LBL_LIFEBAR_OPP, "", 0, (((OPPY + 300) + 13) + LIFEBAR_Y), FontFormat_LifeBar);
        DefineImg(FIGHT_CHAR_BORDER, "res/gfx/scr/fight/character_border.png", false, (FIGHT_CHARX - 10), (OPPY - 10));
        DefineCnt(FIGHT_OPP_BORDER, (OPPX - 10), (OPPY - 10));
        DefineCnt(BULLET_CHAR, 0, 0);
        SetCnt(BULLET_CHAR, ITM_OFFS);
        DefineCnt(BULLET_OPP, 0, 0);
        SetCnt(BULLET_OPP, ITM_OFFS);
        DefineCnt(WEAPON_CHAR, 0, 0);
        SetCnt(WEAPON_CHAR, ITM_OFFS);
        DefineCnt(SHIELD_CHAR, 0, 0);
        SetCnt(SHIELD_CHAR, ITM_OFFS);
        DefineCnt(WEAPON_OPP, 0, 0);
        SetCnt(WEAPON_OPP, ITM_OFFS);
        DefineCnt(SHIELD_OPP, 0, 0);
        SetCnt(SHIELD_OPP, ITM_OFFS);
        DefineImg(WEAPON_FIST, "res/gfx/itm/kampf_faust.png", false, 0, 0);
        DefineImg(WEAPON_STONEFIST, "res/gfx/itm/kampf_steinfaust.png", false, 0, 0);
        DefineImg(WEAPON_BONE, "res/gfx/itm/kampf_knochen.png", false, 0, 0);
        DefineImg(WEAPON_STICK, "res/gfx/itm/kampf_stock.png", false, 0, 0);
        DefineImg(WEAPON_CLAW, "res/gfx/itm/kampf_kralle1.png", false, 0, 0);
        DefineImg(WEAPON_CLAW2, "res/gfx/itm/kampf_kralle2.png", false, 0, 0);
        DefineImg(WEAPON_CLAW3, "res/gfx/itm/kampf_kralle3.png", false, 0, 0);
        DefineImg(WEAPON_CLAW4, "res/gfx/itm/kampf_kralle4.png", false, 0, 0);
        DefineImg(WEAPON_SWOOSH, "res/gfx/itm/kampf_swoosh1.png", false, 0, 0);
        DefineImg(WEAPON_SWOOSH2, "res/gfx/itm/kampf_swoosh2.png", false, 0, 0);
        DefineImg(WEAPON_SWOOSH3, "res/gfx/itm/kampf_swoosh3.png", false, 0, 0);
        DefineImg(WEAPON_SPLAT, "res/gfx/itm/kampf_splat1.png", false, 0, 0);
        DefineImg(WEAPON_SPLAT2, "res/gfx/itm/kampf_splat2.png", false, 0, 0);
        DefineImg(WEAPON_SPLAT3, "res/gfx/itm/kampf_splat3.png", false, 0, 0);
        DefineImg(WEAPON_FIRE, "res/gfx/itm/kampf_feuer1.png", false, 0, 0);
        DefineImg(WEAPON_FIRE2, "res/gfx/itm/kampf_feuer2.png", false, 0, 0);
        DefineImg(WEAPON_FIRE3, "res/gfx/itm/kampf_feuer3.png", false, 0, 0);
        DefineLbl(LBL_DAMAGE_INDICATOR, "", 0, 0, FontFormat_Damage);
        AddFilter(LBL_DAMAGE_INDICATOR, Filter_Shadow);
        DefineBtn(FIGHT_SKIP, txt[TXT_SKIP_FIGHT], SkipFight, btnClassBasic, 0, 0);
        DefineBtn(FIGHT_OK, txt[TXT_OK], InterfaceBtnHandler, btnClassBasic, 0, 0);
        _local2 = actor[FIGHT_OK];
        with (_local2) {
            y = FIGHT_Y;
            x = (SCREEN_TITLE_X - int((width / 2)));
        };
        _local2 = actor[FIGHT_SKIP];
        with (_local2) {
            y = FIGHT_Y;
            x = (SCREEN_TITLE_X - int((width / 2)));
        };
        DefineBtn(BATTLE_SKIP, txt[TXT_SKIP_FIGHT], SkipFight, btnClassBasic, 0, 0);
        DefineBtn(BATTLE_SKIPONE, txt[TXT_GUILD_BATTLE_SKIP], SkipFight, btnClassBasic, 0, 0);
        _local2 = actor[BATTLE_SKIPONE];
        with (_local2) {
            y = FIGHT_Y;
            x = ((SCREEN_TITLE_X - width) - 5);
        };
        _local2 = actor[BATTLE_SKIP];
        with (_local2) {
            y = FIGHT_Y;
            x = (SCREEN_TITLE_X + 5);
        };
        DefineLbl(LBL_FIGHT_SUMMARY, "", 0, FIGHT_SUMMARY_Y, FontFormat_Default);
        AddFilter(LBL_FIGHT_SUMMARY, Filter_Shadow);
        DefineImg(GUILD_BATTLE_BG, "res/gfx/scr/fight/schlachtfeld.jpg", false, 280, 100);
        DefineImg(GUILD_RAID_BG, "res/gfx/scr/fight/raid.jpg", false, 280, 100);
        DefineBunch(SCREEN_FIGHT, BLACK_SQUARE, LBL_NAMERANK_CHAR, LIFEBAR_CHAR, LIFEBAR_FILL_CHAR, LBL_LIFEBAR_CHAR, LBL_NAMERANK_OPP, IF_EXIT);
        AddBunch(SCREEN_FIGHT, LIFEBAR_OPP, LIFEBAR_FILL_OPP, LBL_LIFEBAR_OPP, IF_OVL, FIGHT_SKIP, FIGHT_CHAR_BORDER, FIGHT_OPP_BORDER);
        DefineImg(FIGHT_BOX1, "res/gfx/scr/fight/box1.png", false, (FIGHT_CHAR_PROP_COLUMN_1_X + FIGHT_BOX1_X), (FIGHT_CHAR_PROP_Y + FIGHT_BOX1_Y));
        DefineImg(FIGHT_BOX2, "res/gfx/scr/fight/box2.png", false, (SCREEN_TITLE_X - 254), (FIGHT_CHAR_PROP_Y + FIGHT_BOX1_Y));
        DefineCnt(FIGHT_BOX3, (FIGHT_CHAR_PROP_COLUMN_3_X + FIGHT_BOX3_X), (FIGHT_CHAR_PROP_Y + FIGHT_BOX1_Y));
        DefineCnt(FIGHT_SLOT, (SCREEN_TITLE_X - 45), FIGHT_SLOT_Y);
        DefineCnt(FIGHT_REWARDGOLD, FIGHT_REWARDGOLD_X, FIGHT_REWARDGOLD_Y);
        DefineCnt(FIGHT_REWARDSILVER, FIGHT_REWARDGOLD_X, FIGHT_REWARDGOLD_Y);
        DefineCnt(FIGHT_REWARDMUSH, FIGHT_REWARDGOLD_X, FIGHT_REWARDMUSH_Y);
        DefineLbl(LBL_FIGHT_REWARDGOLD, "", 0, FIGHT_REWARDGOLD_Y, FontFormat_Default);
        AddFilter(LBL_FIGHT_REWARDGOLD, Filter_Shadow);
        DefineLbl(LBL_FIGHT_REWARDSILVER, "", 0, FIGHT_REWARDGOLD_Y, FontFormat_Default);
        AddFilter(LBL_FIGHT_REWARDSILVER, Filter_Shadow);
        DefineLbl(LBL_FIGHT_REWARDMUSH, "", 0, FIGHT_REWARDMUSH_Y, FontFormat_Default);
        AddFilter(LBL_FIGHT_REWARDMUSH, Filter_Shadow);
        DefineLbl(LBL_FIGHT_REWARDEXP, "", FIGHT_REWARDEXP_X, FIGHT_REWARDGOLD_Y, FontFormat_Default);
        AddFilter(LBL_FIGHT_REWARDEXP, Filter_Shadow);
        AddBunch(SCREEN_FIGHT, FIGHT_BOX1, FIGHT_BOX2, FIGHT_BOX3);
        DefineBunch(FIGHT_REWARDS, FIGHT_SLOT, FIGHT_REWARDGOLD, LBL_FIGHT_REWARDGOLD, FIGHT_REWARDSILVER, LBL_FIGHT_REWARDSILVER, FIGHT_REWARDMUSH, LBL_FIGHT_REWARDMUSH, LBL_FIGHT_REWARDEXP);
        DefineLbl(LBL_HERO_OF_THE_DAY_TITLE, ((txt[TXT_HERO_OF_THE_DAY_TITLE]) ? txt[TXT_HERO_OF_THE_DAY_TITLE] : ""), 0, 120, FontFormat_Heading);
        actor[LBL_HERO_OF_THE_DAY_TITLE].x = (SCREEN_TITLE_X - (actor[LBL_HERO_OF_THE_DAY_TITLE].width / 2));
        DefineLbl(LBL_HERO_OF_THE_DAY, "", 0, 160, FontFormat_Default);
        actor[LBL_HERO_OF_THE_DAY].defaultTextFormat.align = "center";
        AddFilter(LBL_HERO_OF_THE_DAY_TITLE, Filter_Shadow);
        AddFilter(LBL_HERO_OF_THE_DAY, Filter_Shadow);
        DefineBunch(HERO_OF_THE_DAY, LBL_HERO_OF_THE_DAY_TITLE, LBL_HERO_OF_THE_DAY);
        i = 0;
        while (i < 5) {
            DefineLbl((LBL_FIGHT_CHAR_STAERKE_CAPTION + i), txt[(TXT_CHAR_STAERKE + i)], FIGHT_CHAR_PROP_COLUMN_1_X, (FIGHT_CHAR_PROP_Y + (i * FIGHT_CHAR_PROP_Y)), FontFormat_Default);
            DefineLbl((LBL_FIGHT_CHAR_STAERKE + i), "", FIGHT_CHAR_PROP_COLUMN_2_X, (FIGHT_CHAR_PROP_Y + (i * FIGHT_CHAR_PROP_Y)), FontFormat_Attrib);
            DefineLbl((LBL_FIGHT_OPP_STAERKE_CAPTION + i), txt[(TXT_CHAR_STAERKE + i)], FIGHT_CHAR_PROP_COLUMN_3_X, (FIGHT_CHAR_PROP_Y + (i * FIGHT_CHAR_PROP_Y)), FontFormat_Default);
            DefineLbl((LBL_FIGHT_OPP_STAERKE + i), "", FIGHT_CHAR_PROP_COLUMN_4_X, (FIGHT_CHAR_PROP_Y + (i * FIGHT_CHAR_PROP_Y)), FontFormat_Attrib);
            AddFilter((LBL_FIGHT_CHAR_STAERKE_CAPTION + i), Filter_Shadow);
            AddFilter((LBL_FIGHT_CHAR_STAERKE + i), Filter_Shadow);
            AddFilter((LBL_FIGHT_OPP_STAERKE_CAPTION + i), Filter_Shadow);
            AddFilter((LBL_FIGHT_OPP_STAERKE + i), Filter_Shadow);
            AddBunch(SCREEN_FIGHT, (LBL_FIGHT_CHAR_STAERKE + i), (LBL_FIGHT_CHAR_STAERKE_CAPTION + i), (LBL_FIGHT_OPP_STAERKE + i), (LBL_FIGHT_OPP_STAERKE_CAPTION + i));
            i = (i + 1);
        };
        DefineImg(FIGHT_MUSH, "res/gfx/scr/fight/bigmush.png", false, 0, 0);
        DefineSnd(SND_CATAPULT_LAUNCH, "res/sfx/catapult_launch.mp3");
        DefineSnd(SND_CATAPULT_HIT, "res/sfx/catapult_hit.mp3");
        i = 0;
        while (i < 3) {
            DefineImg((FIGHT_COPYCAT + i), (("res/gfx/npc/copycat_" + String((i + 1))) + ".jpg"), false, FIGHT_CHARX, OPPY);
            i = (i + 1);
        };
        DefineImg(BG_DEMO, "res/gfx/scr/demo/demo.png", false, 0, DEMO_Y);
        DefineBtn(DEMO_LOGOFF, txt[TXT_OK], RequestLogout, btnClassBasic, DEMO_X, DEMO_Y);
        DefineBunch(SCREEN_DEMO, BG_DEMO, IF_OVL, DEMO_LOGOFF, BLACK_SQUARE);
        DefineFromClass(SHP_OPTION_BLACK, black_square_neutral, OPTION_X, OPTION_Y);
        _local2 = actor[SHP_OPTION_BLACK];
        with (_local2) {
            width = OPTION_X;
            height = OPTION_Y;
            alpha = 0.65;
        };
        DefineLbl(LBL_OPTION_TITLE, txt[TXT_OPTION_TITLE], 0, (OPTION_Y + OPTION_Y0), FontFormat_ScreenTitle);
        AddFilter(LBL_OPTION_TITLE, Filter_Shadow);
        DefineLbl(LBL_OPTION_IMAGE, txt[TXT_CHARIMG], (OPTION_X + OPTION_IMAGE_X), (OPTION_Y + OPTION_Y1), FontFormat_Heading);
        AddFilter(LBL_OPTION_IMAGE, Filter_Shadow);
        DefineImg(OPTION_IMAGEBORDER, "res/gfx/scr/option/character_border_small.png", false, (OPTION_X + OPTION_IMAGE_X), (OPTION_Y + OPTION_Y2));
        DefineBtn(OPTION_CHANGEIMG, txt[TXT_CHANGEIMG], OptionBtnHandler, btnClassBasic, (OPTION_X + OPTION_IMAGE_X), ((OPTION_Y + OPTION_Y5) - 2));
        DefineLbl(LBL_OPTION_CHANGE, txt[TXT_CHANGE], (OPTION_X + OPTION_CHANGE_X), (OPTION_Y + OPTION_Y1), FontFormat_Heading);
        AddFilter(LBL_OPTION_CHANGE, Filter_Shadow);
        DefineBtn(OPTION_CHANGE_NAME, txt[TXT_CHANGE_NAME], OptionBtnHandler, btnClassBasic, (OPTION_X + OPTION_CHANGE_X), (OPTION_Y + OPTION_Y2));
        DefineBtn(OPTION_RESEND, txt[TXT_RESEND_BTN1], OptionBtnHandler, btnClassBasic, (OPTION_X + OPTION_CHANGE_X), (OPTION_Y + OPTION_Y4));
        DefineBtn(OPTION_CHANGE_EMAIL, txt[TXT_CHANGE_EMAIL], OptionBtnHandler, btnClassBasic, (OPTION_X + OPTION_CHANGE_X), (OPTION_Y + OPTION_Y2));
        DefineBtn(OPTION_CHANGE_PASSWORD, txt[TXT_CHANGE_PASSWORD], OptionBtnHandler, btnClassBasic, (OPTION_X + OPTION_CHANGE_X), (OPTION_Y + OPTION_Y3));
        DefineBtn(OPTION_DELETE, txt[TXT_DELETE_ACCOUNT], OptionBtnHandler, btnClassBasic, (OPTION_X + OPTION_CHANGE_X), (OPTION_Y + OPTION_Y5));
        DefineBtn(OPTION_LUXURY, txt[TXT_LUXURY_BUTTON], OptionBtnHandler, btnClassBasic, (OPTION_X + OPTION_CHANGE_X), ((OPTION_Y + OPTION_Y5) - 2));
        DefineImg(LUXURY_SELLER, "res/gfx/scr/option/seller.jpg", false, 1100, 190);
        DefineFromClass(CB_LM_UNCHECKED, cb_unchecked, LM_X, LM_Y);
        actor[CB_LM_UNCHECKED].addEventListener(MouseEvent.CLICK, CheckLM);
        DefineFromClass(CB_LM_CHECKED, cb_checked, LM_X, LM_Y);
        actor[CB_LM_CHECKED].addEventListener(MouseEvent.CLICK, UncheckLM);
        DefineLbl(LBL_LM, txt[TXT_LM], (LM_X + LM_X), (LM_Y + LM_Y), FontFormat_Default);
        AddFilter(LBL_LM, Filter_Shadow);
        DefineFromClass(CB_CS_UNCHECKED, cb_unchecked, LM_X, (LM_Y - 50));
        actor[CB_CS_UNCHECKED].addEventListener(MouseEvent.CLICK, CheckCS);
        DefineFromClass(CB_CS_CHECKED, cb_checked, LM_X, (LM_Y - 50));
        actor[CB_CS_CHECKED].addEventListener(MouseEvent.CLICK, UncheckCS);
        DefineLbl(LBL_CS, ((txt[TXT_CS]) ? txt[TXT_CS] : "Chat Sound"), (LM_X + LM_X), ((LM_Y + LM_Y) - 50), FontFormat_Default);
        AddFilter(LBL_CS, Filter_Shadow);
        DefineFromClass(CB_COMPARE_UNCHECKED, cb_unchecked, (LM_X + 250), (LM_Y - 50));
        actor[CB_COMPARE_UNCHECKED].addEventListener(MouseEvent.CLICK, CheckCompare);
        DefineFromClass(CB_COMPARE_CHECKED, cb_checked, (LM_X + 250), (LM_Y - 50));
        actor[CB_COMPARE_CHECKED].addEventListener(MouseEvent.CLICK, UncheckCompare);
        DefineLbl(LBL_COMPARE, txt[TXT_COMPARE], ((LM_X + LM_X) + 250), ((LM_Y + LM_Y) - 50), FontFormat_Default);
        AddFilter(LBL_COMPARE, Filter_Shadow);
        DefineFromClass(CB_TV_UNCHECKED, cb_unchecked, (LM_X + 250), LM_Y);
        actor[CB_TV_UNCHECKED].addEventListener(MouseEvent.CLICK, CheckTV);
        DefineFromClass(CB_TV_CHECKED, cb_checked, (LM_X + 250), LM_Y);
        actor[CB_TV_CHECKED].addEventListener(MouseEvent.CLICK, UncheckTV);
        DefineLbl(LBL_TV_CHECKBOX, txt[TXT_TV_DISABLE], ((LM_X + LM_X) + 250), (LM_Y + LM_Y), FontFormat_Default);
        AddFilter(LBL_TV_CHECKBOX, Filter_Shadow);
        DefineLbl(LBL_OPTION_DOCHANGE, "", (OPTION_X + OPTION_DOCHANGE_X), (OPTION_Y + OPTION_Y1), FontFormat_Heading);
        AddFilter(LBL_OPTION_DOCHANGE, Filter_Shadow);
        DefineLbl(LBL_OPTION_FIELD1, "", (OPTION_X + OPTION_DOCHANGE_LABEL_X), ((OPTION_Y + OPTION_Y2) + OPTION_TEXT_Y), FontFormat_DefaultLeft);
        _local2 = actor[LBL_OPTION_FIELD1];
        with (_local2) {
            wordWrap = true;
            width = 300;
        };
        DefineLbl(LBL_OPTION_FIELD2, "", (OPTION_X + OPTION_DOCHANGE_LABEL_X), ((OPTION_Y + OPTION_Y3) + OPTION_TEXT_Y), FontFormat_Default);
        DefineLbl(LBL_OPTION_FIELD3, "", (OPTION_X + OPTION_DOCHANGE_LABEL_X), ((OPTION_Y + OPTION_Y4) + OPTION_TEXT_Y), FontFormat_Default);
        AddFilter(LBL_OPTION_FIELD1, Filter_Shadow);
        AddFilter(LBL_OPTION_FIELD2, Filter_Shadow);
        AddFilter(LBL_OPTION_FIELD3, Filter_Shadow);
        DefineFromClass(INP_OPTION_FIELD1, text_input1, (OPTION_X + OPTION_DOCHANGE_FIELD_X), (OPTION_Y + OPTION_Y2), 2, "name");
        DefineFromClass(INP_OPTION_FIELD2, text_input2, (OPTION_X + OPTION_DOCHANGE_FIELD_X), (OPTION_Y + OPTION_Y3), 2, "name");
        DefineFromClass(INP_OPTION_FIELD3, text_input1, (OPTION_X + OPTION_DOCHANGE_FIELD_X), (OPTION_Y + OPTION_Y4), 2, "name");
        actor[INP_OPTION_FIELD1].addEventListener(KeyboardEvent.KEY_DOWN, OptionBtnHandler);
        actor[INP_OPTION_FIELD2].addEventListener(KeyboardEvent.KEY_DOWN, OptionBtnHandler);
        actor[INP_OPTION_FIELD3].addEventListener(KeyboardEvent.KEY_DOWN, OptionBtnHandler);
        actor[INP_OPTION_FIELD2].addEventListener(KeyboardEvent.KEY_UP, gradePassword);
        actor[INP_OPTION_FIELD3].addEventListener(KeyboardEvent.KEY_UP, gradePassword);
        DefineCnt(CHANGE_PASSWORD_SMILEY_SAD, ((OPTION_X + OPTION_DOCHANGE_X) - 50), (OPTION_Y + OPTION_Y5));
        DefineCnt(CHANGE_PASSWORD_SMILEY_NEUTRAL, ((OPTION_X + OPTION_DOCHANGE_X) - 50), (OPTION_Y + OPTION_Y5));
        DefineCnt(CHANGE_PASSWORD_SMILEY_HAPPY, ((OPTION_X + OPTION_DOCHANGE_X) - 50), (OPTION_Y + OPTION_Y5));
        EnablePopup(CHANGE_PASSWORD_SMILEY_SAD, txt[TXT_PASSWORD_SMILEY_SAD].split("#").join(String.fromCharCode(13)));
        EnablePopup(CHANGE_PASSWORD_SMILEY_NEUTRAL, txt[TXT_PASSWORD_SMILEY_NEUTRAL].split("#").join(String.fromCharCode(13)));
        EnablePopup(CHANGE_PASSWORD_SMILEY_HAPPY, txt[TXT_PASSWORD_SMILEY_HAPPY].split("#").join(String.fromCharCode(13)));
        DefineBtn(OPTION_DOCHANGE, txt[TXT_DOCHANGE], OptionBtnHandler, btnClassBasic, (OPTION_X + OPTION_DOCHANGE_X), (OPTION_Y + OPTION_Y5));
        DefineLbl(LBL_OPTION_VOLUME, "", 0, (OPTION_Y + OPTION_Y6), FontFormat_Default);
        AddFilter(LBL_OPTION_VOLUME, Filter_Shadow);
        DefineSlider(SLDR_OPTION_VOLUME, 11, ((OPTION_X + OPTION_VOLUME_X) + 250), (OPTION_Y + OPTION_Y7), VolumeChange);
        DefineSnd(SND_TEST, "res/sfx/click.mp3");
        DefineBunch(OPTION_DOCHANGE, LBL_OPTION_DOCHANGE, LBL_OPTION_FIELD1, LBL_OPTION_FIELD2, LBL_OPTION_FIELD3, INP_OPTION_FIELD1, INP_OPTION_FIELD2, INP_OPTION_FIELD3, OPTION_DOCHANGE);
        DefineBunch(OPTION_DORESEND, LBL_OPTION_DOCHANGE, LBL_OPTION_FIELD1, OPTION_DOCHANGE);
        DefineLbl(LBL_OPTION_VER, ("v1.70" + (((GetFileVersion() == 0)) ? "" : ("." + String(GetFileVersion())))), 0, ((OPTION_Y + OPTION_VER_Y) + 110), FontFormat_Default);
        actor[LBL_OPTION_VER].x = (((OPTION_X + OPTION_VER_X) + 60) - actor[LBL_OPTION_VER].textWidth);
        AddFilter(LBL_OPTION_VER, Filter_Shadow);
        DefineBunch(SCREEN_OPTION, SHP_OPTION_BLACK, OPTION_IMAGEBORDER, LBL_OPTION_TITLE, LBL_OPTION_IMAGE, OPTION_CHANGEIMG, LBL_OPTION_CHANGE, OPTION_RESEND);
        AddBunch(SCREEN_OPTION, OPTION_CHANGE_EMAIL, OPTION_CHANGE_PASSWORD, OPTION_DELETE, LBL_OPTION_VOLUME, SLDR_OPTION_VOLUME, IF_EXIT, SND_TEST, LBL_OPTION_VER, CB_LM_UNCHECKED, LBL_LM);
        AddBunch(SCREEN_OPTION, CHANGE_PASSWORD_SMILEY_SAD, CHANGE_PASSWORD_SMILEY_NEUTRAL, CHANGE_PASSWORD_SMILEY_HAPPY, CB_CS_UNCHECKED, LBL_CS, CB_COMPARE_UNCHECKED, LBL_COMPARE, CB_TV_UNCHECKED, LBL_TV_CHECKBOX);
        Filter_Glow = [new GradientGlowFilter(0, 45, [16777026, 16777026], [0, 0.4], [0, 127], 16, 16, 1, 1, "outer")];
        i = 0;
        while (i < param_languages.length) {
            DefineImg((OPTION_FLAG + i), (("res/gfx/if/flags/flag_" + param_languages[i]) + ".png"), false, ((LM_X + (35 * i)) - ((lang_code)==param_languages[i]) ? 8 : 0), (LM_Y + ((lang_code)==param_languages[i]) ? 53 : 60), ((lang_code)==param_languages[i]) ? 0.9 : 0.6, ((lang_code)==param_languages[i]) ? 0.9 : 0.6);
            if (lang_code == param_languages[i]){
                AddFilter((OPTION_FLAG + i), Filter_Glow);
            };
            actor[(OPTION_FLAG + i)].addEventListener(MouseEvent.CLICK, ChooseLanguageIcon);
            AddBunch(SCREEN_OPTION, (OPTION_FLAG + i));
            EnablePopup((OPTION_FLAG + i), param_language_names[i]);
            i = (i + 1);
        };
        optionMenuSelect = 0;
        DefineLbl(LBL_HLMAINQUESTS_TITLE, txt[TXT_HL_MAINQUESTS_TITLE], 0, MQS_TITLE_Y, FontFormat_ScreenTitle);
        AddFilter(LBL_HLMAINQUESTS_TITLE, Filter_Shadow);
        DefineImg(HLMQS_DISABLED, "res/gfx/scr/dungeons/unknown.png", false, 0, 0);
        DefineImg(HLMQS_COMPLETED, "res/gfx/scr/dungeons/done.png", false, 0, 0);
        DefineImg(HLMQS_TOWER_DISABLED, "res/gfx/scr/dungeons/unknown.png", false, 0, 0);
        DefineImg(HLMQS_TOWER_COMPLETED, "res/gfx/scr/dungeons/done_tower.png", false, 0, 0);
        DefineBunch(SCREEN_HLMAINQUESTS, IF_OVL, IF_EXIT, LBL_HLMAINQUESTS_TITLE, SND_MAINQUESTS_UNLOCK);
        i = 0;
        while (i < 5) {
            if (i == 4){
                DefineCnt((HLMQS_BUTTON + 4), ((MQS_BUTTON_X + MQS_BUTTON_X) + 0), ((MQS_BUTTON_Y + MQS_BUTTON_Y) - 170));
                DefineImg((HLMQS_BUTTON + 4), "res/gfx/scr/dungeons/button_tower.jpg", false, ((MQS_BUTTON_X + MQS_BUTTON_X) + 0), ((MQS_BUTTON_Y + MQS_BUTTON_Y) - 170));
                DefineCnt((HLMQS_DISABLED + 4), ((MQS_BUTTON_X + MQS_BUTTON_X) + 0), ((MQS_BUTTON_Y + MQS_BUTTON_Y) - 170));
                DefineCnt((HLMQS_COMPLETED + 4), ((MQS_BUTTON_X + MQS_BUTTON_X) + 0), ((MQS_BUTTON_Y + MQS_BUTTON_Y) - 170));
            } else {
                DefineCnt((HLMQS_BUTTON + i), (MQS_BUTTON_X + ((MQS_BUTTON_X * 2) * int((i % 2)))), ((MQS_BUTTON_Y + 100) + (200 * int((i / 2)))));
                DefineImg((HLMQS_BUTTON + i), (("res/gfx/scr/dungeons/button" + String((60 + i))) + ".jpg"), false, (MQS_BUTTON_X + ((MQS_BUTTON_X * 2) * int((i % 2)))), ((MQS_BUTTON_Y + 100) + (200 * int((i / 2)))));
                DefineCnt((HLMQS_DISABLED + i), (MQS_BUTTON_X + ((MQS_BUTTON_X * 2) * int((i % 2)))), ((MQS_BUTTON_Y + 100) + (200 * int((i / 2)))));
                DefineCnt((HLMQS_COMPLETED + i), (MQS_BUTTON_X + ((MQS_BUTTON_X * 2) * int((i % 2)))), ((MQS_BUTTON_Y + 100) + (200 * int((i / 2)))));
            };
            AddBunch(SCREEN_HLMAINQUESTS, (HLMQS_BUTTON + i), (HLMQS_DISABLED + i), (HLMQS_COMPLETED + i));
            EnablePopup((HLMQS_DISABLED + i), POPUP_BEGIN_LINE, txt[(TXT_HL_MAINQUESTS_NAME + i)].split("|")[0], POPUP_END_LINE, POPUP_BEGIN_LINE, FontFormat_EpicItemQuote, txt[(TXT_HL_MAINQUESTS_NAME + i)].split("|")[1], FontFormat_Popup, POPUP_END_LINE, POPUP_BEGIN_LINE, txt[(TXT_DUNGEON_INFO + 1)], POPUP_END_LINE);
            EnablePopup((HLMQS_COMPLETED + i), POPUP_BEGIN_LINE, txt[(TXT_HL_MAINQUESTS_NAME + i)].split("|")[0], POPUP_END_LINE, POPUP_BEGIN_LINE, FontFormat_EpicItemQuote, txt[(TXT_HL_MAINQUESTS_NAME + i)].split("|")[1], FontFormat_Popup, POPUP_END_LINE, POPUP_BEGIN_LINE, txt[(TXT_DUNGEON_INFO + 2)], POPUP_END_LINE);
            i = (i + 1);
        };
        DefineLbl(LBL_MAINQUESTS_TITLE, txt[(TXT_DUNGEON_INFO + 4)], 0, MQS_TITLE_Y, FontFormat_ScreenTitle);
        AddFilter(LBL_MAINQUESTS_TITLE, Filter_Shadow);
        DefineSnd(SND_MAINQUESTS_UNLOCK, "res/sfx/unlock.mp3", false);
        DefineImg(MQS_DISABLED, "res/gfx/scr/dungeons/unknown.png", false, 0, 0);
        DefineImg(MQS_COMPLETED, "res/gfx/scr/dungeons/done.png", false, 0, 0);
        DefineBunch(SCREEN_MAINQUESTS, IF_OVL, IF_EXIT, LBL_MAINQUESTS_TITLE, SND_MAINQUESTS_UNLOCK);
        i = 0;
        while (i < 9) {
            DefineCnt((MQS_BUTTON + i), (MQS_BUTTON_X + (MQS_BUTTON_X * int((i % 3)))), (MQS_BUTTON_Y + (MQS_BUTTON_Y * int((i / 3)))));
            DefineImg((MQS_BUTTON + i), (("res/gfx/scr/dungeons/button" + String((51 + i))) + ".jpg"), false, (MQS_BUTTON_X + (MQS_BUTTON_X * int((i % 3)))), (MQS_BUTTON_Y + (MQS_BUTTON_Y * int((i / 3)))));
            DefineCnt((MQS_DISABLED + i), (MQS_BUTTON_X + (MQS_BUTTON_X * int((i % 3)))), (MQS_BUTTON_Y + (MQS_BUTTON_Y * int((i / 3)))));
            DefineCnt((MQS_COMPLETED + i), (MQS_BUTTON_X + (MQS_BUTTON_X * int((i % 3)))), (MQS_BUTTON_Y + (MQS_BUTTON_Y * int((i / 3)))));
            AddBunch(SCREEN_MAINQUESTS, (MQS_BUTTON + i), (MQS_DISABLED + i), (MQS_COMPLETED + i));
            EnablePopup((MQS_DISABLED + i), POPUP_BEGIN_LINE, txt[(TXT_DUNGEON_NAME + i)].split("|")[0], POPUP_END_LINE, POPUP_BEGIN_LINE, FontFormat_EpicItemQuote, txt[(TXT_DUNGEON_NAME + i)].split("|")[1], FontFormat_Popup, POPUP_END_LINE, POPUP_BEGIN_LINE, txt[(TXT_DUNGEON_INFO + 1)], POPUP_END_LINE);
            EnablePopup((MQS_COMPLETED + i), POPUP_BEGIN_LINE, txt[(TXT_DUNGEON_NAME + i)].split("|")[0], POPUP_END_LINE, POPUP_BEGIN_LINE, FontFormat_EpicItemQuote, txt[(TXT_DUNGEON_NAME + i)].split("|")[1], FontFormat_Popup, POPUP_END_LINE, POPUP_BEGIN_LINE, txt[(TXT_DUNGEON_INFO + 2)], POPUP_END_LINE);
            i = (i + 1);
        };
        DefineImg(DUNGEON_CONGRATS, "res/gfx/scr/dungeons/congrats.jpg", false, 280, 100);
        DefineLbl(LBL_DUNGEON_CONGRATS, ((txt[TXT_CONGRATS]) ? txt[TXT_CONGRATS].split("#").join(String.fromCharCode(13)) : ""), 1000, 600, FontFormat_Default);
        actor[LBL_DUNGEON_CONGRATS].wordWrap = true;
        actor[LBL_DUNGEON_CONGRATS].defaultTextFormat.align = "right";
        AddFilter(LBL_DUNGEON_CONGRATS, Filter_Shadow);
        DefineBunch(DUNGEON_CONGRATS, DUNGEON_CONGRATS, LBL_DUNGEON_CONGRATS, IF_OVL, IF_EXIT);
        DefineFromClass(SHP_MAINQUEST, black_square, MQ_SQUARE_X, MQ_SQUARE_Y);
        _local2 = actor[SHP_MAINQUEST];
        with (_local2) {
            width = MQ_SQUARE_X;
            height = MQ_SQUARE_Y;
            alpha = 0.6;
        };
        DefineLbl(LBL_MAINQUEST_TITLE, "", 0, (MQ_SQUARE_Y + MQ_TITLE_Y), FontFormat_ScreenTitle);
        AddFilter(LBL_MAINQUEST_TITLE, Filter_Shadow);
        DefineLbl(LBL_MAINQUEST_TEXT, "", (MQ_SQUARE_X + MQ_TEXT_X), (MQ_SQUARE_Y + MQ_TEXT_Y), FontFormat_DefaultLeft);
        _local2 = actor[LBL_MAINQUEST_TEXT];
        with (_local2) {
            width = (MQ_SQUARE_X - (MQ_TEXT_X * 2));
            wordWrap = true;
        };
        AddFilter(LBL_MAINQUEST_TEXT, Filter_Shadow);
        DefineBtn(MAINQUEST_START, "", RequestMainQuest, btnClassBasic, 0, ((MQ_SQUARE_Y + MQ_SQUARE_Y) - MQ_BUTTON_Y));
        _local2 = actor[MAINQUEST_START];
        with (_local2) {
            x = (((MQ_SQUARE_X + MQ_SQUARE_X) - MQ_TEXT_X) - width);
        };
        DefineLbl(LBL_MAINQUEST_MUSHHINT, txt[TXT_MQ_MUSHHINT], (MQ_SQUARE_X + MQ_TEXT_X), ((MQ_SQUARE_Y + MQ_SQUARE_Y) - MQ_MUSHHINT_Y), FontFormat_DefaultLeft);
        _local2 = actor[LBL_MAINQUEST_MUSHHINT];
        with (_local2) {
            width = ((MQ_SQUARE_X - (MQ_TEXT_X * 3)) - actor[MAINQUEST_START].width);
            wordWrap = true;
        };
        AddFilter(LBL_MAINQUEST_MUSHHINT, Filter_Shadow);
        DefineCnt(MAINQUEST_ENEMY, MAINQUEST_ENEMY_X, MAINQUEST_ENEMY_Y);
        DefineCnt(MAINQUEST_ENEMY_BORDER, (MAINQUEST_ENEMY_X - MQ_BORDER_X), (MAINQUEST_ENEMY_Y - MQ_BORDER_Y));
        DefineBunch(SCREEN_MAINQUEST, SHP_MAINQUEST, IF_OVL, LBL_MAINQUEST_TITLE, LBL_MAINQUEST_TEXT, MAINQUEST_ENEMY_BORDER, MAINQUEST_ENEMY, LBL_MAINQUEST_MUSHHINT, MAINQUEST_START, IF_EXIT);
        DefineLbl(LBL_DISCONNECTED, txt[TXT_DISCONNECTED], ((DISCONNECTED_X - (DISCONNECTED_X / 2)) + 10), (DISCONNECTED_Y + 10), FontFormat_Error);
        _local2 = actor[LBL_DISCONNECTED];
        with (_local2) {
            wordWrap = true;
            width = (DISCONNECTED_X - 20);
        };
        AddFilter(LBL_DISCONNECTED, Filter_Shadow);
        DefineFromClass(SHP_DISCONNECTED, black_square_neutral, (DISCONNECTED_X - (DISCONNECTED_X / 2)), DISCONNECTED_Y);
        _local2 = actor[SHP_DISCONNECTED];
        with (_local2) {
            width = DISCONNECTED_X;
            height = (actor[LBL_DISCONNECTED].textHeight + 20);
            alpha = 0.8;
        };
        DefineBunch(SCREEN_DISCONNECTED, BLACK_SQUARE, SHP_DISCONNECTED, LBL_DISCONNECTED);
        DefineLbl(LBL_EMAIL_NAG, txt[TXT_EMAIL_NAG], EMAIL_NAG_X, EMAIL_NAG_Y, FontFormat_DefaultLeft);
        actor[LBL_EMAIL_NAG].width = EMAIL_NAG_TEXT_X;
        actor[LBL_EMAIL_NAG].wordWrap = true;
        AddFilter(LBL_EMAIL_NAG, Filter_Shadow);
        DefineLbl(LBL_EMAIL_RESEND, txt[TXT_EMAIL_RESEND], 0, 0, FontFormat_Default);
        AddFilter(LBL_EMAIL_RESEND, Filter_Shadow);
        MakePersistent(LBL_EMAIL_RESEND);
        DefineCnt(EMAIL_RESEND, EMAIL_NAG_X, (EMAIL_NAG_Y + EMAIL_RESEND_Y));
        _local2 = actor[EMAIL_RESEND];
        with (_local2) {
            addChild(actor[LBL_EMAIL_RESEND]);
            textLinkMakeClickable(getChildAt(0).parent);
            mouseChildren = false;
            mouseEnabled = true;
            buttonMode = true;
            useHandCursor = true;
            addEventListener(MouseEvent.CLICK, ResendConfirmationEmail);
        };
        DefineBtn(EMAIL_NAG, txt[TXT_OK], ShowCityScreen, btnClassBasic, ((IF_WIN_X + IF_WIN_WELCOME_X) + IF_WIN_X), (IF_WIN_Y + EMAIL_NAG_Y));
        DefineBunch(SCREEN_EMAIL_NAG, IF_WINDOW, LBL_WINDOW_TITLE, LBL_EMAIL_NAG, EMAIL_NAG, IF_EXIT);
        DefineCnt(POPUP_INFO);
        _local2 = actor[POPUP_INFO];
        with (_local2) {
        };
        Add(POPUP_INFO);
        Add(IF_MAIN);
        Add(IF_BUTTONS);
        if (paramObj["login"]){
            ShowLoginScreen(undefined, true);
        } else {
            ShowBuildCharacterScreen();
        };
    };

'''


def main():
    log = setupLogging()

    initVars()
    configure()

    #s = session()
    #response = s.login()


if __name__ == "__main__":
    main()





'''
public function IO_ErrorHandler(event:IOErrorEvent){
    trc(event);
}

public function GetFileVersion(){
    tmpStr = GetMyPath(1);
    numStr = "";
    result = "";
    tmpStr = tmpStr.split(".")[0];
    i = tmpStr.length;
    while (i >= 0) {
        numStr = tmpStr.substr(i, 1);
        if (numStr == String(int(numStr))){
            result = (numStr + result);
        };
        i--;
    };
    return (int(result));
}

public function GetMyPath(mode:int=0):String{
    var fullPath:String;
    var sections:Array;
    var fileName:String;
    var folderName:String;
    fullPath = loaderInfo.url;
    sections = fullPath.split("/");
    fileName = sections[(sections.length - 1)];
    folderName = fullPath.substr(0, (fullPath.length - fileName.length));
    switch (mode){
        case 0:
            return (folderName);
        case 1:
            return (fileName);
        case 2:
            return (fullPath);
    };
    return ("");
}

public function GetIP():String{
    return ("127.0.0.1");
}


public function SetTitleBar(msg:String=""){
    msg = (msg + (((((((msg == "")) ? "" : " - ") + txt[TXT_GAMETITLE]) + " (") + server.split(".")[0]) + ")"));
    ExternalInterface.call("set_title", msg);
}

public function SwapWords(tmpStr:String):String{
    var w:int;
    var tmpArr:Array;
    var tmpStr2:String;
    var tmpChar:String;
    var ii:int;
    var punct1:String;
    var punct2:String;
    var oldStr:String = tmpStr;
    if (textDir == "right"){
        tmpArr = new Array();
        tmpStr2 = "";
        tmpChar = "";
        tmpArr = tmpStr.split(" ").reverse();
        w = 0;
        while (w < tmpArr.length) {
            if (tmpArr[w].length >= 2){
                punct1 = tmpArr[w].substr(-3, 3);
                if (punct1 != "..."){
                    punct1 = tmpArr[w].substr(-1, 1);
                };
                punct2 = tmpArr[w].substr(0, 1);
                if (((((((((((!((punct1 == "!"))) and (!((punct1 == "."))))) and (!((punct1 == ":"))))) and (!((punct1 == "،"))))) and (!((punct1 == "x؟"))))) and (((!((punct1 == "\""))) or ((tmpArr[w].split("\"").length > 2)))))){
                    punct1 = "";
                };
                if (((!((punct2 == "\""))) or ((tmpArr[w].split("\"").length > 2)))){
                    punct2 = "";
                };
                if (punct1 == "..."){
                    punct2 = (punct2 + "...");
                    punct1 = "";
                };
                tmpArr[w] = ((punct1 + tmpArr[w].substr(((punct2)!="") ? 1 : 0, (tmpArr[w].length - (punct1 + punct2).length))) + punct2);
            };
            w++;
        };
        tmpStr = tmpArr.join(" ");
        tmpStr = tmpStr.split("(").join("#PARENTHESIS#").split(")").join("(").split("#PARENTHESIS#").join(")");
        tmpStr = tmpStr.split("[").join("#SBRACKET#").split("]").join("[").split("#SBRACKET#").join("]");
    };
    return (tmpStr);
}


public function SuperiorFont(Font1:String, Font2:String):String{
    var FontRanking:Array;
    var rank1:int;
    var rank2:int;
    FontRanking = ["Gorilla Milkshake", "Komika Text", "Verdana", "Arial Narrow"];
    rank1 = FontRanking.indexOf(Font1);
    rank2 = FontRanking.indexOf(Font2);
    if (rank1 < 0){
        trc((("Warning: Font " + Font1) + " was unknown and could not be ranked."));
        rank1 = FontRanking.length;
    };
    if (rank2 < 0){
        trc((("Warning: Font " + Font2) + " was unknown and could not be ranked."));
        rank2 = FontRanking.length;
    };
    return (((rank1)>rank2) ? Font1 : Font2);
}

public function DefineBunch(bunchID:int, ... _args):void{
    var i:int;
    actor[bunchID] = new Array();
    i = 0;
    while (i < _args.length) {
        actor[bunchID][i] = _args[i];
        i++;
    };
}

public function AddBunch(bunchID:int, ... _args):void{
    var i:int;
    i = 0;
    while (i < _args.length) {
        actor[bunchID][actor[bunchID].length] = _args[i];
        i++;
    };
}

public function SetVolume(vol:Number):void{
    var vol:* = vol;
    var _local3 = stObject;
    with (_local3) {
        stObject.volume = vol;
    };
}

public function DefineSnd(actorID:int, url:String, PreLoad:Boolean=false){
    var full_url:String;
    if (url.toLowerCase().slice(0, 4) == "http:"){
        full_url = url;
    } else {
        full_url = (snd_url[snd_url_index] + url);
    };
    actor[actorID] = new Sound();
    actorSoundLoader[actorID] = new SoundLoaderContext();
    actorURL[actorID] = full_url;
    actorLoaded[actorID] = 0;
    if (PreLoad){
        Load(actorID);
    };
}

public function DefineBtn(actorID:int, caption:String, handler:Function, btnClass:Class, pos_x:int=0, pos_y:int=0, scale_x:Number=1, scale_y:Number=1, vis:Boolean=true):void{
    var i:* = 0;
    var actorID:* = actorID;
    var caption:* = caption;
    var handler:* = handler;
    var btnClass:* = btnClass;
    var pos_x:int = pos_x;
    var pos_y:int = pos_y;
    var scale_x:int = scale_x;
    var scale_y:int = scale_y;
    var vis:Boolean = vis;
    var playClickSound:* = function (evt:Event){
        Play(SND_CLICK);
    };
    i = actorID;
    actor[i] = new (btnClass)();
    var _local11 = actor[i];
    with (_local11) {
        addEventListener(MouseEvent.MOUSE_DOWN, playClickSound);
        if (btnClass == btnClassPlus){
            addEventListener(MouseEvent.MOUSE_DOWN, handler);
        } else {
            addEventListener(MouseEvent.CLICK, handler);
        };
        x = pos_x;
        y = pos_y;
        scaleX = scale_x;
        scaleY = scale_y;
        visible = Boolean(vis);
        tabEnabled = false;
        allowSmoothing = true;
        forceSmoothing = true;
        smoothing = true;
    };
    if (caption != ""){
        SetBtnText(actorID, caption);
    };
}

public function SetBtnText(actorID:int, caption:String){
    var i:* = 0;
    var offsy:* = 0;
    var actorID:* = actorID;
    var caption:* = caption;
    var CenterTextField:* = function (obj:Object, aoffsx:int=0, aoffsy:int=0):void{
        var btnText:* = null;
        var char:* = null;
        var i:* = 0;
        var imgActor:* = 0;
        var tmpImage:* = null;
        var obj:* = obj;
        var aoffsx:int = aoffsx;
        var aoffsy:int = aoffsy;
        var DoAddBtnImage:* = function (){
            var _local2 = obj.getChildAt(1);
            with (_local2) {
                tmpImage = new Bitmap(actor[imgActor].content.bitmapData.clone());
                tmpImage.x = ((getCharBoundaries(imgIndex).x + x) + 4);
                tmpImage.y = (((getCharBoundaries(imgIndex).y + y) - 3) + (((textDir == "right")) ? 7 : 0));
                obj.addChild(tmpImage);
            };
        };
        btnText = "";
        var imgIndex:* = -1;
        while (obj.numChildren > 2) {
            Sprite(obj).removeChildAt(2);
        };
        i = 0;
        while (i < caption.length) {
            char = caption.charAt(i);
            if (char == "~"){
                imgIndex = i;
                i = (i + 1);
                if (caption.charAt(i) == "P"){
                    btnText = (btnText + "     ");
                    Load(IF_PILZE);
                    imgActor = IF_PILZE;
                } else {
                    if (caption.charAt(i) == "G"){
                        btnText = (btnText + "     ");
                        Load(IF_GOLD);
                        imgActor = IF_GOLD;
                    } else {
                        if (caption.charAt(i) == "S"){
                            btnText = (btnText + "     ");
                            Load(IF_SILBER);
                            imgActor = IF_SILBER;
                        };
                    };
                };
            } else {
                btnText = (btnText + char);
            };
            i = (i + 1);
        };
        var _local5 = obj.getChildAt(1);
        with (_local5) {
            autoSize = TextFieldAutoSize.LEFT;
            embedFonts = fontEmbedded;
            defaultTextFormat = new TextFormat(gameFont, (((specialFontSize == 0)) ? defaultTextFormat.size : specialFontSize), defaultTextFormat.color);
            text = btnText;
            x = int(((((obj.getChildAt(0).width / 2) - (textWidth / 2)) + offs) + aoffsx));
            y = int(((((obj.getChildAt(0).height / 2) - (textHeight / 2)) + offsy) + aoffsy));
            if (imgIndex != -1){
                WhenLoaded(DoAddBtnImage);
            };
        };
    };
    i = actorID;
    var offs:* = 0;
    offsy = 0;
    var specialFontSize:* = 0;
    if ((actor[i] is btnClassBasic)){
        offs = -2;
    };
    if ((actor[i] is btnClassBasic)){
        offsy = 1;
    };
    if ((actor[i] is btnClassInterface)){
        offs = 5;
    };
    if ((actor[i] is btnClassInterface)){
        offsy = 0;
    };
    if ((actor[i] is btnClassLogin)){
        offs = -2;
    };
    if ((actor[i] is btnClassLogin)){
        offsy = 1;
    };
    if ((actor[i] is btnClassBack)){
        offsy = 50;
    };
    if (gameFont == "Verdana"){
        offsy = (offsy - 6);
    };
    if (gameFont == "Arial Narrow"){
        specialFontSize = 16;
        offsy = (offsy - 4);
    };
    CenterTextField(actor[i].upState);
    CenterTextField(actor[i].downState, 1, 2);
    CenterTextField(actor[i].overState);
    CenterTextField(actor[i].hitTestState);
}

public function DefineLbl(actorID:int, caption:String, pos_x:int=0, pos_y:int=0, fmt:TextFormat=undefined, vis:Boolean=true):void{
    var i:* = 0;
    var fmtUL:* = null;
    var actorID:* = actorID;
    var caption:* = caption;
    var pos_x:int = pos_x;
    var pos_y:int = pos_y;
    var fmt:* = fmt;
    var vis:Boolean = vis;
    i = actorID;
    actor[i] = new TextField();
    if (!fmt){
        fmt = FontFormat_Default;
    };
    var _local8 = actor[i];
    with (_local8) {
        defaultTextFormat = fmt;
        autoSize = TextFieldAutoSize.LEFT;
        background = false;
        selectable = false;
        embedFonts = fontEmbedded;
        antiAliasType = AntiAliasType.ADVANCED;
        if (caption){
            htmlText = caption;
        };
        x = pos_x;
        y = pos_y;
        visible = Boolean(vis);
    };
}

public function DefineImg(actorID:int, url:String, PreLoad:Boolean=true, pos_x:int=0, pos_y:int=0, scale_x:Number=1, scale_y:Number=1, vis:Boolean=true):void{
    var i:* = 0;
    var full_url:* = null;
    var LoaderCompleteLocal:* = null;
    var actorID:* = actorID;
    var url:* = url;
    var PreLoad:Boolean = PreLoad;
    var pos_x:int = pos_x;
    var pos_y:int = pos_y;
    var scale_x:int = scale_x;
    var scale_y:int = scale_y;
    var vis:Boolean = vis;
    LoaderCompleteLocal = function (evt:Event){
        actor[i].cacheAsBitmap = true;
    };
    i = actorID;
    if (url.toLowerCase().slice(0, 4) == "http:"){
        full_url = url;
    } else {
        full_url = (img_url[img_url_index] + url);
    };
    actor[i] = new Loader();
    actor[i].contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, LoaderError);
    actor[i].contentLoaderInfo.addEventListener(Event.COMPLETE, LoaderComplete);
    actor[i].contentLoaderInfo.addEventListener(Event.COMPLETE, LoaderCompleteLocal);
    actorLoaded[i] = 0;
    actorURL[i] = full_url;
    var _local10 = actor[i];
    with (_local10) {
        tabEnabled = false;
        x = pos_x;
        y = pos_y;
        forceSmoothing = true;
        allowSmoothing = true;
        smoothing = true;
        scaleX = scale_x;
        scaleY = scale_y;
        visible = Boolean(vis);
    };
    if (PreLoad){
        Load(i);
    };
}

public function DefineClickArea(actorID:int, imgActorID:int, fn:Function, pos_x:int, pos_y:int, size_x:int, size_y:int, ovlActorID:int=0, hoverFn:Function=undefined, outFn:Function=undefined, stayPut:Boolean=false):void{
    var actorID:* = actorID;
    var imgActorID:* = imgActorID;
    var fn:* = fn;
    var pos_x:* = pos_x;
    var pos_y:* = pos_y;
    var size_x:* = size_x;
    var size_y:* = size_y;
    var ovlActorID:int = ovlActorID;
    var hoverFn:* = hoverFn;
    var outFn:* = outFn;
    var stayPut:Boolean = stayPut;
    var ClickAreaHover:* = function (evt:MouseEvent):void{
        if (imgActorID != C_EMPTY){
            Add(imgActorID);
        };
        if (ovlActorID != C_EMPTY){
            VisibleToFront(ovlActorID);
        };
        if (!stayPut){
            Add(actorID);
        };
        if ((hoverFn is Function)){
            hoverFn();
        };
    };
    var ClickAreaOut:* = function (evt:MouseEvent):void{
        Remove(imgActorID);
        if ((outFn is Function)){
            outFn();
        };
    };
    actor[actorID] = new MovieClip();
    var _local13 = actor[actorID];
    with (_local13) {
        tabEnabled = false;
        x = pos_x;
        y = pos_y;
        graphics.beginFill(0xFF0000);
        graphics.drawRect(0, 0, size_x, size_y);
        alpha = ((C_SHOW_CA) ? 0.3 : 0);
        mouseChildren = false;
        mouseEnabled = true;
        if ((fn is Function)){
            addEventListener(MouseEvent.MOUSE_OVER, ClickAreaHover);
            addEventListener(MouseEvent.MOUSE_OUT, ClickAreaOut);
            addEventListener(MouseEvent.CLICK, fn);
            useHandCursor = true;
            buttonMode = true;
        };
    };
}

public function DefineFromClass(actorID:int, imgClass:Class, pos_x:int=0, pos_y:int=0, txtManip:int=0, txtType:String=""):void{
    var i:* = 0;
    var actorID:* = actorID;
    var imgClass:* = imgClass;
    var pos_x:int = pos_x;
    var pos_y:int = pos_y;
    var txtManip:int = txtManip;
    var txtType:String = txtType;
    var ManipTextField:* = function (field){
        var field:* = field;
        var _local3 = field;
        with (_local3) {
            embedFonts = fontEmbedded;
            defaultTextFormat = new TextFormat(gameFont, (defaultTextFormat.size + sizeMod), defaultTextFormat.color);
        };
    };
    i = actorID;
    actor[i] = new (imgClass)();
    actorLoaded[i] = 2;
    var _local8 = actor[i];
    with (_local8) {
        x = pos_x;
        y = pos_y;
        allowSmoothing = true;
        forceSmoothing = true;
        smoothing = true;
        visible = true;
    };
    if (txtManip == 1){
        ManipTextField(actor[i].getChildAt(0));
    } else {
        if (txtManip == 2){
            ManipTextField(actor[i].getChildAt(1));
        };
    };
}

public function DefineCnt(actorID:int, pos_x:int=0, pos_y:int=0, vis:Boolean=true):void{
    var i:* = 0;
    var actorID:* = actorID;
    var pos_x:int = pos_x;
    var pos_y:int = pos_y;
    var vis:Boolean = vis;
    i = actorID;
    actor[i] = new MovieClip();
    var _local6 = actor[i];
    with (_local6) {
        tabEnabled = false;
        x = pos_x;
        y = pos_y;
        visible = Boolean(vis);
        forceSmoothing = true;
        allowSmoothing = true;
        smoothing = true;
    };
}

public function textLinkMakeClickable(obj:Sprite){
}

public function DefineSlider(actorID:int, Ticks:int, pos_x:int, pos_y:int, fn:Function){
    var i:* = 0;
    var oldSliderVal:* = 0;
    var actorID:* = actorID;
    var Ticks:* = Ticks;
    var pos_x:* = pos_x;
    var pos_y:* = pos_y;
    var fn:* = fn;
    var SliderMove:* = function (evt:MouseEvent):void{
        var tmpX:int;
        var sliderVal:int;
        if (evt.buttonDown){
            if ((((evt.localX > 35)) and ((evt.localX < (45 + 198))))){
                tmpX = evt.localX;
                sliderVal = (int(((((tmpX - 40) / 198) * (Ticks - 1)) + 0.5)) + 1);
                tmpX = (int((((sliderVal - 1) / (Ticks - 1)) * 198)) + 40);
                evt.target.getChildAt(1).x = (tmpX - 7);
                if (oldSliderVal != sliderVal){
                    fn(sliderVal);
                };
                oldSliderVal = sliderVal;
            };
        };
    };
    var ClickTick:* = function (evt:MouseEvent):void{
        var tmpX:int;
        var sliderVal:int;
        tmpX = (evt.stageX - actor[(actorID + 1)].x);
        sliderVal = (int(((((tmpX - 40) / 198) * (Ticks - 1)) + 0.5)) + 1);
        tmpX = (int((((sliderVal - 1) / (Ticks - 1)) * 198)) + 40);
        actor[(actorID + 1)].getChildAt(1).x = (tmpX - 7);
        if (oldSliderVal != sliderVal){
            fn(sliderVal);
        };
        oldSliderVal = sliderVal;
    };
    actorBitmap[actorID] = Ticks;
    actorBitmap[(actorID + 1)] = [fn];
    DefineFromClass((actorID + 1), DragonSlider, pos_x, pos_y);
    DefineBunch(actorID, (actorID + 1));
    var _local7 = actor[(actorID + 1)];
    with (_local7) {
        addEventListener(MouseEvent.MOUSE_DOWN, SliderMove);
        addEventListener(MouseEvent.MOUSE_MOVE, SliderMove);
        buttonMode = true;
        useHandCursor = true;
    };
    i = 1;
    while (i <= Ticks) {
        DefineFromClass(((actorID + 1) + i), SliderTick, (((pos_x + 40) + int((198 * ((i - 1) / (Ticks - 1))))) - 5), (pos_y - 10));
        _local7 = actor[((actorID + 1) + i)];
        with (_local7) {
            addEventListener(MouseEvent.MOUSE_DOWN, ClickTick);
            buttonMode = true;
            useHandCursor = true;
        };
        AddBunch(actorID, ((actorID + 1) + i));
        i = (i + 1);
    };
    fn(GetSliderValue(actorID));
}

public function GetSliderValue(actorID:int):int{
    var tmpX:int;
    tmpX = (actor[(actorID + 1)].getChildAt(1).x + 5);
    return ((int(((((tmpX - 40) / 198) * (actorBitmap[actorID] - 1)) + 0.5)) + 1));
}

public function SetSliderValue(actorID:int, value:int):void{
    var tmpX:int;
    var oldVal:int;
    oldVal = GetSliderValue(actorID);
    tmpX = (int((((value - 1) / (actorBitmap[actorID] - 1)) * 198)) + 40);
    actor[(actorID + 1)].getChildAt(1).x = (tmpX - 7);
    if (oldVal != value){
        var _local5 = actorBitmap[(actorID + 1)];
        _local5[0](value);
    };
}

public function MakePersistent(... _args):void{
    var i:int;
    var iBunch:int;
    i = 0;
    while (i < _args.length) {
        if ((actor[_args[i]] is Array)){
            iBunch = 0;
            while (iBunch < actor[_args[i]].length) {
                MakePersistent(actor[_args[i]][iBunch]);
                iBunch++;
            };
            return;
        };
        actorPersistent[_args[i]] = true;
        i++;
    };
}

public function MakeTemporary(... _args):void{
    var i:int;
    var iBunch:int;
    i = 0;
    while (i < _args.length) {
        if ((actor[_args[i]] is Array)){
            iBunch = 0;
            while (iBunch < actor[_args[i]].length) {
                MakeTemporary(actor[_args[i]][iBunch]);
                iBunch++;
            };
            return;
        };
        actorPersistent[_args[i]] = false;
        i++;
    };
}

public function EnableDragDrop(actorID:int, handler:Function, ... _args):void{
    var old_x:* = 0;
    var old_y:* = 0;
    var i:* = 0;
    var iBunch:* = 0;
    var MouseBtnDown:* = null;
    var dragResetTimer:* = null;
    var dragReset:* = null;
    var MouseBtnUp:* = null;
    var actorID:* = actorID;
    var handler:* = handler;
    var Targets:* = _args;
    MouseBtnDown = function (evt:MouseEvent):void{
        var topPosition:int;
        if (((dragDropProhibit) or (dragNotYet))){
            return;
        };
        topPosition = (evt.target.parent.numChildren - 1);
        evt.target.parent.setChildIndex(evt.target, topPosition);
        evt.target.startDrag();
        dragDropActive = true;
    };
    dragReset = function (evt:Event){
        dragNotYet = false;
        dragResetTimer.stop();
    };
    MouseBtnUp = function (evt:MouseEvent):void{
        var dropped:Boolean;
        var droppedOn:int;
        var iBunch:int;
        if (!dragDropActive){
            return;
        };
        dropped = false;
        dragDropActive = false;
        dragNotYet = true;
        dragResetTimer.start();
        evt.target.stopDrag();
        if (evt.target.dropTarget != null){
            i = 0;
            while (i < Targets.length) {
                if ((actor[Targets[i]] is Array)){
                    iBunch = 0;
                    while (iBunch < actor[Targets[i]].length) {
                        if (actor[actor[Targets[i]][iBunch]] == evt.target.dropTarget.parent){
                            dropped = true;
                            droppedOn = actor[Targets[i]][iBunch];
                            break;
                        };
                        iBunch++;
                    };
                } else {
                    if (actor[Targets[i]] == evt.target.dropTarget.parent){
                        dropped = true;
                        droppedOn = Targets[i];
                        break;
                    };
                };
                i++;
            };
            if (Targets.length == 0){
                i = 0;
                while (i < actor.length) {
                    if ((actor[i] is DisplayObject)){
                        if ((((actor[i] == evt.target.dropTarget.parent)) or ((actor[i] == evt.target.dropTarget)))){
                            dropped = true;
                            droppedOn = i;
                            break;
                        };
                    };
                    i++;
                };
            };
            if (dropped){
                if (!handler(actorID, droppedOn)){
                    evt.target.x = old_x;
                    evt.target.y = old_y;
                };
            } else {
                evt.target.x = old_x;
                evt.target.y = old_y;
            };
        } else {
            evt.target.x = old_x;
            evt.target.y = old_y;
        };
    };
    old_x = actor[actorID].x;
    old_y = actor[actorID].y;
    if ((actor[actorID] is Array)){
        iBunch = 0;
        while (iBunch < actor[actorID].length) {
            if ((((actor[actor[actorID][iBunch]] is MovieClip)) or ((actor[actor[actorID][iBunch]] is Sprite)))){
                actor[actor[actorID][iBunch]].addEventListener(MouseEvent.MOUSE_DOWN, MouseBtnDown);
                actor[actor[actorID][iBunch]].addEventListener(MouseEvent.MOUSE_UP, MouseBtnUp);
            } else {
                trc(("Fehler: Drag & Drop nicht unterstützt für Actor " + actor[actorID][iBunch]));
            };
            iBunch = (iBunch + 1);
        };
        return;
    };
    if ((((actor[actorID] is MovieClip)) or ((actor[actorID] is Sprite)))){
        actor[actorID].addEventListener(MouseEvent.MOUSE_DOWN, MouseBtnDown);
        actor[actorID].addEventListener(MouseEvent.MOUSE_UP, MouseBtnUp);
    } else {
        trc(("Fehler: Drag & Drop nicht unterstützt für Actor " + actorID));
    };
    dragResetTimer = new Timer(500);
    dragResetTimer.addEventListener(TimerEvent.TIMER, dragReset);
}

public function SetCnt(cntID:int, ImgID:int=0, pos_x:int=0, pos_y:int=0, center:Boolean=false):void{
    var iBunch:* = 0;
    var CntImgLoaded:* = null;
    var cntID:* = cntID;
    var ImgID:int = ImgID;
    var pos_x:int = pos_x;
    var pos_y:int = pos_y;
    var center:Boolean = center;
    if (!(actor[ImgID] is Loader)){
        if (actorBitmap[cntID]){
            actor[cntID].removeChild(actorBitmap[cntID]);
            actorBitmap[cntID] = undefined;
        };
        return;
    };
    if ((actor[cntID] is Array)){
        iBunch = 0;
        while (iBunch < actor[cntID].length) {
            SetCnt(actor[cntID][iBunch], ImgID);
            iBunch = (iBunch + 1);
        };
        return;
    };
    if (actorBitmap[cntID]){
        actor[cntID].removeChild(actorBitmap[cntID]);
        actorBitmap[cntID] = undefined;
    };
    if (ImgID != 0){
        if (actorLoaded[ImgID] == 2){
            if ((((((ImgID == ITM_EMPTY)) or ((ImgID == ITM_OFFS)))) and ((actor[cntID].width == 0)))){
                var _local7 = actor[cntID];
                with (_local7) {
                    graphics.beginFill(0, 0);
                    graphics.drawRect(0, 0, 90, 90);
                };
            };
            if ((actor[ImgID].content is Bitmap)){
                actorBitmap[cntID] = new Bitmap();
                actorBitmap[cntID].bitmapData = actor[ImgID].content.bitmapData;
                _local7 = actorBitmap[cntID];
                with (_local7) {
                    allowSmoothing = true;
                    forceSmoothing = true;
                    smoothing = true;
                    x = (pos_x - ((center) ? (width / 2) : 0));
                    y = (pos_y - ((center) ? (height / 2) : 0));
                };
                actor[cntID].addChild(actorBitmap[cntID]);
            } else {
                actorBitmap[cntID] = new Bitmap();
                actorBitmap[cntID].bitmapData = new BitmapData(actor[ImgID].width, actor[ImgID].height, true, 0);
                actorBitmap[cntID].bitmapData.draw((actor[ImgID] as IBitmapDrawable));
                _local7 = actorBitmap[cntID];
                with (_local7) {
                    allowSmoothing = true;
                    forceSmoothing = true;
                    smoothing = true;
                    x = (pos_x - ((center) ? (width / 2) : 0));
                    y = (pos_y - ((center) ? (height / 2) : 0));
                };
                actor[cntID].addChild(actorBitmap[cntID]);
            };
        } else {
            CntImgLoaded = function (evt:Event):void{
                actorLoaded[ImgID] = 2;
                SetCnt(cntID, ImgID, pos_x, pos_y, center);
            };
            actor[ImgID].contentLoaderInfo.addEventListener(Event.COMPLETE, CntImgLoaded);
            if (actorLoaded[ImgID] == 0){
                Load(ImgID);
            };
        };
    };
}

public function Play(actorID:int, endless:Boolean=false):void{
    var SoundLoaded:* = null;
    var actorID:* = actorID;
    var endless:Boolean = endless;
    if (actorLoaded[actorID] == 2){
        actor[actorID].play(0, ((endless) ? 30000 : 0), stObject);
    } else {
        SoundLoaded = function (evt:Event){
            trc((("Sound " + actorID) + " geladen."));
            actor[actorID].play(0, ((endless) ? 30000 : 0), stObject);
        };
        trc((("Warnung: Sound " + actorID) + " nicht geladen! Wird geladen..."));
        actor[actorID].addEventListener(Event.COMPLETE, SoundLoaded);
        Load(actorID);
    };
}

public function Add(actorID:int, pos_x:int=undefined, pos_y:int=undefined, scale_x:Number=undefined, scale_y:Number=undefined, vis=undefined, containerID:int=-1):void{
    var i:* = 0;
    var req:* = null;
    var iBunch:* = 0;
    var actorID:* = actorID;
    var pos_x:* = pos_x;
    var pos_y:* = pos_y;
    var scale_x:* = scale_x;
    var scale_y:* = scale_y;
    var vis:* = vis;
    var containerID:int = containerID;
    i = actorID;
    if ((actor[actorID] is Sound)){
        return;
    };
    if ((actor[actorID] is Array)){
        iBunch = 0;
        while (iBunch < actor[actorID].length) {
            if (actor[actorID][iBunch] == actorID){
                return;
            };
            Add(actor[actorID][iBunch], pos_x, pos_y, scale_x, scale_y, vis, containerID);
            iBunch = (iBunch + 1);
        };
        return;
    };
    if ((actor[i] is Loader)){
        if (actorLoaded[i] == 0){
            Load(i);
        };
    };
    var _local9 = actor[i];
    with (_local9) {
        if (pos_x){
            x = pos_x;
        };
        if (pos_y){
            y = pos_y;
        };
        if (scale_x){
            scaleX = size_x;
        };
        if (scale_y){
            scaleY = size_y;
        };
        if (vis !== undefined){
            visible = Boolean(vis);
        };
    };
    if (containerID == -1){
        addChild(actor[i]);
    } else {
        actor[containerID].addChild(actor[i]);
    };
}

public function AddBMO(bunchID:int, offset:int){
    var i:int;
    i = 0;
    while (i < actor[bunchID].length) {
        if ((actor[actor[bunchID][i]] is Array)){
            AddBMO(actor[bunchID][i], offset);
        } else {
            Add((actor[bunchID][i] + offset));
        };
        i++;
    };
}

public function VisibleToFront(... _args):void{
    var i:* = 0;
    var iBunch:* = 0;
    var actorIDs:* = _args;
    i = 0;
    while (i < actorIDs.length) {
        if (actor[actorIDs[i]]){
            if ((actor[actorIDs[i]] is Array)){
                iBunch = 0;
                while (iBunch < actor[actorIDs[i]].length) {
                    VisibleToFront(actor[actorIDs[i]][iBunch]);
                    iBunch = (iBunch + 1);
                };
                return;
            };
            var _local3 = actor[actorIDs[i]];
            with (_local3) {
                if (OnStage(actorIDs[i])){
                    Add(actorIDs[i]);
                };
            };
        };
        i = (i + 1);
    };
}

public function Move(actorID:int, pos_x:int, pos_y:int):void{
    var i:* = 0;
    var actorID:* = actorID;
    var pos_x:* = pos_x;
    var pos_y:* = pos_y;
    if ((actor[actorID] is Array)){
        i = 0;
        while (i < actor[actorID].length) {
            Move(actor[actorID][i], pos_x, pos_y);
            i = (i + 1);
        };
    } else {
        var _local5 = actor[actorID];
        with (_local5) {
            x = pos_x;
            y = pos_y;
        };
    };
}

public function AddSome(... _args):void{
    var i:int;
    var iBunch:int;
    i = 0;
    while (i < _args.length) {
        if (actor[_args[i]]){
            if ((actor[_args[i]] is Array)){
                iBunch = 0;
                while (iBunch < actor[_args[i]].length) {
                    Add(actor[_args[i]][iBunch]);
                    iBunch++;
                };
                return;
            };
            Add(_args[i]);
        };
        i++;
    };
}

public function Remove(... _args):void{
    var i:* = 0;
    var iBunch:* = 0;
    var actorIDs:* = _args;
    i = 0;
    while (i < actorIDs.length) {
        if (actor[actorIDs[i]]){
            if ((actor[actorIDs[i]] is Array)){
                iBunch = 0;
                while (iBunch < actor[actorIDs[i]].length) {
                    Remove(actor[actorIDs[i]][iBunch]);
                    iBunch = (iBunch + 1);
                };
                return;
            };
            if ((actor[actorIDs[i]] is Sound)){
                return;
            };
            var _local3 = actor[actorIDs[i]];
            with (_local3) {
                if (parent){
                    parent.removeChild(actor[actorIDs[i]]);
                };
            };
        };
        i = (i + 1);
    };
}

public function RemoveAll(alsoPersistent:Boolean=false):void{
    var i:int;
    i = 0;
    while (i < actor.length) {
        if (actor[i]){
            if (!(actor[i] is Array)){
                if (((!(actorPersistent[i])) or (alsoPersistent))){
                    Remove(i);
                };
            };
        };
        i++;
    };
    ExternalInterface.call("hideSocial");
}

public function GetActorID(actorObj:Object, iStart=0, iEnde=-1):int{
    var i:int;
    var res:int;
    res = C_EMPTY;
    i = iStart;
    while (i <= ((iEnde)==-1) ? (actor.length - 1) : iEnde) {
        if (actorObj == actor[i]){
            res = i;
            break;
        };
        i++;
    };
    return (res);
}

public function GetActorName(actorID:int=0):String{
    var loader:* = null;
    var actorID:int = actorID;
    loader = new URLLoader();
    if (!(actorName is Array)){
        var ConstFileLoaded:* = function (evt:Event):void{
            var strData:String;
            var constName:String;
            var i:int;
            var c:int;
            var tmpStr:String;
            strData = loader.data;
            constName = "";
            var equals:Boolean;
            tmpStr = "";
            var lastIndex:int;
            i = 0;
            while (i < (strData.length - 1)) {
                c = strData.charCodeAt(i);
                switch (c){
                    case 10:
                    case 13:
                        if (constName != ""){
                            actorName[int(tmpStr.substr(1))] = constName;
                        };
                        constName = "";
                        tmpStr = "";
                        break;
                    case 61:
                        if (tmpStr.substr(0, 14).toLowerCase() == "_global const "){
                            constName = tmpStr.substr(14, (tmpStr.length - 15));
                            tmpStr = "";
                        };
                        break;
                    default:
                        tmpStr = (tmpStr + strData.charAt(i));
                };
                i++;
            };
            pendingDebugFile = false;
            LoaderComplete(evt);
        };
        actorName = new Array();
        var _local3 = loader;
        with (_local3) {
            dataFormat = URLLoaderDataFormat.TEXT;
            addEventListener(Event.COMPLETE, ConstFileLoaded);
            load(new URLRequest("constants.as"));
        };
        pendingLoaders = (pendingLoaders + 1);
        pendingDebugFile = true;
    };
    return (actorName[actorID]);
}

public function OnStage(actorID):Boolean{
    if ((actor[actorID] is DisplayObject)){
        return (Boolean(getChildByName(actor[actorID].name)));
    };
    return (false);
}

public function Visible(actorID):Boolean{
    if ((actor[actorID] is DisplayObject)){
        return (((Boolean(getChildByName(actor[actorID].name))) and (actor[actorID].visible)));
    };
    return (false);
}

public function Show(... _args):void{
    var i:* = 0;
    var iBunch:* = 0;
    var actorIDs:* = _args;
    i = 0;
    while (i < actorIDs.length) {
        if (actor[actorIDs[i]]){
            if ((actor[actorIDs[i]] is Array)){
                iBunch = 0;
                while (iBunch < actor[actorIDs[i]].length) {
                    Show(actor[actorIDs[i]][iBunch]);
                    iBunch = (iBunch + 1);
                };
                return;
            };
            var _local3 = actor[actorIDs[i]];
            with (_local3) {
                visible = true;
            };
        };
        i = (i + 1);
    };
}

public function Hide(... _args):void{
    var i:* = 0;
    var iBunch:* = 0;
    var actorIDs:* = _args;
    i = 0;
    while (i < actorIDs.length) {
        if (actor[actorIDs[i]]){
            if ((actor[actorIDs[i]] is Array)){
                iBunch = 0;
                while (iBunch < actor[actorIDs[i]].length) {
                    Hide(actor[actorIDs[i]][iBunch]);
                    iBunch = (iBunch + 1);
                };
                return;
            };
            var _local3 = actor[actorIDs[i]];
            with (_local3) {
                visible = false;
            };
        };
        i = (i + 1);
    };
}

public function SetAlpha(actorID:int, alphaValue:Number){
    var i:int;
    if ((actor[actorID] is Array)){
        i = 0;
        while (i < actor[actorID].length) {
            SetAlpha(actor[actorID][i], alphaValue);
            i++;
        };
    } else {
        if (actor[actorID].hasOwnProperty("alpha")){
            actor[actorID].alpha = alphaValue;
        };
    };
}

public function GetAlpha(actorID:int):Number{
    var i:int;
    var tmpAlpha:Number;
    tmpAlpha = 0;
    if ((actor[actorID] is Array)){
        i = 0;
        while (i < actor[actorID].length) {
            if (GetAlpha(actor[actorID][i]) > tmpAlpha){
                tmpAlpha = GetAlpha(actor[actorID][i]);
            };
            i++;
        };
        return (tmpAlpha);
    };
    if (actor[actorID].hasOwnProperty("alpha")){
        return (actor[actorID].alpha);
    };
    return (0);
}

public function FadeIn(actorID:int, timerInterval:int=20, alphaStep:Number=0.05, alphaMax:Number=1){
    var fadeTimer:* = null;
    var currentAlpha:* = NaN;
    var FadeInEvent:* = null;
    var actorID:* = actorID;
    var timerInterval:int = timerInterval;
    var alphaStep:Number = alphaStep;
    var alphaMax:int = alphaMax;
    FadeInEvent = function (evt:TimerEvent){
        currentAlpha = (currentAlpha + alphaStep);
        if (currentAlpha >= alphaMax){
            currentAlpha = alphaMax;
            fadeTimer.stop();
            fadeTimer.removeEventListener(TimerEvent.TIMER, FadeInEvent);
        };
        SetAlpha(actorID, currentAlpha);
    };
    fadeTimer = new Timer(timerInterval);
    currentAlpha = GetAlpha(actorID);
    if (alphaStep <= 0){
        return;
    };
    fadeTimer.addEventListener(TimerEvent.TIMER, FadeInEvent);
    fadeTimer.start();
    SetAlpha(actorID, currentAlpha);
}

public function FadeOut(actorID:int, timerInterval:int=20, alphaStep:Number=0.05, alphaMin:Number=0, HideThen:Boolean=false){
    var fadeTimer:* = null;
    var currentAlpha:* = NaN;
    var FadeOutEvent:* = null;
    var actorID:* = actorID;
    var timerInterval:int = timerInterval;
    var alphaStep:Number = alphaStep;
    var alphaMin:int = alphaMin;
    var HideThen:Boolean = HideThen;
    FadeOutEvent = function (evt:TimerEvent){
        currentAlpha = (currentAlpha - alphaStep);
        if (currentAlpha <= alphaMin){
            currentAlpha = alphaMin;
            fadeTimer.stop();
            fadeTimer.removeEventListener(TimerEvent.TIMER, FadeOutEvent);
            if (HideThen){
                Hide(actorID);
            };
        };
        SetAlpha(actorID, currentAlpha);
    };
    fadeTimer = new Timer(timerInterval);
    currentAlpha = GetAlpha(actorID);
    if (alphaStep <= 0){
        return;
    };
    fadeTimer.addEventListener(TimerEvent.TIMER, FadeOutEvent);
    fadeTimer.start();
    SetAlpha(actorID, currentAlpha);
}

public function AddFilter(actorID:int, filter:Array):void{
    actor[actorID].filters = filter;
}

public function SetFont(fontName:String){
    var fontName:* = fontName;
    gameFont = fontName;
    fontEmbedded = true;
    if ((((((fontName == "Verdana")) or ((fontName == "Arial Narrow")))) or ((fontName == "Geeza Pro")))){
        fontEmbedded = false;
        sizeMod = -6;
    };
    trc(("Font chosen: " + fontName));
    var _local3 = FontFormat_ToiletAura;
    with (_local3) {
        font = fontName;
        size = (sizeMod + 35);
        color = CLR_BLACK;
        align = "center";
        leftMargin = 0;
        kerning = true;
    };
    _local3 = FontFormat_GuildListTextAttackErrorHalf;
    with (_local3) {
        font = fontName;
        size = (sizeMod + 24);
        color = CLR_ATTACK_ERROR_OFFLINE_HALF;
        align = textDir;
        leftMargin = 0;
        kerning = true;
    };
    _local3 = FontFormat_GuildListTextAttackErrorOnlineHalf;
    with (_local3) {
        font = fontName;
        size = (sizeMod + 24);
        color = CLR_ATTACK_ERROR_ONLINE_HALF;
        align = textDir;
        leftMargin = 0;
        kerning = true;
    };
    _local3 = FontFormat_Error;
    with (_local3) {
        font = fontName;
        size = (sizeMod + 24);
        color = CLR_ERROR;
        align = textDir;
        leftMargin = 0;
        kerning = true;
    };
    _local3 = FontFormat_Default;
    with (_local3) {
        font = fontName;
        size = (sizeMod + 20);
        color = CLR_SFORANGE;
        align = "center";
        leftMargin = 0;
        kerning = true;
    };
    _local3 = FontFormat_HighStakes;
    with (_local3) {
        font = fontName;
        size = (sizeMod + 20);
        color = CLR_SYSMSG_RED;
        align = "center";
        leftMargin = 0;
        kerning = true;
    };
    _local3 = FontFormat_HighStakesHighLight;
    with (_local3) {
        font = fontName;
        size = (sizeMod + 20);
        color = CLR_SYSMSG_RED_HIGHLIGHT;
        align = "center";
        leftMargin = 0;
        kerning = true;
    };
    _local3 = FontFormat_HighStakesGrayed;
    with (_local3) {
        font = fontName;
        size = (sizeMod + 20);
        color = CLR_SYSMSG_RED_GRAYED;
        align = "center";
        leftMargin = 0;
        kerning = true;
    };
    _local3 = FontFormat_HighStakesHighLightGrayed;
    with (_local3) {
        font = fontName;
        size = (sizeMod + 20);
        color = CLR_SYSMSG_RED_HIGHLIGHT_GRAYED;
        align = "center";
        leftMargin = 0;
        kerning = true;
    };
    _local3 = FontFormat_Book;
    with (_local3) {
        font = fontName;
        size = (sizeMod + 20);
        color = 0;
        align = "center";
        leftMargin = 0;
        kerning = true;
    };
    _local3 = FontFormat_BookHint;
    with (_local3) {
        font = fontName;
        size = (sizeMod + 18);
        color = 136;
        align = "center";
        leftMargin = 0;
        kerning = true;
    };
    _local3 = FontFormat_BookLeft;
    with (_local3) {
        font = fontName;
        size = (sizeMod + 16);
        color = 0;
        align = "left";
        leftMargin = 0;
        kerning = true;
    };
    _local3 = FontFormat_Bullshit;
    with (_local3) {
        font = fontName;
        size = 14;
        color = CLR_SFORANGE;
        align = "left";
        leftMargin = 0;
        kerning = true;
    };
    _local3 = FontFormat_AttackLabel;
    with (_local3) {
        font = fontName;
        size = (sizeMod + 19);
        color = CLR_SFORANGE;
        align = textDir;
        leftMargin = 0;
        kerning = true;
    };
    _local3 = FontFormat_Speech;
    with (_local3) {
        font = fontName;
        size = (sizeMod + 20);
        color = CLR_WHITE;
        align = textDir;
        leftMargin = 0;
        kerning = true;
    };
    _local3 = FontFormat_Grayed;
    with (_local3) {
        font = fontName;
        size = (sizeMod + 20);
        color = CLR_GRAYED;
        align = textDir;
        leftMargin = 0;
        kerning = true;
    };
    _local3 = FontFormat_GrayedHighLight;
    with (_local3) {
        font = fontName;
        size = (sizeMod + 20);
        color = CLR_GRAYED_HL;
        align = textDir;
        leftMargin = 0;
        kerning = true;
    };
    _local3 = FontFormat_ClassError;
    with (_local3) {
        font = fontName;
        size = (sizeMod + 20);
        color = CLR_ERROR;
        align = textDir;
        leftMargin = 0;
        kerning = true;
    };
    _local3 = FontFormat_Chat;
    with (_local3) {
        font = fontName;
        size = (sizeMod + 20);
        color = CLR_SFORANGE;
        align = textDir;
        leftMargin = 0;
        kerning = true;
    };
    _local3 = FontFormat_ChatWhisper;
    with (_local3) {
        font = fontName;
        size = (sizeMod + 20);
        color = CLR_CHAT_WHISPER;
        align = textDir;
        leftMargin = 0;
        kerning = true;
    };
    _local3 = FontFormat_ChatError;
    with (_local3) {
        font = fontName;
        size = (sizeMod + 20);
        color = CLR_ERROR;
        align = textDir;
        leftMargin = 0;
        kerning = true;
    };
    _local3 = FontFormat_GuildBuilding;
    with (_local3) {
        font = fontName;
        size = (sizeMod + 20);
        color = CLR_SFORANGE;
        align = textDir;
        leftMargin = 0;
        kerning = true;
    };
    _local3 = FontFormat_GuildMoney;
    with (_local3) {
        font = fontName;
        size = (sizeMod + 20);
        color = CLR_SFORANGE;
        align = textDir;
        leftMargin = 0;
        kerning = true;
    };
    _local3 = FontFormat_DefaultLeft;
    with (_local3) {
        font = fontName;
        size = (sizeMod + 20);
        color = CLR_SFORANGE;
        align = textDir;
        leftMargin = 0;
        kerning = true;
    };
    _local3 = FontFormat_Highlight;
    with (_local3) {
        font = fontName;
        size = (sizeMod + 20);
        color = CLR_SFHIGHLIGHT;
        align = textDir;
        leftMargin = 0;
        kerning = true;
    };
    _local3 = FontFormat_HighlightWhisper;
    with (_local3) {
        font = fontName;
        size = (sizeMod + 20);
        color = CLR_SFHIGHLIGHT_WHISPER;
        align = textDir;
        leftMargin = 0;
        kerning = true;
    };
    _local3 = FontFormat_Heading;
    with (_local3) {
        font = fontName;
        size = (sizeMod + 30);
        color = CLR_SFORANGE;
        align = textDir;
        leftMargin = 0;
        kerning = true;
    };
    _local3 = FontFormat_ScreenTitle;
    with (_local3) {
        font = fontName;
        size = (sizeMod + 34);
        color = CLR_SFORANGE;
        align = textDir;
        leftMargin = 0;
        kerning = true;
    };
    _local3 = FontFormat_Popup;
    with (_local3) {
        font = fontName;
        size = (sizeMod + 20);
        color = CLR_SFORANGE;
        align = textDir;
        leftMargin = 0;
        kerning = true;
    };
    _local3 = FontFormat_PopupCompare;
    with (_local3) {
        font = fontName;
        size = (sizeMod + 20);
        color = CLR_OFFLINE;
        align = textDir;
        leftMargin = 0;
        kerning = true;
    };
    _local3 = FontFormat_PopupCompareSum;
    with (_local3) {
        font = fontName;
        size = (sizeMod + 20);
        color = CLR_ONLINE;
        align = textDir;
        leftMargin = 0;
        kerning = true;
    };
    _local3 = FontFormat_PopupCompareBetter;
    with (_local3) {
        font = fontName;
        size = (sizeMod + 20);
        color = CLR_SYSMSG_GREEN;
        align = textDir;
        leftMargin = 0;
        kerning = true;
    };
    _local3 = FontFormat_PopupCompareWorse;
    with (_local3) {
        font = fontName;
        size = (sizeMod + 20);
        color = CLR_SYSMSG_RED;
        align = textDir;
        leftMargin = 0;
        kerning = true;
    };
    _local3 = FontFormat_PopupCompareBetterHL;
    with (_local3) {
        font = fontName;
        size = (sizeMod + 20);
        color = CLR_SYSMSG_GREEN_HIGHLIGHT;
        align = textDir;
        leftMargin = 0;
        kerning = true;
    };
    _local3 = FontFormat_PopupCompareWorseHL;
    with (_local3) {
        font = fontName;
        size = (sizeMod + 20);
        color = CLR_SYSMSG_RED_HIGHLIGHT;
        align = textDir;
        leftMargin = 0;
        kerning = true;
    };
    _local3 = FontFormat_EpicItemQuote;
    with (_local3) {
        font = fontName;
        size = (sizeMod + 20);
        color = CLR_EPICITEMQUOTE;
        align = textDir;
        leftMargin = 0;
        kerning = true;
    };
    _local3 = FontFormat_ItemEnchantment;
    with (_local3) {
        font = fontName;
        size = (sizeMod + 20);
        color = CLR_ITEMENCHANTMENT;
        align = textDir;
        leftMargin = 0;
        kerning = true;
    };
    _local3 = FontFormat_LogoutLink;
    with (_local3) {
        font = fontName;
        size = (sizeMod + 22);
        color = CLR_SFORANGE;
        align = textDir;
        leftMargin = 0;
        kerning = true;
    };
    _local3 = FontFormat_LogoutLinkHighLight;
    with (_local3) {
        font = fontName;
        size = (sizeMod + 22);
        color = CLR_SFHIGHLIGHT;
        align = textDir;
        leftMargin = 0;
        kerning = true;
    };
    _local3 = FontFormat_HallListHeading;
    with (_local3) {
        font = fontName;
        size = (sizeMod + 19);
        color = CLR_SFORANGE;
        align = textDir;
        leftMargin = 0;
        kerning = true;
    };
    _local3 = FontFormat_HallListText;
    with (_local3) {
        font = fontName;
        size = (sizeMod + 19);
        color = CLR_SFORANGE;
        align = textDir;
        leftMargin = 0;
        kerning = true;
    };
    _local3 = FontFormat_GuildHallNoAttack;
    with (_local3) {
        font = fontName;
        size = (sizeMod + 19);
        color = CLR_NOATTACK;
        align = textDir;
        leftMargin = 0;
        kerning = true;
    };
    _local3 = FontFormat_HallListHighLight;
    with (_local3) {
        font = fontName;
        size = (sizeMod + 19);
        color = CLR_SFHIGHLIGHT;
        align = textDir;
        leftMargin = 0;
        kerning = true;
    };
    _local3 = FontFormat_AttribBonus;
    with (_local3) {
        font = fontName;
        size = (sizeMod + 19);
        color = CLR_ATTRIBBONUS;
        align = textDir;
        leftMargin = 0;
        kerning = true;
    };
    _local3 = FontFormat_AttribTemp;
    with (_local3) {
        font = fontName;
        size = (sizeMod + 19);
        color = CLR_SYSMSG_GREEN;
        align = textDir;
        leftMargin = 0;
        kerning = true;
    };
    _local3 = FontFormat_Attrib;
    with (_local3) {
        font = fontName;
        size = (sizeMod + 19);
        color = CLR_SFORANGE;
        align = textDir;
        leftMargin = 0;
        kerning = true;
    };
    _local3 = FontFormat_PayIcon;
    with (_local3) {
        font = fontName;
        size = (sizeMod + 19);
        color = CLR_WHITE;
        align = textDir;
        leftMargin = 0;
        kerning = true;
    };
    _local3 = FontFormat_PostListHeading;
    with (_local3) {
        font = fontName;
        size = (sizeMod + 26);
        color = CLR_SFORANGE;
        align = textDir;
        bold = true;
        leftMargin = 0;
        kerning = true;
    };
    _local3 = FontFormat_PostListText;
    with (_local3) {
        font = fontName;
        size = (sizeMod + 24);
        color = CLR_SFORANGE;
        align = textDir;
        leftMargin = 0;
        kerning = true;
    };
    _local3 = FontFormat_PostListTextSys;
    with (_local3) {
        font = fontName;
        size = (sizeMod + 24);
        color = CLR_SYSMSG;
        align = textDir;
        leftMargin = 0;
        kerning = true;
    };
    _local3 = FontFormat_GuildListText;
    with (_local3) {
        font = fontName;
        size = (sizeMod + 24);
        color = CLR_OFFLINE;
        align = textDir;
        leftMargin = 0;
        kerning = true;
    };
    _local3 = FontFormat_GuildListTextOnline;
    with (_local3) {
        font = fontName;
        size = (sizeMod + 24);
        color = CLR_ONLINE;
        align = textDir;
        leftMargin = 0;
        kerning = true;
    };
    _local3 = FontFormat_GuildListTextAttackError;
    with (_local3) {
        font = fontName;
        size = (sizeMod + 24);
        color = CLR_ATTACK_ERROR_OFFLINE;
        align = textDir;
        leftMargin = 0;
        kerning = true;
    };
    _local3 = FontFormat_GuildListTextAttackErrorOnline;
    with (_local3) {
        font = fontName;
        size = (sizeMod + 24);
        color = CLR_ATTACK_ERROR_ONLINE;
        align = textDir;
        leftMargin = 0;
        kerning = true;
    };
    _local3 = FontFormat_GuildListTextAttackErrorOnlinePopup;
    with (_local3) {
        font = fontName;
        size = (sizeMod + 20);
        color = CLR_ATTACK_ERROR_ONLINE;
        align = textDir;
        leftMargin = 0;
        kerning = true;
    };
    _local3 = FontFormat_GuildListTextAttackOk;
    with (_local3) {
        font = fontName;
        size = (sizeMod + 24);
        color = CLR_ATTACK_OK;
        align = textDir;
        leftMargin = 0;
        kerning = true;
    };
    _local3 = FontFormat_GuildListTextAttackOkPopup;
    with (_local3) {
        font = fontName;
        size = (sizeMod + 20);
        color = CLR_ATTACK_OK;
        align = textDir;
        leftMargin = 0;
        kerning = true;
    };
    _local3 = FontFormat_PostListHighLight;
    with (_local3) {
        font = fontName;
        size = (sizeMod + 24);
        color = CLR_SFHIGHLIGHT;
        align = textDir;
        leftMargin = 0;
        kerning = true;
    };
    _local3 = FontFormat_PostListHighLightSys;
    with (_local3) {
        font = fontName;
        size = (sizeMod + 24);
        color = CLR_SYSMSGHIGHLIGHT;
        align = textDir;
        leftMargin = 0;
        kerning = true;
    };
    _local3 = FontFormat_PostListTextSysRed;
    with (_local3) {
        font = fontName;
        size = (sizeMod + 24);
        color = CLR_SYSMSG_RED;
        align = textDir;
        leftMargin = 0;
        kerning = true;
    };
    _local3 = FontFormat_PostListHighLightSysRed;
    with (_local3) {
        font = fontName;
        size = (sizeMod + 24);
        color = CLR_SYSMSG_RED_HIGHLIGHT;
        align = textDir;
        leftMargin = 0;
        kerning = true;
    };
    _local3 = FontFormat_PostListTextSysGreen;
    with (_local3) {
        font = fontName;
        size = (sizeMod + 24);
        color = CLR_SYSMSG_GREEN;
        align = textDir;
        leftMargin = 0;
        kerning = true;
    };
    _local3 = FontFormat_PostListHighLightSysGreen;
    with (_local3) {
        font = fontName;
        size = (sizeMod + 24);
        color = CLR_SYSMSG_GREEN_HIGHLIGHT;
        align = textDir;
        leftMargin = 0;
        kerning = true;
    };
    _local3 = FontFormat_QuestBar;
    with (_local3) {
        font = fontName;
        size = (sizeMod + 24);
        color = CLR_WHITE;
        align = textDir;
        leftMargin = 0;
        kerning = true;
    };
    _local3 = FontFormat_TimeBar;
    with (_local3) {
        font = fontName;
        size = (sizeMod + 24);
        color = CLR_WHITE;
        align = textDir;
        leftMargin = 0;
        kerning = true;
    };
    _local3 = FontFormat_LifeBar;
    with (_local3) {
        font = fontName;
        size = (sizeMod + 20);
        color = CLR_WHITE;
        align = textDir;
        leftMargin = 0;
        kerning = true;
    };
    _local3 = FontFormat_Damage;
    with (_local3) {
        font = fontName;
        size = (sizeMod + 30);
        color = CLR_WHITE;
        align = textDir;
        leftMargin = 0;
        kerning = true;
    };
    _local3 = FontFormat_CriticalDamage;
    with (_local3) {
        font = fontName;
        size = (sizeMod + 34);
        color = CLR_RED;
        align = textDir;
        leftMargin = 0;
        kerning = true;
    };
    _local3 = FontFormat_CatapultDamage;
    with (_local3) {
        font = fontName;
        size = (sizeMod + 38);
        color = CLR_ATTACK_ERROR_ONLINE_HALF;
        align = textDir;
        leftMargin = 0;
        kerning = true;
    };
}



public function ShowEmailNagScreen(valMode:int=-1){
    var doShowEmailNagScreen:* = null;
    var valMode:int = valMode;
    doShowEmailNagScreen = function (){
        RemoveAll();
        actor[LBL_EMAIL_RESEND].htmlText = txt[TXT_EMAIL_RESEND];
        Arabize(LBL_EMAIL_RESEND);
        var _local2 = actor[LBL_WINDOW_TITLE];
        with (_local2) {
            text = txt[(((valMode == 1)) ? TXT_VALIDATE_OK_TITLE : (((valMode == 2)) ? TXT_VALIDATE_ERR_TITLE : (((valMode == 3)) ? TXT_VALIDATE_UNN_TITLE : TXT_EMAIL_NAG_TITLE)))];
            x = ((IF_WIN_X + IF_WIN_WELCOME_X) - int((textWidth / 2)));
        };
        _local2 = actor[LBL_EMAIL_NAG];
        with (_local2) {
            htmlText = txt[(((valMode == 1)) ? TXT_VALIDATE_OK : (((valMode == 2)) ? TXT_VALIDATE_ERR : (((valMode == 3)) ? TXT_VALIDATE_UNN : TXT_EMAIL_NAG)))];
        };
        Arabize(LBL_EMAIL_NAG);
        Add(SCREEN_EMAIL_NAG);
        if (valMode == -1){
            Add(EMAIL_RESEND);
        };
    };
    Load(SCREEN_EMAIL_NAG);
    WhenLoaded(doShowEmailNagScreen);
}


public function ShowDisconnectScreen(){
    var ReconnectTimer:* = null;
    var TryReconnect:* = null;
    TryReconnect = function (evt:TimerEvent){
        ReconnectTimer.delay = (param_reconnect * intervalMultiplierReconnect);
        if (OnStage(LBL_DISCONNECTED)){
            RequestLogin();
        } else {
            ReconnectTimer.removeEventListener(TimerEvent.TIMER, TryReconnect);
        };
    };
    if (OnStage(LBL_DISCONNECTED)){
        return;
    };
    RemoveAll();
    Remove(IF_LOGOUT);
    Add(SCREEN_DISCONNECTED);
    sessionId = "";
    ReconnectTimer = new Timer(param_reconnect);
    ReconnectTimer.addEventListener(TimerEvent.TIMER, TryReconnect);
    ReconnectTimer.start();
}

public function RemoveIllegalChars(inpStr:String):String{
    var LegalChars:String;
    var i:int;
    var j:int;
    var thisChar:String;
    var outStr:String;
    var pass:Boolean;
    if (txt[TXT_LEGALCHARS] == ""){
        return (inpStr);
    };
    LegalChars = txt[TXT_LEGALCHARS];
    thisChar = "";
    outStr = "";
    pass = false;
    i = 0;
    while (i < inpStr.length) {
        thisChar = inpStr.substr(i, 1);
        pass = false;
        j = 0;
        while (j < LegalChars.length) {
            if ((((thisChar.charCodeAt() == 13)) or ((thisChar.charCodeAt() == 10)))){
                pass = true;
                break;
            };
            if (thisChar == LegalChars.substr(j, 1)){
                pass = true;
                break;
            };
            j++;
        };
        if (pass){
            outStr = (outStr + thisChar);
        };
        i++;
    };
    return (outStr);
}

public function SemiStrip(inpStr:String):String{
    var i:int;
    var outStr:String;
    outStr = "";
    i = 0;
    while (i < inpStr.length) {
        if (inpStr.charAt(i) == String.fromCharCode(13)){
            outStr = (outStr + "#");
        } else {
            if (inpStr.charAt(i) == ";"){
                outStr = (outStr + ",");
            } else {
                if (inpStr.charAt(i) == "§"){
                    outStr = (outStr + "$");
                } else {
                    outStr = (outStr + inpStr.charAt(i));
                };
            };
        };
        i++;
    };
    return (outStr);
}

public function resolveBreaks(inpStr:String):String{
    var i:int;
    var outStr:String;
    outStr = "";
    i = 0;
    while (i < inpStr.length) {
        if (inpStr.charAt(i) == "#"){
            outStr = (outStr + String.fromCharCode(13));
        } else {
            outStr = (outStr + inpStr.charAt(i));
        };
        i++;
    };
    return (outStr);
}

public function PostBtnHandler(evt:MouseEvent=undefined, actorID:int=0){
    var par:* = null;
    var GuildMsg:* = false;
    var thisRecipient:* = null;
    var recipients:* = null;
    var evt:* = evt;
    var actorID:int = actorID;
    Remove(LBL_ERROR);
    GuildMsg = false;
    if (evt){
        actorID = GetActorID(evt.target);
    };
    thisRecipient = "";
    recipients = new Array();
    switch (actorID){
        case POST_SEND:
            lastMessageTarget = "";
            if (!OnStage(INP_POST_ADDRESS)){
                GuildMsg = true;
            } else {
                lastMessageTarget = actor[INP_POST_ADDRESS].getChildAt(1).text;
            };
            if (actor[INP_POST_TEXT].getChildAt(1).text.indexOf(actor[INP_LOGIN_PASSWORD].getChildAt(1).text) != -1){
                ErrorMessage(((txt[TXT_ERROR_COMPROMISED_ACCOUNT]) ? txt[TXT_ERROR_COMPROMISED_ACCOUNT] : "You should never give your password away."));
            } else {
                if (actor[INP_POST_ADDRESS].getChildAt(1).text == txt[TXT_EMPFAENGER]){
                    ErrorMessage(txt[TXT_ERROR_RECIPIENT_NOT_FOUND]);
                } else {
                    thisRecipient = actor[INP_POST_ADDRESS].getChildAt(1).text;
                    if (thisRecipient.indexOf(",") != -1){
                        recipients = thisRecipient.split(",");
                    } else {
                        recipients = [thisRecipient];
                    };
                    while (recipients.length > 0) {
                        thisRecipient = recipients.shift();
                        while (thisRecipient.substr(0, 1) == " ") {
                            thisRecipient = thisRecipient.substr(1);
                        };
                        while (thisRecipient.substr((thisRecipient.length - 1), 1) == " ") {
                            thisRecipient = thisRecipient.substr(0, (thisRecipient.length - 1));
                        };
                        SendAction(((GuildMsg) ? ACT_POST_SEND_GUILD : ACT_POST_SEND), RemoveIllegalChars(SemiStrip(thisRecipient)), RemoveIllegalChars(SemiStrip(actor[INP_POST_SUBJECT].getChildAt(1).text.split("/").join(""))), RemoveIllegalChars(SemiStrip(actor[INP_POST_TEXT].getChildAt(1).text)));
                    };
                };
            };
            break;
        case POST_UP:
            if (PostScroll > 1){
                oldSel = -1;
                PostScroll = (PostScroll - 15);
                if (PostScroll < 1){
                    PostScroll = 1;
                };
                SendAction(ACT_SCREEN_POST, PostScroll);
            };
            break;
        case POST_DOWN:
            if (PostScrollDown){
                PostScroll = (PostScroll + 15);
                PostScrollDown = false;
                if (PostScroll > 86){
                    PostScroll = 86;
                };
                if (PostScroll < 1){
                    PostScroll = 1;
                };
                SendAction(ACT_SCREEN_POST, PostScroll);
            };
            break;
        case POST_READ:
            if (textDir == "right"){
                MakeRightTextArea(INP_POST_ADDRESS, 1);
                MakeRightTextArea(INP_POST_SUBJECT, 1);
                MakeRightTextArea(INP_POST_TEXT, 1);
            };
            if (PostSel > 0){
                SendAction(ACT_POST_READ, ((PostSel + PostScroll) - 1));
            };
            break;
        case POST_READ_NEXT:
            PostSel++;
            if (PostSel > 15){
                PostScroll = (PostScroll + 1);
                PostSel = 15;
            };
            SendAction(ACT_POST_READ, ((PostSel + PostScroll) - 1));
            break;
        case POST_READ_PREV:
            PostSel--;
            if (PostSel < 1){
                PostScroll = (PostScroll - 1);
                PostSel = 1;
            };
            SendAction(ACT_POST_READ, ((PostSel + PostScroll) - 1));
            break;
        case POST_DELETE:
        case POST_DELETEREAD:
            if (PostSel > 0){
                SendAction(ACT_POST_DELETE, ((PostSel + PostScroll) - 1));
                if (int(Savegame[SG_MSG_COUNT]) > 0){
                    Savegame[SG_MSG_COUNT] = String((int(Savegame[SG_MSG_COUNT]) - 1));
                };
            };
            break;
        case POST_FLUSH:
            var _local4 = actor[LBL_WINDOW_TITLE];
            with (_local4) {
                text = txt[TXT_POST_FLUSH_TEXT];
                x = ((IF_WIN_X + IF_WIN_WELCOME_X) - int((textWidth / 2)));
            };
            Add(POST_FLUSHMSG);
            break;
        case POST_FLUSH_CANCEL:
            Remove(POST_FLUSHMSG);
            Add(IF_EXIT);
            break;
        case POST_FLUSH_OK:
            Remove(POST_FLUSHMSG);
            SendAction(ACT_POST_DELETE, -1);
            break;
        case POST_PROFILE:
            if (ReplyAddress != ""){
                selName = ReplyAddress;
                SendAction(ACT_REQUEST_CHAR, ReplyAddress);
            };
            break;
        case POST_WRITE:
            actor[INP_POST_ADDRESS].getChildAt(1).type = TextFieldType.INPUT;
            actor[INP_POST_SUBJECT].getChildAt(1).type = TextFieldType.INPUT;
            actor[INP_POST_TEXT].getChildAt(1).type = TextFieldType.INPUT;
            Remove(POST_LIST);
            Add(POST_WRITE);
            if (Gilde != ""){
                if (textDir == "right"){
                    actor[POST_GUILD].x = (POST_INP_X + 5);
                } else {
                    actor[POST_GUILD].x = (((POST_INP_X + actor[INP_POST_ADDRESS].width) - actor[POST_GUILD].width) - 5);
                };
                Show(POST_GUILD);
            } else {
                Hide(POST_GUILD);
            };
            actor[INP_POST_ADDRESS].getChildAt(1).text = txt[TXT_EMPFAENGER];
            actor[INP_POST_SUBJECT].getChildAt(1).text = txt[TXT_BETREFF];
            actor[INP_POST_TEXT].getChildAt(1).text = txt[TXT_NACHRICHT];
            if (textDir == "right"){
                MakeRightTextArea(INP_POST_ADDRESS, 1);
                MakeRightTextArea(INP_POST_SUBJECT, 1);
                MakeRightTextArea(INP_POST_TEXT, 1);
            };
            break;
        case POST_CANCEL:
        case POST_RETURN:
            if (PostReturnToPlayer != ""){
                SendAction(ACT_REQUEST_CHAR, PostReturnToPlayer);
            } else {
                Remove(POST_WRITE);
                Remove(POST_READ);
                Remove(POST_ACCEPT);
                Remove(POST_REPLY);
                Add(POST_LIST);
            };
            break;
        case POST_ACCEPT:
            if (InviteGildenID > 0){
                SendAction(ACT_GUILD_JOIN, actor[INP_NAME].getChildAt(1).text, InviteGildenID, MD5(actor[INP_LOGIN_PASSWORD].getChildAt(1).text));
            };
            break;
        case POST_REPLY:
            if (ReplyAddress != ""){
                actor[INP_POST_ADDRESS].getChildAt(1).type = TextFieldType.INPUT;
                actor[INP_POST_SUBJECT].getChildAt(1).type = TextFieldType.INPUT;
                actor[INP_POST_TEXT].getChildAt(1).type = TextFieldType.INPUT;
                Remove(POST_READ);
                Remove(POST_REPLY);
                Remove(POST_FORWARD);
                if (Gilde != ""){
                    if (textDir == "right"){
                        actor[POST_GUILD].x = (POST_INP_X + 5);
                    } else {
                        actor[POST_GUILD].x = (((POST_INP_X + actor[INP_POST_ADDRESS].width) - actor[POST_GUILD].width) - 5);
                    };
                    Show(POST_GUILD);
                } else {
                    Hide(POST_GUILD);
                };
                Add(POST_WRITE);
                Show(POST_GUILD);
                actor[INP_POST_ADDRESS].getChildAt(1).text = ReplyAddress;
                actor[INP_POST_TEXT].getChildAt(1).text = txt[TXT_NACHRICHT];
                if (textDir == "right"){
                    if (actor[INP_POST_SUBJECT].getChildAt(1).text.indexOf(txt[TXT_RE]) == -1){
                        actor[INP_POST_SUBJECT].getChildAt(1).text = ((ReplySubject + " ") + txt[TXT_RE]);
                    };
                    MakeRightTextArea(INP_POST_ADDRESS, 1);
                    MakeRightTextArea(INP_POST_SUBJECT, 1);
                    MakeRightTextArea(INP_POST_TEXT, 1);
                } else {
                    if (actor[INP_POST_SUBJECT].getChildAt(1).text.indexOf(txt[TXT_RE]) == -1){
                        actor[INP_POST_SUBJECT].getChildAt(1).text = ((txt[TXT_RE] + " ") + ReplySubject);
                    };
                };
            };
            break;
        case POST_FORWARD:
            if (forwardText != ""){
                actor[INP_POST_ADDRESS].getChildAt(1).type = TextFieldType.INPUT;
                actor[INP_POST_SUBJECT].getChildAt(1).type = TextFieldType.INPUT;
                actor[INP_POST_TEXT].getChildAt(1).type = TextFieldType.INPUT;
                Remove(POST_READ);
                Remove(POST_REPLY);
                Remove(POST_FORWARD);
                if (Gilde != ""){
                    if (textDir == "right"){
                        actor[POST_GUILD].x = (POST_INP_X + 5);
                    } else {
                        actor[POST_GUILD].x = (((POST_INP_X + actor[INP_POST_ADDRESS].width) - actor[POST_GUILD].width) - 5);
                    };
                    Show(POST_GUILD);
                } else {
                    Hide(POST_GUILD);
                };
                Add(POST_WRITE);
                Show(POST_GUILD);
                stage.focus = actor[INP_POST_ADDRESS].getChildAt(1);
                actor[INP_POST_ADDRESS].getChildAt(1).text = "";
                actor[INP_POST_TEXT].getChildAt(1).text = txt[(TXT_POST_FORWARD + 2)].split("%1").join(ReplyAddress).split("%2").join(forwardText).split("#").join(String.fromCharCode(13));
                if (textDir == "right"){
                    if (actor[INP_POST_SUBJECT].getChildAt(1).text.indexOf(txt[(TXT_POST_FORWARD + 1)]) == -1){
                        actor[INP_POST_SUBJECT].getChildAt(1).text = ((ReplySubject + " ") + txt[(TXT_POST_FORWARD + 1)]);
                    };
                    MakeRightTextArea(INP_POST_ADDRESS, 1);
                    MakeRightTextArea(INP_POST_SUBJECT, 1);
                    MakeRightTextArea(INP_POST_TEXT, 1);
                } else {
                    if (actor[INP_POST_SUBJECT].getChildAt(1).text.indexOf(txt[(TXT_POST_FORWARD + 1)]) == -1){
                        actor[INP_POST_SUBJECT].getChildAt(1).text = ((txt[(TXT_POST_FORWARD + 1)] + " ") + ReplySubject);
                    };
                };
            };
            break;
        case POST_VIEWFIGHT:
            par = tmpBattleInfo.split("#");
            PostFightMode = true;
            ShowFightScreen(par[0].split("/"), par[1].split("/"), (par[6] == "1"), par[2].split("/"), (par[5] == "2"), ((par[3] + "/") + par[4]).split("/"), int(par[7]), int(par[8]), (par[5] == "3"), true);
            break;
        default:
            if (PostSel > 0){
                SendAction(ACT_POST_READ, ((PostSel + PostScroll) - 1));
            };
    };
}

public function ShowAlbumContent(evt:Event=undefined){
    var i:* = 0;
    var entryText:* = null;
    var hintText:* = null;
    var hunterOffs:* = 0;
    var actorID:* = 0;
    var contentCount:* = 0;
    var catMax:* = null;
    var catCount:* = null;
    var evt:* = evt;
    var SetAlbumItems:* = function (aOffs:int, itmTyp:int, itmPic:int, itmClass:int){
        var itemSet:Array;
        var anyItem:Boolean;
        var j:int;
        itemSet = new Array();
        anyItem = false;
        j = 0;
        while (j < 5) {
            itemSet[j] = AlbumContent[(aOffs + j)];
            if (itemSet[j] == 1){
                anyItem = true;
            };
            j++;
        };
        if (anyItem){
            entryText = GetItemName(itmTyp, itmPic, itmClass);
            if (itmClass > 0){
                itmClass--;
            };
            SetCnt((ALBUM_WEAPON_1 + i), GetItemID(itmTyp, itmPic, 0, itmClass));
            SetCnt((ALBUM_WEAPON_2 + i), GetItemID(itmTyp, itmPic, 1, itmClass));
            SetCnt((ALBUM_WEAPON_3 + i), GetItemID(itmTyp, itmPic, 2, itmClass));
            SetCnt((ALBUM_WEAPON_4 + i), GetItemID(itmTyp, itmPic, 3, itmClass));
            SetCnt((ALBUM_WEAPON_5 + i), GetItemID(itmTyp, itmPic, 4, itmClass));
            actor[(ALBUM_WEAPON_1 + i)].alpha = ((itemSet[0]) ? 1 : 0.3);
            actor[(ALBUM_WEAPON_2 + i)].alpha = ((itemSet[1]) ? 1 : 0.3);
            actor[(ALBUM_WEAPON_3 + i)].alpha = ((itemSet[2]) ? 1 : 0.3);
            actor[(ALBUM_WEAPON_4 + i)].alpha = ((itemSet[3]) ? 1 : 0.3);
            actor[(ALBUM_WEAPON_5 + i)].alpha = ((itemSet[4]) ? 1 : 0.3);
            if (showAlbumOffset){
                EnablePopup((ALBUM_WEAPON_1 + i), String((aOffs + 0)));
                EnablePopup((ALBUM_WEAPON_2 + i), String((aOffs + 1)));
                EnablePopup((ALBUM_WEAPON_3 + i), String((aOffs + 2)));
                EnablePopup((ALBUM_WEAPON_4 + i), String((aOffs + 3)));
                EnablePopup((ALBUM_WEAPON_5 + i), String((aOffs + 4)));
            } else {
                EnablePopup((ALBUM_WEAPON_1 + i));
                EnablePopup((ALBUM_WEAPON_2 + i));
                EnablePopup((ALBUM_WEAPON_3 + i));
                EnablePopup((ALBUM_WEAPON_4 + i));
                EnablePopup((ALBUM_WEAPON_5 + i));
                if ((((itmTyp == 1)) and ((itmClass > 1)))){
                };
            };
        };
        if (showAlbumOffset){
            EnablePopup((LBL_ALBUM_HEADING + i), ((String(aOffs) + " - ") + String((aOffs + 4))));
        };
    };
    var SetAlbumEpic:* = function (aOffs:int, itmTyp:int, itmPic:int, itmClass:int){
        if (AlbumContent[aOffs] == 1){
            entryText = GetItemName(itmTyp, itmPic, itmClass);
            if (entryText.indexOf("|") != -1){
                hintText = entryText.split("|")[1].split("#").join(String.fromCharCode(13));
                entryText = entryText.split("|")[0];
            };
            if (itmClass > 0){
                itmClass--;
            };
            SetCnt((ALBUM_WEAPON_EPIC + i), GetItemID(itmTyp, itmPic, 0, itmClass));
            if (showAlbumOffset){
                EnablePopup((ALBUM_WEAPON_EPIC + i), String(aOffs));
            } else {
                EnablePopup((ALBUM_WEAPON_EPIC + i));
            };
        };
        if (showAlbumOffset){
            EnablePopup((LBL_ALBUM_HEADING + i), String(aOffs));
        };
    };
    entryText = "";
    hintText = "";
    hunterOffs = 0;
    AlbumClear();
    actorID = 0;
    if (evt){
        actorID = GetActorID(evt.target);
    };
    if (actorID == ALBUM_PREV){
        albumPage--;
    };
    if (actorID == ALBUM_NEXT){
        albumPage++;
    };
    if ((((actorID >= ALBUM_CAT_OUT)) and ((actorID <= (ALBUM_CAT_OUT + 4))))){
        albumCat = (actorID - ALBUM_CAT_OUT);
        albumPage = 0;
    };
    Hide(ALBUM_CAT_IN);
    Show((ALBUM_CAT_IN + albumCat));
    contentCount = 0;
    catMax = [252, 246, 506, 348, 348];
    catCount = [0, 0, 0, 0, 0];
    i = 0;
    while (i < AlbumContent.length) {
        if (AlbumContent[i] == 1){
            if (i < 300){
                var _local3 = catCount;
                var _local4:int;
                var _local5 = (_local3[_local4] + 1);
                _local3[_local4] = _local5;
            } else {
                if (i < 792){
                    _local3 = catCount;
                    _local4 = 1;
                    _local5 = (_local3[_local4] + 1);
                    _local3[_local4] = _local5;
                } else {
                    if (i < 1804){
                        _local3 = catCount;
                        _local4 = 2;
                        _local5 = (_local3[_local4] + 1);
                        _local3[_local4] = _local5;
                    } else {
                        if (i < 2500){
                            _local3 = catCount;
                            _local4 = 3;
                            _local5 = (_local3[_local4] + 1);
                            _local3[_local4] = _local5;
                        } else {
                            _local3 = catCount;
                            _local4 = 4;
                            _local5 = (_local3[_local4] + 1);
                            _local3[_local4] = _local5;
                        };
                    };
                };
            };
            contentCount = (contentCount + 1);
        };
        i = (i + 1);
    };
    if (contentCount > contentMax){
        contentCount = contentMax;
    };
    i = 0;
    while (i < 5) {
        if (catCount[i] > catMax[i]){
            catCount[i] = catMax[i];
        };
        i = (i + 1);
    };
    actor[LBL_ALBUM_COLLECTION].text = txt[TXT_COLLECTION].split("%1").join(String(contentCount)).split("%2").join(String(contentMax)).split("%3").join(String((Math.round(((contentCount / contentMax) * 10000)) / 100))).split("#").join(String.fromCharCode(13));
    i = 0;
    while (i < 5) {
        EnablePopup((ALBUM_CAT_IN + i), (((((((txt[((TXT_COLLECTION + 2) + i)] + String.fromCharCode(13)) + catCount[i]) + " / ") + catMax[i]) + " = ") + String((Math.round(((catCount[i] / catMax[i]) * 10000)) / 100))) + "%"));
        EnablePopup((ALBUM_CAT_OUT + i), (((((((txt[((TXT_COLLECTION + 2) + i)] + String.fromCharCode(13)) + catCount[i]) + " / ") + catMax[i]) + " = ") + String((Math.round(((catCount[i] / catMax[i]) * 10000)) / 100))) + "%"));
        i = (i + 1);
    };
    EnablePopup(LBL_ALBUM_COLLECTION, txt[(TXT_COLLECTION + 7)]);
    i = 0;
    while (i < 4) {
        hintText = "";
        EnablePopup((LBL_ALBUM_HEADING + i));
        EnablePopup((ALBUM_MONSTER_FRAME + i));
        if (albumCat == 0){
            Show((ALBUM_MONSTER_FRAME + i));
            if (albumPage > 62){
                albumPage = 0;
            };
            if (albumPage < 0){
                albumPage = 62;
            };
            if (AlbumContent[((albumPage * 4) + i)] == 1){
                SetCnt((ALBUM_MONSTER + i), ((OPPMONSTER + (albumPage * 4)) + i));
                if (((albumPage * 4) + i) >= 220){
                    entryText = txt[(((TXT_NEW_MONSTER_NAMES + (albumPage * 4)) + i) - 220)];
                } else {
                    entryText = txt[((TXT_MONSTER_NAME + (albumPage * 4)) + i)];
                };
            } else {
                SetCnt((ALBUM_MONSTER + i), UNKNOWN_ENEMY);
                entryText = txt[TXT_UNKNOWN];
            };
            if (showAlbumOffset){
                EnablePopup((ALBUM_MONSTER_FRAME + i), String(((albumPage * 4) + i)));
            };
            if (showAlbumOffset){
                EnablePopup((LBL_ALBUM_HEADING + i), String(((albumPage * 4) + i)));
            };
        } else {
            if (albumCat == 1){
                entryText = txt[TXT_UNKNOWN];
                if (albumPage > 25){
                    albumPage = 0;
                };
                if (albumPage < 0){
                    albumPage = 25;
                };
                if (albumPage <= 5){
                    if ((((albumPage < 5)) or ((i <= 0)))){
                        SetAlbumItems(((300 + (albumPage * 20)) + (i * 5)), 8, ((1 + (albumPage * 4)) + i), 0);
                    } else {
                        entryText = "";
                    };
                } else {
                    if (albumPage <= 7){
                        SetAlbumEpic(((510 + ((albumPage - 6) * 4)) + i), 8, ((50 + ((albumPage - 6) * 4)) + i), 0);
                    } else {
                        if (albumPage <= 11){
                            SetAlbumItems(((526 + ((albumPage - 8) * 20)) + (i * 5)), 9, ((1 + ((albumPage - 8) * 4)) + i), 0);
                        } else {
                            if (albumPage <= 13){
                                SetAlbumEpic(((686 + ((albumPage - 12) * 4)) + i), 9, ((50 + ((albumPage - 12) * 4)) + i), 0);
                            } else {
                                if (albumPage <= 23){
                                    if ((((albumPage < 23)) or ((i <= 0)))){
                                        SetAlbumEpic(((702 + ((albumPage - 14) * 4)) + i), 10, ((1 + ((albumPage - 14) * 4)) + i), 0);
                                    } else {
                                        entryText = "";
                                    };
                                } else {
                                    if (albumPage <= 25){
                                        SetAlbumEpic((((760 + 16) + ((albumPage - 24) * 4)) + i), 10, ((50 + ((albumPage - 24) * 4)) + i), 0);
                                    };
                                };
                            };
                        };
                    };
                };
            } else {
                if (albumCat == 2){
                    entryText = txt[TXT_UNKNOWN];
                    if (albumPage > 39){
                        albumPage = 0;
                    };
                    if (albumPage < 0){
                        albumPage = 39;
                    };
                    if (albumPage <= 7){
                        if ((((albumPage < 7)) or ((i <= 1)))){
                            SetAlbumItems((((776 + 16) + (albumPage * 20)) + (i * 5)), 1, ((1 + (albumPage * 4)) + i), 1);
                        } else {
                            entryText = "";
                        };
                    } else {
                        if (albumPage <= 9){
                            SetAlbumEpic((((1076 + 16) + ((albumPage - 8) * 4)) + i), 1, ((50 + ((albumPage - 8) * 4)) + i), 1);
                        } else {
                            if (albumPage <= 12){
                                if ((((albumPage < 12)) or ((i <= 1)))){
                                    SetAlbumItems((((1092 + 16) + ((albumPage - 10) * 20)) + (i * 5)), 2, ((1 + ((albumPage - 10) * 4)) + i), 1);
                                } else {
                                    entryText = "";
                                };
                            } else {
                                if (albumPage <= 14){
                                    SetAlbumEpic((((1192 + 16) + ((albumPage - 13) * 4)) + i), 2, ((50 + ((albumPage - 13) * 4)) + i), 1);
                                } else {
                                    if (albumPage <= 17){
                                        if ((((albumPage < 17)) or ((i <= 1)))){
                                            SetAlbumItems((((1208 + 16) + ((albumPage - 15) * 20)) + (i * 5)), 3, ((1 + ((albumPage - 15) * 4)) + i), 1);
                                        } else {
                                            entryText = "";
                                        };
                                    } else {
                                        if (albumPage <= 19){
                                            SetAlbumEpic((((1308 + 16) + ((albumPage - 18) * 4)) + i), 3, ((50 + ((albumPage - 18) * 4)) + i), 1);
                                        } else {
                                            if (albumPage <= 22){
                                                if ((((albumPage < 22)) or ((i <= 1)))){
                                                    SetAlbumItems((((1324 + 16) + ((albumPage - 20) * 20)) + (i * 5)), 4, ((1 + ((albumPage - 20) * 4)) + i), 1);
                                                } else {
                                                    entryText = "";
                                                };
                                            } else {
                                                if (albumPage <= 24){
                                                    SetAlbumEpic((((1424 + 16) + ((albumPage - 23) * 4)) + i), 4, ((50 + ((albumPage - 23) * 4)) + i), 1);
                                                } else {
                                                    if (albumPage <= 27){
                                                        if ((((albumPage < 27)) or ((i <= 1)))){
                                                            SetAlbumItems((((1440 + 16) + ((albumPage - 25) * 20)) + (i * 5)), 5, ((1 + ((albumPage - 25) * 4)) + i), 1);
                                                        } else {
                                                            entryText = "";
                                                        };
                                                    } else {
                                                        if (albumPage <= 29){
                                                            SetAlbumEpic((((1540 + 16) + ((albumPage - 28) * 4)) + i), 5, ((50 + ((albumPage - 28) * 4)) + i), 1);
                                                        } else {
                                                            if (albumPage <= 32){
                                                                if ((((albumPage < 32)) or ((i <= 1)))){
                                                                    SetAlbumItems((((1556 + 16) + ((albumPage - 30) * 20)) + (i * 5)), 6, ((1 + ((albumPage - 30) * 4)) + i), 1);
                                                                } else {
                                                                    entryText = "";
                                                                };
                                                            } else {
                                                                if (albumPage <= 34){
                                                                    SetAlbumEpic((((1656 + 16) + ((albumPage - 33) * 4)) + i), 6, ((50 + ((albumPage - 33) * 4)) + i), 1);
                                                                } else {
                                                                    if (albumPage <= 37){
                                                                        if ((((albumPage < 37)) or ((i <= 1)))){
                                                                            SetAlbumItems((((1672 + 16) + ((albumPage - 35) * 20)) + (i * 5)), 7, ((1 + ((albumPage - 35) * 4)) + i), 1);
                                                                        } else {
                                                                            entryText = "";
                                                                        };
                                                                    } else {
                                                                        if (albumPage <= 39){
                                                                            SetAlbumEpic((((1772 + 16) + ((albumPage - 38) * 4)) + i), 7, ((50 + ((albumPage - 38) * 4)) + i), 1);
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                } else {
                    if ((((albumCat == 3)) or ((albumCat == 4)))){
                        entryText = txt[TXT_UNKNOWN];
                        if (albumPage > 29){
                            albumPage = 0;
                        };
                        if (albumPage < 0){
                            albumPage = 29;
                        };
                        hunterOffs = (((albumCat)==3) ? 0 : 696 + 16);
                        if (albumPage <= 2){
                            if ((((albumPage < 2)) or ((i <= 1)))){
                                SetAlbumItems((((1788 + hunterOffs) + (albumPage * 20)) + (i * 5)), 1, ((1 + (albumPage * 4)) + i), (albumCat - 1));
                            } else {
                                entryText = "";
                            };
                        } else {
                            if (albumPage <= 4){
                                SetAlbumEpic((((1888 + hunterOffs) + ((albumPage - 3) * 4)) + i), 1, ((50 + ((albumPage - 3) * 4)) + i), (albumCat - 1));
                            } else {
                                if (albumPage <= 7){
                                    if ((((albumPage < 7)) or ((i <= 1)))){
                                        SetAlbumItems((((1904 + hunterOffs) + ((albumPage - 5) * 20)) + (i * 5)), 3, ((1 + ((albumPage - 5) * 4)) + i), (albumCat - 1));
                                    } else {
                                        entryText = "";
                                    };
                                } else {
                                    if (albumPage <= 9){
                                        SetAlbumEpic((((2004 + hunterOffs) + ((albumPage - 8) * 4)) + i), 3, ((50 + ((albumPage - 8) * 4)) + i), (albumCat - 1));
                                    } else {
                                        if (albumPage <= 12){
                                            if ((((albumPage < 12)) or ((i <= 1)))){
                                                SetAlbumItems((((2020 + hunterOffs) + ((albumPage - 10) * 20)) + (i * 5)), 4, ((1 + ((albumPage - 10) * 4)) + i), (albumCat - 1));
                                            } else {
                                                entryText = "";
                                            };
                                        } else {
                                            if (albumPage <= 14){
                                                SetAlbumEpic((((2120 + hunterOffs) + ((albumPage - 13) * 4)) + i), 4, ((50 + ((albumPage - 13) * 4)) + i), (albumCat - 1));
                                            } else {
                                                if (albumPage <= 17){
                                                    if ((((albumPage < 17)) or ((i <= 1)))){
                                                        SetAlbumItems((((2136 + hunterOffs) + ((albumPage - 15) * 20)) + (i * 5)), 5, ((1 + ((albumPage - 15) * 4)) + i), (albumCat - 1));
                                                    } else {
                                                        entryText = "";
                                                    };
                                                } else {
                                                    if (albumPage <= 19){
                                                        SetAlbumEpic((((2236 + hunterOffs) + ((albumPage - 18) * 4)) + i), 5, ((50 + ((albumPage - 18) * 4)) + i), (albumCat - 1));
                                                    } else {
                                                        if (albumPage <= 22){
                                                            if ((((albumPage < 22)) or ((i <= 1)))){
                                                                SetAlbumItems((((2252 + hunterOffs) + ((albumPage - 20) * 20)) + (i * 5)), 6, ((1 + ((albumPage - 20) * 4)) + i), (albumCat - 1));
                                                            } else {
                                                                entryText = "";
                                                            };
                                                        } else {
                                                            if (albumPage <= 24){
                                                                SetAlbumEpic((((2352 + hunterOffs) + ((albumPage - 23) * 4)) + i), 6, ((50 + ((albumPage - 23) * 4)) + i), (albumCat - 1));
                                                            } else {
                                                                if (albumPage <= 27){
                                                                    if ((((albumPage < 27)) or ((i <= 1)))){
                                                                        SetAlbumItems((((2368 + hunterOffs) + ((albumPage - 25) * 20)) + (i * 5)), 7, ((1 + ((albumPage - 25) * 4)) + i), (albumCat - 1));
                                                                    } else {
                                                                        entryText = "";
                                                                    };
                                                                } else {
                                                                    if (albumPage <= 29){
                                                                        SetAlbumEpic((((2468 + hunterOffs) + ((albumPage - 28) * 4)) + i), 7, ((50 + ((albumPage - 28) * 4)) + i), (albumCat - 1));
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
        actor[LBL_ALBUM_PAGENUMBER_LEFT].text = String(((albumPage * 2) + 1));
        actor[LBL_ALBUM_PAGENUMBER_RIGHT].text = String(((albumPage * 2) + 2));
        actor[LBL_ALBUM_PAGENUMBER_RIGHT].x = (1205 - actor[LBL_ALBUM_PAGENUMBER_RIGHT].textWidth);
        actor[(LBL_ALBUM_HEADING + i)].text = entryText;
        actor[(LBL_ALBUM_HEADING + i)].x = (((i)<=1) ? 535 : 1005 - (actor[(LBL_ALBUM_HEADING + i)].textWidth / 2));
        actor[(LBL_ALBUM_HINT + i)].text = hintText;
        actor[(LBL_ALBUM_HINT + i)].x = (((i)<=1) ? 535 : 1005 - (actor[(LBL_ALBUM_HINT + i)].textWidth / 2));
        i = (i + 1);
    };
    if (((!((hintText == ""))) and (((actor[LBL_ALBUM_COLLECTION].x + actor[LBL_ALBUM_COLLECTION].textWidth) > (actor[LBL_ALBUM_HINT].x - 5))))){
        actor[LBL_ALBUM_COLLECTION].y = ((actor[LBL_ALBUM_HINT].y + actor[LBL_ALBUM_HINT].textHeight) + 5);
    } else {
        if ((actor[LBL_ALBUM_COLLECTION].x + actor[LBL_ALBUM_COLLECTION].textWidth) > (actor[LBL_ALBUM_HEADING].x - 5)){
            actor[LBL_ALBUM_COLLECTION].y = ((actor[LBL_ALBUM_HEADING].y + actor[LBL_ALBUM_HEADING].textHeight) + 5);
        } else {
            actor[LBL_ALBUM_COLLECTION].y = 135;
        };
    };
}

public function AlbumClear(){
    var i:int;
    i = 0;
    while (i < 4) {
        Hide((ALBUM_MONSTER_FRAME + i));
        SetCnt((ALBUM_MONSTER + i), C_EMPTY);
        SetCnt((ALBUM_WEAPON_1 + i), C_EMPTY);
        SetCnt((ALBUM_WEAPON_2 + i), C_EMPTY);
        SetCnt((ALBUM_WEAPON_3 + i), C_EMPTY);
        SetCnt((ALBUM_WEAPON_4 + i), C_EMPTY);
        SetCnt((ALBUM_WEAPON_5 + i), C_EMPTY);
        actor[(ALBUM_WEAPON_1 + i)].alpha = 1;
        actor[(ALBUM_WEAPON_2 + i)].alpha = 1;
        actor[(ALBUM_WEAPON_3 + i)].alpha = 1;
        actor[(ALBUM_WEAPON_4 + i)].alpha = 1;
        actor[(ALBUM_WEAPON_5 + i)].alpha = 1;
        SetCnt((ALBUM_WEAPON_EPIC + i), C_EMPTY);
        actor[(LBL_ALBUM_HEADING + i)].text = "";
        actor[(LBL_ALBUM_HINT + i)].text = "";
        i++;
    };
}

public function ShowScreenAlbum(){
    var i:* = 0;
    var DoShowScreenAlbum:* = null;
    DoShowScreenAlbum = function (){
        var i:int;
        i = 0;
        while (i < 4) {
            SetCnt((ALBUM_MONSTER_FRAME + i), FIGHT_CHAR_BORDER);
            i++;
        };
        ShowAlbumContent();
        RemoveAll();
        Add(SCREEN_ALBUM);
    };
    Load(FIGHT_CHAR_BORDER);
    Load(UNKNOWN_ENEMY);
    i = 0;
    while (i < 5) {
        Load((ALBUM_CAT_OUT + i));
        i = (i + 1);
    };
    WhenLoaded(DoShowScreenAlbum);
}

public function TowerBtnHandler(evt:Event){
    var i:int;
    switch (GetActorID(evt.target)){
        case PREV_COPYCAT:
            copyCatSel--;
            if (copyCatSel < 0){
                copyCatSel = 2;
            };
            DisplayInventory(towerSG, true, true, copyCatSel);
            break;
        case NEXT_COPYCAT:
            copyCatSel++;
            if (copyCatSel > 2){
                copyCatSel = 0;
            };
            DisplayInventory(towerSG, true, true, copyCatSel);
            break;
        case TOWER_TRY:
            ShowMainQuestScreen(100, (399 + towerLevel));
            break;
    };
}

public function TowerScrollGrab(evt:MouseEvent){
    towerScrollGrabPos = evt.localY;
    towerScrollSpeed = 0;
}

public function TowerScrollMove(evt:MouseEvent){
    if (towerScrollGrabPos != -1){
        towerScrollSpeed = (evt.localY - towerScrollGrabPos);
        towerScroll = (towerScroll + (towerScrollSpeed / 375));
        towerScrollDest = towerScroll;
        towerScrollTimer.start();
        towerScrollGrabPos = evt.localY;
    };
}

public function TowerScrollRelease(evt:MouseEvent){
    if (towerScrollGrabPos != -1){
        towerScrollDest = (towerScrollDest + (towerScrollSpeed / 40));
        towerScrollTimer.start();
        towerScrollGrabPos = -1;
    };
}

public function TowerScrollOut(evt:MouseEvent){
    if (towerScrollGrabPos != -1){
    };
}

public function TowerScrollCurrent(evt:MouseEvent){
    towerScrollDest = (towerSG[TSG_TOWER_LEVEL] + 1);
    towerScrollTimer.start();
    towerScrollGrabPos = -1;
}

public function TowerScrollWheel(evt:MouseEvent){
    towerScrollSpeed = (evt.delta * 10);
    towerScroll = (towerScroll + (towerScrollSpeed / 375));
    towerScrollDest = towerScroll;
    towerScrollTimer.start();
}

public function TowerKeyEvent(evt:KeyboardEvent){
    var evt:* = evt;
    if (OnStage(TOWER_SCROLLAREA)){
        if (evt.keyCode == Keyboard.ENTER){
            towerScrollDest = towerSG[TSG_TOWER_LEVEL];
            towerScrollTimer.start();
        } else {
            if (evt.keyCode == Keyboard.UP){
                towerScrollDest = (Math.round(towerScrollDest) + 1);
                towerScrollTimer.start();
            } else {
                if (evt.keyCode == Keyboard.DOWN){
                    towerScrollDest = (Math.round(towerScrollDest) - 1);
                    towerScrollTimer.start();
                };
            };
        };
    } else {
        var _local3 = actor[TOWER_SCROLLAREA];
        with (_local3) {
            removeEventListener(KeyboardEvent.KEY_DOWN, TowerKeyEvent);
            removeEventListener(FocusEvent.FOCUS_OUT, TowerScrollSetFocus);
        };
    };
}

public function TowerScrollSetFocus(evt:Event){
    var evt:* = evt;
    if (OnStage(TOWER_SCROLLAREA)){
        stage.focus = actor[TOWER_SCROLLAREA];
    } else {
        var _local3 = actor[TOWER_SCROLLAREA];
        with (_local3) {
            removeEventListener(KeyboardEvent.KEY_DOWN, TowerKeyEvent);
            removeEventListener(FocusEvent.FOCUS_OUT, TowerScrollSetFocus);
        };
    };
}

public function TowerTimerFn(evt:Event=undefined){
    var i:int;
    var towerScrollMax = "";
    var towerScrollLvl:Array;
    var thisFloor:*;
    towerScrollMax = 100;
    if (!OnStage(TOWER_SCROLLAREA)){
        towerScrollTimer.stop();
    };
    if (towerScrollDest > towerScrollMax){
        towerScrollDest = towerScrollMax;
    };
    if (towerScrollDest < 0){
        towerScrollDest = 0;
    };
    if (Math.abs((towerScroll - towerScrollDest)) > 0.01){
        towerScroll = (((towerScroll * 9) + towerScrollDest) / 10);
    } else {
        towerScroll = towerScrollDest;
        towerScrollTimer.stop();
    };
    if (towerScroll > towerScrollMax){
        towerScroll = towerScrollMax;
    };
    if (towerScroll < 0){
        towerScroll = 0;
    };
    actor[TOWER_BG].y = (-700 + ((towerScroll / towerScrollMax) * 700));
    actor[TOWER_BASE].y = (towerScroll * 375);
    towerScrollLvl = new Array();
    i = 0;
    while (i < 3) {
        towerScrollLvl[i] = (towerScroll - 0.7);
        while (towerScrollLvl[i] > (3 - i)) {
            towerScrollLvl[i] = (towerScrollLvl[i] - 3);
        };
        i++;
    };
    towerScrollLvl[2] = (((575 - 350) + 35) + (towerScrollLvl[2] * 375));
    towerScrollLvl[1] = (((575 - 700) + 10) + (towerScrollLvl[1] * 375));
    towerScrollLvl[0] = ((575 - 1065) + (towerScrollLvl[0] * 375));
    towerScrollLvl.sort(Array.NUMERIC);
    thisFloor = 0;
    i = 0;
    while (i < 3) {
        thisFloor = Math.floor((towerScroll - 0.7));
        if (thisFloor < 0){
            thisFloor = 0;
        };
        thisFloor = (thisFloor + i);
        SetCnt((TOWER_WINDOW + i), (((thisFloor < (int(towerSG[TSG_TOWER_LEVEL]) + 1))) ? TOWER_WINDOW_BURNT : (((thisFloor == (int(towerSG[TSG_TOWER_LEVEL]) + 1))) ? TOWER_WINDOW_OPEN : TOWER_WINDOW_CLOSED)));
        SetCnt((TOWER_FACE + i), ((OPPMONSTER + int(towerSG[TSG_TOWER_LEVEL])) + 399));
        actor[(TOWER_LEVEL + i)].y = towerScrollLvl[(2 - i)];
        actor[(TOWER_WINDOW + i)].y = towerScrollLvl[(2 - i)];
        actor[(TOWER_FACE + i)].y = (towerScrollLvl[(2 - i)] + 277);
        i++;
    };
}

public function ShowTowerScreen(towerData:Array){
    var thisCpc:* = 0;
    var DoShowTowerScreen:* = null;
    var thisSlot:* = 0;
    var towerData:* = towerData;
    DoShowTowerScreen = function (){
        var i:* = 0;
        var _local2 = actor[TOWER_SCROLLAREA];
        with (_local2) {
            addChild(actor[TOWER_BG]);
            addChild(actor[(TOWER_LEVEL + 2)]);
            addChild(actor[(TOWER_LEVEL + 1)]);
            addChild(actor[TOWER_LEVEL]);
            addChild(actor[TOWER_FACE]);
            addChild(actor[(TOWER_FACE + 1)]);
            addChild(actor[(TOWER_FACE + 2)]);
            addChild(actor[TOWER_WINDOW]);
            addChild(actor[(TOWER_WINDOW + 1)]);
            addChild(actor[(TOWER_WINDOW + 2)]);
            addChild(actor[TOWER_BASE]);
            addEventListener(KeyboardEvent.KEY_DOWN, TowerKeyEvent);
        };
        stage.focus = actor[TOWER_SCROLLAREA];
        if (!OnStage(TOWER_SCROLLAREA)){
            towerScrollDest = (int(towerSG[TSG_TOWER_LEVEL]) + 1);
            if (lightMode){
                towerScroll = towerScrollDest;
            } else {
                towerScroll = 0;
            };
            towerScrollTimer.start();
            SetAlpha(CHAR_SECONDPROP, 1);
            SetAlpha(CHAR_PREISE, 0);
        };
        RemoveAll();
        Add(SCREEN_TOWER);
        if (towerLevel >= 100){
            Remove(TOWER_TRY);
        };
        i = 0;
        while (i < 3) {
            actor[(LBL_TOWER_BOOSTPRICELABEL + i)].text = String(int((towerSG[((TSG_COPYCATS + (i * COPYCAT)) + CPC_PRICE_NEXT_LEVEL)] / 100)));
            i = (i + 1);
        };
        DisplayInventory(towerSG, true, true, copyCatSel);
    };
    towerSG = towerData[1].split("/");
    thisCpc = 0;
    while (thisCpc < 3) {
        thisSlot = 0;
        while (thisSlot < 10) {
            ExpandItemStructure(towerSG, (((TSG_COPYCATS + (thisCpc * COPYCAT)) + CPC_ITEMS) + (thisSlot * SG_ITM_SIZE)));
            thisSlot = (thisSlot + 1);
        };
        thisCpc = (thisCpc + 1);
    };
    Load(SCREEN_TOWER);
    Load(TOWER_PIECES);
    if (towerSG[TSG_TOWER_LEVEL] < 100){
        Load(((OPPMONSTER + int(towerSG[TSG_TOWER_LEVEL])) + 399));
    };
    WhenLoaded(DoShowTowerScreen);
}

public function ShowDemoScreen(){
    var DoShowDemoScreen:* = null;
    DoShowDemoScreen = function (){
        RemoveAll();
        DemoMode = true;
        Add(SCREEN_DEMO);
        var _local2 = actor[BG_DEMO];
        with (_local2) {
            x = (SCREEN_TITLE_X - int((width / 2)));
        };
        Remove(IF_STATS, IF_LOGOUT);
    };
    Load(SCREEN_DEMO);
    WhenLoaded(DoShowDemoScreen);
}


public function ShowOptionScreen(evt:Event=undefined){
    var DoShowOptionScreen:* = null;
    var evt:* = evt;
    DoShowOptionScreen = function (){
        var i:* = 0;
        RemoveAll();
        SetCnt(CHANGE_PASSWORD_SMILEY_SAD, PASSWORD_SMILEY_SAD);
        SetCnt(CHANGE_PASSWORD_SMILEY_NEUTRAL, PASSWORD_SMILEY_NEUTRAL);
        SetCnt(CHANGE_PASSWORD_SMILEY_HAPPY, PASSWORD_SMILEY_HAPPY);
        Hide(CHANGE_PASSWORD_SMILEY_SAD);
        Hide(CHANGE_PASSWORD_SMILEY_NEUTRAL);
        Hide(CHANGE_PASSWORD_SMILEY_HAPPY);
        Add(SCREEN_OPTION);
        if (((txt[TXT_LUXURY_BUTTON]) and ((Savegame[SG_MUSH] >= 1000)))){
            actor[OPTION_RESEND].y = ((OPTION_Y + OPTION_Y4) - 34);
            actor[OPTION_CHANGE_PASSWORD].y = ((OPTION_Y + OPTION_Y3) - 17);
            actor[OPTION_DELETE].y = ((OPTION_Y + OPTION_Y5) - 51);
            Add(OPTION_LUXURY);
        };
        if (textDir == "right"){
            actor[LBL_OPTION_CHANGE].x = ((actor[OPTION_CHANGE_NAME].x + actor[OPTION_CHANGE_NAME].width) - actor[LBL_OPTION_CHANGE].textWidth);
            actor[LBL_OPTION_IMAGE].x = ((actor[OPTION_IMAGEBORDER].x + actor[OPTION_IMAGEBORDER].width) - actor[LBL_OPTION_IMAGE].textWidth);
        };
        EnablePopup(LBL_OPTION_VER, POPUP_BEGIN_LINE, "Player ID", 140, Savegame[SG_PLAYER_ID], POPUP_END_LINE, POPUP_BEGIN_LINE, "Server Ver.Cfg.", 140, param_server_version_cfg, POPUP_END_LINE, POPUP_BEGIN_LINE, "Server Ver.Act.", 140, param_server_version_act, POPUP_END_LINE);
        i = 0;
        while (i < 10) {
            var _local2 = actor[(CHARBACKGROUND + i)];
            with (_local2) {
                x = ((OPTION_X + OPTION_IMAGE_X) + 4);
                y = ((OPTION_Y + OPTION_Y2) + 4);
                scaleX = 0.56;
                scaleY = 0.56;
            };
            i = (i + 1);
        };
        _local2 = actor[LBL_OPTION_TITLE];
        with (_local2) {
            x = ((OPTION_X + int((OPTION_X / 2))) - int((textWidth / 2)));
        };
        LoadCharacterImage();
        SetSliderValue(SLDR_OPTION_VOLUME, (so.data.volume + 1));
        if (lightMode){
            Add(CB_LM_CHECKED);
        };
        if (chatSound){
            Add(CB_CS_CHECKED);
        };
        if (compareItems){
            Add(CB_COMPARE_CHECKED);
        };
        if (tvFunctionName != ""){
            if (disableTV){
                Add(CB_TV_CHECKED);
            };
        } else {
            Remove(CB_TV_CHECKED);
            Remove(CB_TV_UNCHECKED);
            Remove(LBL_TV_CHECKBOX);
        };
    };
    Load(SCREEN_OPTION);
    Load(PASSWORD_SMILEY_SAD);
    Load(PASSWORD_SMILEY_NEUTRAL);
    Load(PASSWORD_SMILEY_HAPPY);
    WhenLoaded(DoShowOptionScreen);
}

public function ShowFightScreen(fighterData:Array, fightData:Array, getPilz:Boolean, faceData:Array, isPvP:Boolean, weaponData:Array, HonorGain:int, GoldGain:int, isMQ:Boolean, isReplay:Boolean=false, BackPackSlot:int=-1, GuildBattleData:Array=undefined, lastFight:Boolean=false, guildFightExp:int=0, guildFightHonor:int=0, ownGuild:String="", oppGuild:String="", raidLevel:int=0){
    var isGuildBattle:* = false;
    var charWeapon:* = 0;
    var oppWeapon:* = 0;
    var charHasWeapon:* = false;
    var oppHasWeapon:* = false;
    var charWeaponType:* = 0;
    var oppWeaponType:* = 0;
    var tz:* = 0;
    var charShield:* = 0;
    var oppShield:* = 0;
    var i:* = 0;
    var oppVolk:* = 0;
    var oppMann:* = false;
    var oppKaste:* = 0;
    var thisCharVolk:* = 0;
    var thisCharMann:* = false;
    var thisCharKaste:* = 0;
    var thisCharMouth:* = undefined;
    var thisCharBeard:* = undefined;
    var thisCharNose:* = undefined;
    var thisCharEyes:* = undefined;
    var thisCharBrows:* = undefined;
    var thisCharEars:* = undefined;
    var thisCharHair:* = undefined;
    var thisCharSpecial:* = undefined;
    var thisCharSpecial2:* = undefined;
    var thisCharMonster:* = 0;
    var oppMouth:* = 0;
    var oppBeard:* = 0;
    var oppNose:* = 0;
    var oppEyes:* = 0;
    var oppBrows:* = 0;
    var oppEars:* = 0;
    var oppHair:* = 0;
    var oppSpecial:* = 0;
    var oppSpecial2:* = 0;
    var oppMonster:* = 0;
    var oppName:* = null;
    var thisCharName:* = null;
    var charFullLife:* = 0;
    var oppFullLife:* = 0;
    var charLife:* = 0;
    var charDamage:* = 0;
    var oppLife:* = 0;
    var charFlag:* = 0;
    var oppFlag:* = 0;
    var fightRound:* = 0;
    var oppStrike:* = false;
    var isRaid:* = false;
    var DoShowFightScreen:* = null;
    var fighterData:* = fighterData;
    var fightData:* = fightData;
    var getPilz:* = getPilz;
    var faceData:* = faceData;
    var isPvP:* = isPvP;
    var weaponData:* = weaponData;
    var HonorGain:* = HonorGain;
    var GoldGain:* = GoldGain;
    var isMQ:* = isMQ;
    var isReplay:Boolean = isReplay;
    var BackPackSlot:int = BackPackSlot;
    var GuildBattleData:* = GuildBattleData;
    var lastFight:Boolean = lastFight;
    var guildFightExp:int = guildFightExp;
    var guildFightHonor:int = guildFightHonor;
    var ownGuild:String = ownGuild;
    var oppGuild:String = oppGuild;
    var raidLevel:int = raidLevel;
    DoShowFightScreen = function (evt:Event=undefined){
        var i:* = 0;
        var DoStrikeTimer:* = null;
        var DoSkipFight:* = null;
        var strikeBreak:* = false;
        var DoStrikeEvent:* = null;
        var evt:* = evt;
        DoSkipFight = function (evt:MouseEvent=undefined, fightDone:Boolean=false){
            var questID:* = 0;
            var PilzBekommen:* = false;
            var i:* = 0;
            var charWin:* = false;
            var lastHero:* = null;
            var lastHeroWins:* = 0;
            var heroCount:* = 0;
            var thisWinner:* = undefined;
            var evt:* = evt;
            var fightDone:Boolean = fightDone;
            questID = (Savegame[SG_ACTION_INDEX] - 1);
            var rewardX:* = FIGHT_REWARDGOLD_X;
            PilzBekommen = getPilz;
            var pilzX:* = FIGHT_REWARDGOLD_X;
            var rewardGoldText:* = "";
            var fightStyle:* = 5;
            fightLock = false;
            DoStrikeTimer.stop();
            DoStrikeTimer.removeEventListener(TimerEvent.TIMER, DoStrikeEvent);
            actor[FIGHT_SKIP].removeEventListener(MouseEvent.CLICK, DoSkipFight);
            actor[BATTLE_SKIP].removeEventListener(MouseEvent.CLICK, DoSkipFight);
            actor[BATTLE_SKIPONE].removeEventListener(MouseEvent.CLICK, DoSkipFight);
            fightRound = (int((fightData.length / 6)) - 1);
            charLife = fightData[(fightRound * 6)];
            charDamage = fightData[((fightRound * 6) + 1)];
            charFlag = fightData[((fightRound * 6) + 2)];
            oppLife = fightData[((fightRound * 6) + 3)];
            oppDamage = fightData[((fightRound * 6) + 4)];
            oppFlag = fightData[((fightRound * 6) + 5)];
            charWin = (charLife > 0);
            SetLifeBars();
            if (((!(isGuildBattle)) or (lastFight))){
                Remove(FIGHT_SKIP);
                Remove(BATTLE_SKIP);
                Remove(BATTLE_SKIPONE);
                Add(LBL_FIGHT_SUMMARY);
            };
            if (isGuildBattle){
                if (((charWin) and (lastFight))){
                    Play(SND_JINGLE);
                };
            } else {
                Show(IF_STATS);
                Add(FIGHT_OK);
                if (charWin){
                    Play(SND_JINGLE);
                };
            };
            if (isGuildBattle){
                lastRoundFighterName = thisCharName;
                if (charWin){
                    if (winners[("name_" + thisCharName)]){
                        var _local4 = winners;
                        var _local5 = ("name_" + thisCharName);
                        var _local6 = (_local4[_local5] + 1);
                        _local4[_local5] = _local6;
                    } else {
                        winners[("name_" + thisCharName)] = 1;
                    };
                };
                if (((towerFightMode) and ((guildFightHonor >= 0)))){
                    SetCnt(FIGHT_SLOT, GetItemID(SG_INVENTORY_OFFS, (guildFightHonor + 10), Savegame));
                    ItemPopup(FIGHT_SLOT, (SG_INVENTORY_OFFS + ((guildFightHonor + 10) * SG_ITM_SIZE)), undefined, false, true, false);
                    guildFightHonor = 0;
                } else {
                    SetCnt(FIGHT_SLOT, C_EMPTY);
                    EnablePopup(FIGHT_SLOT);
                };
                if (lastFight){
                    lastHero = "";
                    lastHeroWins = 0;
                    heroCount = 0;
                    if (txt[TXT_HERO_OF_THE_DAY]){
                        for (thisWinner in winners) {
                            if (winners[thisWinner] > lastHeroWins){
                                lastHeroWins = winners[thisWinner];
                                lastHero = txt[TXT_HERO_OF_THE_DAY].split("%1").join(thisWinner.substr(5)).split("%2").join(String(lastHeroWins));
                                heroCount = 1;
                            } else {
                                if (winners[thisWinner] == lastHeroWins){
                                    lastHeroWins = winners[thisWinner];
                                    lastHero = (lastHero + (String.fromCharCode(13) + txt[TXT_HERO_OF_THE_DAY].split("%1").join(thisWinner.substr(5)).split("%2").join(String(lastHeroWins))));
                                    heroCount = (heroCount + 1);
                                };
                            };
                        };
                        if ((((((lastHeroWins >= 5)) and (charWin))) and (!(isRaid)))){
                            Add(HERO_OF_THE_DAY);
                            if (heroCount == 1){
                                actor[LBL_HERO_OF_THE_DAY_TITLE].text = ((txt[TXT_HERO_OF_THE_DAY_TITLE]) ? txt[TXT_HERO_OF_THE_DAY_TITLE] : "");
                            } else {
                                actor[LBL_HERO_OF_THE_DAY_TITLE].text = ((txt[TXT_HEROES_OF_THE_DAY_TITLE]) ? txt[TXT_HEROES_OF_THE_DAY_TITLE] : "");
                            };
                            actor[LBL_HERO_OF_THE_DAY_TITLE].x = (SCREEN_TITLE_X - (actor[LBL_HERO_OF_THE_DAY_TITLE].width / 2));
                            actor[LBL_HERO_OF_THE_DAY].text = lastHero;
                            actor[LBL_HERO_OF_THE_DAY].x = (SCREEN_TITLE_X - (actor[LBL_HERO_OF_THE_DAY].width / 2));
                        };
                    };
                    Add(FIGHT_OK);
                    Add(FIGHT_REWARDS);
                    Hide(FIGHT_REWARDGOLD, LBL_FIGHT_REWARDGOLD, FIGHT_REWARDSILVER, LBL_FIGHT_REWARDSILVER, FIGHT_REWARDMUSH, LBL_FIGHT_REWARDMUSH, LBL_FIGHT_REWARDEXP);
                    if ((((guildFightExp > 0)) and (charWin))){
                        if (towerFightMode){
                            _local4 = actor[LBL_FIGHT_REWARDGOLD];
                            with (_local4) {
                                visible = true;
                                text = String(guildFightExp);
                                x = (rewardX - textWidth);
                            };
                            _local4 = actor[FIGHT_REWARDGOLD];
                            with (_local4) {
                                visible = true;
                                x = ((actor[LBL_FIGHT_REWARDGOLD].x - width) - 8);
                            };
                        } else {
                            _local4 = actor[LBL_FIGHT_REWARDEXP];
                            with (_local4) {
                                visible = true;
                                if (textDir == "right"){
                                    text = ((String(Math.abs(guildFightExp)) + " :") + txt[TXT_EXP]);
                                } else {
                                    text = ((txt[TXT_EXP] + ": ") + String(Math.abs(guildFightExp)));
                                };
                            };
                        };
                    };
                    if (!isRaid){
                        _local4 = actor[LBL_FIGHT_REWARDGOLD];
                        with (_local4) {
                            visible = true;
                            if (textDir == "right"){
                                text = ((String(Math.abs(guildFightHonor)) + " ") + txt[(((guildFightHonor > 0)) ? TXT_GUILD_HONOR_GAINED : TXT_GUILD_HONOR_LOST)]);
                            } else {
                                text = ((txt[(((guildFightHonor > 0)) ? TXT_GUILD_HONOR_GAINED : TXT_GUILD_HONOR_LOST)] + " ") + String(Math.abs(guildFightHonor)));
                            };
                            x = (rewardX - textWidth);
                        };
                    };
                } else {
                    if ((evt is MouseEvent)){
                        if (GetActorID(evt.target) == BATTLE_SKIP){
                            skipGuildFights = (Math.abs(skipGuildFights) + 1);
                        };
                    };
                };
            } else {
                if (isPvP){
                    Add(FIGHT_REWARDS);
                    Hide(FIGHT_REWARDGOLD, LBL_FIGHT_REWARDGOLD, FIGHT_REWARDSILVER, LBL_FIGHT_REWARDSILVER, FIGHT_REWARDMUSH, LBL_FIGHT_REWARDMUSH, LBL_FIGHT_REWARDEXP);
                    if (HonorGain != 0){
                        _local4 = actor[LBL_FIGHT_REWARDEXP];
                        with (_local4) {
                            visible = true;
                            if (textDir == "right"){
                                text = ((String(Math.abs(HonorGain)) + " ") + txt[(((HonorGain > 0)) ? TXT_HONOR_GAINED : TXT_HONOR_LOST)]);
                            } else {
                                text = ((txt[(((HonorGain > 0)) ? TXT_HONOR_GAINED : TXT_HONOR_LOST)] + " ") + String(Math.abs(HonorGain)));
                            };
                        };
                    };
                    if (GoldGain > 0){
                        if (textDir == "right"){
                            rewardGoldText = (" " + txt[TXT_GOLD_GAINED]);
                        } else {
                            rewardGoldText = (txt[TXT_GOLD_GAINED] + " ");
                        };
                    } else {
                        if (GoldGain < 0){
                            if (textDir == "right"){
                                rewardGoldText = (" " + txt[TXT_GOLD_LOST]);
                            } else {
                                rewardGoldText = (txt[TXT_GOLD_LOST] + " ");
                            };
                        };
                    };
                    if (SilberAnteil(Math.abs(GoldGain)) > 0){
                        if (textDir != "right"){
                            _local4 = actor[FIGHT_REWARDSILVER];
                            with (_local4) {
                                visible = true;
                                x = (rewardX - width);
                                rewardX = (x - 8);
                            };
                        };
                        _local4 = actor[LBL_FIGHT_REWARDSILVER];
                        with (_local4) {
                            visible = true;
                            if (textDir == "right"){
                                text = (SilberAnteil(Math.abs(GoldGain)) + rewardGoldText);
                            } else {
                                text = ((((GoldAnteil(Math.abs(GoldGain)) > 0)) ? "" : rewardGoldText) + SilberAnteil(Math.abs(GoldGain)));
                            };
                            x = (rewardX - textWidth);
                            rewardX = (x - (((textDir == "right")) ? 8 : 14));
                        };
                        if (textDir == "right"){
                            _local4 = actor[FIGHT_REWARDSILVER];
                            with (_local4) {
                                visible = true;
                                x = (rewardX - width);
                                rewardX = (x - 14);
                            };
                        };
                    };
                    if (GoldAnteil(Math.abs(GoldGain)) > 0){
                        if (textDir != "right"){
                            _local4 = actor[FIGHT_REWARDGOLD];
                            with (_local4) {
                                visible = true;
                                x = (rewardX - width);
                                rewardX = (x - 8);
                            };
                        };
                        _local4 = actor[LBL_FIGHT_REWARDGOLD];
                        with (_local4) {
                            visible = true;
                            if (textDir == "right"){
                                text = (GoldAnteil(Math.abs(GoldGain)) + (((SilberAnteil(Math.abs(GoldGain)) > 0)) ? "" : rewardGoldText));
                            } else {
                                text = (rewardGoldText + GoldAnteil(Math.abs(GoldGain)));
                            };
                            x = (rewardX - textWidth);
                            rewardX = (x - (((textDir == "right")) ? 8 : 14));
                        };
                        if (textDir == "right"){
                            _local4 = actor[FIGHT_REWARDGOLD];
                            with (_local4) {
                                visible = true;
                                x = (rewardX - width);
                                rewardX = (x - 14);
                            };
                        };
                    };
                    SetCnt(FIGHT_SLOT, C_EMPTY);
                    EnablePopup(FIGHT_SLOT);
                } else {
                    if (((isMQ) and (charWin))){
                        Add(FIGHT_REWARDS);
                        Hide(FIGHT_REWARDGOLD, LBL_FIGHT_REWARDGOLD, FIGHT_REWARDSILVER, LBL_FIGHT_REWARDSILVER, FIGHT_REWARDMUSH, LBL_FIGHT_REWARDMUSH, LBL_FIGHT_REWARDEXP);
                        if (HonorGain > 0){
                            _local4 = actor[LBL_FIGHT_REWARDEXP];
                            with (_local4) {
                                visible = true;
                                if (textDir == "right"){
                                    text = ((String(HonorGain) + " :") + txt[TXT_EXP]);
                                } else {
                                    text = ((txt[TXT_EXP] + ": ") + String(HonorGain));
                                };
                            };
                        };
                        if (PilzBekommen){
                            _local4 = actor[FIGHT_REWARDMUSH];
                            with (_local4) {
                                visible = true;
                                x = (pilzX - width);
                                pilzX = (x - 8);
                            };
                            _local4 = actor[LBL_FIGHT_REWARDMUSH];
                            with (_local4) {
                                visible = true;
                                text = "1";
                                x = (pilzX - textWidth);
                                pilzX = (x - 14);
                            };
                            AnimateAch(FIGHT_REWARDMUSH, actor[FIGHT_REWARDMUSH].y);
                        };
                        if (SilberAnteil(GoldGain) > 0){
                            _local4 = actor[FIGHT_REWARDSILVER];
                            with (_local4) {
                                visible = true;
                                x = (rewardX - width);
                                rewardX = (x - 8);
                            };
                            _local4 = actor[LBL_FIGHT_REWARDSILVER];
                            with (_local4) {
                                visible = true;
                                text = SilberAnteil(GoldGain);
                                x = (rewardX - textWidth);
                                rewardX = (x - 14);
                            };
                        };
                        if (GoldAnteil(GoldGain) > 0){
                            _local4 = actor[FIGHT_REWARDGOLD];
                            with (_local4) {
                                visible = true;
                                x = (rewardX - width);
                                rewardX = (x - 8);
                            };
                            _local4 = actor[LBL_FIGHT_REWARDGOLD];
                            with (_local4) {
                                visible = true;
                                text = GoldAnteil(GoldGain);
                                x = (rewardX - textWidth);
                                rewardX = (x - 14);
                            };
                        };
                        if (BackPackSlot >= 0){
                            SetCnt(FIGHT_SLOT, GetItemID(SG_INVENTORY_OFFS, (BackPackSlot + 10), Savegame));
                            ItemPopup(FIGHT_SLOT, (SG_INVENTORY_OFFS + ((BackPackSlot + 10) * SG_ITM_SIZE)), undefined, false, true, false);
                        } else {
                            SetCnt(FIGHT_SLOT, C_EMPTY);
                            EnablePopup(FIGHT_SLOT);
                        };
                    } else {
                        if (isMQ){
                            hasLostMQ = true;
                        } else {
                            if (((charWin) and ((Savegame[SG_ACTION_STATUS] == 2)))){
                                Add(FIGHT_REWARDS);
                                Hide(FIGHT_REWARDGOLD, LBL_FIGHT_REWARDGOLD, FIGHT_REWARDSILVER, LBL_FIGHT_REWARDSILVER, FIGHT_REWARDMUSH, LBL_FIGHT_REWARDMUSH, LBL_FIGHT_REWARDEXP);
                                if (int(Savegame[(SG_QUEST_OFFER_EXP1 + questID)]) > 0){
                                    _local4 = actor[LBL_FIGHT_REWARDEXP];
                                    with (_local4) {
                                        visible = true;
                                        if (textDir == "right"){
                                            text = ((Savegame[(SG_QUEST_OFFER_EXP1 + questID)] + " :") + txt[TXT_EXP]);
                                        } else {
                                            text = ((txt[TXT_EXP] + ": ") + Savegame[(SG_QUEST_OFFER_EXP1 + questID)]);
                                        };
                                    };
                                };
                                if (PilzBekommen){
                                    _local4 = actor[FIGHT_REWARDMUSH];
                                    with (_local4) {
                                        visible = true;
                                        x = (pilzX - width);
                                        pilzX = (x - 8);
                                    };
                                    _local4 = actor[LBL_FIGHT_REWARDMUSH];
                                    with (_local4) {
                                        visible = true;
                                        text = "1";
                                        x = (pilzX - textWidth);
                                        pilzX = (x - 14);
                                    };
                                    AnimateAch(FIGHT_REWARDMUSH, actor[FIGHT_REWARDMUSH].y);
                                };
                                if (SilberAnteil(Savegame[(SG_QUEST_OFFER_GOLD1 + questID)]) > 0){
                                    _local4 = actor[FIGHT_REWARDSILVER];
                                    with (_local4) {
                                        visible = true;
                                        x = (rewardX - width);
                                        rewardX = (x - 8);
                                    };
                                    _local4 = actor[LBL_FIGHT_REWARDSILVER];
                                    with (_local4) {
                                        visible = true;
                                        text = SilberAnteil(Savegame[(SG_QUEST_OFFER_GOLD1 + questID)]);
                                        x = (rewardX - textWidth);
                                        rewardX = (x - 14);
                                    };
                                };
                                if (GoldAnteil(Savegame[(SG_QUEST_OFFER_GOLD1 + questID)]) > 0){
                                    _local4 = actor[FIGHT_REWARDGOLD];
                                    with (_local4) {
                                        visible = true;
                                        x = (rewardX - width);
                                        rewardX = (x - 8);
                                    };
                                    _local4 = actor[LBL_FIGHT_REWARDGOLD];
                                    with (_local4) {
                                        visible = true;
                                        text = GoldAnteil(Savegame[(SG_QUEST_OFFER_GOLD1 + questID)]);
                                        x = (rewardX - textWidth);
                                        rewardX = (x - 14);
                                    };
                                };
                                if (int(Savegame[((SG_QUEST_OFFER_REWARD_ITM1 + (questID * SG_ITM_SIZE)) + SG_ITM_TYP)]) > 0){
                                    SetCnt(FIGHT_SLOT, GetItemID(SG_QUEST_OFFER_REWARD_ITM1, questID));
                                    ItemPopup(FIGHT_SLOT, (SG_QUEST_OFFER_REWARD_ITM1 + (questID * SG_ITM_SIZE)), undefined, false, true, false);
                                } else {
                                    SetCnt(FIGHT_SLOT, C_EMPTY);
                                    EnablePopup(FIGHT_SLOT);
                                };
                            };
                        };
                    };
                };
            };
            if (charWin){
                if ((charLife / charFullLife) > 0.8){
                    fightStyle = 0;
                } else {
                    if ((charLife / charFullLife) > 0.4){
                        fightStyle = 5;
                    } else {
                        if ((charLife / charFullLife) > 0.2){
                            fightStyle = 10;
                        } else {
                            fightStyle = 15;
                        };
                    };
                };
            } else {
                if ((oppLife / oppFullLife) > 0.8){
                    fightStyle = 0;
                } else {
                    if ((oppLife / oppFullLife) > 0.4){
                        fightStyle = 5;
                    } else {
                        if ((oppLife / oppFullLife) > 0.2){
                            fightStyle = 10;
                        } else {
                            fightStyle = 15;
                        };
                    };
                };
            };
            _local4 = actor[LBL_FIGHT_SUMMARY];
            with (_local4) {
                width = FIGHT_RESULT_TEXT_X;
                wordWrap = true;
                if (isGuildBattle){
                    if (lastFight){
                        if (towerFightMode){
                            if (charWin){
                                text = txt[(TXT_TOWER_WON + int((Math.random() * 5)))];
                            } else {
                                text = txt[(TXT_TOWER_LOST + int((Math.random() * 5)))];
                            };
                        } else {
                            if (isRaid){
                                if (charWin){
                                    text = txt[(TXT_RAID_WON + int((Math.random() * 5)))];
                                } else {
                                    text = txt[(TXT_RAID_LOST + int((Math.random() * 5)))];
                                };
                            } else {
                                if (charWin){
                                    text = txt[(TXT_GUILD_BATTLE_WON + int((Math.random() * 5)))];
                                } else {
                                    text = txt[(TXT_GUILD_BATTLE_LOST + int((Math.random() * 5)))];
                                };
                            };
                        };
                    } else {
                        if (!inStrikeAni){
                            nextFightTimer.start();
                        } else {
                            strikeBreak = true;
                        };
                        return;
                    };
                } else {
                    if (isPvP){
                        text = txt[((int((Math.random() * 5)) + fightStyle) + ((charWin) ? TXT_PVP_WIN : TXT_PVP_LOSE))];
                    } else {
                        text = txt[((int((Math.random() * 5)) + fightStyle) + ((charWin) ? TXT_FIGHT_WIN : TXT_FIGHT_LOSE))];
                    };
                };
                x = (SCREEN_TITLE_X - int((width / 2)));
            };
            Arabize(LBL_FIGHT_SUMMARY);
        };
        var SetLifeBars:* = function (whichOne:int=0){
            var barWidth:* = 0;
            var whichOne:int = whichOne;
            if ((((whichOne == 0)) or ((whichOne == 1)))){
                var _local3 = actor[LBL_LIFEBAR_CHAR];
                with (_local3) {
                    if (textDir == "right"){
                        text = ((String(charFullLife) + " / ") + String(charLife));
                    } else {
                        text = ((String(charLife) + " / ") + String(charFullLife));
                    };
                    x = ((FIGHT_CHARX + 150) - int((textWidth / 2)));
                };
                _local3 = actor[LIFEBAR_FILL_CHAR];
                with (_local3) {
                    barWidth = ((Number(charLife) / Number(charFullLife)) * 279);
                    if (barWidth < 0){
                        barWidth = 0;
                    };
                    width = barWidth;
                    scaleY = 1;
                };
            };
            if ((((whichOne == 0)) or ((whichOne == 2)))){
                _local3 = actor[LBL_LIFEBAR_OPP];
                with (_local3) {
                    if (textDir == "right"){
                        text = ((String(oppFullLife) + " / ") + String(oppLife));
                    } else {
                        text = ((String(oppLife) + " / ") + String(oppFullLife));
                    };
                    x = ((OPPX + 150) - int((textWidth / 2)));
                };
                _local3 = actor[LIFEBAR_FILL_OPP];
                with (_local3) {
                    barWidth = ((Number(oppLife) / Number(oppFullLife)) * 279);
                    if (barWidth < 0){
                        barWidth = 0;
                    };
                    width = barWidth;
                    scaleY = 1;
                };
            };
        };
        DoStrikeEvent = function (evt:TimerEvent){
            if (((!(OnStage(FIGHT_BOX1))) or (strikeBreak))){
                DoStrikeTimer.stop();
                DoStrikeTimer.removeEventListener(TimerEvent.TIMER, DoStrikeEvent);
                return;
            };
            if ((((skipGuildFights > 0)) and (isGuildBattle))){
                DoSkipFight();
                DoStrikeTimer.stop();
                DoStrikeTimer.removeEventListener(TimerEvent.TIMER, DoStrikeEvent);
                return;
            };
            if (fightRound > (int((fightData.length / 6)) - 1)){
                DoSkipFight(undefined, true);
                return;
            };
            charLife = fightData[(fightRound * 6)];
            charDamage = fightData[((fightRound * 6) + 1)];
            charFlag = fightData[((fightRound * 6) + 2)];
            oppLife = fightData[((fightRound * 6) + 3)];
            oppDamage = fightData[((fightRound * 6) + 4)];
            oppFlag = fightData[((fightRound * 6) + 5)];
            if ((((((((fightRound == 0)) and (!(oppStrike)))) and ((charDamage == 0)))) and ((charFlag == 0)))){
                oppStrike = true;
            };
            DoStrikeTimer.stop();
            WeaponStrike(oppStrike);
            if (((((oppStrike) and ((charLife <= 0)))) or (((!(oppStrike)) and ((oppLife <= 0)))))){
                return;
            };
            oppStrike = !(oppStrike);
            if (!oppStrike){
                fightRound++;
            };
        };
        var WeaponStrike:* = function (opponent:Boolean=false){
            var StrikeAniTimer:* = null;
            var StrikeAlpha:* = NaN;
            var BulletAlpha:* = NaN;
            var ShieldAlpha:* = NaN;
            var DamageAlpha:* = NaN;
            var OnoAlpha:* = NaN;
            var strikeVal:* = NaN;
            var strikePhase:* = 0;
            var damageIndicatorActive:* = false;
            var weaponType:* = 0;
            var onoID:* = 0;
            var DoSkip:* = false;
            var catapultStrike:* = false;
            var StrikeAniTimerEvent:* = null;
            var opponent:Boolean = opponent;
            StrikeAniTimerEvent = function (evt:TimerEvent){
                var evt:* = evt;
                if (!OnStage(FIGHT_BOX1)){
                    inStrikeAni = false;
                    if (strikeBreak){
                        nextFightTimer.start();
                    };
                    StrikeAniTimer.stop();
                    StrikeAniTimer.removeEventListener(TimerEvent.TIMER, StrikeAniTimerEvent);
                    return;
                };
                switch (((catapultStrike) ? 4 : weaponType)){
                    case 1:
                        if ((((((((opponent) ? oppWeapon : charWeapon) < 0)) and ((((opponent) ? oppWeapon : charWeapon) > -4)))) or ((((opponent) ? oppWeapon : charWeapon) < -6)))){
                            switch (strikePhase){
                                case 0:
                                    if ((strikeVal == 0)){
                                        Play(GetWeaponSound(((opponent) ? oppWeaponType : charWeaponType), ((opponent) ? oppWeapon : charWeapon), 0));
                                    };
                                    strikeVal = (strikeVal + 0.2);
                                    if ((((((opponent) ? oppFlag : charFlag) == 1)) and ((strikeVal >= 0.4)))){
                                        ShieldAlpha = 1;
                                    };
                                    if (strikeVal >= 0.4){
                                        strikePhase++;
                                    };
                                    break;
                                case 1:
                                    strikeVal = (strikeVal + 0.2);
                                    if (strikeVal >= 1){
                                        strikeVal = 1;
                                        strikePhase++;
                                        damageIndicatorActive = true;
                                        DamageAlpha = 1;
                                        SetLifeBars(((opponent) ? 1 : 2));
                                        var _local3 = actor[LBL_DAMAGE_INDICATOR];
                                        with (_local3) {
                                            text = ("-" + String(((opponent) ? oppDamage : charDamage)));
                                            if (text == "-0"){
                                                if (((opponent) ? oppFlag : charFlag) == 1){
                                                    text = txt[TXT_GEBLOCKT];
                                                    Play(GetWeaponSound(((opponent) ? oppWeaponType : charWeaponType), ((opponent) ? oppWeapon : charWeapon), 2));
                                                } else {
                                                    text = txt[TXT_AUSGEWICHEN];
                                                };
                                            } else {
                                                Play(GetWeaponSound(((opponent) ? oppWeaponType : charWeaponType), ((opponent) ? oppWeapon : charWeapon), ((((opponent) ? oppFlag : charFlag))==3) ? 3 : 1));
                                            };
                                            x = ((SCREEN_TITLE_X + (((opponent) ? -1 : 1) * 200)) - int((textWidth / 2)));
                                            y = (FIGHT_WEAPONS_Y - 100);
                                        };
                                        if (((((opponent) and ((charLife <= 0)))) or (((!(opponent)) and ((oppLife <= 0)))))){
                                            DoSkip = true;
                                        };
                                    };
                                    break;
                                case 2:
                                    DamageAlpha = (DamageAlpha - 0.075);
                                    StrikeAlpha = (StrikeAlpha - 0.2);
                                    ShieldAlpha = (ShieldAlpha - 0.2);
                                    actor[LBL_DAMAGE_INDICATOR].y = (actor[LBL_DAMAGE_INDICATOR].y - 2);
                                    if (ShieldAlpha <= 0){
                                        ShieldAlpha = 0;
                                    };
                                    if (StrikeAlpha <= 0){
                                        StrikeAlpha = 0;
                                    };
                                    if (DamageAlpha <= 0){
                                        DamageAlpha = 0;
                                        inStrikeAni = false;
                                        if (strikeBreak){
                                            nextFightTimer.start();
                                        };
                                        StrikeAniTimer.stop();
                                        StrikeAniTimer.removeEventListener(TimerEvent.TIMER, StrikeAniTimerEvent);
                                        DoStrikeTimer.start();
                                    };
                                    break;
                            };
                        } else {
                            switch (strikePhase){
                                case 0:
                                    if ((strikeVal == 0)){
                                        Play(GetWeaponSound(((opponent) ? oppWeaponType : charWeaponType), ((opponent) ? oppWeapon : charWeapon), 0));
                                    };
                                    strikeVal = (strikeVal + 0.1);
                                    if ((((((opponent) ? oppFlag : charFlag) == 1)) and ((strikeVal >= 0.5)))){
                                        ShieldAlpha = 1;
                                    };
                                    if (strikeVal >= 0.8){
                                        strikePhase++;
                                    };
                                    break;
                                case 1:
                                    strikeVal = (strikeVal + 0.15);
                                    if (strikeVal >= 1){
                                        SetCnt(FIGHT_ONO, onoID, 0, 0, true);
                                        OnoAlpha = 1;
                                        strikeVal = 1;
                                        strikePhase++;
                                        damageIndicatorActive = true;
                                        DamageAlpha = 1;
                                        SetLifeBars(((opponent) ? 1 : 2));
                                        _local3 = actor[LBL_DAMAGE_INDICATOR];
                                        with (_local3) {
                                            text = ("-" + String(((opponent) ? oppDamage : charDamage)));
                                            if (text == "-0"){
                                                if (((opponent) ? oppFlag : charFlag) == 1){
                                                    text = txt[TXT_GEBLOCKT];
                                                    Play(GetWeaponSound(((opponent) ? oppWeaponType : charWeaponType), ((opponent) ? oppWeapon : charWeapon), 2));
                                                } else {
                                                    text = txt[TXT_AUSGEWICHEN];
                                                };
                                            } else {
                                                Play(GetWeaponSound(((opponent) ? oppWeaponType : charWeaponType), ((opponent) ? oppWeapon : charWeapon), ((((opponent) ? oppFlag : charFlag))==3) ? 3 : 1));
                                            };
                                            x = ((SCREEN_TITLE_X + (((opponent) ? -1 : 1) * 200)) - int((textWidth / 2)));
                                            y = (FIGHT_WEAPONS_Y - 100);
                                        };
                                        if (((((opponent) and ((charLife <= 0)))) or (((!(opponent)) and ((oppLife <= 0)))))){
                                            DoSkip = true;
                                        };
                                    };
                                    break;
                                case 2:
                                    DamageAlpha = (DamageAlpha - 0.075);
                                    StrikeAlpha = (StrikeAlpha - 0.2);
                                    ShieldAlpha = (ShieldAlpha - 0.2);
                                    OnoAlpha = (OnoAlpha - 0.2);
                                    actor[LBL_DAMAGE_INDICATOR].y = (actor[LBL_DAMAGE_INDICATOR].y - 2);
                                    if (OnoAlpha <= 0){
                                        OnoAlpha = 0;
                                    };
                                    if (ShieldAlpha <= 0){
                                        ShieldAlpha = 0;
                                    };
                                    if (StrikeAlpha <= 0){
                                        StrikeAlpha = 0;
                                    };
                                    if (DamageAlpha <= 0){
                                        DamageAlpha = 0;
                                        inStrikeAni = false;
                                        if (strikeBreak){
                                            nextFightTimer.start();
                                        };
                                        StrikeAniTimer.stop();
                                        StrikeAniTimer.removeEventListener(TimerEvent.TIMER, StrikeAniTimerEvent);
                                        DoStrikeTimer.start();
                                    };
                                    break;
                            };
                        };
                        break;
                    case 2:
                        switch (strikePhase){
                            case 0:
                                strikeVal = (strikeVal + 0.15);
                                if (strikeVal >= 0.4){
                                    strikePhase++;
                                    BulletAlpha = 1;
                                    Play(GetWeaponSound(((opponent) ? oppWeaponType : charWeaponType), ((opponent) ? oppWeapon : charWeapon), 0));
                                };
                                break;
                            case 1:
                                strikeVal = (strikeVal + 0.15);
                                if ((((((opponent) ? oppFlag : charFlag) == 1)) and ((strikeVal >= 0.5)))){
                                    ShieldAlpha = 1;
                                };
                                if (strikeVal >= 1){
                                    SetCnt(FIGHT_ONO, onoID, 0, 0, true);
                                    OnoAlpha = 1;
                                    strikeVal = 1;
                                    strikePhase++;
                                    DamageAlpha = 1;
                                    damageIndicatorActive = true;
                                    SetLifeBars(((opponent) ? 1 : 2));
                                    _local3 = actor[LBL_DAMAGE_INDICATOR];
                                    with (_local3) {
                                        text = ("-" + String(((opponent) ? oppDamage : charDamage)));
                                        if (text == "-0"){
                                            if (((opponent) ? oppFlag : charFlag) == 1){
                                                text = txt[TXT_GEBLOCKT];
                                                Play(GetWeaponSound(((opponent) ? oppWeaponType : charWeaponType), ((opponent) ? oppWeapon : charWeapon), 2));
                                            } else {
                                                text = txt[TXT_AUSGEWICHEN];
                                            };
                                        } else {
                                            Play(GetWeaponSound(((opponent) ? oppWeaponType : charWeaponType), ((opponent) ? oppWeapon : charWeapon), ((((opponent) ? oppFlag : charFlag))==3) ? 3 : 1));
                                        };
                                        x = ((SCREEN_TITLE_X + (((opponent) ? -1 : 1) * 200)) - int((textWidth / 2)));
                                        y = (FIGHT_WEAPONS_Y - 100);
                                    };
                                    if (((((opponent) and ((charLife <= 0)))) or (((!(opponent)) and ((oppLife <= 0)))))){
                                        DoSkip = true;
                                    };
                                };
                                break;
                            case 2:
                                DamageAlpha = (DamageAlpha - 0.075);
                                StrikeAlpha = (StrikeAlpha - 0.2);
                                ShieldAlpha = (ShieldAlpha - 0.2);
                                BulletAlpha = (BulletAlpha - 0.2);
                                OnoAlpha = (OnoAlpha - 0.2);
                                actor[LBL_DAMAGE_INDICATOR].y = (actor[LBL_DAMAGE_INDICATOR].y - 2);
                                if (OnoAlpha <= 0){
                                    OnoAlpha = 0;
                                };
                                if (ShieldAlpha <= 0){
                                    ShieldAlpha = 0;
                                };
                                if (StrikeAlpha <= 0){
                                    StrikeAlpha = 0;
                                };
                                if (DamageAlpha <= 0){
                                    DamageAlpha = 0;
                                    inStrikeAni = false;
                                    if (strikeBreak){
                                        nextFightTimer.start();
                                    };
                                    StrikeAniTimer.stop();
                                    StrikeAniTimer.removeEventListener(TimerEvent.TIMER, StrikeAniTimerEvent);
                                    DoStrikeTimer.start();
                                };
                                break;
                        };
                        break;
                    case 3:
                        switch (strikePhase){
                            case 0:
                                strikeVal = (strikeVal + 0.05);
                                BulletAlpha = 1;
                                if (strikeVal >= 0.3){
                                    strikePhase++;
                                    Play(GetWeaponSound(((opponent) ? oppWeaponType : charWeaponType), ((opponent) ? oppWeapon : charWeapon), 0));
                                };
                                break;
                            case 1:
                                strikeVal = (strikeVal + 0.1);
                                if ((((((opponent) ? oppFlag : charFlag) == 1)) and ((strikeVal >= 0.5)))){
                                    ShieldAlpha = 1;
                                };
                                if (strikeVal >= 1){
                                    SetCnt(FIGHT_ONO, onoID, 0, 0, true);
                                    OnoAlpha = 1;
                                    strikeVal = 1;
                                    strikePhase++;
                                    DamageAlpha = 1;
                                    damageIndicatorActive = true;
                                    SetLifeBars(((opponent) ? 1 : 2));
                                    _local3 = actor[LBL_DAMAGE_INDICATOR];
                                    with (_local3) {
                                        text = ("-" + String(((opponent) ? oppDamage : charDamage)));
                                        if (text == "-0"){
                                            if (((opponent) ? oppFlag : charFlag) == 1){
                                                text = txt[TXT_GEBLOCKT];
                                                Play(GetWeaponSound(((opponent) ? oppWeaponType : charWeaponType), ((opponent) ? oppWeapon : charWeapon), 2));
                                            } else {
                                                text = txt[TXT_AUSGEWICHEN];
                                            };
                                        } else {
                                            Play(GetWeaponSound(((opponent) ? oppWeaponType : charWeaponType), ((opponent) ? oppWeapon : charWeapon), ((((opponent) ? oppFlag : charFlag))==3) ? 3 : 1));
                                        };
                                        x = ((SCREEN_TITLE_X + (((opponent) ? -1 : 1) * 200)) - int((textWidth / 2)));
                                        y = (FIGHT_WEAPONS_Y - 100);
                                    };
                                    if (((((opponent) and ((charLife <= 0)))) or (((!(opponent)) and ((oppLife <= 0)))))){
                                        DoSkip = true;
                                    };
                                };
                                break;
                            case 2:
                                DamageAlpha = (DamageAlpha - 0.075);
                                StrikeAlpha = (StrikeAlpha - 0.2);
                                ShieldAlpha = (ShieldAlpha - 0.2);
                                BulletAlpha = (BulletAlpha - 0.2);
                                OnoAlpha = (OnoAlpha - 0.2);
                                actor[LBL_DAMAGE_INDICATOR].y = (actor[LBL_DAMAGE_INDICATOR].y - 2);
                                if (OnoAlpha <= 0){
                                    OnoAlpha = 0;
                                };
                                if (ShieldAlpha <= 0){
                                    ShieldAlpha = 0;
                                };
                                if (StrikeAlpha <= 0){
                                    StrikeAlpha = 0;
                                };
                                if (DamageAlpha <= 0){
                                    DamageAlpha = 0;
                                    inStrikeAni = false;
                                    if (strikeBreak){
                                        nextFightTimer.start();
                                    };
                                    StrikeAniTimer.stop();
                                    StrikeAniTimer.removeEventListener(TimerEvent.TIMER, StrikeAniTimerEvent);
                                    DoStrikeTimer.start();
                                };
                                break;
                        };
                        break;
                    case 4:
                        switch (strikePhase){
                            case 0:
                                if (strikeVal == 0){
                                    Play(SND_CATAPULT_LAUNCH);
                                    Load(FIGHT_MUSH);
                                };
                                strikeVal = (strikeVal + 0.01);
                                if (strikeVal >= 0.3){
                                    strikePhase++;
                                    Add(FIGHT_MUSH);
                                };
                                break;
                            case 1:
                                strikeVal = (strikeVal + 0.1);
                                if (strikeVal >= 1){
                                    strikeVal = 1;
                                    strikePhase++;
                                    DamageAlpha = 1;
                                    damageIndicatorActive = true;
                                    SetLifeBars(((opponent) ? 1 : 2));
                                    Play(SND_CATAPULT_HIT);
                                    _local3 = actor[LBL_DAMAGE_INDICATOR];
                                    with (_local3) {
                                        text = ("-" + String(((opponent) ? oppDamage : charDamage)));
                                        x = ((SCREEN_TITLE_X + (((opponent) ? -1 : 1) * 200)) - int((textWidth / 2)));
                                        y = (FIGHT_WEAPONS_Y - 100);
                                    };
                                    if (((((opponent) and ((charLife <= 0)))) or (((!(opponent)) and ((oppLife <= 0)))))){
                                        DoSkip = true;
                                    };
                                };
                                break;
                            case 2:
                                strikeVal = (strikeVal - 0.1);
                                DamageAlpha = (DamageAlpha - 0.05);
                                actor[LBL_DAMAGE_INDICATOR].y = (actor[LBL_DAMAGE_INDICATOR].y - 2);
                                if (DamageAlpha <= 0){
                                    DamageAlpha = 0;
                                    inStrikeAni = false;
                                    if (strikeBreak){
                                        nextFightTimer.start();
                                    };
                                    Remove(FIGHT_MUSH);
                                    StrikeAniTimer.stop();
                                    StrikeAniTimer.removeEventListener(TimerEvent.TIMER, StrikeAniTimerEvent);
                                    DoStrikeTimer.start();
                                };
                                break;
                        };
                        break;
                };
                if (catapultStrike){
                    _local3 = actor[FIGHT_MUSH];
                    with (_local3) {
                        x = ((SCREEN_TITLE_X - 128) + ((230 + (100 * (((strikePhase > 1)) ? (2 - strikeVal) : strikeVal))) * ((opponent) ? -1 : 1)));
                        y = ((0 - 265) + (strikeVal * 500));
                        scaleY = (((strikeVal >= 0.7)) ? (1.7 - strikeVal) : 1);
                    };
                } else {
                    _local3 = actor[((opponent) ? WEAPON_OPP : WEAPON_CHAR)];
                    with (_local3) {
                        if (weaponType == 1){
                            if ((((((((opponent) ? oppWeapon : charWeapon) < 0)) and ((((opponent) ? oppWeapon : charWeapon) > -4)))) or ((((opponent) ? oppWeapon : charWeapon) < -6)))){
                                if (((opponent) ? oppWeapon : charWeapon) == -1){
                                    SetCnt(((opponent) ? WEAPON_OPP : WEAPON_CHAR), (WEAPON_CLAW + int((strikeVal * 3.9))));
                                } else {
                                    if (((opponent) ? oppWeapon : charWeapon) == -3){
                                        SetCnt(((opponent) ? WEAPON_OPP : WEAPON_CHAR), (WEAPON_SPLAT + int((strikeVal * 2.9))));
                                    } else {
                                        if (((opponent) ? oppWeapon : charWeapon) == -7){
                                            SetCnt(((opponent) ? WEAPON_OPP : WEAPON_CHAR), (WEAPON_FIRE + int((strikeVal * 2.9))));
                                        } else {
                                            SetCnt(((opponent) ? WEAPON_OPP : WEAPON_CHAR), (WEAPON_SWOOSH + int((strikeVal * 2.9))));
                                        };
                                    };
                                };
                                scaleX = (((opponent) ? 1 : -1) * 1);
                                scaleY = 1;
                                y = (FIGHT_WEAPONS_Y - 240);
                                x = (((SCREEN_TITLE_X + ((opponent) ? 231 : 0)) - 115) + ((((opponent) ? -1 : 1) * 560) * ((((opponent) ? oppFlag : charFlag))==1) ? 0.7 : 1));
                                rotation = (0 * ((opponent) ? -1 : 1));
                                alpha = StrikeAlpha;
                                visible = true;
                            } else {
                                scaleX = (((opponent) ? 1 : -1) * SPRITE_SCALE);
                                scaleY = SPRITE_SCALE;
                                y = (FIGHT_WEAPONS_Y - (Math.cos((strikeVal * (TWOPI / 4))) * (75 + ((((opponent) ? oppFlag : charFlag))==3) ? 75 : 0)));
                                x = (((SCREEN_TITLE_X + ((opponent) ? 231 : 0)) - 115) + (((((opponent) ? -1 : 1) * 230) * strikeVal) * ((((opponent) ? oppFlag : charFlag))==1) ? 0.7 : 1));
                                rotation = ((280 + (100 * strikeVal)) * ((opponent) ? -1 : 1));
                                alpha = StrikeAlpha;
                                visible = true;
                            };
                        } else {
                            if (weaponType == 2){
                                scaleX = (((opponent) ? -1 : 1) * SPRITE_SCALE);
                                scaleY = SPRITE_SCALE;
                                y = FIGHT_WEAPONS_Y;
                                x = (SCREEN_TITLE_X + (((opponent) ? 1 : -1) * 170));
                                rotation = (((opponent) ? -1 : 1) * (-30 + (70 * strikeVal)));
                                alpha = StrikeAlpha;
                                visible = true;
                            } else {
                                if (weaponType == 3){
                                    scaleX = (((opponent) ? -1 : 1) * SPRITE_SCALE);
                                    scaleY = SPRITE_SCALE;
                                    y = (FIGHT_WEAPONS_Y - 140);
                                    if (strikeVal <= 0.3){
                                        x = ((SCREEN_TITLE_X + (((opponent) ? 1 : -1) * 200)) + (((opponent) ? -1 : 1) * ((0.3 / strikeVal) * 10)));
                                    } else {
                                        x = ((SCREEN_TITLE_X + (((opponent) ? 1 : -1) * 200)) + (((1 - strikeVal) * Math.sin(((strikeVal * 4) * TWOPI))) * -10));
                                    };
                                    rotation = ((opponent) ? -42 : 42);
                                    alpha = StrikeAlpha;
                                    visible = true;
                                };
                            };
                        };
                    };
                    if (weaponType == 2){
                        SetCnt(((opponent) ? BULLET_OPP : BULLET_CHAR), GetArrowID(0, ((opponent) ? 1 : 0), weaponData, true, int((Math.random() * 3))));
                    };
                    _local3 = actor[((opponent) ? BULLET_OPP : BULLET_CHAR)];
                    with (_local3) {
                        if (weaponType == 2){
                            scaleX = ((((opponent) ? -1 : 1) * strikeVal) * 2);
                            scaleY = (strikeVal * 2);
                            y = ((FIGHT_WEAPONS_Y - 70) - (height / 2));
                            x = ((SCREEN_TITLE_X + (((opponent) ? 1 : -1) * 200)) + ((((opponent) ? -1 : 1) * 300) * strikeVal));
                            rotation = 0;
                        } else {
                            if (weaponType == 3){
                                scaleX = ((opponent) ? -1 : 1);
                                scaleY = 1;
                                y = (FIGHT_WEAPONS_Y - 110);
                                if (strikeVal <= 0.3){
                                    x = ((SCREEN_TITLE_X + (((opponent) ? 1 : -1) * 200)) + (((opponent) ? -1 : 1) * ((0.3 / strikeVal) * 10)));
                                } else {
                                    x = ((SCREEN_TITLE_X + (((opponent) ? 1 : -1) * 200)) + (((((opponent) ? -1 : 1) * 400) * strikeVal) * ((((opponent) ? oppFlag : charFlag))==1) ? 0.7 : 1));
                                };
                                rotation = (((opponent) ? -1 : 1) * (42 + ((strikeVal - 0.3) * 6)));
                            };
                        };
                        alpha = BulletAlpha;
                        visible = (weaponType >= 2);
                    };
                    _local3 = actor[((opponent) ? SHIELD_CHAR : SHIELD_OPP)];
                    with (_local3) {
                        scaleX = (((opponent) ? 1 : -1) * SPRITE_SCALE);
                        scaleY = SPRITE_SCALE;
                        y = ((FIGHT_WEAPONS_Y - (Math.cos((strikeVal * TWOPI)) * 20)) - 20);
                        x = (((SCREEN_TITLE_X + ((opponent) ? 0 : 231)) - 115) + ((((opponent) ? -1 : 1) * 50) * (((((strikeVal > 0.9)) and ((weaponType == 1)))) ? (strikeVal + 0.2) : 1)));
                        alpha = ShieldAlpha;
                        visible = (((opponent) ? oppFlag : charFlag) == 1);
                    };
                };
                if (damageIndicatorActive){
                    _local3 = actor[LBL_DAMAGE_INDICATOR];
                    with (_local3) {
                        visible = true;
                        alpha = DamageAlpha;
                        if (((opponent) ? oppFlag : charFlag) == 4){
                            defaultTextFormat = FontFormat_CatapultDamage;
                        } else {
                            if (((opponent) ? oppFlag : charFlag) == 3){
                                defaultTextFormat = FontFormat_CriticalDamage;
                            } else {
                                defaultTextFormat = FontFormat_Damage;
                            };
                        };
                        text = text;
                    };
                    _local3 = actor[FIGHT_ONO];
                    with (_local3) {
                        visible = (((((opponent) ? oppFlag : charFlag) == 0)) or ((((opponent) ? oppFlag : charFlag) == 3)));
                        switch (weaponType){
                            case 1:
                                x = (SCREEN_TITLE_X + (((opponent) ? -1 : 1) * 200));
                                y = (FIGHT_WEAPONS_Y - 20);
                                if (OnoAlpha == 1){
                                    scaleX = 0.6;
                                    scaleY = 0.6;
                                } else {
                                    if (OnoAlpha > 0){
                                        scaleX = (scaleX + 0.2);
                                        scaleY = (scaleY + 0.2);
                                    };
                                };
                                break;
                            case 2:
                                x = (SCREEN_TITLE_X + (((opponent) ? -1 : 1) * 230));
                                y = (FIGHT_WEAPONS_Y - 40);
                                if (OnoAlpha == 1){
                                    scaleX = 0.3;
                                    scaleY = 0.3;
                                } else {
                                    if (OnoAlpha > 0){
                                        scaleX = (scaleX + 0.1);
                                        scaleY = (scaleY + 0.1);
                                    };
                                };
                                break;
                            case 3:
                                x = (SCREEN_TITLE_X + (((opponent) ? -1 : 1) * 235));
                                y = (FIGHT_WEAPONS_Y - 42);
                                if (OnoAlpha == 1){
                                    scaleX = (0.4 * ((opponent) ? -1 : 1));
                                    scaleY = 0.4;
                                } else {
                                    if (OnoAlpha > 0){
                                        scaleX = (scaleX + (0.05 * ((opponent) ? -1 : 1)));
                                        scaleY = (scaleY + 0.05);
                                    };
                                };
                                break;
                        };
                        alpha = OnoAlpha;
                    };
                    if (DoSkip){
                        DoSkipFight();
                        DoSkip = false;
                    };
                };
            };
            StrikeAniTimer = new Timer(40);
            StrikeAlpha = 1;
            BulletAlpha = 0;
            ShieldAlpha = 0;
            DamageAlpha = 0;
            OnoAlpha = 0;
            const SPRITE_SCALE:Number = 1.5;
            const TWOPI:Number = (Math.PI * 2);
            strikeVal = 0;
            strikePhase = 0;
            damageIndicatorActive = false;
            weaponType = ((opponent) ? oppWeaponType : charWeaponType);
            onoID = (int((Math.random() * 6)) + FIGHT_ONO);
            DoSkip = false;
            catapultStrike = false;
            if (((opponent) ? oppFlag : charFlag) == 4){
                catapultStrike = true;
            } else {
                if (weaponType == 2){
                    onoID = GetArrowID(0, ((opponent) ? 1 : 0), weaponData, true, 3);
                } else {
                    if (weaponType == 3){
                        onoID = FIGHT_ARROW_SMASH;
                    };
                };
            };
            StrikeAniTimer.addEventListener(TimerEvent.TIMER, StrikeAniTimerEvent);
            StrikeAniTimer.start();
            inStrikeAni = true;
        };
        DoStrikeTimer = new Timer(200);
        if (((((isPvP) and (!(isReplay)))) and (!(isGuildBattle)))){
            if (!WaitingFor(Savegame[SG_PVP_REROLL_TIME])){
                Savegame[SG_PVP_REROLL_TIME] = (int((GameTime.getTime() / 1000)) + (70 * 60));
            };
        };
        if (isGuildBattle){
            RemoveAll();
            if (towerFightMode){
                Add(SCR_TOWER_BG);
            } else {
                if (isRaid){
                    Add(GUILD_RAID_BG);
                } else {
                    Add(GUILD_BATTLE_BG);
                };
            };
            if (towerFightMode){
                Add(LBL_HERO_OF_THE_DAY_TITLE);
                actor[LBL_HERO_OF_THE_DAY_TITLE].text = txt[TXT_TOWER_LEVEL].split("%1").join(String((towerLevel + 1)));
                actor[LBL_HERO_OF_THE_DAY_TITLE].x = (SCREEN_TITLE_X - (actor[LBL_HERO_OF_THE_DAY_TITLE].width / 2));
            } else {
                if (((isRaid) and (txt[TXT_DUNGEON_NAMES]))){
                    Add(LBL_HERO_OF_THE_DAY_TITLE);
                    actor[LBL_HERO_OF_THE_DAY_TITLE].text = txt[((TXT_DUNGEON_NAMES + raidLevel) - 1)];
                    actor[LBL_HERO_OF_THE_DAY_TITLE].x = (SCREEN_TITLE_X - (actor[LBL_HERO_OF_THE_DAY_TITLE].width / 2));
                } else {
                    if (((!(isRaid)) and (txt[TXT_FIGHTS_COUNTER]))){
                        Add(LBL_HERO_OF_THE_DAY_TITLE);
                        actor[LBL_HERO_OF_THE_DAY_TITLE].text = txt[TXT_FIGHTS_COUNTER].split("%1").join(String(fightNumber)).split("%2").join(String(guildFightCount));
                        actor[LBL_HERO_OF_THE_DAY_TITLE].x = (SCREEN_TITLE_X - (actor[LBL_HERO_OF_THE_DAY_TITLE].width / 2));
                    };
                };
            };
        } else {
            if (OnStage(QUESTBAR_BG)){
                Remove(QUESTBAR_BG, QUESTBAR_FILL, QUESTBAR_LIGHT, LBL_QUESTBAR_TEXT, QUEST_CANCEL, QUEST_SKIP, LBL_SCREEN_TITLE);
            } else {
                if (isPvP){
                    RemoveAll();
                    switch (tz){
                        case 0:
                            Add(SCREEN_ARENA_NIGHT);
                            break;
                        case 1:
                            Add(SCREEN_ARENA_DAWN);
                            break;
                        case 2:
                            Add(SCREEN_ARENA_DAY);
                            break;
                    };
                } else {
                    RemoveAll();
                    if (isMQ){
                        if (SelectedDungeon == 100){
                            Add(SCR_TOWER_BG);
                        } else {
                            Add(((SCR_QUEST_BG_1 + 50) + SelectedDungeon));
                        };
                    } else {
                        if (int(Savegame[SG_ACTION_STATUS]) == 2){
                            Add(GetQuestBG());
                        };
                    };
                };
            };
        };
        SetCnt(LIFEBAR_OPP, LIFEBAR_CHAR);
        SetCnt(LIFEBAR_FILL_OPP, LIFEBAR_FILL_CHAR);
        SetCnt(FIGHT_OPP_BORDER, FIGHT_CHAR_BORDER);
        SetCnt(FIGHT_BOX3, FIGHT_BOX1);
        SetCnt(FIGHT_REWARDGOLD, IF_GOLD);
        SetCnt(FIGHT_REWARDSILVER, IF_SILBER);
        SetCnt(FIGHT_REWARDMUSH, IF_PILZE);
        var _local3 = actor[LBL_NAMERANK_CHAR];
        with (_local3) {
            if (textDir == "right"){
                text = ((((("(" + String(charLevel)) + " ") + txt[TXT_HALL_LIST_COLUMN_4]) + ") ") + thisCharName);
            } else {
                text = (((((thisCharName + " (") + txt[TXT_HALL_LIST_COLUMN_4]) + " ") + String(charLevel)) + ")");
            };
            x = ((FIGHT_CHARX + 150) - int((textWidth / 2)));
            y = ((OPPY + 290) - textHeight);
        };
        _local3 = actor[LBL_NAMERANK_OPP];
        with (_local3) {
            if (textDir == "right"){
                text = ((((("(" + String(oppLevel)) + " ") + txt[TXT_HALL_LIST_COLUMN_4]) + ") ") + oppName);
            } else {
                text = (((((oppName + " (") + txt[TXT_HALL_LIST_COLUMN_4]) + " ") + String(oppLevel)) + ")");
            };
            x = ((OPPX + 150) - int((textWidth / 2)));
            y = ((OPPY + 290) - textHeight);
        };
        i = 0;
        while (i < 10) {
            _local3 = actor[(CHARBACKGROUND + i)];
            with (_local3) {
                x = (FIGHT_CHARX + 300);
                y = OPPY;
                scaleX = -1;
                scaleY = 1;
            };
            _local3 = actor[(CHARBACKGROUND2 + i)];
            with (_local3) {
                x = (FIGHT_CHARX + 300);
                y = OPPY;
                scaleX = -1;
                scaleY = 1;
            };
            i = (i + 1);
        };
        Add(SCREEN_FIGHT);
        if (oppMonster > 0){
            Add(((OPPMONSTER + oppMonster) - 1));
        } else {
            LoadCharacterImage(((alternateCharOppImg) ? OPPBACKGROUND2 : OPPBACKGROUND), false, oppVolk, oppMann, oppKaste, oppMouth, oppBeard, oppNose, oppEyes, oppBrows, oppEars, oppHair, oppSpecial, oppSpecial2);
        };
        if ((((thisCharMonster >= 391)) and ((thisCharMonster <= 393)))){
            Add(((FIGHT_COPYCAT + thisCharMonster) - 391));
        } else {
            LoadCharacterImage(((alternateCharOppImg) ? CHARBACKGROUND2 : CHARBACKGROUND), false, thisCharVolk, thisCharMann, thisCharKaste, thisCharMouth, thisCharBeard, thisCharNose, thisCharEyes, thisCharBrows, thisCharEars, thisCharHair, thisCharSpecial, thisCharSpecial2);
        };
        if (isGuildBattle){
            alternateCharOppImg = !(alternateCharOppImg);
        };
        AddSome(LBL_NAMERANK_CHAR, LBL_NAMERANK_OPP);
        AddSome(SHIELD_CHAR, SHIELD_OPP, WEAPON_CHAR, WEAPON_OPP, BULLET_CHAR, BULLET_OPP);
        Hide(SHIELD_CHAR, SHIELD_OPP, WEAPON_CHAR, WEAPON_OPP, BULLET_CHAR, BULLET_OPP);
        AddSome(LBL_DAMAGE_INDICATOR, FIGHT_ONO);
        Hide(LBL_DAMAGE_INDICATOR, FIGHT_ONO);
        actor[FIGHT_SKIP].addEventListener(MouseEvent.CLICK, DoSkipFight);
        actor[BATTLE_SKIP].addEventListener(MouseEvent.CLICK, DoSkipFight);
        actor[BATTLE_SKIPONE].addEventListener(MouseEvent.CLICK, DoSkipFight);
        if (isGuildBattle){
            Add(BATTLE_SKIP);
            Add(BATTLE_SKIPONE);
            Remove(FIGHT_SKIP);
            if (!towerFightMode){
                Add(LBL_FIGHT_PLAYERGUILD);
                Add(LBL_FIGHT_OPPGUILD);
            };
            _local3 = actor[LBL_FIGHT_PLAYERGUILD];
            with (_local3) {
                if (towerFightMode){
                    text = txt[TXT_TOWER_GUYS];
                } else {
                    text = ownGuild;
                };
                x = ((FIGHT_CHARX + 150) - (textWidth / 2));
            };
            _local3 = actor[LBL_FIGHT_OPPGUILD];
            with (_local3) {
                if (towerFightMode){
                    text = txt[TXT_TOWER_LEVEL].split("%1").join(String((towerLevel + 1)));
                } else {
                    text = oppGuild;
                };
                x = ((OPPX + 150) - (textWidth / 2));
            };
        };
        SetLifeBars();
        i = 0;
        while (i < 5) {
            if (isGuildBattle){
                actor[(LBL_FIGHT_CHAR_STAERKE + i)].text = "";
                actor[(LBL_FIGHT_OPP_STAERKE + i)].text = "";
                if (((towerFightMode) and (!((int(GuildBattleData[(i + 1)]) == 0))))){
                    actor[(LBL_FIGHT_CHAR_STAERKE_CAPTION + i)].text = txt[((TXT_COPYCAT_NAME + int(GuildBattleData[(i + 1)])) - 1)];
                } else {
                    actor[(LBL_FIGHT_CHAR_STAERKE_CAPTION + i)].text = String(GuildBattleData[(i + 1)]);
                };
                if (towerFightMode){
                    actor[(LBL_FIGHT_OPP_STAERKE + i)].text = String(fighterData[(i + 7)]);
                    actor[(LBL_FIGHT_OPP_STAERKE_CAPTION + i)].text = txt[(TXT_CHAR_STAERKE + i)];
                } else {
                    if (int(GuildBattleData[(i + 7)]) != 0){
                        if (-(int(GuildBattleData[(i + 7)])) >= 400){
                            actor[(LBL_FIGHT_OPP_STAERKE_CAPTION + i)].text = txt[((TXT_TOWER_ENEMY_NAMES + -(int(GuildBattleData[(i + 7)]))) - 400)].split("|")[0];
                        } else {
                            if (-(int(GuildBattleData[(i + 7)])) > 220){
                                actor[(LBL_FIGHT_OPP_STAERKE_CAPTION + i)].text = txt[((TXT_NEW_MONSTER_NAMES + -(int(GuildBattleData[(i + 7)]))) - 221)];
                            } else {
                                actor[(LBL_FIGHT_OPP_STAERKE_CAPTION + i)].text = txt[((TXT_MONSTER_NAME + -(int(GuildBattleData[(i + 7)]))) - 1)];
                            };
                        };
                    } else {
                        actor[(LBL_FIGHT_OPP_STAERKE_CAPTION + i)].text = String(GuildBattleData[(i + 7)]);
                    };
                };
            } else {
                actor[(LBL_FIGHT_CHAR_STAERKE + i)].text = String(fighterData[(i + 1)]);
                actor[(LBL_FIGHT_OPP_STAERKE + i)].text = String(fighterData[(i + 7)]);
                actor[(LBL_FIGHT_CHAR_STAERKE_CAPTION + i)].text = txt[(TXT_CHAR_STAERKE + i)];
                actor[(LBL_FIGHT_OPP_STAERKE_CAPTION + i)].text = txt[(TXT_CHAR_STAERKE + i)];
            };
            i = (i + 1);
        };
        if (textDir == "right"){
            i = 0;
            while (i < 5) {
                actor[(LBL_FIGHT_CHAR_STAERKE_CAPTION + i)].x = ((FIGHT_CHAR_PROP_COLUMN_2_X + 30) - actor[(LBL_FIGHT_CHAR_STAERKE_CAPTION + i)].textWidth);
                actor[(LBL_FIGHT_OPP_STAERKE_CAPTION + i)].x = ((FIGHT_CHAR_PROP_COLUMN_4_X + 30) - actor[(LBL_FIGHT_OPP_STAERKE_CAPTION + i)].textWidth);
                actor[(LBL_FIGHT_CHAR_STAERKE + i)].x = ((FIGHT_CHAR_PROP_COLUMN_1_X + 40) - actor[(LBL_FIGHT_CHAR_STAERKE + i)].textWidth);
                actor[(LBL_FIGHT_OPP_STAERKE + i)].x = ((FIGHT_CHAR_PROP_COLUMN_3_X + 40) - actor[(LBL_FIGHT_OPP_STAERKE + i)].textWidth);
                i = (i + 1);
            };
        };
        strikeBreak = false;
        var inStrikeAni:* = false;
        DoStrikeTimer.addEventListener(TimerEvent.TIMER, DoStrikeEvent);
        DoStrikeTimer.start();
    };
    isGuildBattle = false;
    if (GuildBattleData){
        isGuildBattle = true;
    };
    hasFoughtGuildBattle = isGuildBattle;
    charWeapon = weaponData[SG_ITM_PIC];
    oppWeapon = weaponData[(SG_ITM_SIZE + SG_ITM_PIC)];
    charHasWeapon = (((int(weaponData[SG_ITM_TYP]) > 0)) and ((int(weaponData[SG_ITM_PIC]) > 0)));
    oppHasWeapon = (((int(weaponData[(SG_ITM_SIZE + SG_ITM_TYP)]) > 0)) and ((int(weaponData[(SG_ITM_SIZE + SG_ITM_PIC)]) > 0)));
    charWeaponType = 1;
    oppWeaponType = 1;
    tz = Tageszeit();
    hasLostMQ = false;
    actor[LBL_ERROR].text = "";
    if (isGuildBattle){
        Remove(GILDE_CHAT);
    };
    switch (tz){
        case 0:
            Load(SCREEN_ARENA_NIGHT);
            break;
        case 1:
            Load(SCREEN_ARENA_DAWN);
            break;
        case 2:
            Load(SCREEN_ARENA_DAY);
            break;
    };
    while (charWeapon > 1000) {
        charWeapon = (charWeapon - 1000);
        charWeaponType = (charWeaponType + 1);
    };
    while (oppWeapon > 1000) {
        oppWeapon = (oppWeapon - 1000);
        oppWeaponType = (oppWeaponType + 1);
    };
    charShield = (int(weaponData[((SG_ITM_SIZE * 2) + SG_ITM_PIC)]) * (((int(weaponData[((SG_ITM_SIZE * 2) + SG_ITM_TYP)]) == 0)) ? 0 : 1));
    oppShield = (weaponData[((SG_ITM_SIZE * 3) + SG_ITM_PIC)] * (((int(weaponData[((SG_ITM_SIZE * 3) + SG_ITM_TYP)]) == 0)) ? 0 : 1));
    if (charHasWeapon){
        Load(GetWeaponSound(charWeaponType, charWeapon, 0));
        Load(GetWeaponSound(charWeaponType, charWeapon, 1));
        if (((!((charWeaponType == 2))) and (!((oppShield == 0))))){
            Load(GetWeaponSound(charWeaponType, charWeapon, 2));
        };
        Load(GetWeaponSound(charWeaponType, charWeapon, 3));
    };
    if (oppHasWeapon){
        Load(GetWeaponSound(oppWeaponType, oppWeapon, 0));
        Load(GetWeaponSound(oppWeaponType, oppWeapon, 1));
        if (((!((oppWeaponType == 2))) and (!((charShield == 0))))){
            Load(GetWeaponSound(oppWeaponType, oppWeapon, 2));
        };
        Load(GetWeaponSound(oppWeaponType, oppWeapon, 3));
    } else {
        if (oppWeapon == -1){
            Load(WEAPON_CLAW, WEAPON_CLAW2, WEAPON_CLAW3, WEAPON_CLAW4);
        } else {
            if (oppWeapon == -3){
                Load(WEAPON_SPLAT, WEAPON_SPLAT2, WEAPON_SPLAT3);
            } else {
                if (oppWeapon == -4){
                    Load(WEAPON_STICK);
                } else {
                    if (oppWeapon == -5){
                        Load(WEAPON_BONE);
                    } else {
                        if (oppWeapon == -6){
                            Load(WEAPON_STONEFIST);
                        } else {
                            if (oppWeapon == -7){
                                Load(WEAPON_FIRE, WEAPON_FIRE2, WEAPON_FIRE3);
                            } else {
                                if (oppWeapon == -2){
                                    Load(WEAPON_SWOOSH, WEAPON_SWOOSH2, WEAPON_SWOOSH3);
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    i = 0;
    while (i < 6) {
        Load((FIGHT_ONO + i));
        i = (i + 1);
    };
    if ((((charWeaponType == 3)) or ((oppWeaponType == 3)))){
        Load(FIGHT_ARROW_SMASH);
    };
    Load(SCREEN_FIGHT);
    if (int(Savegame[SG_ACTION_STATUS]) == 2){
        Load(GetQuestBG());
    };
    if (!charHasWeapon){
        charWeapon = int(weaponData[SG_ITM_TYP]);
        Load(GetWeaponSound(charWeaponType, charWeapon, 0));
        Load(GetWeaponSound(charWeaponType, charWeapon, 1));
        if (((!((charWeaponType == 2))) and (!((oppShield == 0))))){
            Load(GetWeaponSound(charWeaponType, charWeapon, 2));
        };
        Load(GetWeaponSound(charWeaponType, charWeapon, 3));
        SetCnt(WEAPON_CHAR, (((charWeapon == 0)) ? WEAPON_FIST : (((charWeapon == -1)) ? WEAPON_CLAW : WEAPON_SWOOSH)), -30, -30, true);
        SetCnt(BULLET_CHAR, C_EMPTY);
        charWeaponType = 1;
    } else {
        if (charWeaponType == 1){
            SetCnt(WEAPON_CHAR, GetItemID(0, 0, weaponData), -30, -30, true);
            SetCnt(BULLET_CHAR, C_EMPTY);
        } else {
            if (charWeaponType == 2){
                SetCnt(WEAPON_CHAR, GetItemID(0, 0, weaponData), 30, -30, true);
                SetCnt(BULLET_CHAR, GetArrowID(0, 0, weaponData, true, 0));
                Load(GetArrowID(0, 0, weaponData, true, 1), GetArrowID(0, 0, weaponData, true, 2), GetArrowID(0, 0, weaponData, true, 3));
            } else {
                if (charWeaponType == 3){
                    SetCnt(WEAPON_CHAR, GetItemID(0, 0, weaponData));
                    SetCnt(BULLET_CHAR, GetArrowID(0, 0, weaponData, true));
                };
            };
        };
    };
    if (!oppHasWeapon){
        oppWeapon = int(weaponData[(SG_ITM_SIZE + SG_ITM_TYP)]);
        Load(GetWeaponSound(oppWeaponType, oppWeapon, 0));
        Load(GetWeaponSound(oppWeaponType, oppWeapon, 1));
        if (((!((oppWeaponType == 2))) and (!((charShield == 0))))){
            Load(GetWeaponSound(oppWeaponType, oppWeapon, 2));
        };
        Load(GetWeaponSound(oppWeaponType, oppWeapon, 3));
        if (oppWeapon == -4){
            SetCnt(WEAPON_OPP, WEAPON_STICK, -30, -30, true);
        } else {
            if (oppWeapon == -5){
                SetCnt(WEAPON_OPP, WEAPON_BONE, -30, -30, true);
            } else {
                if (oppWeapon == -6){
                    SetCnt(WEAPON_OPP, WEAPON_STONEFIST, -30, -30, true);
                } else {
                    SetCnt(WEAPON_OPP, (((oppWeapon == 0)) ? WEAPON_FIST : C_EMPTY), -30, -30, true);
                };
            };
        };
        SetCnt(BULLET_OPP, C_EMPTY);
        oppWeaponType = 1;
    } else {
        if (oppWeaponType == 1){
            SetCnt(WEAPON_OPP, GetItemID(0, 1, weaponData), -30, -30, true);
            SetCnt(BULLET_OPP, C_EMPTY);
        } else {
            if (oppWeaponType == 2){
                SetCnt(WEAPON_OPP, GetItemID(0, 1, weaponData), 30, -30, true);
                SetCnt(BULLET_OPP, GetArrowID(0, 1, weaponData, true, 0));
                Load(GetArrowID(0, 1, weaponData, true, 1), GetArrowID(0, 1, weaponData, true, 2), GetArrowID(0, 1, weaponData, true, 3));
            } else {
                if (oppWeaponType == 3){
                    SetCnt(WEAPON_OPP, GetItemID(0, 1, weaponData));
                    SetCnt(BULLET_OPP, GetArrowID(0, 1, weaponData, true));
                };
            };
        };
    };
    if (charShield > 0){
        SetCnt(SHIELD_CHAR, GetItemID(0, 2, weaponData), 0, 0, true);
    } else {
        SetCnt(SHIELD_CHAR, C_EMPTY);
    };
    if (oppShield > 0){
        SetCnt(SHIELD_OPP, GetItemID(0, 3, weaponData), 0, 0, true);
    } else {
        SetCnt(SHIELD_OPP, C_EMPTY);
    };
    oppVolk = int(faceData[17]);
    oppMann = (int(faceData[18]) == 1);
    oppKaste = int(faceData[19]);
    thisCharVolk = int(faceData[2]);
    thisCharMann = (int(faceData[3]) == 1);
    thisCharKaste = int(faceData[4]);
    thisCharMouth = int(faceData[5]);
    thisCharBeard = int(faceData[9]);
    thisCharNose = int(faceData[10]);
    thisCharEyes = int(faceData[8]);
    thisCharBrows = int(faceData[7]);
    thisCharEars = int(faceData[11]);
    thisCharHair = int(faceData[6]);
    thisCharSpecial = int(faceData[12]);
    thisCharSpecial2 = int(faceData[13]);
    thisCharMonster = ((int(faceData[5]))<0) ? -(int(faceData[5])) : 0;
    oppMouth = int(faceData[20]);
    oppBeard = int(faceData[24]);
    oppNose = int(faceData[25]);
    oppEyes = int(faceData[23]);
    oppBrows = int(faceData[22]);
    oppEars = int(faceData[26]);
    oppHair = int(faceData[21]);
    oppSpecial = int(faceData[27]);
    oppSpecial2 = int(faceData[28]);
    var oppLevel:* = int(faceData[16]);
    oppMonster = ((int(faceData[20]))<0) ? -(int(faceData[20])) : 0;
    oppName = "";
    if (oppMonster > 0){
        if (oppMonster >= 400){
            oppName = txt[((TXT_TOWER_ENEMY_NAMES + oppMonster) - 400)].split("|")[0];
        } else {
            if (oppMonster > 220){
                oppName = txt[((TXT_NEW_MONSTER_NAMES + oppMonster) - 221)];
            } else {
                oppName = txt[((TXT_MONSTER_NAME + oppMonster) - 1)];
            };
        };
    } else {
        oppName = faceData[15];
        if (!isGuildBattle){
            addSuggestNames(oppName);
        };
    };
    thisCharName = (((faceData[0] == "")) ? actor[INP_NAME].getChildAt(1).text : faceData[0]);
    if (((isGuildBattle) and (towerFightMode))){
        if (thisCharMonster >= 391){
            thisCharName = txt[((TXT_COPYCAT_NAME + thisCharMonster) - 391)];
        };
    };
    charFullLife = fighterData[0];
    oppFullLife = fighterData[6];
    charLife = ((isGuildBattle) ? (((int(GuildBattleData[0]) < 0)) ? (charFullLife / -(int(GuildBattleData[0]))) : int(GuildBattleData[0])) : charFullLife);
    charDamage = 0;
    oppLife = ((isGuildBattle) ? (((int(GuildBattleData[6]) < 0)) ? (oppFullLife / -(int(GuildBattleData[6]))) : int(GuildBattleData[6])) : oppFullLife);
    var oppDamage:* = 0;
    charFlag = 0;
    oppFlag = 0;
    fightRound = 0;
    oppStrike = false;
    var charLevel:* = int(faceData[(16 - 15)]);
    isRaid = false;
    if (!isGuildBattle){
        alternateCharOppImg = false;
    };
    if (((isGuildBattle) and ((ownGuild == "")))){
        isRaid = true;
    };
    if (oppMonster > 0){
        Load(((OPPMONSTER + oppMonster) - 1));
    } else {
        LoadCharacterImage(((alternateCharOppImg) ? OPPBACKGROUND2 : OPPBACKGROUND), true, oppVolk, oppMann, oppKaste, oppMouth, oppBeard, oppNose, oppEyes, oppBrows, oppEars, oppHair, oppSpecial, oppSpecial2);
    };
    if ((((thisCharMonster >= 391)) and ((thisCharMonster <= 393)))){
        Load(((FIGHT_COPYCAT + thisCharMonster) - 391));
    } else {
        LoadCharacterImage(((alternateCharOppImg) ? CHARBACKGROUND2 : CHARBACKGROUND), true, thisCharVolk, thisCharMann, thisCharKaste, thisCharMouth, thisCharBeard, thisCharNose, thisCharEyes, thisCharBrows, thisCharEars, thisCharHair, thisCharSpecial, thisCharSpecial2);
    };
    if (isGuildBattle){
        if (towerFightMode){
            Load(SCR_TOWER_BG);
        } else {
            if (isRaid){
                Load(GUILD_RAID_BG);
            } else {
                Load(GUILD_BATTLE_BG);
            };
        };
    };
    WhenLoaded(DoShowFightScreen);
}

public function GetAdvent():int{
    var tmpNow:Date;
    var tmpAdventEnd:Date;
    var tmpDate:Date;
    var advent:int;
    switch (lang_code){
        case "de":
            break;
        default:
            return (0);
    };
    tmpNow = new Date();
    tmpAdventEnd = new Date(tmpNow.getFullYear(), 11, 27);
    tmpDate = new Date(tmpNow.getFullYear(), 11, 24);
    while (tmpDate.getDay() != 0) {
        tmpDate.setDate((tmpDate.getDate() - 1));
    };
    if (tmpNow.getTime() < tmpAdventEnd.getTime()){
        advent = 4;
        while (advent >= 1) {
            trace("Advent", advent, tmpNow.toString());
            if (tmpNow.getTime() >= tmpDate.getTime()){
                return (advent);
            };
            tmpDate.setDate((tmpDate.getDate() - 7));
            advent--;
        };
    };
    return (0);
}


public function ShowQuestScreen(evt:Event=undefined){
    var DoShowQuestScreen:* = null;
    var evt:* = evt;
    DoShowQuestScreen = function (evt:Event=undefined){
        var questBarTimer:* = null;
        var QuestBarUpdate:* = null;
        var evt:* = evt;
        QuestBarUpdate = function (evt:TimerEvent=undefined){
            var evt:* = evt;
            if (!OnStage(QUESTBAR_BG)){
                questBarTimer.stop();
                questBarTimer.removeEventListener(TimerEvent.TIMER, QuestBarUpdate);
                SetTitleBar(WaitingTime(Savegame[SG_ACTION_ENDTIME]));
                return;
            };
            if (WaitingFor(Savegame[SG_ACTION_ENDTIME])){
                var _local3 = actor[QUESTBAR_FILL];
                with (_local3) {
                    width = (WaitingProgress((Savegame[SG_ACTION_ENDTIME] - Savegame[(SG_QUEST_OFFER_DURATION1 + (Savegame[SG_ACTION_INDEX] - 1))]), Savegame[SG_ACTION_ENDTIME]) * 555);
                    actor[QUESTBAR_LIGHT].x = ((x + width) - 5);
                };
                _local3 = actor[LBL_QUESTBAR_TEXT];
                with (_local3) {
                    text = WaitingTime(Savegame[SG_ACTION_ENDTIME]);
                    SetTitleBar(text);
                    x = int((QUESTBAR_LABEL_X - (textWidth / 2)));
                };
            } else {
                questBarTimer.stop();
                questBarTimer.removeEventListener(TimerEvent.TIMER, QuestBarUpdate);
                SendAction(ACT_SCREEN_TAVERNE);
            };
        };
        questBarTimer = new Timer(200);
        RemoveAll();
        Add(GetQuestBG());
        Add(SCREEN_QUEST);
        var _local3 = actor[LBL_SCREEN_TITLE];
        with (_local3) {
            text = GetQuestTitle((int(Savegame[SG_ACTION_INDEX]) - 1));
            x = (SCREEN_TITLE_X - int((textWidth / 2)));
            y = SCREEN_TITLE_Y_QUEST;
        };
        actor[QUESTBAR_FILL].width = 0;
        actor[QUESTBAR_LIGHT].x = (actor[QUESTBAR_FILL].x - 5);
        questBarTimer.addEventListener(TimerEvent.TIMER, QuestBarUpdate);
        questBarTimer.start();
        QuestBarUpdate();
        if (skipAllowed){
            actor[QUEST_CANCEL].x = int((QUEST_CANCEL_X + 5));
            Show(QUEST_SKIP);
        } else {
            actor[QUEST_CANCEL].x = int((QUEST_CANCEL_X - (actor[QUEST_CANCEL].width / 2)));
            Hide(QUEST_SKIP);
        };
        CheckWrongPage(ACT_SCREEN_TAVERNE);
        TryShowTV();
    };
    Load(SCREEN_QUEST);
    Load(GetQuestBG());
    if (textDir == "right"){
        SetBtnText(QUEST_SKIP, ("~P " + txt[TXT_SKIP_FIGHT]));
    };
    WhenLoaded(DoShowQuestScreen);
}

public function RefreshTimeBar(OfferTime:Number=0){
    var tmpTime:* = NaN;
    var tmpText:* = null;
    var OfferTime:int = OfferTime;
    var tmpX:* = 0;
    if (OfferTime < 0){
        if ((Number(Savegame[SG_TIMEBAR]) + OfferTime) < 0){
            OfferTime = 0;
        };
    };
    var _local3 = actor[TIMEBAR_FILL];
    with (_local3) {
        if (OfferTime < 0){
            tmpX = (((Number(Savegame[SG_TIMEBAR]) + OfferTime) / 6000) * 555);
        } else {
            tmpX = ((Number(Savegame[SG_TIMEBAR]) / 6000) * 555);
        };
        width = int(tmpX);
        tmpX = int((x + width));
    };
    _local3 = actor[TIMEBAR_FILL];
    with (_local3) {
        if (OfferTime < 0){
            width = int(((-(OfferTime) / 6000) * 555));
            x = tmpX;
        } else {
            width = int(((OfferTime / 6000) * 555));
            x = tmpX;
        };
    };
    tmpTime = int(Savegame[SG_TIMEBAR]);
    tmpText = "";
    if (tmpTime > (60 * 60)){
        tmpText = (tmpText + (String(int((tmpTime / (60 * 60)))) + ":"));
        tmpTime = (tmpTime % (60 * 60));
        if ((tmpTime / 60) < 10){
            tmpText = (tmpText + "0");
        };
    };
    tmpText = (tmpText + (String(int((tmpTime / 60))) + ":"));
    tmpTime = (tmpTime % 60);
    if (tmpTime < 10){
        tmpText = (tmpText + "0");
    };
    tmpText = (tmpText + String(int(tmpTime)));
    if (textDir == "right"){
        tmpText = ((tmpText + " :") + txt[TXT_AUSDAUER]);
    } else {
        tmpText = ((txt[TXT_AUSDAUER] + ": ") + tmpText);
    };
    if (OfferTime != 0){
        tmpText = (tmpText + (" (" + (((OfferTime > 0)) ? "+" : "-")));
        tmpText = (tmpText + (String(int((Math.abs(OfferTime) / 60))) + ":"));
        if ((Math.abs(OfferTime) % 60) < 10){
            tmpText = (tmpText + "0");
        };
        tmpText = (tmpText + (String(int((Math.abs(OfferTime) % 60))) + ")"));
    };
    tmpTime = Number(Savegame[SG_TIMEBAR]);
    if (textDir == "right"){
        tmpText = (" :" + txt[TXT_AUSDAUER]);
        tmpText = (String(Number((tmpTime / 60)).toFixed(1)).split(".0")[0] + tmpText);
    } else {
        tmpText = (txt[TXT_AUSDAUER] + ": ");
        tmpText = (tmpText + String(Number((tmpTime / 60)).toFixed(1)).split(".0")[0]);
    };
    if (OfferTime != 0){
        if (textDir == "right"){
            tmpText = (((((OfferTime > 0)) ? "+" : "-") + ") ") + tmpText);
            tmpText = (("(" + String(Number((Math.abs(OfferTime) / 60)).toFixed(1)).split(".0")[0]) + tmpText);
        } else {
            tmpText = (tmpText + (" (" + (((OfferTime > 0)) ? "+" : "-")));
            tmpText = (tmpText + (String(Number((Math.abs(OfferTime) / 60)).toFixed(1)).split(".0")[0] + ")"));
        };
    };
    _local3 = actor[LBL_TIMEBAR_TEXT];
    with (_local3) {
        text = tmpText;
        x = int((TIMEBAR_LABEL_X - (textWidth / 2)));
    };
}

public function RequestTV(evt:Event=undefined){
    if (tvFunctionName != ""){
        trc((("Calling TV function \"" + tvFunctionName) + "\" with parameter \"showtv\"!"));
        ExternalInterface.call(tvFunctionName, "showtv", (((((Savegame[SG_PLAYER_ID] + "_") + Savegame[SG_PAYMENT_ID]) + "_") + ServerID) + "_1"), Savegame[SG_GENDER], tvReturnValue);
        tvPollTimer.delay = tvPollLong;
    } else {
        trc("Error: No TV function set!");
    };
    tvStatusDest = 0;
}

public function TryShowTV(evt:Event=undefined){
    var evt:* = evt;
    if (tvTest){
        tvStatusDest = 1;
        tvTimer.start();
        tvTest = false;
    } else {
        if (((((!((tvFunctionName == ""))) and (!(disableTV)))) and (!(preventTv)))){
            if (!evt){
                tvPollTimer.start();
                tvPollTimer.delay = tvPollNormal;
            } else {
                if (((!(OnStage(TAVERNE_BG))) and (!(OnStage(QUESTBAR_BG))))){
                    tvPollTimer.stop();
                    return;
                };
            };
            trc((("Calling TV function \"" + tvFunctionName) + "\" with parameter \"requesttv\"!"));
            try {
                tvReturnValue = ExternalInterface.call(tvFunctionName, "requesttv", (((((Savegame[SG_PLAYER_ID] + "_") + Savegame[SG_PAYMENT_ID]) + "_") + ServerID) + "_1"), Savegame[SG_GENDER], 0);
            } catch(e:Error) {
                trc(("There was an error: " + e.message));
                tvPollTimer.delay = tvPollLong;
            };
            trc(("Return value is " + String(tvReturnValue)));
            if (tvReturnValue > 0){
                tvStatusDest = 1;
                tvPollTimer.delay = tvPollLong;
            } else {
                tvStatusDest = 0;
                if (tvReturnValue == -2){
                    tvPollTimer.stop();
                } else {
                    if (tvReturnValue == -1){
                        tvPollTimer.delay = tvPollLong;
                    } else {
                        tvPollTimer.delay = tvPollNormal;
                    };
                };
            };
            if (tvStatusDest != tvStatus){
                tvTimer.start();
            };
        } else {
            if (((!(disableTV)) and (!(preventTv)))){
                trc("Notice: No TV function set!");
            };
        };
    };
}

public function ShowTaverneScreen(evt:Event=undefined){
    var DoShowTaverneScreen:* = null;
    var evt:* = evt;
    DoShowTaverneScreen = function (evt:Event=undefined){
        var i:* = 0;
        var questType:* = 0;
        var HutBlinzelTimer:* = null;
        var HutBlinzelStep:* = 0;
        var BarkeeperStep:* = 0;
        var HutBlinzelTimerEvent:* = null;
        var evt:* = evt;
        HutBlinzelTimerEvent = function (evt:TimerEvent){
            if (OnStage(TAVERNE_BG)){
                HutBlinzelStep++;
                if (HutBlinzelStep > 70){
                    Hide(TAVERNE_HUTMANN_BLINZELN);
                    HutBlinzelStep = int((Math.random() * 30));
                } else {
                    if (HutBlinzelStep > 68){
                        Show(TAVERNE_HUTMANN_BLINZELN);
                    };
                };
                BarkeeperStep++;
                if (BarkeeperStep >= 12){
                    Hide(TAVERNE_BARKEEPER1);
                    Hide(TAVERNE_BARKEEPER2);
                    BarkeeperStep = 0;
                } else {
                    if (BarkeeperStep >= 9){
                        Show(TAVERNE_BARKEEPER1);
                        Hide(TAVERNE_BARKEEPER2);
                    } else {
                        if (BarkeeperStep >= 6){
                            Hide(TAVERNE_BARKEEPER1);
                            Show(TAVERNE_BARKEEPER2);
                        } else {
                            if (BarkeeperStep >= 3){
                                Show(TAVERNE_BARKEEPER1);
                                Hide(TAVERNE_BARKEEPER2);
                            } else {
                                Hide(TAVERNE_BARKEEPER1);
                                Hide(TAVERNE_BARKEEPER2);
                            };
                        };
                    };
                };
                actor[TAVERNE_KERZEN].visible = (Math.random() >= 0.5);
            } else {
                HutBlinzelTimer.stop();
                HutBlinzelTimer.removeEventListener(TimerEvent.TIMER, HutBlinzelTimerEvent);
            };
        };
        questType = GetQuestRandom(0, 5);
        HutBlinzelTimer = new Timer(50);
        HutBlinzelStep = 0;
        BarkeeperStep = 0;
        SetCnt(TIMEBAR_FILL, TIMEBAR_FILL);
        SetCnt(QO_REWARDGOLD, IF_GOLD);
        SetCnt(QO_REWARDSILVER, IF_SILBER);
        RemoveAll();
        Add(SCREEN_TAVERNE);
        if (GetAdvent() != 0){
            Add(((TAVERN_ADVENT + GetAdvent()) - 1));
        };
        if (beerFest){
            Add(BEERFEST);
            i = 0;
            while (i < 4) {
                Add((TV + i));
                i = (i + 1);
            };
            Add(CA_TV);
        };
        if (specialAction > 0){
            Add(((SPECIAL_ACTION + specialAction) - 1));
            actor[((SPECIAL_ACTION + specialAction) - 1)].mouseEnabled = false;
            if (!specialActionHint){
                Add(TAVERNE_BARKEEPER_HINT);
                actor[TAVERNE_BARKEEPER_HINT].mouseEnabled = false;
                AnimateAch(TAVERNE_BARKEEPER_HINT, ((100 + TAVERNE_BARKEEPER_Y) - 215));
            };
            i = 0;
            while (i < 4) {
                Add((TV + i));
                i = (i + 1);
            };
            Add(CA_TV);
        };
        RefreshTimeBar();
        CheckWrongPage(ACT_SCREEN_TAVERNE);
        Hide(TAVERNE_HUTMANN_BLINZELN);
        Hide(TAVERNE_BARKEEPER1);
        Hide(TAVERNE_BARKEEPER2);
        i = 0;
        while (i < 5) {
            actor[(TAVERNE_QUEST1 + i)].visible = (questType == i);
            i = (i + 1);
        };
        DefineBunch(TAVERNE_QUESTOVL, (TAVERNE_QUESTOVL1 + questType));
        HutBlinzelTimer.addEventListener(TimerEvent.TIMER, HutBlinzelTimerEvent);
        TryShowTV();
        if (!lightMode){
            HutBlinzelTimer.start();
        } else {
            HutBlinzelTimer.stop();
        };
    };
    if (int(Savegame[SG_ACTION_STATUS]) == 2){
        ShowQuestScreen();
        return;
    };
    forceAdventure = false;
    actor[QUEST_SLOT].alpha = 1;
    if (OnStage(TAVERNE_BG)){
        Remove(QUESTOFFER);
        Remove(BEEROFFER);
        Add(TAVERNE_CAS);
        RefreshTimeBar();
        return;
    };
    Load(SCREEN_TAVERNE);
    Load(QUESTOFFER);
    Load(BEEROFFER);
    if (beerFest){
        Load(BEERFEST);
    };
    if (specialAction > 0){
        Load(((SPECIAL_ACTION + specialAction) - 1));
        Load(TAVERNE_BARKEEPER_HINT);
    };
    if (GetAdvent() != 0){
        Load(((TAVERN_ADVENT + GetAdvent()) - 1));
    };
    WhenLoaded(DoShowTaverneScreen);
}

public function ShowStallScreen(evt:Event=undefined){
    var i:* = 0;
    var DoShowStall:* = null;
    var evt:* = evt;
    DoShowStall = function (){
        var HandTimer:* = null;
        var BauerHandEvent:* = null;
        BauerHandEvent = function (evt:TimerEvent){
            var iHand:int;
            var i:int;
            iHand = int((Math.random() * 5));
            if (((!(OnStage(STALL_BG_GUT))) and (!(OnStage(STALL_BG_BOESE))))){
                HandTimer.stop();
                HandTimer.removeEventListener(TimerEvent.TIMER, BauerHandEvent);
            };
            i = 0;
            while (i < 5) {
                actor[(STALL_ARME1 + i)].visible = Boolean((i == iHand));
                i++;
            };
        };
        HandTimer = new Timer(200);
        RemoveAll();
        actor[LBL_STALL_TITEL].text = txt[TXT_STALL_TITEL];
        if (textDir == "right"){
            actor[LBL_STALL_TITEL].x = ((actor[LBL_STALL_TEXT].x + actor[LBL_STALL_TEXT].width) - actor[LBL_STALL_TITEL].textWidth);
        };
        actor[LBL_STALL_TEXT].text = txt[TXT_STALL_TEXT];
        Arabize(LBL_STALL_TEXT);
        actor[LBL_STALL_GAIN].text = "";
        if ((((CharVolk >= 5)) and (!(param_censored)))){
            Add(STALL_BOESE);
        } else {
            Add(STALL_GUT);
        };
        Add(SCREEN_STALL);
        if (Tageszeit() == 1){
            Remove(STALL_NIGHT);
        } else {
            if (Tageszeit() == 2){
                Remove(STALL_NIGHT, STALL_DAWN);
            };
        };
        HandTimer.addEventListener(TimerEvent.TIMER, BauerHandEvent);
        HandTimer.start();
    };
    if (((OnStage(STALL_BG_GUT)) or (OnStage(STALL_BG_BOESE)))){
        return;
    };
    Load(SCREEN_STALL);
    if ((((CharVolk >= 5)) and (!(param_censored)))){
        Load(STALL_BOESE);
        Load(STALL_OVL_BOESE1, STALL_OVL_BOESE2, STALL_OVL_BOESE3, STALL_OVL_BOESE4);
        i = 0;
        while (i < 4) {
            Load(((SND_MOUNT_1 + i) + 4));
            i = (i + 1);
        };
    } else {
        Load(STALL_GUT);
        Load(STALL_OVL_GUT1, STALL_OVL_GUT2, STALL_OVL_GUT3, STALL_OVL_GUT4);
        i = 0;
        while (i < 4) {
            Load((SND_MOUNT_1 + i));
            i = (i + 1);
        };
    };
    WhenLoaded(DoShowStall);
}

public function ShowArenaScreen(oppName:String, oppGilde:String, oppStufe:int){
    var tz:* = 0;
    var DoShowArenaScreen:* = null;
    var PvPDelayCheck:* = null;
    var oppName:* = oppName;
    var oppGilde:* = oppGilde;
    var oppStufe:* = oppStufe;
    DoShowArenaScreen = function (evt:Event=undefined){
        var evt:* = evt;
        RemoveAll();
        switch (tz){
            case 0:
                Add(SCREEN_ARENA_NIGHT);
                break;
            case 1:
                Add(SCREEN_ARENA_DAWN);
                break;
            case 2:
                Add(SCREEN_ARENA_DAY);
                break;
        };
        if (oppName != ""){
            var _local3 = actor[LBL_WINDOW_TITLE];
            with (_local3) {
                text = txt[TXT_ARENA_TITLE];
                x = ((IF_WIN_X + IF_WIN_WELCOME_X) - int((textWidth / 2)));
            };
            Add(SCREEN_ARENA);
            if (Capabilities.version.substr(0, 3) != "IOS"){
                if (lightMode){
                    Remove(ARENA_FEUER);
                };
            };
            PvPDelayTimer.addEventListener(TimerEvent.TIMER, PvPDelayCheck);
            PvPDelayTimer.start();
            PvPDelayCheck();
            actor[INP_ARENA_ENEMY].getChildAt(1).text = oppName;
        };
    };
    PvPDelayCheck = function (evt:TimerEvent=undefined){
        if (!OnStage(INP_ARENA_ENEMY)){
            PvPDelayTimer.removeEventListener(TimerEvent.TIMER, PvPDelayCheck);
            PvPDelayTimer.stop();
            return;
        };
        if (WaitingFor(Savegame[SG_PVP_REROLL_TIME])){
            if (textDir == "right"){
                actor[LBL_ARENA_TEXT].text = (((((((((txt[TXT_ARENA_4] + " (") + String(oppStufe)) + " ") + txt[TXT_HALL_LIST_COLUMN_4]) + ") ") + (((oppGilde == "")) ? "" : (("[" + oppGilde) + "] "))) + oppName) + " ") + txt[TXT_ARENA_3]);
            } else {
                actor[LBL_ARENA_TEXT].text = (((((((((txt[TXT_ARENA_3] + " ") + oppName) + (((oppGilde == "")) ? "" : ((" [" + oppGilde) + "]"))) + " (") + txt[TXT_HALL_LIST_COLUMN_4]) + " ") + String(oppStufe)) + ") ") + txt[TXT_ARENA_4]);
            };
            actor[LBL_ARENA_DELAY].text = WaitingTime(Savegame[SG_PVP_REROLL_TIME]);
            SetTitleBar(WaitingTime(Savegame[SG_PVP_REROLL_TIME]));
            if (textDir == "right"){
                SetBtnText(ARENA_OK, ("(~P1) " + txt[TXT_OK]));
            } else {
                SetBtnText(ARENA_OK, (txt[TXT_OK] + " (1~P)"));
            };
            Show(LBL_ARENA_DELAY);
        } else {
            if (textDir == "right"){
                actor[LBL_ARENA_TEXT].text = (((((((((txt[TXT_ARENA_2] + " (") + String(oppStufe)) + " ") + txt[TXT_HALL_LIST_COLUMN_4]) + ") ") + (((oppGilde == "")) ? "" : (("[" + oppGilde) + "] "))) + oppName) + " ") + txt[TXT_ARENA_1]);
            } else {
                actor[LBL_ARENA_TEXT].text = (((((((((txt[TXT_ARENA_1] + " ") + oppName) + (((oppGilde == "")) ? "" : ((" [" + oppGilde) + "]"))) + " (") + txt[TXT_HALL_LIST_COLUMN_4]) + " ") + String(oppStufe)) + ") ") + txt[TXT_ARENA_2]);
            };
            Arabize(LBL_ARENA_TEXT);
            SetBtnText(ARENA_OK, txt[TXT_OK]);
            Hide(LBL_ARENA_DELAY);
            SetTitleBar();
            PvPDelayTimer.removeEventListener(TimerEvent.TIMER, PvPDelayCheck);
            PvPDelayTimer.stop();
        };
    };
    tz = Tageszeit();
    if ((((int(Savegame[SG_ACTION_STATUS]) == 1)) and (!(hasMirror)))){
        ShowWorkScreen();
        return;
    };
    if ((((int(Savegame[SG_ACTION_STATUS]) == 2)) and (!(hasMirror)))){
        ShowQuestScreen();
        return;
    };
    Load(SCREEN_ARENA);
    switch (tz){
        case 0:
            Load(SCREEN_ARENA_NIGHT);
            break;
        case 1:
            Load(SCREEN_ARENA_DAWN);
            break;
        case 2:
            Load(SCREEN_ARENA_DAY);
            break;
    };
    WhenLoaded(DoShowArenaScreen);
}

public function Arabize(actorID:int){
    var i:int;
    var ii:int;
    var lines:Array;
    var thisStr:String;
    var nextStr:String;
    var dontCrash:int;
    lines = new Array();
    dontCrash = 0;
    if (textDir != "right"){
        return;
    };
    actor[actorID].width = (actor[actorID].width - 5);
    i = 0;
    while (i < actor[actorID].numLines) {
        lines.push(actor[actorID].getLineText(i));
        i++;
    };
    actor[actorID].width = (actor[actorID].width + 5);
    dontCrash = 0;
    i = 0;
    while (i < lines.length) {
        while (((!((lines[i].substr(-1) == " "))) and ((lines[i].length > 0)))) {
            if (lines[i].length <= 1){
                break;
            };
            if ((((i == (lines.length - 1))) and ((lines[i].length > 0)))){
                lines.push(" ");
            };
            lines[(i + 1)] = (lines[i].substr(-1) + lines[(i + 1)]);
            lines[i] = lines[i].substr(0, (lines[i].length - 1));
            dontCrash++;
            if (dontCrash > 3000){
                break;
            };
        };
        i++;
    };
    actor[actorID].text = "";
    i = 0;
    while (i < lines.length) {
        actor[actorID].text = ((lines[i] + String.fromCharCode(13)) + actor[actorID].text);
        i++;
    };
}

public function ShowDealerScreen(evt:Event=undefined, loadOnly:Boolean=false){
    var papaya_firebug:* = null;
    var url:* = null;
    var DoShowDealerScreen:* = null;
    var evt:* = evt;
    var loadOnly:Boolean = loadOnly;
    DoShowDealerScreen = function (par:Object=undefined){
        RemoveAll();
        Add(SCREEN_DEALER);
    };
    papaya_firebug = "0";
    if (paramObj["firebug"]){
        if (paramObj["firebug"] != ""){
            papaya_firebug = "1";
        };
    };
    url = ((((((((((((((((((((((param_papaya_path + "?playerid=") + Savegame[SG_PLAYER_ID]) + "&paymentid=") + Savegame[SG_PAYMENT_ID]) + "&serverid=") + ServerID) + "&serverdomain=") + server) + "&sessionId=") + sessionId) + "&special=") + DealerAktion) + "&langcode=") + lang_code) + "&volume=") + String((so.data.volume / 10))) + "&mpproject=") + MPProject) + "&cfgfile=") + param_papaya_cfg_file) + "&firebug=") + papaya_firebug);
    if (actorURL[SCR_DEALER_BG] != url){
        actorURL[SCR_DEALER_BG] = url;
        actorLoaded[SCR_DEALER_BG] = 0;
    };
    actor[SCR_DEALER_BG].mouseChildren = true;
    actor[SCR_DEALER_BG].mouseEnabled = true;
    Load(SCREEN_DEALER);
    if (!loadOnly){
        WhenLoaded(DoShowDealerScreen);
    };
}

public function ShowScreenGildeGruenden(evt:Event=undefined){
    var DoShowScreenGilden:* = null;
    var evt:* = evt;
    DoShowScreenGilden = function (evt:Event=undefined){
        var evt:* = evt;
        RemoveAll();
        Gilde = "";
        myOwnRank = -1;
        myOwnAttackTarget = -1;
        myOwnGuildMoney = -1;
        var _local3 = actor[LBL_WINDOW_TITLE];
        with (_local3) {
            text = txt[TXT_GILDE_GRUENDEN_TITLE];
            x = ((IF_WIN_X + IF_WIN_WELCOME_X) - int((textWidth / 2)));
        };
        Add(SCREEN_GILDE_GRUENDEN);
    };
    Load(SCREEN_GILDE_GRUENDEN);
    WhenLoaded(DoShowScreenGilden);
}

public function GetSpendAmount():String{
    var amount:int;
    amount = 1;
    if (int(Savegame[SG_LEVEL]) >= 120){
        amount = 100;
    } else {
        if (int(Savegame[SG_LEVEL]) >= 100){
            amount = 50;
        } else {
            if (int(Savegame[SG_LEVEL]) >= 50){
                amount = 10;
            } else {
                if (int(Savegame[SG_LEVEL]) >= 25){
                    amount = 5;
                };
            };
        };
    };
    return (String(amount));
}

public function addSuggestNames(addArray){
    var i:int;
    if (!(addArray is Array)){
        addArray = [addArray];
    };
    i = 0;
    while (i < addArray.length) {
        if (suggestNames.indexOf(addArray[i]) == -1){
            suggestNames.push(addArray[i]);
        };
        i++;
    };
    i = 0;
    while (i < suggestNames.length) {
        if (suggestNames[i].toLowerCase() == actor[INP_NAME].getChildAt(1).text.toLowerCase()){
            suggestNames.splice(i, 1);
            i--;
        };
        i++;
    };
}

public function crestMoveFn(evt:TimerEvent){
    if (actor[GILDE_CREST].y > crestMoveDest){
        actor[GILDE_CREST].y = (actor[GILDE_CREST].y - 5);
    } else {
        if (actor[GILDE_CREST].y < crestMoveDest){
            actor[GILDE_CREST].y = (actor[GILDE_CREST].y + 5);
        } else {
            crestMoveTimer.stop();
        };
    };
}

public function getRandomCrest(){
    var i:int;
    var result:Array;
    var guildChecksum:* = 0;
    result = new Array();
    i = 0;
    while (i < crestElementPos.length) {
        result.push(int((Math.random() * crestElementPos[i][4])));
        i++;
    };
    return (result);
}

public function setDefaultCrest(){
    var i:* = 0;
    var lastResult:* = 0;
    var GuildRandom:* = function (val:int):int{
        var result:int;
        result = Math.abs(((lastGuildData[0] + lastResult) % val));
        lastResult = result;
        return (result);
    };
    lastResult = 0;
    crest = new Array();
    i = 0;
    while (i < crestElementPos.length) {
        crest.push(int(GuildRandom(crestElementPos[i][4])));
        i = (i + 1);
    };
    i = 0;
    while (i < crestColor.length) {
        crestColor[i] = GuildRandom(heraldicColors.length);
        i = (i + 1);
    };
    loadCrest();
}

public function getCrestStr():String{
    var result:* = null;
    var i:* = 0;
    var dec2hex:* = function (d:int):String{
        var c:Array;
        var l:int;
        var r:int;
        c = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "A", "B", "C", "D", "E", "F"];
        if (d > 0xFF){
            d = 0xFF;
        };
        l = (d / 16);
        r = (d % 16);
        return ((c[l] + c[r]));
    };
    result = "";
    i = 0;
    while (i < crest.length) {
        result = (result + dec2hex(crest[i]));
        i = (i + 1);
    };
    i = 0;
    while (i < crestColor.length) {
        result = (result + dec2hex(crestColor[i]));
        i = (i + 1);
    };
    return (result);
}

public function setCrestStr(str:String){
    var i:int;
    var hex:String;
    var val:int;
    i = 0;
    while (i < crest.length) {
        hex = str.substr(0, 2);
        str = str.substr(2);
        val = int(("0x" + hex));
        if (val < 0){
            val = 0;
        };
        if (val >= crestElementPos[i][4]){
            val = 0;
        };
        crest[i] = val;
        i++;
    };
    i = 0;
    while (i < crestColor.length) {
        hex = str.substr(0, 2);
        str = str.substr(2);
        val = int(("0x" + hex));
        if (val < 0){
            val = 0;
        };
        if (val >= heraldicColors.length){
            val = 0;
        };
        crestColor[i] = val;
        i++;
    };
    loadCrest();
}

public function loadCrest(){
    var i:* = 0;
    var newLoad:* = false;
    var url:* = null;
    var localActorID:* = 0;
    var tmpFltFigure:* = null;
    var tmpFltShield:* = null;
    var tmpFlt:* = null;
    tmpFltFigure = new ColorMatrixFilter([heraldicColors[crestColor[3]][0], 0, 0, 0, 0, heraldicColors[crestColor[3]][1], 0, 0, 0, 0, heraldicColors[crestColor[3]][2], 0, 0, 0, 0, 0, 0, 0, 1, 0]);
    tmpFltShield = new ColorMatrixFilter([0, heraldicColors[crestColor[1]][0], heraldicColors[crestColor[2]][0], 0, 0, 0, heraldicColors[crestColor[1]][1], heraldicColors[crestColor[2]][1], 0, 0, 0, heraldicColors[crestColor[1]][2], heraldicColors[crestColor[2]][2], 0, 0, 0, 0, 0, 1, 0]);
    i = 1;
    while (i < 4) {
        tmpFlt = new ColorMatrixFilter([0, heraldicColors[crestColor[i]][0], 0, 0, 0, 0, heraldicColors[crestColor[i]][1], 0, 0, 0, 0, heraldicColors[crestColor[i]][2], 0, 0, 0, 0, 0, 0, 1, 0]);
        actor[(GILDE_CREST_COLOR_FILLIN + i)].filters = [tmpFlt];
        EnablePopup((GILDE_CREST_COLOR + i), txt[(TXT_CREST_TINCTUREBOXES + i)].split("%1").join(txt[(TXT_CREST_TINCTURES + crestColor[i])]));
        i = (i + 1);
    };
    i = 0;
    while (i < crestElementPos.length) {
        localActorID = (GILDE_CREST + i);
        url = (((((img_url[img_url_index] + "res/gfx/scr/gilde/crest/tiles/crest_") + String((i + 1))) + "_") + String((crest[i] + 1))) + ".png");
        newLoad = !((actorURL[localActorID] == url));
        actorURL[localActorID] = url;
        if (newLoad){
            actorLoaded[localActorID] = 0;
            Load(localActorID);
        };
        if (i == 2){
            url = (((((img_url[img_url_index] + "res/gfx/scr/gilde/crest/tiles/crest_") + String((i + 1))) + "_") + String((crest[i] + 1))) + "_color.png");
            newLoad = !((actorURL[GILDE_CREST_SHIELDCOLOR] == url));
            actorURL[GILDE_CREST_SHIELDCOLOR] = url;
            if (newLoad){
                actorLoaded[GILDE_CREST_SHIELDCOLOR] = 0;
                Load(GILDE_CREST_SHIELDCOLOR);
            };
            actor[GILDE_CREST_SHIELDCOLOR].filters = [tmpFltShield];
        };
        if (i == 3){
            var _local2 = actor[LBL_GILDE_CREST_INSCRIPTION];
            with (_local2) {
                y = 210;
                switch ((crest[i] + 1)){
                    case 7:
                    case 1:
                    case 4:
                    case 5:
                    case 8:
                    case 9:
                        y = (y - 2);
                        break;
                    case 3:
                    case 6:
                        y = (y - 1);
                        break;
                    case 2:
                    case 10:
                    case 11:
                    case 12:
                        break;
                };
            };
        };
        if (i == 6){
            if (selecterCrestElement == i){
                actor[(GILDE_CREST + i)].filters = [tmpFltFigure, Filter_CrestSelected];
            } else {
                actor[(GILDE_CREST + i)].filters = [tmpFltFigure];
            };
        } else {
            if (selecterCrestElement == i){
                actor[(GILDE_CREST + i)].filters = [Filter_CrestSelected];
            } else {
                actor[(GILDE_CREST + i)].filters = [];
            };
        };
        i = (i + 1);
    };
    if (selecterCrestElement >= 0){
        actor[LBL_GILDE_CREST_ELEMENT].text = txt[(TXT_CREST_ELEMENT + selecterCrestElement)].split("%1").join(String((crest[selecterCrestElement] + 1))).split("%2").join(String(crestElementPos[selecterCrestElement][4]));
        actor[LBL_GILDE_CREST_ELEMENT].x = ((GILDE_GEBAEUDE_X + 120) - (actor[LBL_GILDE_CREST_ELEMENT].textWidth / 2));
    };
}

public function clickChatLine(evt){
    var lineText:String;
    var chatAuthor:*;
    if ((evt is MouseEvent)){
        lineText = evt.target.text;
    } else {
        lineText = evt;
    };
    if (crestSuggestion[lineText]){
        Remove(GILDE_GEBAEUDE);
        Add(GILDE_CREST);
        if (actor[GILDE_CREST].y == GILDE_GEBAEUDE_Y){
            SetAlpha(GILDE_CREST_CONTROLS, 1);
            Add(GILDE_CREST_CONTROLS);
        } else {
            selecterCrestElement = -1;
        };
        if (myOwnRank == 1){
            crestSuggested = true;
            SetBtnText(GILDE_CREST_OK, txt[TXT_CREST_APPLY]);
        } else {
            crestSuggested = false;
            SetBtnText(GILDE_CREST_OK, txt[TXT_CREST_SUGGEST]);
        };
        setCrestStr(crestSuggestion[lineText]);
        return;
    };
    chatAuthor = lineText.substr(6);
    if (chatAuthor.indexOf(":") != -1){
        chatAuthor = chatAuthor.substr(0, chatAuthor.indexOf(":"));
        if (chatAuthor.length <= 20){
            if (chatAuthor.indexOf(" > ") == -1){
                if (actor[INP_GILDE_CHAT].getChildAt(0).text == ""){
                    actor[INP_GILDE_CHAT].getChildAt(0).text = (("/w " + chatAuthor.split(" ").join("#")) + " ");
                };
                actor[INP_GILDE_CHAT].getChildAt(0).setSelection(actor[INP_GILDE_CHAT].getChildAt(0).text.length, actor[INP_GILDE_CHAT].getChildAt(0).text.length);
            };
        };
    };
    stage.focus = actor[INP_GILDE_CHAT].getChildAt(0);
}

public function ShowScreenGilden(guildData:Array, guildDescr:String, guildMembers:Array, ThisGilde:String, isMine:Boolean=true, GildenRang:int=0, GildenEhre:int=0, AttackCost:int=0){
    var DoShowScreenGilden:* = null;
    var guildData:* = guildData;
    var guildDescr:* = guildDescr;
    var guildMembers:* = guildMembers;
    var ThisGilde:* = ThisGilde;
    var isMine:Boolean = isMine;
    var GildenRang:int = GildenRang;
    var GildenEhre:int = GildenEhre;
    var AttackCost:int = AttackCost;
    DoShowScreenGilden = function (evt:Event=undefined){
        var i:* = 0;
        var myRank:* = 0;
        var myAttackStatus:* = 0;
        var scrollLevel:* = 0;
        var selectLevel:* = 0;
        var GoldToDonate:* = 0;
        var MushToDonate:* = 0;
        var DonateTimeout:* = null;
        var thisInstanceID:* = 0;
        var removeListenersTimer:* = null;
        var GoldKosten:* = 0;
        var PilzKosten:* = 0;
        var Nutzen:* = null;
        var Ausbaustufe:* = 0;
        var AusbaustufeEx:* = 0;
        var GoldKostenAvg:* = 0;
        var PilzKostenAvg:* = 0;
        var cheapest:* = 0;
        var countCompleted:* = 0;
        var LeftBoxWidth:* = 0;
        var RightBoxWidth:* = 0;
        var crestView:* = false;
        var startWithCrest:* = false;
        var GuildBtnRepeatTimer:* = null;
        var raidCost:* = NaN;
        var isRaid:* = false;
        var GuildBtnHandler:* = null;
        var DoDonate:* = null;
        var RequestPlayerScreen:* = null;
        var BuildGuildList:* = null;
        var evt:* = evt;
        var removeListeners:* = function (evt:TimerEvent){
            var evt:* = evt;
            if (((!((guildInstanceID == thisInstanceID))) or (!(OnStage(GILDE_RAHMEN))))){
                removeListenersTimer.stop();
                var _local3 = removeListenersTimer;
                with (_local3) {
                    removeEventListener(TimerEvent.TIMER, removeListeners);
                };
                actor[GILDE_SCROLL_UP].removeEventListener(MouseEvent.CLICK, GuildBtnHandler);
                actor[GILDE_SCROLL_DOWN].removeEventListener(MouseEvent.CLICK, GuildBtnHandler);
                actor[GILDE_DIALOG_CANCEL].removeEventListener(MouseEvent.CLICK, GuildBtnHandler);
                actor[GILDE_DIALOG_OK_KICK].removeEventListener(MouseEvent.CLICK, GuildBtnHandler);
                actor[GILDE_DIALOG_OK_MASTER].removeEventListener(MouseEvent.CLICK, GuildBtnHandler);
                actor[GILDE_DIALOG_OK_INVITE].removeEventListener(MouseEvent.CLICK, GuildBtnHandler);
                actor[GILDE_DIALOG_OK_REVOLT].removeEventListener(MouseEvent.CLICK, GuildBtnHandler);
                actor[GILDE_DIALOG_OK_RAID].removeEventListener(MouseEvent.CLICK, GuildBtnHandler);
                actor[GILDE_INVITE].removeEventListener(MouseEvent.CLICK, GuildBtnHandler);
                actor[GILDE_PROFILE].removeEventListener(MouseEvent.CLICK, GuildBtnHandler);
                actor[GILDE_KICK].removeEventListener(MouseEvent.CLICK, GuildBtnHandler);
                actor[GILDE_PROMOTE].removeEventListener(MouseEvent.CLICK, GuildBtnHandler);
                actor[GILDE_DEMOTE].removeEventListener(MouseEvent.CLICK, GuildBtnHandler);
                actor[GILDE_MASTER].removeEventListener(MouseEvent.CLICK, GuildBtnHandler);
                actor[GILDE_REVOLT].removeEventListener(MouseEvent.CLICK, GuildBtnHandler);
                actor[GILDE_GEBAEUDE_IMPROVE].removeEventListener(MouseEvent.CLICK, GuildBtnHandler);
                actor[(GILDE_GEBAEUDE_IMPROVE + 1)].removeEventListener(MouseEvent.CLICK, GuildBtnHandler);
                actor[(GILDE_GEBAEUDE_IMPROVE + 2)].removeEventListener(MouseEvent.CLICK, GuildBtnHandler);
                actor[GILDE_KATAPULT].removeEventListener(MouseEvent.CLICK, GuildBtnHandler);
                actor[(GILDE_KATAPULT + 1)].removeEventListener(MouseEvent.CLICK, GuildBtnHandler);
                actor[(GILDE_KATAPULT + 2)].removeEventListener(MouseEvent.CLICK, GuildBtnHandler);
                actor[GILDE_GOLD].removeEventListener(MouseEvent.MOUSE_DOWN, GuildBtnHandler);
                actor[GILDE_MUSH].removeEventListener(MouseEvent.MOUSE_DOWN, GuildBtnHandler);
                actor[GILDE_GOLD].removeEventListener(MouseEvent.MOUSE_OUT, DoDonate);
                actor[GILDE_MUSH].removeEventListener(MouseEvent.MOUSE_OUT, DoDonate);
                _local3 = actor[GILDE_GOLD];
                with (_local3) {
                    removeEventListener(MouseEvent.MOUSE_DOWN, GuildBtnDownHandler);
                    removeEventListener(MouseEvent.MOUSE_UP, GuildBtnUpHandler);
                    removeEventListener(MouseEvent.MOUSE_OUT, GuildBtnUpHandler);
                };
                _local3 = actor[GILDE_MUSH];
                with (_local3) {
                    removeEventListener(MouseEvent.MOUSE_DOWN, GuildBtnDownHandler);
                    removeEventListener(MouseEvent.MOUSE_UP, GuildBtnUpHandler);
                    removeEventListener(MouseEvent.MOUSE_OUT, GuildBtnUpHandler);
                };
                _local3 = actor[INP_GILDE_TEXT];
                with (_local3) {
                    removeEventListener(FocusEvent.FOCUS_IN, EnterGuildDesc);
                    removeEventListener(FocusEvent.FOCUS_OUT, LeaveGuildDesc);
                };
            };
        };
        var DonateVal:* = function (avg:int, localMax:int):String{
            var dval:int;
            dval = 1;
            if (avg >= 10000){
                dval = 10;
            } else {
                if (avg >= 5000){
                    dval = 10;
                } else {
                    if (avg >= 1000){
                        dval = 10;
                    } else {
                        if (avg >= 500){
                            dval = 5;
                        } else {
                            if (avg >= 100){
                                dval = 5;
                            } else {
                                if (avg >= 50){
                                    dval = 2;
                                } else {
                                    if (avg >= 10){
                                        dval = 1;
                                    } else {
                                        dval = 1;
                                    };
                                };
                            };
                        };
                    };
                };
            };
            if (((!((cheapest == -1))) and ((dval > cheapest)))){
                dval = cheapest;
            };
            if (dval > localMax){
                dval = localMax;
            };
            if (dval < 1){
                dval = 1;
            };
            return (String(dval));
        };
        var GuildBtnDownHandler:* = function (evt:Event){
            var ClickCount:* = 0;
            var evt:* = evt;
            var DoPushGuildBtn:* = function (timerevt:Event){
                var timerevt:* = timerevt;
                if (DestroyGuildBtnTimer){
                    DestroyGuildBtnTimer = false;
                    var _local3 = GuildBtnRepeatTimer;
                    with (_local3) {
                        stop();
                        delay = 1000;
                        removeEventListener(TimerEvent.TIMER, DoPushGuildBtn);
                    };
                } else {
                    ClickCount++;
                    switch (ClickCount){
                        case 1:
                            GuildBtnRepeatTimer.delay = 500;
                            break;
                        case 3:
                            GuildBtnRepeatTimer.delay = 250;
                            break;
                        case 10:
                            GuildBtnRepeatTimer.delay = 125;
                            break;
                        case 20:
                            GuildBtnRepeatTimer.delay = 62;
                            break;
                    };
                    if (GuildBtnHandler(evt, true)){
                        Play(SND_CLICK);
                    } else {
                        if (GuildBtnRepeatTimer.running){
                            DestroyGuildBtnTimer = true;
                        };
                    };
                };
            };
            ClickCount = 0;
            if (GuildBtnRepeatTimer.running){
                return;
            };
            DestroyGuildBtnTimer = false;
            var _local3 = GuildBtnRepeatTimer;
            with (_local3) {
                delay = 1000;
                addEventListener(TimerEvent.TIMER, DoPushGuildBtn);
                start();
            };
        };
        var GuildBtnUpHandler:* = function (evt:Event){
            if (GuildBtnRepeatTimer.running){
                DestroyGuildBtnTimer = true;
            };
        };
        var EnterGuildDesc:* = function (evt:FocusEvent){
            var evt:* = evt;
            var _local3 = actor[INP_GILDE_TEXT].getChildAt(0);
            with (_local3) {
                if (type == TextFieldType.INPUT){
                    if (text == txt[TXT_ENTERGUILDDESC]){
                        text = "";
                    };
                };
            };
        };
        var LeaveGuildDesc:* = function (evt:FocusEvent){
            var evt:* = evt;
            var _local3 = actor[INP_GILDE_TEXT].getChildAt(0);
            with (_local3) {
                if (type == TextFieldType.INPUT){
                    if (text != resolveBreaks(guildDescr)){
                        guildDescr = SemiStrip(text);
                        SendAction(ACT_GUILD_SET_DESC, actor[INP_NAME].getChildAt(1).text, Gilde, ((oldCrestStr + "§") + RemoveIllegalChars(SemiStrip(text))), MD5(actor[INP_LOGIN_PASSWORD].getChildAt(1).text));
                    };
                    if (text == ""){
                        text = txt[TXT_ENTERGUILDDESC];
                    };
                };
            };
        };
        var PlaceButtonSet:* = function (){
            var selRank:int;
            switch (myRank){
                case 1:
                    Add(GILDE_SET_MASTER);
                    if (guildData[0] == Savegame[SG_GUILD_INDEX]){
                        Show(PLAYER_GUILD_INVITE);
                    };
                    break;
                case 2:
                    Add(GILDE_SET_OFFICER);
                    if (guildData[0] == Savegame[SG_GUILD_INDEX]){
                        Show(PLAYER_GUILD_INVITE);
                    };
                    break;
                case 3:
                case 0:
                    if (guildData[0] == Savegame[SG_GUILD_INDEX]){
                        Hide(PLAYER_GUILD_INVITE);
                    };
                    Add(GILDE_SET_MEMBER);
                    break;
            };
            selRank = guildData[((GUILD_MEMBERRANK + selectLevel) + scrollLevel)];
            if ((((int(guildData[((GUILD_MEMBERID + selectLevel) + scrollLevel)]) == int(Savegame[SG_PLAYER_ID]))) and (isMine))){
                Add(GILDE_KICK);
                Remove(GILDE_KICK_GRAY);
                Remove(GILDE_PROMOTE);
                Remove(GILDE_MASTER);
                AddSome(GILDE_PROMOTE_GRAY, GILDE_MASTER_GRAY);
            } else {
                if ((((selRank <= 2)) and ((myRank == 2)))){
                    Remove(GILDE_KICK);
                    Add(GILDE_KICK_GRAY);
                };
            };
            if (selRank == 4){
                Remove(GILDE_PROMOTE);
                Remove(GILDE_MASTER);
                AddSome(GILDE_PROMOTE_GRAY, GILDE_MASTER_GRAY);
            };
            if (int(guildData[3]) >= int(guildData[5])){
                Remove(GILDE_INVITE);
                if (guildData[0] == Savegame[SG_GUILD_INDEX]){
                    Hide(PLAYER_GUILD_INVITE);
                };
                AddSome(GILDE_INVITE_GRAY);
            };
            if ((((selRank == 2)) and ((myRank == 1)))){
                Remove(GILDE_PROMOTE);
                Add(GILDE_DEMOTE);
            };
            if ((((((((selRank == 1)) and ((int(guildData[12]) < 0)))) and ((myRank <= 3)))) and ((myRank > 0)))){
                Remove(GILDE_MASTER_GRAY);
                Add(GILDE_REVOLT);
            };
        };
        GuildBtnHandler = function (evt:Event, typematic:Boolean=false):Boolean{
            var actorID:* = 0;
            var selRank:* = 0;
            var evt:* = evt;
            var typematic:Boolean = typematic;
            actorID = GetActorID(evt.target);
            selRank = guildData[((GUILD_MEMBERRANK + selectLevel) + scrollLevel)];
            switch (actorID){
                case GILDE_SCROLL_UP:
                    scrollLevel = (scrollLevel - 15);
                    if (scrollLevel < 0){
                        scrollLevel = 0;
                    };
                    BuildGuildList();
                    break;
                case GILDE_SCROLL_DOWN:
                    scrollLevel = (scrollLevel + 15);
                    if (scrollLevel > (int(guildData[3]) - 15)){
                        scrollLevel = (int(guildData[3]) - 15);
                    };
                    if (scrollLevel < 0){
                        scrollLevel = 0;
                    };
                    BuildGuildList();
                    break;
                case GILDE_INVITE:
                    Add(GILDE_DIALOG_INVITE);
                    actor[INP_GILDE_DIALOG_INVITE].getChildAt(1).text = "";
                    var _local4 = actor[LBL_WINDOW_TITLE];
                    with (_local4) {
                        text = txt[TXT_GILDE_INVITE_TITLE];
                        x = ((IF_WIN_X + IF_WIN_WELCOME_X) - int((textWidth / 2)));
                    };
                    break;
                case GILDE_PROFILE:
                    RequestPlayerScreen();
                    break;
                case GILDE_REVOLT:
                    Add(GILDE_DIALOG_REVOLT);
                    _local4 = actor[LBL_WINDOW_TITLE];
                    with (_local4) {
                        text = txt[TXT_REVOLT_WARNING_TITLE];
                        x = ((IF_WIN_X + IF_WIN_WELCOME_X) - int((textWidth / 2)));
                    };
                    break;
                case GILDE_KICK:
                    if (selRank == 4){
                        KickMember();
                    } else {
                        Add(GILDE_DIALOG_KICK);
                        if (int(guildData[((GUILD_MEMBERID + selectLevel) + scrollLevel)]) == int(Savegame[SG_PLAYER_ID])){
                            Remove(LBL_GILDE_DIALOG_TEXT_KICK);
                            Add(LBL_GILDE_DIALOG_TEXT_QUIT);
                            _local4 = actor[LBL_WINDOW_TITLE];
                            with (_local4) {
                                text = txt[TXT_GILDE_QUIT_TITLE];
                                x = ((IF_WIN_X + IF_WIN_WELCOME_X) - int((textWidth / 2)));
                            };
                        } else {
                            _local4 = actor[LBL_WINDOW_TITLE];
                            with (_local4) {
                                text = txt[TXT_GILDE_KICK_TITLE];
                                x = ((IF_WIN_X + IF_WIN_WELCOME_X) - int((textWidth / 2)));
                            };
                        };
                    };
                    break;
                case GILDE_PROMOTE:
                case GILDE_DEMOTE:
                    ToggleOfficer();
                    break;
                case GILDE_MASTER:
                    Add(GILDE_DIALOG_MASTER);
                    _local4 = actor[LBL_WINDOW_TITLE];
                    with (_local4) {
                        text = txt[TXT_GILDE_MASTER_TITLE];
                        x = ((IF_WIN_X + IF_WIN_WELCOME_X) - int((textWidth / 2)));
                    };
                    break;
                case GILDE_DIALOG_OK_KICK:
                    KickMember();
                    break;
                case GILDE_DIALOG_OK_MASTER:
                    MakeMaster();
                    break;
                case GILDE_DIALOG_OK_INVITE:
                    InvitePlayer();
                    break;
                case GILDE_DIALOG_OK_REVOLT:
                    Revolt();
                    break;
                case GILDE_DIALOG_OK_RAID:
                    SendAction(ACT_GUILD_COMMENCE_ATTACK, -1);
                    break;
                case GILDE_DIALOG_CANCEL:
                    Remove(GILDE_DIALOG_INVITE);
                    Remove(GILDE_DIALOG_KICK);
                    Remove(GILDE_DIALOG_REVOLT);
                    Remove(GILDE_DIALOG_MASTER);
                    Remove(LBL_GILDE_DIALOG_TEXT_QUIT);
                    Remove(GILDE_DIALOG_RAID);
                    break;
                case GILDE_KATAPULT:
                case (GILDE_KATAPULT + 1):
                case (GILDE_KATAPULT + 2):
                    SendAction(ACT_GUILD_IMPROVE, actor[INP_NAME].getChildAt(1).text, Gilde, MD5(actor[INP_LOGIN_PASSWORD].getChildAt(1).text), 0);
                    break;
                case GILDE_GEBAEUDE_IMPROVE:
                case (GILDE_GEBAEUDE_IMPROVE + 1):
                case (GILDE_GEBAEUDE_IMPROVE + 2):
                    SendAction(ACT_GUILD_IMPROVE, actor[INP_NAME].getChildAt(1).text, Gilde, MD5(actor[INP_LOGIN_PASSWORD].getChildAt(1).text), ((actorID - GILDE_GEBAEUDE_IMPROVE) + 1));
                    break;
                case GILDE_GOLD:
                    if (int(Savegame[SG_EMAIL_VALID]) == 1){
                        if ((((int(actor[LBL_IF_GOLD].text) >= int(actor[LBL_GILDE_GOLD2].text))) and (((int(actor[LBL_GILDE_GOLD].text) + int(actor[LBL_GILDE_GOLD2].text)) <= 10000000)))){
                            GoldToDonate = (GoldToDonate + int(actor[LBL_GILDE_GOLD2].text));
                            actor[LBL_IF_GOLD].text = String((int(actor[LBL_IF_GOLD].text) - int(actor[LBL_GILDE_GOLD2].text)));
                            actor[LBL_GILDE_GOLD].text = String((int(actor[LBL_GILDE_GOLD].text) + int(actor[LBL_GILDE_GOLD2].text)));
                            DonateTimeout.stop();
                            DonateTimeout.start();
                        } else {
                            DoDonate();
                            if (int(actor[LBL_IF_GOLD].text) >= int(actor[LBL_GILDE_GOLD2].text)){
                                ErrorMessage(txt[TXT_ERROR_GUILD_CASH_FULL]);
                            } else {
                                if (!typematic){
                                    ErrorMessage(txt[TXT_ERROR_GUILD_TOO_EXPENSIVE]);
                                };
                            };
                            return (false);
                        };
                    } else {
                        ErrorMessage(txt[TXT_ERROR_GUILD_EMAIL_VALIDATE]);
                        return (false);
                    };
                    break;
                case GILDE_MUSH:
                    if (int(Savegame[SG_EMAIL_VALID]) == 1){
                        if (int(Savegame[SG_FIRST_PAYMENT]) != 0){
                            if (int(actor[LBL_IF_PILZE].text) >= int(actor[LBL_GILDE_MUSH2].text)){
                                MushToDonate = (MushToDonate + int(actor[LBL_GILDE_MUSH2].text));
                                actor[LBL_IF_PILZE].text = String((int(actor[LBL_IF_PILZE].text) - int(actor[LBL_GILDE_MUSH2].text)));
                                actor[LBL_GILDE_MUSH].text = String((int(actor[LBL_GILDE_MUSH].text) + int(actor[LBL_GILDE_MUSH2].text)));
                                EnablePopup(LBL_IF_PILZE);
                                DonateTimeout.stop();
                                DonateTimeout.start();
                            } else {
                                DoDonate();
                                if (!typematic){
                                    ErrorMessage(txt[TXT_ERROR_GUILD_TOO_EXPENSIVE]);
                                };
                                return (false);
                            };
                        } else {
                            ErrorMessage(txt[TXT_ERROR_GUILD_MUSH_FREE]);
                            return (false);
                        };
                    } else {
                        ErrorMessage(txt[TXT_ERROR_GUILD_EMAIL_VALIDATE]);
                        return (false);
                    };
                    break;
            };
            return (true);
        };
        DoDonate = function (evt:Event=undefined){
            DonateTimeout.stop();
            if (GoldToDonate > 0){
                SendAction(ACT_GUILD_DONATE, 1, String((GoldToDonate * 100)));
            } else {
                if (MushToDonate > 0){
                    SendAction(ACT_GUILD_DONATE, 2, String(MushToDonate));
                };
            };
            GoldToDonate = 0;
            MushToDonate = 0;
        };
        RequestPlayerScreen = function (){
            var playerName:String;
            var selRank:int;
            playerName = guildMembers[((selectLevel + scrollLevel) + 1)];
            if (playerName == ""){
                return;
            };
            selName = playerName;
            selRank = guildData[((GUILD_MEMBERRANK + selectLevel) + scrollLevel)];
            selGilde = (((selRank == 4)) ? "" : Gilde);
            SendAction(ACT_REQUEST_CHAR, playerName);
        };
        var InvitePlayer:* = function (){
            var selName:String;
            selName = guildMembers[((selectLevel + scrollLevel) + 1)];
            if (selName == ""){
                return;
            };
            SendAction(ACT_GUILD_INVITE, actor[INP_NAME].getChildAt(1).text, Gilde, actor[INP_GILDE_DIALOG_INVITE].getChildAt(1).text, MD5(actor[INP_LOGIN_PASSWORD].getChildAt(1).text), "");
        };
        var MakeMaster:* = function (){
            var selName:String;
            selName = guildMembers[((selectLevel + scrollLevel) + 1)];
            if (selName == ""){
                return;
            };
            SendAction(ACT_GUILD_SET_MASTER, actor[INP_NAME].getChildAt(1).text, Gilde, selName, MD5(actor[INP_LOGIN_PASSWORD].getChildAt(1).text));
        };
        var KickMember:* = function (){
            var selName:String;
            selName = guildMembers[((selectLevel + scrollLevel) + 1)];
            if (selName == ""){
                return;
            };
            SendAction(ACT_GUILD_EXPEL, actor[INP_NAME].getChildAt(1).text, Gilde, selName, MD5(actor[INP_LOGIN_PASSWORD].getChildAt(1).text));
        };
        var ToggleOfficer:* = function (){
            var selName:String;
            var selRank:int;
            selName = guildMembers[((selectLevel + scrollLevel) + 1)];
            selRank = guildData[((GUILD_MEMBERRANK + selectLevel) + scrollLevel)];
            if (selName == ""){
                return;
            };
            if (selRank == 2){
                SendAction(ACT_GUILD_SET_OFFICER, actor[INP_NAME].getChildAt(1).text, Gilde, selName, MD5(actor[INP_LOGIN_PASSWORD].getChildAt(1).text), 0);
            } else {
                if (selRank == 3){
                    SendAction(ACT_GUILD_SET_OFFICER, actor[INP_NAME].getChildAt(1).text, Gilde, selName, MD5(actor[INP_LOGIN_PASSWORD].getChildAt(1).text), 1);
                };
            };
        };
        var Revolt:* = function (){
            SendAction(ACT_REVOLT);
        };
        BuildGuildList = function (evt:Event=undefined){
            var i:* = 0;
            var j:* = 0;
            var tmpBalken:* = null;
            var isOnline:* = false;
            var attackError:* = false;
            var lvl:* = 0;
            var attackStatus:* = 0;
            var avgCount:* = undefined;
            var evt:* = evt;
            var AddGuildImage:* = function (rank:int, line:int){
                var tmpObj:* = null;
                var rank:* = rank;
                var line:* = line;
                if (rank == 0){
                    rank = 4;
                };
                tmpObj = new Bitmap(actor[((GILDE_RANK + (((rank < 4)) ? rank : 3)) - 1)].content.bitmapData.clone());
                var _local4 = tmpObj;
                with (_local4) {
                    allowSmoothing = true;
                    forceSmoothing = true;
                    smoothing = true;
                    mouseEnabled = true;
                    if (textDir == "right"){
                        x = 180;
                    } else {
                        x = 2;
                    };
                    y = ((line * GILDE_LIST_Y) + 4);
                    alpha = (((rank == 4)) ? 0.5 : 1);
                };
                actor[GILDE_LIST].addChild(tmpObj);
            };
            var BuildGuildPopup:* = function (evt:MouseEvent){
                var hoverLevel:int;
                var lvl:int;
                var attackStatus:int;
                var attackError:Boolean;
                var attackHint:String;
                hoverLevel = int(((actor[GILDE_LIST].getChildIndex(evt.target) - 1) / 2));
                lvl = int(guildData[((GUILD_MEMBERLEVEL + hoverLevel) + scrollLevel)]);
                attackStatus = 0;
                attackError = false;
                attackHint = "";
                while (lvl > 1000) {
                    lvl = (lvl - 1000);
                    attackStatus++;
                };
                if (guildData[0] == Savegame[SG_GUILD_INDEX]){
                    if ((((int(guildData[GUILD_ATTACK_TARGET]) > 0)) and (!((attackStatus & 1))))){
                        attackError = true;
                    };
                    if ((((int(guildData[GUILD_DEFENCE_TARGET]) > 0)) and (!((attackStatus & 2))))){
                        attackError = true;
                    };
                } else {
                    if ((((int(guildData[GUILD_ATTACK_TARGET]) == int(Savegame[SG_GUILD_INDEX]))) and ((attackStatus & 1)))){
                        attackError = true;
                    };
                    if ((((int(guildData[GUILD_DEFENCE_TARGET]) == int(Savegame[SG_GUILD_INDEX]))) and ((attackStatus & 2)))){
                        attackError = true;
                    };
                };
                if (((showActivityTime) and (isMine))){
                    if (Number(guildData[((GUILD_MEMBERONLINE + hoverLevel) + scrollLevel)]) > 0){
                        EnablePopup(GILDE_LIST, TimeStr(guildData[((GUILD_MEMBERONLINE + hoverLevel) + scrollLevel)]));
                    } else {
                        EnablePopup(GILDE_LIST, ":-(");
                    };
                    return;
                };
                if (attackError){
                    if (guildData[0] != Savegame[SG_GUILD_INDEX]){
                        if ((((int(guildData[GUILD_ATTACK_TARGET]) == int(Savegame[SG_GUILD_INDEX]))) and ((attackStatus & 1)))){
                            attackHint = (attackHint + (String.fromCharCode(13) + txt[(TXT_ATTACK_STATUS + 3)]));
                        };
                        if ((((int(guildData[GUILD_DEFENCE_TARGET]) == int(Savegame[SG_GUILD_INDEX]))) and ((attackStatus & 2)))){
                            attackHint = (attackHint + (String.fromCharCode(13) + txt[(TXT_ATTACK_STATUS + 4)]));
                        };
                        if (attackHint.length > 0){
                            attackHint = attackHint.substr(1);
                            if (textDir == "right"){
                                EnablePopup(GILDE_LIST, POPUP_BEGIN_LINE, ((("(" + txt[((TXT_RANKNAME + int(guildData[((GUILD_MEMBERRANK + hoverLevel) + scrollLevel)])) - 1)]) + ") ") + guildMembers[((hoverLevel + scrollLevel) + 1)]), POPUP_END_LINE, POPUP_BEGIN_LINE, ((String(lvl) + " ") + txt[TXT_HALL_LIST_COLUMN_4]), POPUP_END_LINE, POPUP_BEGIN_LINE, FontFormat_GuildListTextAttackErrorOnlinePopup, attackHint, POPUP_END_LINE);
                            } else {
                                EnablePopup(GILDE_LIST, POPUP_BEGIN_LINE, (((guildMembers[((hoverLevel + scrollLevel) + 1)] + " (") + txt[((TXT_RANKNAME + int(guildData[((GUILD_MEMBERRANK + hoverLevel) + scrollLevel)])) - 1)]) + ")"), POPUP_END_LINE, POPUP_BEGIN_LINE, ((txt[TXT_HALL_LIST_COLUMN_4] + " ") + String(lvl)), POPUP_END_LINE, POPUP_BEGIN_LINE, FontFormat_GuildListTextAttackErrorOnlinePopup, attackHint, POPUP_END_LINE);
                            };
                        } else {
                            if (textDir == "right"){
                                EnablePopup(GILDE_LIST, POPUP_BEGIN_LINE, ((("(" + txt[((TXT_RANKNAME + int(guildData[((GUILD_MEMBERRANK + hoverLevel) + scrollLevel)])) - 1)]) + ") ") + guildMembers[((hoverLevel + scrollLevel) + 1)]), POPUP_END_LINE, POPUP_BEGIN_LINE, ((String(lvl) + " ") + txt[TXT_HALL_LIST_COLUMN_4]), POPUP_END_LINE);
                            } else {
                                EnablePopup(GILDE_LIST, POPUP_BEGIN_LINE, (((guildMembers[((hoverLevel + scrollLevel) + 1)] + " (") + txt[((TXT_RANKNAME + int(guildData[((GUILD_MEMBERRANK + hoverLevel) + scrollLevel)])) - 1)]) + ")"), POPUP_END_LINE, POPUP_BEGIN_LINE, ((txt[TXT_HALL_LIST_COLUMN_4] + " ") + String(lvl)), POPUP_END_LINE);
                            };
                        };
                    } else {
                        if (textDir == "right"){
                            EnablePopup(GILDE_LIST, POPUP_BEGIN_LINE, ((("(" + txt[((TXT_RANKNAME + int(guildData[((GUILD_MEMBERRANK + hoverLevel) + scrollLevel)])) - 1)]) + ") ") + guildMembers[((hoverLevel + scrollLevel) + 1)]), POPUP_END_LINE, POPUP_BEGIN_LINE, ((String(lvl) + " ") + txt[TXT_HALL_LIST_COLUMN_4]), POPUP_END_LINE, POPUP_BEGIN_LINE, txt[TXT_GOLD_SPENT], 170, String(int((guildData[((GUILD_MEMBERGOLDSPENT + hoverLevel) + scrollLevel)] / 100))), POPUP_END_LINE, POPUP_BEGIN_LINE, txt[TXT_MUSH_SPENT], 170, String(guildData[((GUILD_MEMBERMUSHSPENT + hoverLevel) + scrollLevel)]), POPUP_END_LINE, POPUP_BEGIN_LINE, FontFormat_GuildListTextAttackErrorOnlinePopup, txt[(TXT_ATTACK_STATUS + attackStatus)], POPUP_END_LINE);
                        } else {
                            EnablePopup(GILDE_LIST, POPUP_BEGIN_LINE, (((guildMembers[((hoverLevel + scrollLevel) + 1)] + " (") + txt[((TXT_RANKNAME + int(guildData[((GUILD_MEMBERRANK + hoverLevel) + scrollLevel)])) - 1)]) + ")"), POPUP_END_LINE, POPUP_BEGIN_LINE, ((txt[TXT_HALL_LIST_COLUMN_4] + " ") + String(lvl)), POPUP_END_LINE, POPUP_BEGIN_LINE, txt[TXT_GOLD_SPENT], 170, String(int((guildData[((GUILD_MEMBERGOLDSPENT + hoverLevel) + scrollLevel)] / 100))), POPUP_END_LINE, POPUP_BEGIN_LINE, txt[TXT_MUSH_SPENT], 170, String(guildData[((GUILD_MEMBERMUSHSPENT + hoverLevel) + scrollLevel)]), POPUP_END_LINE, POPUP_BEGIN_LINE, FontFormat_GuildListTextAttackErrorOnlinePopup, txt[(TXT_ATTACK_STATUS + attackStatus)], POPUP_END_LINE);
                        };
                    };
                } else {
                    if (guildData[0] != Savegame[SG_GUILD_INDEX]){
                        if (textDir == "right"){
                            EnablePopup(GILDE_LIST, POPUP_BEGIN_LINE, ((("(" + txt[((TXT_RANKNAME + int(guildData[((GUILD_MEMBERRANK + hoverLevel) + scrollLevel)])) - 1)]) + ") ") + guildMembers[((hoverLevel + scrollLevel) + 1)]), POPUP_END_LINE, POPUP_BEGIN_LINE, ((String(lvl) + " ") + txt[TXT_HALL_LIST_COLUMN_4]), POPUP_END_LINE);
                        } else {
                            EnablePopup(GILDE_LIST, POPUP_BEGIN_LINE, (((guildMembers[((hoverLevel + scrollLevel) + 1)] + " (") + txt[((TXT_RANKNAME + int(guildData[((GUILD_MEMBERRANK + hoverLevel) + scrollLevel)])) - 1)]) + ")"), POPUP_END_LINE, POPUP_BEGIN_LINE, ((txt[TXT_HALL_LIST_COLUMN_4] + " ") + String(lvl)), POPUP_END_LINE);
                        };
                    } else {
                        if (textDir == "right"){
                            if (attackStatus == 0){
                                EnablePopup(GILDE_LIST, POPUP_BEGIN_LINE, ((("(" + txt[((TXT_RANKNAME + int(guildData[((GUILD_MEMBERRANK + hoverLevel) + scrollLevel)])) - 1)]) + ") ") + guildMembers[((hoverLevel + scrollLevel) + 1)]), POPUP_END_LINE, POPUP_BEGIN_LINE, ((String(lvl) + " ") + txt[TXT_HALL_LIST_COLUMN_4]), POPUP_END_LINE, POPUP_BEGIN_LINE, txt[TXT_GOLD_SPENT], 170, String(int((guildData[((GUILD_MEMBERGOLDSPENT + hoverLevel) + scrollLevel)] / 100))), POPUP_END_LINE, POPUP_BEGIN_LINE, txt[TXT_MUSH_SPENT], 170, String(guildData[((GUILD_MEMBERMUSHSPENT + hoverLevel) + scrollLevel)]), POPUP_END_LINE);
                            } else {
                                EnablePopup(GILDE_LIST, POPUP_BEGIN_LINE, ((("(" + txt[((TXT_RANKNAME + int(guildData[((GUILD_MEMBERRANK + hoverLevel) + scrollLevel)])) - 1)]) + ") ") + guildMembers[((hoverLevel + scrollLevel) + 1)]), POPUP_END_LINE, POPUP_BEGIN_LINE, ((String(lvl) + " ") + txt[TXT_HALL_LIST_COLUMN_4]), POPUP_END_LINE, POPUP_BEGIN_LINE, txt[TXT_GOLD_SPENT], 170, String(int((guildData[((GUILD_MEMBERGOLDSPENT + hoverLevel) + scrollLevel)] / 100))), POPUP_END_LINE, POPUP_BEGIN_LINE, txt[TXT_MUSH_SPENT], 170, String(guildData[((GUILD_MEMBERMUSHSPENT + hoverLevel) + scrollLevel)]), POPUP_END_LINE, POPUP_BEGIN_LINE, FontFormat_GuildListTextAttackOkPopup, txt[(TXT_ATTACK_OK_STATUS + attackStatus)], POPUP_END_LINE);
                            };
                        } else {
                            if (attackStatus == 0){
                                EnablePopup(GILDE_LIST, POPUP_BEGIN_LINE, (((guildMembers[((hoverLevel + scrollLevel) + 1)] + " (") + txt[((TXT_RANKNAME + int(guildData[((GUILD_MEMBERRANK + hoverLevel) + scrollLevel)])) - 1)]) + ")"), POPUP_END_LINE, POPUP_BEGIN_LINE, ((txt[TXT_HALL_LIST_COLUMN_4] + " ") + String(lvl)), POPUP_END_LINE, POPUP_BEGIN_LINE, txt[TXT_GOLD_SPENT], 170, String(int((guildData[((GUILD_MEMBERGOLDSPENT + hoverLevel) + scrollLevel)] / 100))), POPUP_END_LINE, POPUP_BEGIN_LINE, txt[TXT_MUSH_SPENT], 170, String(guildData[((GUILD_MEMBERMUSHSPENT + hoverLevel) + scrollLevel)]), POPUP_END_LINE);
                            } else {
                                EnablePopup(GILDE_LIST, POPUP_BEGIN_LINE, (((guildMembers[((hoverLevel + scrollLevel) + 1)] + " (") + txt[((TXT_RANKNAME + int(guildData[((GUILD_MEMBERRANK + hoverLevel) + scrollLevel)])) - 1)]) + ")"), POPUP_END_LINE, POPUP_BEGIN_LINE, ((txt[TXT_HALL_LIST_COLUMN_4] + " ") + String(lvl)), POPUP_END_LINE, POPUP_BEGIN_LINE, txt[TXT_GOLD_SPENT], 170, String(int((guildData[((GUILD_MEMBERGOLDSPENT + hoverLevel) + scrollLevel)] / 100))), POPUP_END_LINE, POPUP_BEGIN_LINE, txt[TXT_MUSH_SPENT], 170, String(guildData[((GUILD_MEMBERMUSHSPENT + hoverLevel) + scrollLevel)]), POPUP_END_LINE, POPUP_BEGIN_LINE, FontFormat_GuildListTextAttackOkPopup, txt[(TXT_ATTACK_OK_STATUS + attackStatus)], POPUP_END_LINE);
                            };
                        };
                    };
                };
            };
            var RemoveGuildPopup:* = function (evt:MouseEvent){
                EnablePopup(GILDE_LIST);
            };
            var AddGuildPlayer:* = function (memberName:String, rank:int, line:int, onlineStatus:Boolean, thisAttackError:Boolean, thisAttackStatus:int){
                var tmpObj:* = null;
                var memberName:* = memberName;
                var rank:* = rank;
                var line:* = line;
                var onlineStatus:* = onlineStatus;
                var thisAttackError:* = thisAttackError;
                var thisAttackStatus:* = thisAttackStatus;
                tmpObj = new TextField();
                DoubleClickHandler(tmpObj, BuildGuildList, RequestPlayerScreen);
                var _local8 = tmpObj;
                with (_local8) {
                    addEventListener(MouseEvent.MOUSE_OVER, BuildGuildPopup);
                    addEventListener(MouseEvent.MOUSE_OUT, RemoveGuildPopup);
                    if (thisAttackError){
                        if (isMine){
                            if ((((thisAttackStatus & 1)) or ((thisAttackStatus & 2)))){
                                tmpObj.defaultTextFormat = ((onlineStatus) ? FontFormat_GuildListTextAttackErrorOnlineHalf : FontFormat_GuildListTextAttackErrorHalf);
                            } else {
                                tmpObj.defaultTextFormat = ((onlineStatus) ? FontFormat_GuildListTextAttackErrorOnline : FontFormat_GuildListTextAttackError);
                            };
                        } else {
                            if (!(((thisAttackStatus & 1)) and ((thisAttackStatus & 2)))){
                                tmpObj.defaultTextFormat = FontFormat_GuildListTextAttackErrorHalf;
                            } else {
                                tmpObj.defaultTextFormat = FontFormat_GuildListTextAttackError;
                            };
                        };
                    } else {
                        tmpObj.defaultTextFormat = ((((onlineStatus) and (isMine))) ? FontFormat_GuildListTextOnline : FontFormat_GuildListText);
                    };
                    autoSize = TextFieldAutoSize.LEFT;
                    background = false;
                    selectable = false;
                    embedFonts = fontEmbedded;
                    antiAliasType = AntiAliasType.ADVANCED;
                    mouseEnabled = true;
                    filters = Filter_Shadow;
                    text = memberName;
                    if (textDir == "right"){
                        x = (172 - textWidth);
                    } else {
                        x = GILDE_LIST_C1;
                    };
                    y = ((line * GILDE_LIST_Y) + 0);
                    alpha = (((rank == 4)) ? 0.5 : 1);
                };
                actor[GILDE_LIST].addChild(tmpObj);
            };
            i = 0;
            j = 0;
            isOnline = false;
            attackError = false;
            lvl = 0;
            attackStatus = 0;
            if (guildData[0] == Savegame[SG_GUILD_INDEX]){
                offlineGuildMembers = new Array();
            };
            if ((evt is MouseEvent)){
                selectLevel = int(((actor[GILDE_LIST].getChildIndex(evt.target) - 1) / 2));
            };
            var _local3 = actor[GILDE_LIST];
            with (_local3) {
                while (numChildren > 0) {
                    removeChildAt(0);
                };
                mouseEnabled = true;
                doubleClickEnabled = true;
                mouseChildren = true;
            };
            tmpBalken = new MovieClip();
            _local3 = tmpBalken.graphics;
            with (_local3) {
                beginFill(CLR_SFORANGE, 0.5);
                lineStyle(0, 0, 0);
                drawRect(0, 0, GILDE_LIST_X, GILDE_LIST_Y);
            };
            _local3 = tmpBalken;
            with (_local3) {
                x = 0;
                y = (selectLevel * GILDE_LIST_Y);
                mouseEnabled = true;
                doubleClickEnabled = true;
            };
            actor[GILDE_LIST].addChild(tmpBalken);
            j = 0;
            avgLevel = 0;
            avgCount = 0;
            if (scrollLevel == -1){
                i = 0;
                while (i < int(guildData[3])) {
                    if (int(guildData[(GUILD_MEMBERID + i)]) == int(Savegame[SG_PLAYER_ID])){
                        scrollLevel = (i - 7);
                    };
                    i = (i + 1);
                };
                if (scrollLevel > (int(guildData[3]) - 15)){
                    scrollLevel = (int(guildData[3]) - 15);
                };
                if (scrollLevel < 0){
                    scrollLevel = 0;
                };
            };
            i = 0;
            while (i < int(guildData[3])) {
                isOnline = WaitingFor((Number(guildData[(GUILD_MEMBERONLINE + i)]) + (60 * 5)));
                lvl = int(guildData[(GUILD_MEMBERLEVEL + i)]);
                attackStatus = 0;
                attackError = false;
                while (lvl > 1000) {
                    lvl = (lvl - 1000);
                    attackStatus = (attackStatus + 1);
                };
                if (int(guildData[(GUILD_MEMBERID + i)]) == int(Savegame[SG_PLAYER_ID])){
                    myRank = int(guildData[(GUILD_MEMBERRANK + i)]);
                    myAttackStatus = int((Number(guildData[(GUILD_MEMBERLEVEL + i)]) / 1000));
                };
                if ((((int(guildData[(GUILD_MEMBERRANK + i)]) > 0)) and ((int(guildData[(GUILD_MEMBERRANK + i)]) < 4)))){
                    avgLevel = (avgLevel + lvl);
                    avgCount = (avgCount + 1);
                };
                if (guildData[0] == Savegame[SG_GUILD_INDEX]){
                    if (!isOnline){
                        offlineGuildMembers.push(guildMembers[(i + 1)]);
                    };
                    if ((((int(guildData[GUILD_ATTACK_TARGET]) > 0)) and (!((attackStatus & 1))))){
                        attackError = true;
                    };
                    if ((((int(guildData[GUILD_DEFENCE_TARGET]) > 0)) and (!((attackStatus & 2))))){
                        attackError = true;
                    };
                } else {
                    if ((((int(guildData[GUILD_ATTACK_TARGET]) == int(Savegame[SG_GUILD_INDEX]))) and ((attackStatus & 1)))){
                        attackError = true;
                    };
                    if ((((int(guildData[GUILD_DEFENCE_TARGET]) == int(Savegame[SG_GUILD_INDEX]))) and ((attackStatus & 2)))){
                        attackError = true;
                    };
                };
                if ((((i >= scrollLevel)) and ((i < (scrollLevel + 15))))){
                    AddGuildImage(int(guildData[(GUILD_MEMBERRANK + i)]), j);
                    j = (j + 1);
                    AddGuildPlayer(guildMembers[(i + 1)], int(guildData[(GUILD_MEMBERRANK + i)]), j, isOnline, attackError, attackStatus);
                };
                i = (i + 1);
            };
            avgLevel = (avgLevel / avgCount);
            PlaceButtonSet();
            if (textDir == "right"){
                actor[GILDE_SCROLL_UP].x = GILDE_LIST_X;
                actor[GILDE_SCROLL_DOWN].x = GILDE_LIST_X;
                actor[GILDE_CHAT_UP].x = (GILDE_GEBAEUDE_X - 2);
                actor[GILDE_CHAT_DOWN].x = (GILDE_GEBAEUDE_X - 2);
                actor[GILDE_LIST].x = ((actor[GILDE_SCROLL_UP].x + actor[GILDE_SCROLL_UP].width) + 5);
                actor[INP_GILDE_CHAT].x = ((actor[GILDE_CHAT_UP].x + actor[GILDE_CHAT_UP].width) + 5);
                i = 0;
                while (i < 40) {
                    actor[(LBL_GILDE_CHAT + i)].x = ((actor[INP_GILDE_CHAT].x + actor[INP_GILDE_CHAT].width) - actor[(LBL_GILDE_CHAT + i)].textWidth);
                    actor[(LBL_GILDE_CHAT + i)].autoSize = "right";
                    i = (i + 1);
                };
            };
        };
        i = 0;
        myRank = 0;
        myAttackStatus = 0;
        scrollLevel = -1;
        selectLevel = 0;
        GoldToDonate = 0;
        MushToDonate = 0;
        DonateTimeout = new Timer(2000, 1);
        DonateTimeout.addEventListener(TimerEvent.TIMER, DoDonate);
        guildInstanceID++;
        if (guildInstanceID > 10000){
            guildInstanceID = 0;
        };
        thisInstanceID = guildInstanceID;
        removeListenersTimer = new Timer(20);
        var _local3 = removeListenersTimer;
        with (_local3) {
            addEventListener(TimerEvent.TIMER, removeListeners);
            start();
        };
        GoldKosten = 10;
        PilzKosten = 10;
        Nutzen = "";
        Ausbaustufe = 1;
        AusbaustufeEx = 1;
        GoldKostenAvg = 0;
        PilzKostenAvg = 0;
        cheapest = -1;
        countCompleted = 0;
        i = 0;
        while (i < 3) {
            Ausbaustufe = guildData[(i + 5)];
            AusbaustufeEx = (Ausbaustufe + ((i)==0) ? 0 : int(guildData[GUILD_RAID_LEVEL]));
            GoldKosten = int((GildeBuildingGold[(Ausbaustufe + 1)] / 100));
            PilzKosten = GildeBuildingPilz[(Ausbaustufe + 1)];
            switch (i){
                case 0:
                    if (AusbaustufeEx > 50){
                        Nutzen = "50";
                    } else {
                        Nutzen = String(AusbaustufeEx);
                    };
                    break;
                case 1:
                    Nutzen = (String((AusbaustufeEx * 2)) + "%");
                    break;
                case 2:
                    Nutzen = (String((AusbaustufeEx * 2)) + "%");
                    break;
            };
            actor[(LBL_GILDE_GEBAEUDE_WERT + i)].text = Nutzen;
            actor[(LBL_GILDE_GEBAEUDE_STUFE + i)].text = String(AusbaustufeEx);
            if (textDir == "right"){
                actor[(LBL_GILDE_GEBAEUDE_NAME + i)].x = (((GILDE_GEBAEUDE_X + GILDE_TEXT_X) + 130) - actor[(LBL_GILDE_GEBAEUDE_NAME + i)].textWidth);
                actor[(LBL_GILDE_GEBAEUDE_WERT_CAPTION + i)].x = (((GILDE_GEBAEUDE_X + GILDE_TEXT_X) + 130) - actor[(LBL_GILDE_GEBAEUDE_WERT_CAPTION + i)].textWidth);
                actor[(LBL_GILDE_GEBAEUDE_WERT + i)].x = (((GILDE_GEBAEUDE_X + GILDE_TEXT_X) + 130) - actor[(LBL_GILDE_GEBAEUDE_WERT + i)].textWidth);
                actor[(LBL_GILDE_GEBAEUDE_STUFE_CAPTION + i)].x = (((GILDE_GEBAEUDE_X + GILDE_TEXT_X) + 130) - actor[(LBL_GILDE_GEBAEUDE_STUFE_CAPTION + i)].textWidth);
                actor[(LBL_GILDE_GEBAEUDE_STUFE + i)].x = ((actor[(LBL_GILDE_GEBAEUDE_STUFE_CAPTION + i)].x - actor[(LBL_GILDE_GEBAEUDE_STUFE + i)].textWidth) - 5);
                actor[(GILDE_GEBAEUDE_IMPROVE + i)].y = actor[(LBL_GILDE_GEBAEUDE_NAME + i)].y;
                actor[(GILDE_GEBAEUDE_IMPROVE_GRAY + i)].y = actor[(LBL_GILDE_GEBAEUDE_NAME + i)].y;
            };
            SetCnt((GILDE_GEBAEUDE_GOLD + i), IF_GOLD);
            SetCnt((GILDE_GEBAEUDE_MUSH + i), IF_PILZE);
            Hide((LBL_GILDE_GEBAEUDE_KOSTEN_GOLD + i), (GILDE_GEBAEUDE_GOLD + i));
            Hide((LBL_GILDE_GEBAEUDE_KOSTEN_MUSH + i), (GILDE_GEBAEUDE_MUSH + i));
            if (Ausbaustufe >= 50){
                countCompleted = (countCompleted + 1);
                Show((LBL_GILDE_GEBAEUDE_KOSTEN_GOLD + i));
                actor[(LBL_GILDE_GEBAEUDE_KOSTEN_GOLD + i)].text = txt[TXT_BUILDING_COMPLETE];
                if (textDir == "right"){
                    actor[(LBL_GILDE_GEBAEUDE_KOSTEN_GOLD + i)].x = (((GILDE_GEBAEUDE_X + GILDE_TEXT_X) + 130) - actor[(LBL_GILDE_GEBAEUDE_KOSTEN_GOLD + i)].textWidth);
                } else {
                    actor[(LBL_GILDE_GEBAEUDE_KOSTEN_GOLD + i)].x = (GILDE_GEBAEUDE_X + GILDE_TEXT_X);
                };
            } else {
                if (GoldKosten > 0){
                    Show((LBL_GILDE_GEBAEUDE_KOSTEN_GOLD + i), (GILDE_GEBAEUDE_GOLD + i));
                    actor[(LBL_GILDE_GEBAEUDE_KOSTEN_GOLD + i)].text = String(GoldKosten);
                    if (textDir == "right"){
                        actor[(LBL_GILDE_GEBAEUDE_KOSTEN_GOLD + i)].x = (((GILDE_GEBAEUDE_X + GILDE_TEXT_X) + 130) - actor[(LBL_GILDE_GEBAEUDE_KOSTEN_GOLD + i)].textWidth);
                        actor[(GILDE_GEBAEUDE_GOLD + i)].x = ((actor[(LBL_GILDE_GEBAEUDE_KOSTEN_GOLD + i)].x - actor[(LBL_GILDE_GEBAEUDE_KOSTEN_GOLD + i)].textWidth) - 7);
                    } else {
                        actor[(LBL_GILDE_GEBAEUDE_KOSTEN_GOLD + i)].x = (GILDE_GEBAEUDE_X + GILDE_TEXT_X);
                        actor[(GILDE_GEBAEUDE_GOLD + i)].x = ((actor[(LBL_GILDE_GEBAEUDE_KOSTEN_GOLD + i)].x + actor[(LBL_GILDE_GEBAEUDE_KOSTEN_GOLD + i)].textWidth) + 7);
                    };
                    if ((((cheapest == -1)) or ((GoldKosten < cheapest)))){
                        cheapest = GoldKosten;
                    };
                };
                if (PilzKosten > 0){
                    Show((LBL_GILDE_GEBAEUDE_KOSTEN_MUSH + i), (GILDE_GEBAEUDE_MUSH + i));
                    actor[(LBL_GILDE_GEBAEUDE_KOSTEN_MUSH + i)].text = String(PilzKosten);
                    if (textDir == "right"){
                        if (GoldKosten > 0){
                            actor[(LBL_GILDE_GEBAEUDE_KOSTEN_MUSH + i)].x = ((actor[(GILDE_GEBAEUDE_GOLD + i)].x - actor[(LBL_GILDE_GEBAEUDE_KOSTEN_MUSH + i)].textWidth) - 10);
                        } else {
                            actor[(LBL_GILDE_GEBAEUDE_KOSTEN_MUSH + i)].x = (((GILDE_GEBAEUDE_X + GILDE_TEXT_X) + 130) - actor[(LBL_GILDE_GEBAEUDE_KOSTEN_MUSH + i)].textWidth);
                        };
                        actor[(GILDE_GEBAEUDE_MUSH + i)].x = ((actor[(LBL_GILDE_GEBAEUDE_KOSTEN_MUSH + i)].x - actor[(GILDE_GEBAEUDE_MUSH + i)].width) - 7);
                    } else {
                        if (GoldKosten > 0){
                            actor[(LBL_GILDE_GEBAEUDE_KOSTEN_MUSH + i)].x = ((actor[(GILDE_GEBAEUDE_GOLD + i)].x + actor[(GILDE_GEBAEUDE_GOLD + i)].width) + 10);
                        } else {
                            actor[(LBL_GILDE_GEBAEUDE_KOSTEN_MUSH + i)].x = (GILDE_GEBAEUDE_X + GILDE_TEXT_X);
                        };
                        actor[(GILDE_GEBAEUDE_MUSH + i)].x = ((actor[(LBL_GILDE_GEBAEUDE_KOSTEN_MUSH + i)].x + actor[(LBL_GILDE_GEBAEUDE_KOSTEN_MUSH + i)].textWidth) + 7);
                    };
                };
            };
            GoldKostenAvg = (GoldKostenAvg + GoldKosten);
            PilzKostenAvg = (PilzKostenAvg + PilzKosten);
            i = (i + 1);
        };
        GoldKostenAvg = (GoldKostenAvg / 3);
        PilzKostenAvg = (PilzKostenAvg / 3);
        actor[LBL_GILDE_GOLD2].text = GetSpendAmount();
        actor[LBL_GILDE_MUSH2].text = "1";
        actor[GILDE_GOLD2].x = ((actor[LBL_GILDE_GOLD2].x + actor[LBL_GILDE_GOLD2].textWidth) + 15);
        actor[GILDE_MUSH2].x = ((actor[LBL_GILDE_GOLD2].x + actor[LBL_GILDE_GOLD2].textWidth) + 15);
        SetCnt(GILDE_GOLD, IF_GOLD);
        SetCnt(GILDE_GOLD2, IF_GOLD);
        SetCnt(GILDE_MUSH, IF_PILZE);
        SetCnt(GILDE_MUSH2, IF_PILZE);
        RightBoxWidth = ((((actor[GILDE_GOLD].width + GILDE_GOLDMUSH_C1) + actor[LBL_GILDE_GOLD2].textWidth) + GILDE_GOLDMUSH_C1) + actor[GILDE_GOLD2].width);
        if (((((actor[GILDE_MUSH].width + GILDE_GOLDMUSH_C1) + actor[LBL_GILDE_MUSH2].textWidth) + GILDE_GOLDMUSH_C1) + actor[GILDE_MUSH2].width) > RightBoxWidth){
            RightBoxWidth = ((((actor[GILDE_MUSH].width + GILDE_GOLDMUSH_C1) + actor[LBL_GILDE_MUSH2].textWidth) + GILDE_GOLDMUSH_C1) + actor[GILDE_MUSH2].width);
        };
        if (textDir == "right"){
            actor[GILDE_GOLD].x = (((GILDE_GOLDMUSH_X + GILDE_GOLDMUSH_C2) + int((RightBoxWidth / 2))) - actor[GILDE_GOLD].width);
            actor[GILDE_MUSH].x = actor[GILDE_GOLD].x;
            actor[LBL_GILDE_GOLD2].x = ((actor[GILDE_GOLD].x - actor[LBL_GILDE_GOLD2].textWidth) - GILDE_GOLDMUSH_C1);
            actor[LBL_GILDE_MUSH2].x = ((actor[GILDE_MUSH].x - actor[LBL_GILDE_MUSH2].textWidth) - GILDE_GOLDMUSH_C1);
            actor[GILDE_GOLD2].x = ((actor[LBL_GILDE_GOLD2].x - actor[GILDE_GOLD2].width) - GILDE_GOLDMUSH_C1);
            actor[GILDE_MUSH2].x = ((actor[LBL_GILDE_MUSH2].x - actor[GILDE_MUSH2].width) - GILDE_GOLDMUSH_C1);
        } else {
            actor[GILDE_GOLD].x = ((GILDE_GOLDMUSH_X + GILDE_GOLDMUSH_C2) - int((RightBoxWidth / 2)));
            actor[GILDE_MUSH].x = actor[GILDE_GOLD].x;
            actor[LBL_GILDE_GOLD2].x = ((actor[GILDE_GOLD].x + actor[GILDE_GOLD].width) + GILDE_GOLDMUSH_C1);
            actor[LBL_GILDE_MUSH2].x = ((actor[GILDE_MUSH].x + actor[GILDE_MUSH].width) + GILDE_GOLDMUSH_C1);
            actor[GILDE_GOLD2].x = ((actor[LBL_GILDE_GOLD2].x + actor[LBL_GILDE_GOLD2].textWidth) + GILDE_GOLDMUSH_C1);
            actor[GILDE_MUSH2].x = ((actor[LBL_GILDE_MUSH2].x + actor[LBL_GILDE_MUSH2].textWidth) + GILDE_GOLDMUSH_C1);
        };
        _local3 = actor[LBL_GILDE_GOLD];
        with (_local3) {
            text = String(int((guildData[1] / 100)));
            LeftBoxWidth = ((textWidth + GILDE_GOLDMUSH_C1) + actor[GILDE_GOLD].width);
        };
        _local3 = actor[LBL_GILDE_MUSH];
        with (_local3) {
            text = guildData[2];
            if (((textWidth + GILDE_GOLDMUSH_C1) + actor[GILDE_MUSH].width) > LeftBoxWidth){
                LeftBoxWidth = ((textWidth + GILDE_GOLDMUSH_C1) + actor[GILDE_MUSH].width);
            };
            if (textDir == "right"){
                actor[GILDE_MUSH].x = ((GILDE_GOLDMUSH_X + int((LeftBoxWidth / 2))) - actor[GILDE_MUSH].width);
                actor[GILDE_GOLD].x = actor[GILDE_MUSH].x;
                actor[LBL_GILDE_GOLD].x = ((actor[GILDE_GOLD].x - actor[LBL_GILDE_GOLD].textWidth) - GILDE_GOLDMUSH_C1);
                x = ((actor[GILDE_MUSH].x - actor[LBL_GILDE_MUSH].textWidth) - GILDE_GOLDMUSH_C1);
            } else {
                actor[GILDE_MUSH].x = (GILDE_GOLDMUSH_X - int((LeftBoxWidth / 2)));
                actor[GILDE_GOLD].x = actor[GILDE_MUSH].x;
                actor[LBL_GILDE_GOLD].x = ((actor[GILDE_GOLD].x + actor[GILDE_GOLD].width) + GILDE_GOLDMUSH_C1);
                x = ((actor[GILDE_MUSH].x + actor[GILDE_MUSH].width) + GILDE_GOLDMUSH_C1);
            };
        };
        crestView = OnStage(GILDE_CREST);
        startWithCrest = ((((((((((isMine) or ((guildData[0] == Savegame[SG_GUILD_INDEX])))) and ((guildData[5] >= 50)))) and ((guildData[6] >= 50)))) and ((guildData[7] >= 50)))) and (!(OnStage(GILDE_SCROLL_UP))));
        if (guildData[0] != lastGuildCrestId){
            crestView = false;
        };
        lastGuildCrestId = guildData[0];
        RemoveAll();
        Add(SCREEN_GILDEN);
        if (crestView){
            if (actor[GILDE_CREST].y == GILDE_GEBAEUDE_Y){
                SetAlpha(GILDE_CREST_CONTROLS, 1);
                Add(GILDE_CREST_CONTROLS);
            };
            Remove(GILDE_GEBAEUDE);
        } else {
            actor[GILDE_CREST].y = (GILDE_GEBAEUDE_Y + 60);
            selecterCrestElement = -1;
            if (((isMine) or ((guildData[0] == Savegame[SG_GUILD_INDEX])))){
                if (startWithCrest){
                    Remove(GILDE_GEBAEUDE);
                } else {
                    Remove(GILDE_CREST);
                };
                actor[GILDE_CREST].mouseChildren = true;
            } else {
                Remove(GILDE_CREST_GOTO_GEBAEUDE);
                actor[GILDE_CREST].mouseChildren = false;
            };
            loadCrest();
        };
        if (!((isMine) or ((guildData[0] == Savegame[SG_GUILD_INDEX])))){
            Remove(GILDE_CREST_GOTO_GEBAEUDE);
            actor[GILDE_CREST].mouseChildren = false;
        };
        if (textDir == "right"){
            actor[LBL_GILDE_CHAT_CAPTION].x = ((actor[GILDE_RAID].x - actor[LBL_GILDE_CHAT_CAPTION].textWidth) - 5);
            actor[GILDE_LINK].x = ((actor[GILDE_RAID].x - actor[LBL_GILDE_LINK].textWidth) - 5);
            actor[INP_GILDE_TEXT].x = (GILDE_TEXT_X - 5);
            MakeRightTextArea(INP_GILDE_TEXT, 0);
            MakeRightTextArea(INP_GILDE_CHAT, 0);
        };
        i = 0;
        while (i < 3) {
            Ausbaustufe = guildData[(i + 5)];
            if (Ausbaustufe >= 50){
                Hide((GILDE_GEBAEUDE_IMPROVE + i));
                Show((GILDE_GEBAEUDE_IMPROVE_GRAY + i));
            };
            i = (i + 1);
        };
        GuildBtnRepeatTimer = new Timer(1000);
        actor[GILDE_SCROLL_UP].addEventListener(MouseEvent.CLICK, GuildBtnHandler);
        actor[GILDE_SCROLL_DOWN].addEventListener(MouseEvent.CLICK, GuildBtnHandler);
        actor[GILDE_DIALOG_CANCEL].addEventListener(MouseEvent.CLICK, GuildBtnHandler);
        actor[GILDE_DIALOG_OK_KICK].addEventListener(MouseEvent.CLICK, GuildBtnHandler);
        actor[GILDE_DIALOG_OK_MASTER].addEventListener(MouseEvent.CLICK, GuildBtnHandler);
        actor[GILDE_DIALOG_OK_INVITE].addEventListener(MouseEvent.CLICK, GuildBtnHandler);
        actor[GILDE_DIALOG_OK_REVOLT].addEventListener(MouseEvent.CLICK, GuildBtnHandler);
        actor[GILDE_DIALOG_OK_RAID].addEventListener(MouseEvent.CLICK, GuildBtnHandler);
        actor[GILDE_INVITE].addEventListener(MouseEvent.CLICK, GuildBtnHandler);
        actor[GILDE_PROFILE].addEventListener(MouseEvent.CLICK, GuildBtnHandler);
        actor[GILDE_KICK].addEventListener(MouseEvent.CLICK, GuildBtnHandler);
        actor[GILDE_PROMOTE].addEventListener(MouseEvent.CLICK, GuildBtnHandler);
        actor[GILDE_DEMOTE].addEventListener(MouseEvent.CLICK, GuildBtnHandler);
        actor[GILDE_MASTER].addEventListener(MouseEvent.CLICK, GuildBtnHandler);
        actor[GILDE_REVOLT].addEventListener(MouseEvent.CLICK, GuildBtnHandler);
        actor[GILDE_GEBAEUDE_IMPROVE].addEventListener(MouseEvent.CLICK, GuildBtnHandler);
        actor[(GILDE_GEBAEUDE_IMPROVE + 1)].addEventListener(MouseEvent.CLICK, GuildBtnHandler);
        actor[(GILDE_GEBAEUDE_IMPROVE + 2)].addEventListener(MouseEvent.CLICK, GuildBtnHandler);
        actor[GILDE_KATAPULT].addEventListener(MouseEvent.CLICK, GuildBtnHandler);
        actor[(GILDE_KATAPULT + 1)].addEventListener(MouseEvent.CLICK, GuildBtnHandler);
        actor[(GILDE_KATAPULT + 2)].addEventListener(MouseEvent.CLICK, GuildBtnHandler);
        actor[GILDE_GOLD].addEventListener(MouseEvent.MOUSE_DOWN, GuildBtnHandler);
        actor[GILDE_MUSH].addEventListener(MouseEvent.MOUSE_DOWN, GuildBtnHandler);
        actor[GILDE_GOLD].addEventListener(MouseEvent.MOUSE_OUT, DoDonate);
        actor[GILDE_MUSH].addEventListener(MouseEvent.MOUSE_OUT, DoDonate);
        _local3 = actor[GILDE_GOLD];
        with (_local3) {
            addEventListener(MouseEvent.MOUSE_DOWN, GuildBtnDownHandler);
            addEventListener(MouseEvent.MOUSE_UP, GuildBtnUpHandler);
            addEventListener(MouseEvent.MOUSE_OUT, GuildBtnUpHandler);
        };
        _local3 = actor[GILDE_MUSH];
        with (_local3) {
            addEventListener(MouseEvent.MOUSE_DOWN, GuildBtnDownHandler);
            addEventListener(MouseEvent.MOUSE_UP, GuildBtnUpHandler);
            addEventListener(MouseEvent.MOUSE_OUT, GuildBtnUpHandler);
        };
        BuildGuildList();
        if (myRank > 2){
            Hide(GILDE_GEBAEUDE_IMPROVE, (GILDE_GEBAEUDE_IMPROVE + 1), (GILDE_GEBAEUDE_IMPROVE + 2));
            Show(GILDE_GEBAEUDE_IMPROVE_GRAY, (GILDE_GEBAEUDE_IMPROVE_GRAY + 1), (GILDE_GEBAEUDE_IMPROVE_GRAY + 2));
        };
        _local3 = actor[LBL_SCREEN_TITLE];
        with (_local3) {
            text = ThisGilde;
            x = (SCREEN_TITLE_X - int((textWidth / 2)));
            y = SCREEN_TITLE_Y_GUILD;
        };
        _local3 = actor[LBL_GILDE_CREST_INSCRIPTION];
        with (_local3) {
            text = ThisGilde;
            x = (120 - int((textWidth / 2)));
        };
        _local3 = actor[LBL_GILDE_RANG];
        with (_local3) {
            if ((((int(guildData[GUILD_RAID_LEVEL]) > 0)) and (txt[(TXT_RAID_TEXT + 18)]))){
                if (textDir == "right"){
                    text = ((((((((((("50/" + guildData[GUILD_RAID_LEVEL]) + " :") + txt[(TXT_RAID_TEXT + 18)]) + "  ") + String(((GildenEhre)==1) ? 0 : GildenEhre)) + " :") + txt[TXT_HALL_LIST_COLUMN_5]) + "  ") + String(GildenRang)) + " :") + txt[TXT_HALL_LIST_COLUMN_1]);
                } else {
                    text = (((((((((((txt[TXT_HALL_LIST_COLUMN_1] + ": ") + String(GildenRang)) + "  ") + txt[TXT_HALL_LIST_COLUMN_5]) + ": ") + String(((GildenEhre)==1) ? 0 : GildenEhre)) + "  ") + txt[(TXT_RAID_TEXT + 18)]) + ": ") + guildData[GUILD_RAID_LEVEL]) + "/50");
                };
            } else {
                if (textDir == "right"){
                    text = ((((((String(((GildenEhre)==1) ? 0 : GildenEhre) + " :") + txt[TXT_HALL_LIST_COLUMN_5]) + "     ") + String(GildenRang)) + " :") + txt[TXT_HALL_LIST_COLUMN_1]);
                } else {
                    text = ((((((txt[TXT_HALL_LIST_COLUMN_1] + ": ") + String(GildenRang)) + "     ") + txt[TXT_HALL_LIST_COLUMN_5]) + ": ") + String(((GildenEhre)==1) ? 0 : GildenEhre));
                };
            };
        };
        if (textDir == "right"){
            actor[GILDE_RANG].x = (1175 - actor[LBL_GILDE_RANG].textWidth);
        };
        if (guildDescr.indexOf("http://") != -1){
            guildForumLink = guildDescr.substr(guildDescr.indexOf("http://"));
            guildForumLink = guildForumLink.split(")").join(" ").split("#").join(" ").split(String.fromCharCode(13)).join(" ").split(String.fromCharCode(10)).join(" ").split(" ")[0];
            Add(GILDE_LINK);
            if (guildForumLink.substr(guildForumLink.length, 1) == "."){
                guildForumLink = guildForumLink.substr(0, (guildForumLink.length - 1));
            };
            EnablePopup(GILDE_LINK, guildForumLink);
        } else {
            if (guildDescr.indexOf("www.") != -1){
                guildForumLink = ("http://" + guildDescr.substr(guildDescr.indexOf("www.")));
                guildForumLink = guildForumLink.split(")").join(" ").split("#").join(" ").split(String.fromCharCode(13)).join(" ").split(String.fromCharCode(10)).join(" ").split(" ")[0];
                Add(GILDE_LINK);
                if (guildForumLink.substr(guildForumLink.length, 1) == "."){
                    guildForumLink = guildForumLink.substr(0, (guildForumLink.length - 1));
                };
                EnablePopup(GILDE_LINK, guildForumLink);
            };
        };
        _local3 = actor[INP_GILDE_TEXT];
        with (_local3) {
            getChildAt(0).text = ((guildDescr)=="") ? (((myRank == 1)) ? txt[TXT_ENTERGUILDDESC] : txt[TXT_GUILDNOTEXT]) : resolveBreaks(guildDescr);
            getChildAt(0).type = (((((myRank == 1)) and (isMine))) ? TextFieldType.INPUT : TextFieldType.DYNAMIC);
            mouseEnabled = true;
            addEventListener(FocusEvent.FOCUS_IN, EnterGuildDesc);
            addEventListener(FocusEvent.FOCUS_OUT, LeaveGuildDesc);
            if (textDir == "right"){
                getChildAt(0).wordWrap = false;
            };
        };
        Add(GILDE_RAID_GRAY);
        Add(GILDE_ATTACK_GRAY);
        Add(GILDE_DEFEND_GRAY);
        if ((((guildData[5] >= 20)) and ((guildData[0] == Savegame[SG_GUILD_INDEX])))){
            if (myRank <= 2){
                if (guildData[4] == 0){
                    Add(GILDE_KATAPULT);
                } else {
                    if (guildData[4] == 1){
                        Add((GILDE_KATAPULT + 1));
                    } else {
                        if (guildData[4] == 2){
                            Add((GILDE_KATAPULT + 2));
                        } else {
                            if (guildData[4] == 3){
                                Add((GILDE_KATAPULT_OK + 2));
                            };
                        };
                    };
                };
            } else {
                if (guildData[4] == 0){
                    Add(GILDE_KATAPULT_GRAY);
                } else {
                    if (guildData[4] == 1){
                        Add(GILDE_KATAPULT_OK);
                    } else {
                        if (guildData[4] == 2){
                            Add((GILDE_KATAPULT_OK + 1));
                        } else {
                            if (guildData[4] == 3){
                                Add((GILDE_KATAPULT_OK + 2));
                            };
                        };
                    };
                };
            };
            i = 0;
            while (i < 3) {
                EnablePopup((GILDE_KATAPULT + i), POPUP_BEGIN_LINE, txt[TXT_CATAPULT], POPUP_END_LINE, POPUP_BEGIN_LINE, txt[(TXT_CATAPULT + 1)].split("%1").join("3").split("#").join(String.fromCharCode(13)), POPUP_END_LINE, POPUP_BEGIN_LINE, txt[(TXT_CATAPULT + 2)], 200, txt[(TXT_CATAPULT + 3)].split("%1").join(String(guildData[4])).split("%2").join("3"), POPUP_END_LINE, POPUP_BEGIN_LINE, txt[(TXT_CATAPULT + 4)], 200, txt[(TXT_CATAPULT + 5)].split("%1").join("5"), actor[IF_PILZE], POPUP_END_LINE);
                i = (i + 1);
            };
            EnablePopup(GILDE_KATAPULT_GRAY, POPUP_BEGIN_LINE, txt[TXT_CATAPULT], POPUP_END_LINE, POPUP_BEGIN_LINE, txt[(TXT_CATAPULT + 1)].split("%1").join("3").split("#").join(String.fromCharCode(13)), POPUP_END_LINE, POPUP_BEGIN_LINE, txt[(TXT_CATAPULT + 2)], 200, txt[(TXT_CATAPULT + 3)].split("%1").join(String(guildData[4])).split("%2").join("3"), POPUP_END_LINE, POPUP_BEGIN_LINE, txt[(TXT_CATAPULT + 6)], POPUP_END_LINE);
            i = 0;
            while (i < 2) {
                EnablePopup((GILDE_KATAPULT_OK + i), POPUP_BEGIN_LINE, txt[TXT_CATAPULT], POPUP_END_LINE, POPUP_BEGIN_LINE, txt[(TXT_CATAPULT + 1)].split("%1").join("3").split("#").join(String.fromCharCode(13)), POPUP_END_LINE, POPUP_BEGIN_LINE, txt[(TXT_CATAPULT + 2)], 200, txt[(TXT_CATAPULT + 3)].split("%1").join(String(guildData[4])).split("%2").join("3"), POPUP_END_LINE, POPUP_BEGIN_LINE, txt[(TXT_CATAPULT + 6)], POPUP_END_LINE);
                i = (i + 1);
            };
            EnablePopup((GILDE_KATAPULT_OK + 2), POPUP_BEGIN_LINE, txt[TXT_CATAPULT], POPUP_END_LINE, POPUP_BEGIN_LINE, txt[(TXT_CATAPULT + 1)].split("%1").join("3").split("#").join(String.fromCharCode(13)), POPUP_END_LINE, POPUP_BEGIN_LINE, txt[(TXT_CATAPULT + 2)], 200, txt[(TXT_CATAPULT + 3)].split("%1").join(String(guildData[4])).split("%2").join("3"), POPUP_END_LINE);
        };
        raidCost = GildeBuildingGold[(int(guildData[GUILD_RAID_LEVEL]) + 51)];
        if (int(guildData[GUILD_RAID_LEVEL]) == 0){
            raidCost = (raidCost * 0.2);
        };
        if (int(guildData[GUILD_RAID_LEVEL]) == 1){
            raidCost = (raidCost * 0.4);
        };
        if (int(guildData[GUILD_RAID_LEVEL]) == 2){
            raidCost = (raidCost * 0.6);
        };
        if (int(guildData[GUILD_RAID_LEVEL]) == 3){
            raidCost = (raidCost * 0.8);
        };
        raidCost = Number(int((raidCost / 100)));
        lastRaidCost = raidCost;
        if (txt[TXT_RAID_TEXT]){
            if (guildData[GUILD_RAID_LEVEL] >= 50){
                EnablePopup(GILDE_RAID_GRAY, txt[(TXT_RAID_TEXT + 17)]);
            } else {
                EnablePopup(GILDE_RAID_GRAY, POPUP_BEGIN_LINE, txt[(TXT_RAID_TEXT + 4)], POPUP_END_LINE, POPUP_BEGIN_LINE, txt[(TXT_RAID_TEXT + 15)], (POPUP_TAB + POPUP_TAB_ADD), txt[(TXT_DUNGEON_NAMES + int(guildData[GUILD_RAID_LEVEL]))], (("(" + String((int(guildData[GUILD_RAID_LEVEL]) + 1))) + "/50)"), POPUP_END_LINE, POPUP_BEGIN_LINE, txt[(TXT_RAID_TEXT + 16)], (POPUP_TAB + POPUP_TAB_ADD), String(raidCost), actor[IF_GOLD], POPUP_END_LINE);
            };
        };
        EnablePopup(GILDE_ATTACK_GRAY, txt[(TXT_GUILD_BATTLE_POPUP + 7)]);
        EnablePopup(GILDE_DEFEND_GRAY, txt[(TXT_GUILD_BATTLE_POPUP + 6)]);
        actor[LBL_GILDE_ATTACK].text = "";
        actor[LBL_GILDE_DEFENCE].text = "";
        lastGuildData = guildData;
        isRaid = !((guildData[GUILD_IS_RAID] == 0));
        SendAction(ACT_REQUEST_GUILD_NAMES, guildData[GUILD_ATTACK_TARGET], guildData[GUILD_DEFENCE_TARGET], ((isMine) ? 0 : 1));
        if (guildData[0] == Savegame[SG_GUILD_INDEX]){
            myOwnRank = myRank;
            myOwnAttackTarget = int(guildData[GUILD_ATTACK_TARGET]);
            myOwnGuildMoney = int(guildData[1]);
            if ((int(Savegame[SG_SERVER_TIME]) - int(Savegame[SG_GUILD_JOIN_DATE])) > ((60 * 60) * 24)){
                if ((((myRank == 1)) or ((myRank == 2)))){
                    if (int(guildData[GUILD_ATTACK_TARGET]) == 0){
                        Add(GILDE_ATTACK);
                        EnablePopup(GILDE_ATTACK, txt[(TXT_GUILD_BATTLE_POPUP + 0)]);
                        if (guildData[GUILD_RAID_LEVEL] >= 50){
                            if (txt[TXT_RAID_TEXT]){
                                EnablePopup(GILDE_RAID_GRAY, txt[(TXT_RAID_TEXT + 17)]);
                            };
                        } else {
                            Add(GILDE_RAID);
                            if (txt[TXT_RAID_TEXT]){
                                EnablePopup(GILDE_RAID, POPUP_BEGIN_LINE, txt[(TXT_RAID_TEXT + 0)], POPUP_END_LINE, POPUP_BEGIN_LINE, txt[(TXT_RAID_TEXT + 15)], (POPUP_TAB + POPUP_TAB_ADD), txt[(TXT_DUNGEON_NAMES + int(guildData[GUILD_RAID_LEVEL]))], (("(" + String((int(guildData[GUILD_RAID_LEVEL]) + 1))) + "/50)"), POPUP_END_LINE, POPUP_BEGIN_LINE, txt[(TXT_RAID_TEXT + 16)], (POPUP_TAB + POPUP_TAB_ADD), String(raidCost), actor[IF_GOLD], POPUP_END_LINE);
                            };
                        };
                    } else {
                        if (int(guildData[GUILD_ATTACK_TARGET]) < 0){
                            EnablePopup(GILDE_ATTACK_GRAY, txt[(TXT_GUILD_BATTLE_POPUP + 5)].split("%1").join(TimeStr(lastGuildData[GUILD_ATTACK_TIME])));
                            if (txt[TXT_RAID_TEXT]){
                                EnablePopup(GILDE_RAID_GRAY, txt[(TXT_RAID_TEXT + 3)].split("%1").join(TimeStr(lastGuildData[GUILD_ATTACK_TIME])));
                            };
                        } else {
                            if ((myAttackStatus & 1)){
                                if (isRaid){
                                    Add(GILDE_RAID_OK);
                                    if (txt[TXT_RAID_TEXT]){
                                        EnablePopup(GILDE_RAID_OK, txt[(TXT_RAID_TEXT + 2)]);
                                    };
                                    if (txt[TXT_RAID_TEXT]){
                                        EnablePopup(GILDE_ATTACK_GRAY, txt[(TXT_RAID_TEXT + 10)]);
                                    };
                                } else {
                                    Add(GILDE_ATTACK_OK);
                                    EnablePopup(GILDE_ATTACK_OK, txt[(TXT_GUILD_BATTLE_POPUP + 3)]);
                                    if (txt[TXT_RAID_TEXT]){
                                        EnablePopup(GILDE_RAID_GRAY, txt[(TXT_RAID_TEXT + 11)]);
                                    };
                                };
                            } else {
                                if (isRaid){
                                    Add(GILDE_RAID);
                                    if (txt[TXT_RAID_TEXT]){
                                        EnablePopup(GILDE_RAID, txt[(TXT_RAID_TEXT + 1)]);
                                    };
                                    if (txt[TXT_RAID_TEXT]){
                                        EnablePopup(GILDE_ATTACK_GRAY, txt[(TXT_RAID_TEXT + 10)]);
                                    };
                                } else {
                                    Add(GILDE_ATTACK);
                                    EnablePopup(GILDE_ATTACK, txt[(TXT_GUILD_BATTLE_POPUP + 1)]);
                                    if (txt[TXT_RAID_TEXT]){
                                        EnablePopup(GILDE_RAID_GRAY, txt[(TXT_RAID_TEXT + 11)]);
                                    };
                                };
                            };
                        };
                    };
                } else {
                    if (int(guildData[GUILD_ATTACK_TARGET]) == 0){
                    } else {
                        if (int(guildData[GUILD_ATTACK_TARGET]) < 0){
                            EnablePopup(GILDE_ATTACK_GRAY, txt[(TXT_GUILD_BATTLE_POPUP + 5)].split("%1").join(TimeStr(lastGuildData[GUILD_ATTACK_TIME])));
                            if (txt[TXT_RAID_TEXT]){
                                EnablePopup(GILDE_RAID_GRAY, txt[(TXT_RAID_TEXT + 3)].split("%1").join(TimeStr(lastGuildData[GUILD_ATTACK_TIME])));
                            };
                        } else {
                            if (isRaid){
                                if ((int(Savegame[SG_GUILD_FIGHT_STATUS]) & 1)){
                                    Add(GILDE_RAID_OK);
                                    if (txt[TXT_RAID_TEXT]){
                                        EnablePopup(GILDE_RAID_OK, txt[(TXT_RAID_TEXT + 2)]);
                                    };
                                    if (txt[TXT_RAID_TEXT]){
                                        EnablePopup(GILDE_ATTACK_GRAY, txt[(TXT_RAID_TEXT + 10)]);
                                    };
                                } else {
                                    Add(GILDE_RAID);
                                    if (txt[TXT_RAID_TEXT]){
                                        EnablePopup(GILDE_RAID, txt[(TXT_RAID_TEXT + 1)]);
                                    };
                                    if (txt[TXT_RAID_TEXT]){
                                        EnablePopup(GILDE_ATTACK_GRAY, txt[(TXT_RAID_TEXT + 10)]);
                                    };
                                };
                            } else {
                                if ((int(Savegame[SG_GUILD_FIGHT_STATUS]) & 1)){
                                    Add(GILDE_ATTACK_OK);
                                    EnablePopup(GILDE_ATTACK_OK, txt[(TXT_GUILD_BATTLE_POPUP + 3)]);
                                    if (txt[TXT_RAID_TEXT]){
                                        EnablePopup(GILDE_RAID_GRAY, txt[(TXT_RAID_TEXT + 11)]);
                                    };
                                } else {
                                    Add(GILDE_ATTACK);
                                    EnablePopup(GILDE_ATTACK, txt[(TXT_GUILD_BATTLE_POPUP + 1)]);
                                    if (txt[TXT_RAID_TEXT]){
                                        EnablePopup(GILDE_RAID_GRAY, txt[(TXT_RAID_TEXT + 11)]);
                                    };
                                };
                            };
                        };
                    };
                };
                if (int(guildData[GUILD_DEFENCE_TARGET]) <= 0){
                    EnablePopup(GILDE_DEFEND_GRAY, txt[(TXT_GUILD_BATTLE_POPUP + 6)]);
                } else {
                    if ((int(Savegame[SG_GUILD_FIGHT_STATUS]) & 2)){
                        Add(GILDE_DEFEND_OK);
                        EnablePopup(GILDE_DEFEND_OK, txt[(TXT_GUILD_BATTLE_POPUP + 4)]);
                    } else {
                        Add(GILDE_DEFEND);
                        EnablePopup(GILDE_DEFEND, txt[(TXT_GUILD_BATTLE_POPUP + 2)]);
                    };
                };
            } else {
                EnablePopup(GILDE_RAID_GRAY, txt[TXT_GUILD_JOINED_TOO_RECENTLY].split("%1").join(TimeStr((Number(Savegame[SG_GUILD_JOIN_DATE]) + ((60 * 60) * 24)), true)));
                EnablePopup(GILDE_ATTACK_GRAY, txt[TXT_GUILD_JOINED_TOO_RECENTLY].split("%1").join(TimeStr((Number(Savegame[SG_GUILD_JOIN_DATE]) + ((60 * 60) * 24)), true)));
                EnablePopup(GILDE_DEFEND_GRAY, txt[TXT_GUILD_JOINED_TOO_RECENTLY].split("%1").join(TimeStr((Number(Savegame[SG_GUILD_JOIN_DATE]) + ((60 * 60) * 24)), true)));
            };
        } else {
            Remove(GILDE_RAID);
            Remove(GILDE_RAID_GRAY);
            Remove(GILDE_RAID_OK);
            if ((int(Savegame[SG_SERVER_TIME]) - int(Savegame[SG_GUILD_JOIN_DATE])) > ((60 * 60) * 24)){
                if (myOwnRank == -1){
                    Remove(GILDE_ATTACK_GRAY);
                    Remove(GILDE_DEFEND_GRAY);
                } else {
                    if ((((myOwnRank == 1)) or ((myOwnRank == 2)))){
                        if (int(guildData[GUILD_DEFENCE_TARGET]) == 0){
                            if (myOwnAttackTarget == 0){
                                if (myOwnGuildMoney >= AttackCost){
                                    Add(GILDE_ATTACK);
                                    EnablePopup(GILDE_ATTACK, POPUP_BEGIN_LINE, txt[(TXT_GUILD_BATTLE_POPUP + 8)], POPUP_END_LINE, POPUP_BEGIN_LINE, txt[(TXT_GUILD_BATTLE_POPUP + 17)], String(int((AttackCost / 100))), actor[IF_GOLD], POPUP_END_LINE);
                                } else {
                                    EnablePopup(GILDE_ATTACK_GRAY, POPUP_BEGIN_LINE, txt[(TXT_GUILD_BATTLE_POPUP + 18)], POPUP_END_LINE, POPUP_BEGIN_LINE, txt[(TXT_GUILD_BATTLE_POPUP + 17)], String(int((AttackCost / 100))), actor[IF_GOLD], POPUP_END_LINE);
                                };
                            } else {
                                if (myOwnAttackTarget < 0){
                                    EnablePopup(GILDE_ATTACK_GRAY, txt[(TXT_GUILD_BATTLE_POPUP + 11)]);
                                } else {
                                    EnablePopup(GILDE_ATTACK_GRAY, txt[(TXT_GUILD_BATTLE_POPUP + 16)]);
                                };
                            };
                        } else {
                            if (int(guildData[GUILD_DEFENCE_TARGET]) == int(Savegame[SG_GUILD_INDEX])){
                                Add(GILDE_ATTACK_OK);
                                EnablePopup(GILDE_ATTACK_OK, txt[(TXT_GUILD_BATTLE_POPUP + 12)]);
                            } else {
                                if (int(guildData[GUILD_DEFENCE_TARGET]) < 0){
                                    EnablePopup(GILDE_ATTACK_GRAY, txt[(TXT_GUILD_BATTLE_POPUP + 11)]);
                                } else {
                                    EnablePopup(GILDE_ATTACK_GRAY, txt[(TXT_GUILD_BATTLE_POPUP + 13)]);
                                };
                            };
                        };
                    } else {
                        if (int(guildData[GUILD_DEFENCE_TARGET]) == int(Savegame[SG_GUILD_INDEX])){
                            Add(GILDE_ATTACK_OK);
                            EnablePopup(GILDE_ATTACK_OK, txt[(TXT_GUILD_BATTLE_POPUP + 12)]);
                        } else {
                            EnablePopup(GILDE_ATTACK_GRAY, txt[(TXT_GUILD_BATTLE_POPUP + 14)]);
                        };
                        if (int(guildData[GUILD_ATTACK_TARGET]) == int(Savegame[SG_GUILD_INDEX])){
                            if ((int(Savegame[SG_GUILD_FIGHT_STATUS]) & 2)){
                                Add(GILDE_DEFEND_OK);
                                EnablePopup(GILDE_DEFEND_OK, txt[(TXT_GUILD_BATTLE_POPUP + 4)]);
                            } else {
                                Add(GILDE_DEFEND);
                                EnablePopup(GILDE_DEFEND, txt[(TXT_GUILD_BATTLE_POPUP + 9)]);
                            };
                        } else {
                            EnablePopup(GILDE_DEFEND_GRAY, txt[(TXT_GUILD_BATTLE_POPUP + 15)]);
                        };
                    };
                };
            } else {
                if (myOwnRank == -1){
                    Remove(GILDE_ATTACK_GRAY);
                    Remove(GILDE_DEFEND_GRAY);
                } else {
                    EnablePopup(GILDE_ATTACK_GRAY, txt[TXT_GUILD_JOINED_TOO_RECENTLY].split("%1").join(TimeStr((Number(Savegame[SG_GUILD_JOIN_DATE]) + ((60 * 60) * 24)), true)));
                    EnablePopup(GILDE_DEFEND_GRAY, txt[TXT_GUILD_JOINED_TOO_RECENTLY].split("%1").join(TimeStr((Number(Savegame[SG_GUILD_JOIN_DATE]) + ((60 * 60) * 24)), true)));
                };
            };
        };
        if (((((int(guildData[GUILD_MEMBERLEVEL]) % 1000) < 50)) or (!(txt[TXT_RAID_TEXT])))){
            Remove(GILDE_RAID);
            Remove(GILDE_RAID_GRAY);
            Remove(GILDE_RAID_OK);
        };
        if (countCompleted >= 3){
        };
        if (guildData[0] != Savegame[SG_GUILD_INDEX]){
            Remove(GILDE_GEBAEUDE);
            Remove(GILDE_CHAT);
            Remove(GILDE_GEBAEUDE_IMPROVE_GRAY, (GILDE_GEBAEUDE_IMPROVE_GRAY + 1), (GILDE_GEBAEUDE_IMPROVE_GRAY + 2));
            Remove(GILDE_SCHATZ);
        };
    };
    arrowHallMode = false;
    if (isMine){
        if (int(guildData[0]) != GildenID){
            GildenID = int(guildData[0]);
            SendAction(ACT_REQUEST_GUILD, guildData[0]);
        };
    };
    lastGuildShown = ThisGilde;
    lastGuildMembers = guildMembers.join("#").split("#");
    addSuggestNames(lastGuildMembers);
    Load(SCREEN_GILDEN);
    Load(GILDE_SET_MEMBER);
    Load(GILDE_SET_MASTER);
    Load(GILDE_RANK, (GILDE_RANK + 1), (GILDE_RANK + 2));
    Load(GILDE_DIALOG_INVITE, GILDE_DIALOG_KICK, GILDE_DIALOG_MASTER);
    WhenLoaded(DoShowScreenGilden);
}

public function ShowWorkSuccessScreen(evt:Event=undefined):void{
    ShowCityScreen();
    Add(SCREEN_ARBEITEN_SUCCESS);
    actor[LBL_WINDOW_TITLE].text = txt[TXT_TITLE_WORK];
    actor[LBL_WINDOW_TITLE].x = ((IF_WIN_X + IF_WIN_WELCOME_X) - int((actor[LBL_WINDOW_TITLE].textWidth / 2)));
    actor[LBL_SCR_ARBEITEN_TEXT].text = txt[TXT_ARBEIT_TEXT5];
    actor[LBL_SCR_ARBEITEN_TEXT2].text = ((((txt[TXT_ARBEIT_TEXT6] + " ") + Geld(VerdientesGeld)) + " ") + txt[TXT_ARBEIT_TEXT7]);
    Play(SND_JINGLE);
    CheckWrongPage(ACT_SCREEN_ARBEITEN);
}

public function ShowWorkScreen(evt:Event=undefined):void{
    var ArbeitCountdown:* = null;
    var DoShowWorking:* = null;
    var evt:* = evt;
    ArbeitCountdown = new Timer(100);
    ShowCityScreen();
    if (Savegame[SG_ACTION_STATUS] == 1){
        DoShowWorking = function (){
            var ArbeitCountdownEvent:* = null;
            ArbeitCountdownEvent = function (evt:Event):void{
                var evt:* = evt;
                var _local3 = actor[LBL_SCR_ARBEITEN_TIME];
                with (_local3) {
                    if (WaitingFor(Savegame[SG_ACTION_ENDTIME])){
                        if (txt[TXT_WORK_FINISH]){
                            text = txt[TXT_WORK_FINISH].split("%1").join(WaitingTime(Savegame[SG_ACTION_ENDTIME])).split("%2").join(TimeStr(Savegame[SG_ACTION_ENDTIME], true));
                        } else {
                            text = WaitingTime(Savegame[SG_ACTION_ENDTIME]);
                        };
                        if (OnStage(LBL_SCR_ARBEITEN_TIME)){
                            SetTitleBar(text);
                        };
                        actor[SCR_ARBEITEN_FILL].width = (WaitingProgress((Savegame[SG_ACTION_ENDTIME] - ((Savegame[SG_ACTION_INDEX] * 60) * 60)), Savegame[SG_ACTION_ENDTIME]) * 278);
                    } else {
                        ArbeitCountdown.stop();
                        ArbeitCountdown.removeEventListener(TimerEvent.TIMER, ArbeitCountdownEvent);
                        if (OnStage(LBL_SCR_ARBEITEN_TIME)){
                            SendAction(ACT_SCREEN_ARBEITEN);
                        };
                    };
                    x = ((IF_WIN_X + IF_WIN_WELCOME_X) - int((actor[LBL_SCR_ARBEITEN_TIME].textWidth / 2)));
                };
            };
            var _local2 = actor[SCR_ARBEITEN_BAR];
            with (_local2) {
                scaleX = 0.5;
                scaleY = 0.5;
            };
            _local2 = actor[SCR_ARBEITEN_FILL];
            with (_local2) {
                width = 0;
                scaleY = 0.5;
            };
            actor[LBL_WINDOW_TITLE].text = txt[TXT_TITLE_WORK];
            actor[LBL_WINDOW_TITLE].x = ((IF_WIN_X + IF_WIN_WELCOME_X) - int((actor[LBL_WINDOW_TITLE].textWidth / 2)));
            actor[LBL_SCR_ARBEITEN_TEXT].text = txt[TXT_ARBEIT_TEXT4];
            ArbeitCountdown.addEventListener(TimerEvent.TIMER, ArbeitCountdownEvent);
            ArbeitCountdown.start();
            CheckWrongPage(ACT_SCREEN_ARBEITEN);
        };
        Add(SCREEN_ARBEITEN_WAIT);
        SetCnt(SCR_ARBEITEN_BAR, QUESTBAR_BG);
        SetCnt(SCR_ARBEITEN_FILL, QUESTBAR_FILL);
        WhenLoaded(DoShowWorking);
    } else {
        if (Savegame[SG_ACTION_STATUS] == 0){
            Add(SCREEN_ARBEITEN);
            actor[LBL_WINDOW_TITLE].text = txt[TXT_TITLE_WORK];
            actor[LBL_WINDOW_TITLE].x = ((IF_WIN_X + IF_WIN_WELCOME_X) - int((actor[LBL_WINDOW_TITLE].textWidth / 2)));
            actor[LBL_SCR_ARBEITEN_TEXT].text = txt[TXT_ARBEIT_TEXT];
            SetSliderValue(SLDR_ARBEITEN, 1);
            ArbeitenSliderChange(1);
        };
    };
}

public function ArbeitenSliderChange(value:int):void{
    var txtWorkDur:String;
    if (txt[TXT_ARBEIT_TEXT3] == ""){
        txtWorkDur = txt[TXT_ARBEIT_TEXT2].split("%hours").join(String(value)).split("%reward").join(Geld((value * Stundenlohn)));
        if (txt[TXT_WORK_FINISH]){
            actor[LBL_SCR_ARBEITEN_TEXT2].text = txt[TXT_WORK_FINISH].split("%1").join(txtWorkDur).split("%2").join(TimeStr((int((GameTime.getTime() / 1000)) + (((value + 1) * 60) * 60)), true));
        } else {
            actor[LBL_SCR_ARBEITEN_TEXT2].text = txtWorkDur;
        };
    } else {
        actor[LBL_SCR_ARBEITEN_TEXT2].text = ((((((value + " ") + txt[TXT_ARBEIT_TEXT2]) + " ") + Geld((value * Stundenlohn))) + " ") + txt[TXT_ARBEIT_TEXT3]);
    };
}

public function ShowHallScreen(evt:Event=undefined):void{
    var DoShowHallScreen:* = null;
    var evt:* = evt;
    DoShowHallScreen = function (){
        RemoveAll();
        if (GuildHallMode){
            ruhmesHalleSuchString = Gilde;
            ruhmesHalleSuchName = true;
        } else {
            ruhmesHalleSuchString = actor[INP_NAME].getChildAt(1).text;
            ruhmesHalleSuchName = true;
        };
        actor[INP_HALLE_GOTO].getChildAt(1).text = txt[TXT_HALLE_SUCHFELD_TEXT];
        Add(SCREEN_HALLE);
    };
    Load(SCREEN_HALLE);
    WhenLoaded(DoShowHallScreen);
}

public function ShowCityScreen(evt:Event=undefined):void{
    var StatistenBleiben:* = false;
    var doShowCityScreen:* = null;
    var evt:* = evt;
    doShowCityScreen = function (){
        if (((((OnStage(SCR_CITY_BACKG_NIGHT)) or (OnStage(SCR_CITY_BACKG_DAWN)))) or (OnStage(SCR_CITY_BACKG_DAY)))){
            MakePersistent(CITY_STATISTEN, BUBBLES);
            StatistenBleiben = true;
        };
        RemoveAll();
        switch (Tageszeit()){
            case 0:
                Add(SCREEN_CITY_NIGHT);
                break;
            case 1:
                Add(SCREEN_CITY_DAWN);
                break;
            case 2:
                Add(SCREEN_CITY_DAY);
                break;
        };
        Add(SCREEN_CITY);
        if (StatistenBleiben){
            MakeTemporary(CITY_STATISTEN, BUBBLES);
            VisibleToFront(CITY_STATISTEN, BUBBLES);
        } else {
            if (int((Math.random() * 3)) == 0){
                Add(CITY_MAGIER1);
            };
            if (int((Math.random() * 3)) == 0){
                Add(CITY_ORK1);
                DefineBunch(CITY_ORK, CITY_ORK1);
            };
            if (int((Math.random() * 3)) == 0){
                Add(CITY_SANDWICH1);
            };
            if (int((Math.random() * 3)) == 0){
                Add(CITY_ZWERG1);
                DefineBunch(CITY_ZWERG, CITY_ZWERG1);
            };
            if (int((Math.random() * 3)) == 0){
                Add(CITY_ELF1);
            };
        };
        if (Capabilities.version.substr(0, 3) != "IOS"){
            actor[SCR_CITY_CLOUDS_NIGHT].scrollRect = new Rectangle(0, 0, 1000, 265);
            actor[SCR_CITY_CLOUDS_DAWN].scrollRect = new Rectangle(0, 0, 1000, 265);
            actor[SCR_CITY_CLOUDS_DAY].scrollRect = new Rectangle(0, 0, 1000, 265);
            if (lightMode){
                Remove(SCR_CITY_CLOUDS_NIGHT);
                Remove(SCR_CITY_CLOUDS_DAWN);
                Remove(SCR_CITY_CLOUDS_DAY);
            };
        };
        ShowDealerScreen(undefined, true);
    };
    StatistenBleiben = false;
    Load(BUBBLES);
    switch (Tageszeit()){
        case 0:
            Load(SCREEN_CITY_NIGHT);
            break;
        case 1:
            Load(SCREEN_CITY_DAWN);
            break;
        case 2:
            Load(SCREEN_CITY_DAY);
            break;
    };
    Load(SCREEN_CITY);
    Load(CITY_ESEL2);
    Load(CITY_SANDWICH1);
    Load(CITY_SANDWICH2);
    WhenLoaded(doShowCityScreen);
}

public function ShowPostScreen(par:Array=undefined){
    var DoShowPost:* = null;
    var BuildPostList:* = null;
    var par:* = par;
    DoShowPost = function (evt:Event=undefined){
        var thisInstance:* = 0;
        var postSchonDa:* = false;
        var evt:* = evt;
        var PostSetFocus:* = function (evt:Event=undefined){
            var evt:* = evt;
            if (!OnStage(POST_BG)){
                return;
            };
            if (thisInstance != postInstance){
                var _local3 = actor[POST_LIST];
                with (_local3) {
                    removeEventListener(KeyboardEvent.KEY_DOWN, PostKeyEvent);
                    removeEventListener(FocusEvent.FOCUS_OUT, PostSetFocus);
                };
            } else {
                stage.stageFocusRect = false;
                stage.focus = actor[POST_LIST];
            };
        };
        var PostKeyEvent:* = function (evt:KeyboardEvent){
            var evt:* = evt;
            if (((!(OnStage(POST_LIST))) or (OnStage(POST_FLUSH_OK)))){
                return;
            };
            if (thisInstance != postInstance){
                var _local3 = actor[POST_LIST];
                with (_local3) {
                    removeEventListener(KeyboardEvent.KEY_DOWN, PostKeyEvent);
                    removeEventListener(FocusEvent.FOCUS_OUT, PostSetFocus);
                };
                return;
            };
            if (OnStage(POST_LIST)){
                if ((((evt.keyCode == Keyboard.DELETE)) or ((evt.keyCode == Keyboard.BACKSPACE)))){
                    PostBtnHandler(undefined, POST_DELETE);
                } else {
                    if (evt.keyCode == Keyboard.ENTER){
                        PostBtnHandler(undefined, POST_READ);
                    } else {
                        if ((((evt.keyCode == Keyboard.UP)) or ((evt.keyCode == Keyboard.DOWN)))){
                            BuildPostList(evt);
                        };
                    };
                };
            };
        };
        postInstance++;
        if (postInstance > 20000){
            postInstance = 0;
        };
        thisInstance = postInstance;
        postSchonDa = OnStage(SHP_POST_BLACK_SQUARE);
        RemoveAll();
        if ((par is Array)){
            PostReturnToPlayer = "";
            BuildPostList();
        };
        Add(SCREEN_POST);
        var _local3 = actor[POST_LIST];
        with (_local3) {
            addEventListener(KeyboardEvent.KEY_DOWN, PostKeyEvent);
            addEventListener(FocusEvent.FOCUS_OUT, PostSetFocus);
        };
        PostSetFocus();
        if (!(par is Array)){
            PostReturnToPlayer = selName;
            actor[INP_POST_ADDRESS].getChildAt(1).type = TextFieldType.INPUT;
            actor[INP_POST_SUBJECT].getChildAt(1).type = TextFieldType.INPUT;
            actor[INP_POST_TEXT].getChildAt(1).type = TextFieldType.INPUT;
            Remove(POST_LIST);
            Add(POST_WRITE);
            Hide(POST_GUILD);
            actor[INP_POST_ADDRESS].getChildAt(1).text = selName;
            actor[INP_POST_SUBJECT].getChildAt(1).text = txt[TXT_BETREFF];
            actor[INP_POST_TEXT].getChildAt(1).text = txt[TXT_NACHRICHT];
        };
        if (Tageszeit() != 0){
            Remove(POST_NIGHT);
        };
        if (Tageszeit() != 1){
            Remove(POST_DAWN);
        };
        if (((((!(postSchonDa)) and ((par is Array)))) and (!(lightMode)))){
            SetAlpha(POST_LIST, 0);
            SetAlpha(SHP_POST_BLACK_SQUARE, 0);
            FadeIn(POST_LIST);
            FadeIn(SHP_POST_BLACK_SQUARE, 20, 0.05, 0.6);
        };
    };
    BuildPostList = function (evt:Event=undefined){
        var tmpArray:* = undefined;
        var selRow:* = 0;
        var tmpBalken:* = null;
        var line:* = undefined;
        var i:* = 0;
        var tmpFmt:* = null;
        var evt:* = evt;
        tmpArray = par[1].split("/");
        if (par[2]){
            Savegame[SG_MSG_COUNT] = par[2];
        };
        selRow = (((tmpArray[0] == "")) ? 0 : 1);
        var _local3 = actor[LBL_POST_LIMIT];
        with (_local3) {
            if (int(Savegame[SG_MSG_COUNT]) >= 100){
                defaultTextFormat = FontFormat_Error;
            } else {
                defaultTextFormat = FontFormat_Default;
            };
            text = (Savegame[SG_MSG_COUNT] + " / 100");
            x = (((POST_SQUARE_X + POST_SQUARE_X) - width) + POST_LIMIT_X);
        };
        if ((evt is MouseEvent)){
            selRow = (int(((actor[POST_LIST].getChildIndex(evt.target) - 3) / 4)) + 1);
        };
        if ((evt is KeyboardEvent)){
            selRow = (oldSel + ((KeyboardEvent(evt).keyCode)==Keyboard.UP) ? -1 : 1);
            if (selRow < 1){
                PostBtnHandler(undefined, POST_UP);
                return;
            };
            if (selRow > 15){
                PostBtnHandler(undefined, POST_DOWN);
                return;
            };
            if (tmpArray[((selRow - 1) * 3)] == ""){
                return;
            };
        };
        if (oldSel == -1){
            selRow = 15;
        };
        while (tmpArray[((selRow - 1) * 3)] == "") {
            selRow = (selRow - 1);
        };
        oldSel = selRow;
        _local3 = actor[POST_LIST];
        with (_local3) {
            while (numChildren > 0) {
                removeChildAt(0);
            };
            mouseEnabled = true;
            doubleClickEnabled = true;
            mouseChildren = true;
        };
        if (textDir == "right"){
            PostListAddField((POST_LIST_COLUMN_1_X + 180), POST_LIST_LINES_Y, txt[TXT_POST_LIST_COLUMN_1], FontFormat_PostListHeading);
            PostListAddField((POST_LIST_COLUMN_2_X + 470), POST_LIST_LINES_Y, txt[TXT_POST_LIST_COLUMN_2], FontFormat_PostListHeading);
            PostListAddField((POST_LIST_COLUMN_3_X + 180), POST_LIST_LINES_Y, txt[TXT_POST_LIST_COLUMN_3], FontFormat_PostListHeading);
        } else {
            PostListAddField(POST_LIST_COLUMN_1_X, POST_LIST_LINES_Y, txt[TXT_POST_LIST_COLUMN_1], FontFormat_PostListHeading);
            PostListAddField(POST_LIST_COLUMN_2_X, POST_LIST_LINES_Y, txt[TXT_POST_LIST_COLUMN_2], FontFormat_PostListHeading);
            PostListAddField(POST_LIST_COLUMN_3_X, POST_LIST_LINES_Y, txt[TXT_POST_LIST_COLUMN_3], FontFormat_PostListHeading);
        };
        PostSel = selRow;
        PostScrollDown = !((tmpArray[(tmpArray.length - 3)] == ""));
        line = 1;
        i = 0;
        while (i < ((tmpArray.length - 1) - 3)) {
            if (selRow == line){
                tmpFmt = FontFormat_PostListHighLightSys;
            } else {
                tmpFmt = FontFormat_PostListTextSys;
            };
            tmpBalken = new MovieClip();
            _local3 = tmpBalken.graphics;
            with (_local3) {
                beginFill(CLR_SFORANGE, 0.5);
                lineStyle(0, 0, 0);
                drawRect(0, 0, ((POST_SQUARE_X - (POST_LIST_COLUMN_1_X * 2)) - 10), (POST_LIST_LINE_Y + 3));
            };
            _local3 = tmpBalken;
            with (_local3) {
                x = (POST_LIST_COLUMN_1_X - 5);
                y = ((POST_LIST_LINES_Y + (line * POST_LIST_LINE_Y)) - 3);
                mouseEnabled = true;
                doubleClickEnabled = true;
                mouseChildren = false;
                alpha = (((selRow == line)) ? 1 : 0);
            };
            DoubleClickHandler(tmpBalken, BuildPostList, PostBtnHandler);
            if (tmpArray[i] == ""){
                fightFlushMode = false;
                return;
            };
            switch (tmpArray[(i + 1)]){
                case "1":
                    tmpArray[(i + 1)] = txt[TXT_SUBJECT_GUILD_DELETED];
                    break;
                case "2":
                    tmpArray[(i + 1)] = txt[TXT_SUBJECT_GUILD_DELETED_BY_ADMIN];
                    break;
                case "3":
                    tmpArray[(i + 1)] = txt[TXT_SUBJECT_GUILD_EXPELLED];
                    break;
                case "4":
                    tmpArray[(i + 1)] = txt[TXT_SUBJECT_GUILD_EXPELLED_BY_ADMIN];
                    break;
                case "5":
                    tmpArray[(i + 1)] = txt[TXT_SUBJECT_GUILD_INVITE];
                    break;
                case "6":
                    if (fightFlushMode){
                        SendAction(ACT_POST_DELETE, ((line + PostScroll) - 1));
                        return;
                    };
                    tmpArray[(i + 1)] = txt[TXT_SUBJECT_PVP].replace("%1", tmpArray[i]);
                    if (selRow == line){
                        tmpFmt = FontFormat_PostListHighLightSysRed;
                    } else {
                        tmpFmt = FontFormat_PostListTextSysRed;
                    };
                    break;
                case "7":
                    if (fightFlushMode){
                        SendAction(ACT_POST_DELETE, ((line + PostScroll) - 1));
                        return;
                    };
                    tmpArray[(i + 1)] = txt[TXT_SUBJECT_PVP].replace("%1", tmpArray[i]);
                    if (selRow == line){
                        tmpFmt = FontFormat_PostListHighLightSysGreen;
                    } else {
                        tmpFmt = FontFormat_PostListTextSysGreen;
                    };
                    break;
                case "8":
                    if (txt[TXT_INV_ACC_TITLE] != ""){
                        tmpArray[(i + 1)] = txt[TXT_INV_ACC_TITLE];
                    } else {
                        tmpArray[(i + 1)] = "FRIEND_INVITE_ACCEPTED";
                    };
                    break;
                case "9":
                    if (txt[TXT_INV_VAL_TITLE] != ""){
                        tmpArray[(i + 1)] = txt[TXT_INV_VAL_TITLE];
                    } else {
                        tmpArray[(i + 1)] = "FRIEND_EMAIL_VERIFIED";
                    };
                    break;
                case "1  ":
                case "2  ":
                case "3  ":
                case "4  ":
                case "5  ":
                case "6  ":
                case "7  ":
                case "8  ":
                case "9  ":
                    tmpArray[(i + 1)] = "Moo!";
                default:
                    if (selRow == line){
                        tmpFmt = FontFormat_PostListHighLight;
                    } else {
                        tmpFmt = FontFormat_PostListText;
                    };
            };
            actor[POST_LIST].addChild(tmpBalken);
            addSuggestNames(tmpArray[i]);
            if (textDir == "right"){
                i = (i + 1);
                PostListAddField((POST_LIST_COLUMN_1_X + 180), (POST_LIST_LINES_Y + (line * POST_LIST_LINE_Y)), tmpArray[i], tmpFmt);
                i = (i + 1);
                PostListAddField((POST_LIST_COLUMN_2_X + 470), (POST_LIST_LINES_Y + (line * POST_LIST_LINE_Y)), tmpArray[i], tmpFmt);
                PostListAddField((POST_LIST_COLUMN_3_X + 180), (POST_LIST_LINES_Y + (line * POST_LIST_LINE_Y)), (((int(tmpArray[i]) == 0)) ? "" : TimeStr(tmpArray[i])), tmpFmt);
            } else {
                i = (i + 1);
                PostListAddField(POST_LIST_COLUMN_1_X, (POST_LIST_LINES_Y + (line * POST_LIST_LINE_Y)), tmpArray[i], tmpFmt);
                i = (i + 1);
                PostListAddField(POST_LIST_COLUMN_2_X, (POST_LIST_LINES_Y + (line * POST_LIST_LINE_Y)), tmpArray[i], tmpFmt);
                PostListAddField(POST_LIST_COLUMN_3_X, (POST_LIST_LINES_Y + (line * POST_LIST_LINE_Y)), (((int(tmpArray[i]) == 0)) ? "" : TimeStr(tmpArray[i])), tmpFmt);
            };
            line = (line + 1);
            i = (i + 1);
        };
        fightFlushMode = false;
    };
    var PostListAddField:* = function (pos_x:int, pos_y:int, txt:String, fmt:TextFormat):void{
        var tmpLbl:* = null;
        var pos_x:* = pos_x;
        var pos_y:* = pos_y;
        var txt:* = txt;
        var fmt:* = fmt;
        tmpLbl = new TextField();
        var _local6 = tmpLbl;
        with (_local6) {
            defaultTextFormat = fmt;
            autoSize = TextFieldAutoSize.LEFT;
            background = false;
            selectable = false;
            embedFonts = fontEmbedded;
            antiAliasType = AntiAliasType.ADVANCED;
            mouseEnabled = true;
            doubleClickEnabled = true;
            text = txt;
            if (textDir == "right"){
                x = (pos_x - (((tmpLbl is TextField)) ? textWidth : width));
            } else {
                x = pos_x;
            };
            y = pos_y;
            visible = true;
            filters = Filter_Shadow;
        };
        DoubleClickHandler(tmpLbl, BuildPostList, PostBtnHandler);
        actor[POST_LIST].addChild(tmpLbl);
    };
    Load(SCREEN_POST);
    WhenLoaded(DoShowPost);
}

public function DoubleClickHandler(dispObj:Object, fnClick:Function, fnDoubleClick:Function){
    var dblClickTimer:* = null;
    var waiting:* = false;
    var tmpEvt:* = null;
    var dblClickTimerEvent:* = null;
    var dispObj:* = dispObj;
    var fnClick:* = fnClick;
    var fnDoubleClick:* = fnDoubleClick;
    var dblClickEvent:* = function (evt:MouseEvent){
        if (waiting){
            fnClick(tmpEvt);
            fnDoubleClick(evt);
            dblClickTimer.stop();
            dblClickTimer.removeEventListener(TimerEvent.TIMER, dblClickTimerEvent);
            waiting = false;
        } else {
            tmpEvt = evt;
            dblClickTimer.addEventListener(TimerEvent.TIMER, dblClickTimerEvent);
            dblClickTimer.start();
            waiting = true;
        };
    };
    dblClickTimerEvent = function (evt:TimerEvent){
        waiting = false;
        dblClickTimer.removeEventListener(TimerEvent.TIMER, dblClickTimerEvent);
        fnClick(tmpEvt);
    };
    dblClickTimer = new Timer(300, 1);
    waiting = false;
    var _local5 = dispObj;
    with (_local5) {
        mouseEnabled = true;
        addEventListener(MouseEvent.MOUSE_DOWN, dblClickEvent);
    };
}

public function ShowBuildCharacterScreen(evt:Event=undefined):void{
    var RebuildMode:* = false;
    var i:* = 0;
    var evt:* = evt;
    RebuildMode = false;
    if ((((evt is MouseEvent)) and ((GetActorID(evt.target) == OPTION_CHANGEIMG)))){
        RebuildMode = true;
    };
    if ((((evt is MouseEvent)) and ((((GetActorID(evt.target) == GOTO_LOGIN)) or ((GetActorID(evt.target) == GOTO_SIGNUP)))))){
        so.data.skipAutoLogin = true;
    };
    if (((((so.data.HasAccount) and (!(so.data.skipAutoLogin)))) and (!(RebuildMode)))){
        if (so.data.userName){
            actor[INP_NAME].getChildAt(1).text = String(so.data.userName);
        };
        if (so.data.password){
            actor[INP_LOGIN_PASSWORD].getChildAt(1).text = String(so.data.password);
        };
        Add(BLACK_SQUARE);
        RequestLogin();
        return;
    };
    if (((((buffedMode) and (!(buffedReq)))) and (!(RebuildMode)))){
        ShowLoginScreen();
        return;
    };
    RemoveAll();
    i = 0;
    while (i < 10) {
        var _local3 = actor[(CHARBACKGROUND + i)];
        with (_local3) {
            x = ((SCREEN_TITLE_X - 150) + CHARX);
            y = (SCREEN_TITLE_Y + CHARY);
            scaleX = 1;
            scaleY = 1;
        };
        i = (i + 1);
    };
    _local3 = actor[LBL_SCREEN_TITLE];
    with (_local3) {
        text = txt[TXT_CREATE_CHARACTER];
        x = (SCREEN_TITLE_X - int((textWidth / 2)));
        y = SCREEN_TITLE_Y;
    };
    Add(SCREEN_BUILDCHAR);
    if (DemoMode){
        Remove(CREATE_GOTO_LOGIN, IF_LOGOUT);
    };
    if (CharVolk == 0){
        RandomizeCharacter();
    };
    if (RebuildMode){
        Remove(CREATE_CHARACTER);
        revertCharVolk = CharVolk;
        revertCharMann = CharMann;
        revertCharColor = CharColor;
        revertCharMouth = CharMouth;
        revertCharBeard = CharBeard;
        revertCharNose = CharNose;
        revertCharEyes = CharEyes;
        revertCharBrows = CharBrows;
        revertCharEars = CharEars;
        revertCharHair = CharHair;
        revertCharSpecial = CharSpecial;
        revertCharSpecial2 = CharSpecial2;
        KlasseGewählt = true;
    };
    LoadCharacterImage();
}

public function achLevel(SG:Array, achIndex:int, almode:int=0):int{
    var alresult:int;
    var alnext:int;
    alresult = 0;
    alnext = 0;
    switch (achIndex){
        case 0:
            alnext = 2;
            if (int(SG[SG_ACHIEVEMENTS]) >= 2){
                alresult = 1;
                alnext = 5;
            };
            if (int(SG[SG_ACHIEVEMENTS]) >= 5){
                alresult = 2;
                alnext = 10;
            };
            if (int(SG[SG_ACHIEVEMENTS]) >= 10){
                alresult = 3;
                alnext = 20;
            };
            if (int(SG[SG_ACHIEVEMENTS]) >= 20){
                alresult = 4;
                alnext = 30;
            };
            if (int(SG[SG_ACHIEVEMENTS]) >= 30){
                alresult = 5;
                alnext = 40;
            };
            if (int(SG[SG_ACHIEVEMENTS]) >= 40){
                alresult = 6;
                alnext = 50;
            };
            if (int(SG[SG_ACHIEVEMENTS]) >= 50){
                alresult = 7;
                alnext = 60;
            };
            if (int(SG[SG_ACHIEVEMENTS]) >= 60){
                alresult = 8;
                alnext = 70;
            };
            if (int(SG[SG_ACHIEVEMENTS]) >= 70){
                alresult = 9;
                alnext = 80;
            };
            if (int(SG[SG_ACHIEVEMENTS]) >= 80){
                alresult = 10;
                alnext = 90;
            };
            if (int(SG[SG_ACHIEVEMENTS]) >= 90){
                alresult = 11;
                alnext = 100;
            };
            if (int(SG[SG_ACHIEVEMENTS]) >= 100){
                alresult = 12;
                alnext = 0;
            };
            break;
        case 1:
            alnext = 1;
            if (int(SG[(SG_ACHIEVEMENTS + 1)]) >= 1){
                alresult = 1;
                alnext = 5;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 1)]) >= 5){
                alresult = 2;
                alnext = 10;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 1)]) >= 10){
                alresult = 3;
                alnext = 20;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 1)]) >= 20){
                alresult = 4;
                alnext = 30;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 1)]) >= 30){
                alresult = 5;
                alnext = 40;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 1)]) >= 40){
                alresult = 6;
                alnext = 50;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 1)]) >= 50){
                alresult = 7;
                alnext = 60;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 1)]) >= 60){
                alresult = 8;
                alnext = 70;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 1)]) >= 70){
                alresult = 9;
                alnext = 80;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 1)]) >= 80){
                alresult = 10;
                alnext = 90;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 1)]) >= 90){
                alresult = 11;
                alnext = 100;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 1)]) >= 100){
                alresult = 12;
                alnext = 0;
            };
            break;
        case 2:
            alnext = 1;
            if (int(SG[(SG_ACHIEVEMENTS + 2)]) >= 1){
                alresult = 1;
                alnext = 5;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 2)]) >= 5){
                alresult = 2;
                alnext = 10;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 2)]) >= 10){
                alresult = 3;
                alnext = 25;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 2)]) >= 25){
                alresult = 4;
                alnext = 50;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 2)]) >= 50){
                alresult = 5;
                alnext = 100;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 2)]) >= 100){
                alresult = 6;
                alnext = 250;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 2)]) >= 250){
                alresult = 7;
                alnext = 500;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 2)]) >= 500){
                alresult = 8;
                alnext = 1000;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 2)]) >= 1000){
                alresult = 9;
                alnext = 2500;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 2)]) >= 2500){
                alresult = 10;
                alnext = 5000;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 2)]) >= 5000){
                alresult = 11;
                alnext = 10000;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 2)]) >= 10000){
                alresult = 12;
                alnext = 0;
            };
            break;
        case 3:
            alnext = 1;
            if (int(SG[(SG_ACHIEVEMENTS + 3)]) >= 1){
                alresult = 1;
                alnext = 5;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 3)]) >= 5){
                alresult = 2;
                alnext = 10;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 3)]) >= 10){
                alresult = 3;
                alnext = 25;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 3)]) >= 25){
                alresult = 4;
                alnext = 50;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 3)]) >= 50){
                alresult = 5;
                alnext = 100;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 3)]) >= 100){
                alresult = 6;
                alnext = 250;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 3)]) >= 250){
                alresult = 7;
                alnext = 500;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 3)]) >= 500){
                alresult = 8;
                alnext = 1000;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 3)]) >= 1000){
                alresult = 9;
                alnext = 2500;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 3)]) >= 2500){
                alresult = 10;
                alnext = 5000;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 3)]) >= 5000){
                alresult = 11;
                alnext = 10000;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 3)]) >= 10000){
                alresult = 12;
                alnext = 0;
            };
            break;
        case 4:
            alnext = 1;
            if (int(SG[(SG_ACHIEVEMENTS + 4)]) >= 1){
                alresult = 1;
                alnext = 5;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 4)]) >= 5){
                alresult = 2;
                alnext = 10;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 4)]) >= 10){
                alresult = 3;
                alnext = 25;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 4)]) >= 25){
                alresult = 4;
                alnext = 50;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 4)]) >= 50){
                alresult = 5;
                alnext = 100;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 4)]) >= 100){
                alresult = 6;
                alnext = 250;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 4)]) >= 250){
                alresult = 7;
                alnext = 500;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 4)]) >= 500){
                alresult = 8;
                alnext = 1000;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 4)]) >= 1000){
                alresult = 9;
                alnext = 2500;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 4)]) >= 2500){
                alresult = 10;
                alnext = 5000;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 4)]) >= 5000){
                alresult = 11;
                alnext = 10000;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 4)]) >= 10000){
                alresult = 12;
                alnext = 0;
            };
            break;
        case 5:
            alnext = 1;
            if (int(SG[(SG_ACHIEVEMENTS + 5)]) >= 100){
                alresult = 1;
                alnext = 5;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 5)]) >= 500){
                alresult = 2;
                alnext = 10;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 5)]) >= 1000){
                alresult = 3;
                alnext = 25;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 5)]) >= 2500){
                alresult = 4;
                alnext = 50;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 5)]) >= 5000){
                alresult = 5;
                alnext = 100;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 5)]) >= 10000){
                alresult = 6;
                alnext = 250;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 5)]) >= 25000){
                alresult = 7;
                alnext = 500;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 5)]) >= 50000){
                alresult = 8;
                alnext = 1000;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 5)]) >= 100000){
                alresult = 9;
                alnext = 2500;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 5)]) >= 250000){
                alresult = 10;
                alnext = 5000;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 5)]) >= 500000){
                alresult = 11;
                alnext = 10000;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 5)]) >= 1000000){
                alresult = 12;
                alnext = 0;
            };
            break;
        case 6:
            alnext = 1000;
            if (int(SG[(SG_ACHIEVEMENTS + 6)]) >= 1000){
                alresult = 1;
                alnext = 1500;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 6)]) >= 1500){
                alresult = 2;
                alnext = 2500;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 6)]) >= 2500){
                alresult = 3;
                alnext = 5000;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 6)]) >= 5000){
                alresult = 4;
                alnext = 10000;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 6)]) >= 10000){
                alresult = 5;
                alnext = 15000;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 6)]) >= 15000){
                alresult = 6;
                alnext = 20000;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 6)]) >= 20000){
                alresult = 7;
                alnext = 25000;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 6)]) >= 25000){
                alresult = 8;
                alnext = 30000;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 6)]) >= 30000){
                alresult = 9;
                alnext = 35000;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 6)]) >= 35000){
                alresult = 10;
                alnext = 40000;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 6)]) >= 40000){
                alresult = 11;
                alnext = 50000;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 6)]) >= 50000){
                alresult = 12;
                alnext = 0;
            };
            break;
        case 7:
            alresult = int(SG[(SG_ACHIEVEMENTS + 7)]);
            alnext = (alresult + 1);
            if (alresult >= 12){
                alresult = 12;
                alnext = 0;
            };
    };
    if (almode == 1){
        if (alresult >= 10){
            return (4);
        };
        if (alresult >= 7){
            return (3);
        };
        if (alresult >= 4){
            return (2);
        };
        if (alresult >= 1){
            return (1);
        };
        return (0);
    };
    if (almode == 2){
        return (alnext);
    };
    if (almode == 3){
        return (alresult);
    };
    if (almode == 4){
        if (achIndex == 1){
            return ((((int(SG[(SG_ACHIEVEMENTS + achIndex)]) + (((int(SG[SG_NEW_DUNGEONS]) >= 2)) ? (int(SG[SG_NEW_DUNGEONS]) - 2) : 0)) + (((int(SG[(SG_NEW_DUNGEONS + 1)]) >= 2)) ? (int(SG[(SG_NEW_DUNGEONS + 1)]) - 2) : 0)) + (((int(SG[SG_DUNGEON_13]) >= 122)) ? (int(SG[SG_DUNGEON_13]) - 122) : 0)));
        };
        return ((int(SG[(SG_ACHIEVEMENTS + achIndex)]) / (((achIndex == 5)) ? 100 : 1)));
    };
    return (alresult);
}

public function SingPlur(inpText:String, amount:int, sep:String="*"):String{
    var tmpArray:Array;
    tmpArray = inpText.split(sep);
    if (tmpArray.length == 4){
        return (((tmpArray[0] + tmpArray[(((amount == 1)) ? 1 : 2)]) + tmpArray[3]));
    };
    if (tmpArray.length == 5){
        return (((tmpArray[0] + tmpArray[(((amount == 1)) ? 1 : (((amount == 2)) ? 2 : 3))]) + tmpArray[4]));
    };
    if (tmpArray.length == 6){
        return (((tmpArray[0] + tmpArray[(((amount == 1)) ? 1 : (((amount == 2)) ? 2 : (((amount <= 10)) ? 3 : 4)))]) + tmpArray[4]));
    };
    return (tmpArray.join(""));
}

public function AnimateAch(actorID:int, y_level:int=635, AchAniPow:Number=-10){
    var AchAniTimer:* = null;
    var actorID:* = actorID;
    var y_level:Number = y_level;
    var AchAniPow:int = AchAniPow;
    var AchAniEvent:* = function (evt:Event){
        var evt:* = evt;
        var _local3 = actor[actorID];
        with (_local3) {
            y = (y + AchAniPow);
            AchAniPow = (AchAniPow + 2);
            if (y >= y_level){
                y = y_level;
                AchAniPow = (AchAniPow * -0.5);
                if (Math.abs(AchAniPow) <= 3){
                    y = y_level;
                    AchAniTimer.removeEventListener(TimerEvent.TIMER, AchAniEvent);
                    AchAniTimer.stop();
                    return;
                };
            };
        };
    };
    AchAniTimer = new Timer(50);
    var AchAniStep:* = 0;
    var _local5 = AchAniTimer;
    with (_local5) {
        addEventListener(TimerEvent.TIMER, AchAniEvent);
        start();
    };
}

public function DoAchievements(SG:Array):Boolean{
    var i:int;
    var achPop:Array;
    var achAusfM:String;
    var achAusfF:String;
    var achAusf:int;
    var achCurrentGrade:String;
    var OneUp:Boolean;
    Remove(CHAR_ACH);
    achAusfM = "";
    achAusfF = "";
    achAusf = 0;
    achCurrentGrade = "";
    OneUp = false;
    i = 0;
    while (i < ((buffedMode) ? 7 : 8)) {
        achAusf = achLevel(SG, (i % 8), 1);
        Add(((CHAR_ACH + i) + (achAusf * 8)));
        if (oldAch[(i % 8)] < 0){
            oldAch[(i % 8)] = -(oldAch[(i % 8)]);
            AnimateAch(((CHAR_ACH + i) + (achAusf * 8)));
            OneUp = true;
        };
        switch (achAusf){
            case 0:
                achAusfM = "";
                achAusfF = "";
                achCurrentGrade = txt[TXT_ACH_5];
                break;
            default:
                achAusfM = (txt[((TXT_ACH_5 + (achAusf * 2)) - 1)] + " ");
                achAusfF = (txt[(TXT_ACH_5 + (achAusf * 2))] + " ");
                achCurrentGrade = txt[(TXT_ACH_2 + (i % 8))].split("%1").join(String(achLevel(SG, (i % 8), 0))).split("%2").join(String(achLevel(SG, (i % 8), 4)));
                if (i == 6){
                    achCurrentGrade = txt[TXT_NEW_HONOR_ACH].split("%1").join(String(achLevel(SG, (i % 8), 0))).split("%2").join(String(achLevel(SG, (i % 8), 4)));
                };
        };
        achPop = new Array();
        if (txt[(TXT_ACH_4 + 4)]){
            achPop[achPop.length] = txt[(TXT_ACH_1 + (i % 8))].split("%1").join(achAusfM).split("%2").join(achAusfF).split("%3").join("");
        } else {
            achPop[achPop.length] = txt[(TXT_ACH_1 + (i % 8))].split("%1").join(achAusfM).split("%2").join(achAusfF).split("%3").join(txt[(TXT_ACH_4 + 3)].split("%1").join(FriendLink));
        };
        achPop[achPop.length] = SingPlur(achCurrentGrade, achLevel(SG, (i % 8), 4));
        if (i == 1){
            if (SG[SG_PLAYER_ID] == Savegame[SG_PLAYER_ID]){
                if (towerLevel > 0){
                    achPop[achPop.length] = SingPlur(txt[(TXT_ACH_2 + 8)].split("%1").join(String(towerLevel)), towerLevel);
                };
            } else {
                if (playerTowerLevel > 0){
                    achPop[achPop.length] = SingPlur(txt[(TXT_ACH_2 + 8)].split("%1").join(String(playerTowerLevel)), playerTowerLevel);
                };
            };
        };
        if (achLevel(SG, (i % 8), 2) > 0){
            if (i == 6){
                achPop[achPop.length] = SingPlur(txt[TXT_NEW_HONOR_ACH2].split("%1").join(String(achLevel(SG, (i % 8), 2))).split("%2").join(txt[(TXT_ACH_4 + (((achAusf == 0)) ? 1 : 2))]), achLevel(SG, (i % 8), 2));
            } else {
                achPop[achPop.length] = SingPlur(txt[(TXT_ACH_3 + (i % 8))].split("%1").join(String(achLevel(SG, (i % 8), 2))).split("%2").join(txt[(TXT_ACH_4 + (((achAusf == 0)) ? 1 : 2))]), achLevel(SG, (i % 8), 2));
            };
        };
        if (achLevel(SG, (i % 8), 3) > 0){
            achPop[achPop.length] = txt[TXT_ACH_4].split("%1").join(String(achLevel(SG, (i % 8), 3)));
        };
        EnablePopup(((CHAR_ACH + i) + (achLevel(SG, (i % 8), 1) * 8)), achPop);
        i++;
    };
    return (OneUp);
}

public function MirrorAniFn(evt:Event){
    var i:int;
    mirrorFadeAmount = (mirrorFadeAmount - 0.002);
    if (mirrorFadeAmount <= 0){
        mirrorFadeAmount = 0;
        mirrorAniTimer.stop();
    };
    mirrorAniStep = (mirrorAniStep + 0.1);
    i = 0;
    while (i < 13) {
        actor[(MIRROR_PIECE + i)].alpha = (0.3 + (Math.sin((mirrorAniStep + (((i / 13) * 2) * Math.PI))) * mirrorFadeAmount));
        i++;
    };
}

public function ShowCharacterScreen(evt:Event=undefined, NoPrices:Boolean=false):void{
    var DoShowCharacterScreen:* = null;
    var evt:* = evt;
    var NoPrices:Boolean = NoPrices;
    DoShowCharacterScreen = function (){
        var i:* = 0;
        var OneUp:* = false;
        var LevelUpTimer:* = null;
        var MountTimeTimer:* = null;
        var MountTimeEvent:* = null;
        var vanityRandom:* = NaN;
        var findIndex:* = 0;
        var LevelUpAniStep:* = 0;
        var kickIn:* = NaN;
        var LevelUpAniEvent:* = null;
        MountTimeEvent = function (evt:TimerEvent=undefined){
            if (((!(OnStage(LBL_CHAR_MOUNT_RUNTIME))) or ((Savegame[SG_MOUNT] == 0)))){
                MountTimeTimer.stop();
                MountTimeTimer.removeEventListener(TimerEvent.TIMER, MountTimeEvent);
                return;
            };
            if (((txt[TXT_MOUNT_FOREVER]) and ((Savegame[SG_MOUNT_DURATION] == 0x7D2B7500)))){
                actor[LBL_CHAR_MOUNT_RUNTIME].text = txt[TXT_MOUNT_FOREVER];
            } else {
                if (textDir == "right"){
                    actor[LBL_CHAR_MOUNT_RUNTIME].text = ((WaitingTime(Savegame[SG_MOUNT_DURATION]) + " ") + txt[TXT_MOUNT_DURATION]);
                } else {
                    actor[LBL_CHAR_MOUNT_RUNTIME].text = ((txt[TXT_MOUNT_DURATION] + " ") + WaitingTime(Savegame[SG_MOUNT_DURATION]));
                };
            };
        };
        LevelUpTimer = new Timer(20);
        ErrorMessage(" ");
        if (!OnStage(SCR_CHAR_BG)){
            SetAlpha(CHAR_SECONDPROP, 1);
            SetAlpha(CHAR_PREISE, 0);
        };
        RemoveAll();
        i = 0;
        while (i < 10) {
            var _local2 = actor[(CHARBACKGROUND + i)];
            with (_local2) {
                x = SCR_CHAR_CHARX;
                y = SCR_CHAR_CHARY;
                scaleX = 0.86;
                scaleY = 0.86;
            };
            i = (i + 1);
        };
        i = 0;
        while (i < 5) {
            SetCnt((SCR_CHAR_GOLD1 + i), IF_GOLD);
            SetCnt((SCR_CHAR_SILBER1 + i), IF_SILBER);
            i = (i + 1);
        };
        if (textDir == "right"){
            actor[LBL_CHAR_MOUNT_NAME].text = ((txt[TXT_NOMOUNT] + " ") + txt[TXT_MOUNT]);
        } else {
            actor[LBL_CHAR_MOUNT_NAME].text = ((txt[TXT_MOUNT] + " ") + txt[TXT_NOMOUNT]);
        };
        actor[LBL_CHAR_MOUNT_RUNTIME].text = "";
        actor[LBL_CHAR_MOUNT_DESCR].text = "";
        actor[LBL_CHAR_MOUNT_GAIN].text = "";
        if (Savegame[SG_MOUNT] > 0){
            Add(LBL_CHAR_MOUNT_RUNTIME);
        } else {
            Remove(LBL_CHAR_MOUNT_RUNTIME);
        };
        MountTimeTimer = new Timer(500);
        MountTimeTimer.addEventListener(TimerEvent.TIMER, MountTimeEvent);
        MountTimeTimer.start();
        i = 0;
        while (i < 8) {
            if ((((int(Savegame[SG_MOUNT]) > 0)) and (((i + 1) == (int(Savegame[SG_MOUNT]) + (((((Savegame[SG_RACE] >= 5)) and (!(param_censored)))) ? 4 : 0)))))){
                Show((CHAR_MOUNT_1 + i));
                if (textDir == "right"){
                    actor[LBL_CHAR_MOUNT_NAME].text = ((txt[(TXT_STALL_MOUNTTITEL + i)] + " ") + txt[TXT_MOUNT]);
                    actor[LBL_CHAR_MOUNT_DESCR].text = txt[(TXT_STALL_MOUNTTEXT + i)];
                    actor[LBL_CHAR_MOUNT_GAIN].text = txt[(TXT_MOUNT_GAIN1 + i)].split("|")[0];
                } else {
                    actor[LBL_CHAR_MOUNT_NAME].text = ((txt[TXT_MOUNT] + " ") + txt[(TXT_STALL_MOUNTTITEL + i)]);
                    actor[LBL_CHAR_MOUNT_DESCR].text = txt[(TXT_STALL_MOUNTTEXT + i)];
                    actor[LBL_CHAR_MOUNT_GAIN].text = txt[(TXT_MOUNT_GAIN1 + i)].split("|")[0];
                };
                MountTimeEvent();
            } else {
                Hide((CHAR_MOUNT_1 + i));
            };
            i = (i + 1);
        };
        if (textDir == "right"){
            actor[LBL_SCR_CHAR_NAME].text = (((Gilde) ? (("[" + Gilde) + "] ") : "") + actor[INP_NAME].getChildAt(1).text);
        } else {
            actor[LBL_SCR_CHAR_NAME].text = (actor[INP_NAME].getChildAt(1).text + ((Gilde) ? ((" [" + Gilde) + "]") : ""));
        };
        lastPlayer = actor[INP_NAME].getChildAt(1).text;
        if (Gilde){
            SelectedGuild = Gilde;
            actor[SCR_CHAR_NAME].useHandCursor = true;
        } else {
            SelectedGuild = "";
            actor[SCR_CHAR_NAME].useHandCursor = false;
        };
        TrimTooLong(LBL_SCR_CHAR_NAME, 260);
        i = 0;
        while (i < 3) {
            if ((int(Savegame[SG_CLASS]) - 1) == i){
                Show((SCR_CHAR_KLASSE_1 + i));
            } else {
                Hide((SCR_CHAR_KLASSE_1 + i));
            };
            i = (i + 1);
        };
        if (textDir == "right"){
            actor[LBL_SCR_CHAR_GILDE].text = ((((((Savegame[SG_HONOR] + " :") + txt[TXT_HALL_LIST_COLUMN_5]) + "     ") + Savegame[SG_RANK]) + " :") + txt[TXT_HALL_LIST_COLUMN_1]);
        } else {
            actor[LBL_SCR_CHAR_GILDE].text = ((((((txt[TXT_HALL_LIST_COLUMN_1] + ": ") + Savegame[SG_RANK]) + "     ") + txt[TXT_HALL_LIST_COLUMN_5]) + ": ") + Savegame[SG_HONOR]);
        };
        actor[LBL_SCR_CHAR_EHRE].text = "";
        _local2 = actor[INP_CHARDESC];
        with (_local2) {
            getChildAt(0).text = ((PlayerDesc)=="") ? txt[TXT_ENTERDESC] : PlayerDesc;
            getChildAt(0).type = TextFieldType.INPUT;
            if (textDir == "right"){
                getChildAt(0).wordWrap = false;
            };
        };
        actor[SCR_CHAR_NAME].x = ((SCR_CHAR_CHARX + 128) - int((actor[LBL_SCR_CHAR_NAME].textWidth / 2)));
        actor[LBL_SCR_CHAR_EHRE].x = ((actor[LBL_SCR_CHAR_GILDE].x + actor[LBL_SCR_CHAR_GILDE].textWidth) + CHAR_EHRE_X);
        _local2 = actor[SCR_CHAR_EXPBAR];
        with (_local2) {
            width = int(((Number(Savegame[SG_EXP]) / Number(Savegame[SG_EXP_FOR_NEXTLEVEL])) * 254));
        };
        _local2 = actor[LBL_SCR_CHAR_EXPLABEL];
        with (_local2) {
            if (textDir == "right"){
                text = ((Savegame[SG_LEVEL] + " ") + txt[TXT_HALL_LIST_COLUMN_4]);
            } else {
                text = ((txt[TXT_HALL_LIST_COLUMN_4] + " ") + Savegame[SG_LEVEL]);
            };
            x = ((EXPERIENCE_BAR_X + 127) - int((textWidth / 2)));
        };
        if (textDir == "right"){
            EnablePopup(CA_SCR_CHAR_EXPBAR, POPUP_BEGIN_LINE, (":" + txt[TXT_EXP]), (POPUP_TAB + POPUP_TAB_ADD), Savegame[SG_EXP], POPUP_END_LINE, POPUP_BEGIN_LINE, (":" + txt[TXT_EXPNEXTLEVEL]), (POPUP_TAB + POPUP_TAB_ADD), Savegame[SG_EXP_FOR_NEXTLEVEL], POPUP_END_LINE);
        } else {
            EnablePopup(CA_SCR_CHAR_EXPBAR, POPUP_BEGIN_LINE, (txt[TXT_EXP] + ":"), (POPUP_TAB + POPUP_TAB_ADD), Savegame[SG_EXP], POPUP_END_LINE, POPUP_BEGIN_LINE, (txt[TXT_EXPNEXTLEVEL] + ":"), (POPUP_TAB + POPUP_TAB_ADD), Savegame[SG_EXP_FOR_NEXTLEVEL], POPUP_END_LINE);
        };
        DisplayInventory(undefined, NoPrices);
        vanityRandom = Math.random();
        if ((((((((uint(Savegame[SG_NEW_FLAGS]) & 32)) and ((int(so.data.vanityMode) == 0)))) or ((int(so.data.vanityMode) == 2)))) or ((((int(so.data.vanityMode) == 3)) and ((vanityRandom < 0.5)))))){
            Add(SCREEN_CHAR_GOLDEN);
        } else {
            Add(SCREEN_CHAR);
        };
        LoadCharacterImage();
        AddSome(SCR_CHAR_NAME, SCR_CHAR_GILDE);
        mirrorAniTimer.stop();
        i = 0;
        while (i < 13) {
            if (MirrorPieces[i]){
                Add((MIRROR_PIECE + i));
                mirrorAniTimer.start();
            };
            i = (i + 1);
        };
        if ((((((((uint(Savegame[SG_NEW_FLAGS]) & 32)) and ((int(so.data.vanityMode) == 0)))) or ((int(so.data.vanityMode) == 2)))) or ((((int(so.data.vanityMode) == 3)) and ((vanityRandom < 0.5)))))){
            AddSome(GOLDEN_FRAME, SCR_CHAR_NAME);
            actor[SCR_CHAR_NAME].y = (CHAR_NAME_Y + 8);
            AddFilter(LBL_SCR_CHAR_NAME, Filter_HeavyShadow);
        } else {
            actor[SCR_CHAR_NAME].y = CHAR_NAME_Y;
            AddFilter(LBL_SCR_CHAR_NAME, Filter_Shadow);
        };
        if (txt[(TXT_ACH_4 + 4)]){
            if (int(Savegame[SG_EMAIL_VALID]) == 1){
                AddSome(CHAR_INVITE);
            };
        };
        if (txt[TXT_ALBUM]){
            if (Number(Savegame[SG_ALBUM]) >= 10000){
                Add(CHAR_ALBUM);
                EnablePopup(CHAR_ALBUM, POPUP_BEGIN_LINE, txt[TXT_ITMNAME_13], POPUP_END_LINE, POPUP_BEGIN_LINE, txt[TXT_COLLECTION].split("%1").join(String((Savegame[SG_ALBUM] - 10000))).split("%2").join(String(contentMax)).split("%3").join(String((Math.round((((Savegame[SG_ALBUM] - 10000) / contentMax) * 10000)) / 100))).split("#").join(String.fromCharCode(13)), POPUP_END_LINE, POPUP_BEGIN_LINE, txt[(TXT_COLLECTION + 7)], POPUP_END_LINE);
                if (AlbumEffect){
                    AnimateAch(CHAR_ALBUM, CHAR_PLAYERY);
                    AlbumEffect = false;
                };
            };
        };
        OneUp = DoAchievements(Savegame);
        if (LevelUp){
            LevelUpAniEvent = function (evt:Event){
                var evt:* = evt;
                LevelUpAniStep++;
                if (LevelUpAniStep > 125){
                    LevelUpTimer.stop();
                    LevelUpTimer.removeEventListener(TimerEvent.TIMER, LevelUpAniEvent);
                    var _local3 = actor[LBL_SCR_CHAR_EXPLABEL];
                    with (_local3) {
                        scaleX = 1;
                        scaleY = 1;
                        x = ((EXPERIENCE_BAR_X + 127) - int((textWidth / 2)));
                        y = (EXPERIENCE_BAR_Y + 2);
                    };
                    return;
                };
                if (LevelUpAniStep > 115){
                    if (kickIn > 0){
                        kickIn = (kickIn - 0.1);
                    };
                } else {
                    if (kickIn < 1){
                        kickIn = (kickIn + 0.1);
                    };
                };
                _local3 = actor[LBL_SCR_CHAR_EXPLABEL];
                with (_local3) {
                    scaleX = (((Math.cos((((LevelUpAniStep / 50) * 2) * Math.PI)) + 1) * kickIn) + 1);
                    scaleY = (((Math.sin((((LevelUpAniStep / 50) * 2) * Math.PI)) + 1) * kickIn) + 1);
                    x = ((EXPERIENCE_BAR_X + 128) - int((width / 2)));
                    y = (((EXPERIENCE_BAR_Y + 17) - int((height / 2))) - (((Math.sin((((LevelUpAniStep / 50) * 2) * Math.PI)) + 1) * kickIn) * 20));
                };
            };
            LevelUpAniStep = 25;
            kickIn = 0;
            Add(LBL_SCR_CHAR_EXPLABEL);
            OneUp = true;
            LevelUp = false;
            _local2 = LevelUpTimer;
            with (_local2) {
                addEventListener(TimerEvent.TIMER, LevelUpAniEvent);
                start();
            };
        };
        if (OneUp){
            Play(SND_JINGLE);
        };
        if (arrowHallMode){
            EnablePopup(PREV_PLAYER, txt[TXT_EHRENHALLE]);
            EnablePopup(NEXT_PLAYER, txt[TXT_EHRENHALLE]);
            indexInHall = -1;
            findIndex = 0;
            while (findIndex < lastHallMembers.length) {
                if (lastHallMembers[findIndex].toLowerCase() == actor[INP_NAME].getChildAt(1).text.toLowerCase()){
                    indexInHall = (findIndex - 1);
                    break;
                };
                findIndex = (findIndex + 1);
            };
            if (indexInHall < 0){
                indexInHall = -1;
            };
            if (indexInHall != -1){
                if (indexInHall > 0){
                    Add(PREV_PLAYER);
                };
                if (indexInHall < 14){
                    Add(NEXT_PLAYER);
                };
            };
        } else {
            EnablePopup(PREV_PLAYER, txt[TXT_GILDEN]);
            EnablePopup(NEXT_PLAYER, txt[TXT_GILDEN]);
            indexInGuild = -1;
            findIndex = 0;
            while (findIndex < lastGuildMembers.length) {
                if (lastGuildMembers[findIndex].toLowerCase() == actor[INP_NAME].getChildAt(1).text.toLowerCase()){
                    indexInGuild = (findIndex - 1);
                    break;
                };
                findIndex = (findIndex + 1);
            };
            if (indexInGuild < 0){
                indexInGuild = -1;
            };
            if (indexInGuild != -1){
                if (indexInGuild > 0){
                    Add(PREV_PLAYER);
                };
                if (indexInGuild < (int(lastGuildData[3]) - 1)){
                    Add(NEXT_PLAYER);
                };
            };
        };
    };
    if ((((((uint(Savegame[SG_NEW_FLAGS]) & 32)) and ((int(so.data.vanityMode) == 0)))) or ((int(so.data.vanityMode) > 1)))){
        Load(SCR_CHAR_BG_GOLDEN, GOLDEN_FRAME);
    };
    Load(SCR_CHAR_BG, SCR_CHAR_EXPBAR, SCR_CHAR_BG_RIGHT);
    WhenLoaded(DoShowCharacterScreen);
}

public function ShowPlayerScreen(PlayerSG:Array, PlayerName:String, PlayerGilde:String, PlayerComment:String):void{
    var i:* = 0;
    var binStr:* = null;
    var PlayerMirrorPieces:* = null;
    var DoShowPlayerScreen:* = null;
    var PlayerSG:* = PlayerSG;
    var PlayerName:* = PlayerName;
    var PlayerGilde:* = PlayerGilde;
    var PlayerComment:* = PlayerComment;
    DoShowPlayerScreen = function (){
        var i:* = 0;
        var vanityRandom:* = NaN;
        var PvPDelayCheck:* = null;
        var findIndex:* = 0;
        PvPDelayCheck = function (evt:TimerEvent=undefined){
            var evt:* = evt;
            if (!OnStage(CHAR_ATTACK)){
                PvPDelayTimer.removeEventListener(TimerEvent.TIMER, PvPDelayCheck);
                PvPDelayTimer.stop();
                return;
            };
            if (WaitingFor(Savegame[SG_PVP_REROLL_TIME])){
                SetTitleBar(WaitingTime(Savegame[SG_PVP_REROLL_TIME]));
                if (textDir == "right"){
                    SetBtnText(CHAR_ATTACK, ("(~P1) " + txt[TXT_ATTACK]));
                } else {
                    SetBtnText(CHAR_ATTACK, (txt[TXT_ATTACK] + " (1~P)"));
                };
                Show(LBL_CHAR_DELAY);
                var _local3 = actor[LBL_CHAR_DELAY];
                with (_local3) {
                    text = WaitingTime(Savegame[SG_PVP_REROLL_TIME]);
                    x = (((280 + 500) + CHAR_DELAY_X) - (textWidth / 2));
                };
            } else {
                SetTitleBar();
                SetBtnText(CHAR_ATTACK, txt[TXT_ATTACK]);
                Hide(LBL_CHAR_DELAY);
                PvPDelayTimer.removeEventListener(TimerEvent.TIMER, PvPDelayCheck);
                PvPDelayTimer.stop();
            };
        };
        RemoveAll();
        dragDropProhibit = true;
        i = 0;
        while (i < 15) {
            actor[(CHAR_SLOT_1 + i)].mouseEnabled = false;
            i = (i + 1);
        };
        i = 0;
        while (i < 10) {
            var _local2 = actor[(CHARBACKGROUND + i)];
            with (_local2) {
                x = SCR_CHAR_CHARX;
                y = SCR_CHAR_CHARY;
                scaleX = 0.86;
                scaleY = 0.86;
            };
            i = (i + 1);
        };
        i = 0;
        while (i < 5) {
            SetCnt((SCR_CHAR_GOLD1 + i), IF_GOLD);
            SetCnt((SCR_CHAR_SILBER1 + i), IF_SILBER);
            i = (i + 1);
        };
        if (textDir == "right"){
            actor[LBL_CHAR_MOUNT_NAME].text = ((txt[TXT_NOMOUNT] + " ") + txt[TXT_MOUNT]);
        } else {
            actor[LBL_CHAR_MOUNT_NAME].text = ((txt[TXT_MOUNT] + " ") + txt[TXT_NOMOUNT]);
        };
        actor[LBL_CHAR_MOUNT_RUNTIME].text = "";
        actor[LBL_CHAR_MOUNT_DESCR].text = "";
        actor[LBL_CHAR_MOUNT_GAIN].text = "";
        i = 0;
        while (i < 8) {
            if ((((int(PlayerSG[SG_MOUNT]) > 0)) and (((i + 1) == (int(PlayerSG[SG_MOUNT]) + (((((PlayerSG[SG_RACE] >= 5)) and (!(param_censored)))) ? 4 : 0)))))){
                Show((CHAR_MOUNT_1 + i));
                if (textDir == "right"){
                    actor[LBL_CHAR_MOUNT_NAME].text = ((txt[(TXT_STALL_MOUNTTITEL + i)] + " ") + txt[TXT_MOUNT]);
                    actor[LBL_CHAR_MOUNT_DESCR].text = txt[(TXT_STALL_MOUNTTEXT + i)];
                    actor[LBL_CHAR_MOUNT_GAIN].text = txt[(TXT_MOUNT_GAIN1 + i)].split("|")[0];
                } else {
                    actor[LBL_CHAR_MOUNT_NAME].text = ((txt[TXT_MOUNT] + " ") + txt[(TXT_STALL_MOUNTTITEL + i)]);
                    actor[LBL_CHAR_MOUNT_DESCR].text = txt[(TXT_STALL_MOUNTTEXT + i)];
                    actor[LBL_CHAR_MOUNT_GAIN].text = txt[(TXT_MOUNT_GAIN1 + i)].split("|")[0];
                };
            } else {
                Hide((CHAR_MOUNT_1 + i));
            };
            i = (i + 1);
        };
        if (textDir == "right"){
            actor[LBL_SCR_CHAR_NAME].text = (((PlayerGilde == "")) ? "" : ((("[" + PlayerGilde) + "] ") + PlayerName));
        } else {
            actor[LBL_SCR_CHAR_NAME].text = (PlayerName + (((PlayerGilde == "")) ? "" : ((" [" + PlayerGilde) + "]")));
        };
        TrimTooLong(LBL_SCR_CHAR_NAME, 260);
        lastPlayer = PlayerName;
        if (PlayerGilde){
            SelectedGuild = PlayerGilde;
            actor[SCR_CHAR_NAME].useHandCursor = true;
        } else {
            SelectedGuild = "";
            actor[SCR_CHAR_NAME].useHandCursor = false;
        };
        i = 0;
        while (i < 3) {
            if ((int(PlayerSG[SG_CLASS]) - 1) == i){
                Show((SCR_CHAR_KLASSE_1 + i));
            } else {
                Hide((SCR_CHAR_KLASSE_1 + i));
            };
            i = (i + 1);
        };
        if (textDir == "right"){
            actor[LBL_SCR_CHAR_GILDE].text = ((((((PlayerSG[SG_HONOR] + " :") + txt[TXT_HALL_LIST_COLUMN_5]) + "     ") + PlayerSG[SG_RANK]) + " :") + txt[TXT_HALL_LIST_COLUMN_1]);
        } else {
            actor[LBL_SCR_CHAR_GILDE].text = ((((((txt[TXT_HALL_LIST_COLUMN_1] + ": ") + PlayerSG[SG_RANK]) + "     ") + txt[TXT_HALL_LIST_COLUMN_5]) + ": ") + PlayerSG[SG_HONOR]);
        };
        actor[LBL_SCR_CHAR_EHRE].text = "";
        _local2 = actor[INP_CHARDESC];
        with (_local2) {
            getChildAt(0).text = ((PlayerComment)=="") ? txt[TXT_NODESC] : PlayerComment;
            getChildAt(0).type = TextFieldType.DYNAMIC;
        };
        actor[SCR_CHAR_NAME].x = ((SCR_CHAR_CHARX + 128) - int((actor[LBL_SCR_CHAR_NAME].textWidth / 2)));
        actor[LBL_SCR_CHAR_EHRE].x = ((actor[LBL_SCR_CHAR_GILDE].x + actor[LBL_SCR_CHAR_GILDE].textWidth) + CHAR_EHRE_X);
        _local2 = actor[SCR_CHAR_EXPBAR];
        with (_local2) {
            width = int(((Number(PlayerSG[SG_EXP]) / Number(PlayerSG[SG_EXP_FOR_NEXTLEVEL])) * 254));
        };
        _local2 = actor[LBL_SCR_CHAR_EXPLABEL];
        with (_local2) {
            if (textDir == "right"){
                text = ((PlayerSG[SG_LEVEL] + " ") + txt[TXT_HALL_LIST_COLUMN_4]);
            } else {
                text = ((txt[TXT_HALL_LIST_COLUMN_4] + " ") + PlayerSG[SG_LEVEL]);
            };
            x = ((EXPERIENCE_BAR_X + 127) - int((textWidth / 2)));
        };
        EnablePopup(CA_SCR_CHAR_EXPBAR);
        SetAlpha(CHAR_SECONDPROP, 1);
        SetAlpha(CHAR_PREISE, 0);
        DisplayInventory(PlayerSG);
        vanityRandom = Math.random();
        if ((((((((uint(PlayerSG[SG_NEW_FLAGS]) & 32)) and ((int(so.data.vanityMode) == 0)))) or ((int(so.data.vanityMode) == 2)))) or ((((int(so.data.vanityMode) == 3)) and ((vanityRandom < 0.5)))))){
            Add(SCREEN_CHAR_GOLDEN);
        } else {
            Add(SCREEN_CHAR);
        };
        if (((!((PlayerGilde == Gilde))) and (!((Gilde == ""))))){
            Add(PLAYER_GUILD_INVITE);
        };
        if (txt[TXT_ALBUM]){
            if (Number(PlayerSG[SG_ALBUM]) >= 10000){
                Add(CHAR_ALBUM);
                EnablePopup(CHAR_ALBUM, POPUP_BEGIN_LINE, txt[TXT_ITMNAME_13], POPUP_END_LINE, POPUP_BEGIN_LINE, txt[TXT_COLLECTION].split("%1").join(String((PlayerSG[SG_ALBUM] - 10000))).split("%2").join(String(contentMax)).split("%3").join(String((Math.round((((PlayerSG[SG_ALBUM] - 10000) / contentMax) * 10000)) / 100))).split("#").join(String.fromCharCode(13)), POPUP_END_LINE);
            };
        };
        if ((((PlayerGilde == Gilde)) and (!((Gilde == ""))))){
            AddSome(CHAR_MESSAGE, CHAR_GILDE);
        } else {
            AddSome(CHAR_MESSAGE);
            if ((((Savegame[SG_ACTION_STATUS] == 0)) or ((((Savegame[SG_ACTION_STATUS] >= 1)) and (hasMirror))))){
                if (canRob){
                    AddSome(CHAR_ATTACK, LBL_CHAR_DELAY);
                } else {
                    AddSome(CHAR_ATTACK, LBL_CHAR_DELAY);
                };
            };
        };
        DoAchievements(PlayerSG);
        PvPDelayTimer.addEventListener(TimerEvent.TIMER, PvPDelayCheck);
        PvPDelayTimer.start();
        PvPDelayCheck();
        i = 0;
        while (i < 5) {
            Remove((SCR_CHAR_STEIGERN1 + i));
            i = (i + 1);
        };
        Remove(LBL_CHAR_MOUNT_RUNTIME);
        LoadCharacterImage(CHARBACKGROUND, false, PlayerSG[SG_RACE], (int(PlayerSG[SG_GENDER]) == 1), PlayerSG[SG_CLASS], PlayerSG[SG_FACE_1], PlayerSG[SG_FACE_5], PlayerSG[SG_FACE_6], PlayerSG[SG_FACE_4], PlayerSG[SG_FACE_3], PlayerSG[SG_FACE_7], PlayerSG[SG_FACE_2], PlayerSG[SG_FACE_8], PlayerSG[SG_FACE_9]);
        AddSome(SCR_CHAR_NAME, SCR_CHAR_GILDE);
        if ((((((((uint(PlayerSG[SG_NEW_FLAGS]) & 32)) and ((int(so.data.vanityMode) == 0)))) or ((int(so.data.vanityMode) == 2)))) or ((((int(so.data.vanityMode) == 3)) and ((vanityRandom < 0.5)))))){
            AddSome(GOLDEN_FRAME, SCR_CHAR_NAME);
            actor[SCR_CHAR_NAME].y = (CHAR_NAME_Y + 8);
            AddFilter(LBL_SCR_CHAR_NAME, Filter_HeavyShadow);
        } else {
            actor[SCR_CHAR_NAME].y = CHAR_NAME_Y;
            AddFilter(LBL_SCR_CHAR_NAME, Filter_Shadow);
        };
        if (arrowHallMode){
            EnablePopup(PREV_PLAYER, txt[TXT_EHRENHALLE]);
            EnablePopup(NEXT_PLAYER, txt[TXT_EHRENHALLE]);
            indexInHall = -1;
            findIndex = 0;
            while (findIndex < lastHallMembers.length) {
                if (lastHallMembers[findIndex].toLowerCase() == PlayerName.toLowerCase()){
                    indexInHall = (findIndex - 1);
                    break;
                };
                findIndex = (findIndex + 1);
            };
            if (indexInHall < 0){
                indexInHall = -1;
            };
            if (indexInHall != -1){
                if (indexInHall > 0){
                    Add(PREV_PLAYER);
                };
                if (indexInHall < 14){
                    Add(NEXT_PLAYER);
                };
            };
        } else {
            EnablePopup(PREV_PLAYER, txt[TXT_GILDEN]);
            EnablePopup(NEXT_PLAYER, txt[TXT_GILDEN]);
            indexInGuild = -1;
            findIndex = 0;
            while (findIndex < lastGuildMembers.length) {
                if (lastGuildMembers[findIndex].toLowerCase() == PlayerName.toLowerCase()){
                    indexInGuild = (findIndex - 1);
                    break;
                };
                findIndex = (findIndex + 1);
            };
            if (indexInGuild < 0){
                indexInGuild = -1;
            };
            if (indexInGuild != -1){
                if (indexInGuild > 0){
                    Add(PREV_PLAYER);
                };
                if (indexInGuild < (int(lastGuildData[3]) - 1)){
                    Add(NEXT_PLAYER);
                };
            };
        };
    };
    playerTowerLevel = int((PlayerSG[SG_MOUNT] / 65536));
    PlayerSG[SG_MOUNT] = (PlayerSG[SG_MOUNT] - (playerTowerLevel * 65536));
    binStr = Number(PlayerSG[SG_GENDER]).toString(2);
    while (binStr.length < 32) {
        binStr = ("0" + binStr);
    };
    PlayerMirrorPieces = new Array();
    i = 0;
    while (i < 13) {
        PlayerMirrorPieces[i] = (binStr.substr((i + 1), 1) == "1");
        i = (i + 1);
    };
    var playerHasMirror:* = (binStr.substr(23, 1) == "1");
    if (binStr.substr(31) == "1"){
        PlayerSG[SG_GENDER] = 1;
    } else {
        PlayerSG[SG_GENDER] = 2;
    };
    i = 0;
    while (i < SG_BACKPACK_SIZE) {
        ExpandItemStructure(PlayerSG, (SG_BACKPACK_OFFS + (i * SG_ITM_SIZE)));
        i = (i + 1);
    };
    i = 0;
    while (i < SG_INVENTORY_SIZE) {
        ExpandItemStructure(PlayerSG, (SG_INVENTORY_OFFS + (i * SG_ITM_SIZE)));
        i = (i + 1);
    };
    i = 0;
    while (i < 6) {
        ExpandItemStructure(PlayerSG, (SG_SHAKES_ITEM1 + (i * SG_ITM_SIZE)));
        ExpandItemStructure(PlayerSG, (SG_FIDGET_ITEM1 + (i * SG_ITM_SIZE)));
        i = (i + 1);
    };
    i = 0;
    while (i < 3) {
        ExpandItemStructure(PlayerSG, (SG_QUEST_OFFER_REWARD_ITM1 + (i * SG_ITM_SIZE)));
        i = (i + 1);
    };
    if ((((((uint(PlayerSG[SG_NEW_FLAGS]) & 32)) and ((int(so.data.vanityMode) == 0)))) or ((int(so.data.vanityMode) > 1)))){
        Load(SCR_CHAR_BG_GOLDEN, GOLDEN_FRAME);
    };
    Load(SCR_CHAR_BG, SCR_CHAR_EXPBAR, SCR_CHAR_BG_RIGHT);
    WhenLoaded(DoShowPlayerScreen);
}

public function TrimTooLong(actorIDObj:Object, maxWidth:int):String{
    var tmpStr:* = null;
    var remainLength:* = 0;
    var actorID:* = 0;
    var Shortened:* = false;
    var actorIDObj:* = actorIDObj;
    var maxWidth:* = maxWidth;
    Shortened = false;
    var _local4 = (((actorIDObj is int)) ? actor[actorIDObj] : actorIDObj);
    with (_local4) {
        tmpStr = text;
        remainLength = tmpStr.length;
        while (textWidth > maxWidth) {
            remainLength--;
            Shortened = true;
            if (textDir == "right"){
                text = ("..." + tmpStr.substr(-(remainLength), remainLength));
                if (tmpStr.indexOf("]") >= 0){
                    text = ("[" + text);
                };
            } else {
                text = (tmpStr.substr(0, remainLength) + "...");
                if (tmpStr.indexOf("[") >= 0){
                    text = (text + "]");
                };
            };
        };
    };
    if ((actorIDObj is int)){
        if (Shortened){
            EnablePopup(int(actorIDObj), tmpStr);
        } else {
            EnablePopup(int(actorIDObj));
        };
    };
    return (((Shortened) ? tmpStr : ""));
}


public function CheckWrongPage(correctAct:int){
    if (correctAct != lastAct){
        if (correctAct == ACT_SCREEN_TAVERNE){
            switch (lastAct){
                case ACT_SCREEN_ARENA:
                    if (!hasMirror){
                        ErrorMessage(txt[TXT_ERROR_TAVERNE_ARENA]);
                    };
                    break;
                case ACT_SCREEN_ARBEITEN:
                    ErrorMessage(txt[TXT_ERROR_TAVERNE_ARBEITEN]);
                    break;
                case ACT_SCREEN_WELTKARTE:
                    if (!hasMirror){
                        ErrorMessage(txt[TXT_ERROR_TAVERNE_MAINQUEST]);
                    };
                    break;
            };
        } else {
            if (correctAct == ACT_SCREEN_ARBEITEN){
                switch (lastAct){
                    case ACT_SCREEN_ARENA:
                        ErrorMessage(txt[TXT_ERROR_ARBEITEN_ARENA]);
                        break;
                    case ACT_SCREEN_TAVERNE:
                        ErrorMessage(txt[TXT_ERROR_ARBEITEN_TAVERNE]);
                        break;
                    case ACT_SCREEN_WELTKARTE:
                        ErrorMessage(txt[TXT_ERROR_ARBEITEN_MAINQUEST]);
                        break;
                };
            };
        };
    };
}

public function ShowMainQuestsScreen(NextEnemies:Array){
    var i:* = 0;
    var countDone:* = 0;
    var Background:* = 0;
    var DoShowMainQuestsScreen:* = null;
    var NextEnemies:* = NextEnemies;
    var doShowCongrats:* = function (){
        RemoveAll();
        Add(DUNGEON_CONGRATS);
    };
    DoShowMainQuestsScreen = function (){
        var thisMQSInstance:* = 0;
        var DungeonLevel:* = null;
        var NextEnemy:* = null;
        var PlayUnlockSound:* = false;
        var i:* = undefined;
        var MainQuestsClick:* = function (evt:MouseEvent){
            var evt:* = evt;
            if (thisMQSInstance != MQSInstance){
                i = 0;
                while (i < 9) {
                    var _local3 = actor[(MQS_BUTTON + i)].content;
                    with (_local3) {
                        removeEventListener(MouseEvent.CLICK, MainQuestsClick);
                    };
                    i++;
                };
                return;
            };
            if (GetActorID(evt.target) == (HLMQS_BUTTON + 4)){
                SendAction(ACT_SCREEN_TOWER);
            } else {
                if (countDone == 9){
                    ShowMainQuestScreen(9, (int(NextEnemies[9]) - 1));
                } else {
                    if (countDone == 10){
                        ShowMainQuestScreen(10, (int(NextEnemies[10]) - 1));
                    } else {
                        if (countDone == 11){
                            ShowMainQuestScreen(11, (int(NextEnemies[11]) - 1));
                        } else {
                            if (countDone == 12){
                                ShowMainQuestScreen(12, (int(NextEnemies[12]) - 1));
                            } else {
                                ShowMainQuestScreen((GetActorID(evt.target) - MQS_BUTTON), (int(NextEnemies[(GetActorID(evt.target) - MQS_BUTTON)]) - 1));
                            };
                        };
                    };
                };
            };
        };
        MQSInstance++;
        if (MQSInstance > 1000){
            MQSInstance = 0;
        };
        thisMQSInstance = MQSInstance;
        DungeonLevel = "";
        NextEnemy = "";
        PlayUnlockSound = false;
        RemoveAll();
        Add(Background);
        Add((((countDone >= 9)) ? SCREEN_HLMAINQUESTS : SCREEN_MAINQUESTS));
        var _local2 = actor[LBL_MAINQUESTS_TITLE];
        with (_local2) {
            x = (SCREEN_TITLE_X - int((textWidth / 2)));
        };
        _local2 = actor[LBL_HLMAINQUESTS_TITLE];
        with (_local2) {
            x = (SCREEN_TITLE_X - int((textWidth / 2)));
        };
        if (countDone < 9){
            i = 0;
            while (i < 9) {
                if (int(NextEnemies[i]) >= 500){
                    NextEnemy = txt[((TXT_COPYCAT_NAME + int(NextEnemies[i])) - 500)];
                } else {
                    if (int(NextEnemies[i]) > 220){
                        NextEnemy = txt[((TXT_NEW_MONSTER_NAMES + int(NextEnemies[i])) - 221)];
                    } else {
                        NextEnemy = txt[((int(NextEnemies[i]))==-1) ? TXT_ENEMY_SELF : ((TXT_MONSTER_NAME + int(NextEnemies[i])) - 1)];
                    };
                };
                SetCnt((MQS_DISABLED + i), MQS_DISABLED);
                SetCnt((MQS_COMPLETED + i), MQS_COMPLETED);
                _local2 = actor[(MQS_DISABLED + i)];
                with (_local2) {
                    visible = (int(Savegame[(SG_DUNGEON_LEVEL + i)]) <= 1);
                    alpha = 1;
                };
                actor[(MQS_COMPLETED + i)].visible = (int(Savegame[(SG_DUNGEON_LEVEL + i)]) >= 12);
                SetCnt((MQS_BUTTON + i), (MQS_BUTTON + i));
                DungeonLevel = String((int(Savegame[(SG_DUNGEON_LEVEL + i)]) - 1));
                if (DungeonLevel == "0"){
                    PlayUnlockSound = true;
                    FadeOut((MQS_DISABLED + i), 20, 0.05, 0, true);
                    DungeonLevel = "1";
                };
                EnablePopup((MQS_BUTTON + i), POPUP_BEGIN_LINE, txt[(TXT_DUNGEON_NAME + i)].split("|")[0], POPUP_END_LINE, POPUP_BEGIN_LINE, FontFormat_EpicItemQuote, txt[(TXT_DUNGEON_NAME + i)].split("|")[1], FontFormat_Popup, POPUP_END_LINE, POPUP_BEGIN_LINE, txt[TXT_DUNGEON_INFO].split("%1").join(DungeonLevel).split("%2").join(NextEnemy), POPUP_END_LINE);
                _local2 = actor[(MQS_BUTTON + i)];
                with (_local2) {
                    addEventListener(MouseEvent.CLICK, MainQuestsClick);
                    buttonMode = true;
                    useHandCursor = true;
                    mouseChildren = false;
                };
                i = (i + 1);
            };
        } else {
            i = 0;
            while (i < 5) {
                if (i < 4){
                    SetCnt((HLMQS_DISABLED + i), MQS_DISABLED);
                    SetCnt((HLMQS_COMPLETED + i), MQS_COMPLETED);
                    if (i == 0){
                        DungeonLevel = Savegame[(SG_DUNGEON_LEVEL + 9)];
                        if (countDone > 9){
                            actor[(HLMQS_DISABLED + i)].visible = false;
                            actor[(HLMQS_COMPLETED + i)].visible = true;
                        } else {
                            actor[(HLMQS_COMPLETED + i)].visible = false;
                            actor[(HLMQS_DISABLED + i)].alpha = 1;
                            if (DungeonLevel == "0"){
                                actor[(HLMQS_DISABLED + i)].visible = true;
                                PlayUnlockSound = true;
                                FadeOut((HLMQS_DISABLED + i), 20, 0.05, 0, true);
                                DungeonLevel = "1";
                            } else {
                                DungeonLevel = String((int(DungeonLevel) - 1));
                                actor[(HLMQS_DISABLED + i)].visible = false;
                            };
                        };
                        switch (DungeonLevel){
                            case "1":
                                NextEnemy = txt[2300];
                                break;
                            case "2":
                                NextEnemy = txt[2314];
                                break;
                            case "3":
                                NextEnemy = txt[2358];
                                break;
                            case "4":
                                NextEnemy = txt[2220];
                                break;
                            case "5":
                                NextEnemy = txt[2260];
                                break;
                            case "6":
                                NextEnemy = txt[2362];
                                break;
                            case "7":
                                NextEnemy = txt[2360];
                                break;
                            case "8":
                                NextEnemy = txt[2358];
                                break;
                            case "9":
                                NextEnemy = txt[2357];
                                break;
                            case "10":
                                NextEnemy = txt[2364];
                                break;
                        };
                    } else {
                        if (i == 1){
                            if (countDone > 10){
                                actor[(HLMQS_DISABLED + i)].visible = false;
                                actor[(HLMQS_COMPLETED + i)].visible = true;
                            } else {
                                if (countDone == 10){
                                    actor[(HLMQS_COMPLETED + i)].visible = false;
                                    actor[(HLMQS_DISABLED + i)].alpha = 1;
                                    DungeonLevel = Savegame[(SG_NEW_DUNGEONS + 0)];
                                    if (DungeonLevel == "0"){
                                        actor[(HLMQS_DISABLED + i)].visible = true;
                                        PlayUnlockSound = true;
                                        FadeOut((HLMQS_DISABLED + i), 20, 0.05, 0, true);
                                        DungeonLevel = "1";
                                    } else {
                                        DungeonLevel = String((int(DungeonLevel) - 1));
                                        actor[(HLMQS_DISABLED + i)].visible = false;
                                    };
                                } else {
                                    actor[(HLMQS_COMPLETED + i)].visible = false;
                                    actor[(HLMQS_DISABLED + i)].alpha = 1;
                                    actor[(HLMQS_DISABLED + i)].visible = true;
                                };
                            };
                            NextEnemy = txt[((2372 + int(DungeonLevel)) - 1)];
                        } else {
                            if (i == 2){
                                if (countDone > 11){
                                    actor[(HLMQS_DISABLED + i)].visible = false;
                                    actor[(HLMQS_COMPLETED + i)].visible = true;
                                } else {
                                    if (countDone == 11){
                                        actor[(HLMQS_COMPLETED + i)].visible = false;
                                        actor[(HLMQS_DISABLED + i)].alpha = 1;
                                        DungeonLevel = Savegame[(SG_NEW_DUNGEONS + 1)];
                                        if (DungeonLevel == "0"){
                                            actor[(HLMQS_DISABLED + i)].visible = true;
                                            PlayUnlockSound = true;
                                            FadeOut((HLMQS_DISABLED + i), 20, 0.05, 0, true);
                                            DungeonLevel = "1";
                                        } else {
                                            DungeonLevel = String((int(DungeonLevel) - 1));
                                            actor[(HLMQS_DISABLED + i)].visible = false;
                                        };
                                    } else {
                                        actor[(HLMQS_COMPLETED + i)].visible = false;
                                        actor[(HLMQS_DISABLED + i)].alpha = 1;
                                        actor[(HLMQS_DISABLED + i)].visible = true;
                                    };
                                };
                                NextEnemy = txt[((2382 + int(DungeonLevel)) - 1)];
                            } else {
                                if (i == 3){
                                    if (countDone > 12){
                                        actor[(HLMQS_DISABLED + i)].visible = false;
                                        actor[(HLMQS_COMPLETED + i)].visible = true;
                                    } else {
                                        if (countDone == 12){
                                            actor[(HLMQS_COMPLETED + i)].visible = false;
                                            actor[(HLMQS_DISABLED + i)].alpha = 1;
                                            DungeonLevel = String((int(Savegame[SG_DUNGEON_13]) - 120));
                                            if (DungeonLevel == "0"){
                                                actor[(HLMQS_DISABLED + i)].visible = true;
                                                PlayUnlockSound = true;
                                                FadeOut((HLMQS_DISABLED + i), 20, 0.05, 0, true);
                                                DungeonLevel = "1";
                                            } else {
                                                DungeonLevel = String((int(DungeonLevel) - 1));
                                                actor[(HLMQS_DISABLED + i)].visible = false;
                                            };
                                        } else {
                                            actor[(HLMQS_COMPLETED + i)].visible = false;
                                            actor[(HLMQS_DISABLED + i)].alpha = 1;
                                            actor[(HLMQS_DISABLED + i)].visible = true;
                                        };
                                    };
                                    NextEnemy = txt[((9032 + int(DungeonLevel)) - 1)];
                                };
                            };
                        };
                    };
                } else {
                    SetCnt((HLMQS_COMPLETED + i), HLMQS_TOWER_DISABLED);
                    NextEnemy = txt[(TXT_TOWER_ENEMY_NAMES + towerLevel)].split("|")[0];
                    DungeonLevel = String((towerLevel + 1));
                    if (towerLevel >= 100){
                        actor[(HLMQS_COMPLETED + i)].visible = true;
                    } else {
                        actor[(HLMQS_COMPLETED + i)].visible = false;
                    };
                };
                SetCnt((HLMQS_BUTTON + i), (HLMQS_BUTTON + i));
                EnablePopup((HLMQS_BUTTON + i), POPUP_BEGIN_LINE, txt[(TXT_HL_MAINQUESTS_NAME + i)].split("|")[0], POPUP_END_LINE, POPUP_BEGIN_LINE, FontFormat_EpicItemQuote, txt[(TXT_HL_MAINQUESTS_NAME + i)].split("|")[1], FontFormat_Popup, POPUP_END_LINE, POPUP_BEGIN_LINE, txt[(((i == 4)) ? TXT_TOWER_INFO : TXT_DUNGEON_INFO)].split("%1").join(DungeonLevel).split("%2").join(NextEnemy).split("%3").join(String(towerLevel)), POPUP_END_LINE);
                _local2 = actor[(HLMQS_BUTTON + i)];
                with (_local2) {
                    addEventListener(MouseEvent.CLICK, MainQuestsClick);
                    buttonMode = true;
                    useHandCursor = true;
                    mouseChildren = false;
                };
                i = (i + 1);
            };
        };
        if (PlayUnlockSound){
            Play(SND_MAINQUESTS_UNLOCK);
        };
    };
    countDone = 0;
    i = 0;
    while (i < 10) {
        if (int(Savegame[(SG_DUNGEON_LEVEL + i)]) >= 12){
            countDone = (countDone + 1);
        };
        i = (i + 1);
    };
    i = 0;
    while (i < 2) {
        if (int(Savegame[(SG_NEW_DUNGEONS + i)]) >= 12){
            countDone = (countDone + 1);
        };
        i = (i + 1);
    };
    if (int(Savegame[SG_DUNGEON_13]) >= (120 + 12)){
        countDone = (countDone + 1);
    };
    Background = (SCR_QUEST_BG_1 + 50);
    Load(Background);
    Load((((countDone >= 9)) ? SCREEN_HLMAINQUESTS : SCREEN_MAINQUESTS));
    Load(MQS_DISABLED);
    Load(MQS_COMPLETED);
    if (countDone >= 9){
        Load(HLMQS_TOWER_DISABLED);
        Load(HLMQS_TOWER_COMPLETED);
    };
    i = 0;
    while (i < 9) {
        Load((MQS_BUTTON + i));
        i = (i + 1);
    };
    WhenLoaded(DoShowMainQuestsScreen);
}

public function ShowMainQuestScreen(DungeonNr:int=0, Enemy:int=0){
    var DoShowMainQuestScreen:* = null;
    var MQDelayCheck:* = null;
    var DungeonNr:int = DungeonNr;
    var Enemy:int = Enemy;
    DoShowMainQuestScreen = function (){
        var DungeonLevel:* = null;
        var i:* = 0;
        DungeonLevel = "";
        if (DungeonNr == 100){
            DungeonLevel = String((towerLevel + 1));
        } else {
            if (DungeonNr == 12){
                DungeonLevel = String((int(Savegame[SG_DUNGEON_13]) - 121));
            } else {
                if (DungeonNr >= 10){
                    DungeonLevel = String((int(Savegame[((SG_NEW_DUNGEONS + DungeonNr) - 10)]) - 1));
                } else {
                    DungeonLevel = String((int(Savegame[(SG_DUNGEON_LEVEL + DungeonNr)]) - 1));
                };
            };
        };
        RemoveAll();
        if (DungeonNr != 100){
            if (DungeonLevel == "0"){
                DungeonLevel = "1";
            };
            if (int(DungeonLevel) >= 120){
                DungeonLevel = "1";
            };
            var _local2 = actor[LBL_MAINQUEST_TITLE];
            with (_local2) {
                text = txt[(TXT_DUNGEON_INFO + 3)].split("%1").join(txt[(TXT_DUNGEON_NAME + DungeonNr)].split("|")[0]).split("%2").join(DungeonLevel);
                x = (SCREEN_TITLE_X - (textWidth / 2));
            };
        } else {
            _local2 = actor[LBL_MAINQUEST_TITLE];
            with (_local2) {
                text = ((txt[TXT_TOWER_LEVEL].split("%1").join(DungeonLevel) + " - ") + txt[((TXT_TOWER_ENEMY_NAMES + Enemy) - 399)].split("|")[0]);
                x = (SCREEN_TITLE_X - (textWidth / 2));
            };
        };
        _local2 = actor[LBL_MAINQUEST_TEXT];
        with (_local2) {
            text = questText.split("#").join(String.fromCharCode(13));
        };
        Arabize(LBL_MAINQUEST_TEXT);
        if (textDir == "right"){
            SetBtnText(MAINQUEST_START, (((WaitingFor(Savegame[SG_MQ_REROLL_TIME])) ? "(~P1) " : "") + txt[TXT_OK]));
        } else {
            SetBtnText(MAINQUEST_START, (txt[TXT_OK] + ((WaitingFor(Savegame[SG_MQ_REROLL_TIME])) ? " (1~P)" : "")));
        };
        if (WaitingFor(Savegame[SG_MQ_REROLL_TIME])){
            Show(LBL_MAINQUEST_MUSHHINT);
            actor[LBL_MAINQUEST_MUSHHINT].text = txt[TXT_MQ_MUSHHINT].split("%1").join(WaitingTime(Savegame[SG_MQ_REROLL_TIME]));
            Arabize(LBL_MAINQUEST_MUSHHINT);
            MQDelayTimer.addEventListener(TimerEvent.TIMER, MQDelayCheck);
            MQDelayTimer.start();
        } else {
            Hide(LBL_MAINQUEST_MUSHHINT);
        };
        if (DungeonNr == 100){
            Add(SCR_TOWER_BG);
        } else {
            Add(((SCR_QUEST_BG_1 + 50) + DungeonNr));
        };
        SetCnt(MAINQUEST_ENEMY_BORDER, FIGHT_CHAR_BORDER);
        Add(SCREEN_MAINQUEST);
        if (Enemy < 0){
            i = 0;
            while (i < 10) {
                _local2 = actor[(CHARBACKGROUND + i)];
                with (_local2) {
                    x = actor[MAINQUEST_ENEMY].x;
                    y = actor[MAINQUEST_ENEMY].y;
                    scaleX = 1;
                    scaleY = 1;
                };
                i = (i + 1);
            };
            LoadCharacterImage();
        } else {
            SetCnt(MAINQUEST_ENEMY, (OPPMONSTER + Enemy));
        };
        SelectedDungeon = DungeonNr;
    };
    MQDelayCheck = function (evt:TimerEvent=undefined){
        if (!OnStage(SHP_MAINQUEST)){
            MQDelayTimer.removeEventListener(TimerEvent.TIMER, MQDelayCheck);
            MQDelayTimer.stop();
            return;
        };
        if (WaitingFor(Savegame[SG_MQ_REROLL_TIME])){
            Show(LBL_MAINQUEST_MUSHHINT);
            actor[LBL_MAINQUEST_MUSHHINT].text = txt[TXT_MQ_MUSHHINT].split("%1").join(WaitingTime(Savegame[SG_MQ_REROLL_TIME]));
            SetTitleBar(WaitingTime(Savegame[SG_MQ_REROLL_TIME]));
        } else {
            Hide(LBL_MAINQUEST_MUSHHINT);
            SetTitleBar();
            MQDelayTimer.removeEventListener(TimerEvent.TIMER, MQDelayCheck);
            MQDelayTimer.stop();
        };
        if (textDir == "right"){
            SetBtnText(MAINQUEST_START, (((WaitingFor(Savegame[SG_MQ_REROLL_TIME])) ? "(~P1) " : "") + txt[TXT_OK]));
        } else {
            SetBtnText(MAINQUEST_START, (txt[TXT_OK] + ((WaitingFor(Savegame[SG_MQ_REROLL_TIME])) ? " (1~P)" : "")));
        };
    };
    var questText:* = "";
    if (Savegame[SG_DUNGEON_13] < 122){
        Savegame[SG_DUNGEON_13] = 122;
    };
    if (DungeonNr == 100){
        questText = txt[(TXT_TOWER_ENEMY_NAMES + towerLevel)].split("|")[1];
    } else {
        if (DungeonNr == 12){
            questText = txt[((TXT_QUEST_TEXT + (DungeonNr * 10)) + ((((int(Savegame[SG_DUNGEON_13]) - 2) < 120)) ? 0 : ((int(Savegame[SG_DUNGEON_13]) - 2) - 120)))];
        } else {
            if (DungeonNr >= 10){
                questText = txt[((TXT_QUEST_TEXT + (DungeonNr * 10)) + ((((int(Savegame[((SG_NEW_DUNGEONS + DungeonNr) - 10)]) - 2) < 0)) ? 0 : (int(Savegame[((SG_NEW_DUNGEONS + DungeonNr) - 10)]) - 2)))];
            } else {
                questText = txt[((TXT_QUEST_TEXT + (DungeonNr * 10)) + ((((int(Savegame[(SG_DUNGEON_LEVEL + DungeonNr)]) - 2) < 0)) ? 0 : (int(Savegame[(SG_DUNGEON_LEVEL + DungeonNr)]) - 2)))];
            };
        };
    };
    hasLostMQ = false;
    LastDungeonNr = DungeonNr;
    LastDungeonEnemy = Enemy;
    Load(SCREEN_MAINQUEST);
    if (DungeonNr == 100){
        Load(SCR_TOWER_BG);
    } else {
        Load(((SCR_QUEST_BG_1 + 50) + DungeonNr));
    };
    Load(FIGHT_CHAR_BORDER);
    if (Enemy >= 0){
        Load((OPPMONSTER + Enemy));
    };
    WhenLoaded(DoShowMainQuestScreen);
}

public function MakeRightTextArea(actorID:int, child:int=0, createHandler:Boolean=true){
    var tmpTextFormat:* = null;
    var actorID:* = actorID;
    var child:int = child;
    var createHandler:Boolean = createHandler;
    var makeRightHandler:* = function (evt:Event){
        MakeRightTextArea(actorID, child, false);
    };
    if (textDir != "right"){
        return;
    };
    tmpTextFormat = actor[actorID].getChildAt(child).defaultTextFormat;
    tmpTextFormat.align = "right";
    if (!actor[actorID].hasHandler){
        if (createHandler){
            actor[actorID].hasHandler = true;
        };
    };
    actor[actorID].getChildAt(child).defaultTextFormat = tmpTextFormat;
    actor[actorID].getChildAt(child).setTextFormat(tmpTextFormat);
}

public function DisplayInventory(SG:Array=undefined, NoPrices:Boolean=false, towerMode:Boolean=false, copyCatIdRaw:int=0, witchMode:Boolean=false):void{
    var i:* = 0;
    var ii:* = 0;
    var HideBackPack:* = false;
    var boostPrice:* = 0;
    var boostGold:* = 0;
    var boostSilver:* = 0;
    var preisX:* = 0;
    var popupLines:* = null;
    var tempBonus:* = 0;
    var tmpHealth:* = 0;
    var potionDuration:* = null;
    var copyCatId:* = undefined;
    var popupLinesCpc:* = null;
    var DamageReductionCpc:* = 0;
    var DamageReductionMaxCpc:* = 0;
    var tmpKritische:* = NaN;
    var tmpDamageMin:* = 0;
    var tmpDamageMax:* = 0;
    var tmpDamageFactor:* = NaN;
    var tmpLifeFactor:* = NaN;
    var SchadenLblID:* = 0;
    var SchadenID:* = 0;
    var tmpItmClass:* = 0;
    var tmpItmPic:* = 0;
    var hasEpic:* = false;
    var DamageReduction:* = 0;
    var DamageReductionMax:* = 0;
    var SG:* = SG;
    var NoPrices:Boolean = NoPrices;
    var towerMode:Boolean = towerMode;
    var copyCatIdRaw:int = copyCatIdRaw;
    var witchMode:Boolean = witchMode;
    var GetBoostPrice:* = function (boostCount:int):Number{
        return (int(TrueAttPreis[boostCount]));
    };
    HideBackPack = false;
    tempBonus = 0;
    tmpHealth = 0;
    var hours:* = 0;
    potionDuration = "";
    copyCatId = 0;
    if (towerMode){
        copyCatId = (TSG_COPYCATS + (COPYCAT * copyCatIdRaw));
        i = 0;
        while (i < 3) {
            if (i == copyCatIdRaw){
                if (int(SG[(copyCatId + CPC_LEVEL)]) >= int(Savegame[SG_LEVEL])){
                    Hide((TOWER_STEIGERN1 + i));
                    Hide((LBL_TOWER_BOOSTPRICELABEL + i));
                } else {
                    Show((TOWER_STEIGERN1 + i));
                    Show((LBL_TOWER_BOOSTPRICELABEL + i));
                };
            } else {
                Hide((TOWER_STEIGERN1 + i));
                Hide((LBL_TOWER_BOOSTPRICELABEL + i));
            };
            i = (i + 1);
        };
        i = 0;
        while (i < 5) {
            ii = 0;
            while (ii < 12) {
                SG[((TSG_LOOT_SACK + (i * 12)) + ii)] = Savegame[((SG_BACKPACK_OFFS + (i * 12)) + ii)];
                ii = (ii + 1);
            };
            i = (i + 1);
        };
        if (SG[(copyCatId + CPC_LEVEL)] != 0){
            actor[LBL_SCR_CHAR_NAME].text = txt[(TXT_COPYCAT_NAME + copyCatIdRaw)];
        } else {
            actor[LBL_SCR_CHAR_NAME].text = "";
        };
        actor[SCR_CHAR_NAME].x = ((SCR_CHAR_CHARX + 128) - int((actor[LBL_SCR_CHAR_NAME].textWidth / 2)));
        var _local7 = actor[SCR_CHAR_EXPBAR];
        with (_local7) {
            width = int(((Number(SG[(copyCatId + CPC_GOLD_STOLEN)]) / Number(SG[(copyCatId + CPC_GOLD_STOLEN_NEXT)])) * 254));
        };
        i = 0;
        while (i < 3) {
            Hide((TOWER_NO_PORTRAIT + i));
            Hide((TOWER_PORTRAIT + i));
            _local7 = actor[(TOWER_NO_PORTRAIT + i)];
            with (_local7) {
                scaleX = 0.86;
                scaleY = 0.86;
            };
            _local7 = actor[(TOWER_PORTRAIT + i)];
            with (_local7) {
                scaleX = 0.86;
                scaleY = 0.86;
            };
            i = (i + 1);
        };
        _local7 = actor[LBL_TOWER_EXPLABEL];
        with (_local7) {
            if (SG[(copyCatId + CPC_LEVEL)] != 0){
                Show((TOWER_PORTRAIT + copyCatIdRaw));
                if (textDir == "right"){
                    text = ((SG[(copyCatId + CPC_LEVEL)] + " ") + txt[TXT_HALL_LIST_COLUMN_4]);
                } else {
                    text = ((txt[TXT_HALL_LIST_COLUMN_4] + " ") + SG[(copyCatId + CPC_LEVEL)]);
                };
            } else {
                Show((TOWER_NO_PORTRAIT + copyCatIdRaw));
                text = "";
            };
            if (towerLevelLabelPos > (SCR_CHAR_CHARX + 3)){
                x = ((SCR_CHAR_CHARX + 127) - int((actor[LBL_TOWER_EXPLABEL].textWidth / 2)));
            } else {
                x = (SCR_CHAR_CHARX + 3);
            };
        };
        popupLinesCpc = new Array();
        popupLinesCpc.push([POPUP_BEGIN_LINE, ((txt[163] + ": ") + SG[(copyCatId + CPC_ARMOR)]), POPUP_END_LINE]);
        DamageReductionCpc = int((Number(SG[(copyCatId + CPC_ARMOR)]) / Number(SG[(copyCatId + CPC_LEVEL)])));
        DamageReductionMaxCpc = 50;
        switch (int(SG[(copyCatId + CPC_CLASS)])){
            case 2:
                DamageReductionMaxCpc = 10;
                break;
            case 3:
                DamageReductionMaxCpc = 25;
                break;
        };
        if (DamageReductionCpc > DamageReductionMaxCpc){
            DamageReductionCpc = DamageReductionMaxCpc;
        };
        if (textDir == "right"){
            popupLinesCpc[popupLinesCpc.length] = [POPUP_BEGIN_LINE, FontFormat_Attrib, ((((((((("(" + txt[TXT_MAX]) + " -") + String(DamageReductionMaxCpc)) + "%) ") + String(DamageReductionCpc)) + "% :") + SG[(copyCatId + CPC_LEVEL)]) + " ") + txt[TXT_RUESTUNG_SUM_HINT]), POPUP_END_LINE];
        } else {
            popupLinesCpc[popupLinesCpc.length] = [POPUP_BEGIN_LINE, FontFormat_Attrib, (((((((((txt[TXT_RUESTUNG_SUM_HINT] + " ") + SG[(copyCatId + CPC_LEVEL)]) + ": -") + String(DamageReductionCpc)) + "% (") + txt[TXT_MAX]) + " -") + String(DamageReductionMaxCpc)) + "%)"), POPUP_END_LINE];
        };
        if (txt[TXT_SHIELD_FORMULA]){
            popupLinesCpc[popupLinesCpc.length] = [POPUP_BEGIN_LINE, FontFormat_Attrib, txt[TXT_SHIELD_FORMULA], POPUP_END_LINE];
        };
        EnablePopup(LBL_TOWER_EXPLABEL, popupLinesCpc);
        i = 0;
        while (i < 3) {
            _local7 = actor[(LBL_TOWER_BOOSTPRICELABEL + i)];
            with (_local7) {
                x = ((EXPERIENCE_BAR_X + 196) - textWidth);
            };
            i = (i + 1);
        };
        SetCnt(TOWER_BOOSTCOIN, IF_GOLD);
    } else {
        if (!(SG is Array)){
            SG = Savegame;
        } else {
            HideBackPack = true;
        };
    };
    i = 0;
    while (i < 5) {
        if (int(SG[(((towerMode) ? (copyCatId + CPC_ATTRIBS_BONUS) : SG_ATTR_STAERKE_BONUS) + i)]) > 0){
            actor[(LBL_SCR_CHAR_STAERKE + i)].defaultTextFormat = FontFormat_AttribBonus;
        } else {
            actor[(LBL_SCR_CHAR_STAERKE + i)].defaultTextFormat = FontFormat_Attrib;
        };
        actor[(LBL_SCR_CHAR_STAERKE + i)].text = String((int(SG[(((towerMode) ? (copyCatId + CPC_ATTRIBS) : SG_ATTR_STAERKE) + i)]) + int(SG[(((towerMode) ? (copyCatId + CPC_ATTRIBS_BONUS) : SG_ATTR_STAERKE_BONUS) + i)])));
        popupLines = new Array();
        popupLines[popupLines.length] = [POPUP_BEGIN_LINE, FontFormat_Attrib, txt[(TXT_CHAR_SCHADEN + i)], POPUP_END_LINE];
        if (textDir == "right"){
            popupLines[popupLines.length] = [POPUP_BEGIN_LINE, FontFormat_Attrib, (actor[(LBL_SCR_CHAR_STAERKE_CAPTION + i)].text + " ÷ 2 ="), POPUP_END_LINE];
        } else {
            popupLines[popupLines.length] = [POPUP_BEGIN_LINE, FontFormat_Attrib, (("= " + actor[(LBL_SCR_CHAR_STAERKE_CAPTION + i)].text) + " / 2"), POPUP_END_LINE];
        };
        EnablePopup((LBL_SCR_CHAR_SCHADEN + i), popupLines);
        EnablePopup((LBL_SCR_CHAR_SCHADEN_CAPTION + i), popupLines);
        popupLines = new Array();
        popupLines[popupLines.length] = [POPUP_BEGIN_LINE, FontFormat_Attrib, actor[(LBL_SCR_CHAR_STAERKE_CAPTION + i)].text, POPUP_END_LINE];
        popupLines[popupLines.length] = [POPUP_BEGIN_LINE, FontFormat_Attrib, txt[(TXT_ATTRIBHELP + i)], POPUP_END_LINE];
        if ((((((towerMode) ? (copyCatIdRaw + 1) : int(SG[SG_CLASS])) == 1)) and ((i == 0)))){
            popupLines[popupLines.length] = [POPUP_BEGIN_LINE, FontFormat_Attrib, txt[TXT_ATTRIBHELP_WARRIOR], POPUP_END_LINE];
        } else {
            if ((((((towerMode) ? (copyCatIdRaw + 1) : int(SG[SG_CLASS])) == 3)) and ((i == 1)))){
                popupLines[popupLines.length] = [POPUP_BEGIN_LINE, FontFormat_Attrib, txt[TXT_ATTRIBHELP_HUNTER], POPUP_END_LINE];
            } else {
                if ((((((towerMode) ? (copyCatIdRaw + 1) : int(SG[SG_CLASS])) == 2)) and ((i == 2)))){
                    popupLines[popupLines.length] = [POPUP_BEGIN_LINE, FontFormat_Attrib, txt[TXT_ATTRIBHELP_MAGE], POPUP_END_LINE];
                } else {
                    if (i <= 2){
                        popupLines[popupLines.length] = [POPUP_BEGIN_LINE, FontFormat_Attrib, txt[(TXT_ATTRIBHELP_EXT + i)], POPUP_END_LINE];
                    };
                };
            };
        };
        popupLines[popupLines.length] = [POPUP_BEGIN_LINE, FontFormat_Attrib, txt[TXT_BASIS], POPUP_TAB, String(int(SG[(((towerMode) ? (copyCatId + CPC_ATTRIBS) : SG_ATTR_STAERKE) + i)])), POPUP_END_LINE];
        tempBonus = 0;
        tempBonus = int(SG[(((towerMode) ? (copyCatId + CPC_ATTRIBS_BONUS) : SG_ATTR_STAERKE_BONUS) + i)]);
        if (!towerMode){
            ii = 0;
            while (ii < 3) {
                if (int(SG[(SG_POTION_TYPE + ii)]) == 16){
                    tmpHealth = int(SG[(SG_POTION_GAIN + ii)]);
                } else {
                    if (((int(SG[(SG_POTION_TYPE + ii)]) - 1) % 5) == i){
                        potionDuration = TimeStr(SG[(SG_POTION_DURATION + ii)], true);
                        if (int(SG[(SG_POTION_GAIN + ii)]) <= 25){
                            tempBonus = ((int(SG[(SG_ATTR_STAERKE + i)]) + int(SG[(SG_ATTR_STAERKE_BONUS + i)])) / ((100 + int(SG[(SG_POTION_GAIN + ii)])) / 100));
                            if (HideBackPack){
                                popupLines[popupLines.length] = [POPUP_BEGIN_LINE, FontFormat_AttribTemp, txt[TXT_TEMPORARY], POPUP_TAB, String(Math.round(((int(SG[(SG_POTION_GAIN + ii)]) / 100) * tempBonus))), POPUP_END_LINE];
                            } else {
                                if (textDir == "right"){
                                    popupLines[popupLines.length] = [POPUP_BEGIN_LINE, FontFormat_AttribTemp, txt[TXT_TEMPORARY], POPUP_TAB, ((((("(" + potionDuration) + " ") + txt[TXT_UNTIL]) + ") ") + String(Math.round(((int(SG[(SG_POTION_GAIN + ii)]) / 100) * tempBonus)))), POPUP_END_LINE];
                                } else {
                                    popupLines[popupLines.length] = [POPUP_BEGIN_LINE, FontFormat_AttribTemp, txt[TXT_TEMPORARY], POPUP_TAB, (((((String(Math.round(((int(SG[(SG_POTION_GAIN + ii)]) / 100) * tempBonus))) + " (") + txt[TXT_UNTIL]) + " ") + potionDuration) + ")"), POPUP_END_LINE];
                                };
                            };
                            tempBonus = (tempBonus - int(SG[(SG_ATTR_STAERKE + i)]));
                        } else {
                            if (HideBackPack){
                                popupLines[popupLines.length] = [POPUP_BEGIN_LINE, FontFormat_AttribTemp, txt[TXT_TEMPORARY], POPUP_TAB, String(int(SG[(SG_POTION_GAIN + ii)])), POPUP_END_LINE];
                            } else {
                                if (textDir == "right"){
                                    popupLines[popupLines.length] = [POPUP_BEGIN_LINE, FontFormat_AttribTemp, txt[TXT_TEMPORARY], POPUP_TAB, ((((("(" + potionDuration) + " ") + txt[TXT_UNTIL]) + ") ") + String(int(SG[(SG_POTION_GAIN + ii)]))), POPUP_END_LINE];
                                } else {
                                    popupLines[popupLines.length] = [POPUP_BEGIN_LINE, FontFormat_AttribTemp, txt[TXT_TEMPORARY], POPUP_TAB, (((((String(int(SG[(SG_POTION_GAIN + ii)])) + " (") + txt[TXT_UNTIL]) + " ") + potionDuration) + ")"), POPUP_END_LINE];
                                };
                            };
                            tempBonus = (int(SG[(SG_ATTR_STAERKE_BONUS + i)]) - int(SG[(SG_POTION_GAIN + ii)]));
                        };
                        break;
                    };
                };
                ii = (ii + 1);
            };
        };
        if (tempBonus > 0){
            popupLines[popupLines.length] = [POPUP_BEGIN_LINE, FontFormat_AttribBonus, txt[TXT_BONUS], POPUP_TAB, String(tempBonus), POPUP_END_LINE];
        };
        EnablePopup((LBL_SCR_CHAR_STAERKE + i), popupLines);
        EnablePopup((LBL_SCR_CHAR_STAERKE_CAPTION + i), popupLines);
        if (!towerMode){
            boostPrice = GetBoostPrice(SG[(SG_ATTR_STAERKE_GEKAUFT + i)]);
            if (boostPrice > 9999){
                boostPrice = (int((boostPrice / 100)) * 100);
            };
            if (boostPrice > 0x3B9ACA00){
                boostPrice = 0x3B9ACA00;
            };
            canBoost[i] = Boolean((boostPrice <= Number(SG[SG_GOLD])));
            boostGold = int((boostPrice / 100));
            boostSilver = (boostPrice % 100);
            Hide((LBL_SCR_CHAR_PREIS1 + i), (SCR_CHAR_GOLD1 + i), (LBL_SCR_CHAR_SILBER1 + i), (SCR_CHAR_SILBER1 + i));
            preisX = (CHAR_PROP_COLUMN_4_X + (((textDir == "right")) ? 240 : 0));
            if (boostGold > 0){
                _local7 = actor[(LBL_SCR_CHAR_PREIS1 + i)];
                with (_local7) {
                    text = String(boostGold);
                    if (textDir == "right"){
                        x = (preisX - textWidth);
                        preisX = (x - 8);
                    } else {
                        x = preisX;
                        preisX = ((x + textWidth) + 8);
                    };
                };
                _local7 = actor[(SCR_CHAR_GOLD1 + i)];
                with (_local7) {
                    if (textDir == "right"){
                        x = (preisX - width);
                        preisX = (x - 10);
                    } else {
                        x = preisX;
                        preisX = ((x + width) + 10);
                    };
                };
                Show((LBL_SCR_CHAR_PREIS1 + i), (SCR_CHAR_GOLD1 + i));
            };
            if (boostSilver > 0){
                _local7 = actor[(LBL_SCR_CHAR_SILBER1 + i)];
                with (_local7) {
                    text = String(boostSilver);
                    if (textDir == "right"){
                        x = (preisX - textWidth);
                        preisX = (x - 8);
                    } else {
                        x = preisX;
                        preisX = ((x + textWidth) + 8);
                    };
                };
                _local7 = actor[(SCR_CHAR_SILBER1 + i)];
                with (_local7) {
                    if (textDir == "right"){
                        x = (preisX - width);
                        preisX = (x - 10);
                    } else {
                        x = preisX;
                        preisX = ((x + width) + 10);
                    };
                };
                Show((LBL_SCR_CHAR_SILBER1 + i), (SCR_CHAR_SILBER1 + i));
            };
        };
        i = (i + 1);
    };
    tmpKritische = (Math.round(((((int(SG[((towerMode) ? ((copyCatId + CPC_ATTRIBS) + 4) : SG_ATTR_WILLENSKRAFT)]) + int(SG[((towerMode) ? ((copyCatId + CPC_ATTRIBS_BONUS) + 4) : SG_ATTR_WILLENSKRAFT_BONUS)])) * 25) / (Number(SG[((towerMode) ? (copyCatId + CPC_LEVEL) : SG_LEVEL)]) * 10)) * 100)) / 100);
    if (tmpKritische < 0){
        tmpKritische = 0;
    };
    if (tmpKritische > 50){
        tmpKritische = 50;
    };
    tmpDamageMin = SG[((towerMode) ? (copyCatId + CPC_DAMAGE_MIN) : SG_DAMAGE_MIN)];
    tmpDamageMax = SG[((towerMode) ? (copyCatId + CPC_DAMAGE_MAX) : SG_DAMAGE_MAX)];
    tmpDamageFactor = 0;
    tmpLifeFactor = 5;
    SchadenLblID = 0;
    switch (int(((towerMode) ? (copyCatIdRaw + 1) : SG[SG_CLASS]))){
        case 1:
            SchadenLblID = LBL_SCR_CHAR_SCHADEN_CAPTION;
            SchadenID = LBL_SCR_CHAR_SCHADEN;
            tmpDamageFactor = (1 + ((Number(SG[((towerMode) ? (copyCatId + CPC_ATTRIBS) : SG_ATTR_STAERKE)]) + Number(SG[((towerMode) ? (copyCatId + CPC_ATTRIBS_BONUS) : SG_ATTR_STAERKE_BONUS)])) / 10));
            tmpLifeFactor = 5;
            break;
        case 2:
            SchadenLblID = LBL_SCR_CHAR_LEBEN_CAPTION;
            SchadenID = LBL_SCR_CHAR_LEBEN;
            tmpDamageFactor = (1 + ((Number(SG[((towerMode) ? ((copyCatId + CPC_ATTRIBS) + 2) : SG_ATTR_AUSDAUER)]) + Number(SG[((towerMode) ? ((copyCatId + CPC_ATTRIBS_BONUS) + 2) : SG_ATTR_AUSDAUER_BONUS)])) / 10));
            tmpLifeFactor = 2;
            break;
        case 3:
            SchadenLblID = LBL_SCR_CHAR_KAMPFWERT_CAPTION;
            SchadenID = LBL_SCR_CHAR_KAMPFWERT;
            tmpDamageFactor = (1 + ((Number(SG[((towerMode) ? ((copyCatId + CPC_ATTRIBS) + 1) : SG_ATTR_BEWEGLICHKEIT)]) + Number(SG[((towerMode) ? ((copyCatId + CPC_ATTRIBS_BONUS) + 1) : SG_ATTR_BEWEGLICHKEIT_BONUS)])) / 10));
            tmpLifeFactor = 4;
            break;
    };
    tmpDamageMin = Math.round((tmpDamageMin * tmpDamageFactor));
    tmpDamageMax = Math.round((tmpDamageMax * tmpDamageFactor));
    actor[LBL_SCR_CHAR_SCHADEN].text = int(((Number(SG[((towerMode) ? (copyCatId + CPC_ATTRIBS) : SG_ATTR_STAERKE)]) + Number(SG[((towerMode) ? (copyCatId + CPC_ATTRIBS_BONUS) : SG_ATTR_STAERKE_BONUS)])) / 2));
    actor[LBL_SCR_CHAR_KAMPFWERT].text = int(((Number(SG[((towerMode) ? ((copyCatId + CPC_ATTRIBS) + 1) : SG_ATTR_BEWEGLICHKEIT)]) + Number(SG[((towerMode) ? ((copyCatId + CPC_ATTRIBS_BONUS) + 1) : SG_ATTR_BEWEGLICHKEIT_BONUS)])) / 2));
    actor[LBL_SCR_CHAR_LEBEN].text = int(((Number(SG[((towerMode) ? ((copyCatId + CPC_ATTRIBS) + 2) : SG_ATTR_AUSDAUER)]) + Number(SG[((towerMode) ? ((copyCatId + CPC_ATTRIBS_BONUS) + 2) : SG_ATTR_AUSDAUER_BONUS)])) / 2));
    actor[LBL_SCR_CHAR_RUESTUNG].defaultTextFormat = (((tmpHealth > 0)) ? FontFormat_AttribBonus : FontFormat_Attrib);
    actor[LBL_SCR_CHAR_RUESTUNG].text = int(((((Number(SG[((towerMode) ? ((copyCatId + CPC_ATTRIBS) + 3) : SG_ATTR_INTELLIGENZ)]) + Number(SG[((towerMode) ? ((copyCatId + CPC_ATTRIBS_BONUS) + 3) : SG_ATTR_INTELLIGENZ_BONUS)])) * (tmpLifeFactor * 2)) * (((tmpHealth > 0)) ? (Number((tmpHealth + 100)) / 100) : 1)) * (0.5 + (SG[((towerMode) ? (copyCatId + CPC_LEVEL) : SG_LEVEL)] / 2))));
    actor[LBL_SCR_CHAR_WIDERSTAND].text = (String(tmpKritische) + String("%"));
    popupLines = new Array();
    popupLines[popupLines.length] = [POPUP_BEGIN_LINE, FontFormat_Attrib, txt[TXT_SCHADEN], POPUP_END_LINE];
    if (textDir == "right"){
        popupLines[popupLines.length] = [POPUP_BEGIN_LINE, FontFormat_Attrib, (((txt[TXT_WAFFENSCHADEN] + " × (1 + ") + actor[((LBL_SCR_CHAR_STAERKE_CAPTION + SchadenID) - LBL_SCR_CHAR_SCHADEN)].text) + " ÷ 10) ="), POPUP_END_LINE];
    } else {
        popupLines[popupLines.length] = [POPUP_BEGIN_LINE, FontFormat_Attrib, (((("= " + txt[TXT_WAFFENSCHADEN]) + " * (1 + ") + actor[((LBL_SCR_CHAR_STAERKE_CAPTION + SchadenID) - LBL_SCR_CHAR_SCHADEN)].text) + " / 10)"), POPUP_END_LINE];
    };
    EnablePopup(SchadenID, popupLines);
    EnablePopup(SchadenLblID, popupLines);
    popupLines = new Array();
    popupLines[popupLines.length] = [POPUP_BEGIN_LINE, FontFormat_Attrib, actor[LBL_SCR_CHAR_RUESTUNG_CAPTION].text, POPUP_END_LINE];
    if (textDir == "right"){
        popupLines[popupLines.length] = [POPUP_BEGIN_LINE, FontFormat_Attrib, (((((((((((tmpHealth > 0)) ? "(" : "") + actor[(LBL_SCR_CHAR_STAERKE_CAPTION + 3)].text) + " × ") + String(tmpLifeFactor)) + " × (") + txt[TXT_HALL_LIST_COLUMN_4]) + " + 1)") + (((tmpHealth > 0)) ? ((") + " + String(tmpHealth)) + "%") : "")) + " ="), POPUP_END_LINE];
    } else {
        popupLines[popupLines.length] = [POPUP_BEGIN_LINE, FontFormat_Attrib, (((((((("= " + (((tmpHealth > 0)) ? "(" : "")) + actor[(LBL_SCR_CHAR_STAERKE_CAPTION + 3)].text) + " * ") + String(tmpLifeFactor)) + " * (") + txt[TXT_HALL_LIST_COLUMN_4]) + " + 1)") + (((tmpHealth > 0)) ? ((") + " + String(tmpHealth)) + "%") : "")), POPUP_END_LINE];
    };
    EnablePopup((LBL_SCR_CHAR_SCHADEN + 3), popupLines);
    EnablePopup((LBL_SCR_CHAR_SCHADEN_CAPTION + 3), popupLines);
    popupLines = new Array();
    popupLines[popupLines.length] = [POPUP_BEGIN_LINE, FontFormat_Attrib, actor[LBL_SCR_CHAR_WIDERSTAND_CAPTION].text, POPUP_END_LINE];
    if (textDir == "right"){
        popupLines[popupLines.length] = [POPUP_BEGIN_LINE, FontFormat_Attrib, (((actor[(LBL_SCR_CHAR_STAERKE_CAPTION + 4)].text + " × 5 ÷ (") + txt[TXT_GEGNERSTUFE]) + " × 2) ="), POPUP_END_LINE];
    } else {
        popupLines[popupLines.length] = [POPUP_BEGIN_LINE, FontFormat_Attrib, (((("= " + actor[(LBL_SCR_CHAR_STAERKE_CAPTION + 4)].text) + " * 5 / (") + txt[TXT_GEGNERSTUFE]) + " * 2)"), POPUP_END_LINE];
    };
    popupLines[popupLines.length] = [POPUP_BEGIN_LINE, FontFormat_Attrib, txt[TXT_KRITISCHMINMAX], POPUP_END_LINE];
    EnablePopup((LBL_SCR_CHAR_SCHADEN + 4), popupLines);
    EnablePopup((LBL_SCR_CHAR_SCHADEN_CAPTION + 4), popupLines);
    actor[LBL_SCR_CHAR_SCHADEN_CAPTION].text = txt[TXT_CHAR_SCHADEN];
    actor[LBL_SCR_CHAR_LEBEN_CAPTION].text = txt[TXT_CHAR_LEBEN];
    actor[LBL_SCR_CHAR_KAMPFWERT_CAPTION].text = txt[TXT_CHAR_KAMPFWERT];
    if (SchadenLblID > 0){
        actor[SchadenLblID].text = txt[TXT_SCHADEN];
        actor[SchadenID].text = ((tmpDamageMin + (((String(tmpDamageMin).length >= 6)) ? "-" : " - ")) + tmpDamageMax);
    };
    if (textDir == "right"){
        actor[LBL_SCR_CHAR_SCHADEN].x = ((CHAR_PROP_COLUMN_6_X - 15) - actor[LBL_SCR_CHAR_SCHADEN].textWidth);
        actor[LBL_SCR_CHAR_KAMPFWERT].x = ((CHAR_PROP_COLUMN_6_X - 15) - actor[LBL_SCR_CHAR_KAMPFWERT].textWidth);
        actor[LBL_SCR_CHAR_LEBEN].x = ((CHAR_PROP_COLUMN_6_X - 15) - actor[LBL_SCR_CHAR_LEBEN].textWidth);
        actor[LBL_SCR_CHAR_RUESTUNG].x = ((CHAR_PROP_COLUMN_6_X - 15) - actor[LBL_SCR_CHAR_RUESTUNG].textWidth);
        actor[LBL_SCR_CHAR_WIDERSTAND].x = ((CHAR_PROP_COLUMN_6_X - 15) - actor[LBL_SCR_CHAR_WIDERSTAND].textWidth);
        actor[LBL_SCR_CHAR_SCHADEN_CAPTION].x = ((CHAR_PROP_COLUMN_6_X + 110) - actor[LBL_SCR_CHAR_SCHADEN_CAPTION].textWidth);
        actor[LBL_SCR_CHAR_KAMPFWERT_CAPTION].x = ((CHAR_PROP_COLUMN_6_X + 110) - actor[LBL_SCR_CHAR_KAMPFWERT_CAPTION].textWidth);
        actor[LBL_SCR_CHAR_LEBEN_CAPTION].x = ((CHAR_PROP_COLUMN_6_X + 110) - actor[LBL_SCR_CHAR_LEBEN_CAPTION].textWidth);
        actor[LBL_SCR_CHAR_RUESTUNG_CAPTION].x = ((CHAR_PROP_COLUMN_6_X + 110) - actor[LBL_SCR_CHAR_RUESTUNG_CAPTION].textWidth);
        actor[LBL_SCR_CHAR_WIDERSTAND_CAPTION].x = ((CHAR_PROP_COLUMN_6_X + 110) - actor[LBL_SCR_CHAR_WIDERSTAND_CAPTION].textWidth);
        i = 0;
        while (i < 5) {
            actor[(LBL_SCR_CHAR_STAERKE + i)].x = ((CHAR_PROP_COLUMN_1_X + 50) - actor[(LBL_SCR_CHAR_STAERKE + i)].textWidth);
            actor[(LBL_SCR_CHAR_STAERKE_CAPTION + i)].x = ((CHAR_PROP_COLUMN_1_X + 150) - actor[(LBL_SCR_CHAR_STAERKE_CAPTION + i)].textWidth);
            i = (i + 1);
        };
        if (!towerMode){
            actor[LBL_CHAR_MOUNT_NAME].x = (((CHAR_MOUNT_X + CHAR_MOUNT_X) - 20) - actor[LBL_CHAR_MOUNT_NAME].textWidth);
            actor[LBL_CHAR_MOUNT_DESCR].width = (CHAR_MOUNT_X - 20);
            actor[LBL_CHAR_MOUNT_RUNTIME].x = (((CHAR_MOUNT_X + CHAR_MOUNT_X) - 20) - actor[LBL_CHAR_MOUNT_RUNTIME].textWidth);
            actor[LBL_CHAR_MOUNT_GAIN].x = (((CHAR_MOUNT_X + CHAR_MOUNT_X) - 20) - actor[LBL_CHAR_MOUNT_GAIN].textWidth);
            MakeRightTextArea(INP_CHARDESC);
            actor[SCR_CHAR_GILDE].x = ((((GILDEEHRE_X + GILDEEHRE_X) + 40) + 280) - actor[LBL_SCR_CHAR_GILDE].textWidth);
        };
    };
    if (!towerMode){
        i = 0;
        while (i < 3) {
            SetCnt((CHAR_POTION + i), ((int(SG[(SG_POTION_TYPE + i)]))==0) ? C_EMPTY : GetItemID(12, int(SG[(SG_POTION_TYPE + i)]), 0, 0));
            if (int(SG[(SG_POTION_TYPE + i)]) == 0){
                EnablePopup((CHAR_POTION + i));
            } else {
                if (HideBackPack){
                    EnablePopup((CHAR_POTION + i), POPUP_BEGIN_LINE, txt[((TXT_ITMNAME_12 + int(SG[(SG_POTION_TYPE + i)])) - 1)], POPUP_END_LINE, POPUP_BEGIN_LINE, txt[(((int(SG[(SG_POTION_TYPE + i)]) == 16)) ? TXT_ITEM_ATTRIB_CLASS_12 : (TXT_ITEM_ATTRIB_CLASS_1 + ((int(SG[(SG_POTION_TYPE + i)]) - 1) % 5)))], POPUP_TAB, (("+ " + SG[(SG_POTION_GAIN + i)]) + (((((int(SG[(SG_POTION_TYPE + i)]) == 16)) or ((SG[(SG_POTION_GAIN + i)] <= 25)))) ? "%" : "")), POPUP_END_LINE);
                } else {
                    EnablePopup((CHAR_POTION + i), POPUP_BEGIN_LINE, txt[((TXT_ITMNAME_12 + int(SG[(SG_POTION_TYPE + i)])) - 1)], POPUP_END_LINE, POPUP_BEGIN_LINE, txt[(((int(SG[(SG_POTION_TYPE + i)]) == 16)) ? TXT_ITEM_ATTRIB_CLASS_12 : (TXT_ITEM_ATTRIB_CLASS_1 + ((int(SG[(SG_POTION_TYPE + i)]) - 1) % 5)))], POPUP_TAB, (("+ " + SG[(SG_POTION_GAIN + i)]) + (((((int(SG[(SG_POTION_TYPE + i)]) == 16)) or ((SG[(SG_POTION_GAIN + i)] <= 25)))) ? "%" : "")), POPUP_END_LINE, POPUP_BEGIN_LINE, txt[TXT_REMAINING], POPUP_TAB, TimeStr(SG[(SG_POTION_DURATION + i)], true), POPUP_END_LINE, POPUP_BEGIN_LINE, txt[TXT_POTION_KILL_INSTRUCTIONS], POPUP_END_LINE);
                };
            };
            i = (i + 1);
        };
    };
    Move(CHAR_SLOT_1, CHAR_SLOTS_LEFT_X, CHAR_SLOTS_TOP_Y);
    Move(CHAR_SLOT_2, CHAR_SLOTS_LEFT_X, CHAR_SLOTS_ROW2_Y);
    Move(CHAR_SLOT_3, CHAR_SLOTS_LEFT_X, CHAR_SLOTS_ROW3_Y);
    Move(CHAR_SLOT_4, CHAR_SLOTS_LEFT_X, CHAR_SLOTS_ROW4_Y);
    Move(CHAR_SLOT_5, CHAR_SLOTS_RIGHT_X, CHAR_SLOTS_TOP_Y);
    Move(CHAR_SLOT_6, CHAR_SLOTS_RIGHT_X, CHAR_SLOTS_ROW2_Y);
    Move(CHAR_SLOT_7, CHAR_SLOTS_RIGHT_X, CHAR_SLOTS_ROW3_Y);
    Move(CHAR_SLOT_8, CHAR_SLOTS_RIGHT_X, CHAR_SLOTS_ROW4_Y);
    Move(CHAR_SLOT_9, CHAR_SLOTS_R4C2_X, CHAR_SLOTS_ROW4_Y);
    Move(CHAR_SLOT_10, CHAR_SLOTS_R4C3_X, CHAR_SLOTS_ROW4_Y);
    Move(CHAR_SLOT_11, CHAR_SLOTS_LEFT_X, CHAR_SLOTS_ROW5_Y);
    Move(CHAR_SLOT_12, CHAR_SLOTS_R5C2_X, CHAR_SLOTS_ROW5_Y);
    Move(CHAR_SLOT_13, CHAR_SLOTS_R5C3_X, CHAR_SLOTS_ROW5_Y);
    Move(CHAR_SLOT_14, CHAR_SLOTS_R5C4_X, CHAR_SLOTS_ROW5_Y);
    Move(CHAR_SLOT_15, CHAR_SLOTS_RIGHT_X, CHAR_SLOTS_ROW5_Y);
    Move(CHAR_SLOT_FIDGET_1, SHOP_SLOTS_C1_X, SHOP_SLOTS_R1_Y);
    Move(CHAR_SLOT_FIDGET_2, SHOP_SLOTS_C2_X, SHOP_SLOTS_R1_Y);
    Move(CHAR_SLOT_FIDGET_3, SHOP_SLOTS_C3_X, SHOP_SLOTS_R1_Y);
    Move(CHAR_SLOT_FIDGET_4, SHOP_SLOTS_C1_X, SHOP_SLOTS_R2_Y);
    Move(CHAR_SLOT_FIDGET_5, SHOP_SLOTS_C2_X, SHOP_SLOTS_R2_Y);
    Move(CHAR_SLOT_FIDGET_6, SHOP_SLOTS_C3_X, SHOP_SLOTS_R2_Y);
    Move(CHAR_SLOT_SHAKES_1, SHOP_SLOTS_C1_X, SHOP_SLOTS_R1_Y);
    Move(CHAR_SLOT_SHAKES_2, SHOP_SLOTS_C2_X, SHOP_SLOTS_R1_Y);
    Move(CHAR_SLOT_SHAKES_3, SHOP_SLOTS_C3_X, SHOP_SLOTS_R1_Y);
    Move(CHAR_SLOT_SHAKES_4, SHOP_SLOTS_C1_X, SHOP_SLOTS_R2_Y);
    Move(CHAR_SLOT_SHAKES_5, SHOP_SLOTS_C2_X, SHOP_SLOTS_R2_Y);
    Move(CHAR_SLOT_SHAKES_6, SHOP_SLOTS_C3_X, SHOP_SLOTS_R2_Y);
    tmpItmClass = 0;
    tmpItmPic = 0;
    tmpItmPic = int(SG[((((towerMode) ? (copyCatId + CPC_ITEMS) : SG_INVENTORY_OFFS) + (8 * SG_ITM_SIZE)) + SG_ITM_PIC)]);
    tmpItmClass = 0;
    while (tmpItmPic >= 1000) {
        tmpItmPic = (tmpItmPic - 1000);
        tmpItmClass = (tmpItmClass + 1);
    };
    i = 0;
    while (i < 15) {
        if ((((i < 10)) or (!(towerMode)))){
            if (int(SG[((((towerMode) ? (copyCatId + CPC_ITEMS) : SG_INVENTORY_OFFS) + (i * SG_ITM_SIZE)) + SG_ITM_TYP)]) == 0){
                SG[((((towerMode) ? (copyCatId + CPC_ITEMS) : SG_INVENTORY_OFFS) + (i * SG_ITM_SIZE)) + SG_ITM_PIC)] = 0;
            };
        };
        if ((((i > 9)) and (HideBackPack))){
            SetCnt((CHAR_SLOT_1 + i), C_EMPTY);
            EnablePopup((CHAR_SLOT_1 + i));
        } else {
            if ((((i == 9)) and ((tmpItmClass >= 1)))){
                SetCnt((CHAR_SLOT_1 + i), GetArrowID(((towerMode) ? (copyCatId + CPC_ITEMS) : SG_INVENTORY_OFFS), 8, SG, true, ((tmpItmClass)==1) ? 1 : -1));
                actor[(CHAR_SLOT_1 + i)].mouseEnabled = false;
            } else {
                SetCnt((CHAR_SLOT_1 + i), GetItemID(((towerMode) ? (((i > 9)) ? TSG_LOOT_SACK : (copyCatId + CPC_ITEMS)) : SG_INVENTORY_OFFS), ((((towerMode) and ((i > 9)))) ? (i - 10) : i), SG, ((towerMode) ? (((i > 9)) ? -1 : (-(copyCatSel) - 3)) : -2)));
                ItemPopup((CHAR_SLOT_1 + i), (((towerMode) ? (((i > 9)) ? TSG_LOOT_SACK : (copyCatId + CPC_ITEMS)) : SG_INVENTORY_OFFS) + (((((towerMode) and ((i > 9)))) ? (i - 10) : i) * SG_ITM_SIZE)), SG, HideBackPack, NoPrices, towerMode, witchMode);
                actor[(CHAR_SLOT_1 + i)].mouseEnabled = !((int(SG[((((towerMode) ? (((i > 9)) ? TSG_LOOT_SACK : (copyCatId + CPC_ITEMS)) : SG_INVENTORY_OFFS) + (((((towerMode) and ((i > 9)))) ? (i - 10) : i) * SG_ITM_SIZE)) + SG_ITM_TYP)]) == 0));
            };
        };
        if (HideBackPack){
            dragDropProhibit = true;
        } else {
            dragDropProhibit = false;
        };
        i = (i + 1);
    };
    if (!towerMode){
        var IsEpic:* = function (pic:int):Boolean{
            while (pic > 1000) {
                pic = (pic - 1000);
            };
            return ((pic >= 50));
        };
        hasEpic = false;
        i = 0;
        while (i < 6) {
            if (int(SG[((SG_FIDGET_ITEM1 + (i * SG_ITM_SIZE)) + SG_ITM_TYP)]) == 0){
                SG[((SG_FIDGET_ITEM1 + (i * SG_ITM_SIZE)) + SG_ITM_PIC)] = 0;
            };
            SetCnt((CHAR_SLOT_FIDGET_1 + i), GetItemID(SG_FIDGET_ITEM1, i, SG));
            ItemPopup((CHAR_SLOT_FIDGET_1 + i), (SG_FIDGET_ITEM1 + (i * SG_ITM_SIZE)), SG, HideBackPack);
            if (((IsEpic(SG[((SG_FIDGET_ITEM1 + (i * SG_ITM_SIZE)) + SG_ITM_PIC)])) and (OnStage(SCR_FIDGET_BG)))){
                hasEpic = true;
            };
            if (int(SG[((SG_SHAKES_ITEM1 + (i * SG_ITM_SIZE)) + SG_ITM_TYP)]) == 0){
                SG[((SG_SHAKES_ITEM1 + (i * SG_ITM_SIZE)) + SG_ITM_PIC)] = 0;
            };
            SetCnt((CHAR_SLOT_SHAKES_1 + i), GetItemID(SG_SHAKES_ITEM1, i, SG));
            ItemPopup((CHAR_SLOT_SHAKES_1 + i), (SG_SHAKES_ITEM1 + (i * SG_ITM_SIZE)), SG, HideBackPack);
            if (((IsEpic(SG[((SG_SHAKES_ITEM1 + (i * SG_ITM_SIZE)) + SG_ITM_PIC)])) and (OnStage(SCR_SHAKES_BG)))){
                hasEpic = true;
            };
            i = (i + 1);
        };
        if (!hasEpic){
            BlockReroll = false;
        } else {
            if (RollFrenzy.running){
                ErrorMessage("Yay!");
                Play(SND_JINGLE);
                RollFrenzy.stop();
            };
        };
        if (textDir == "right"){
            actor[LBL_CHAR_RUESTUNG].text = ((SG[SG_ARMOR] + " :") + txt[TXT_RUESTUNG_SUM]);
        } else {
            actor[LBL_CHAR_RUESTUNG].text = ((txt[TXT_RUESTUNG_SUM] + ": ") + SG[SG_ARMOR]);
        };
        DamageReduction = int((Number(SG[SG_ARMOR]) / Number(SG[SG_LEVEL])));
        DamageReductionMax = 50;
        switch (int(SG[SG_CLASS])){
            case 2:
                DamageReductionMax = 10;
                break;
            case 3:
                DamageReductionMax = 25;
                break;
        };
        if (DamageReduction > DamageReductionMax){
            DamageReduction = DamageReductionMax;
        };
        popupLines = new Array();
        popupLines[popupLines.length] = [POPUP_BEGIN_LINE, FontFormat_Attrib, txt[TXT_RUESTUNG_SUM], POPUP_END_LINE];
        if (textDir == "right"){
            popupLines[popupLines.length] = [POPUP_BEGIN_LINE, FontFormat_Attrib, ((((((((("(" + txt[TXT_MAX]) + " -") + String(DamageReductionMax)) + "%) ") + String(DamageReduction)) + "% :") + SG[SG_LEVEL]) + " ") + txt[TXT_RUESTUNG_SUM_HINT]), POPUP_END_LINE];
        } else {
            popupLines[popupLines.length] = [POPUP_BEGIN_LINE, FontFormat_Attrib, (((((((((txt[TXT_RUESTUNG_SUM_HINT] + " ") + SG[SG_LEVEL]) + ": -") + String(DamageReduction)) + "% (") + txt[TXT_MAX]) + " -") + String(DamageReductionMax)) + "%)"), POPUP_END_LINE];
        };
        if (txt[TXT_SHIELD_FORMULA]){
            popupLines[popupLines.length] = [POPUP_BEGIN_LINE, FontFormat_Attrib, txt[TXT_SHIELD_FORMULA], POPUP_END_LINE];
        };
        EnablePopup(LBL_CHAR_RUESTUNG, popupLines);
        EnablePopup(CHAR_RUESTUNG, popupLines);
    };
}

public function ItemPopup(slotID:int, sgIndex:int, SG:Array=undefined, HideBackPack:Boolean=false, NoPrices:Boolean=false, towerMode:Boolean=false, witchMode:Boolean=false){
    var attribLines:Array;
    var shopLines:Array;
    var i:int;
    var ii:int;
    var iii:int;
    var goldRaw:int;
    var gold:int;
    var silber:int;
    var pilze:int;
    var compareIndex:int;
    var compareVal:int;
    var compareFound:Boolean;
    var lossFound:Boolean;
    var hours:int;
    var socket:int;
    var socketPower:int;
    var enchant:int;
    var enchantPower:int;
    var itmColor:Number;
    var itmClass:int;
    var itmPic:int;
    var attribSum:int;
    var itmName:String;
    var itmQuote:String;
    var quoteArray:Array;
    towerMode = OnStage(PREV_COPYCAT);
    attribLines = new Array();
    shopLines = new Array();
    if (!(SG is Array)){
        SG = Savegame;
    };
    if (SG[(sgIndex + SG_ITM_TYP)] > 0){
        ii = 0;
        iii = 0;
        goldRaw = SG[(sgIndex + SG_ITM_GOLD)];
        if (witchMode){
            if (SG[(sgIndex + SG_ITM_TYP)] == witchDesiredType){
                goldRaw = (goldRaw * 2);
            } else {
                goldRaw = 0;
            };
        };
        gold = int((goldRaw / 100));
        silber = int((goldRaw % 100));
        pilze = int((SG[(sgIndex + SG_ITM_MUSH)] % 100));
        compareIndex = 0;
        compareFound = false;
        lossFound = false;
        socket = int(SG[(sgIndex + SG_ITM_EXT_SOCKET)]);
        socketPower = int(SG[(sgIndex + SG_ITM_EXT_SOCKET_POWER)]);
        enchant = int(SG[(sgIndex + SG_ITM_EXT_ENCHANT)]);
        enchantPower = int(SG[(sgIndex + SG_ITM_EXT_ENCHANT_POWER)]);
        if (((!(HideBackPack)) and (!(NoPrices)))){
            shopLines[shopLines.length] = FontFormat_Popup;
            if (gold > 0){
                if (silber > 0){
                    shopLines[shopLines.length] = [POPUP_BEGIN_LINE, String(gold), actor[IF_GOLD], String(silber), actor[IF_SILBER], POPUP_END_LINE];
                } else {
                    shopLines[shopLines.length] = [POPUP_BEGIN_LINE, String(gold), actor[IF_GOLD], POPUP_END_LINE];
                };
            } else {
                if (silber > 0){
                    shopLines[shopLines.length] = [POPUP_BEGIN_LINE, String(silber), actor[IF_SILBER], POPUP_END_LINE];
                };
            };
            if (pilze > 0){
                shopLines[shopLines.length] = [POPUP_BEGIN_LINE, String(pilze), actor[IF_PILZE], POPUP_END_LINE];
            };
            if (witchMode){
                if (SG[(sgIndex + SG_ITM_TYP)] != witchDesiredType){
                    shopLines.push([POPUP_BEGIN_LINE, txt[TXT_WITCH_WRONGTYPE], POPUP_END_LINE]);
                };
            } else {
                if ((((((pilze + gold) + silber) == 0)) and ((SG[(sgIndex + SG_ITM_TYP)] <= 10)))){
                    shopLines.push([POPUP_BEGIN_LINE, txt[TXT_TOILET_ITEM], POPUP_END_LINE]);
                };
            };
        };
        itmColor = 0;
        itmClass = 0;
        itmPic = int(SG[(sgIndex + SG_ITM_PIC)]);
        i = 0;
        while (i < 8) {
            itmColor = (itmColor + Number(SG[((sgIndex + SG_ITM_SCHADEN_MIN) + i)]));
            i++;
        };
        itmColor = (itmColor % 5);
        while (itmPic >= 1000) {
            itmPic = (itmPic - 1000);
            itmClass++;
        };
        if (C_DISPLAY_ITEM_INFO){
            shopLines[shopLines.length] = [POPUP_BEGIN_LINE, actorURL[GetItemID(sgIndex, 0, SG)], POPUP_END_LINE];
            shopLines[shopLines.length] = [POPUP_BEGIN_LINE, "Typ: ", POPUP_TAB, String(SG[(sgIndex + SG_ITM_TYP)]), POPUP_END_LINE];
            shopLines[shopLines.length] = [POPUP_BEGIN_LINE, "Pic: ", POPUP_TAB, String(itmPic), POPUP_END_LINE];
            shopLines[shopLines.length] = [POPUP_BEGIN_LINE, "Color: ", POPUP_TAB, String((itmColor + 1)), POPUP_END_LINE];
            shopLines[shopLines.length] = [POPUP_BEGIN_LINE, "Class: ", POPUP_TAB, String((itmClass + 1)), POPUP_END_LINE];
            shopLines[shopLines.length] = [POPUP_BEGIN_LINE, "Sock: ", POPUP_TAB, String(socket), POPUP_END_LINE];
            shopLines[shopLines.length] = [POPUP_BEGIN_LINE, "SockPwr: ", POPUP_TAB, String(socketPower), POPUP_END_LINE];
            shopLines[shopLines.length] = [POPUP_BEGIN_LINE, "Enchant: ", POPUP_TAB, String(enchant), POPUP_END_LINE];
            shopLines[shopLines.length] = [POPUP_BEGIN_LINE, "EnchantPwr: ", POPUP_TAB, String(enchantPower), POPUP_END_LINE];
        };
        i = 0;
        while (i < 10) {
            suggestionSlot[slotID] = 0;
            if (int(SG[(sgIndex + SG_ITM_TYP)]) == CorrectItemType[i]){
                if ((((slotID >= CHAR_SLOT_11)) and ((slotID <= CHAR_SLOT_SHAKES_6)))){
                    suggestionSlot[slotID] = (i + CHAR_SLOT_1);
                    if (SG[((SG_INVENTORY_OFFS + (SG_ITM_SIZE * i)) + SG_ITM_TYP)] > 0){
                        if (((compareItems) and (!(towerMode)))){
                            compareIndex = (SG_INVENTORY_OFFS + (SG_ITM_SIZE * i));
                        };
                    };
                };
                break;
            };
            i++;
        };
        attribSum = 0;
        i = 0;
        while (i < 3) {
            if ((((int(SG[((sgIndex + SG_ITM_ATTRIBTYP1) + i)]) > 0)) and ((int(SG[((sgIndex + SG_ITM_ATTRIBVAL1) + i)]) > 0)))){
                var _temp1 = ii;
                ii = (ii + 1);
                var _local33 = _temp1;
                attribLines[_local33] = POPUP_BEGIN_LINE;
                if (int(SG[((sgIndex + SG_ITM_ATTRIBTYP1) + i)]) <= 6){
                    var _temp2 = ii;
                    ii = (ii + 1);
                    var _local34 = _temp2;
                    attribLines[_local34] = FontFormat_Popup;
                } else {
                    var _temp3 = ii;
                    ii = (ii + 1);
                    _local34 = _temp3;
                    attribLines[_local34] = FontFormat_Popup;
                };
                var _temp4 = ii;
                ii = (ii + 1);
                _local34 = _temp4;
                attribLines[_local34] = txt[(TXT_ITEM_ATTRIB_CLASSES + int(SG[((sgIndex + SG_ITM_ATTRIBTYP1) + i)]))];
                var _temp5 = ii;
                ii = (ii + 1);
                var _local35 = _temp5;
                attribLines[_local35] = (POPUP_TAB + POPUP_TAB_ADD);
                if (int(SG[((sgIndex + SG_ITM_ATTRIBTYP1) + i)]) == 11){
                    hours = int(SG[((sgIndex + SG_ITM_ATTRIBVAL1) + i)]);
                    var _temp6 = ii;
                    ii = (ii + 1);
                    var _local36 = _temp6;
                    attribLines[_local36] = (((int((hours / 24)))>0) ? (((String(int((hours / 24))) + " ") + txt[(((int((hours / 24)) == 1)) ? TXT_DAY : TXT_DAYS)]) + ((((hours % 24) > 0)) ? ", " : "")) : "" + ((((hours % 24) > 0)) ? ((String((hours % 24)) + " ") + txt[((((hours % 24) == 1)) ? TXT_HOUR : TXT_HOURS)]) : ""));
                } else {
                    if (int(SG[((sgIndex + SG_ITM_ATTRIBTYP1) + i)]) == 12){
                        var _temp7 = ii;
                        ii = (ii + 1);
                        _local36 = _temp7;
                        attribLines[_local36] = POPUP_TAB;
                        var _temp8 = ii;
                        ii = (ii + 1);
                        var _local37 = _temp8;
                        attribLines[_local37] = (("+ " + SG[((sgIndex + SG_ITM_ATTRIBVAL1) + i)]) + "%");
                    } else {
                        if (SG[(sgIndex + SG_ITM_TYP)] == 12){
                            var _temp9 = ii;
                            ii = (ii + 1);
                            _local36 = _temp9;
                            attribLines[_local36] = POPUP_TAB;
                            if (SG[((sgIndex + SG_ITM_ATTRIBVAL1) + i)] <= 25){
                                var _temp10 = ii;
                                ii = (ii + 1);
                                _local37 = _temp10;
                                attribLines[_local37] = (("+ " + SG[((sgIndex + SG_ITM_ATTRIBVAL1) + i)]) + "%");
                            } else {
                                var _temp11 = ii;
                                ii = (ii + 1);
                                _local37 = _temp11;
                                attribLines[_local37] = ("+ " + SG[((sgIndex + SG_ITM_ATTRIBVAL1) + i)]);
                            };
                        } else {
                            var _temp12 = ii;
                            ii = (ii + 1);
                            _local36 = _temp12;
                            attribLines[_local36] = SG[((sgIndex + SG_ITM_ATTRIBVAL1) + i)];
                        };
                    };
                };
                if (compareIndex > 0){
                    compareFound = false;
                    iii = 0;
                    while (iii < 3) {
                        if ((((((int(SG[((compareIndex + SG_ITM_ATTRIBTYP1) + iii)]) == int(SG[((sgIndex + SG_ITM_ATTRIBTYP1) + i)]))) and ((int(SG[((compareIndex + SG_ITM_ATTRIBVAL1) + iii)]) > 0)))) and ((int(SG[((sgIndex + SG_ITM_ATTRIBVAL1) + i)]) > 0)))){
                            compareVal = (int(SG[((sgIndex + SG_ITM_ATTRIBVAL1) + i)]) - int(SG[((compareIndex + SG_ITM_ATTRIBVAL1) + iii)]));
                            if (int(SG[((compareIndex + SG_ITM_ATTRIBTYP1) + iii)]) == 6){
                                compareVal = (compareVal * 5);
                            };
                            attribSum = (attribSum + compareVal);
                            var _temp13 = ii;
                            ii = (ii + 1);
                            _local36 = _temp13;
                            attribLines[_local36] = (((compareVal == 0)) ? FontFormat_Popup : (((compareVal > 0)) ? FontFormat_PopupCompareBetter : FontFormat_PopupCompareWorse));
                            var _temp14 = ii;
                            ii = (ii + 1);
                            _local37 = _temp14;
                            attribLines[_local37] = COMPARE_TAB;
                            var _temp15 = ii;
                            ii = (ii + 1);
                            var _local38 = _temp15;
                            attribLines[_local38] = (((compareVal >= 0)) ? (((compareVal == 0)) ? "+-" : "+") : "-");
                            var _temp16 = ii;
                            ii = (ii + 1);
                            var _local39 = _temp16;
                            attribLines[_local39] = String(Math.abs(compareVal));
                            var _temp17 = ii;
                            ii = (ii + 1);
                            var _local40 = _temp17;
                            attribLines[_local40] = FontFormat_Popup;
                            compareFound = true;
                            break;
                        };
                        iii++;
                    };
                    if (!compareFound){
                        var _temp18 = ii;
                        ii = (ii + 1);
                        _local36 = _temp18;
                        attribLines[_local36] = FontFormat_PopupCompareBetter;
                        var _temp19 = ii;
                        ii = (ii + 1);
                        _local37 = _temp19;
                        attribLines[_local37] = COMPARE_TAB;
                        var _temp20 = ii;
                        ii = (ii + 1);
                        _local38 = _temp20;
                        attribLines[_local38] = "+";
                        var _temp21 = ii;
                        ii = (ii + 1);
                        _local39 = _temp21;
                        attribLines[_local39] = String((SG[((sgIndex + SG_ITM_ATTRIBVAL1) + i)] * (((SG[((sgIndex + SG_ITM_ATTRIBTYP1) + i)] == 6)) ? 5 : 1)));
                        var _temp22 = ii;
                        ii = (ii + 1);
                        _local40 = _temp22;
                        attribLines[_local40] = FontFormat_Popup;
                        attribSum = (attribSum + (SG[((sgIndex + SG_ITM_ATTRIBVAL1) + i)] * (((SG[((sgIndex + SG_ITM_ATTRIBTYP1) + i)] == 6)) ? 5 : 1)));
                    };
                };
                var _temp23 = ii;
                ii = (ii + 1);
                _local36 = _temp23;
                attribLines[_local36] = POPUP_END_LINE;
            };
            if ((((((compareIndex > 0)) and ((int(SG[((compareIndex + SG_ITM_ATTRIBTYP1) + i)]) > 0)))) and ((int(SG[((compareIndex + SG_ITM_ATTRIBVAL1) + i)]) > 0)))){
                lossFound = false;
                iii = 0;
                while (iii < 3) {
                    if ((((((int(SG[((compareIndex + SG_ITM_ATTRIBTYP1) + i)]) == int(SG[((sgIndex + SG_ITM_ATTRIBTYP1) + iii)]))) and ((int(SG[((compareIndex + SG_ITM_ATTRIBVAL1) + i)]) > 0)))) and ((int(SG[((sgIndex + SG_ITM_ATTRIBVAL1) + iii)]) > 0)))){
                        lossFound = true;
                        break;
                    };
                    iii++;
                };
                if (!lossFound){
                    var _temp24 = ii;
                    ii = (ii + 1);
                    _local33 = _temp24;
                    attribLines[_local33] = POPUP_BEGIN_LINE;
                    var _temp25 = ii;
                    ii = (ii + 1);
                    _local34 = _temp25;
                    attribLines[_local34] = txt[(TXT_ITEM_ATTRIB_CLASSES + int(SG[((compareIndex + SG_ITM_ATTRIBTYP1) + i)]))];
                    var _temp26 = ii;
                    ii = (ii + 1);
                    _local35 = _temp26;
                    attribLines[_local35] = (POPUP_TAB + POPUP_TAB_ADD);
                    var _temp27 = ii;
                    ii = (ii + 1);
                    _local36 = _temp27;
                    attribLines[_local36] = "-";
                    var _temp28 = ii;
                    ii = (ii + 1);
                    _local37 = _temp28;
                    attribLines[_local37] = FontFormat_PopupCompareWorse;
                    var _temp29 = ii;
                    ii = (ii + 1);
                    _local38 = _temp29;
                    attribLines[_local38] = COMPARE_TAB;
                    var _temp30 = ii;
                    ii = (ii + 1);
                    _local39 = _temp30;
                    attribLines[_local39] = "-";
                    var _temp31 = ii;
                    ii = (ii + 1);
                    _local40 = _temp31;
                    attribLines[_local40] = String((SG[((compareIndex + SG_ITM_ATTRIBVAL1) + i)] * (((SG[((compareIndex + SG_ITM_ATTRIBTYP1) + i)] == 6)) ? 5 : 1)));
                    var _temp32 = ii;
                    ii = (ii + 1);
                    var _local41 = _temp32;
                    attribLines[_local41] = FontFormat_Popup;
                    var _temp33 = ii;
                    ii = (ii + 1);
                    var _local42 = _temp33;
                    attribLines[_local42] = POPUP_END_LINE;
                    attribSum = (attribSum - (SG[((compareIndex + SG_ITM_ATTRIBVAL1) + i)] * (((SG[((compareIndex + SG_ITM_ATTRIBTYP1) + i)] == 6)) ? 5 : 1)));
                };
            };
            i++;
        };
        itmName = GetItemName(sgIndex, SG);
        itmQuote = "";
        quoteArray = new Array();
        if (itmName.indexOf("|") > 0){
            itmQuote = itmName.split("|")[1];
            itmName = itmName.split("|")[0];
            quoteArray[0] = POPUP_BEGIN_LINE;
            quoteArray[1] = ((SG[(sgIndex + SG_ITM_TYP)])==14) ? FontFormat_ItemEnchantment : FontFormat_EpicItemQuote;
            quoteArray[2] = itmQuote;
            quoteArray[3] = FontFormat_Popup;
            quoteArray[4] = POPUP_END_LINE;
        };
        if (SG[(sgIndex + SG_ITM_TYP)] < 8){
            if ((itmClass + 1) != ((towerMode) ? (copyCatSel + 1) : Savegame[SG_CLASS])){
                quoteArray.push(POPUP_BEGIN_LINE);
                quoteArray.push(FontFormat_Error);
                quoteArray.push(txt[TXT_NECESSARY_CLASS].split("%1").join(txt[((TXT_NECESSARY_CLASS + itmClass) + 1)]));
                quoteArray.push(FontFormat_Popup);
                quoteArray.push(POPUP_END_LINE);
            };
        };
        if (SG[(sgIndex + SG_ITM_EXT_ENCHANT)] > 0){
            if (SG[(sgIndex + SG_ITM_TYP)] == 14){
                itmName = txt[TXT_SCROLL_NAME].split("%1").join(itmName);
            } else {
                quoteArray.push(POPUP_BEGIN_LINE);
                quoteArray.push(FontFormat_ItemEnchantment);
                quoteArray.push(txt[TXT_ENCHANT_HINT]);
                quoteArray.push((POPUP_TAB + POPUP_TAB_ADD));
                quoteArray.push(txt[((TXT_ITMNAME_14 + int(SG[(sgIndex + SG_ITM_EXT_ENCHANT)])) - 1)].split("|")[0]);
                quoteArray.push(FontFormat_Popup);
                quoteArray.push(POPUP_END_LINE);
            };
            quoteArray.push(POPUP_BEGIN_LINE);
            quoteArray.push(FontFormat_ItemEnchantment);
            quoteArray.push(txt[((TXT_ENCHANT_NAMES + int(SG[(sgIndex + SG_ITM_EXT_ENCHANT)])) - 1)]);
            quoteArray.push((POPUP_TAB + POPUP_TAB_ADD));
            quoteArray.push(txt[((TXT_ENCHANT_VALUES + int(SG[(sgIndex + SG_ITM_EXT_ENCHANT)])) - 1)].split("%1").join(String(SG[(sgIndex + SG_ITM_EXT_ENCHANT_POWER)])));
            quoteArray.push(FontFormat_Popup);
            quoteArray.push(POPUP_END_LINE);
        };
        if (int(SG[(sgIndex + SG_ITM_TYP)]) == 1){
            if (compareIndex > 0){
                compareVal = (Math.round(((Number(SG[(sgIndex + SG_ITM_SCHADEN_MIN)]) + Number(SG[(sgIndex + SG_ITM_SCHADEN_MAX)])) / 2)) - Math.round(((Number(SG[(compareIndex + SG_ITM_SCHADEN_MIN)]) + Number(SG[(compareIndex + SG_ITM_SCHADEN_MAX)])) / 2)));
                EnablePopup(slotID, itmName, quoteArray, POPUP_BEGIN_LINE, txt[TXT_SCHADEN], (POPUP_TAB + POPUP_TAB_ADD), ((SG[(sgIndex + SG_ITM_SCHADEN_MIN)] + "-") + SG[(sgIndex + SG_ITM_SCHADEN_MAX)]), (("(~" + String(Math.round(((Number(SG[(sgIndex + SG_ITM_SCHADEN_MIN)]) + Number(SG[(sgIndex + SG_ITM_SCHADEN_MAX)])) / 2)))) + ")"), (((compareVal == 0)) ? FontFormat_Popup : (((compareVal > 0)) ? FontFormat_PopupCompareBetter : FontFormat_PopupCompareWorse)), COMPARE_TAB, ((((compareVal >= 0)) ? (((compareVal == 0)) ? "+- " : "+ ") : "- ") + String(Math.abs(compareVal))), FontFormat_Popup, POPUP_END_LINE, attribLines, shopLines);
            } else {
                EnablePopup(slotID, itmName, quoteArray, POPUP_BEGIN_LINE, txt[TXT_SCHADEN], (POPUP_TAB + POPUP_TAB_ADD), ((SG[(sgIndex + SG_ITM_SCHADEN_MIN)] + "-") + SG[(sgIndex + SG_ITM_SCHADEN_MAX)]), (("(~" + String(Math.round(((Number(SG[(sgIndex + SG_ITM_SCHADEN_MIN)]) + Number(SG[(sgIndex + SG_ITM_SCHADEN_MAX)])) / 2)))) + ")"), POPUP_END_LINE, attribLines, shopLines);
            };
        } else {
            if (int(SG[(sgIndex + SG_ITM_TYP)]) == 2){
                if (compareIndex > 0){
                    compareVal = (int(SG[(sgIndex + SG_ITM_SCHADEN_MIN)]) - int(SG[(compareIndex + SG_ITM_SCHADEN_MIN)]));
                    EnablePopup(slotID, itmName, quoteArray, POPUP_BEGIN_LINE, txt[TXT_BLOCKEN], (POPUP_TAB + POPUP_TAB_ADD), (SG[(sgIndex + SG_ITM_SCHADEN_MIN)] + " %"), (((compareVal == 0)) ? FontFormat_Popup : (((compareVal > 0)) ? FontFormat_PopupCompareBetter : FontFormat_PopupCompareWorse)), COMPARE_TAB, ((((compareVal >= 0)) ? (((compareVal == 0)) ? "+- " : "+ ") : "- ") + String(Math.abs(compareVal))), FontFormat_Popup, POPUP_END_LINE, attribLines, shopLines);
                } else {
                    EnablePopup(slotID, itmName, quoteArray, POPUP_BEGIN_LINE, txt[TXT_BLOCKEN], (POPUP_TAB + POPUP_TAB_ADD), (SG[(sgIndex + SG_ITM_SCHADEN_MIN)] + " %"), POPUP_END_LINE, attribLines, shopLines);
                };
            } else {
                if (int(SG[(sgIndex + SG_ITM_SCHADEN_MIN)]) > 0){
                    if (compareIndex > 0){
                        compareVal = (int(SG[(sgIndex + SG_ITM_SCHADEN_MIN)]) - int(SG[(compareIndex + SG_ITM_SCHADEN_MIN)]));
                        EnablePopup(slotID, itmName, quoteArray, POPUP_BEGIN_LINE, txt[TXT_RUESTUNG], (POPUP_TAB + POPUP_TAB_ADD), SG[(sgIndex + SG_ITM_SCHADEN_MIN)], (((compareVal == 0)) ? FontFormat_Popup : (((compareVal > 0)) ? FontFormat_PopupCompareBetter : FontFormat_PopupCompareWorse)), COMPARE_TAB, ((((compareVal >= 0)) ? (((compareVal == 0)) ? "+- " : "+ ") : "- ") + String(Math.abs(compareVal))), FontFormat_Popup, POPUP_END_LINE, attribLines, shopLines);
                    } else {
                        EnablePopup(slotID, itmName, quoteArray, POPUP_BEGIN_LINE, txt[TXT_RUESTUNG], (POPUP_TAB + POPUP_TAB_ADD), SG[(sgIndex + SG_ITM_SCHADEN_MIN)], POPUP_END_LINE, attribLines, shopLines);
                    };
                } else {
                    EnablePopup(slotID, itmName, quoteArray, attribLines, shopLines);
                };
            };
        };
    } else {
        EnablePopup(slotID);
    };
}

public function getHlIndex(inStr:String):int{
    return (int(DecodeChat(inStr, true)));
}

public function DecodeChat(inStr:String, getHLMode:Boolean=false, getGBMode:Boolean=false):String{
    var namePart:String;
    var timePart:String;
    var crestStr:String;
    var authorStr:String;
    var dateStr:String;
    if (textDir == "right"){
        if (inStr.indexOf("§") != -1){
            namePart = inStr.split("§")[0];
            if (namePart.substr(-1, 1) == ":"){
                namePart = namePart.substr(0, (namePart.length - 1));
            };
            timePart = namePart.substr(0, namePart.indexOf(" "));
            namePart = namePart.substr((namePart.indexOf(" ") + 1));
            inStr = ((((inStr.split("§")[1] + " §:") + namePart) + " ") + timePart);
        };
    };
    inStr = inStr.split("§").join(((getHLMode) ? "§" : ""));
    if (((!((inStr.indexOf("#?") == -1))) and ((inStr.indexOf("##") == -1)))){
        crestStr = inStr.split("#?")[1];
        authorStr = inStr.split("#?")[0];
        dateStr = inStr.substr(0, 5);
        authorStr = authorStr.substr(6);
        authorStr = authorStr.substr(0, (authorStr.length - 3));
        inStr = ((dateStr + " ") + txt[TXT_CREST_SUGGESTION].split("%1").join(authorStr));
        if (!crestSuggestion[inStr]){
            newCrestSuggested = inStr;
        };
        crestSuggestion[inStr] = crestStr;
    };
    inStr = inStr.split("#{").join("/");
    inStr = inStr.split("#}").join(";");
    inStr = inStr.split("##").join("#");
    inStr = inStr.split("%u20AC").join("€");
    if (inStr.substr(0, 1) == "#"){
        if (textDir == "right"){
            if (inStr.substr(0, 4) == "#dg#"){
                inStr = ((((((((txt[TXT_DONATE_GOLD_2] + " ") + String((Number(inStr.split("#")[3]) / 100))) + " ") + txt[TXT_DONATE_GOLD_1]) + " ") + inStr.split("#")[2].split(" ")[1]) + " ") + inStr.split("#")[2].split(" ")[0]);
            } else {
                if (inStr.substr(0, 4) == "#dm#"){
                    inStr = ((((((((txt[TXT_DONATE_MUSH_2] + " ") + inStr.split("#")[3]) + " ") + txt[TXT_DONATE_MUSH_1]) + " ") + inStr.split("#")[2].split(" ")[1]) + " ") + inStr.split("#")[2].split(" ")[0]);
                } else {
                    if (inStr.substr(0, 4) == "#sr#"){
                        if (txt[TXT_SERVER_STARTED]){
                            inStr = txt[TXT_SERVER_STARTED].split("%1").join(TimeStr(int(inStr.split("#")[2])));
                        } else {
                            inStr = "Server restarted at %1".split("%1").join(TimeStr(int(inStr.split("#")[2])));
                        };
                    } else {
                        if (inStr.substr(0, 4) == "#bd#"){
                            if (int(inStr.split("#")[3]) == 0){
                                inStr = txt[(TXT_CATAPULT + 7)];
                            } else {
                                inStr = ((((txt[TXT_BUILDING_1].split("%1").join(txt[((TXT_GILDE_GEBAEUDE_NAME1 + int(inStr.split("#")[3])) - 1)]) + " ") + inStr.split("#")[2].split(" ")[1]) + " ") + inStr.split("#")[2].split(" ")[0]);
                            };
                        } else {
                            if (inStr.substr(0, 4) == "#ra#"){
                                inStr = ((((((((txt[(TXT_RANKMSG_6 + int(inStr.split("#")[3]))] + " ") + inStr.split("#")[4]) + " ") + txt[(TXT_RANKMSG_1 + int(inStr.split("#")[3]))]) + " ") + inStr.split("#")[2].split(" ")[1]) + " ") + inStr.split("#")[2].split(" ")[0]);
                            } else {
                                if (inStr.substr(0, 4) == "#in#"){
                                    inStr = ((((txt[TXT_GUILD_JOINED] + " ") + inStr.split("#")[2].split(" ")[1]) + " ") + inStr.split("#")[2].split(" ")[0]);
                                } else {
                                    if (inStr.substr(0, 4) == "#ou#"){
                                        inStr = ((((txt[TXT_GUILD_QUIT] + " ") + inStr.split("#")[2].split(" ")[1]) + " ") + inStr.split("#")[2].split(" ")[0]);
                                    } else {
                                        if (inStr.substr(0, 4) == "#rv#"){
                                            inStr = txt[TXT_REVOLT_CHAT_MSG].split("%1").join(inStr.split("#")[2]).split("%2").join(inStr.split("#")[3]).split("%3").join(inStr.split("#")[4]);
                                        } else {
                                            if (inStr.substr(0, 4) == "#a+#"){
                                                inStr = txt[TXT_GUILD_ATTACK_SUCCESS].split("%1").join(((inStr.split("#")[2].split(" ")[1] + " ") + inStr.split("#")[2].split(" ")[0])).split("%2").join(inStr.split("#")[3]);
                                                if (getGBMode){
                                                    return ("1");
                                                };
                                            } else {
                                                if (inStr.substr(0, 4) == "#a-#"){
                                                    inStr = txt[TXT_GUILD_ATTACK_FAIL].split("%1").join(((inStr.split("#")[2].split(" ")[1] + " ") + inStr.split("#")[2].split(" ")[0])).split("%2").join(inStr.split("#")[3]);
                                                    if (getGBMode){
                                                        return ("1");
                                                    };
                                                } else {
                                                    if (inStr.substr(0, 4) == "#d+#"){
                                                        inStr = txt[TXT_GUILD_DEFENSE_SUCCESS].split("%1").join(((inStr.split("#")[2].split(" ")[1] + " ") + inStr.split("#")[2].split(" ")[0])).split("%2").join(inStr.split("#")[3]);
                                                        if (getGBMode){
                                                            return ("1");
                                                        };
                                                    } else {
                                                        if (inStr.substr(0, 4) == "#d-#"){
                                                            inStr = txt[TXT_GUILD_DEFENSE_FAIL].split("%1").join(((inStr.split("#")[2].split(" ")[1] + " ") + inStr.split("#")[2].split(" ")[0])).split("%2").join(inStr.split("#")[3]);
                                                            if (getGBMode){
                                                                return ("1");
                                                            };
                                                        } else {
                                                            if (inStr.substr(0, 4) == "#r+#"){
                                                                inStr = txt[TXT_GUILD_RAID_SUCCESS].split("%1").join(((("(50/" + inStr.split("#")[2]) + ") ") + txt[((TXT_DUNGEON_NAMES + int(inStr.split("#")[2])) - 1)]));
                                                                if (getGBMode){
                                                                    return ("1");
                                                                };
                                                            } else {
                                                                if (inStr.substr(0, 4) == "#r-#"){
                                                                    inStr = txt[TXT_GUILD_RAID_FAIL].split("%1").join(((("(50/" + inStr.split("#")[2]) + ") ") + txt[((TXT_DUNGEON_NAMES + int(inStr.split("#")[2])) - 1)]));
                                                                    if (getGBMode){
                                                                        return ("1");
                                                                    };
                                                                } else {
                                                                    if (inStr.substr(0, 4) == "#lu#"){
                                                                        inStr = txt[TXT_GUILD_LEVEL_UP].split("%1").join(inStr.split("#")[2]).split("%2").join(inStr.split("#")[3]);
                                                                    } else {
                                                                        if (inStr.substr(0, 4) == "#du#"){
                                                                            inStr = txt[TXT_GUILD_DUNGEON_COMPLETED].split("%1").join(inStr.split("#")[2]).split("%2").join(txt[(((inStr.split("#")[3] == 100)) ? 9538 : ((TXT_DUNGEON_NAME + (1 * inStr.split("#")[3])) - 1))].split("|")[0]).split("%3").join(inStr.split("#")[4]);
                                                                        } else {
                                                                            if (inStr.substr(0, 4) == "#ep#"){
                                                                                inStr = txt[TXT_GUILD_EPICITEM].split("%1").join(inStr.split("#")[2]).split("%2").join(GetItemName(0, inStr.split("#")[3].split("/")));
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        } else {
            if (inStr.substr(0, 4) == "#dg#"){
                inStr = ((((((inStr.split("#")[2] + " ") + txt[TXT_DONATE_GOLD_1]) + " ") + String((Number(inStr.split("#")[3]) / 100))) + " ") + txt[TXT_DONATE_GOLD_2]);
            } else {
                if (inStr.substr(0, 4) == "#dm#"){
                    inStr = ((((((inStr.split("#")[2] + " ") + txt[TXT_DONATE_MUSH_1]) + " ") + inStr.split("#")[3]) + " ") + txt[TXT_DONATE_MUSH_2]);
                } else {
                    if (inStr.substr(0, 4) == "#sr#"){
                        if (txt[TXT_SERVER_STARTED]){
                            inStr = txt[TXT_SERVER_STARTED].split("%1").join(TimeStr(int(inStr.split("#")[2])));
                        } else {
                            inStr = "Server restarted at %1".split("%1").join(TimeStr(int(inStr.split("#")[2])));
                        };
                    } else {
                        if (inStr.substr(0, 4) == "#bd#"){
                            if (int(inStr.split("#")[3]) == 0){
                                inStr = ((inStr.split("#")[2] + " ") + txt[(TXT_CATAPULT + 7)]);
                            } else {
                                inStr = ((inStr.split("#")[2] + " ") + txt[TXT_BUILDING_1].split("%1").join(txt[((TXT_GILDE_GEBAEUDE_NAME1 + int(inStr.split("#")[3])) - 1)]));
                            };
                        } else {
                            if (inStr.substr(0, 4) == "#ra#"){
                                inStr = ((((((inStr.split("#")[2] + " ") + txt[(TXT_RANKMSG_1 + int(inStr.split("#")[3]))]) + " ") + inStr.split("#")[4]) + " ") + txt[(TXT_RANKMSG_6 + int(inStr.split("#")[3]))]);
                            } else {
                                if (inStr.substr(0, 4) == "#in#"){
                                    inStr = ((inStr.split("#")[2] + " ") + txt[TXT_GUILD_JOINED]);
                                } else {
                                    if (inStr.substr(0, 4) == "#ou#"){
                                        inStr = ((inStr.split("#")[2] + " ") + txt[TXT_GUILD_QUIT]);
                                    } else {
                                        if (inStr.substr(0, 4) == "#rv#"){
                                            inStr = txt[TXT_REVOLT_CHAT_MSG].split("%1").join(inStr.split("#")[2]).split("%2").join(inStr.split("#")[3]).split("%3").join(inStr.split("#")[4]);
                                        } else {
                                            if (inStr.substr(0, 4) == "#a+#"){
                                                inStr = txt[TXT_GUILD_ATTACK_SUCCESS].split("%1").join(inStr.split("#")[2]).split("%2").join(inStr.split("#")[3]);
                                                if (getGBMode){
                                                    return ("1");
                                                };
                                            } else {
                                                if (inStr.substr(0, 4) == "#a-#"){
                                                    inStr = txt[TXT_GUILD_ATTACK_FAIL].split("%1").join(inStr.split("#")[2]).split("%2").join(inStr.split("#")[3]);
                                                    if (getGBMode){
                                                        return ("1");
                                                    };
                                                } else {
                                                    if (inStr.substr(0, 4) == "#d+#"){
                                                        inStr = txt[TXT_GUILD_DEFENSE_SUCCESS].split("%1").join(inStr.split("#")[2]).split("%2").join(inStr.split("#")[3]);
                                                        if (getGBMode){
                                                            return ("1");
                                                        };
                                                    } else {
                                                        if (inStr.substr(0, 4) == "#d-#"){
                                                            inStr = txt[TXT_GUILD_DEFENSE_FAIL].split("%1").join(inStr.split("#")[2]).split("%2").join(inStr.split("#")[3]);
                                                            if (getGBMode){
                                                                return ("1");
                                                            };
                                                        } else {
                                                            if (inStr.substr(0, 4) == "#r+#"){
                                                                inStr = txt[TXT_GUILD_RAID_SUCCESS].split("%1").join((((txt[((TXT_DUNGEON_NAMES + int(inStr.split("#")[2])) - 1)] + " (") + inStr.split("#")[2]) + "/50)"));
                                                                if (getGBMode){
                                                                    return ("1");
                                                                };
                                                            } else {
                                                                if (inStr.substr(0, 4) == "#r-#"){
                                                                    inStr = txt[TXT_GUILD_RAID_FAIL].split("%1").join((((txt[((TXT_DUNGEON_NAMES + int(inStr.split("#")[2])) - 1)] + " (") + inStr.split("#")[2]) + "/50)"));
                                                                    if (getGBMode){
                                                                        return ("1");
                                                                    };
                                                                } else {
                                                                    if (inStr.substr(0, 4) == "#lu#"){
                                                                        inStr = txt[TXT_GUILD_LEVEL_UP].split("%1").join(inStr.split("#")[2]).split("%2").join(inStr.split("#")[3]);
                                                                    } else {
                                                                        if (inStr.substr(0, 4) == "#du#"){
                                                                            inStr = txt[TXT_GUILD_DUNGEON_COMPLETED].split("%1").join(inStr.split("#")[2]).split("%2").join(txt[(((inStr.split("#")[3] == 100)) ? 9538 : ((TXT_DUNGEON_NAME + (1 * inStr.split("#")[3])) - 1))].split("|")[0]).split("%3").join(inStr.split("#")[4]);
                                                                        } else {
                                                                            if (inStr.substr(0, 4) == "#ep#"){
                                                                                inStr = txt[TXT_GUILD_EPICITEM].split("%1").join(inStr.split("#")[2]).split("%2").join(GetItemName(0, inStr.split("#")[3].split("/")));
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
        if (OnStage(LBL_GILDE_TITEL)){
            SendAction(ACT_SCREEN_GILDEN);
        };
        if (getGBMode){
            return ("0");
        };
        if (getHLMode){
            return (String(inStr.length));
        };
    };
    if (getHLMode){
        return (String(inStr.indexOf("§")));
    };
    return (inStr);
}

public function ChatLine(line:String, isError:Boolean=false, hlIndex:int=-1, isWhisper:Boolean=false){
    var i:* = 0;
    var nextLine:* = null;
    var line:* = line;
    var isError:Boolean = isError;
    var hlIndex:int = hlIndex;
    var isWhisper:Boolean = isWhisper;
    nextLine = "";
    var seekSpace:* = false;
    var noSpace:* = false;
    var indent:* = 0;
    if (GildeChatScroll > 0){
        GildeChatScroll++;
    };
    if (GildeChatScroll > 35){
        GildeChatScroll = 35;
    };
    line = SwapWords(line);
    while (line.split("  ").length > 1) {
        line = line.split("  ").join(" ");
    };
    i = 0;
    while (i < 39) {
        var _local6 = actor[(LBL_GILDE_CHAT + i)];
        with (_local6) {
            defaultTextFormat = actor[((LBL_GILDE_CHAT + i) + 1)].defaultTextFormat;
            htmlText = actor[((LBL_GILDE_CHAT + i) + 1)].htmlText;
            y = (GILDE_CHAT_Y + (((i + GildeChatScroll) - 35) * GILDE_CHAT_Y));
            visible = ((((i + GildeChatScroll) >= 35)) and (((i + GildeChatScroll) < 40)));
        };
        i = (i + 1);
    };
    _local6 = actor[(LBL_GILDE_CHAT + 39)];
    with (_local6) {
        defaultTextFormat = ((isError) ? FontFormat_ChatError : FontFormat_Chat);
        if (isWhisper){
            defaultTextFormat = FontFormat_ChatWhisper;
        };
        do  {
            text = line;
            if ((((textWidth > GILDE_TEXT_X)) or (seekSpace))){
                if (!noSpace){
                    seekSpace = true;
                };
                if ((((textWidth <= GILDE_TEXT_X)) and ((line.substr((line.length - 1)) == " ")))){
                    seekSpace = false;
                } else {
                    nextLine = (line.substr((line.length - 1)) + nextLine);
                };
                line = line.substr(0, (line.length - 1));
                if (line == ""){
                    line = nextLine;
                    nextLine = "";
                    noSpace = true;
                    seekSpace = false;
                    text = line;
                };
            };
        } while ((((textWidth > GILDE_TEXT_X)) or (seekSpace)));
        if (hlIndex > -1){
            if (hlIndex > text.length){
                hlIndex = text.length;
            };
            if (isWhisper){
                if (textDir == "right"){
                    setTextFormat(FontFormat_HighlightWhisper, hlIndex, length);
                } else {
                    setTextFormat(FontFormat_HighlightWhisper, 0, hlIndex);
                };
            } else {
                if (textDir == "right"){
                    setTextFormat(FontFormat_Highlight, hlIndex, length);
                } else {
                    setTextFormat(FontFormat_Highlight, 0, hlIndex);
                };
            };
        };
        if (GildeChatScroll == 0){
            y = (GILDE_CHAT_Y + ((39 - 35) * GILDE_CHAT_Y));
            visible = true;
        };
    };
    if (nextLine != ""){
        ChatLine(nextLine, isError, -1, isWhisper);
    };
}

public function PayMethod(DealerMenu:int):int{
    if (DealerMenu > (PayMethods.length - 1)){
        return (0);
    };
    return (PayMethods[DealerMenu]);
}

public function ShowBetResult(won:Boolean){
    var doShowBetResults:* = null;
    var won:* = won;
    doShowBetResults = function (){
        var BallX:* = 0;
        Add(((won) ? HUTMANN_WON : HUTMANN_LOST));
        SetBtnText(HUTMANN_OK, txt[((won) ? TXT_HUTMANN_YEAH : TXT_HUTMANN_DAMN)]);
        Add(HUTMANN_OK);
        var _local2 = actor[LBL_HUTMANN_TEXT];
        with (_local2) {
            text = txt[((won) ? TXT_HUTMANN_WIN : TXT_HUTMANN_LOSE)];
            x = (SCREEN_TITLE_X - (textWidth / 2));
        };
        switch (CupChosen){
            case 0:
                Add(HUTBECHER_1_CLICK);
                Remove(HUTBECHER_1_IDLE);
                if (won){
                    BallX = HUTMANN_KUGEL_X1;
                } else {
                    BallX = ((Math.random())<0.5) ? HUTMANN_KUGEL_X2 : HUTMANN_KUGEL_X3;
                };
                break;
            case 1:
                Add(HUTBECHER_2_CLICK);
                Remove(HUTBECHER_2_IDLE);
                if (won){
                    BallX = HUTMANN_KUGEL_X2;
                } else {
                    BallX = ((Math.random())<0.5) ? HUTMANN_KUGEL_X1 : HUTMANN_KUGEL_X3;
                };
                break;
            case 2:
                Add(HUTBECHER_3_CLICK);
                Remove(HUTBECHER_3_IDLE);
                if (won){
                    BallX = HUTMANN_KUGEL_X3;
                } else {
                    BallX = ((Math.random())<0.5) ? HUTMANN_KUGEL_X1 : HUTMANN_KUGEL_X2;
                };
                break;
        };
        actor[HUTKUGEL].x = BallX;
        if (won){
            Play(SND_JINGLE);
            Add(HUTKUGEL);
            actor[LBL_HUTMANN_GOLDBET].text = String((int(actor[LBL_HUTMANN_GOLDBET].text) * 2));
            actor[LBL_HUTMANN_MUSHBET].text = String((int(actor[LBL_HUTMANN_MUSHBET].text) * 2));
        } else {
            actor[LBL_HUTMANN_GOLDBET].text = "0";
            actor[LBL_HUTMANN_MUSHBET].text = "0";
        };
    };
    Load(((won) ? HUTMANN_WON : HUTMANN_LOST));
    switch (CupChosen){
        case 0:
            Load(HUTBECHER_1_CLICK);
            break;
        case 1:
            Load(HUTBECHER_2_CLICK);
            break;
        case 2:
            Load(HUTBECHER_3_CLICK);
            break;
    };
    if (won){
        Load(HUTKUGEL);
    };
    WhenLoaded(doShowBetResults);
}

public function toiletTankAdjustEvent(evt:TimerEvent=undefined){
    actor[(TOILET + 1)].y = ((190 + 122) - (toiletTankCurrent * 118));
    if (toiletTankCurrent > (toiletTankDest + 0.01)){
        toiletTankCurrent = (toiletTankCurrent - 0.01);
    } else {
        if (toiletTankCurrent < (toiletTankDest - 0.01)){
            toiletTankCurrent = (toiletTankCurrent + 0.01);
        } else {
            toiletTankCurrent = toiletTankDest;
            toiletTankAdjustTimer.stop();
        };
    };
}

public function ShowToilet(isFull:int, toiletLevel:int, toiletExp:Number, toiletMaxExp:Number, itemAdded:int=-1){
    var doShowToilet:* = null;
    var isFull:* = isFull;
    var toiletLevel:* = toiletLevel;
    var toiletExp:* = toiletExp;
    var toiletMaxExp:* = toiletMaxExp;
    var itemAdded:int = itemAdded;
    doShowToilet = function (buildScreen:Boolean=true){
        var i:* = 0;
        var toiletItemAddFrame:* = 0;
        var toiletItemAddTimer:* = null;
        var gatheredItemId:* = 0;
        var itemDestX:* = NaN;
        var itemDestY:* = NaN;
        var toiletItemAddFrameEvent:* = null;
        var buildScreen:Boolean = buildScreen;
        toiletTankDest = (toiletExp / toiletMaxExp);
        toiletTankAdjustTimer.stop();
        if (buildScreen){
            toiletTankCurrent = toiletTankDest;
            Remove(CHAR_RIGHTPANE);
            Add(SCREEN_TOILET);
            Hide(TOILET_OVERLAYS);
            Show(TOILET_CHAIN);
        };
        DisplayInventory(undefined, true);
        EnablePopup(CA_TOILET_TANK, txt[TXT_TOILET_HINT].split("%1").join(String(int((toiletTankDest * 100)))).split("%2").join(String(toiletExp)).split("%3").join(String(toiletMaxExp)));
        if (isFull == 0){
            Hide(TOILET_IDLE);
        } else {
            Show(TOILET_IDLE);
        };
        Hide(TOILET_DROP);
        actor[LBL_TOILET_AURA].text = txt[(TXT_TOILET_HINT + 4)].split("#").join(String.fromCharCode(13)).split("%1").join(String(toiletLevel));
        actor[LBL_TOILET_AURA].x = ((SCR_SHOP_BG_X + 248) - (actor[LBL_TOILET_AURA].textWidth / 2));
        toiletTankAdjustEvent();
        if (toiletTankDest != toiletTankCurrent){
            toiletTankAdjustTimer.start();
        };
        if (itemAdded >= 0){
            toiletItemAddFrameEvent = function (evt:TimerEvent){
                if ((((toiletItemAddFrame >= 50)) or (!(OnStage(TOILET))))){
                    actor[gatheredItemId].x = itemDestX;
                    actor[gatheredItemId].y = itemDestY;
                    actor[gatheredItemId].alpha = 1;
                    toiletItemAddTimer.stop();
                    toiletItemAddTimer.removeEventListener(TimerEvent.TIMER, toiletItemAddFrameEvent);
                } else {
                    if (toiletItemAddFrame >= 35){
                        actor[gatheredItemId].alpha = 1;
                        actor[gatheredItemId].x = ((actor[gatheredItemId].x + itemDestX) / 2);
                        actor[gatheredItemId].y = ((actor[gatheredItemId].y + itemDestY) / 2);
                    } else {
                        actor[gatheredItemId].alpha = (toiletItemAddFrame / 35);
                        actor[gatheredItemId].y = (actor[gatheredItemId].y - 5);
                    };
                };
                i = 0;
                while (i < 7) {
                    Hide((TOILET_FLUSH + i));
                    i++;
                };
                Show((TOILET_FLUSH + int(((toiletItemAddFrame / 50) * 7))));
                toiletItemAddFrame++;
            };
            toiletItemAddFrame = 0;
            toiletItemAddTimer = new Timer(25);
            Play(SND_TOILET_FLUSH);
            toiletItemAddTimer.addEventListener(TimerEvent.TIMER, toiletItemAddFrameEvent);
            toiletItemAddTimer.start();
            gatheredItemId = (CHAR_SLOT_11 + itemAdded);
            switch (itemAdded){
                case 0:
                    itemDestX = CHAR_SLOTS_LEFT_X;
                    itemDestY = CHAR_SLOTS_ROW5_Y;
                    break;
                case 1:
                    itemDestX = CHAR_SLOTS_R5C2_X;
                    itemDestY = CHAR_SLOTS_ROW5_Y;
                    break;
                case 2:
                    itemDestX = CHAR_SLOTS_R5C3_X;
                    itemDestY = CHAR_SLOTS_ROW5_Y;
                    break;
                case 3:
                    itemDestX = CHAR_SLOTS_R5C4_X;
                    itemDestY = CHAR_SLOTS_ROW5_Y;
                    break;
                case 4:
                    itemDestX = CHAR_SLOTS_RIGHT_X;
                    itemDestY = CHAR_SLOTS_ROW5_Y;
                    break;
            };
            actor[gatheredItemId].alpha = 0;
            actor[gatheredItemId].x = (SCR_SHOP_BG_X + 205);
            actor[gatheredItemId].y = 590;
        };
    };
    if (OnStage(TOILET)){
        doShowToilet(false);
        return;
    };
    Load(SCREEN_TOILET);
    ShowCharacterScreen();
    WhenLoaded(doShowToilet);
}

public function ShowWitch(witchData:Array, chaldronBubble:Boolean=false, enchantCost:int=0){
    var doShowWitch:* = null;
    var witchData:* = witchData;
    var chaldronBubble:Boolean = chaldronBubble;
    var enchantCost:int = enchantCost;
    doShowWitch = function (buildScreen:Boolean=true){
        var i:int;
        if (buildScreen){
            Remove(CHAR_RIGHTPANE);
            Add(SCREEN_WITCH);
        };
        if (!lightMode){
            witchAniTimer.start();
        };
        witchDesiredType = witchData[3];
        DisplayInventory(undefined, false, false, 0, true);
        i = 0;
        while (i < int(witchData[7])) {
            Load(GetItemID(14, int(witchData[(9 + (3 * i))]), undefined, 0));
            SetCnt((WITCH_SCROLL + i), GetItemID(14, int(witchData[(9 + (3 * i))]), undefined, 0));
            suggestionSlot[(WITCH_SCROLL + i)] = (CHAR_SLOT_1 + CorrectItemType.indexOf(Math.floor((int(witchData[(9 + (3 * i))]) / 10))));
            trace(i, Savegame[((SG_INVENTORY_OFFS + (CorrectItemType.indexOf(Math.floor((int(witchData[(9 + (3 * i))]) / 10))) * SG_ITM_SIZE)) + SG_ITM_EXT_ENCHANT)]);
            if (Savegame[((SG_INVENTORY_OFFS + (CorrectItemType.indexOf(Math.floor((int(witchData[(9 + (3 * i))]) / 10))) * SG_ITM_SIZE)) + SG_ITM_EXT_ENCHANT)] != 0){
                actor[(WITCH_SCROLL + i)].alpha = 0.5;
                EnablePopup((WITCH_SCROLL + i), POPUP_BEGIN_LINE, txt[((TXT_ITMNAME_14 + int(witchData[(9 + (3 * i))])) - 1)].split("|")[0], POPUP_END_LINE, POPUP_BEGIN_LINE, txt[((TXT_ITMNAME_14 + int(witchData[(9 + (3 * i))])) - 1)].split("|")[1], POPUP_END_LINE, POPUP_BEGIN_LINE, txt[TXT_SCROLL_DATE].split("%1").join(TimeStr(Number(witchData[(10 + (3 * i))]), true)), POPUP_END_LINE, POPUP_BEGIN_LINE, txt[TXT_SCROLL_BOUGHT], POPUP_END_LINE);
            } else {
                if (enchantCost){
                    actor[(WITCH_SCROLL + i)].alpha = 1;
                    EnablePopup((WITCH_SCROLL + i), POPUP_BEGIN_LINE, txt[((TXT_ITMNAME_14 + int(witchData[(9 + (3 * i))])) - 1)].split("|")[0], POPUP_END_LINE, POPUP_BEGIN_LINE, txt[((TXT_ITMNAME_14 + int(witchData[(9 + (3 * i))])) - 1)].split("|")[1], POPUP_END_LINE, POPUP_BEGIN_LINE, txt[TXT_SCROLL_DATE].split("%1").join(TimeStr(Number(witchData[(10 + (3 * i))]), true)), POPUP_END_LINE, POPUP_BEGIN_LINE, txt[TXT_SCROLL_BUYNOW], POPUP_END_LINE, POPUP_BEGIN_LINE, actor[IF_GOLD], String(Math.floor((enchantCost / 100))), POPUP_END_LINE);
                } else {
                    actor[(WITCH_SCROLL + i)].alpha = 1;
                    EnablePopup((WITCH_SCROLL + i), POPUP_BEGIN_LINE, txt[((TXT_ITMNAME_14 + int(witchData[(9 + (3 * i))])) - 1)].split("|")[0], POPUP_END_LINE, POPUP_BEGIN_LINE, txt[((TXT_ITMNAME_14 + int(witchData[(9 + (3 * i))])) - 1)].split("|")[1], POPUP_END_LINE, POPUP_BEGIN_LINE, txt[TXT_SCROLL_DATE].split("%1").join(TimeStr(Number(witchData[(10 + (3 * i))]), true)), POPUP_END_LINE, POPUP_BEGIN_LINE, txt[TXT_SCROLL_BUYHINT], POPUP_END_LINE);
                };
            };
            actor[(WITCH_SCROLL + i)].scaleX = 0.8;
            actor[(WITCH_SCROLL + i)].scaleY = 0.8;
            Add((WITCH_SCROLL + i));
            i++;
        };
        if (witchData[2] == -1){
            EnablePopup(CA_WITCH, txt[(TXT_WITCH_HINT + 6)]);
            EnablePopup(CA_CHALDRON, txt[(TXT_WITCH_HINT + 7)]);
        } else {
            if (witchData[5] == 0){
                EnablePopup(CA_WITCH, txt[TXT_WITCH_HINT].split("%1").join(txt[((TXT_WITCH_HINT + 12) + int(witchData[3]))]));
                EnablePopup(CA_CHALDRON, POPUP_BEGIN_LINE, txt[(TXT_WITCH_HINT + 2)], (POPUP_TAB + 100), txt[((TXT_WITCH_HINT + 12) + int(witchData[3]))], POPUP_END_LINE, POPUP_BEGIN_LINE, txt[(TXT_WITCH_HINT + 3)], (POPUP_TAB + 100), txt[(TXT_WITCH_HINT + 4)].split("%1").join(String((Math.round(((witchData[1] / witchData[2]) * 100000)) / 1000))).split("%2").join(String(witchData[2])), POPUP_END_LINE);
            } else {
                EnablePopup(CA_WITCH, txt[(TXT_WITCH_HINT + 1)]);
                EnablePopup(CA_CHALDRON, txt[(TXT_WITCH_HINT + 5)]);
            };
        };
    };
    if (chaldronBubble){
        Play(SND_TOILET_DROP);
    };
    if (OnStage(WITCH)){
        doShowWitch(false);
        return;
    };
    Load(SCREEN_WITCH);
    ShowCharacterScreen(undefined, true);
    WhenLoaded(doShowWitch);
}

public function NextFight(evt:TimerEvent){
    var guildFightExp:int;
    var guildFightHonor:int;
    var par:Array;
    var thisRoundFighterName:String;
    var GuildBattleData:Array;
    var tmpStr:*;
    guildFightExp = 0;
    guildFightHonor = 0;
    if (fights.length < 2){
        fights = new Array();
        return;
    };
    thisRoundFighterName = "";
    var nextRoundFighterName:String = "";
    var thisRoundOppName:String = "";
    if (skipGuildFights > 0){
        while (fights.length > 3) {
            if (thisRoundFighterName != ""){
                lastRoundFighterName = thisRoundFighterName;
            };
            if (fights[0].split(";")[2].split("/")[5] > 0){
                thisRoundFighterName = fights[0].split(";")[2].split("/")[0];
            } else {
                thisRoundFighterName = "?";
            };
            thisRoundOppName = fights[0].split(";")[2].split("/")[15];
            if (thisRoundFighterName.toLowerCase() == actor[INP_NAME].getChildAt(1).text.toLowerCase()){
                if (skipGuildFights == 1){
                    skipGuildFights = -1;
                    break;
                };
            };
            if (fights[2]){
                nextRoundFighterName = fights[2].split(";")[2].split("/")[0];
                if (lastRoundFighterName == thisRoundFighterName){
                    if (winners[("name_" + thisRoundFighterName)]){
                        var _local10 = winners;
                        var _local11 = ("name_" + thisRoundFighterName);
                        var _local12 = (_local10[_local11] + 1);
                        _local10[_local11] = _local12;
                    } else {
                        winners[("name_" + thisRoundFighterName)] = 1;
                    };
                };
            };
            fights.shift();
            fights.shift();
        };
    };
    thisRoundFighterName = fights[0].split(";")[2].split("/")[0];
    if (thisRoundFighterName.toLowerCase() == actor[INP_NAME].getChildAt(1).text.toLowerCase()){
        if (skipGuildFights == 1){
            skipGuildFights = -1;
        };
    };
    par = fights.shift().split(";");
    GuildBattleData = fights.shift().split("/");
    if (fights.length == 1){
        tmpStr = fights.pop();
        guildFightExp = tmpStr.split(";")[1];
        guildFightHonor = tmpStr.split(";")[2];
    };
    PostFightMode = false;
    fightNumber = ((guildFightCount - int(((fights.length + 1) / 2))) + (((guildFightCount % 2))==0) ? 1 : 0);
    if (fightNumber > guildFightCount){
        fightNumber = 1;
    };
    ShowFightScreen(par[0].split("/"), par[1].split("/"), (par[6] == "1"), par[2].split("/"), (par[5] == "2"), ((par[3] + "/") + par[4]).split("/"), int(par[7]), int(par[8]), (par[5] == "3"), false, int(par[9]), GuildBattleData, (fights.length <= 1), guildFightExp, guildFightHonor, par[10], par[11], par[12]);
}

public function guildFightTimerFn(evt:TimerEvent){
    if (guildAttackTime != 0){
        if (!WaitingFor(guildAttackTime)){
            if (OnStage(LBL_GILDE_CHAT_CAPTION)){
                SendAction(ACT_SCREEN_GILDEN);
            } else {
                PulseGilde = true;
            };
            guildAttackTime = 0;
        };
    };
    if (guildDefenceTime != 0){
        if (!WaitingFor(guildDefenceTime)){
            if (OnStage(LBL_GILDE_CHAT_CAPTION)){
                SendAction(ACT_SCREEN_GILDEN);
            } else {
                PulseGilde = true;
            };
            guildDefenceTime = 0;
        };
    };
}


public function ExpandItemStructure(arr:Array, offset:int){
    var typeOriginal:Number;
    var picOriginal:Number;
    var mushOriginal:Number;
    var enchantment:int;
    var socket:int;
    var enchantmentPower:int;
    var socketPower:int;
    typeOriginal = arr[(offset + SG_ITM_TYP)];
    picOriginal = arr[(offset + SG_ITM_PIC)];
    mushOriginal = arr[(offset + SG_ITM_MUSH)];
    enchantment = int((typeOriginal / Math.pow(2, 24)));
    socket = (typeOriginal - (enchantment * Math.pow(2, 24)));
    socket = (socket / Math.pow(2, 16));
    typeOriginal = ((typeOriginal - (enchantment * Math.pow(2, 24))) - (socket * Math.pow(2, 16)));
    enchantmentPower = int((picOriginal / Math.pow(2, 16)));
    picOriginal = (picOriginal - (enchantmentPower * Math.pow(2, 16)));
    socketPower = int((mushOriginal / Math.pow(2, 16)));
    mushOriginal = (mushOriginal - (socketPower * Math.pow(2, 16)));
    arr[(offset + SG_ITM_TYP)] = typeOriginal;
    arr[(offset + SG_ITM_PIC)] = picOriginal;
    arr[(offset + SG_ITM_MUSH)] = mushOriginal;
    arr[(offset + SG_ITM_EXT_SOCKET)] = socket;
    arr[(offset + SG_ITM_EXT_ENCHANT)] = enchantment;
    arr[(offset + SG_ITM_EXT_ENCHANT_POWER)] = enchantmentPower;
    arr[(offset + SG_ITM_EXT_SOCKET_POWER)] = socketPower;
}

public function WaitingFor(targetTime:Number):Boolean{
    var tmpTime:Date;
    tmpTime = new Date();
    tmpTime.setTime(((targetTime * 1000) - ((1000 * 60) * 60)));
    return ((GameTime.getTime() < tmpTime.getTime()));
}

public function WaitingTime(targetTime:Number):String{
    var tmpTime:* = null;
    var timeDiff:* = null;
    var targetTime:* = targetTime;
    tmpTime = new Date();
    timeDiff = new Date();
    var diffDays:* = 0;
    tmpTime.setTime(((targetTime * 1000) - ((1000 * 60) * 60)));
    timeDiff.setTime((tmpTime.getTime() - GameTime.getTime()));
    var _local3 = timeDiff;
    diffDays = ((((timeDiff.getTime() / 1000) / 60) / 60) / 24);
    return ((((diffDays > 0)) ? ((String((diffDays + 1)) + " ") + txt[(((diffDays == 0)) ? TXT_TAG : TXT_TAGE)]) : ((((((getUTCHours())>0) ? (String((getUTCHours() - 0)) + ":") : "" + ((getUTCMinutes())<10) ? "0" : "") + String(getUTCMinutes())) + ((getUTCSeconds())<10) ? ":0" : ":") + String(getUTCSeconds()))));
}

public function WaitingProgress(startTime:Number, targetTime:Number):Number{
    var tmpTime:Date;
    var tmpTime2:Date;
    tmpTime = new Date();
    tmpTime2 = new Date();
    tmpTime.setTime(((targetTime * 1000) - ((1000 * 60) * 60)));
    tmpTime2.setTime(((startTime * 1000) - ((1000 * 60) * 60)));
    return (((GameTime.getTime() - tmpTime2.getTime()) / (tmpTime.getTime() - tmpTime2.getTime())));
}




public function ShowLoginScreen(evt:Event=undefined, noBC:Boolean=false, noCookie:Boolean=false):void{
    var playername:String;
    if (((((((((!(so.data.HasAccount)) and (!((evt is MouseEvent))))) and (!(noBC)))) and (!(buffedMode)))) and (!(ssoMode)))){
        ShowBuildCharacterScreen();
        return;
    };
    RemoveAll();
    actor[INP_LOGIN_PASSWORD].getChildAt(1).visible = true;
    actor[LBL_WINDOW_TITLE].text = txt[TXT_WELCOME];
    actor[LBL_WINDOW_TITLE].x = ((IF_WIN_X + IF_WIN_WELCOME_X) - int((actor[LBL_WINDOW_TITLE].textWidth / 2)));
    actor[INP_NAME].addEventListener(KeyboardEvent.KEY_DOWN, RequestLogin);
    actor[INP_LOGIN_PASSWORD].addEventListener(KeyboardEvent.KEY_DOWN, RequestLogin);
    if (!noCookie){
        if (so.data.userName){
            actor[INP_NAME].getChildAt(1).text = String(so.data.userName);
        };
        if (so.data.password){
            actor[INP_LOGIN_PASSWORD].getChildAt(1).text = String(so.data.password);
        };
    };
    Add(WINDOW_LOGIN);
    LogonRTL();
    if (buffedMode){
        actor[LBL_GOTO_SIGNUP].htmlText = buffedLinkText;
        actor[GOTO_SIGNUP].x = ((IF_WIN_X + IF_WIN_WELCOME_X) - int((actor[LBL_GOTO_SIGNUP].textWidth / 2)));
    };
    if (ssoMode){
        actor[INP_NAME].getChildAt(1).type = TextFieldType.DYNAMIC;
        actor[INP_LOGIN_PASSWORD].getChildAt(1).type = TextFieldType.DYNAMIC;
        playername = ExternalInterface.call("sso_get_uid");
        actor[INP_NAME].getChildAt(1).text = playername;
        actor[INP_LOGIN_PASSWORD].getChildAt(1).text = mp_api_user_token;
    };
}

public function LogonRTL(){
    if (textDir == "right"){
        actor[LBL_NAME].x = (((IF_WIN_X + IF_GOTO_LOGIN_X) - 15) - actor[LBL_NAME].textWidth);
        actor[LBL_LOGIN_PASSWORD].x = (((IF_WIN_X + IF_GOTO_LOGIN_X) - 15) - actor[LBL_LOGIN_PASSWORD].textWidth);
        actor[LBL_EMAIL].x = (((IF_WIN_X + IF_GOTO_LOGIN_X) - 15) - actor[LBL_EMAIL].textWidth);
        actor[LBL_PASSWORD].x = (((IF_WIN_X + IF_GOTO_LOGIN_X) - 15) - actor[LBL_PASSWORD].textWidth);
        actor[INP_NAME].x = (IF_WIN_X + IF_WIN_INPUTS_X);
        actor[INP_LOGIN_PASSWORD].x = (IF_WIN_X + IF_WIN_INPUTS_X);
        actor[INP_EMAIL].x = (IF_WIN_X + IF_WIN_INPUTS_X);
        actor[INP_PASSWORD].x = (IF_WIN_X + IF_WIN_INPUTS_X);
    };
}

public function ShowSignupScreen(evt:Event=undefined):void{
    var i:* = 0;
    var j:* = 0;
    var jumpTimer:* = null;
    var playername:* = null;
    var email:* = null;
    var DoJump:* = null;
    var evt:* = evt;
    jumpTimer = new Timer(200, 20);
    if (KlasseGewählt){
        RemoveAll();
        actor[INP_PASSWORD].getChildAt(1).visible = true;
        actor[LBL_WINDOW_TITLE].text = txt[TXT_TITLE_SIGNUP];
        actor[LBL_WINDOW_TITLE].x = ((IF_WIN_X + IF_WIN_WELCOME_X) - int((actor[LBL_WINDOW_TITLE].textWidth / 2)));
        actor[INP_NAME].addEventListener(KeyboardEvent.KEY_UP, RequestSignup);
        actor[INP_PASSWORD].addEventListener(KeyboardEvent.KEY_DOWN, RequestSignup);
        actor[INP_EMAIL].addEventListener(KeyboardEvent.KEY_DOWN, RequestSignup);
        if (buffedReq){
            actor[INP_NAME].getChildAt(1).text = buffed_name;
            actor[INP_EMAIL].getChildAt(1).text = buffed_email;
        };
        if (ssoMode){
            actor[INP_EMAIL].getChildAt(1).type = TextFieldType.DYNAMIC;
            actor[INP_PASSWORD].getChildAt(1).type = TextFieldType.DYNAMIC;
            playername = ExternalInterface.call("sso_get_uid");
            actor[INP_NAME].getChildAt(1).text = playername;
            email = ExternalInterface.call("sso_get_email");
            actor[INP_EMAIL].getChildAt(1).text = email;
            actor[INP_PASSWORD].getChildAt(1).text = mp_api_user_token;
        };
        LogonRTL();
        Hide(PASSWORD_SMILEY_SAD, PASSWORD_SMILEY_NEUTRAL, PASSWORD_SMILEY_HAPPY);
        Add(WINDOW_SIGNUP);
        if (param_bullshit_text != ""){
            Add(FUCK);
        };
    } else {
        ErrorMessage(txt[TXT_ERROR_SELECTCLASS]);
        if (!SignupJumpRunning){
            DoJump = function (evt:TimerEvent){
                if (j <= 2){
                    i = 0;
                    while (i < 2) {
                        AnimateAch(((KASTE_1_IDLE + i) + (j * 2)), actor[((KASTE_1_IDLE + i) + (j * 2))].y);
                        i++;
                    };
                };
                j++;
                if (j > 10){
                    jumpTimer.stop();
                    jumpTimer.removeEventListener(TimerEvent.TIMER, DoJump);
                    SignupJumpRunning = false;
                };
            };
            SignupJumpRunning = true;
            jumpTimer.addEventListener(TimerEvent.TIMER, DoJump);
            j = 0;
            jumpTimer.start();
        };
    };
}

public function ModifyCharacter(evt:Event):void{
    var actorID:* = 0;
    var evt:* = evt;
    var RemoveColorOffset:* = function (val:int, type:int):int{
        if ((getCharImageBound(CharVolk, CharMann, 11) & type)){
            while (val >= 100) {
                val = (val - 100);
            };
        };
        return (val);
    };
    var AddColorOffset:* = function (val:int, type:int):int{
        if ((getCharImageBound(CharVolk, CharMann, 11) & type)){
            val = (val + (100 * CharColor));
        };
        return (val);
    };
    actorID = GetActorID(evt.target);
    CharHair = RemoveColorOffset(CharHair, C_HAIR);
    CharBrows = RemoveColorOffset(CharBrows, C_BROWS);
    CharBeard = RemoveColorOffset(CharBeard, C_BEARD);
    CharSpecial2 = RemoveColorOffset(CharSpecial2, C_SPECIAL2);
    switch (actorID){
        case MOUTH_MINUS:
            CharMouth--;
            if (CharMouth < 1){
                CharMouth = getCharImageBound(CharVolk, CharMann, 1);
            };
            break;
        case MOUTH_PLUS:
            CharMouth++;
            if (CharMouth > getCharImageBound(CharVolk, CharMann, 1)){
                CharMouth = 1;
            };
            break;
        case HAIR_MINUS:
            CharHair--;
            if (CharHair < 1){
                CharHair = getCharImageBound(CharVolk, CharMann, 7);
            };
            break;
        case HAIR_PLUS:
            CharHair++;
            if (CharHair > getCharImageBound(CharVolk, CharMann, 7)){
                CharHair = 1;
            };
            break;
        case BROWS_MINUS:
            CharBrows--;
            if (CharBrows < 1){
                CharBrows = getCharImageBound(CharVolk, CharMann, 5);
            };
            break;
        case BROWS_PLUS:
            CharBrows++;
            if (CharBrows > getCharImageBound(CharVolk, CharMann, 5)){
                CharBrows = 1;
            };
            break;
        case EYES_MINUS:
            CharEyes--;
            if (CharEyes < 1){
                CharEyes = getCharImageBound(CharVolk, CharMann, 4);
            };
            break;
        case EYES_PLUS:
            CharEyes++;
            if (CharEyes > getCharImageBound(CharVolk, CharMann, 4)){
                CharEyes = 1;
            };
            break;
        case BEARD_MINUS:
            CharBeard--;
            if (CharBeard < 1){
                CharBeard = getCharImageBound(CharVolk, CharMann, 2);
            };
            break;
        case BEARD_PLUS:
            CharBeard++;
            if (CharBeard > getCharImageBound(CharVolk, CharMann, 2)){
                CharBeard = 1;
            };
            break;
        case NOSE_MINUS:
            CharNose--;
            if (CharNose < 1){
                CharNose = getCharImageBound(CharVolk, CharMann, 3);
            };
            break;
        case NOSE_PLUS:
            CharNose++;
            if (CharNose > getCharImageBound(CharVolk, CharMann, 3)){
                CharNose = 1;
            };
            break;
        case EARS_MINUS:
            CharEars--;
            if (CharEars < 1){
                CharEars = getCharImageBound(CharVolk, CharMann, 6);
            };
            break;
        case EARS_PLUS:
            CharEars++;
            if (CharEars > getCharImageBound(CharVolk, CharMann, 6)){
                CharEars = 1;
            };
            break;
        case SPECIAL_MINUS:
            CharSpecial--;
            if (CharSpecial < 1){
                CharSpecial = getCharImageBound(CharVolk, CharMann, 8);
            };
            break;
        case SPECIAL_PLUS:
            CharSpecial++;
            if (CharSpecial > getCharImageBound(CharVolk, CharMann, 8)){
                CharSpecial = 1;
            };
            break;
        case SPECIAL2_MINUS:
            CharSpecial2--;
            if (CharSpecial2 < 1){
                CharSpecial2 = getCharImageBound(CharVolk, CharMann, 9);
            };
            break;
        case SPECIAL2_PLUS:
            CharSpecial2++;
            if (CharSpecial2 > getCharImageBound(CharVolk, CharMann, 9)){
                CharSpecial2 = 1;
            };
            break;
        case COLOR_PLUS:
            CharColor++;
            if (CharColor > getCharImageBound(CharVolk, CharMann, 10)){
                CharColor = 1;
            };
            break;
        case COLOR_MINUS:
            CharColor--;
            if (CharColor < 1){
                CharColor = getCharImageBound(CharVolk, CharMann, 10);
            };
            break;
    };
    CharHair = AddColorOffset(CharHair, C_HAIR);
    CharBrows = AddColorOffset(CharBrows, C_BROWS);
    CharBeard = AddColorOffset(CharBeard, C_BEARD);
    CharSpecial2 = AddColorOffset(CharSpecial2, C_SPECIAL2);
    LoadCharacterImage();
}

public function LoadCharacterImage(actorID:int=0, loadOnly:Boolean=false, isVolk:int=0, isMann:Boolean=false, isKaste:int=0, isMouth:int=0, isBeard:int=0, isNose:int=0, isEyes:int=0, isBrows:int=0, isEars:int=0, isHair:int=0, isSpecial:int=0, isSpecial2:int=0):void{
    var charPrefix:* = null;
    var i:* = 0;
    var actorOffset:* = 0;
    var actorID:int = actorID;
    var loadOnly:Boolean = loadOnly;
    var isVolk:int = isVolk;
    var isMann:Boolean = isMann;
    var isKaste:int = isKaste;
    var isMouth:int = isMouth;
    var isBeard:int = isBeard;
    var isNose:int = isNose;
    var isEyes:int = isEyes;
    var isBrows:int = isBrows;
    var isEars:int = isEars;
    var isHair:int = isHair;
    var isSpecial:int = isSpecial;
    var isSpecial2:int = isSpecial2;
    var LoadCharacterItemImage:* = function (localActorID:int, parURL:String, itemIndex:int):void{
        var newLoad:Boolean;
        var url:String;
        url = (img_url[img_url_index] + parURL);
        if ((((itemIndex > 0)) and ((getCharImageBound(isVolk, isMann, itemIndex) == 0)))){
            url = (img_url[img_url_index] + "res/gfx/empty.png");
        };
        newLoad = !((actorURL[localActorID] == url));
        actorURL[localActorID] = url;
        if (newLoad){
            actorLoaded[localActorID] = 0;
            Load(localActorID);
        };
    };
    charPrefix = getCharPrefix(false, isVolk, isMann, isKaste);
    if (actorID == C_EMPTY){
        if (OnStage(SCR_BUILDCHAR_BACKGROUND)){
            var _local16 = actor[LBL_CREATE_RACE];
            with (_local16) {
                text = txt[((TXT_RACENAME + CharVolk) - 1)];
                if (textDir == "right"){
                    x = ((actor[LBL_CREATE_RACE_DESC].x + actor[LBL_CREATE_RACE_DESC].width) - textWidth);
                };
            };
            _local16 = actor[LBL_CREATE_RACE_DESC];
            with (_local16) {
                text = txt[((TXT_RACEDESC + CharVolk) - 1)];
                y = ((actor[LBL_CREATE_RACE].y + actor[LBL_CREATE_RACE].textHeight) + BUILDCHAR_LINES_Y);
            };
            Arabize(LBL_CREATE_RACE_DESC);
            _local16 = actor[LBL_CREATE_CLASS];
            with (_local16) {
                text = txt[((KlasseGewählt) ? ((TXT_CLASSNAME + CharKaste) - 1) : TXT_NOCLASS)];
                y = ((actor[LBL_CREATE_RACE_DESC].y + actor[LBL_CREATE_RACE_DESC].textHeight) + BUILDCHAR_LINES_Y);
                if (textDir == "right"){
                    x = ((actor[LBL_CREATE_RACE_DESC].x + actor[LBL_CREATE_RACE_DESC].width) - textWidth);
                };
            };
            _local16 = actor[LBL_CREATE_CLASS_DESC];
            with (_local16) {
                text = txt[((KlasseGewählt) ? ((TXT_CLASSDESC + CharKaste) - 1) : TXT_NOCLASS_DESC)];
                y = ((actor[LBL_CREATE_CLASS].y + actor[LBL_CREATE_CLASS].textHeight) + BUILDCHAR_LINES_Y);
            };
            Arabize(LBL_CREATE_CLASS_DESC);
        };
        LoadCharacterImage(CHARBACKGROUND, loadOnly, CharVolk, CharMann, CharKaste, CharMouth, CharBeard, CharNose, CharEyes, CharBrows, CharEars, CharHair, CharSpecial, CharSpecial2);
        if (OnStage(SCR_BUILDCHAR_BACKGROUND)){
            Remove(VOLK_BTNS_ALL);
            Add(F_IDLE);
            Add(M_IDLE);
            if (CharMann){
                Add(VOLK_BTNS_M);
                Add(((VOLK_1_M_ACT + CharVolk) - 1));
                Add(M_ACT);
            } else {
                Add(VOLK_BTNS_F);
                Add(((VOLK_1_F_ACT + CharVolk) - 1));
                Add(F_ACT);
            };
            Add(KASTE_1_IDLE);
            Add(KASTE_2_IDLE);
            Add(KASTE_3_IDLE);
            if (KlasseGewählt){
                Add((KASTE_1_ACT + ((CharKaste - 1) * 2)));
            };
            i = 1;
            while (i < 11) {
                if (getCharImageBound(CharVolk, CharMann, i) == 0){
                    Remove((MOUTH_MINUS + ((i - 1) * 2)));
                    Remove((MOUTH_PLUS + ((i - 1) * 2)));
                    Remove((LBL_MOUTH + (i - 1)));
                } else {
                    Add((MOUTH_MINUS + ((i - 1) * 2)));
                    Add((MOUTH_PLUS + ((i - 1) * 2)));
                    Add((LBL_MOUTH + (i - 1)));
                };
                i = (i + 1);
            };
            PositionModifyCharacterButtons();
            if (!OnStage(CREATE_CHARACTER)){
                Remove(CREATE_GOTO_LOGIN, KASTE_1_IDLE, KASTE_2_IDLE, KASTE_3_IDLE, KASTE_1_ACT, KASTE_2_ACT, KASTE_3_ACT, CREATE_CHARACTER, BLACK_SQUARE);
                AddSome(MODIFY_CHARACTER, IF_EXIT);
            };
        };
        return;
    };
    LoadCharacterItemImage(actorID, (charPrefix + getCharSuffix(0, isKaste)), 0);
    LoadCharacterItemImage((actorID + 1), (charPrefix + getCharSuffix(1, isMouth)), 1);
    LoadCharacterItemImage((actorID + 2), (charPrefix + getCharSuffix(2, isBeard)), 2);
    LoadCharacterItemImage((actorID + 3), (charPrefix + getCharSuffix(3, isNose)), 3);
    LoadCharacterItemImage((actorID + 4), (charPrefix + getCharSuffix(4, isEyes)), 4);
    LoadCharacterItemImage((actorID + 5), (charPrefix + getCharSuffix(5, isBrows)), 5);
    LoadCharacterItemImage((actorID + 6), (charPrefix + getCharSuffix(6, isEars)), 6);
    LoadCharacterItemImage((actorID + 7), (charPrefix + getCharSuffix(7, isHair)), 7);
    LoadCharacterItemImage((actorID + 8), (charPrefix + getCharSuffix(8, isSpecial)), 8);
    LoadCharacterItemImage((actorID + 9), (charPrefix + getCharSuffix(9, isSpecial2)), 9);
    actorOffset = (actorID - CHARBACKGROUND);
    if (!loadOnly){
        Add((CHARIMG + actorOffset));
        if ((((isVolk == 2)) and (isMann))){
            AddBMO(CHARSPECIALOVL_ELF_M, actorOffset);
        };
        if ((((isVolk == 7)) and (isMann))){
            AddBMO(CHARSPECIALOVL_GOBLIN_M, actorOffset);
        };
        if ((((isVolk == 6)) and (isMann))){
            AddBMO(CHARSPECIALOVL_DARKELF_M, actorOffset);
        };
        if ((((isVolk == 3)) and (isMann))){
            AddBMO(CHARSPECIALOVL_DWARF_M, actorOffset);
        };
        if ((((isVolk == 1)) and (isMann))){
            AddBMO(CHARSPECIALOVL_HUMAN_M, actorOffset);
        };
        if ((((isVolk == 4)) and (isMann))){
            AddBMO(CHARSPECIALOVL_GNOM_M, actorOffset);
        };
        if ((((isVolk == 7)) and (!(isMann)))){
            AddBMO(CHARSPECIALOVL_GOBLIN_F, actorOffset);
        };
        if ((((isVolk == 5)) and (!(isMann)))){
            AddBMO(CHARSPECIALOVL_ORC_F, actorOffset);
        };
        if ((((isVolk == 2)) and (!(isMann)))){
            AddBMO(CHARSPECIALOVL_ELF_F, actorOffset);
        };
        if ((((isVolk == 1)) and (!(isMann)))){
            AddBMO(CHARSPECIALOVL_HUMAN_F, actorOffset);
        };
        if ((((isVolk == 3)) and (!(isMann)))){
            AddBMO(CHARSPECIALOVL_DWARF_F, actorOffset);
        };
    };
}

public function PositionModifyCharacterButtons():void{
    var i:* = 0;
    var positionModifyCharacterBtn:* = function (actorID:int):void{
        if (OnStage(actorID)){
            actor[actorID].y = (MODIFY_CHARACTER_BUTTONS_Y + (iPosi++ * MODIFY_CHARACTER_BUTTONS_1));
        };
    };
    var iPosi:* = 0;
    positionModifyCharacterBtn(EYES_PLUS);
    positionModifyCharacterBtn(BROWS_PLUS);
    positionModifyCharacterBtn(MOUTH_PLUS);
    positionModifyCharacterBtn(NOSE_PLUS);
    positionModifyCharacterBtn(EARS_PLUS);
    positionModifyCharacterBtn(HAIR_PLUS);
    positionModifyCharacterBtn(COLOR_PLUS);
    positionModifyCharacterBtn(BEARD_PLUS);
    positionModifyCharacterBtn(SPECIAL_PLUS);
    positionModifyCharacterBtn(SPECIAL2_PLUS);
    i = 0;
    while (i < 10) {
        if (textDir == "right"){
            actor[(LBL_MOUTH + i)].x = ((MODIFY_CHARACTER_BUTTONS_X - actor[(LBL_MOUTH + i)].textWidth) + 20);
            actor[(MOUTH_MINUS + (i * 2))].x = (MODIFY_CHARACTER_BUTTONS_X + MODIFY_CHARACTER_LABEL_X);
            actor[(MOUTH_PLUS + (i * 2))].x = (actor[(MOUTH_MINUS + (i * 2))].x + MODIFY_CHARACTER_BUTTONS_2);
            actor[(MOUTH_MINUS + (i * 2))].y = actor[(MOUTH_PLUS + (i * 2))].y;
            actor[(LBL_MOUTH + i)].y = (actor[(MOUTH_PLUS + (i * 2))].y + MODIFY_CHARACTER_LABEL_Y);
        } else {
            actor[(MOUTH_MINUS + (i * 2))].x = MODIFY_CHARACTER_BUTTONS_X;
            actor[(MOUTH_PLUS + (i * 2))].x = (actor[(MOUTH_MINUS + (i * 2))].x + MODIFY_CHARACTER_BUTTONS_2);
            actor[(MOUTH_MINUS + (i * 2))].y = actor[(MOUTH_PLUS + (i * 2))].y;
            actor[(LBL_MOUTH + i)].x = (actor[(MOUTH_PLUS + (i * 2))].x + MODIFY_CHARACTER_LABEL_X);
            actor[(LBL_MOUTH + i)].y = (actor[(MOUTH_PLUS + (i * 2))].y + MODIFY_CHARACTER_LABEL_Y);
        };
        i = (i + 1);
    };
}

public function getCharSuffix(itemIndex:int, itemValue:int):String{
    var strItem:String;
    var strExt:String;
    var colorIndex:int;
    var colorString:String;
    strExt = C_CHAREXT;
    colorIndex = 0;
    colorString = "";
    while (itemValue > 100) {
        itemValue = (itemValue - 100);
        colorIndex++;
    };
    if (colorIndex > 0){
        colorString = (("_" + String(colorIndex)) + "_");
    };
    switch (itemIndex){
        case 0:
            strExt = ".jpg";
            switch (itemValue){
                case 1:
                    strItem = "body_hunter";
                    break;
                case 2:
                    strItem = "body_mage";
                    break;
                case 3:
                    strItem = "body_warrior";
                    break;
            };
            break;
        case 1:
            strItem = ("mund" + String(itemValue));
            break;
        case 2:
            strItem = (("bart" + colorString) + String(itemValue));
            break;
        case -2:
            strItem = ("tattoo" + String(itemValue));
            break;
        case 3:
            strItem = ("nase" + String(itemValue));
            break;
        case 4:
            strItem = ("augen" + String(itemValue));
            break;
        case 5:
            strItem = (("brauen" + colorString) + String(itemValue));
            break;
        case 6:
            strItem = ("ohren" + String(itemValue));
            break;
        case 7:
            strItem = (("haare" + colorString) + String(itemValue));
            break;
        case 8:
            strItem = ("special" + String(itemValue));
            break;
        case 9:
            strItem = (("special2" + colorString) + String(itemValue));
            break;
    };
    return ((strItem + strExt));
}

public function RandomizeCharacter(evt:Event=undefined):void{
    CharVolk = (int((Math.random() * 8)) + 1);
    CharMann = (Math.random() > 0.5);
    if (paramObj["playerclass"]){
        CharKaste = int(paramObj["playerclass"]);
        if (CharKaste < 1){
            CharKaste = 1;
        };
        if (CharKaste > 3){
            CharKaste = 3;
        };
        KlasseGewählt = true;
    } else {
        CharKaste = (int((Math.random() * 3)) + 1);
        KlasseGewählt = false;
    };
    RandomizeCharImage();
}

public function RandomizeCharImage(evt:Event=undefined):void{
    var evt:* = evt;
    var ColorOffset:* = function (ItemID:int):int{
        if ((getCharImageBound(CharVolk, CharMann, 11) & ItemID)){
            return ((CharColor * 100));
        };
        return (0);
    };
    CharColor = int(((Math.random() * getCharImageBound(CharVolk, CharMann, 10)) + 1));
    CharMouth = int(((Math.random() * getCharImageBound(CharVolk, CharMann, 1)) + 1));
    CharBeard = (int(((Math.random() * getCharImageBound(CharVolk, CharMann, 2)) + 1)) + ColorOffset(C_BEARD));
    CharNose = int(((Math.random() * getCharImageBound(CharVolk, CharMann, 3)) + 1));
    CharEyes = int(((Math.random() * getCharImageBound(CharVolk, CharMann, 4)) + 1));
    CharBrows = (int(((Math.random() * getCharImageBound(CharVolk, CharMann, 5)) + 1)) + ColorOffset(C_BROWS));
    CharEars = int(((Math.random() * getCharImageBound(CharVolk, CharMann, 6)) + 1));
    CharHair = (int(((Math.random() * getCharImageBound(CharVolk, CharMann, 7)) + 1)) + ColorOffset(C_HAIR));
    CharSpecial = int(((Math.random() * getCharImageBound(CharVolk, CharMann, 8)) + 1));
    CharSpecial2 = (int(((Math.random() * getCharImageBound(CharVolk, CharMann, 9)) + 1)) + ColorOffset(C_SPECIAL2));
    LoadCharacterImage();
}

public function getCharImageBound(isVolk:int, isMann:Boolean, itemIndex):int{
    if (isMann){
        switch (isVolk){
            case 1:
                switch (itemIndex){
                    case 1:
                        return (9);
                    case 2:
                        return (13);
                    case 3:
                        return (6);
                    case 4:
                        return (7);
                    case 5:
                        return (7);
                    case 6:
                        return (5);
                    case 7:
                        return (11);
                    case 8:
                        return (17);
                    case 9:
                        return (0);
                    case 10:
                        return (5);
                    case 11:
                        return (((C_BROWS + C_HAIR) + C_BEARD));
                };
            case 2:
                switch (itemIndex){
                    case 1:
                        return (8);
                    case 2:
                        return (7);
                    case 3:
                        return (7);
                    case 4:
                        return (8);
                    case 5:
                        return (5);
                    case 6:
                        return (4);
                    case 7:
                        return (10);
                    case 8:
                        return (13);
                    case 9:
                        return (0);
                    case 10:
                        return (3);
                    case 11:
                        return (((C_HAIR + C_BROWS) + C_BEARD));
                };
            case 3:
                switch (itemIndex){
                    case 1:
                        return (5);
                    case 2:
                        return (5);
                    case 3:
                        return (5);
                    case 4:
                        return (8);
                    case 5:
                        return (5);
                    case 6:
                        return (5);
                    case 7:
                        return (10);
                    case 8:
                        return (13);
                    case 9:
                        return (0);
                    case 10:
                        return (5);
                    case 11:
                        return (((C_BROWS + C_HAIR) + C_BEARD));
                };
            case 4:
                switch (itemIndex){
                    case 1:
                        return (10);
                    case 2:
                        return (12);
                    case 3:
                        return (6);
                    case 4:
                        return (9);
                    case 5:
                        return (9);
                    case 6:
                        return (6);
                    case 7:
                        return (12);
                    case 8:
                        return (17);
                    case 9:
                        return (0);
                    case 10:
                        return (5);
                    case 11:
                        return (((C_HAIR + C_BEARD) + C_BROWS));
                };
            case 5:
                switch (itemIndex){
                    case 1:
                        return (7);
                    case 2:
                        return (5);
                    case 3:
                        return (5);
                    case 4:
                        return (6);
                    case 5:
                        return (5);
                    case 6:
                        return (5);
                    case 7:
                        return (10);
                    case 8:
                        return (9);
                    case 9:
                        return (0);
                    case 10:
                        return (5);
                    case 11:
                        return ((C_HAIR + C_BEARD));
                };
            case 6:
                switch (itemIndex){
                    case 1:
                        return (6);
                    case 2:
                        return (6);
                    case 3:
                        return (5);
                    case 4:
                        return (5);
                    case 5:
                        return (5);
                    case 6:
                        return (5);
                    case 7:
                        return (8);
                    case 8:
                        return (12);
                    case 9:
                        return (0);
                    case 10:
                        return (3);
                    case 11:
                        return (((C_HAIR + C_BEARD) + C_BROWS));
                };
            case 7:
                switch (itemIndex){
                    case 1:
                        return (6);
                    case 2:
                        return (8);
                    case 3:
                        return (5);
                    case 4:
                        return (9);
                    case 5:
                        return (6);
                    case 6:
                        return (5);
                    case 7:
                        return (12);
                    case 8:
                        return (12);
                    case 9:
                        return (0);
                    case 10:
                        return (0);
                    case 11:
                        return (0);
                };
            case 8:
                switch (itemIndex){
                    case 1:
                        return (9);
                    case 2:
                        return (10);
                    case 3:
                        return (6);
                    case 4:
                        return (7);
                    case 5:
                        return (5);
                    case 6:
                        return (5);
                    case 7:
                        return (0);
                    case 8:
                        return (17);
                    case 9:
                        return (11);
                    case 10:
                        return (5);
                    case 11:
                        return ((C_BEARD + C_SPECIAL2));
                };
        };
    } else {
        switch (isVolk){
            case 1:
                switch (itemIndex){
                    case 1:
                        return (8);
                    case 2:
                        return (0);
                    case 3:
                        return (6);
                    case 4:
                        return (6);
                    case 5:
                        return (6);
                    case 6:
                        return (6);
                    case 7:
                        return (8);
                    case 8:
                        return (5);
                    case 9:
                        return (0);
                    case 10:
                        return (4);
                    case 11:
                        return ((C_BROWS + C_HAIR));
                };
            case 2:
                switch (itemIndex){
                    case 1:
                        return (8);
                    case 2:
                        return (0);
                    case 3:
                        return (8);
                    case 4:
                        return (7);
                    case 5:
                        return (8);
                    case 6:
                        return (7);
                    case 7:
                        return (8);
                    case 8:
                        return (5);
                    case 9:
                        return (0);
                    case 10:
                        return (4);
                    case 11:
                        return ((C_HAIR + C_BROWS));
                };
            case 3:
                switch (itemIndex){
                    case 1:
                        return (9);
                    case 2:
                        return (0);
                    case 3:
                        return (6);
                    case 4:
                        return (6);
                    case 5:
                        return (8);
                    case 6:
                        return (4);
                    case 7:
                        return (8);
                    case 8:
                        return (4);
                    case 9:
                        return (0);
                    case 10:
                        return (4);
                    case 11:
                        return ((C_HAIR + C_BROWS));
                };
            case 4:
                switch (itemIndex){
                    case 1:
                        return (7);
                    case 2:
                        return (0);
                    case 3:
                        return (7);
                    case 4:
                        return (6);
                    case 5:
                        return (6);
                    case 6:
                        return (6);
                    case 7:
                        return (8);
                    case 8:
                        return (5);
                    case 9:
                        return (0);
                    case 10:
                        return (4);
                    case 11:
                        return ((C_HAIR + C_BROWS));
                };
            case 5:
                switch (itemIndex){
                    case 1:
                        return (7);
                    case 2:
                        return (0);
                    case 3:
                        return (5);
                    case 4:
                        return (6);
                    case 5:
                        return (5);
                    case 6:
                        return (4);
                    case 7:
                        return (8);
                    case 8:
                        return (7);
                    case 9:
                        return (0);
                    case 10:
                        return (4);
                    case 11:
                        return (C_HAIR);
                };
            case 6:
                switch (itemIndex){
                    case 1:
                        return (9);
                    case 2:
                        return (0);
                    case 3:
                        return (6);
                    case 4:
                        return (6);
                    case 5:
                        return (6);
                    case 6:
                        return (3);
                    case 7:
                        return (6);
                    case 8:
                        return (5);
                    case 9:
                        return (0);
                    case 10:
                        return (3);
                    case 11:
                        return (C_HAIR);
                };
            case 7:
                switch (itemIndex){
                    case 1:
                        return (9);
                    case 2:
                        return (0);
                    case 3:
                        return (5);
                    case 4:
                        return (6);
                    case 5:
                        return (5);
                    case 6:
                        return (4);
                    case 7:
                        return (8);
                    case 8:
                        return (4);
                    case 9:
                        return (0);
                    case 10:
                        return (4);
                    case 11:
                        return (C_HAIR);
                };
            case 8:
                switch (itemIndex){
                    case 1:
                        return (8);
                    case 2:
                        return (5);
                    case 3:
                        return (7);
                    case 4:
                        return (6);
                    case 5:
                        return (5);
                    case 6:
                        return (4);
                    case 7:
                        return (7);
                    case 8:
                        return (6);
                    case 9:
                        return (4);
                    case 10:
                        return (3);
                    case 11:
                        return (C_HAIR);
                };
        };
    };
    return (0);
}

public function getCharPrefix(isGut:Boolean, isVolk:int, isMann:Boolean, isKaste:int):String{
    var strTemp:String;
    var strRace:String;
    strTemp = "res/gfx/char/";
    strRace = "";
    switch (isVolk){
        case 1:
            strRace = "human";
            break;
        case 2:
            strRace = "elf";
            break;
        case 3:
            strRace = "dwarf";
            break;
        case 4:
            strRace = "gnome";
            break;
        case 5:
            strRace = "orc";
            break;
        case 6:
            strRace = "dunkelelf";
            break;
        case 7:
            strRace = "goblin";
            break;
        case 8:
            strRace = "demon";
            break;
    };
    strTemp = (strTemp + (strRace + " "));
    strTemp = (strTemp + ((isMann) ? "m" : "f"));
    strTemp = (strTemp + (("/" + strRace) + "_"));
    if (!isMann){
        strTemp = (strTemp + "female_");
    };
    return (strTemp);
}

public function DrachenSetzen():void{
    var i:int;
    var d:int;
    var x:int;
    var y:int;
    i = IF_DRAGON_1;
    while (i <= IF_DRAGON_13) {
        x = actor[i].x;
        y = actor[i].y;
        delete actor[i];
        d = (Math.random() * 5);
        actorBitmap[i] = d;
        switch (d){
            case 0:
                actor[i] = new interface_dragon1_png();
                break;
            case 1:
                actor[i] = new interface_dragon2_png();
                break;
            case 2:
                actor[i] = new interface_dragon3_png();
                break;
            case 3:
                actor[i] = new interface_dragon4_png();
                break;
            case 4:
            case 5:
                actor[i] = new interface_dragon6_png();
                break;
        };
        actor[i].x = x;
        actor[i].y = y;
        addChild(actor[i]);
        i++;
    };
}

public function ErrorMessage(msg:String=""):void{
    var msg:String = msg;
    if (msg == ""){
    } else {
        trc(("Error message: " + msg));
        if (OnStage(SHP_FUCK_BLACK_SQUARE)){
            var _local3 = actor[LBL_ERROR];
            with (_local3) {
                text = msg;
                scaleX = 1;
                scaleY = 1;
                x = (IF_ERROR_X - int((textWidth / 2)));
                y = (IF_ERROR_Y + 60);
            };
            Add(LBL_ERROR);
        } else {
            if (OnStage(GILDE_LIST)){
                if (msg.split(" ").join("") != ""){
                    ChatLine(msg, true);
                };
            } else {
                if (((OnStage(CREATE_CHARACTER)) and (!(OnStage(IF_WINDOW))))){
                    _local3 = actor[LBL_CREATE_RACE_DESC];
                    with (_local3) {
                        defaultTextFormat = FontFormat_ClassError;
                        text = msg;
                        defaultTextFormat = FontFormat_DefaultLeft;
                    };
                    actor[LBL_CREATE_CLASS].text = "";
                    actor[LBL_CREATE_CLASS_DESC].text = "";
                } else {
                    _local3 = actor[LBL_ERROR];
                    with (_local3) {
                        text = msg;
                        scaleX = 1;
                        scaleY = 1;
                        if (OnStage(SHOPS_NEWWAREZ)){
                            x = (SHOP_ERROR_X - int((textWidth / 2)));
                            y = SHOP_ERROR_Y;
                        } else {
                            if (OnStage(TOILET)){
                                x = ((SHOP_ERROR_X - 15) - int((textWidth / 2)));
                                y = 720;
                            } else {
                                if (OnStage(QUEST_CANCEL)){
                                    x = (IF_ERROR_X - int((textWidth / 2)));
                                    y = QUEST_ERROR_Y;
                                } else {
                                    if (OnStage(POST_BG)){
                                        x = (IF_ERROR_X - int((textWidth / 2)));
                                        y = POST_ERROR_Y;
                                    } else {
                                        if (OnStage(LBL_STALL_TITEL)){
                                            x = (IF_ERROR_X - int((textWidth / 2)));
                                            y = STALL_ERROR_Y;
                                        } else {
                                            if (OnStage(CHAR_ATTACK)){
                                                scaleX = 0.7;
                                                scaleY = 0.7;
                                                x = (((280 + 500) + 235) - (width / 2));
                                                y = (100 + 657);
                                            } else {
                                                if (OnStage(SHP_MAINQUEST)){
                                                    x = (IF_ERROR_X - int((textWidth / 2)));
                                                    y = MQ_ERROR_Y;
                                                } else {
                                                    x = (IF_ERROR_X - int((textWidth / 2)));
                                                    y = IF_ERROR_Y;
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                    Add(LBL_ERROR);
                };
            };
        };
    };
}

public function InterfaceBtnHandler(evt:Event):void{
    var tmpAction:int;
    tmpAction = 0;
    switch (GetActorID(evt.target)){
        case CA_CITY_SHAKES:
        case IF_SCHMIEDE:
            tmpAction = ACT_SCREEN_SCHMIEDE;
            break;
        case CA_CITY_RUHMESHALLE:
        case IF_EHRENHALLE:
            ruhmesHalleSuchString = actor[INP_NAME].getChildAt(1).text;
            SendAction(ACT_SCREEN_EHRENHALLE, actor[INP_NAME].getChildAt(1).text, -1);
            break;
        case CA_CITY_ARENA:
        case IF_ARENA:
            tmpAction = ACT_SCREEN_ARENA;
            break;
        case CA_CITY_ESEL:
        case IF_STALL:
            tmpAction = ACT_SCREEN_STALL;
            break;
        case CA_CITY_POST:
        case IF_POST:
            PostScroll = 1;
            SendAction(ACT_SCREEN_POST, 1);
            break;
        case CA_CITY_WACHE:
        case IF_ARBEITEN:
            tmpAction = ACT_SCREEN_ARBEITEN;
            break;
        case IF_TAVERNE:
        case CA_CITY_TAVERNE:
        case HUTMANN_BACK:
            tmpAction = ACT_SCREEN_TAVERNE;
            break;
        case CA_CITY_ZAUBERLADEN:
        case IF_ZAUBERLADEN:
            tmpAction = ACT_SCREEN_ZAUBERLADEN;
            break;
        case IF_PILZDEALER:
        case CA_CITY_DEALER:
            tmpAction = ACT_SCREEN_PILZDEALER;
            break;
        case FIGHT_OK:
            tmpAction = ((PostFightMode) ? ACT_SCREEN_POST : ACT_SCREEN_CHAR);
            if (hasFoughtGuildBattle){
                if (towerFightMode){
                    tmpAction = ACT_SCREEN_TOWER;
                } else {
                    tmpAction = ACT_SCREEN_GILDEN;
                };
            };
            if (hasLostMQ){
                hasLostMQ = false;
                tmpAction = 0;
                ShowMainQuestScreen(LastDungeonNr, LastDungeonEnemy);
            };
            break;
        case IF_CHARAKTER:
            arrowHallMode = false;
            tmpAction = ACT_SCREEN_CHAR;
            break;
        case IF_GILDEN:
            PulseGilde = false;
            PulseGildeOnHistory = false;
            tmpAction = ACT_SCREEN_GILDEN;
            break;
        case IF_WELTKARTE:
            tmpAction = ACT_SCREEN_WELTKARTE;
            break;
        case IF_OPTIONEN:
            tmpAction = ACT_SCREEN_OPTIONEN;
            break;
        case CA_CITY_BUH:
            slmCount++;
            break;
    };
    if (tmpAction > 0){
        SendAction(tmpAction);
    };
}

public function EnablePopup(actorID:int, ... _args){
    var i:* = 0;
    var popupWidth:* = 0;
    var textY:* = 0;
    var textX:* = 0;
    var myStamp:* = 0;
    var ShowPopup:* = null;
    var PositionPopup:* = null;
    var HidePopup:* = null;
    var actorID:* = actorID;
    var args:* = _args;
    ShowPopup = function (evt:MouseEvent):void{
        var tmpTextField:* = null;
        var lastTextHeight:* = 0;
        var ii:* = 0;
        var dist:* = 0;
        var evt:* = evt;
        if (evt.buttonDown){
            return;
        };
        if (actorPopupStamp[actorID] != myStamp){
            removeEventListener(MouseEvent.MOUSE_OVER, ShowPopup);
            removeEventListener(MouseEvent.MOUSE_MOVE, PositionPopup);
            removeEventListener(MouseEvent.MOUSE_OUT, HidePopup);
            removeEventListener(MouseEvent.MOUSE_DOWN, HidePopup);
            removeEventListener(MouseEvent.MOUSE_UP, HidePopup);
            return;
        };
        if (OnStage(POPUP_INFO)){
            Remove(POPUP_INFO);
        };
        actor[POPUP_INFO] = new MovieClip();
        if (suggestionSlot[actorID]){
            actor[SLOT_SUGGESTION].x = actor[suggestionSlot[actorID]].x;
            actor[SLOT_SUGGESTION].y = actor[suggestionSlot[actorID]].y;
            if (!OnStage(SLOT_SUGGESTION)){
                AddSome(SLOT_SUGGESTION, suggestionSlot[actorID]);
                actor[SLOT_SUGGESTION].alpha = 0;
                FadeIn(SLOT_SUGGESTION);
            };
        };
        var tmpTextFormat:* = FontFormat_Popup;
        lastTextHeight = 0;
        popupWidth = ((textDir)=="right") ? 50 : 0;
        if (textDir == "right"){
            textX = popupWidth;
        };
        textY = 10;
        i = 0;
        while (i < args.length) {
            var processArg:* = function (arg){
                var iArray:* = 0;
                var tmpDO:* = null;
                var arg:* = arg;
                if ((arg is Array)){
                    iArray = 0;
                    while (iArray < arg.length) {
                        processArg(arg[iArray]);
                        iArray = (iArray + 1);
                    };
                } else {
                    if ((arg is int)){
                        if (arg < 0){
                            popupWidth = -(arg);
                        } else {
                            if (arg == 0){
                                textX = ((textDir)=="right") ? popupWidth : 0;
                                textY = (textY + (lastTextHeight + 10));
                            } else {
                                if (textDir == "right"){
                                    textX = (popupWidth - arg);
                                } else {
                                    textX = arg;
                                };
                            };
                        };
                    } else {
                        if ((arg is TextFormat)){
                            tmpTextFormat = arg;
                        } else {
                            if ((arg is DisplayObject)){
                                tmpDO = new Bitmap(arg.content.bitmapData.clone());
                                var _local3 = tmpDO;
                                with (_local3) {
                                    if (textDir == "right"){
                                        if (textX < popupWidth){
                                            x = (textX - width);
                                            textX = (textX - (width + 5));
                                            y = textY;
                                        } else {
                                            x = ((popupWidth - 5) - width);
                                            y = textY;
                                            textY = (textY + (textHeight + 10));
                                        };
                                    } else {
                                        if (textX > 0){
                                            x = textX;
                                            textX = (textX + (width + 5));
                                            y = textY;
                                        } else {
                                            x = 5;
                                            y = textY;
                                            textY = (textY + (textHeight + 10));
                                        };
                                    };
                                };
                                actor[POPUP_INFO].addChild(tmpDO);
                            } else {
                                if ((arg is String)){
                                    arg = arg.split("#").join(String.fromCharCode(13));
                                    tmpTextField = new TextField();
                                    _local3 = tmpTextField;
                                    with (_local3) {
                                        autoSize = ((textDir)=="right") ? TextFieldAutoSize.RIGHT : TextFieldAutoSize.LEFT;
                                        background = false;
                                        selectable = false;
                                        embedFonts = fontEmbedded;
                                        defaultTextFormat = tmpTextFormat;
                                        htmlText = arg;
                                        lastTextHeight = textHeight;
                                        if (textDir == "right"){
                                            if (textX < popupWidth){
                                                x = (textX - textWidth);
                                                textX = (textX - (textWidth + 5));
                                                y = textY;
                                            } else {
                                                x = ((popupWidth - 5) - textWidth);
                                                y = textY;
                                                textY = (textY + (textHeight + 10));
                                            };
                                        } else {
                                            if (textX > 0){
                                                x = textX;
                                                textX = (textX + (textWidth + 5));
                                                y = textY;
                                            } else {
                                                x = 5;
                                                y = textY;
                                                textY = (textY + (textHeight + 10));
                                            };
                                            if (((x + textWidth) + 10) > popupWidth){
                                                popupWidth = ((x + textWidth) + 10);
                                            };
                                        };
                                    };
                                    actor[POPUP_INFO].addChild(tmpTextField);
                                };
                            };
                        };
                    };
                };
            };
            processArg(args[i]);
            i++;
        };
        var _local3 = actor[POPUP_INFO];
        with (_local3) {
            i = 0;
            while (i < numChildren) {
                if (getChildAt(i).x < 5){
                    dist = (5 - getChildAt(i).x);
                    ii = 0;
                    while (ii < numChildren) {
                        getChildAt(ii).x = (getChildAt(ii).x + dist);
                        if (((getChildAt(ii).x + getChildAt(ii).width) + 5) > popupWidth){
                            popupWidth = ((getChildAt(ii).x + getChildAt(ii).width) + 5);
                        };
                        ii++;
                    };
                };
                i++;
            };
            mouseEnabled = false;
            mouseChildren = false;
            allowSmoothing = true;
            forceSmoothing = true;
            smoothing = true;
        };
        _local3 = actor[POPUP_INFO].graphics;
        with (_local3) {
            beginFill(0, 0);
            lineStyle(0, 0, 0);
            drawRect(0, 0, popupWidth, textY);
            beginFill(CLR_BLACK, 0.8);
            lineStyle(1, CLR_SFORANGE, 1);
            drawRect(1, 1, (popupWidth - 1), (textY - 1));
        };
        PositionPopup(evt);
        Add(POPUP_INFO);
    };
    PositionPopup = function (evt:MouseEvent):void{
        var evt:* = evt;
        var _local3 = actor[POPUP_INFO];
        with (_local3) {
            x = (evt.stageX - int((popupWidth / 2)));
            y = ((evt.stageY - 20) - textY);
            if (x < 0){
                x = 0;
            };
            if (y < 0){
                y = 0;
            };
            if (x > (RES_X - popupWidth)){
                x = (RES_X - popupWidth);
            };
            if (y > (RES_Y - textY)){
                y = (RES_Y - textY);
            };
            if ((((((((evt.stageX > (x - 20))) and ((evt.stageX < ((x + popupWidth) + 15))))) and ((evt.stageY > (y - 20))))) and ((evt.stageY < ((y + textY) + 15))))){
                if (evt.stageY < (textY + 20)){
                    y = (evt.stageY + 40);
                };
                if ((((((((evt.stageX > (x - 20))) and ((evt.stageX < ((x + popupWidth) + 15))))) and ((evt.stageY > (y - 20))))) and ((evt.stageY < ((y + textY) + 15))))){
                    if (evt.stageX > ((RES_X - popupWidth) - 20)){
                        x = ((evt.stageX - popupWidth) - 20);
                    };
                };
            };
        };
    };
    HidePopup = function (evt:MouseEvent):void{
        Remove(SLOT_SUGGESTION);
        Remove(POPUP_INFO);
    };
    myStamp = popupStamp++;
    if (popupStamp > 10000){
        popupStamp = 0;
    };
    if (args.length > 0){
        var _local4 = actor[actorID];
        with (_local4) {
            addEventListener(MouseEvent.MOUSE_OVER, ShowPopup);
            addEventListener(MouseEvent.MOUSE_MOVE, PositionPopup);
            addEventListener(MouseEvent.MOUSE_OUT, HidePopup);
            addEventListener(MouseEvent.MOUSE_DOWN, HidePopup);
            addEventListener(MouseEvent.MOUSE_UP, HidePopup);
        };
    };
    actorPopupStamp[actorID] = myStamp;
}

public function GuildChatPollFn(e:Event){
    if (param_poll_tunnel_url == ""){
        if (Gilde == ""){
            GuildChatPoll.delay = 1000;
            return;
        };
        if (OnStage(INP_GILDE_CHAT)){
            GuildChatPoll.delay = (1000 * intervalMultiplierChat);
        } else {
            if (param_idle_polling > 0){
                GuildChatPoll.delay = (1000 * param_idle_polling);
            } else {
                GuildChatPoll.delay = (1000 * 60);
            };
        };
    } else {
        GuildChatPoll.delay = 1000;
        if (Gilde == ""){
            return;
        };
    };
    SendAction(ACT_GET_CHAT_HISTORY, lastChatIndex);
}

public function ChatPollIntervalReset(){
    if (param_poll_tunnel_url != ""){
        GuildChatPoll.stop();
        GuildChatPoll.start();
    };
}

public function trc(... _args){
    var i:uint;
    var outStr:String;
    outStr = "";
    i = 0;
    while (i < _args.length) {
        outStr = (outStr + (String(_args[i]) + " "));
        i++;
    };
    outStr = outStr.substr(0, (outStr.length - 1));
    trace(outStr);
    if (paramObj["firebug"]){
        if (paramObj["firebug"] != ""){
            ExternalInterface.call("console.log", outStr);
        };
    };
}

    }
}//package sfgame_fla
﻿


'''
