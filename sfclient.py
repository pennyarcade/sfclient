#!/usr/bin/python
# coding=utf-8
'''
    Shakes & Fidget command line client

    by Chocokiko

    @see: (Curses Example)
            http://gnosis.cx/publish/programming/charming_python_6.html
'''

# standard library
import time
from datetime import datetime
import random
import md5
import logging
import math
import types

# external dependencies
import requests
import curses

# internal dependencies
from sflegacy import *


# player action codes
ACT = {
    "BUY": {
        "ATTRIB": 21,
        "BEER": 518,
        "LUXURY": 195,
        "MOUNT": 20
    },
    "CHANGE": {
        "FACE": 801,
        "MAIL": 804,
        "NAME": 803,
        "PASS": 805
    },
    "GUILD": {
        "COMMENCE_ATTACK": 114,
        "DELETE": 102,
        "DONATE": 111,
        "EXPEL": 104,
        "FOUND": 101,
        "IMPROVE": 107,
        "INVITE": 103,
        "JOIN": 110,
        "JOIN_ATTACK": 112,
        "JOIN_DEFENSE": 113,
        "RENAME": 109,
        "SET_DESC": 108,
        "SET_MASTER": 105,
        "SET_OFFICER": 106
    },
    "POST": {
        "DELETE": 508,
        "READ": 507,
        "SEND": 509,
        "SEND_GUILD": 536
    },
    "QUEST": {
        "BEGIN": 510,
        "CANCEL": 511,
        "SKIP": 189
    },
    "REQUEST": {
        "CHAR": 513,
        "GUILD": 503,
        "GUILD_NAMES": 533,
        "NEWWAREZ": 506,
        "TRANS_COUNT": 530
    },
    "SCREEN": {
        "ARBEITEN": 12,
        "ARENA": 11,
        "CHAR": 4,
        "EHRENHALLE": 7,
        "FREMDGILDE": 23,
        "GILDE_GRUENDEN": 17,
        "GILDEN": 6,
        "GILDENHALLE": 24,
        "OPTIONEN": 9,
        "PILZDEALER": 16,
        "POST": 5,
        "SCHMIEDE": 13,
        "STALL": 15,
        "TAVERNE": 10,
        "TOILET": 303,
        "TOWER": 312,
        "WELTKARTE": 8,
        "WITCH": 322,
        "ZAUBERLADEN": 14
    },
    "ACCOUNT_CREATE": 1,
    "ALBUM": 116,
    "ARBEIT": 502,
    "ARBEIT_CANCEL": 505,
    "CHAR_CREATE": 501,
    "COPYCAT_BOOST": 314,
    "DEALER_AKTION": 25,
    "DEALER_SPONSOR": 26,
    "DELETE_ACCOUNT": 802,
    "FORGOT_PASSWORD": 3,
    "GET_CHAT_HISTORY": 517,
    "INVENTORY_CHANGE": 504,
    "INVITE_PLAYER": 115,
    "KILL_POTION": 27,
    "LOAD_CATAPULT": 196,
    "LOGIN": 2,
    "LOGOUT": 535,
    "MAINQUEST": 519,
    "MOVE_COPYCAT_ITEM": 318,
    "PLACE_BET": 22,
    "RE_LOGIN": 515,
    "RESEND_EMAIL": 531,
    "REVOLT": 534,
    "ROB_PLAYER": 313,
    "SEND_CHAT": 516,
    "SET_PLAYER_DESC": 514,
    "START_FIGHT": 512,
    "TOILET_FLUSH": 302,
    "TOWER_TRY": 313,
    "VALIDATE": 532,
    "WHISPER": 537,
    "WITCH_DONATE": 323,
    "WITCH_ENCHANT": 325,
}


# Response codes
RESP = {
    "ARBEIT": {
        "ERLEDIGT": 103,
        "START": 104,
        "STOP": 105
    },
    "CHANGE": {
        "FACE_OK": 115,
        "MAIL_OK": 118,
        "NAME_OK": 117,
        "PASS_OK": 116
    },
    "GUILD": {
        "CHANGE_DESC_SUCCESS": 153,
        "COMMENCE_ATTACK_OK": 181,
        "DATA": 101,
        "DELETE_SUCCESS": 151,
        "DONATE_SUCCESS": 160,
        "EXPEL_SUCCESS": 156,
        "FIGHT": 178,
        "FOUND_SUCCESS": 150,
        "IMPROVE_SUCCESS": 154,
        "INVITE_SUCCESS": 157,
        "JOIN_ATTACK_OK": 179,
        "JOIN_DEFENSE_OK": 180,
        "JOIN_SUCCESS": 158,
        "MASTER_SUCCESS": 159,
        "NAMES": 183,
        "OFFICER_SUCCESS": 155,
        "RENAME_SUCCESS": 152
    },
    "PLAYER": {
        "DESC_SUCCESS": 109,
        "NOT_FOUND": 112,
        "SCREEN": 111
    },
    "QUEST": {
        "DONE": 106,
        "DONE_PIXEL": 188,
        "DONE_PIXEL_2": 197,
        "SKIP_ALLOWED": 193,
        "SKIP_ALLOWED_START": 194,
        "START": 107,
        "STOP": 108
    },
    "SAVEGAME": {
        "MIRROR": 317,
        "SHARD": 316,
        "STAY": 102,
        "STAY_ERROR": 173
    },
    "SCREEN": {
        "BUILDCHAR": 4,
        "GILDENHALLE": 170,
        "WITCH": 324
    },
    "TOILET": {
        "DROPPED": 305,
        "DROPTWICE": 357,
        "FLUSHED": 308,
        "FULL": 306,
        "LOCKED": 304,
        "TANKFULL": 311,
        "UNLOCKED": 309
    },
    "ACCOUNT_SUCCESS": 1,
    "ALBUM": 192,
    "ATTACK_NOT_EXIST": 114,
    "BET_LOST": 169,
    "BET_WON": 168,
    "CHAT_HISTORY": 161,
    "CHAT_LINE": 162,
    "DEALER_AKTION": 174,
    "DEALER_SPONSOR": 176,
    "DELETE_ACCOUNT_OK": 119,
    "DEMO_SCREEN": 113,
    "EMAIL_RESENT": 164,
    "FAME_LIST": 3,
    "INVITE_SUCCESS": 191,
    "LOGIN_SUCCESS": 2,
    "LOGIN_SUCCESS_BOUGHT": 184,
    "LOGOUT_SUCCESS": 187,
    "MAINQUEST": 122,
    "MESSAGE_SENT": 202,
    "MOVE_TOWER_ITEM": 319,
    "NO_LOGIN": 120,
    "OTHER_GUILD": 172,
    "PASSWORD_SENT": 165,
    "READ_MESSAGE": 201,
    "REQUEST_GUILD": 121,
    "REQUEST_GUILD_QUIET": 186,
    "TOWER_FIGHT": 321,
    "TOWER_SAVE": 315,
    "TRANS_COUNT": 163,
    "UPDATE_CHECK": 167,
    "VALIDATE_OK": 166,
    "WHISPER_SUCCESS": 190
}


# Error codes
ERR = {
    "GUILD": {
        "ALREADY_ATTACKING": -63,
        "ALREADY_MEMBER": -38,
        "ALREADY_UNDER_ATTACK": -61,
        "ALREADY_YOU_OTHER": -25,
        "ALREADY_YOU_THIS": -27,
        "ATTACK_DELAY": -62,
        "ATTACK_STATUS": -64,
        "BUILDING_MAX": -21,
        "BUILDING_NOT_FOUND": -20,
        "CHAT_HISTORY": -32,
        "CHAT_NOT_MEMBER": -31,
        "CHAT_TEXT_ERROR": -33,
        "DESCR_TOO_LONG": -102,
        "DONATE_FRA": -52,
        "DONATE_NEG": -51,
        "EMAIL_VALIDATE": -46,
        "FIGHT_TOO_EXPENSIVE": -60,
        "IS_FULL": -24,
        "LACK_GOLD": -19,
        "LACK_MUSH": -18,
        "MASTER_CANT_BE_OFFICER": -23,
        "MUSH_FREE": -47,
        "NAME_CHARACTERS": -45,
        "NAME_LENGTH": -44,
        "NAME_REJECTED": -43,
        "NOT_ALLOWED": -17,
        "NOT_FOUND": -16,
        "NOT_MEMBER": -22,
        "NOT_REAL_MEMBER": -26,
        "PLAYER_NOT_FOUND": -28,
        "RANK_WRONG": -95,
        "TOO_EXPENSIVE": -30
    },
    "INVITE": {
        "EMAIL_REJECTED": -92,
        "NOT_VALIDATED": -90,
        "TOO_MANY": -91
    },
    "NAME": {
        "EXISTS": -1,
        "REJECTED": -5,
        "TOO_SHORT": -2
    },
    "NO": {
        "ALBUM": -93,
        "CHAT_INFO": -96,
        "CHAT_OVERFLOW": -97,
        "ENDURANCE": -36,
        "INDEX_FREE": -14,
        "MUSH_BAR": -35,
        "MUSH_MQ": -41,
        "MUSH_PVP": -40
    },
    "ACCOUNTS_PER_IP": -56,
    "ALREADY_IN_GUILD": -13,
    "ATTACK_AGAIN": -48,
    "BEER": -34,
    "BOOST": -42,
    "DEALER_AKTION": 175,
    "DEALER_SPONSOR": 177,
    "EMAIL_REJECTED": -4,
    "EMAIL_WRONG": -10,
    "FACE_DATA_INCORRECT": -9,
    "FIGHT_SELF": -15,
    "GENDER_OR_RACE": -11,
    "INBOX_FULL": 203,
    "INVENTORY_FULL": -58,
    "INVENTORY_FULL_ADV": -86,
    "JOINED_TOO_RECENTLY": -68,
    "LOCKED_ADMIN": -54,
    "LOCKED_PAYMENT": -53,
    "LOGIN_FAILED": -6,
    "LUXURY_ALREADY": -94,
    "MAIL_EXISTS": -12,
    "MSG_LEVEL_TOO_LOW": -84,
    "MSG_NOT_VALIDATED": -85,
    "NO_SLOT_FOR_FLUSHING": -307,
    "NOT_INVITED": -39,
    "PASSWORD_TOO_SHORT": -3,
    "PLACE_BET": -57,
    "RECIPIENT_NOT_FOUND": 204,
    "RECIPIENT_SELF": 205,
    "REQUEST_PW": -49,
    "REVOLT_FAILED": -67,
    "SERVER_DOWN": -69,
    "SESSION_ID_EXPIRED": -65,
    "STOP_TUNNELING": -66,
    "SUBJECT_TOO_SHORT": -29,
    "TOILET_EMPTY": -310,
    "TOO_EXPENSIVE": -7,
    "TOO_SOON": -55,
    "TOWER_CLOSED": -98,
    "TOWER_ITEMMOVE": -100,
    "TOWER_NO_COPYCATS": -101,
    "VALIDATE": -50,
    "WORSE_MOUNT": -37,
    "WRONG_PASSWORD": -8,
}


# savegame (request answer) Indices
SG = {
    "ATTR": {
        "AUSDAUER": 33,
        "AUSDAUER_BONUS": 38,
        "AUSDAUER_GEKAUFT": 43,
        "BEWEGLICHKEIT": 32,
        "BEWEGLICHKEIT_BONUS": 37,
        "BEWEGLICHKEIT_GEKAUFT": 42,
        "INTELLIGENZ": 34,
        "INTELLIGENZ_BONUS": 39,
        "INTELLIGENZ_GEKAUFT": 44,
        "STAERKE": 31,
        "STAERKE_BONUS": 36,
        "STAERKE_GEKAUFT": 41,
        "WILLENSKRAFT": 35,
        "WILLENSKRAFT_BONUS": 40,
        "WILLENSKRAFT_GEKAUFT": 45
    },
    "ACTION": {
        "ENDTIME": 48,
        "INDEX": 47,
        "STATUS": 46
    },
    "FACE": {
        "1": 18,
        "2": 19,
        "3": 20,
        "4": 21,
        "5": 22,
        "6": 23,
        "7": 24,
        "8": 25,
        "9": 26,
        "10": 27
    },
    "GUILD": {
        "FIGHT_STATUS": 509,
        "INDEX": 436,
        "JOIN_DATE": 444,
        "RANK": 437
    },
    "ITM": {
        "ATTRIBTYP1": 4,
        "ATTRIBTYP2": 5,
        "ATTRIBTYP3": 6,
        "ATTRIBVAL1": 7,
        "ATTRIBVAL2": 8,
        "ATTRIBVAL3": 9,
        "EXT_ENCHANT": 601,
        "EXT_ENCHANT_POWER": 602,
        "EXT_SOCKET": 600,
        "EXT_SOCKET_POWER": 603,
        "GOLD": 10,
        "MUSH": 11,
        "PIC": 1,
        "SCHADEN_MAX": 3,
        "SCHADEN_MIN": 2,
        "SIZE": 12,
        "TYP": 0
    },
    "LAST": {
        "ACTION_DATE": 3,
        "GUILD_FIGHT_EXP": 440,
        "LOGIN_IP": 504
    },
    "MUSH": {
        "MUSH": 15,
        "BOUGHT_SINCE_LAST_LOGIN": 446,
        "GAINED": 16,
        "SPENT": 17
    },
    "POTION": {
        "DURATION": 497,
        "GAIN": 500,
        "TYPE": 494
    },
    "QUEST": {
        "OFFER": {
            "DURATION1": 242,
            "ENEMY1": 236,
            "EXP1": 281,
            "GOLD1": 284,
            "LEVEL1": 230,
            "LOCATION1": 239,
            "REWARD_ITM1": 245,
            "TYPE1": 233
        },
        "REROLL_TIME": 229
    },
    "ACCOUNT_PROTECTION_DATE": 441,
    "ACHIEVEMENTS": 466,
    "ALBUM": 439,
    "ARMOR": 448,
    "BACKPACK_OFFS": 169,
    "BACKPACK_SIZE": 5,
    "BAR": 478,
    "BEERS": 458,
    "CLASS": 30,
    "CLASS_RANK": 13,
    "DAMAGE_MAX": 450,
    "DAMAGE_MIN": 449,
    "DUNGEON_13": 491,
    "DUNGEON_LEVEL": 481,
    "EMAIL_DATE": 465,
    "EMAIL_VALID": 464,
    "EVASION": 454,
    "EVENT_TRIGGER_COUNT": 510,
    "EXP": 9,
    "EXP_BONUS": 462,
    "EXP_FOR_NEXTLEVEL": 10,
    "FIDGET_ITEM1": 362,
    "FIDGET_REROLL_TIME": 361,
    "FIRST_PAYMENT": 480,
    "FOO": 477,
    "GENDER": 29,
    "GOLD": 14,
    "GOLD_BONUS": 463,
    "HELLO": 479,
    "HONOR": 11,
    "INVENTORY_OFFS": 49,
    "INVENTORY_SIZE": 10,
    "LEVEL": 8,
    "LIFE": 451,
    "LOCKDURATION": 476,
    "MAGICRSISTANCE": 455,
    "MOUNT": 287,
    "MOUNT_DURATION": 452,
    "MQ_REROLL_TIME": 460,
    "MQ_STATE": 459,
    "MSG_COUNT": 6,
    "MUSHROOM_BOUGHT_AMOUNT": 507,
    "MUSHROOM_BOUGHT_DATE": 508,
    "MUSHROOMS_MAY_DONATE": 438,
    "NEW_DUNGEONS": 442,
    "NEW_FLAGS": 445,
    "NEXT_BATTLE_TIME": 434,
    "PAYMENT_ID": 1,
    "PHP_SESSION": 493,
    "PLAYER_ID": 2,
    "POWER_LIFE_POTION": 503,
    "PVP_REROLL_TIME": 461,
    "RACE": 28,
    "RANK": 12,
    "REGISTRATION_DATE": 4,
    "REGISTRATION_IP": 5,
    "SERVER_TIME": 511,
    "SHAKES_ITEM1": 289,
    "SHAKES_REROLL_TIME": 288,
    "TIMEBAR": 457,
    "TIMEBAR_REROLL_TIME": 456,
    "TOILET": 492,
    "TRANSACTION_COUNT": 453,
    "UNREAD_MESSAGES": 435,
    "VALIDATION_IP": 7,
    "WE_MISS_YOU": 447,
}


# Text Snippet IDs
TXT = {
    "ACH": {
        "1": 6300,
        "2": 6310,
        "3": 6320,
        "4": 6330,
        "5": 6340
    },
    "ARBEIT_TEXT": {
        "1": 41,
        "2": 42,
        "3": 43,
        "4": 70,
        "5": 72,
        "6": 73,
        "7": 74
    },
    "ARENA": {
        "0": 2,
        "1": 113,
        "2": 114,
        "3": 211,
        "4": 212
    },
    "ATTACK": {
        "TXT": 166,
        "OK_STATUS": 8410,
        "STATUS": 8401
    },
    "ATTRIB": {
        "SUM": 9467,
        "HELP": {
            "TXT": 4530,
            "EXT": 4535,
            "HUNTER": 4541,
            "MAGE": 4542,
            "WARRIOR": 4540
        },
    },
    "BEERFEST": {
        "TEXT_OK": 9203,
        "TEXT_TOOHEALTHY": 9202,
        "TITLE_OK": 9201,
        "TITLE_TOOHEALTHY": 9200
    },
    "BO": {
        "BOUGHT": 190,
        "BUY": 184,
        "BUY_FREE": 9532,
        "TEXT_NO": 189,
        "TEXT_OK": 188,
        "TEXT_TOOHEALTHY": 192,
        "TIME": 185,
        "TITLE_NO": 187,
        "TITLE_OK": 186,
        "TITLE_TOOHEALTHY": 191
    },
    "BODY": {
        "GUILD": {
            "DELETED": 4405,
            "DELETED_BY_ADMIN": 4406,
            "EXPELLED": 4407,
            "EXPELLED_BY_ADMIN": 4408,
            "INVITE": 4409
        },
        "BODY_PVP": 4411
    },
    "BUILDING": {
        "1": 258,
        "2": 259,
        "COMPLETE": 306,
        "S_GOTO_CREST": 9447
    },
    "BUY": {
        "1": {
            "1": 1100,
            "1_AKTION": 1140,
            "2": 1101,
            "2_AKTION": 1141,
            "3": 1102,
            "3_AKTION": 1142
        },
        "2": {
            "1": 1103,
            "1_AKTION": 1143,
            "2": 1104,
            "2_AKTION": 1144,
            "3": 1105,
            "3_AKTION": 1145
        },
        "3": {
            "1": 1106,
            "1_AKTION": 1146,
            "2": 1107,
            "2_AKTION": 1147,
            "3": 1108,
            "3_AKTION": 1148
        },
        "4": {
            "1": 1109,
            "1_AKTION": 1149,
            "2": 1110,
            "2_AKTION": 1150,
            "3": 1111,
            "3_AKTION": 1151
        },
        "5": {
            "1": 1112,
            "1_AKTION": 1152,
            "2": 1113,
            "2_AKTION": 1153,
            "3": 1114,
            "3_AKTION": 1154
        },
        "6": {
            "1": 1115,
            "1_AKTION": 1155,
            "2": 1116,
            "2_AKTION": 1156,
            "3": 1117,
            "3_AKTION": 1157
        },
        "7": {
            "1": 1118,
            "1_AKTION": 1158,
            "2": 1119,
            "2_AKTION": 1159,
            "3": 1120,
            "3_AKTION": 1150
        }
    },
    "CHANGE": {
        "TXT": 127,
        "EMAIL": 129,
        "NAME": 128,
        "PASSWORD": 130,
        "IMG": 126
    },
    "CHAR": {
        "AUSDAUER": 62,
        "BEWEGLICHKEIT": 61,
        "INTELLIGENZ": 63,
        "KAMPFWERT": 66,
        "LEBEN": 67,
        "RUESTUNG": 68,
        "SCHADEN": 65,
        "STAERKE": 60,
        "WIDERSTAND": 69,
        "WILLENSKRAFT": 64,
        "IMG": 125
    },
    "CREATE": {
        "ACCOUNT": 21,
        "CHAR": 18,
        "CHARACTER": 36,
        "GOTO_LOGIN": 117
    },
    "CREST": {
        "APPLY": 9417,
        "ELEMENT": 9405,
        "GOTO_BUILDINGS": 9446,
        "INFO": 9445,
        "SUGGEST": 9416,
        "SUGGESTION": 9418,
        "TINCTUREBOXES": 9440,
        "TINCTURES": 9420
    },
    "DELETE": {
        "ACCOUNT": {
            "TXT": 131,
            "FIELD": {
                "1": 146,
                "2": 147,
                "3": 148
            },
            "TITLE": 145
        }
    },
    "DOCHANGE": {
        "TXT": 132,
        "EMAIL": {
            "FIELD": {
                "1": 138,
                "2": 139,
                "3": 140
            },
            "TITLE": 137
        },
        "NAME": {
            "NAME": 156,
            "FIELD": {
                "1": 134,
                "2": 135,
                "3": 136
            },
            "TITLE": 133
        },
        "PASSWORD": {
            "FIELD": {
                "1": 142,
                "2": 143,
                "3": 144
            },
            "TITLE": 141
        },
    },
    "DONATE": {
        "GOLD": {
            "1": 250,
            "2": 251
        },
        "MUSH": {
            "1": 252,
            "2": 253
        }
    },
    "DU": {
        "GEWONNEN": 239,
        "VERLOREN": 240,
        "WAS": {
            "GEWONNEN": 8807,
            "VERLOREN": 8808
        }
    },
    "DUNGEON": {
        "INFO": 8250,
        "NAME": 8200,
        "NAMES": 8840
    },
    "ECONOMIC": {
        "LOSS": {
            "TXT": 9528,
            "NEXT": 9529,
            "SUFFIX": 9530
        }
    },
    "EMAIL": {
        "TXT": 19,
        "CHANGED": 154,
        "NAG": 234,
        "NAG_TITLE": 237,
        "RESEND": 235,
        "RESENT": 236
    },
    "ENCHANT": {
        "HINT": 10121,
        "NAMES": 10200,
        "VALUES": 10400
    },
    "ERROR": {
        "AGB": 507,
        "ALREADY_IN_GUILD": 520,
        "ARBEITEN": {
            "ARENA": 604,
            "MAINQUEST": 606,
            "TAVERNE": 605
        },
        "ATTACK_AGAIN": 554,
        "BEER": 541,
        "COMPROMISED_ACCOUNT": 9103,
        "EMAIL": {
            "MISMATCH": 517,
            "REJECTED": 504,
            "WRONG": 515
        },
        "EMPTY_GUILD_NAME": 519,
        "FACE_DATA_INCORRECT": 0x0202,
        "FIGHT_SELF": 522,
        "GUILD": {
            "ALREADY_ATTACKING": 8603,
            "ALREADY_MEMBER": 545,
            "ALREADY_UNDER_ATTACK": 8601,
            "ALREADY_YOU_OTHER": 532,
            "ALREADY_YOU_THIS": 534,
            "ATTACK_DELAY": 8602,
            "ATTACK_STATUS": 8604,
            "BUILDING_MAX": 528,
            "BUILDING_NOT_FOUND": 527,
            "CASH_FULL": 9468,
            "CHAT_HISTORY": 539,
            "CHAT_NOT_MEMBER": 538,
            "CHAT_TEXT_ERROR": 540,
            "DESCR_TOO_LONG": 9531,
            "DONATE_FRA": 558,
            "DONATE_NEG": 557,
            "EMAIL_VALIDATE": 552,
            "FIGHT_TOO_EXPENSIVE": 8600,
            "IS_FULL": 531,
            "LACK_GOLD": 526,
            "LACK_MUSH": 525,
            "MASTER_CANT_BE_OFFICER": 530,
            "MUSH_FREE": 553,
            "NAME_CHARACTERS": 551,
            "NAME_LENGTH": 550,
            "NAME_REJECTED": 549,
            "NOT_ALLOWED": 524,
            "NOT_FOUND": 523,
            "NOT_MEMBER": 529,
            "NOT_REAL_MEMBER": 533,
            "PLAYER_NOT_FOUND": 535,
            "RANK_WRONG": 9400,
            "TOO_EXPENSIVE": 537
        },
        "IMGSVR_DOWN": 607,
        "INBOX_FULL": 508,
        "INPUT_REQUIRED": 562,
        "INVENTORY_FULL": 609,
        "INVENTORY_FULL_ADV": 610,
        "INVITE": {
            "EMAIL_REJECTED": 565,
            "NOT_VALIDATED": 563,
            "TOO_MANY": 564
        },
        "LOGIN_FAILED": 506,
        "MAIL_EXISTS": 556,
        "MSG_LEVEL_TOO_LOW": 8811,
        "MSG_NOT_VALIDATED": 8812,
        "NAME": {
            "EXISTS": 501,
            "MISMATCH": 516,
            "REJECTED": 505,
            "TOO_SHORT": 502
        },
        "NO_ENDURANCE": 543,
        "NO_INDEX_FREE": 521,
        "NO_MUSH_BAR": 542,
        "NO_MUSH_MQ": 548,
        "NO_MUSH_PVP": 547,
        "NO_SLOT_FOR_FLUSHING": 9455,
        "NOT_INVITED": 546,
        "PASSWORD_MISMATCH": 511,
        "PASSWORD_TOO_SHORT": 503,
        "PLAYER_NOT_FOUND": 518,
        "RECIPIENT_NOT_FOUND": 509,
        "RECIPIENT_SELF": 510,
        "REQUEST_PW": 555,
        "SELECTCLASS": 600,
        "SELL_ITEM": 561,
        "SUBJECT_TOO_SHORT": 536,
        "TAVERNE": {
            "ARBEITEN": 602,
            "ARENA": 601,
            "MAINQUEST": 603
        },
        "TOILET_EMPTY": 9456,
        "TOO_EXPENSIVE": 0x0200,
        "TOO_SOON_SUGGESTION": 9419,
        "UNKNOWN": 999,
        "WORSE_MOUNT": 544,
        "WRONG_PASSWORD": 513,
        "ACCOUNTS_PER_IP": 608,
        "LOCKED_ADMIN": 560,
        "LOCKED_PAYMENT": 559
    },
    "GUILD": {
        "AUSBAUEN": 228,
        "GEBAEUDE": {
            "1_POPUP": 225,
            "1_POPUP_EX": 8993,
            "2_POPUP": 226,
            "3_POPUP": 227,
            "NAME1": 4500,
            "STUFE": 181,
            "WERT1": 4510
        },
        "GOLD": 0x0100,
        "GRUENDEN": {
            "TXT": 157,
            "OK": 158,
            "TITLE": 159
        },
        "INVITE": 174,
        "INVITE_TITLE": 175,
        "KICK": 170,
        "KICK_TITLE": 171,
        "MASTER": 172,
        "MASTER_TITLE": 173,
        "MUSH": 0x0101,
        "QUIT": 176,
        "QUIT_1": 271,
        "QUIT_TITLE": 177,
        "RAIDSTART": 9101,
        "RAIDSTART_TITLE": 9100,
        "ATTACK": {
            "FAIL": 8656,
            "PLAYER": 8450,
            "SUCCESS": 8654
        },
        "BATTLE": {
            "LOST": 8505,
            "MSG": 8440,
            "POPUP": 8420,
            "SKIP": 8400,
            "WON": 8500
        },
        "DEFENSE_FAIL": 8658,
        "DEFENSE_SUCCESS": 8657,
        "DUNGEON_COMPLETED": 9449,
        "EPICITEM": 9450,
        "HONOR_GAINED": 8510,
        "HONOR_LOST": 8511,
        "JOINED": 270,
        "JOINED_TOO_RECENTLY": 8660,
        "LEVEL_UP": 9448,
        "RAID_FAIL": 8991,
        "RAID_SUCCESS": 8990
    },
    "GOLD": {
        "TXT": 75,
        "GAINED": 123,
        "LOST": 124,
        "SPENT": 203,
        "BONUS_PREFIX": 232,
        "BONUS_SUFFIX": 233
    },
    "GOTO": {
        "GILDEN": 51,
        "LOGIN": 24,
        "SIGNUP": 25,
        "SPIELER": 50
    },
    "HALL": {
        "LIST": {
            "COLUMN": {
                "1": 52,
                "2": 53,
                "3": 54,
                "3G": 57,
                "4": 55,
                "4G": 58,
                "5": 56
            }
        },
        "GOTO": 49,
        "SUCHFELD_TEXT": 59
    },
    "HUTMANN": {
        "BACK": 303,
        "BETCOMMENT": {
            "1": 297,
            "2": 298,
            "3": 299
        },
        "CANTAFFORD": 300,
        "CHOOSECUP": 292,
        "DAMN": 302,
        "GOLDBET": 290,
        "INSTR": 293,
        "LOSE": 289,
        "MUSHBET": 291,
        "NEWGAME": 296,
        "OFFER": 287,
        "OK": 295,
        "START": 294,
        "WIN": 288,
        "YEAH": 301
    },
    "INV": {
        "ACC_TEXT": 8801,
        "ACC_TITLE": 8800,
        "VAL_TEXT": 8803,
        "VAL_TITLE": 8802
    },
    "INVITE": {
        "EMAIL": 9106,
        "INSTR": 9109,
        "SUBJECT": 9108,
        "SUCCESS": 9110,
        "TITLE": 9107
    },
    "ITEM": {
        "ATTRIB": {
            "CLASS": {
                "1": 1031,
                "10": 1040,
                "11": 1041,
                "12": 1042,
                "2": 1032,
                "3": 1033,
                "4": 1034,
                "5": 1035,
                "6": 1036,
                "7": 1037,
                "8": 1038,
                "9": 1039
            },
            "CLASSES": 1030
        },
        "CLASS": {
            "1": 1001,
            "10": 1010,
            "2": 1002,
            "3": 1003,
            "4": 1004,
            "5": 1005,
            "6": 1006,
            "7": 1007,
            "8": 1008,
            "9": 1009
        },
        "CLASSES": 1000
    },
    "ITMNAME": {
        "10": 3450,
        "10_EPIC": 7450,
        "11": 8300,
        "12": 8350,
        "13": 9112,
        "14": 10000,
        "1": {
            "1": 3000,
            "1_EPIC": 7000,
            "2": 3500,
            "2_EPIC": 7500,
            "3": 3850,
            "3_EPIC": 7850
        },
        "2": {
            "1": 3050,
            "1_EPIC": 7050
        },
        "3": {
            "1": 3100,
            "1_EPIC": 7100,
            "2": 3600,
            "2_EPIC": 7600,
            "3": 3950,
            "3_EPIC": 7950
        },
        "4": {
            "1": 3150,
            "1_EPIC": 7150,
            "2": 3650,
            "2_EPIC": 7650,
            "3": 4000,
            "3_EPIC": 8000
        },
        "5": {
            "1": 3200,
            "1_EPIC": 7200,
            "2": 3700,
            "2_EPIC": 7700,
            "3": 4050,
            "3_EPIC": 8050
        },
        "6": {
            "1": 3250,
            "1_EPIC": 7250,
            "2": 3750,
            "2_EPIC": 7750,
            "3": 4100,
            "3_EPIC": 8100
        },
        "7": {
            "1": 3300,
            "1_EPIC": 7300,
            "2": 3800,
            "2_EPIC": 7800,
            "3": 4150,
            "3_EPIC": 8150
        },
        "8": 3350,
        "8_EPIC": 7350,
        "9": 3400,
        "9_EPIC": 7400,
        "EXT": 4600
    },
    "LUXURY": {
        "ALREADY": 9260,
        "BTN": 9259,
        "BTN2": 9262,
        "BTN3": 9264,
        "BUTTON": 9256,
        "CONFIRM": 9261,
        "CONFIRM2": 9263,
        "TEXT": 9258,
        "TITLE": 9257
    },
    "MOUNT": {
        "TXT": 194,
        "DURATION": 195,
        "FOREVER": 9150,
        "GAIN1": 4520
    },
    "PASSWORD": {
        "TXT": 17,
        "CHANGED": 152,
        "SMILEY": {
            "HAPPY": 8997,
            "NEUTRAL": 8996,
            "SAD": 0x2323
        }
    },
    "PAYICON": {
        "1": 1200,
        "2": 1201,
        "3": 1202,
        "4": 1203,
        "5": 1204,
        "6": 1205
    },
    "POPUP": {
        "INVITE": 205,
        "KICK": 207,
        "LEITER": 209,
        "OFFIZIER": 208,
        "PROFILE": 206,
        "REVOLT": 8650
    },
    "POST": {
        "TXT": 8,
        "ACCEPT": 97,
        "CANCEL": 84,
        "DELETE": 81,
        "FLUSH_TEXT": 9451,
        "FORWARD": 9401,
        "FROM": 94,
        "LIST": {
            "COLUMN": {
                "1": 85,
                "2": 86,
                "3": 87
            }
        },
        "READ": 80,
        "REPLY": 178,
        "RETURN": 96,
        "SEND": 83,
        "TIME": 95,
        "TITLE": {
            "INBOX": 88,
            "READ": 89,
            "WRITE": 90
        },
        "VIEWFIGHT": 238,
        "WRITE": 82
    },
    "PURCHASE": {
        "CANCELLED": 9901,
        "CHECKIN_ERROR": 9905,
        "ERROR": 9902,
        "PAYWAIT": 9904,
        "SUCCESS": 9906,
        "WAIT": 9903
    },
    "QO": {
        "CHOOSE": 98,
        "NO_THIRST": 9784,
        "RETURN": 101,
        "REWARD": 99,
        "START": 100
    },
    "QUEST": {
        "CANCEL": 104,
        "CLOSER": 1450,
        "COLLECT": {
            "AMOUNT": 2050,
            "TITLE": 1330,
            "WHAT": 1650
        },
        "ESCORT": {
            "LOCATION": 6200,
            "PRECLOSER": 6250,
            "TITLE": 6100,
            "WHOM": 6150
        },
        "FETCH": {
            "FROM": 1800,
            "PRECLOSER": 2100,
            "TITLE": 1360,
            "WHAT": 2000
        },
        "KILL": {
            "LOCATION": 1600,
            "PRECLOSER": 1700,
            "TITLE": 5500,
            "WHOM": 5700
        },
        "LOCATION": 1500,
        "OFFER": {
            "TEXT": 6405,
            "TITLE": 0x1900
        },
        "OPENER": 1400,
        "SCOUT": {
            "TASK1": 1550,
            "TASK2": 1750,
            "TITLE": 1300
        },
        "TEXT": 5000,
        "TRANSPORT": {
            "LOCATION": 6000,
            "PRECLOSER": 6050,
            "TITLE": 5900,
            "WHAT": 5950
        }
    },
    "RAID": {
        "LOST": 9005,
        "TEXT": 8820,
        "WON": 9000
    },
    "RANKMSG": {
        "1": 260,
        "2": 261,
        "3": 262,
        "4": 263,
        "5": 264,
        "6": 265,
        "7": 266,
        "8": 267,
        "9": 268,
        "10": 269
    },
    "RESEND": {
        "BTN1": 281,
        "BTN2": 283,
        "TEXT": 282,
        "TITLE": 284
    },
    "REVOLT": {
        "CHAT_MSG": 8653,
        "WARNING": 8651,
        "WARNING_TITLE": 8652
    },
    "RUESTUNG": {
        "TXT": 163,
        "SUM": 199,
        "SUM_HINT": 202
    },
    "SCROLL": {
        "BOUGHT": 10128,
        "BUYHINT": 10123,
        "BUYNOW": 10127,
        "DATE": 10122,
        "NAME": 10120
    },
    "SPECIAL_ACTION": {
        "TEXT_OK": 9226,
        "TEXT_TOOHEALTHY": 0x2400,
        "TITLE": 9206
    },
    "STALL": {
        "STALL": 5,
        "BUY": 112,
        "LAUFZEIT": 111,
        "MOUNTTEXT": 2430,
        "MOUNTTITEL": 2420,
        "PROLONG": 213,
        "SCHATZ": 278,
        "TEXT": 110,
        "TITEL": 109,
        "UPGRADE": 214
    },
    "SUBJECT": {
        "GUILD": {
            "DELETED": 4400,
            "DELETED_BY_ADMIN": 4401,
            "EXPELLED": 4402,
            "EXPELLED_BY_ADMIN": 4403,
            "INVITE": 4404
        },
        "PVP": 4410
    },
    "TITLE": {
        "FORGOT_PASSWORD": 27,
        "SIGNUP": 26,
        "WORK": 40
    },
    "TOILET": {
        "DROPTWICE": 9786,
        "FULL": 9465,
        "HINT": 9457,
        "ITEM": 9785,
        "TANKFULL": 9466
    },
    "TOWER": {
        "TXT": 9470,
        "BONUS": 9773,
        "ENEMY_NAMES": 9570,
        "GUYS": 9770,
        "INFO": 9772,
        "LEVEL": 9771,
        "LOST": 9779,
        "TRY": 9565,
        "WON": 9774
    },
    "VALIDATE": {
        "ERR": 246,
        "ERR_TITLE": 243,
        "OK": 245,
        "OK_TITLE": 242,
        "UNN": 247,
        "UNN_TITLE": 244
    },
    "WITCH": {
        "BOOK": 10124,
        "HINT": 9907,
        "WRONGTYPE": 9915
    },
    "ABBRECHEN": 71,
    "AGB": 28,
    "AGB_LINK": 272,
    "ALBUM": 9111,
    "ALERT_TEXT": 8810,
    "ALERT_WORDS": 8809,
    "ALREADY_VALID": 285,
    "ANLEITUNG_LINK": 274,
    "ARBEITEN": 39,
    "ARENA_TITLE": 115,
    "AUSDAUER": 193,
    "AUSGEWICHEN": 106,
    "BACK": 37,
    "BAD_PASSWORDS": 8994,
    "BASIS": 167,
    "BEARD": 30,
    "BETREFF": 92,
    "BLOCKEN": 119,
    "BONUS": 168,
    "BOOST_COPYCAT": 9564,
    "BROWS": 33,
    "CATAPULT": 9246,
    "CHAT_CAPTION": 182,
    "CHARAKTER": 7,
    "CLASSDESC": 2459,
    "CLASSNAME": 2456,
    "CMD_DONATE_GOLD": 254,
    "CMD_DONATE_MUSH": 0xFF,
    "COLLECTION": 9114,
    "COLOR": 120,
    "COMPARE": 9469,
    "CONGRATS": 8804,
    "COPYCAT_NAME": 9471,
    "COUNTRY_NAMES": 9800,
    "CS": 9204,
    "DATENSCHUTZ": 275,
    "DATENSCHUTZ_LINK": 273,
    "DAY": 309,
    "DAYS": 310,
    "DEBUG_INFO": 286,
    "DISCONNECTED": 216,
    "DURATION": 103,
    "EARS": 34,
    "EHRENHALLE": 10,
    "EMPFAENGER": 91,
    "ENEMY_SELF": 307,
    "ENTERDESC": 116,
    "ENTERGUILDDESC": 179,
    "EXP": 102,
    "EXPBONUS_PREFIX": 230,
    "EXPBONUS_SUFFIX": 231,
    "EXPNEXTLEVEL": 108,
    "EYES": 32,
    "FIGHT_LOSE": 4320,
    "FIGHT_WIN": 4300,
    "FIGHTS_COUNTER": 9105,
    "FONT_NAME": 8700,
    "FORGOT_PASSWORD": 22,
    "FORUM_LINK": 223,
    "FRIEND_SUBJECT": 279,
    "GAMETITLE": 222,
    "GEBLOCKT": 164,
    "GEGNERSTUFE": 229,
    "GENDER_F": 249,
    "GENDER_M": 248,
    "GESAMT": 169,
    "GILDEN": 9,
    "GUILDHALL_LEADER": 304,
    "GUILDHALL_MEMBERS": 305,
    "GUILDNOTEXT": 180,
    "HAIR": 35,
    "HAPPY_HOUR": 9151,
    "HERO_OF_THE_DAY": 8452,
    "HERO_OF_THE_DAY_TITLE": 8451,
    "HEROES_OF_THE_DAY_TITLE": 8453,
    "HL_MAINQUESTS_NAME": 9534,
    "HL_MAINQUESTS_TITLE": 9533,
    "HONOR_GAINED": 121,
    "HONOR_LOST": 122,
    "HOUR": 311,
    "HOURS": 312,
    "IMPRESSUM_LINK": 161,
    "IMPRESSUM_TEXT": 162,
    "ITM_ILLEGAL_COPY": 9475,
    "KRITISCHMINMAX": 200,
    "LEGALCHARS": 280,
    "LM": 317,
    "LOCK_REASON": 9236,
    "LOGIN": 14,
    "LOGIN_LEGAL_1": 276,
    "LOGIN_LEGAL_2": 277,
    "LOGOUT": 48,
    "MAX": 215,
    "MESSAGE": 165,
    "MODIFY_CHARACTER": 155,
    "MONSTER_NAME": 2200,
    "MOUTH": 29,
    "MQ_MUSHHINT": 210,
    "MUSH_DONATE_OBSOLETE": 8998,
    "MUSH_SPENT": 204,
    "MUSHBET_BOUGHT": 308,
    "MUSHROOMS_BOUGHT": 9102,
    "MUTE": 150,
    "NACHRICHT": 93,
    "NAME": 16,
    "NAME_CHANGED": 153,
    "NECESSARY_CLASS": 9559,
    "NEW_HONOR_ACH": 8655,
    "NEW_HONOR_ACH2": 8659,
    "NEW_MONSTER_NAMES": 9010,
    "NOCLASS": 218,
    "NOCLASS_DESC": 219,
    "NODESC": 118,
    "NOGUILD": 107,
    "NOMOUNT": 196,
    "NOSE": 31,
    "OK": 44,
    "OLD_EMAIL": 9104,
    "OPTION_TITLE": 151,
    "OPTIONEN": 12,
    "PILZDEALER": 6,
    "PILZE": 77,
    "POTION_KILL_INSTRUCTIONS": 316,
    "PVP_LOSE": 4235,
    "PVP_WIN": 4215,
    "RACEDESC": 2448,
    "RACENAME": 2440,
    "RANDOM": 47,
    "RANKNAME": 4543,
    "RE": 221,
    "RECONNECT": 217,
    "REMAINING": 315,
    "REQUEST_PASSWORD": 20,
    "REQUEST_SIGNUP": 23,
    "ROB": 9526,
    "ROUNDS_PLURAL": 241,
    "SCHADEN": 160,
    "SCHMIEDE": 3,
    "SELECT_WORLD": 9900,
    "SERVER_STARTED": 8992,
    "SHIELD_FORMULA": 9205,
    "SHOP_LINK": 8805,
    "SHOPS_NEWWAREZ": 79,
    "SIGNUP": 13,
    "SILBER": 76,
    "SILVER_HINT": 220,
    "SKIP_FIGHT": 105,
    "SPECIAL": 45,
    "SPECIAL2": 46,
    "TAG": 197,
    "TAGE": 198,
    "TATTOO": 38,
    "TAVERNE": 1,
    "TEMPORARY": 313,
    "TIMEBAR": 224,
    "TV_DISABLE": 10125,
    "TV_HINT": 10126,
    "UND": 78,
    "UNKNOWN": 9113,
    "UNTIL": 314,
    "VOLUME": 149,
    "WAFFENSCHADEN": 201,
    "WELCOME": 15,
    "WELTKARTE": 11,
    "WHISPER": 8813,
    "WORK_FINISH": 8806,
    "ZAUBERLADEN": 4,
    "ZURGILDE": 183,
}


# Label Texts
LBL = {
    "ALBUM": {
        "COLLECTION": 24379,
        "HEADING": 24380,
        "HINT": 24384,
        "PAGENUMBER_LEFT": 24377,
        "PAGENUMBER_RIGHT": 24378
    },
    "CHAR": {
        "ALBUM": 22966,
        "DELAY": 23077,
        "MOUNT": {
            "DESCR": 22988,
            "GAIN": 22990,
            "NAME": 22987,
            "RUNTIME": 22989
        },
        "RUESTUNG": 22992
    },
    "CREATE": {
        "CLASS": 198,
        "CLASS_DESC": 199,
        "GOTO_LOGIN": 201,
        "RACE": 196,
        "RACE_DESC": 197
    },
    "DEALER": {
        "PAYICON": {
            "1": 23244,
            "2": 23245,
            "3": 23246,
            "4": 23247,
            "5": 23248,
            "6": 23249,
            "7": 23250,
            "8": 23251,
            "9": 23252
        }
    },
    "EMAIL": {
        "TXT": 52,
        "NAG": 24371,
        "RESEND": 24373
    },
    "FIGHT": {
        "CHAR": {
            "AUSDAUER": 24166,
            "AUSDAUER_CAPTION": 24176,
            "BEWEGLICHKEIT": 24165,
            "BEWEGLICHKEIT_CAPTION": 24175,
            "INTELLIGENZ": 24167,
            "INTELLIGENZ_CAPTION": 24177,
            "STAERKE": 24164,
            "STAERKE_CAPTION": 24174,
            "WILLENSKRAFT": 24168,
            "WILLENSKRAFT_CAPTION": 24178
        },
        "OPP": {
            "AUSDAUER": 24171,
            "AUSDAUER_CAPTION": 24181,
            "BEWEGLICHKEIT": 24170,
            "BEWEGLICHKEIT_CAPTION": 24180,
            "INTELLIGENZ": 24172,
            "INTELLIGENZ_CAPTION": 24182,
            "STAERKE": 24169,
            "STAERKE_CAPTION": 24179,
            "WILLENSKRAFT": 24173,
            "WILLENSKRAFT_CAPTION": 24183
        },
        "OPPGUILD": 23833,
        "PLAYERGUILD": 23832,
        "REWARDEXP": 24209,
        "REWARDGOLD": 24203,
        "REWARDMUSH": 24207,
        "REWARDSILVER": 24205,
        "SUMMARY": 24197
    },
    "GILDE": {
        "ATTACK": 0x5B5B,
        "CHAT": 23406,
        "CHAT_CAPTION": 23405,
        "CREST_ELEMENT": 24557,
        "CREST_INSCRIPTION": 24558,
        "DEFENCE": 23388,
        "DIALOG": {
            "TEXT": {
                "INVITE": 23504,
                "KICK": 23502,
                "MASTER": 23503,
                "QUIT": 23501,
                "RAID": 23506,
                "REVOLT": 23505
            }
        },
        "GEBAEUDE": {
            "KOSTEN_GOLD": 23468,
            "KOSTEN_MUSH": 23471,
            "NAME": 23453,
            "STUFE": 23465,
            "STUFE_CAPTION": 23462,
            "WERT": 23459,
            "WERT_CAPTION": 23456
        },
        "GOLD": 23487,
        "GOLD2": 23493,
        "GRUENDEN_TEXT": 23361,
        "LINK": 23447,
        "MUSH": 23488,
        "MUSH2": 23494,
        "RANG": 23366,
        "TITEL": 23364
    },
    "HALL": {
        "GOTO": {
            "GILDEN": 292,
            "GILDEN_HL": 293,
            "SPIELER": 289,
            "SPIELER_HL": 290
        }
    },
    "HUTMANN": {
        "GOLDBET": 23567,
        "GOLDBET2": 23574,
        "INSTR": 23580,
        "MUSHBET": 23568,
        "MUSHBET2": 23575,
        "TEXT": 23566
    },
    "IF": {
        "AGB": 20,
        "ANLEITUNG": 24,
        "DATENSCHUTZ": 22,
        "FORUM": 16,
        "GOLD": 30,
        "IMPRESSUM": 14,
        "LOGOUT": 12,
        "PILZE": 32,
        "SHOP": 26,
        "SILBER": 31
    },
    "INVITE": {
        "SUCCESS": 22976,
        "TEXT": {
            "1": 22968,
            "2": 22970,
            "3": 22972
        }
    },
    "LOGIN": {
        "LEGAL": {
            "0": 80,
            "LEGAL_1": 71,
            "LEGAL_2": 74
        },
        "PASSWORD": 59
    },
    "MAINQUEST": {
        "MUSHHINT": 24360,
        "TEXT": 24359,
        "TITLE": 24358,
        "TITLE1": 24309
    },
    "OPTION": {
        "CHANGE": 24250,
        "DOCHANGE": 24257,
        "FIELD": {
            "1": 24258,
            "2": 24259,
            "3": 24260
        },
        "IMAGE": 24247,
        "TITLE": 24246,
        "VER": 24282,
        "VOLUME": 24268
    },
    "POST": {
        "_FLUSH_TEXT": 24596,
        "GUILD": 23290,
        "LIMIT": 23288,
        "TITLE": {
            "INBOX": 23266,
            "READ": 23267,
            "WRITE": 23268
        }
    },
    "QO": {
        "CHOICE": {
            "1": 23596,
            "1_HL": 23601,
            "2": 23597,
            "2_HL": 23602,
            "3": 23598,
            "3_HL": 23603,
            "4": 23599,
            "4_HL": 23604,
            "5": 23600,
            "5_HL": 23605
        },
        "CHOOSE": 23590,
        "QUESTNAME": 23606,
        "QUESTSTODAY": 23618,
        "QUESTTEXT": 23607,
        "REWARD": {
            "TXT": 23608,
            "EXP": 23613,
            "GOLD": 23610,
            "ITM": 23614,
            "SILVER": 23612
        },
        "TIME": 23615
    },
    "SCR": {
        "ARBEITEN": {
            "TEXT": 296,
            "TEXT2": 297,
            "TIME": 315
        },
        "CHAR": {
            "AUSDAUER": 365,
            "AUSDAUER_CAPTION": 375,
            "BEWEGLICHKEIT": 364,
            "BEWEGLICHKEIT_CAPTION": 374,
            "EHRE": 22956,
            "EXPLABEL": 359,
            "GILDE": 22955,
            "INTELLIGENZ": 366,
            "INTELLIGENZ_CAPTION": 376,
            "KAMPFWERT": 369,
            "KAMPFWERT_CAPTION": 379,
            "LEBEN": 370,
            "LEBEN_CAPTION": 380,
            "NAME": 355,
            "PREIS1": 388,
            "RUESTUNG": 371,
            "RUESTUNG_CAPTION": 381,
            "SCHADEN": 368,
            "SCHADEN_CAPTION": 378,
            "SILBER1": 398,
            "STAERKE": 363,
            "STAERKE_CAPTION": 373,
            "WIDERSTAND": 372,
            "WIDERSTAND_CAPTION": 382,
            "WILLENSKRAFT": 367,
            "WILLENSKRAFT_CAPTION": 377
        }
    },
    "STALL": {
        "GAIN": 23347,
        "GOLD": 23353,
        "LAUFZEIT": 23346,
        "MUSH": 23355,
        "SCHATZ": 23348,
        "SCHATZGOLD": 23350,
        "SCHATZSILBER": 23352,
        "TEXT": 23345,
        "TITEL": 23344
    },
    "AGB": 70,
    "ARENA_DELAY": 23303,
    "ARENA_TEXT": 23299,
    "BEARD": 190,
    "BROWS": 188,
    "COLOR": 195,
    "COMPARE": 24626,
    "COPYCAT_NAME": 24738,
    "COUNTRY": 25617,
    "CS": 24484,
    "DAMAGE_INDICATOR": 24196,
    "DATENSCHUTZ": 73,
    "DISCONNECTED": 24368,
    "DUNGEON_CONGRATS": 24355,
    "EARS": 192,
    "ERROR": 61,
    "EYES": 189,
    "FORGOT_PASSWORD": 63,
    "FUCK": 85,
    "GOTO_LOGIN": 65,
    "GOTO_SIGNUP": 67,
    "HAIR": 187,
    "HERO_OF_THE_DAY": 24211,
    "HERO_OF_THE_DAY_TITLE": 24210,
    "HLMAINQUESTS_TITLE": 24762,
    "LIFEBAR_CHAR": 24162,
    "LIFEBAR_OPP": 24163,
    "LM": 24285,
    "MOUTH": 186,
    "NAME": 50,
    "NAMERANK_CHAR": 24156,
    "NAMERANK_OPP": 24157,
    "NOSE": 191,
    "PASSWORD": 54,
    "PW_GOTO_LOGIN": 25616,
    "QUESTBAR_TEXT": 23210,
    "SCREEN_TITLE": 113,
    "SERVER": 25620,
    "SPECIAL": 193,
    "SPECIAL2": 194,
    "TIMEBAR_TEXT": 23545,
    "TOILET_AURA": 24620,
    "TOWER_BOOSTPRICELABEL": 25604,
    "TOWER_EXPLABEL": 25603,
    "TV_CHECKBOX": 25705,
    "WINDOW_TITLE": 46,
    "WINDOW_TITLE_HIGH": 25614,
    "WORLD_TITLE": 25623
}


# ???
BNC = {
    "CHAR": {
        "ACH": 23076,
        "PREISE": 409,
        "RIGHTPANE": 23078,
        "SECONDPROP": 408
    },
    "CHARSPECIALOVL": {
        "DARKELF_M": 351,
        "DWARF_F": 349,
        "DWARF_M": 343,
        "ELF_F": 347,
        "ELF_M": 341,
        "GNOM_M": 350,
        "GOBLIN_F": 345,
        "GOBLIN_M": 342,
        "HUMAN_F": 348,
        "HUMAN_M": 344,
        "ORC_F": 346
    },
    "CITY": {
        "CA_OVL": 264,
        "ORK": 266,
        "OVERLAYS": 267,
        "STATISTEN": 268,
        "ZWERG": 265
    },
    "GILDE": {
        "CHAT": 23449,
        "CREST": 24541,
        "CREST_CONTROLS": 24570,
        "DIALOG": {
            "INVITE": 23516,
            "KICK": 23514,
            "MASTER": 23515,
            "RAID": 23518,
            "REVOLT": 23517
        },
        "GEBAEUDE": 23486,
        "KATAPULT": 24528,
        "LISTBUTTONS": 23396,
        "SCHATZ": 23497,
        "SET": {
            "MASTER": 23402,
            "MEMBER": 23400,
            "OFFICER": 23401
        }
    },
    "HUTBECHER": {
        "1_HOVER": 23582,
        "2_HOVER": 23583,
        "3_HOVER": 23584
    },
    "HUTMANN": {
        "BECHERCHOOSE": 23585,
        "LOST": 23587,
        "PLACEBET": 23581,
        "WON": 23586
    },
    "IF": {
        "BUTTONS": 112,
        "MAIN": 9,
        "OVL": 10,
        "STATS": 33
    },
    "POST": {
        "DAWN": 23263,
        "FLUSHMSG": 24592,
        "LIST": 23291,
        "NIGHT": 23264,
        "READ": 23293,
        "WRITE": 23292
    },
    "SCREEN": {
        "ALBUM": 24438,
        "ARBEITEN": {
            "TXT": 316,
            "SUCCESS": 318,
            "WAIT": 317
        },
        "ARENA": {
            "TXT": 23304,
            "DAWN": 23307,
            "DAY": 23305,
            "NIGHT": 23306
        },
        "BUILDCHAR": 116,
        "CHAR": 23079,
        "CHAR_GOLDEN": 24531,
        "CITY": {
            "TXT": 263,
            "DAWN": 261,
            "DAY": 262,
            "NIGHT": 260
        },
        "DEALER": 23256,
        "DEALER2": 23257,
        "DEMO": 24243,
        "DISCONNECTED": 24370,
        "EMAIL_NAG": 24375,
        "FIDGET": 23103,
        "FIGHT": 24240,
        "GILDE_GRUENDEN": 23498,
        "GILDEN": 23499,
        "HALLE": 283,
        "HLMAINQUESTS": 24767,
        "HUTMANN": 23588,
        "INVITE": 22974,
        "MAINQUEST": 24366,
        "MAINQUESTS": 24353,
        "OPTION": 24308,
        "POST": 23294,
        "QUEST": 23213,
        "SHAKES": 23104,
        "STALL": 23358,
        "TAVERNE": 23532,
        "TOILET": 24598,
        "TOWER": 24716,
        "WITCH": 25635,
        "WORLDMAP": 23106
    },
    "VOLK": {
        "BTNS": {
            "ALL": 165,
            "F": 163,
            "M": 164
        }
    },
    "WINDOW": {
        "ARENA": 23302,
        "FORGOT_PASSWORD": 79,
        "LOGIN": 77,
        "SIGNUP": 78
    },
    "ALBUM_CAT_IN": 24435,
    "BEERFEST": 24481,
    "BEEROFFER": 23630,
    "BUBBLES": 281,
    "CHARIMG": 329,
    "CHARIMG2": 340,
    "DUNGEON_CONGRATS": 24356,
    "FIDGET_DAY": 23090,
    "FIDGET_NIGHT": 23091,
    "FIGHT_REWARDS": 24208,
    "FUCK": 81,
    "HERO_OF_THE_DAY": 24212,
    "INVITE_INPUTDIALOGUE": 22975,
    "INVITE_SUCCESS": 22978,
    "OPPIMG": 23844,
    "OPPIMG2": 23855,
    "OPTION_DOCHANGE": 24306,
    "OPTION_DORESEND": 24307,
    "PURCHASE_BUTTONS": 25634,
    "QUESTOFFER": 23625,
    "SCR_BUILDCHAR": 118,
    "SPECIAL_ACTION": 24496,
    "STALL_BOESE": 23342,
    "STALL_GUT": 23341,
    "TAVERNE_CAS": 23533,
    "TAVERNE_QUESTOVL": 23539,
    "TOILET_OVERLAYS": 24613,
    "TOWER_BOOSTPRICE": 25608,
    "TOWER_PIECES": 24752
}


# Buttons
BTN = {
    "CHAR": {
        "ALBUM": 22964,
        "ATTACK": 22961,
        "GILDE": 22962,
        "INVITE": 22963,
        "MESSAGE": 22960,
        "ROB": 24741
    },
    "DEALER": {
        "BUY": {
            "1": 23223,
            "2": 23224,
            "3": 23225
        }
    },
    "GILDE": {
        "ATTACK": 23381,
        "CHAT_DOWN": 23404,
        "CHAT_UP": 23403,
        "CREST": {
            "CHANGE_NEXT": 24556,
            "CHANGE_PREV": 24555,
            "COLOR_NEXT": 24554,
            "COLOR_PREV": 24553,
            "GOTO_GEBAEUDE": 24542,
            "OK": 24589
        },
        "DEFEND": 23382,
        "DEMOTE": 23375,
        "DIALOG": {
            "CANCEL": 23508,
            "OK": {
                "INVITE": 23511,
                "KICK": 23509,
                "MASTER": 23510,
                "RAID": 23513,
                "REVOLT": 23512
            }
        },
        "GEBAEUDE_GOTO_CREST": 24540,
        "GEBAEUDE_IMPROVE": 23480,
        "GOLD": 23491,
        "GRUENDEN": 23363,
        "INVITE": 23371,
        "KATAPULT": 24507,
        "KICK": 23373,
        "MASTER": 23376,
        "MUSH": 23492,
        "PROFILE": 23372,
        "PROMOTE": 23374,
        "RAID": 23378,
        "REVOLT": 23377,
        "SCROLL_DOWN": 23370,
        "SCROLL_UP": 23369
    },
    "HALL": {
        "DOWN": 285,
        "GOTO": 286,
        "UP": 284
    },
    "HUTMANN": {
        "BACK": 23579,
        "GOLDBET": 23571,
        "MUSHBET": 23572,
        "OK": 23578
    },
    "IF": {
        "ARBEITEN": 101,
        "ARENA": 100,
        "CHARAKTER": 106,
        "EHRENHALLE": 109,
        "EXIT": 115,
        "GILDEN": 108,
        "LOGIN": 48,
        "OPTIONEN": 111,
        "PILZDEALER": 105,
        "POST": 107,
        "REQUEST_PASSWORD": 49,
        "SCHMIEDE": 102,
        "SIGNUP": 47,
        "STALL": 104,
        "TAVERNE": 99,
        "WELTKARTE": 110,
        "ZAUBERLADEN": 103
    },
    "OPTION": {
        "CHANGE_EMAIL": 24253,
        "CHANGE": {
            "NAME": 24251,
            "PASSWORD": 24254,
            "IMG": 24249
        },
        "DELETE": 24255,
        "DOCHANGE": 24264,
        "LUXURY": 24529,
        "RESEND": 24252
    },
    "POST": {
        "ACCEPT": 23285,
        "CANCEL": 23283,
        "DELETE": 23271,
        "DELETEREAD": 23272,
        "DOWN": 23276,
        "FLUSH": {
            "TXT": 24591,
            "CANCEL": 24593,
            "OK": 24594
        },
        "FORWARD": 24539,
        "PROFILE": 23273,
        "READ": {
            "TXT": 23270,
            "NEXT": 23277,
            "PREV": 23278
        },
        "REPLY": 23286,
        "RETURN": 23284,
        "SEND": 23282,
        "UP": 23275,
        "VIEWFIGHT": 23287,
        "WRITE": 23274
    },
    "SCR": {
        "ARBEITEN": {
            "CANCEL": 311,
            "CLOSE": 312,
            "OK": 310
        },
        "CHAR_STEIGERN1": 383,
        "INVITE_OK": 22973
    },
    "ALBUM_NEXT": 24437,
    "ALBUM_PREV": 24436,
    "ARENA_OK": 23301,
    "BACK": 114,
    "BATTLE_SKIP": 24188,
    "BATTLE_SKIPONE": 24189,
    "BEARD_MINUS": 168,
    "BEARD_PLUS": 169,
    "BO_BUY": 23629,
    "BROWS_MINUS": 174,
    "BROWS_PLUS": 175,
    "COLOR_MINUS": 184,
    "COLOR_PLUS": 185,
    "COUNTRY_NEXT": 25619,
    "COUNTRY_PREV": 25618,
    "CREATE_CHARACTER": 202,
    "DEMO_LOGOFF": 24242,
    "DISCONNECTED": 24369,
    "EARS_MINUS": 176,
    "EARS_PLUS": 177,
    "EMAIL_NAG": 24374,
    "EYES_MINUS": 172,
    "EYES_PLUS": 173,
    "FIGHT_OK": 24187,
    "FIGHT_SKIP": 24186,
    "HAIR_MINUS": 178,
    "HAIR_PLUS": 179,
    "INVITE_SUCCESS_OK": 22977,
    "MAINQUEST_START": 24361,
    "MODIFY_CHARACTER": 203,
    "MOUTH_MINUS": 166,
    "MOUTH_PLUS": 167,
    "NEXT_COPYCAT": 24740,
    "NEXT_PLAYER": 357,
    "NOSE_MINUS": 170,
    "NOSE_PLUS": 171,
    "OPTIONEN": 24700,
    "PLAYER_GUILD_INVITE": 24485,
    "PREV_COPYCAT": 24739,
    "PREV_PLAYER": 356,
    "PURCHASE": 25624,
    "PURCHASE_MAX": 25633,
    "QO_RETURN": 23617,
    "QO_START": 23616,
    "QUEST_CANCEL": 23211,
    "QUEST_SKIP": 23212,
    "RANDOM": 119,
    "SERVER_NEXT": 25622,
    "SERVER_PREV": 25621,
    "SHOPS_NEWWAREZ": 23102,
    "SPECIAL2_MINUS": 182,
    "SPECIAL2_PLUS": 183,
    "SPECIAL_MINUS": 180,
    "SPECIAL_PLUS": 181,
    "STALL_BUY": 23357,
    "TOWER_STEIGERN1": 24788,
    "TOWER_TRY": 24791,
}


# Configuration file indices
CFG = {
    "ALLOW_SKIP_QUEST": 34,
    "BACKGROUND_ID": 57,
    "BUFFED_URL": 19,
    "buffed_mode": 15,
    "BULLSHIT_BOX": 50,
    "BULLSHIT_CID": 51,
    "CENSORED": 40,
    "DATAPROT_URL": 13,
    "DONT_SAVE_CID": 44,
    "FLAG_NAMES": 47,
    "FLAGS": 46,
    "FORUM_URL": 10,
    "GAMESTAFF_EMAIL": 36,
    "IDLE_POLLING": 33,
    "IMAGE_TIMEOUT": 21,
    "URL": 2,
    "IMPRINT_URL": 11,
    "INSTR_URL": 14,
    "INTERNAL_PIXEL": 41,
    "LANG_CODE": 1,
    "LANG_URL": 8,
    "LEGAL_URL": 12,
    "LIGHT_MODE": 45,
    "LOWRES_URL": 48,
    "MOBILE_PAYMENT_OLD": 55,
    "MOBILE_PAYMENT_URL": 56,
    "MOBILE_VALIDATION": 54,
    "MP_PROJECT": 18,
    "NO_CROSSDOMAIN": 9,
    "NO_TUNNELING_TIME": 27,
    "PAPAYA_FILE": 31,
    "PAPAYA_PATH": 30,
    "pay_methods": 16,
    "PHP_TUNNEL_URL": 25,
    "PIXEL_CALL": 53,
    "POLL_TUNNEL_URL": 28,
    "PORT_FIREWALL": 6,
    "PORT_OFFSET": 4,
    "PORT_RANGE": 5,
    "RECONNECT": 24,
    "RELOAD_PIXEL": 42,
    "REROLL_IMG": 23,
    "RESEND_COUNT": 32,
    "RESPONSE_TIMEOUT": 20,
    "SERVER": 7,
    "SERVER_ID": 17,
    "SERVER_VERSION": 43,
    "SHOP_URL": 35,
    "SND_URL": 3,
    "SOCIAL_BUTTONS": 52,
    "SPONSOR_IMG": 22,
    "SPONSOR_URL": 49,
    "SUPPORT_EMAIL": 29,
    "TRACKING_PIXEL": 26,
    "TV_FUNCTION": 59,
    "TV_POLL_INTERVAL_LONG": 61,
    "TV_POLL_INTERVAL_NORMAL": 60,
    "WORLDS": 58,
}


# ???
CNT = {
    "ALBUM": {
        "CAT_OUT": 24430,
        "MONSTER": 24388,
        "MONSTER_FRAME": 24392,
        "WEAPON": {
            "1": 24396,
            "2": 24400,
            "3": 24404,
            "4": 24408,
            "5": 24412,
            "EPIC": 24416
        }
    },
    "CHANGE": {
        "PASSWORD": {
            "SMILEY": {
                "HAPPY": 24267,
                "NEUTRAL": 24266,
                "SAD": 24265
            }
        }
    },
    "CHAR": {
        "ACH": 23033,
        "POTION": 23073,
        "SLOT": {
            "1": 410,
            "2": 411,
            "3": 412,
            "4": 413,
            "5": 414,
            "6": 415,
            "7": 416,
            "8": 417,
            "9": 418,
            "10": 419,
            "11": 420,
            "12": 421,
            "13": 422,
            "14": 423,
            "15": 424,
            "FIDGET": {
                "1": 425,
                "2": 426,
                "3": 427,
                "4": 428,
                "5": 429,
                "6": 430
            },
            "SHAKES": {
                "1": 431,
                "2": 432,
                "3": 433,
                "4": 434,
                "5": 435,
                "6": 436
            }
        }
    },
    "FIGHT": {
        "BOX3": 24200,
        "ONO": 24220,
        "OPP_BORDER": 24185,
        "REWARDGOLD": 24202,
        "REWARDMUSH": 24206,
        "REWARDSILVER": 24204,
        "SLOT": 24201
    },
    "GILDE": {
        "ATTACK": 23389,
        "CREST": 24559,
        "CREST_COLOR": 24584,
        "DEFENCE": 23390,
        "GEBAEUDE_GOLD": 23474,
        "GEBAEUDE_MUSH": 23477,
        "GOLD": 23489,
        "GOLD2": 23495,
        "LINK": 23446,
        "LIST": 23368,
        "MUSH": 23490,
        "MUSH2": 23496,
        "RANG": 23365
    },
    "HALL": {
        "GOTO_GILDEN": 291,
        "GOTO_SPIELER": 288,
        "LIST": 294
    },
    "HLMQS": {
        "BUTTON": 24768,
        "COMPLETED": 24783,
        "DISABLED": 24778
    },
    "HUTMANN": {
        "GOLDBET": 23569,
        "GOLDBET2": 23576,
        "MUSHBET": 23570,
        "MUSHBET2": 23577
    },
    "IF": {
        "AGB": 19,
        "ANLEITUNG": 23,
        "DATENSCHUTZ": 21,
        "DRAGON": {
            "1": 86,
            "2": 87,
            "3": 88,
            "4": 89,
            "5": 90,
            "6": 91,
            "7": 92,
            "8": 93,
            "9": 94,
            "10": 95,
            "11": 96,
            "12": 97,
            "13": 98
        },
        "FORUM": 15,
        "HUTMANN": 39,
        "IMPRESSUM": 13,
        "LOGOUT": 11,
        "SHOP": 25,
        "SPONSOR": 18,
        "TOILET": 25611,
    },
    "MAINQUEST": {
        "ENEMY": 24364,
        "ENEMY_BORDER": 24363,
        "SLOT": 24362
    },
    "MQS": {
        "BUTTON": 24311,
        "COMPLETED": 24342,
        "DISABLED": 24331
    },
    "QO": {
        "CHOICE": {
            "1": 23591,
            "2": 23592,
            "3": 23593,
            "4": 23594,
            "5": 23595
        },
        "REWARDGOLD": 23609,
        "REWARDSILVER": 23611
    },
    "SCR": {
        "ARBEITEN": {
            "BAR": 313,
            "FILL": 314
        },
        "CHAR": {
            "GILDE": 22957,
            "GOLD1": 393,
            "NAME": 354,
            "SILBER1": 403
        }
    },
    "STALL": {
        "GOLD": 23354,
        "MUSH": 23356,
        "SCHATZGOLD": 23349,
        "SCHATZSILBER": 23351
    },
    "TOWER": {
        "BOOSTCOIN": 25607,
        "FACE": 0x6400,
        "SCROLLAREA": 24743,
        "SLOT": 24720,
        "WINDOW": 24753
    },
    "AGB": 69,
    "BULLET_CHAR": 24194,
    "BULLET_OPP": 24195,
    "CREATE_GOTO_LOGIN": 200,
    "DATENSCHUTZ": 72,
    "EMAIL_RESEND": 24372,
    "FORGOT_PASSWORD": 62,
    "GOTO_LOGIN": 64,
    "GOTO_SIGNUP": 66,
    "LIFEBAR_FILL_OPP": 24161,
    "LIFEBAR_OPP": 24159,
    "POST_GUILD": 23289,
    "POST_LIST": 23269,
    "PW_GOTO_LOGIN": 25615,
    "QUEST_SLOT": 23619,
    "SHIELD_CHAR": 24192,
    "SHIELD_OPP": 24193,
    "SOCIAL": 24460,
    "TIMEBAR_FILL": 23544,
    "WEAPON_CHAR": 24190,
    "WEAPON_OPP": 24191,
    "WITCH_SCROLL": 25641,
}


# Image Indices
IMG = {
    "ALBUM": {
        "BG": 24376,
        "CAT_IN": 24425,
        "CAT_OUT": 24420
    },
    "ARENA": {
        "BG": {
            "DAWN": 23297,
            "DAY": 23295,
            "NIGHT": 0x5B00
        },
        "FEUER": 23298
    },
    "BO": {
        "PORTRAIT": {
            "NO": 23627,
            "OK": 23626,
            "TH": 23628
        }
    },
    "BUBBLE": {
        "ARENA": 269,
        "DEALER": 275,
        "ESEL": 270,
        "KRISTALL": 273,
        "ORAKEL": 274,
        "POST": 276,
        "RUHMESHALLE": 272,
        "SHAKES": 279,
        "STATUE": 278,
        "TAVERNE": 271,
        "WACHE": 277,
        "ZAUBERLADEN": 280
    },
    "CHAR": {
        "ACH": 22993,
        "ALBUM": 22965,
        "MOUNT_1": 22979,
        "RUESTUNG": 22991,
        "BACKGROUND": 319,
        "BACKGROUND2": 330,
        "BEARD": 321,
        "BEARD2": 332,
        "BROWS": 324,
        "BROWS2": 335,
        "EARS": 325,
        "EARS2": 336,
        "EYES": 323,
        "EYES2": 334,
        "HAIR": 326,
        "HAIR2": 337,
        "MOUTH": 320,
        "MOUTH2": 331,
        "NOSE": 322,
        "NOSE2": 333,
        "SPECIAL": 327,
        "SPECIAL12": 338,
        "SPECIAL2": 328,
        "SPECIAL22": 339
    },
    "CITY": {
        "ARENA": {
            "IMG": 222,
            "ONO": {
                "1": 223,
                "2": 224,
                "3": 225,
                "4": 226
            }
        },
        "DEALER": {
            "IMG": 228,
            "ANI": {
                "1": 229,
                "2": 230,
                "3": 231,
                "4": 232,
                "5": 233
            }
        },
        "ELF1": 0x0101,
        "ELF2": 258,
        "ESEL1": 235,
        "ESEL2": 236,
        "MAGIER1": 249,
        "MAGIER2": 250,
        "ORK1": 251,
        "ORK2": 252,
        "POST": 240,
        "RUHMESHALLE": 220,
        "SANDWICH1": 253,
        "SANDWICH2": 254,
        "SCHILD": {
            "1": 245,
            "2": 246,
            "3": 247,
            "4": 248
        },
        "SHAKES": 216,
        "TAVERNE": 238,
        "WACHE_DAY": 242,
        "WACHE_NIGHT": 243,
        "ZAUBERLADEN": 218,
        "ZWERG1": 0xFF,
        "ZWERG2": 0x0100
    },
    "DEALER": {
        "ARM": {
            "1": 23215,
            "2": 23216,
            "3": 23217,
            "4": 23218
        },
        "AUGEN": {
            "1": 23219,
            "2": 23220,
            "3": 23221,
            "4": 23222
        },
        "EFFECT": 23253,
        "PAYICON": {
            "1": 23226,
            "2": 23227,
            "3": 23228,
            "4": 23229,
            "5": 23230,
            "6": 23231,
            "7": 23232,
            "8": 23233,
            "9": 23234
        },
        "PAYICONHOVER": {
            "1": 23235,
            "2": 23236,
            "3": 23237,
            "4": 23238,
            "5": 23239,
            "6": 23240,
            "7": 23241,
            "8": 23242,
            "9": 23243
        }
    },
    "DUNGEON_CONGRATS": 24354,
    "EMPTY": {
        "SLOT": {
            "1": 438,
            "9_1": 446,
            "9_2": 447,
            "9_3": 448,
            "10": 449
        }
    },
    "FIDGET": {
        "AFFE": {
            "1": 23080,
            "2": 23081,
            "3": 23082
        },
        "BLINZELN": 23089,
        "DAY": 23085,
        "EPCIOVL": 24536,
        "IDLE": 23086,
        "NACHTKERZE": 23084,
        "NIGHT": 23088,
        "SALE": 23087,
        "TAGKERZE": 23083
    },
    "FIGHT": {
        "ARROW_SMASH": 24219,
        "BOX1": 24198,
        "BOX2": 24199,
        "CHAR_BORDER": 24184,
        "COPYCAT": 24759,
        "MUSH": 24534,
        "ONO": 24213
    },
    "GILDE": {
        "ATTACK_GRAY": 23383,
        "ATTACK_OK": 23384,
        "CREST": {
            "IMG": 24543,
            "COLOR": {
                "FILLIN": 24579,
                "SELECTED": 24575,
                "UNSELECTED": 24571
            },
            "SHIELDCOLOR": 24590
        },
        "DEFEND_GRAY": 23385,
        "DEFEND_OK": 23386,
        "GEBAEUDE": 23450,
        "GEBAEUDE_IMPROVE_GRAY": 23483,
        "INVITE_GRAY": 23391,
        "KATAPULT_GRAY": 24517,
        "KATAPULT_OK": 24518,
        "KICK_GRAY": 23393,
        "MASTER_GRAY": 23395,
        "PROFILE_GRAY": 23392,
        "PROMOTE_GRAY": 23394,
        "RAHMEN": 23360,
        "RAID_GRAY": 23379,
        "RAID_OK": 23380,
        "RANK": 23397,
        "GILDEN_BG": 23359
    },
    "HLMQS": {
        "BUTTON": 24773,
        "COMPLETED": 24764,
        "DISABLED": 24763,
        "TOWER_COMPLETED": 24766,
        "TOWER_DISABLED": 24765
    },
    "HUTBECHER": {
        "1_CLICK": 23555,
        "1_HOVER": 23554,
        "1_IDLE": 23553,
        "2_CLICK": 23558,
        "2_HOVER": 23557,
        "2_IDLE": 23556,
        "3_CLICK": 23561,
        "3_HOVER": 23560,
        "3_IDLE": 23559
    },
    "HUTFACE": {
        "HOVER": 23548,
        "IDLE": 23547,
        "LOSE": {
            "1": 23550,
            "2": 23551,
            "3": 0x5C00
        },
        "WIN": 23549
    },
    "IF": {
        "BACKGROUND": 5,
        "GOLD": 27,
        "HUTMANN": {
            "1": 37,
            "2": 38,
            "OVL": 40
        },
        "JAEGER": 35,
        "KRIEGER": 34,
        "LEFT": 6,
        "MAGIER": 36,
        "MAIN": 8,
        "PILZE": 29,
        "SILBER": 28,
        "SPONSOR": 17,
        "TOILET": 25610,
        "TOP": 7,
        "WINDOW": {
            "IMG": 45,
            "HIGH": 25612,
            "TOPHALF": 25613
        }
    },
    "KASTE": {
        "1_ACT": 158,
        "1_IDLE": 157,
        "2_ACT": 160,
        "2_IDLE": 159,
        "3_ACT": 162,
        "3_IDLE": 161
    },
    "MQS": {
        "BUTTON": 24321,
        "COMPLETED": 24352,
        "DISABLED": 24341
    },
    "OP": {
        "BEARD": 23836,
        "BEARD2": 23847,
        "BROWS": 23839,
        "BROWS2": 23850,
        "EARS": 23840,
        "EARS2": 23851,
        "HAIR": 23841,
        "HAIR2": 23852,
        "SPECIAL": 23842,
        "SPECIAL12": 23853,
        "SPECIAL2": 23843,
        "SPECIAL22": 23854
    },
    "OPP": {
        "BACKGROUND": 23834,
        "BACKGROUND2": 23845,
        "EYES": 23838,
        "EYES2": 23849,
        "MONSTER": 24800,
        "MOUTH": 23835,
        "MOUTH2": 23846,
        "NOSE": 23837,
        "NOSE2": 23848
    },
    "OPTION": {
        "BOX": 24256,
        "FLAG": 24627,
        "IMAGEBORDER": 24248
    },
    "PASSWORD": {
        "SMILEY": {
            "HAPPY": 58,
            "NEUTRAL": 57,
            "SAD": 56
        }
    },
    "POST": {
        "BG": 23258,
        "DAWN1": 23259,
        "DAWN2": 23260,
        "NIGHT1": 23261,
        "NIGHT2": 23262
    },
    "QUESTBAR": {
        "BG": 23207,
        "FILL": 23208,
        "LIGHT": 23209
    },
    "SCR": {
        "BUILDCHAR_BACKGROUND": 117,
        "CHAR": {
            "BG": {
                "IMG": 352,
                "GOLDEN": 24530,
                "RIGHT": 353
            },
            "EXPBAR": 358,
            "KLASSE": {
                "1": 22952,
                "2": 22953,
                "3": 22954
            }
        },
        "CITY": {
            "BACKG": {
                "DAWN": 205,
                "DAY": 206,
                "NIGHT": 204
            },
            "CLOUDS": {
                "DAWN": 211,
                "DAY": 212,
                "NIGHT": 210
            },
            "FOREG": {
                "DAWN": 214,
                "DAY": 215,
                "NIGHT": 213
            },
            "MAIN": {
                "DAWN": 208,
                "DAY": 209,
                "NIGHT": 207
            }
        },
        "DEALER_BG": 23214,
        "FIDGET_BG": 23101,
        "HALLE_BG": 282,
        "QUEST_BG_1": 23107,
        "SHAKES_BG": 23100,
        "TOWER_BG": 24792,
        "WORLDMAP_BG": 23105
    },
    "SHAKES": {
        "BLINZELN1": 23098,
        "BLINZELN2": 23099,
        "DAY": 23092,
        "EPCIOVL": 24537,
        "IDLE": {
            "IMG": 23093,
            "1": 23095,
            "2": 23096,
            "3": 23097
        },
        "NIGHT": 23094
    },
    "STALL": {
        "ARME": {
            "1": 23312,
            "2": 23313,
            "3": 23314,
            "4": 23315,
            "5": 23316
        },
        "BG_BOESE": 23309,
        "BG_GUT": 23308,
        "DAWN": 23310,
        "NIGHT": 23311,
        "OVL": {
            "BOESE": {
                "1": 23321,
                "2": 23322,
                "3": 23323,
                "4": 23324
            },
            "GUT": {
                "1": 23317,
                "2": 23318,
                "3": 23319,
                "4": 23320
            }
        }
    },
    "TAVERN": {
        "ADVENT": 25711,
        "BARKEEPER1": 23520,
        "BARKEEPER2": 23521,
        "BARKEEPER_HINT": 24538,
        "BAROVL": 23540,
        "BG": 23519,
        "HUTMANN_BLINZELN": 23522,
        "HUTMANN_OVL": 23523,
        "KERZEN": 23525,
        "QUEST": {
            "1": 23526,
            "2": 23527,
            "3": 23528,
            "4": 23529,
            "5": 23530
        },
        "QUESTOVL": {
            "1": 23534,
            "2": 23535,
            "3": 23536,
            "4": 23537,
            "5": 23538
        }
    },
    "TOILET": {
        "IMG": 24599,
        "CHAIN": 24610,
        "DROP": 24618,
        "FLUSH": 24602,
        "IDLE": 24617
    },
    "TOWER": {
        "BASE": 24744,
        "BG": 24715,
        "LEVEL": 24745,
        "PORTRAIT": 24756,
        "PORTRAIT1": 24717,
        "ROOF": 24748,
        "WINDOW": {
            "BURNT": 24751,
            "CLOSED": 24750,
            "OPEN": 24749
        }
    },
    "VOLK": {
        "1": {
            "F_ACT": 145,
            "F_IDLE": 137,
            "M_ACT": 129,
            "M_IDLE": 120
        },
        "2": {
            "F_ACT": 146,
            "F_IDLE": 138,
            "M_ACT": 130,
            "M_IDLE": 121
        },
        "3": {
            "F_ACT": 147,
            "F_IDLE": 139,
            "M_ACT": 131,
            "M_IDLE": 122
        },
        "4": {
            "F_ACT": 148,
            "F_IDLE": 140,
            "M_ACT": 132,
            "M_IDLE": 123
        },
        "5": {
            "F_ACT": 149,
            "F_IDLE": 141,
            "M_ACT": 133,
            "M_IDLE": 124
        },
        "6": {
            "F_ACT": 150,
            "F_IDLE": 142,
            "M_ACT": 134,
            "M_IDLE": 125
        },
        "7": {
            "F_ACT": 151,
            "F_IDLE": 143,
            "M_ACT": 135,
            "M_IDLE": 126
        },
        "8": {
            "F_ACT": 152,
            "F_IDLE": 144,
            "M_ACT": 136,
            "M_IDLE": 127
        },
        "MARKER": 128
    },
    "WEAPON": {
        "BONE": 24223,
        "CLAW": 24231,
        "CLAW2": 24232,
        "CLAW3": 24233,
        "CLAW4": 24234,
        "FIRE": 24228,
        "FIRE2": 24229,
        "FIRE3": 24230,
        "FIST": 24221,
        "SPLAT": 24225,
        "SPLAT2": 24226,
        "SPLAT3": 24227,
        "STICK": 24224,
        "STONEFIST": 24222,
        "SWOOSH": 24235,
        "SWOOSH2": 24236,
        "SWOOSH3": 24237
    },
    "BEERFEST": 24480,
    "BG_DEMO": 24241,
    "GOLD": 42,
    "PILZE": 44,
    "SILBER": 43,
    "F_ACT": 156,
    "F_IDLE": 155,
    "FILLSPACE": 68,
    "GOLDEN_FRAME": 24506,
    "GOTO_WITCH_OVL": 25672,
    "GUILD_BATTLE_BG": 24238,
    "GUILD_RAID_BG": 24239,
    "HUTKUGEL": 23565,
    "HUTMANN_BG": 23546,
    "HUTMANN_MUSHBET_DISABLED": 23573,
    "LIFEBAR_CHAR": 0x5E5E,
    "LIFEBAR_FILL_CHAR": 24160,
    "LUXURY_SELLER": 24535,
    "M_ACT": 154,
    "M_IDLE": 153,
    "MAINQUEST_COMINGSOON": 24365,
    "MIRROR_PIECE": 24701,
    "NO_SHIELD": 25609,
    "QO_PORTRAIT1": 23620,
    "SLOT_SUGGESTION": 437,
    "SOCIAL": 24440,
    "SPECIAL_ACTION": 24486,
    "TIMEBAR_BG": 23542,
    "TIMEBAR_FILL": 23543,
    "TV": 25707,
    "UNKNOWN_ENEMY": 24439,
    "WITCH": 25637,
    "WITCH_ANI": 25673,
}


# Absolute positions X/Y
POS = {
    "BUBBLE": {
        "ARENA_X": 375,
        "ARENA_Y": 228,
        "DEALER_X": 606,
        "DEALER_Y": 480,
        "ESEL_X": 289,
        "ESEL_Y": 495,
        "KRISTALL_X": 582,
        "KRISTALL_Y": 175,
        "ORAKEL_X": 782,
        "ORAKEL_Y": 155,
        "POST_X": 775,
        "POST_Y": 440,
        "RUHMESHALLE_X": 1076,
        "RUHMESHALLE_Y": 593,
        "SHAKES_X": 1032,
        "SHAKES_Y": 517,
        "STATUE_X": 1136,
        "STATUE_Y": 381,
        "TAVERNE_X": 468,
        "TAVERNE_Y": 441,
        "WACHE_X": 500,
        "WACHE_Y": 625,
        "ZAUBERLADEN_X": 964,
        "ZAUBERLADEN_Y": 343
    },
    "CHAR": {
        "MOUNT_X": 805,
        "MOUNT_Y": 429,
        "NAME_X": 410,
        "NAME_Y": 345,
        "PLAYER": {
            "X1": 830,
            "X2": 1030,
            "Y": 715
        },
        "PROP": {
            "COLUMN": {
                "1_X": 304,
                "2_X": 405,
                "3_X": 470,
                "4_X": 520,
                "5_X": 520,
                "6_X": 650
            },
            "Y": 517
        },
        "SLOTS": {
            "LEFT_X": 304,
            "R4C2_X": 441,
            "R4C3_X": 543,
            "R5C2_X": 398,
            "R5C3_X": 493,
            "R5C4_X": 588,
            "RIGHT_X": 680,
            "ROW2_Y": 217,
            "ROW3_Y": 317,
            "ROW4_Y": 417,
            "ROW5_Y": 679,
            "TOP_Y": 117
        }
    },
    "CITY": {
        "ARENA_X": 280,
        "ARENA_Y": 100,
        "CA": {
            "ARENA_X": 280,
            "ARENA_Y": 170,
            "BUH_X": 1105,
            "BUH_Y": 410,
            "DEALER_X": 570,
            "DEALER_Y": 580,
            "ESEL_X": 280,
            "ESEL_Y": 618,
            "POST_X": 830,
            "POST_Y": 500,
            "RUHMESHALLE_X": 1150,
            "RUHMESHALLE_Y": 400,
            "SHAKES_X": 945,
            "SHAKES_Y": 550,
            "TAVERNE_X": 440,
            "TAVERNE_Y": 530,
            "WACHE_X": 670,
            "WACHE_Y": 570,
            "ZAUBERLADEN_X": 985,
            "ZAUBERLADEN_Y": 410
        },
        "DEALER_X": 578,
        "DEALER_Y": 593,
        "ELF_X": 943,
        "ELF_Y": 405,
        "ESEL_X": 280,
        "ESEL_Y": 618,
        "MAGIER_X": 655,
        "MAGIER_Y": 630,
        "ORK_X": 850,
        "ORK_Y": 580,
        "POST_X": 872,
        "POST_Y": 546,
        "RUHMESHALLE_X": 1135,
        "RUHMESHALLE_Y": 340,
        "SANDWICH_X": 780,
        "SANDWICH_Y": 610,
        "SCHILD_X": 739,
        "SCHILD_Y": 623,
        "SHAKES_X": 1023,
        "SHAKES_Y": 585,
        "TAVERNE_X": 471,
        "TAVERNE_Y": 560,
        "WACHE_X": 670,
        "WACHE_Y": 582,
        "ZAUBERLADEN_X": 1014,
        "ZAUBERLADEN_Y": 446,
        "ZWERG_X": 480,
        "ZWERG_Y": 580
    },
    "DEALER": {
        "AKTION_X": 290,
        "AKTION_Y": 235,
        "ARM_X": 455,
        "ARM_Y": 265,
        "AUGEN_X": 605,
        "AUGEN_Y": 265,
        "MENU_X": 760,
        "MENU_Y": 430,
        "SPONSOR_X": 1080,
        "SPONSOR_Y": 520
    },
    "DEMO": {
        "X": 1050,
        "Y": 700,
        "Y1": 380
    },
    "FIGHT": {
        "Y": 710,
        "CHAR": {
            "PROP": {
                "COLUMN": {
                    "1_X": 324,
                    "2_X": 450,
                    "3_X": 1059,
                    "4_X": 1185
                },
                "Y": 520
            },
            "X": 315
        },
        "REWARD": {
            "EXP_X": 535,
            "GOLD_X": 1000,
            "GOLD_Y": 640,
            "MUSH_Y": 610
        },
        "SLOT_Y": 580,
        "SUMMARY_Y": 520,
        "WEAPONS_Y": 350
    },
    "GILDE": {
        "ATTACKX": 450,
        "ATTACKLABEL_X": 570,
        "CHAT": {
            "FIELD_Y": 743,
            "X": 305,
            "Y": 624
        },
        "DEFENDX": 505,
        "GEBAEUDE_X": 310,
        "GEBAEUDE_Y": 162,
        "GOLD_Y": 488,
        "GOLDMUSH_X": 670,
        "LIST": {
            "SCROLLX": 1205,
            "SCROLLY": 520,
            "X": 997,
            "Y": 160
        },
        "RANG_X": 300,
        "RANG_Y": 115,
        "TEXT_X": 580,
        "TOOLX": 989,
        "TOOLY": 564
    },
    "HALL": {
        "LIST_X": 580,
        "LIST_Y": 235,
        "GOTO": {
            "X": 875,
            "Y": 570,
            "GILDEN_X": 870,
            "SPIELER_X": 670,
            "SPIELERGILDEN_Y": 145
        },
        "DOWN_Y": 565,
        "INP_GOTO_X": 615,
        "INP_GOTO_Y": 585,
        "UP_Y": 195,
        "UPDOWN_X": 980
    },
    "HUTMANN": {
        "BACK_X": 1140,
        "BACK_Y": 620,
        "GOLD_Y": 660,
        "INSTR_X": 300,
        "INSTR_Y": 115,
        "KUGEL_X1": 535,
        "KUGEL_X2": 762,
        "KUGEL_X3": 1004,
        "OK_X": 960,
        "OK_Y": 650,
        "TEXT_Y": 635
    },
    "IF": {
        "X": 20,
        "Y": 180,
        "ERROR_X": 770,
        "ERROR_Y": 670,
        "EXIT_X": 1220,
        "EXIT_Y": 120,
        "HUTLINK_X": 35,
        "HUTLINK_Y": 185,
        "LBL_GOLD_Y": 115,
        "LBL_GOLDPILZE_X": 230,
        "LBL_PILZE_Y": 145,
        "WIN_X": 540,
        "WIN_Y": 250
    },
    "MQ": {
        "CS_X": 680,
        "CS_Y": 450,
        "ERROR_Y": 735,
        "SQUARE_X": 470,
        "SQUARE_Y": 80
    },
    "MQS": {
        "BUTTON_X": 380,
        "BUTTON_Y": 170,
        "TITLE_Y": 115
    },
    "POST": {
        "ADDRESS_Y": 190,
        "BUTTONS_X": 330,
        "BUTTONS_Y": 685,
        "ERROR_Y": 740,
        "INP_X": 330,
        "LIST_X": 330,
        "LIST_Y": 190,
        "PROFILE_X": 1170,
        "SCROLLX": 1190,
        "SCROLLDOWN_Y": 695,
        "SCROLLUP_Y": 190,
        "SENDBUTTON_Y": 685,
        "SQUARE_X": 320,
        "SQUARE_Y": 100,
        "SUBJECT_Y": 220,
        "TEXT_Y": 250
    },
    "QUEST": {
        "CANCEL_X": 780,
        "CANCEL_Y": 700,
        "ERROR_Y": 540
    },
    "QUESTBAR": {
        "LABEL_X": 778,
        "LABEL_Y": 625,
        "X": 390,
        "Y": 580
    },
    "SCR": {
        "BUILDCHAR": {
            "1_X": 312,
            "1_Y": 134,
            "CASTE_X": 332,
            "CASTE_Y": 610,
            "CREATE_X": 702,
            "CREATE_Y": 715,
            "GENDER_X": 372,
            "GENDER_Y": 195,
            "LOGIN_X": 1230,
            "LOGIN_Y": 725,
            "VOLK_X": 345,
            "VOLK_Y": 300
        },
        "CHAR": {
            "ACH_X": 795,
            "ACH_Y": 635,
            "CHARX": 408,
            "CHARY": 119
        },
        "SHOP_BG_X": 780
    },
    "SCREEN": {
        "BACK_BUTTON_X": 1120,
        "BACK_BUTTON_Y": 650,
        "RANDOM_BUTTON_X": 1030,
        "RANDOM_BUTTON_Y": 620,
        "TITLE": {
            "X": 770,
            "Y": 120,
            "Y_GUILD": 110,
            "Y_QUEST": 120
        }
    },
    "SHOP": {
        "ERROR_X": 1030,
        "ERROR_Y": 185,
        "SLOTS": {
            "C1_X": 856,
            "C2_X": 972,
            "C3_X": 1088,
            "R1_Y": 560,
            "R2_Y": 680
        },
        "X": 860
    },
    "STADT": {
        "BACKG_X": 280,
        "BACKG_Y": 101,
        "MAIN_X": 280,
        "MAIN_Y": 365
    },
    "STALL_ERROR_Y": 500,
    "STALL_SQUARE_Y": 560,
    "TAVERNE": {
        "BAR_X": 1030,
        "BAR_Y": 320,
        "BAROVL_X": 1093,
        "BAROVL_Y": 320
    },
    "TIMEBAR": {
        "LABEL_X": 0x0300,
        "LABEL_Y": 705,
        "X": 380,
        "Y": 660
    },
    "LBL": {
        "ARBEITEN": {
            "TEXT": {
                "2_Y": 475,
                "X": 590,
                "Y": 340
            }
        }
    },
    "AGB_X": 150,
    "ANLEITUNG_X": 1000,
    "ANLEITUNG_X_WITH_SHOP": 1035,
    "ARBEITEN_SLIDER_X": 650,
    "ARBEITEN_SLIDER_Y": 420,
    "ARENA_FEUER_X": 442,
    "ARENA_FEUER_Y": 126,
    "CREATE_RACE_X": 640,
    "CREATE_RACE_Y": 520,
    "DATENSCHUTZ_X": 250,
    "DISCONNECTED_X": 780,
    "DISCONNECTED_Y": 360,
    "EMAIL_NAG_X": 580,
    "EMAIL_NAG_Y": 340,
    "EXPERIENCE_BAR_X": 409,
    "EXPERIENCE_BAR_Y": 381,
    "FORUM_X": 900,
    "FORUM_X_WITH_SHOP": 945,
    "GILDEEHRE_X": 795,
    "GILDEEHRE_Y": 120,
    "IMPRESSUM_X": 380,
    "LM_X": 370,
    "LM_Y": 600,
    "LOGOUT_X": 1100,
    "LOGOUT_X_WITH_SHOP": 1130,
    "LOGOUT_Y": 50,
    "MAINQUEST_ENEMY_X": 630,
    "MAINQUEST_ENEMY_Y": 330,
    "MODIFY_CHARACTER_BUTTONS_X": 1020,
    "MODIFY_CHARACTER_BUTTONS_Y": 160,
    "NEW_WAREZ_X": 1025,
    "NEW_WAREZ_Y": 495,
    "OPPX": 930,
    "OPPY": 130,
    "OPTION_X": 350,
    "OPTION_Y": 180,
    "POTION_X": 1079,
    "POTION_Y": 590,
    "QO_BLACK_SQUARE_X": 410,
    "QO_BLACK_SQUARE_Y": 230,
    "SPONSOR_X": 1020,
    "SPONSOR_Y": 0
}


# Relative positions
REL = {
    "ARBEITEN": {
        "BAR_X": 55,
        "BAR_Y": 200,
        "Y": 270,
        "FILL_X": 110,
        "FILL_Y": 222
    },
    "ARENA": {
        "DELAY_X": 75,
        "DELAY_Y": 292,
        "INP_Y": 220,
        "OK_Y": 280,
        "TEXT_Y": 80
    },
    "CHAR": {
        "DELAY_X": 335,
        "DELAY_Y": 655,
        "EHRE_X": 20,
        "MOUNT_X": 274,
        "MOUNT_LINE_Y": 25,
        "PROP_Y": 32,
        "RUESTUNG": {
            "TEXT_X": 45,
            "TEXT_Y": 7,
            "X": 15,
            "Y": 495
        },
        "X": 20,
        "Y": 51
    },
    "FIDGET": {
        "AFFE_X": 425,
        "AFFE_Y": 128,
        "BLINZELN_X": 107,
        "BLINZELN_Y": 88,
        "NACHTKERZE_X": 63,
        "NACHTKERZE_Y": 236,
        "TAGKERZE_X": 212,
        "TAGKERZE_Y": 12,
        "X": 74,
        "Y": 168
    },
    "FIGHT": {
        "BOX": {
            "1_X": -17,
            "1_Y": -15,
            "3_X": -17
        },
        "CHAR_PROP_Y": 32
    },
    "GILDE": {
        "BUILDING_Y": 100,
        "CHAT": {
            "CAPTION_Y": 32,
            "DOWN_Y": 75,
            "UP_Y": 5,
            "Y": 22
        },
        "DEFENSELABEL_Y": 24,
        "GEBAEUDE": {
            "IMPROVE_X": 105,
            "IMPROVE_Y": 53,
            "LINE": 24,
            "Y": 133
        },
        "GOLDMUSH": {
            "C1": 10,
            "C2": 205,
            "C3": 0
        },
        "GRUENDEN": {
            "INP_Y": 220,
            "OK_Y": 280,
            "TEXT_Y": 80
        },
        "INP_Y": 220,
        "LIST": {
            "C1": 23,
            "X": 200,
            "Y": 26
        },
        "MUSH_Y": 27,
        "OK_Y": 280,
        "TEXT": {
            "IMPROVE_X": 143,
            "X": 105,
            "Y": 80
        },
        "TOOLX": 53,
        "EHRE_X": 10,
        "EHRE_Y": 10
    },
    "HALL": {
        "LIST": {
            "COLUMN": {
                "1_X": 0,
                "2_X": 60,
                "3_X": 80,
                "4_X": 200,
                "5_X": 320,
                "6_X": 370,
            },
            "LINE_Y": 20,
            "LINES_Y": 0
        }
    },
    "HUTMANN": {
        "BECHER": {
            "1_X": 204,
            "1_X2": 0,
            "1_X3": 0,
            "1_Y": 417,
            "1_Y2": -72,
            "1_Y3": -127,
            "2_X": 430,
            "2_X2": -201,
            "2_X3": -203,
            "2_Y": 417,
            "2_Y2": -54,
            "2_Y3": -120,
            "3_X": 669,
            "3_X2": -16,
            "3_X3": -16,
            "3_Y": 417,
            "3_Y2": -39,
            "3_Y3": -89
        },
        "FACE_X": 389,
        "FACE_Y": 115
    },
    "IF": {
        "1": 44,
        "2": 20,
        "GOTO_LOGIN_X": 450,
        "WIN": {
            "2_Y": 35,
            "X": -87,
            "Y": 250,
            "CB_X": 70,
            "CB_Y": 245,
            "INPUTS": {
                "DISTANCE_Y": 55,
                "FIELD_X": 80,
                "FIELD_Y": -15,
                "X": 70,
                "Y": 100
            },
            "LNK_1_Y": -40,
            "LNK_2_Y": 50,
            "WELCOME_X": 250,
            "WELCOME_Y": 45
        }
    },
    "MODIFY": {
        "CHARACTER": {
            "BUTTONS_1": 45,
            "BUTTONS_2": 55,
            "LABEL_X": 50,
            "LABEL_Y": 6
        }
    },
    "MQ": {
        "BORDER_X": 10,
        "BORDER_Y": 10,
        "BUTTON_Y": -20,
        "MUSHHINT_Y": -15,
        "TEXT_X": 20,
        "TEXT_Y": 130,
        "TITLE_Y": 90
    },
    "OPTION": {
        "BOX": {
            "1_X": -5,
            "1_Y": -5,
            "2_X": -5,
            "2_Y": -5
        },
        "CHANGE_X": 230,
        "DOCHANGE": {
            "X": 640,
            "FIELD_X": 570,
            "LABEL_X": 440,
            "X1": 430
        },
        "IMAGE_X": 20,
        "TEXT_Y": 13,
        "VER_X": 825,
        "VER_Y": 450,
        "VOLUME_X": 287,
        "Y0": 15,
        "Y1": 65,
        "Y2": 105,
        "Y3": 170,
        "Y4": 235,
        "Y5": 300,
        "Y6": 380,
        "Y7": 430
    },
    "POPUP": {
        "TAB": 120,
        "TAB1": 35,
        "TAB2": 100,
        "TAB3": 130,
        "TAB_ADD": 17
    },
    "POST": {
        "BUTTONS_X": 5,
        "FENSTER_X": 479,
        "FENSTER_Y": 14,
        "LIMIT_X": -10,
        "LIMIT_Y": -55,
        "LIST": {
            "COLUMN": {
                "1_X": 0,
                "2_X": 160,
                "3_X": 660
            },
            "LINE_Y": 30,
            "LINES_Y": 0
        },
        "SQUARE_X": 910,
        "SQUARE_Y": 560,
        "VOGEL_X": 234,
        "VOGEL_Y": 100
    },
    "QO": {
        "CHOICES_Y": 40,
        "CHOOSE_X": 20,
        "CHOOSE_Y": 280,
        "PORTRAIT_X": 20,
        "PORTRAIT_Y": 20,
        "QUESTNAME_X": 480,
        "QUESTNAME_Y": 20,
        "QUESTSTODAY_X": 500,
        "QUESTSTODAY_Y": 20,
        "QUESTTEXT_X": 250,
        "QUESTTEXT_Y": 60,
        "RETURN_Y": 325,
        "REWARD_Y": 280,
        "REWARDS_Y": 40,
        "SLOT_X": 400,
        "SLOT_Y": 335,
        "START_X": 550,
        "START_Y": 380
    },
    "SCR": {
        "BUILDCHAR": {
            "CASTE_X": 80,
            "GENDER_X": 80,
            "VOLK_X": 130,
            "VOLK_Y": 70
        },
        "CHAR_ACH_X": 55,
        "CHAR_ACH_X_BUFFED": 65
    },
    "SHAKES": {
        "BLINZELN_X": 56,
        "BLINZELN_Y": 33,
        "IDLE2_X": 54,
        "IDLE2_Y": 115,
        "IDLE_X": 88,
        "IDLE_Y": 212,
        "X": 171,
        "Y": 112
    },
    "STALL": {
        "ARME_X": 373,
        "ARME_Y": 181,
        "BOX": {
            "1_X": 0,
            "1_Y": 50,
            "2_X": 225,
            "2_Y": 81,
            "3_X": 585,
            "3_Y": 78,
            "4_X": 778,
            "4_Y": 50
        },
        "GAIN_Y": 40,
        "OVL": {
            "BOESE": {
                "1_X": 100,
                "1_Y": 305,
                "2_X": 254,
                "2_Y": 217,
                "3_X": 578,
                "3_Y": 310,
                "4_X": 756,
                "4_Y": 168
            },
            "GUT": {
                "1_X": 80,
                "1_Y": 265,
                "2_X": 303,
                "2_Y": 291,
                "3_X": 580,
                "3_Y": 145,
                "4_X": 761,
                "4_Y": 263
            },
        },
        "TITEL_X": 10,
        "TITEL_Y": 10,
        "TUER_X": 428,
        "TUER_Y": 96,
        "ZEILEN_Y": 10
    },
    "TAVERNE": {
        "BARKEEPER_X": 796,
        "BARKEEPER_Y": 322,
        "HUT_X": 136,
        "HUT_Y": 344,
        "HUTAUGEN_X": 171,
        "HUTAUGEN_Y": 377,
        "KERZEN_X": 364,
        "KERZEN_Y": 21,
        "QUEST_X": 285,
        "QUEST_Y": 281,
        "QUESTOVL": {
            "1_X": 182,
            "1_Y": 60,
            "2_X": 149,
            "2_Y": 116,
            "3_X": 180,
            "3_Y": 58,
            "4_X": 169,
            "4_Y": 44,
            "5_X": 30,
            "5_Y": 31
        }
    },
    "AGB_LBL_X": 50,
    "AGB_LBL_Y": 8,
    "BLACK_CHARDESC_Y": 15,
    "BUILDCHAR_LINES_Y": 10,
    "COMPARE_TAB": 280,
    "DEALER_2Y": -15,
    "DEALER_3Y": -40,
    "DRAGON_X": 180,
    "DRAGON_Y": -10,
    "EMAIL_NAG_Y": 280,
    "EMAIL_RESEND_Y": 150,
    "HUTKUGEL_Y": 500,
    "LBL_ARBEITEN_TIME_Y": 160,
    "LIFEBAR_Y": 15,
    "LM_X": 50,
    "LM_Y": 6,
    "MQS_BUTTON_X": 280,
    "MQS_BUTTON_Y": 195,
    "POTION_X": 50,
    "STADT_FOREG_Y": 96,
}


# Element Sizes
SIZE = {
    "CITY": {
        "CA": {
            "ARENA_X": 360,
            "ARENA_Y": 220,
            "BUH_X": 45,
            "BUH_Y": 55,
            "DEALER_X": 60,
            "DEALER_Y": 85,
            "ESEL_X": 150,
            "ESEL_Y": 150,
            "POST_X": 120,
            "POST_Y": 140,
            "RUHMESHALLE_X": 150,
            "RUHMESHALLE_Y": 380,
            "SHAKES_X": 160,
            "SHAKES_Y": 170,
            "TAVERNE_X": 120,
            "TAVERNE_Y": 150,
            "WACHE_X": 115,
            "WACHE_Y": 130,
            "ZAUBERLADEN_X": 110,
            "ZAUBERLADEN_Y": 120
        }
    },
    "DEALER": {
        "AKTION_X": 190,
        "AKTION_Y": 170,
        "SPONSOR_X": 190,
        "SPONSOR_Y": 170
    },
    "GILDE": {
        "CHAT_EXT_X": 950,
        "GRUENDEN_TEXT_X": 400,
        "TEXT2_X": 400,
        "TEXT_X": 900,
        "EHRE_X": 375,
        "EHRE_Y": 40
    },
    "STALL": {
        "BOX": {
            "1_X": 200,
            "1_Y": 480,
            "2_X": 183,
            "2_Y": 382,
            "3_X": 176,
            "3_Y": 392,
            "4_X": 218,
            "4_Y": 476
        },
        "SQUARE_X": 700,
        "SQUARE_Y": 200
    },
    "TAVERNE": {
        "BAR_X": 200,
        "BAR_Y": 200,
        "HUT_X": 100,
        "HUT_Y": 130,
        "QUEST_X": 312,
        "QUEST_Y": 307
    },
    "ARENA_TEXT_X": 400,
    "BLACK_CHARDESC_X": 440,
    "BLACK_CHARDESC_Y": 200,
    "BUILDCHAR_LINES_X": 300,
    "COPYCAT": 148,
    "DISCONNECTED_X": 500,
    "EMAIL_NAG_TEXT_X": 420,
    "FIGHT_RESULT_TEXT_X": 490,
    "HUTMANN_BECHER_X": 130,
    "HUTMANN_BECHER_Y": 130,
    "LBL_ARBEITEN_TEXT_X": 400,
    "LBL_QO_TEXT_X": 470,
    "MQ_SQUARE_X": 610,
    "MQ_SQUARE_Y": 570,
    "OPTION_X": 845,
    "OPTION_Y": 520,
    "QO_BLACK_SQUARE_X": 740,
    "QO_BLACK_SQUARE_Y": 440,
    "TSG": 477
}


# ???
C = {
    "AUTO_LOGIN": True,
    "BEARD": 1,
    "BROWS": 2,
    "CHAREXT": ".png",
    "DISPLAY_ITEM_INFO": False,
    "HAIR": 4,
    "ITEMS_PER_TYPE": 110,
    "SHOW_CA": False,
    "SPECIAL2": 8,
    "TIMEOFDAY": -1
}


# ???
CA = {
    "CITY": {
        "ARENA": 227,
        "BUH": 259,
        "DEALER": 234,
        "ESEL": 237,
        "POST": 241,
        "RUHMESHALLE": 221,
        "SHAKES": 217,
        "TAVERNE": 239,
        "WACHE": 244,
        "ZAUBERLADEN": 219
    },
    "HUTBECHER": {
        "1": 23562,
        "2": 23563,
        "3": 23564
    },
    "SCR": {
        "ARBEITEN_BLOCKCITY": 295,
        "CHAR_EXPBAR": 360,
        "INVITE_BLOCKCITY": 22967
    },
    "STALL": {
        "BOX": {
            "BOESE": {
                "1": 23337,
                "2": 23338,
                "3": 23339,
                "4": 23340
            },
            "GUT": {
                "1": 23333,
                "2": 23334,
                "3": 23335,
                "4": 23336
            }
        }
    },
    "TAVERNE": {
        "BAR": 23541,
        "HUTMANN": 23524,
        "QUESTOFFER": 23531,
        "TOILETTE": 24597
    },
    "TOILET": {
        "BOWL": 24616,
        "CHAIN": 24615,
        "LID": 24619,
        "TANK": 24614
    },
    "CHALDRON": 25639,
    "DEALER_AKTION": 23254,
    "DEALER_SPONSOR": 23255,
    "GILDE_DIALOG_BLOCK": 23500,
    "GOTO_WITCH": 25640,
    "POST_BLOCK": 24595,
    "SELL_ITEM": 361,
    "TV": 25706,
    "USE_ITEM": 362,
    "WITCH": 25638,
}


# ???
CB = {
    "AGB_CHECKED": 76,
    "AGB_UNCHECKED": 75,
    "COMPARE_CHECKED": 24625,
    "COMPARE_UNCHECKED": 24624,
    "CS_CHECKED": 24483,
    "CS_UNCHECKED": 24482,
    "FUCK_CHECKED": 84,
    "FUCK_UNCHECKED": 83,
    "LM_CHECKED": 24284,
    "LM_UNCHECKED": 24283,
    "TV_CHECKED": 25704,
    "TV_UNCHECKED": 25703,
}


# Color values
CLR = {
    "ATTACK": {
        "ERROR": {
            "OFFLINE": 0xA10000,
            "OFFLINE_HALF": 0xB04000,
            "ONLINE": 0xFF2000,
            "ONLINE_HALF": 0xFF6000
        },
        "OK": 8978312
    },
    "SYSMSG": {
        "CLR": 16746564,
        "GREEN": 4521796,
        "GREEN_HIGHLIGHT": 8978312,
        "RED": 16729156,
        "RED_GRAYED": 13648964,
        "RED_HIGHLIGHT": 16746632,
        "RED_HIGHLIGHT_GRAYED": 13666440,
        "HIGHLIGHT": 16764040
    },
    "ATTRIBBONUS": 8947967,
    "BLACK": 0,
    "CHAT_WHISPER": 0xFF00FF,
    "EPICITEMQUOTE": 8947967,
    "ERROR": 0xFF0000,
    "GRAYED": 13664290,
    "GRAYED_HL": 15769634,
    "ITEMENCHANTMENT": 0xA300FF,
    "NOATTACK": 15761432,
    "OFFLINE": 15769634,
    "ONLINE": 15790146,
    "RED": 16729156,
    "SFHIGHLIGHT": 16777026,
    "SFHIGHLIGHT_WHISPER": 16746751,
    "SFORANGE": 15777858,
    "WHITE": 0xFFFFFF,
}


# ???
CPC = {
    "ARMOR": 19,
    "ATTRIBS": 4,
    "ATTRIBS_BONUS": 9,
    "ATTRIBS_BOUGHT": 14,
    "CLASS": 1,
    "DAMAGE_MAX": 21,
    "DAMAGE_MIN": 20,
    "FREE": 143,
    "GOLD_STOLEN": 2,
    "GOLD_STOLEN_NEXT": 3,
    "ITEMS": 22,
    "LEVEL": 0,
    "PRICE_NEXT_LEVEL": 142,
}


# Guild Indices
GUILD = {
    "ATTACK_TARGET": 364,
    "ATTACK_TIME": 365,
    "DEFENCE_TARGET": 366,
    "DEFENCE_TIME": 367,
    "EVENT_TRIGGER_COUNT": 368,
    "IS_RAID": 9,
    "MEMBER": {
        "GOLDSPENT": 214,
        "HONOR": 164,
        "ID": 14,
        "LEVEL": 64,
        "MUSHSPENT": 264,
        "ONLINE": 114,
        "RANK": 314
    },
    "RAID_LEVEL": 8,
}


# ???
INP = {
    "ARENA_ENEMY": 23300,
    "CHAR_INVITE": 22969,
    "CHAR_INVITE2": 22971,
    "CHARDESC": 22959,
    "EMAIL": 53,
    "GILDE": {
        "CHAT": 23448,
        "DIALOG_INVITE": 23507,
        "GRUENDEN": 23362,
        "TEXT": 23367
    },
    "HALLE_GOTO": 287,
    "LOGIN_PASSWORD": 60,
    "NAME": 51,
    "OPTION": {
        "FIELD": {
            "1": 24261,
            "2": 24262,
            "3": 24263
        }
    },
    "PASSWORD": 55,
    "POST_ADDRESS": 23280,
    "POST_SUBJECT": 23279,
    "POST_TEXT": 23281
}


# Shape indices
SHP = {
    "BLACK_CHARDESC": 22958,
    "BLACK_GILDEEHRE": 22951,
    "DISCONNECTED": 24367,
    "FIGHT_BLACK_SQUARE": 23831,
    "FUCK_BLACK_SQUARE": 82,
    "MAINQUEST": 24357,
    "OPTION_BLACK": 24245,
    "POST_BLACK_SQUARE": 23265,
    "QO_BLACK_SQUARE": 23589,
    "STALL_BLACK_SQUARE": 23343
}


# Slider Indices
SLDR = {
    "ARBEITEN": {
        "SLDR": 298,
        "BAR": 299,
        "TICK": {
            "1": 300,
            "2": 301,
            "3": 302,
            "4": 303,
            "5": 304,
            "6": 305,
            "7": 306,
            "8": 307,
            "9": 308,
            "10": 309
        }
    },
    "OPTION": {
        "BAR": 24270,
        "TICK1": 24271,
        "VOLUME": 24269
    }
}


# Sound Indices
SND = {
    "CATAPULT_HIT": 24533,
    "CATAPULT_LAUNCH": 24532,
    "CLICK": 2,
    "ERROR": 3,
    "HATCH": 24742,
    "JINGLE": 4,
    "MAINQUESTS_UNLOCK": 24310,
    "MIRROR": 24737,
    "MOUNT_1": 23325,
    "SHARD": 24736,
    "TEST": 24244,
    "TOILET_DROP": 24623,
    "TOILET_FLUSH": 24622,
    "TOILET_FLUSHTRY": 24621,
    "WEAPON": 23631,
    "WITCH_DROP": 25636,
}


# ???
TSG = {
    "COPYCATS": 3,
    "FILEOFFSET": 1,
    "FREE": 447,
    "LOOT_SACK": 477,
    "PLAYERID": 0,
    "TOWER_LEVEL": 2
}


ARROW_MAX = 22950
ARROW_OFFS = 21900
BLACK_SQUARE = 1
CLA_GILDE_CREST = 24560

DIST_DEALER_Y = 50

ITM_EMPTY = 30000
ITM_MAX = 60000
ITM_OFFS = 30001

POPUP_BEGIN_LINE = 5
POPUP_END_LINE = 0
POPUP_INFO = 41

RES_X = 0x0500
RES_Y = 800

# global for logger
LOG = logging.getLogger()

# TODO: refactor into config object
param_obj = dict()
actor = dict()
texts = dict()


class RequestFailedException(Exception):
    '''
        Request to server failed
    '''
    pass


class Switch(object):
    '''
        Make Switch statements possible
        TODO: Credits for this classs?
    '''
    def __init__(self, value):
        '''
            Constructor to Switch
        '''
        self.value = value
        self.fall = False

    def __iter__(self):
        '''
            Return the match method once, then stop
        '''
        yield self.match
        raise StopIteration

    def match(self, *args):
        '''
            Indicate whether or not to enter a case suite
        '''
        if self.fall or not args:
            return True
        # changed for v1.5, see below
        elif self.value in args:
            self.fall = True
            return True
        else:
            return False


class Session(object):
    '''
        Session object to handle request stuff
    '''
    def __init__(self):
        '''
            Constructor to Session object
        '''
        # TODO: Check if needed?
        self.param_poll_tunnel_url = ""
        self.poll_lock = False
        self.send_lock = False
        self.fight_lock = False
        self.mp_api_user_id = 'notset'
        self.mp_api_user_token = 'notset'

        self.server = 's31.sfgame.de'

        self.baseuri = 'http://s31.sfgame.de/request.php'
        self.loginparams = '?req=&random=%%2&rnd=%s%s'

        self.req_format = '%s%%3B%s%%3bv1.70'
        self.rnd_format = '%s%s'

        self.session_id = '00000000000000000000000000000000'
        self.user = 'chocokiko'
        self.pwdmd5 = 'c33def595b633a53fbb6a3987ab54a05'
        random.seed()

    def login(self):
        '''
            login to server

            TODO: refactor to use sendAction()
        '''
        action = '002'

        req_string = self.req_format % (
            self.session_id + action + self.user, self.pwdmd5
        )

        random_string = '%2'
        # TODO: rework random number generation
        rnd_string = self.rnd_format % (
            random.randint(0, 9999999999),
            int(time.time() * 1000)
        )

        payload = {
            'req': req_string,
            'random': random_string,
            'rnd': rnd_string
        }

        resp = requests.get(self.baseuri, params=payload)

        return resp.text.split('/')

    def send_action(self, action, *params):
        '''
            Send formatted request to server
        '''
        if action == ACT['GET_CHAT_HISTORY']:
            if not on_stage(CNT['IF_LOGOUT']):
                return
            if self.param_poll_tunnel_url != "":
                if self.poll_lock:
                    return
            else:
                if self.poll_lock or self.send_lock or self.fight_lock:
                    return action
        else:
            if self.send_lock:
                if (action not in (
                        ACT['VALIDATE'],
                        ACT['SEND_CHAT'],
                        ACT['GUILD']['DONATE'],
                        ACT['REQUEST']['GUILD_NAMES'],
                        ACT['REQUEST']['CHAR'],
                        ACT['POST']['SEND'])):
                    LOG.warning(''.join([
                        "Aktionsbefehl wird ignoriert, weil noch auf eine ",
                        "Serverantwort gewartet wird: ",
                        str(action)
                    ]))
                    return
            else:
                if fight_lock:
                    LOG.warning(''.join([
                        "Aktionsbefehl wird ignoriert, weil ein wichtiges ",
                        "Ereignis stattfindet:",
                        str(action)
                    ]))
                    return

        data_str = str(action).zfill(3) + ';'.join(params)
        last_act = action

        fail_try = 1

        if self.session_id == "":
            self.session_id = "00000000000000000000000000000000"

            LOG.debug("SID: " + str(self.session_id))
            LOG.debug("Action: " + str(action))
            LOG.debug("Action+Daten: " + str(data_str))

        # TODO: This "if" switches base URL
        # self.param_poll_tunnel_url / param_php_tunnel_url
        if ((action == ACT['GET_CHAT_HISTORY'])
                and (self.param_poll_tunnel_url != "")):
            # TODO: move payload creation to method
            # self.param_poll_tunnel_url
            req_string = self.session_id + data_str
            random_string = '%2'
            rnd_string = str(round(random.random() * 0x77359400))
            rnd_string += str(int(time.time() * 1000))

            payload = {
                'req': req_string,
                'random': random_string,
                'rnd': rnd_string
            }

            self.poll_lock = True
        else:
            # self.param_php_tunnel_url
            req_string = self.session_id + data_str
            random_string = '%2'
            rnd_string = str(round(random.random() * 0x77359400))
            rnd_string += str(int(time.time() * 1000))

            payload = {
                'req': req_string,
                'random': random_string,
                'rnd': rnd_string
            }

            if action != ACT['GET_CHAT_HISTORY']:
                self.send_lock = True

        if self.mp_api_user_id != "notset":
            payload['mp_api_user_id'] = self.mp_api_user_id

        if self.mp_api_user_token != "notset":
            payload['mp_api_user_token'] = self.mp_api_user_token

        while fail_try < param_fail_tries:
            resp = requests.get(self.baseuri, params=payload)
            LOG.debug(resp.url)

            # TODO : test success of request here !!
            success = True

            if success:
                if ((action == ACT['GET_CHAT_HISTORY'])
                        and (self.param_poll_tunnel_url != "")):
                    self.poll_lock = False
                else:
                    self.send_lock = False

                data = resp.text()

                LOG.debug(str("Antwort auf %s: %s" % (action, data)))

                if data == "":
                    LOG.error(
                        "Fehler: Keine (leere) Antwort vom Tunnelskript.")
                    success = False
                else:
                    return data

            if not success:
                if fail_try < param_fail_tries:
                    LOG.warning(''.join([
                        "PHP-Request fehlgeschlagen (Versuch",
                        str(fail_try), "/",
                        str(param_fail_tries) + ").",
                        evt, "Erneutes Senden..."
                    ]))
                    LOG.info("Erneut gesendet.")
                else:
                    LOG.warning(''.join([
                        "PHP Tunneling fehlgeschlagen. ",
                        "Versuche, neu zu verbinden."
                    ]))
                    self.session_id = ""
                    if ((action == ACT['GET_CHAT_HISTORY'])
                            and (self.param_poll_tunnel_url != "")):
                        self.poll_lock = False
                    else:
                        self.send_lock = False

                    raise RequestFailedException()
                fail_try += 1

    def load_configuration_file(self):
        '''
            configuration loader
        '''

        response = requests.get('http://' + self.server + '/client_cfg.php')

        # error handling

        return response.text


class Character(object):
    '''
        Character information
    '''
    def __init__(self):
        '''
            Setup Character object
        '''


class Face(object):
    '''
        character face
    '''
    def __init__(self, beard=1, brows=1, cclass=1, color=1, eyes=1, hair=1,
                 male=True, mouth=1, nose=1, special=1, special2=1, volk=0):
        '''
            setup face object
        '''
        self.beard = beard
        self.brows = brows
        self.cclass = cclass
        self.color = color
        self.eyes = eyes
        self.hair = hair
        self.male = male
        self.mouth = mouth
        self.nose = nose
        self.special = special
        self.special2 = special2
        self.volk = volk


class Account(object):
    '''
        Account information
    '''
    def __init__(self):
        '''
            Setup account object
        '''
        pass


class Album(object):
    '''
        handle collectors album data
    '''
    def __init__(self, effect=False, category=0, page=0):
        '''
            setup collectors album
        '''
        self.effect = effect
        self.category = category
        self.page = page


class Guild(object):
    '''
        handle guild data
    '''
    def __init__(self):
        '''
            setup guild data with default values
        '''
        pass


class Toilet(object):
    '''
        handle toilet data
    '''
    def __init__(self):
        '''
            setup toilet object
        '''
        pass


class Witch(object):
    '''
        handle witch laboratory data
    '''
    def __init__(self):
        '''
            setup wich object
        '''
        pass


class Mirror(object):
    '''
        handle magic mirror
    '''
    def __init__(self):
        '''
            setup mirror object
        '''
        pass


def md5hash(instr):
    '''
        Calculate MD5 Hash

        @param string inStr
        @return string MD5 hash
    '''
    return md5.new(instr).hexdigest().lower()


# -----------------------------------------------------------------------------


def setup_logging():
    '''
        Setup logging module for console and file logging
    '''

    # TODO: make configurable
    # create logger
    LOG.setLevel(logging.DEBUG)

    # Console LOGging
    # create console handler and set level to debug
    handler = logging.StreamHandler()
    handler.setLevel(logging.DEBUG)

    # create formatter
    formatter = logging.Formatter(
        '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )

    # add formatter to handler
    handler.setFormatter(formatter)

    # add handler to logger
    LOG.addHandler(handler)

    # File LOGger
    # create console handler and set level to debug
    handler = logging.FileHandler('sfclient.LOG')
    handler.setLevel(logging.DEBUG)

    # create formatter
    formatter = logging.Formatter(
        '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )

    # add formatter to handler
    handler.setFormatter(formatter)

    # add handler to logger
    LOG.addHandler(handler)

    return LOG


def init_vars():
    '''
        Initialize tons of Variables
        ex frame1()

        TODO: check vars if needed
    '''
    # values char_*
    defaultface = Face()

    # values revertchar_*
    revertface = Face()

    # values album_*
    col_album = Album()

    global actor
    actor = list()

    # actorBitmap = list()
    # actorLoaded = list()
    # actorPersistent = list()
    # actorpopup_stamp = list()
    # actorSoundLoader = list()
    # actorURL = list()

    # admin_login = ""

    # allow_smoothing = True
    # alternate_char_opp_img = False
    # arrow_hall_mode = False
    # avgLevel = 0

    # beer_fest = False

    # BlockReroll = False

    # buffed_email = ""
    # buffed_id = ""
    # buffed_link_text = ""
    # buffed_link_url = ""
    # buffed_mode = False
    # buffed_name = ""
    # buffed_reg = ""
    # buffed_req = False
    # buffed_stuff = list()

    # can_rob = False

    # canBoost = list()

    # chat_sound = False
    # ChatHist = list()

    # chosen_lang_font = "Komika Text"
    # compare_items = False
    # contentMax = 1700
    # copyCatSel = 0

    # CorrectItemType = [6, 3, 5, 4, 8, 7, 9, 10, 1, 2]

    # country_name = list()

    # crest = getRandomCrest()
    # crestColor = [0, 0, 0, 0]
    # crestColorSelection = 0
    # crestMoveTimer = new Timer(25)
    # crestMoveTimer.add_event_listener(TimerEvent.TIMER, crestMoveFn)
    # crestSuggested = False
    # crestSuggestion = list()

    # CupChosen = 0
    # dataprot_url = ""
    # dealer_aktion = 0
    # DealerMenuSelect = 0
    # defined_pixel_calls = list()
    # DemoMode = False
    # destroy_guild_btn_timer = False
    # disable_tv = False
    # dragDropActive = False
    # dragDropProhibit = False
    # dragNotYet = False
    # fight_flush_mode = False
    # fight_lock = False
    # fightNumber = 0
    # fights = list()
    # Filter_Shadow = [
    # first_chat_fill = False
    # font_embedded = True

    # font_format_chat = new TextFormat()
    # font_format_chatError = new TextFormat()
    # font_format_chatWhisper = new TextFormat()
    # FontFormat_AttackLabel = new TextFormat()
    # FontFormat_Attrib = new TextFormat()
    # FontFormat_AttribBonus = new TextFormat()
    # FontFormat_AttribTemp = new TextFormat()
    # FontFormat_Book = new TextFormat()
    # FontFormat_BookHint = new TextFormat()
    # FontFormat_BookLeft = new TextFormat()
    # FontFormat_Bullshit = new TextFormat()
    # FontFormat_CatapultDamage = new TextFormat()
    # FontFormat_ClassError = new TextFormat()
    # FontFormat_CriticalDamage = new TextFormat()
    # FontFormat_Damage = new TextFormat()
    # FontFormat_Default = new TextFormat()
    # FontFormat_DefaultLeft = new TextFormat()
    # FontFormat_EpicItemQuote = new TextFormat()
    # FontFormat_Error = new TextFormat()
    # FontFormat_Grayed = new TextFormat()
    # FontFormat_GrayedHighLight = new TextFormat()
    # FontFormat_GuildBuilding = new TextFormat()
    # FontFormat_GuildHallNoAttack = new TextFormat()
    # FontFormat_GuildListText = new TextFormat()
    # FontFormat_GuildListTextAttackError = new TextFormat()
    # FontFormat_GuildListTextAttackErrorHalf = new TextFormat()
    # FontFormat_GuildListTextAttackErrorOnline = new TextFormat()
    # FontFormat_GuildListTextAttackErrorOnlineHalf = new TextFormat()
    # FontFormat_GuildListTextAttackErrorOnlinePopup = new TextFormat()
    # FontFormat_GuildListTextAttackOk = new TextFormat()
    # FontFormat_GuildListTextAttackOkPopup = new TextFormat()
    # FontFormat_GuildListTextOnline = new TextFormat()
    # FontFormat_GuildMoney = new TextFormat()
    # FontFormat_HallListHeading = new TextFormat()
    # FontFormat_HallListHighLight = new TextFormat()
    # FontFormat_HallListText = new TextFormat()
    # FontFormat_Heading = new TextFormat()
    # FontFormat_Highlight = new TextFormat()
    # FontFormat_HighlightWhisper = new TextFormat()
    # FontFormat_HighStakes = new TextFormat()
    # FontFormat_HighStakesGrayed = new TextFormat()
    # FontFormat_HighStakesHighLight = new TextFormat()
    # FontFormat_HighStakesHighLightGrayed = new TextFormat()
    # FontFormat_ItemEnchantment = new TextFormat()
    # FontFormat_LifeBar = new TextFormat()
    # FontFormat_LOGoutLink = new TextFormat()
    # FontFormat_LOGoutLinkHighLight = new TextFormat()
    # FontFormat_PayIcon = new TextFormat()
    # FontFormat_Popup = new TextFormat()
    # FontFormat_PopupCompare = new TextFormat()
    # FontFormat_PopupCompareBetter = new TextFormat()
    # FontFormat_PopupCompareBetterHL = new TextFormat()
    # FontFormat_PopupCompareSum = new TextFormat()
    # FontFormat_PopupCompareWorse = new TextFormat()
    # FontFormat_PopupCompareWorseHL = new TextFormat()
    # FontFormat_PostListHeading = new TextFormat()
    # FontFormat_PostListHighLight = new TextFormat()
    # FontFormat_PostListHighLightSys = new TextFormat()
    # FontFormat_PostListHighLightSysGreen = new TextFormat()
    # FontFormat_PostListHighLightSysRed = new TextFormat()
    # FontFormat_PostListText = new TextFormat()
    # FontFormat_PostListTextSys = new TextFormat()
    # FontFormat_PostListTextSysGreen = new TextFormat()
    # FontFormat_PostListTextSysRed = new TextFormat()
    # FontFormat_QuestBar = new TextFormat()
    # FontFormat_ScreenTitle = new TextFormat()
    # FontFormat_Speech = new TextFormat()
    # FontFormat_TimeBar = new TextFormat()
    # FontFormat_ToiletAura = new TextFormat()

    # force_adventure = False
    # force_smoothing = True
    # forum_url = ""
    # forward_text = ""
    # FrenzyMode = False
    # friend_link = ""
    # game_font = ""
    # game_time = new Date()
    # gilde = ""
    # GildeBuildingGold = list()
    # GildeBuildingPilz = list()
    # GildeChatScroll = 0
    # gilden_id = 0
    # guild_attack_time = 0
    # guild_attacked = ""
    # guild_attacking = ""
    # guild_blink_ready = False
    # guild_defense_time = 0
    # guild_fight_count = 0
    # guild_hall_mode = False
    # guildForumLink = ""
    # guildInstanceID = 0

    # had_account = False
    # has_mirror = False

    # hasFoughtGuildBattle = False
    # hasLostMQ = False

    image_timeout = 3
    # img_url = list()
    # img_url_index = 0
    # imprint_url = ""
    # indexInGuild = 0
    # indexInHall = 0
    # instr_url = ""
    # interval_multiplier_chat = 1
    # interval_multiplier_reconnect = 1
    # invitegilden_id = 0
    # io_error_count = 0
    # KlasseGewählt = False

    # lang_code = "de"
    # lang_url = ""

    # last_chat_hist = ""
    # last_chat_index = 0
    # last_guild_data = list()
    # last_guild_shown = ""
    # last_hall_members = list()
    # last_level = 0
    # last_message_target = ""
    # last_round_fighter_name = ""
    # last_whisper_target = ""
    # lastAct = 0
    # lastAttacked = list()
    # LastDungeonEnemy = 0
    # LastDungeonNr = 0
    # lastGuildMembers = list()
    # lastPlayer = ""
    # lastRaidCost = 0
    # legal_url = ""
    # level_up = False
    # light_mode = False
    # light_mode_default = False
    # local_time = new Date()
    # login_background_id = "3"
    # mirror_ani_timer = new Timer(25)
    # mirror_ani_timer.add_event_listener(TimerEvent.TIMER, MirrorAniFn)
    # mirror_fade_amount = 0.2
    # mirror_pieces = list()
    # mirrorAniStep = 0
    # mp_project = "sfgame2"
    # MQDelayTimer = new Timer(500)
    # MQSInstance = 0
    # mush_bought = 0
    # my_own_attack_target = -1
    # my_own_guild_money = -1
    # my_own_rank = -1
    # new_crest_suggested = ""
    # next_fight_timer = new Timer(10, 1)
    # next_pxl = 0
    # no_crossdomain = False
    # noMush = False
    # notFirstVolChange = True
    # notSecondVolChange = True
    # offline_guild_members = list()
    # old_album = -1
    # old_crest_str = ""
    # oldSel = 0
    # option_new_data = ""
    # original_lang_code = "de"
    # param_adv = ""
    # param_allow_skip_quest = False
    # param_bullshit_cid = ""
    # param_bullshit_text = ""
    # param_censored = False
    # param_cid = ""
    # param_cid_original = False
    # param_fail_tries = 1
    # param_forceport = 0
    # param_gamestaff_email = param_support_email
    # param_hall = ""
    # param_happy_hour = False
    # param_id = ""
    # param_idle_polling = 0
    # param_imgsvr = 0
    # param_internal_pixel = False
    # param_language_names = list()
    # param_languages = list()
    # param_lowres_url = ""
    # param_no_cid_save = False
    # param_obj = LoaderInfo(root.loader_info).parameters
    # param_papaya_cfg_file = ""
    # param_papaya_path = ""
    # param_php_tunnel_url = ""
    # param_poll_tunnel_url = ""
    # param_rec = ""
    # param_reconnect = 5000
    # param_reload_pixel = False
    # param_reroll_img = 0
    # param_server_version_act = "unknown"
    # param_server_version_cfg = "unknown"
    # param_social_buttons = list()
    # param_sponsor = ""
    # param_sponsor_url = ""
    # param_support_email = "support@sfgame.de"
    # param_valid = ""
    # pay_methods = list()
    # pending_configuration_files = False
    # pending_debug_file = False
    # pending_language_file = False
    # pendingdo_loaders = 0
    # player_desc = ""
    # playerTowerLevel = 0
    # pollLock = False
    # popup_stamp = 0
    # post_fight_mode = False
    # post_scroll = 1
    # post_scrollDown = False
    # post_sel = 0
    # postInstance = 0
    # PostMax = 1
    # PostReturnToPlayer = ""
    # PresetGold = 0
    # PresetMush = 0
    # prevent_tv = False
    # previous_login = False
    # pulse_arbeiten = False
    # pulse_char = False
    # pulse_dealer = False
    # pulse_gilde = False
    # pulse_gilde_on_history = False
    # pulse_post = False
    # pulse_taverne = False
    # reply_address = ""
    # reply_subject = ""
    # response_timeout = 10

    # RollFrenzy = new Timer(1000)
    # ruhmes_halle_such_name = True
    # ruhmes_halle_such_string = ""
    # savegame = list()
    # sel_guild = ""
    # sel_name = ""
    # SelectedDungeon = 0
    # SelectedGuild = ""
    # SelectedQuest = 1
    # selecterCrestElement = -1
    # sendLock = False
    # server = "localhost"
    # server_id = 0
    # server_time = new Date()
    # session_id = ""
    # set_font(new SFGameFont().font_name)
    # shop_url = ""

    # showActivityTime = False
    # showAlbumOffset = False
    # SignupJumpRunning = False

    # size_mod = 0
    # skip_allowed = False
    # skip_guild_fights = 0
    # slm_count = 0
    # smoothing = True
    # snd_url = list()
    # snd_url_index = 0
    # special_action = 0
    # special_actionHint = False
    # sso_mode = False
    # stObject = new SoundTransform()
    # ststep = 0
    # stundenlohn = 10
    # suggestion_slot = list()
    # suggestNames = list()
    # text_dir = "left"
    # tmp_battle_info = ""
    # tmpAmount = 0
    # to_error_count = 0

    # toiletTankAdjustTimer = new Timer(25)
    # toiletTankCurrent = 0
    # toiletTankDest = 0

    # tower_fight_mode = False
    # tower_level = 0
    # tower_levelLabelPos = (SCR_CHAR_CHARX + 127)
    # towerScroll = 0
    # towerScrollDest = 0
    # towerScrollGrabPos = -1
    # towerScrollSpeed = 0
    # towerScrollTimer = new Timer(25)
    # towerScrollTimer.add_event_listener(TimerEvent.TIMER, TowerTimerFn)

    # trackPixels = list()
    # tv_function_name = ""
    # tv_poll_normal = 5000
    # tv_poll_long = 300000
    # tvTest = False
    # verdientes_geld = 0
    # view_player = ""

    # witchDesiredType = -1

    # worlds = list()
    #     new DropShadowFilter(3, 45, 0, 0.8),
    #     new GradientGlowFilter(
    #         0, 45, [CLR_BLACK, CLR_BLACK], [0, 0.3],
    #         [0, 32], 1, 1, 5, 15, "outer")
    # ]

    # Filter_HeavyShadow = [
    #     new DropShadowFilter(2, 45, 0, 1, 5, 5, 3, 3),
    #     new GradientGlowFilter(
    #         0, 45, [CLR_BLACK, CLR_BLACK], [0, 0.3],
    #         [0, 32], 1, 1, 5, 15, "outer")
    # ]

    # crestElementPos = [
    #     [55, 8, 130, 90, 21],
    #     [0, 50, 240, 150, 34],
    #     [65, 75, 108, 114, 23],
    #     [15, 194, 210, 45, 12],
    #     [85, 17, 73, 70, 24],
    #     [98, 176, 43, 40, 16],
    #     [85, 100, 70, 70, 68]
    # ]

    # heraldicColors = [
    #     [0, 0, 1],
    #     [1, 0, 0],
    #     [0.7, 0, 0.8],
    #     [0.1, 0.1, 0.1],
    #     [0, 0.6, 0],
    #     [1, 0.8, 0],
    #     [0.9, 0.9, 0.9],
    #     [0.7, 0.4, 0.2],
    #     [0.5, 0.5, 0.5],
    #     [0.7, 0, 0],
    #     [0.5, 0, 0.3],
    #     [1, 0.6, 0],
    #     [1, 0.8, 0.8]
    # ]

    # Filter_CrestSelected = new GradientGlowFilter(
    #     0, 0, [16777026, 16777026], [0, 0.6], [0, 127],
    #     26, 26, 1, 1, "outer"
    # )

    # toiletTankAdjustTimer.add_event_listener(
    #     TimerEvent.TIMER,
    #     toiletTankAdjustEvent
    # )

    # get buffered registration?
    if ('reg' in param_obj.keys()) and (param_obj["reg"] is not None):
        buffed_req = True
        buffed_reg = ExternalInterface.call("get_base64")
        if (buffed_reg) and (buffed_reg != ""):
            buffed_stuff = buffed_reg.split("")
            if len(buffed_stuff) == 3:
                buffed_id = buffed_stuff[0]
                buffed_name = buffed_stuff[1]
                buffed_email = buffed_stuff[2]

    # pre populate text snippet list
    global texts
    texts = list()
    while len(texts) < 20000:
        texts.append("")

    # setup image loading timeout event
    global whendo_loaded_fn, whendo_loaded_active, whendo_loaded_timeout
    whendo_loaded_fn = list()
    whendo_loaded_active = False
    whendo_loaded_timeout = Timer(1000 * image_timeout, 1)
    whendo_loaded_timeout.add_event_listener(
        TimerEvent.TIMER,
        whendo_loaded_timeout_event
    )

    # timer event to generate Ticks
    time_calc = Timer(50)
    time_calc.add_event_listener(TimerEvent.TIMER, time_calcEvent)

    # TV Stuff
    tv_status = 0
    tv_status_dest = 0
    tv_wobble = 0
    tv_ani = 0
    tv_return_value = 0
    tv_timer = Timer(100)

    tv_timer.add_event_listener(TimerEvent.TIMER, tv_timer_event_handler)
    tv_poll_timer = Timer(5000)
    tv_poll_timer.add_event_listener(TimerEvent.TIMER, try_show_tv)

    pvp_delay_timer = Timer(500)

    # Witch Animation Timer
    witch_ani_step = 0
    witch_ani_timer = Timer(50)
    witch_ani_timer.add_event_listener(TimerEvent.TIMER,
                                       witch_timer_event_handler)

    # Fight timers
    next_fight_timer.add_event_listener(TimerEvent.TIMER, next_fight)
    guild_fight_timer = Timer(1000)
    guild_fight_timer.add_event_listener(TimerEvent.TIMER,
                                         guild_fight_timer_fn)
    guild_fight_timer.start()

    # Guild chat poll
    guild_chat_poll = Timer(1000)
    guild_chat_poll.add_event_listener(TimerEvent.TIMER, guild_chat_poll_fn)
    guild_chat_poll.start()


def configure(session):
    '''
        Load configuration from server
        Load language file from server

        TODO: check event stuff??

        @oldname Start
    '''
    serverconfig = session.load_configuration_file()

    whendo_loaded(dodo_load_language_file)


# -----------------------------------------------------------------------------
# gold stuff

def geld(amount):
    '''
        Format money amout in silver into a string

        @param int amount
        @return str formatted money string
    '''
    gold = gold_anteil(amount)
    silber = silber_anteil(amount)

    geld_str = ''

    if gold > 0:
        geld_str += '%d %s' % (gold, texts[TXT["GOLD"]])
        if silber > 0:
            geld_str += ' %s ' % (texts[TXT['UND']])
    if silber > 0:
        geld_str += '%d %s' % (texts[TXT['SILBER']])

    return geld_str


def gold_anteil(amount):
    '''
        get gold part of money value

        @param int amount
        @return int
    '''
    return int(amount / 100)


def silber_anteil(amount):
    '''
        get silver part of money value

        @param int amount
        @return int
    '''
    return int(amount % 100)

# -----------------------------------------------------------------------------
# Time and date stuff


def tageszeit():
    '''
        get time of day
        0 - night
        1 - dusk/dawn
        2 - day

        @return int
    '''
    # TODO: make this a parameter?
    hours = time.strftime('%H')

    if hours < 4:
        return 0
    elif hours < 8:
        return 1
    elif hours < 18:
        return 2
    elif hours < 21:
        return 1
    else:
        return 0


def sleep_time():
    '''
        get charakters sleeping time

        @return bool True= Time to sleep
    '''
    # TODO: make this a parameter?
    hours = time.strftime('%H')

    if C['TIMEOFDAY'] >= 0:
        return C['TIMEOFDAY']
    elif hours < 7:
        return True
    elif hours < 23:
        return False
    else:
        return True


def is_today(req_time):
    '''
        checks if timestamp is today
    '''
    req_date = datetime.fromtimestamp(req_time/1000)
    return req_date.date() == datetime.today().date()


def time_str(req_time, short=False):
    '''
        convert datetime object to formatted string

    '''

    req_date = datetime.fromtimestamp(req_time/1000)

    formats = {
        "de": {
            'short': '%d.%m. %H:%M',
            'long': '%d.%m.%Y %H:%M:%S'
        },
        "pl": {
            'short': '%d/%m/ %H:%M',
            'long': '%d/%m/%Y %H:%M:%S'
        },
        "default": {
            'short': '%d/%m/ %H:%M',
            'long': '%d/%m/%Y %H:%M:%S'
        }
    }

    code = lang_code
    if code not in formats.keys():
        code = "default"

    length = 'long'
    if short:
        length = 'short'

    return req_date.strftime(formats[code][length])


def time_calc_event():
    '''
        Time Event Callback
    '''
    current_time = datetime.now()
    if (slm_count > 23) and (ststep == 8):
        add(IMG['FILLSPACE'])
        slm_count = 0

    game_time.setTime(
        current_time.getTime() + server_time.getTime() - local_time.getTime()
    )

# -----------------------------------------------------------------------------
# Quest stuff


class Quest(object):
    '''
        harndle qurest data
    '''
    def __init__(self, qtype, qid, qlevel, qmonster,
                 qexp, qgold, qtime, qlocation, qitems):
        '''
            Setup Quest object
        '''

        # set members directly
        self.qtype = qtype
        self.qid = qid
        self.qlevel = qlevel
        self.qmonster = qmonster
        self.qtime = qtime
        self.qitem = qitem
        self.qexp = qexp
        self.qgold = qgold
        self.qlocation = qlocation

        self.qtitle = ''
        self.qtext = ''

        # set derived members
        self.get_title()
        self.get_text()

    def from_sg(self, qid, save):
        '''
            setup Quest object from savegame
        '''
        # Constants
        sg_idx = SG['QUEST']['OFFER']

        # set members directly from savegame
        qtype = int(save[sg_idx['TYPE1'] + qid])
        qlevel = int(save[sg_idx['LEVEL1'] + qid])
        qmonster = int(save[sg_idx['ENEMY1'] + qid])
        qexp = int(save[sg_idx['EXP1'] + qid])
        qgold = int(save[sg_idx['GOLD1'] + qid])
        qtime = int(save[sg_idx['DURATION1'] + qid])
        qlocation = int(save[sg_idx['LOCATION1'] + qid])
        qitem = int(save[sg_idx['REWARD_ITM1'] + qid])

        return self.__init__(
            qtype, qid, qlevel, qmonster, qexp,
            qgold, qtime, qlocation, qitem
        )

    def get_title(self):
        '''
            gets quest title snippet

            @return string
        '''
        # check for cached value
        if not self.qtitle:
            qst = TXT['QUEST']
            offs = qst['SCOUT']['TITLE']

            for case in Switch(self.qtype):
                if case(1):
                    offs = qst['SCOUT']['TITLE'] + self.get_random(20, 0)
                    break
                if case(2):
                    offs = qst['COLLECT']['TITLE'] + self.get_random(20, 0)
                    break
                if case(3):
                    offs = qst['FETCH']['TITLE'] + self.get_random(20, 0)
                if case(4):
                    offs = qst['KILL']['TITLE']
                    offs -= self.qmonster - 1
                    break
                if case(5):
                    offs = qst['TRANSPORT']['TITLE'] + self.get_random(21, 0)
                    break
                if case(6):
                    offs = qst['ESCORT']['TITLE'] + self.get_random(23, 0)
                    break

            if texts[offs]:
                self.qtitle = texts[offs]

            # Error msg if no quest title found
            # return 'ERR QID=%d QT=%d OFS=%d' % (
            #     quest_id, quest_type, offs
            # )

        return self.qtitle

    def get_text(self):
        '''
            get quest description

            @return str
        '''
        if not self.qtext:
            # Constants
            idx = TXT['QUEST']

            self.qtext = ''.join(
                '\"',
                texts[idx['OPENER'] + self.get_random(10, 3)],
                ' '
            )

            for case in Switch(self.qid):
                if case(1):
                    self.qtext += ' '.join(
                        texts[idx['LOCATION'] + self.qlocation - 1],
                        texts[
                            idx['SCOUT']['TASK1'] + self.get_random(20, 0)
                        ],
                        texts[
                            idx['SCOUT']['TASK2'] + self.get_random(10, 1)
                        ],
                        ' '
                    )
                    break

                if case(2):
                    self.qtext += ' '.join(
                        texts[
                            idx['COLLECT']['WHAT'] + self.get_random(20, 0)
                        ],
                        texts[idx['LOCATION'] + self.qlocation - 1],
                        texts[
                            idx['COLLECT']['AMOUNT'] + self.get_random(11, 1)
                        ].replace(
                            "%",
                            str(self.get_random(10, 2) + 2)
                        ),
                        ' '
                    )
                    break

                if case(3):
                    self.qtext += ' '.join(
                        texts[
                            idx['FETCH']['WHAT'] + self.get_random(20, 0)
                        ],
                        texts[idx['LOCATION'] + self.qlocation - 1],
                        texts[
                            idx['FETCH']['FROM'] + self.get_random(15, 1)
                        ],
                        texts[
                            idx['FETCH']['PRECLOSER'] + self.get_random(20, 0)
                        ],
                        ' '
                    )
                    break

                if case(4):
                    self.qtext += ' '.join(
                        texts[idx['KILL']['LOCATION'] + self.qlocation - 1],
                        texts[
                            idx['KILL']['WHOM'] - self.qmonster - 1
                        ],
                        texts[
                            idx['KILL']['PRECLOSER'] + self.get_random(10, 1)
                        ],
                        " "
                    )
                    break

                if case(5):
                    self.qtext += ' '.join(
                        texts[
                            idx['TRANSPORT']['WHAT'] + self.get_random(21, 0)
                        ],
                        texts[
                            idx['TRANSPORT']['LOCATION'] + self.qlocation - 1
                        ],
                        texts[
                            idx['TRANSPORT']['PRECLOSER']
                            + self.get_random(10, 1)
                        ],
                        " "
                    )
                    break

                if case():
                    self.qtext += ' '.join(
                        texts[
                            idx['ESCORT']['WHOM'] + self.get_random(23, 0)
                        ],
                        texts[
                            idx['ESCORT']['LOCATION'] + self.qlocation - 1
                        ],
                        texts[
                            idx['ESCORT']['PRECLOSER'] + self.get_random(23, 0)
                        ],
                        " "
                    )

        return self.qtext

    def get_random(self, rrange, rmod):
        '''
            Get quest random number

            @param int rrange
            @param int rmod

            @return int
        '''
        checksum = 0

        if rmod != 1:
            modifier = self.qlevel
        if rmod != 2:
            modifier = self.qtype
        if rmod != 3:
            modifier = self.qmonster

        checksum += modifier
        checksum += self.qlocation
        checksum += self.qtime
        checksum += self.qexp
        checksum += self.qgold
        checksum += self.qitem.typ
        checksum += self.qitem.pic

        return checksum % rrange

    def get_bg(self):
        '''
            Get quest background index

            @return int
        '''
        return LBL['SCR']['QUEST']['BG'][str(self.qlocation)]


# -----------------------------------------------------------------------------
# Item stuff

class Item(object):
    '''
        handle Item data
    '''
    def __init__(self, pic=0, typ=0, cclass=1, gold=0,
                 maxd=0, mind=0, color=0, attr=False):
        '''
            setup Item object

            TODO: documentation
        '''
        self.pic = pic
        self.typ = typ
        self.cclass = cclass
        self.gold = gold
        self.color = color
        self.damage = {
            'min': mind,
            'max': maxd
        }
        if type(attr) is list:
            self.attr = attr
        else:
            self.attr = [
                {'typ': 0, 'val': 0},
                {'typ': 0, 'val': 0},
                {'typ': 0, 'val': 0}
            ]
        while self.pic >= 1000:
            self.pic -= 1000
            self.cclass += 1

    def from_sg(self, sg_index=0, save=False):
        '''
            setup item object from savegame

            @param int sg_index
            @param list save

            @return self
        '''
        # Preset values
        pic = 0
        typ = 0
        cclass = 1
        gold = 0
        color = 0
        mush = 0
        damage = {'max': 0, 'min': 0}
        attr = [
            {'typ': 0, 'val': 0},
            {'typ': 0, 'val': 0},
            {'typ': 0, 'val': 0}
        ]

        if type(save) is list:
            pic = int(save[sg_index + SG['ITM']['PIC']])
            typ = int(save[sg_index + SG['ITM']['TYP']])

            gold = int(save[sg_index + SG['ITM']['GOLD']])
            mush = int(save[sg_index + SG['ITM']['MUSH']])
            damage['max'] = int(save[sg_index + SG['ITM']['SCHADEN_MAX']])
            damage['min'] = int(save[sg_index + SG['ITM']['SCHADEN_MIN']])

            for i in range(3):
                attr[i]['typ'] = save[sg_index + SG['ITM']['ATTRIBTYP1'] + i]
                attr[i]['val'] = save[sg_index + SG['ITM']['ATTRIBVAL1'] + i]

            for i in range(8):
                color += int(save[sg_index + SG['ITM']['SCHADEN_MIN'] + i])

            color = color % 5

        return self.__init__(
            pic, typ, cclass, gold, mush, damage['max'],
            damage['min'], color, attr
        )

    def get_name(self):
        '''
            get item name snippet

            @param int sg_index index of item in savegame
            @param list SG savegame
            @param int albumMode

            @return str

            @oldname GetItemName
        '''

        txt_idx = TXT['ITMNAME']
        txt_base = 0
        txt_suffix = ""

        if self.cclass <= 0:
            dom_attr_typ = -1
            dom_attr_val = 0
            attr_val_code = 0
            attr_val_offs = 0

            attrim_in = list()
            for i in range(10):
                attrim_in[i] = False

            for i in range(3):
                if self.attr[i]['val'] > dom_attr_val:
                    dom_attr_typ = self.attr[i]['typ']
                    dom_attr_val = self.attr[i]['val']
                if (self.attr[i]['typ'] > 0) and (self.attr[i]['val'] > 0):
                    attrim_in[self.attr[i]['typ'] - 1] = True

            attr_val_code = pow(2, dom_attr_typ - 1)

            if dom_attr_val >= 25:
                attr_val_offs = 250
            elif dom_attr_val >= 16:
                attr_val_offs = 200
            elif dom_attr_val >= 11:
                attr_val_offs = 150
            elif dom_attr_val >= 6:
                attr_val_offs = 100
            elif dom_attr_val >= 3:
                attr_val_offs = 50

            if attr_val_code > 0:
                txt_suffix = texts[
                    txt_idx['EXT'] + attr_val_code + attr_val_offs
                ]

        if self.typ >= 8:
            txt_base = txt_idx[str(self.typ)]
        else:
            txt_base = txt_idx[str(self.typ)][str(self.cclass)]

        if (self.pic >= 50) and (self.typ != 14):
            txt_base += txt_idx['1']['1']['EPIC'] - txt_idx['1']['1']
            self.pic -= 49
            txt_suffix = ""

        if texts[txt_base + self.pic - 1] is None:
            return "Unknown Item (base=%d, entry=%d)" % (
                txt_base, (txt_base + self.pic - 1)
            )

        if texts[txt_idx['EXT']] == "1":
            result = ""
            if txt_suffix != "":
                result = texts[txt_base + self.pic - 1]
            return result

        if texts[txt_idx['EXT']] == "2":
            result = txt_suffix.replace("%1", texts[txt_base + self.pic - 1])
            if txt_suffix == "":
                result = texts[txt_base + self.pic - 1]
            return result

        result = texts[txt_base + self.pic - 1] + " " + txt_suffix
        if txt_suffix == "":
            result = texts[txt_base + self.pic - 1]
        return result

    def get_file(self, itm_color):
        '''
            get item graphic relative url

            @oldname GetItemFile
            @param int itm_color
            @return str

            TODO: itm_color ???
        '''
        item_file = "itm"

        if (self.pic >= 50) and (self.typ != 14):
            itm_color = 0

        item_file += str(self.typ) + "-" + str(self.pic)

        if self.typ in range(1, 8):
            item_file = str(self.typ) + "-" + str(self.cclass + 1) + "/"
            item_file += item_file + "-" + str(itm_color + 1)
            item_file += "-" + str(self.cclass + 1)
        else:
            if self.typ in range(8, 15):
                item_file = str(self.typ) + "-1/" + item_file + "-"
                if self.typ < 10:
                    item_file += str(self.color + 1) + "-"

                item_file += "1"

        return "res/gfx/itm/" + item_file + ".png"

    def get_id(self):
        '''
            get item ID

            @return int
            @oldname GetItemID

        '''
        item_id = SG['ITM']['OFFS']
        slot_num = 0
        owner_class = 0
        is_sg = False
        no_shield_flag = False

        if self.cclass < 0:
            slot_id = self.typ + self.pic * SG['ITM']['SIZE']
            slot_num = self.pic + 1

            if self.cclass == -2:
                is_sg = True
            elif self.cclass <= -3:
                owner_class = -1 * self.cclass - 2
                no_shield_flag = True
                is_sg = True

        item_id += self.typ * C['ITEMS_PER_TYPE'] * 5 * 3
        item_id += self.pic * 5 * 3
        item_id += self.color * 3
        item_id += self.cclass

        if item_id >= SG['ITM']['MAX']:
            # FIXME
            # LOG.error("Fehler: Zu wenige Indizes für Items:", item_id,
            # ITM_MAX, "Typ:", itmTyp, "Pic:", itm_pic, "Color:",
            # itm_color, "Class:", itm_class)
            return 0

        if is_sg and (self.typ == 0) and (slot_num > 0) and (slot_num <= 10):
            if slot_num <= 8:
                item_id = IMG['EMPTY']['SLOT']['1'] + slot_num - 1
            else:
                if owner_class == 1:
                    if slot_num == 9:
                        item_id = IMG['EMPTY']['SLOT']['9_1']
                    else:
                        if no_shield_flag:
                            item_id = IMG['NO_SHIELD']
                        else:
                            item_id = IMG['EMPTY']['SLOT']['10']
                elif owner_class == 2:
                    if slot_num == 9:
                        item_id = IMG['EMPTY']['SLOT']['9_2']
                elif owner_class == 3:
                    if slot_num == 9:
                        item_id = IMG['EMPTY']['SLOT']['9_3']

        return item_id


def get_arrow_id(itm_class, itm_pic, some_obj=False, slot_mode=False,
                 color_override=-1):
    '''
        calculate id for arrow/bolt shots
    '''
    arrow_id = ARROW_OFFS
    if slot_mode:
        if not type(some_obj) is list:
            some_obj = savegame

        slot_id = itm_class + itm_pic * SG['ITM']['SIZE']
        itm_pic = some_obj[slot_id + SG['ITM']['PIC']]
        itm_color = 0

        for i in range(8):
            itm_color += int(some_obj[slot_id + SG['ITM']['SCHADEN_MIN'] + i])

        itm_color = itm_color % 5

        itm_class = 0
        while itm_pic >= 1000:
            itm_pic -= 1000
            itm_class += 1
        itm_class -= 1
    else:
        itm_color = int(some_obj)

    if color_override >= 0:
        itm_color = color_override

    arrow_id += itm_class * 5 * 100
    arrow_id += itm_pic * 5
    arrow_id += arrow_id + itm_color

    if arrow_id >= ARROW_MAX:
        LOG.error(' '.join(
            "Fehler: Zu wenige Indizes für Pfeile:",
            arrow_id,
            ">=",
            ARROW_MAX,
            "Pic:",
            itm_pic,
            "Color:",
            itm_color,
            "Class:",
            itm_class
        ))
        return 0

    return arrow_id


# -----------------------------------------------------------------------------
# Weapon stuff

def get_weapon_sound_file(wpn_class, wpn_pic, use_case):
    '''
        get weapon sound file url
    '''
    use_case_str = ""
    for case in Switch(use_case):
        if case(0):
            use_case_str = "s"
            break
        if case(1):
            use_case_str = "n"
            break
        if case(2):
            use_case_str = "b"
            break
        if case(3):
            use_case_str = "k"
            break

    file_name = 'res/sfx/wpn/wpn'
    if wpn_pic < 1:
        file_name += str(1)
    else:
        file_name += str(wpn_class)

    return file_name + "-%d-%s.mp3" % (
        get_weapon_level(wpn_class, wpn_pic) + 1, use_case_str
    )


def get_weapon_sound(wpn_class, wpn_pic, use_case):
    '''
        get sound actor
    '''
    snd_actor = SND['WEAPON']
    snd_actor += (wpn_class - 1) * 4 * 14
    snd_actor += get_weapon_level(wpn_class, wpn_pic) * 4
    snd_actor += snd_actor + use_case
    return snd_actor


def get_weapon_level(wpn_class, wpn_pic):
    '''
        calculate weapon level
    '''
    for case in Switch(wpn_class):
        result = None

        if case(1):
            if wpn_pic == -7:
                result = 7
            elif wpn_pic == -3:
                result = 6
            elif wpn_pic in (-2, -1, 54):
                result = 4
            elif wpn_pic == 0:
                result = 5
            elif wpn_pic in (-5, -4, 1, 2, 3, 4):
                result = 0
            elif wpn_pic in (5, 6, 8, 11, 15, 17, 19, 21, 22, 24, 26, 27,
                             29, 30, 50, 51, 60):
                result = 1
            elif wpn_pic in (-6, 7, 10, 13, 16, 20, 23, 25, 28, 52):
                result = 2
            elif wpn_pic in (9, 12, 14, 18):
                result = 3
            elif wpn_pic == 53:
                result = 8
            elif wpn_pic == 55:
                result = 9
            elif wpn_pic == 56:
                result = 10
            elif wpn_pic == 57:
                result = 11
            elif wpn_pic == 58:
                result = 12
            elif wpn_pic == 59:
                result = 13

            if result is not None:
                return result
            break
        if case(2):
            if wpn_pic in range(-5, 0):
                result = 4
            elif wpn_pic == 0:
                result = 5
            elif wpn_pic in (1, 60):
                result = 0
            elif wpn_pic in (2, 9):
                result = 1
            elif wpn_pic in (6, 7, 10, 52, 54):
                result = 2
            elif wpn_pic in (3, 4, 5, 8, 50, 51):
                result = 3
            elif wpn_pic == 53:
                result = 4
            elif wpn_pic == 55:
                result = 9
            elif wpn_pic == 56:
                result = 10
            elif wpn_pic == 57:
                result = 11
            elif wpn_pic == 58:
                result = 12
            elif wpn_pic == 59:
                result = 13

            if result is not None:
                return result
            break
        if case(3):
            if wpn_pic in range(-5, 0):
                result = 4
            elif wpn_pic == 0:
                result = 5
            elif wpn_pic in (1, 2):
                result = 0
            elif wpn_pic == (3, 5, 6, 7, 50, 52, 53, 54):
                result = 1
            elif wpn_pic in (4, 8, 9, 10, 59):
                result = 2
            elif wpn_pic == 51:
                result = 3
            elif wpn_pic == 55:
                result = 9
            elif wpn_pic == 56:
                result = 10
            elif wpn_pic == 57:
                result = 11
            elif wpn_pic == 58:
                result = 12
            elif wpn_pic == 60:
                result = 13

            if result is not None:
                return result
            break

    return 0


# -----------------------------------------------------------------------------
# Savegame handling

class Savegame(object):
    '''
        handle savegame data
    '''
    def __init__(self):
        '''
            setup savegame
        '''
        pass

    def parse(self, str_save_game, fill_face_variables=True, no_spoil=False):
        '''
            parse raw response into Savegame object
        '''
        # parse into array of (mostly) numbers
        savegame = ("0/" + str_save_game).split("/")

        # TODO: Tower object
        # Extract tower level from mount id
        if not no_spoil:
            tower_level = int((savegame[SG['MOUNT']] / 65536))

        savegame[SG['MOUNT']] -= tower_level * 65536

        # TODO: Mirror object
        # Extract mirror pieces from gender entry
        bin_str = bin(int(savegame[SG['GENDER']]))

        bin_str.zfill(32)

        mirror_pieces = list()
        for i in range(13):
            mirror_pieces[i] = bin_str.substr(i + 1, 1) == "1"

        has_mirror = bin_str.substr(23, 1) == "1"
        can_rob = bin_str.substr(22, 1) == "1"

        # TODO: save in character object
        if bin_str.substr(31) == "1":
            savegame[SG['GENDER']] = 1
        else:
            savegame[SG['GENDER']] = 2

        if (savegame[SG['ALBUM']] - 10000) > content_max:
            savegame[SG['ALBUM']] = content_max + 10000

        for i in range(SG['BACKPACK']['SIZE']):
            expand_item_structure(
                savegame, SG['BACKPACK']['OFFS'] + i * SG['ITM']['SIZE']
            )

        for i in range(SG['INVENTORY']['SIZE']):
            expand_item_structure(
                savegame, (SG['INVENTORY']['OFFS'] + i * SG['ITM']['SIZE'])
            )

        for i in range(6):
            expand_item_structure(
                savegame, SG['SHAKES']['ITEM1'] + i * SG['ITM']['SIZE']
            )
            expand_item_structure(
                savegame, SG['FIDGET']['ITEM1'] + i * SG['ITM']['SIZE']
            )

        for i in range(3):
            expand_item_structure(
                savegame,
                (SG['QUEST']['OFFER']['REWARD_ITM1'] + (i * SG['ITM']['SIZE']))
            )

        debug_info = ""
        for i in range(len(savegame)):
            debug_info += str(i) + "=" + savegame[i] + ", "

        if (last_level != 0) and (int(savegame[SG['LEVEL']]) > last_level):
            level_up = True
            pulse_char = True

        last_level = int(savegame[SG['LEVEL']])

        friend_link = "http://" + server + "/index.php?rec="
        friend_link += savegame[SG['PLAYER']['ID']]

        if len(old_ach) != 0:
            for i in range(8):
                if ach_level(savegame, i) > old_ach[i]:
                    old_ach[i] = -1 * ach_level(savegame, i)
                else:
                    old_ach[i] = ach_level(savegame, i)
        else:
            for i in range(8):
                old_ach[i] = ach_level(savegame, i)

        if (old_album >= 0) and (savegame[SG['ALBUM']] > old_album):
            album_effect = True
        old_album = savegame[SG['ALBUM']]

        if fill_face_variables:
            char_volk = savegame[SG['RACE']]
            char_male = (savegame[SG['GENDER']] == 1)
            char_class = savegame[SG['CLASS']]
            char_mouth = savegame[SG['FACE']['1']]
            char_beard = savegame[SG['FACE']['5']]
            char_nose = savegame[SG['FACE']['6']]
            char_eyes = savegame[SG['FACE']['4']]
            char_brows = savegame[SG['FACE']['3']]
            char_ears = savegame[SG['FACE']['7']]
            char_hair = savegame[SG['FACE']['2']]
            char_special = savegame[SG['FACE']['8']]
            char_special2 = savegame[SG['FACE']['9']]

            i = char_hair

            char_color = 0
            while i > 100:
                i -= 100
                char_color += 1

        if not no_spoil:
            if text_dir == "right":
                actor[IMG['IF']['GOLD']].x = POS['IF']['LBL']['GOLDPILZE_X']

                with actor[LBL['IF']['GOLD']]:
                    text = str(int(savegame[SG['GOLD']] / 100))
                    x = POS['IF']['LBL']['GOLDPILZE_X'] - text_width - 10
                    actor[IMG['IF']['SILBER']].x = x - width - 10

                with (actor[LBL['IF']['SILBER']]):
                    if int(savegame[SG['GOLD']] % 100) < 10:
                        text = "0"
                    else:
                        text = ""
                    text += str(int(savegame[SG['GOLD']] % 100))
                    x = actor[IMG['IF']['SILBER']].x - text_width - 10

                with actor[LBL['IF']['PILZE']]:
                    text = savegame[SG['MUSH']]
                    x = POS['IF']['LBL']['GOLDPILZE']['X'] - text_width - 10

                if texts[TXT['MUSHROOMS']['BOUGHT']]:
                    enable_popup(
                        LBL['IF']['PILZE'],
                        texts[TXT['MUSHROOMS']['BOUGHT']].replace(
                            "%1", savegame[SG['MUSHROOMS']['MAY']['DONATE']]
                        )
                    )
            else:
                with (actor[LBL['IF']['SILBER']]):
                    if int(savegame[SG['GOLD']] % 100) < 10:
                        text = "0"
                    else:
                        text = ""
                    text += str(int(savegame[SG['GOLD']] % 100))
                    x = POS['IF']['LBL']['GOLDPILZE']['X'] - text_width - 10
                    actor[IMG['IF']['GOLD']].x = x - 24 - 10

                with actor[LBL['IF']['GOLD']]:
                    text = str(int(savegame[SG['GOLD']] / 100))
                    x = actor[IMG['IF']['GOLD']].x - text_width - 10

                with actor[LBL['IF']['PILZE']]:
                    text = savegame[SG['MUSH']]
                    x = POS['IF']['LBL']['GOLDPILZE']['X'] - text_width - 10

                if texts[TXT['MUSHROOMS']['BOUGHT']]:
                    enable_popup(
                        LBL['IF']['PILZE'],
                        texts[TXT['MUSHROOMS']['BOUGHT']].replace(
                            "%1", savegame[SG['MUSHROOMS']['MAY']['DONATE']]
                        )
                    )

        add(BNC['IF']['STATS'])
        if int(savegame[SG['SERVER']['TIME']]) > 0:
            server_time.setTime(
                1000 * int(savegame[SG['SERVER']['TIME']]) - 1000 * 60 * 60
            )
            local_time = datetime.now()
            time_calc.start()

        if session_id == "":
            LOG.error(''.join(
                "Fehler: Keine Session ID für PHP-Tunneling vergeben. ",
                "PHP-Tunneling wird deaktiviert."
            ))
            show_login_screen()
        else:
            LOG.debug("Session ID für PHP Tunneling:" + session_id)

        if int(savegame[SG['GUILD']['INDEX']]) != gilden_id:
            gilden_id = int(savegame[SG['GUILD']['INDEX']])
            if gilden_id != 0:
                send_action(
                    ACT['REQUEST']['GUILD'],
                    savegame[SG['GUILD']['INDEX']]
                )

        sg_idx = SG['UNREAD']['MESSAGES']
        if (int(savegame[sg_idx]) > 0) and (not on_stage(CNT['POST']['LIST'])):
            pulse_post = True

        if int(savegame[SG['LOCKDURATION']]) != 0:
            request_logout()

        if next_pxl < 0:
            next_pxl = abs(next_pxl)


# -----------------------------------------------------------------------------
# request functions

# TODO: How to do Event stuff?
def request_signup(evt):
    '''
        TODO: Documentation
    '''
    if evt is KeyboardEvent:
        if ((KeyboardEvent(evt).keyCode != 13)
                and (KeyboardEvent(evt).keyCode != 10)
                and (KeyboardEvent(evt).keyCode != 16777230)):
            inp_text = actor[INP['NAME']].getChildAt(1).text
            if inp_text.substr(0, 7) == "xxxtest":
                actor[INP['EMAIL']].getChildAt(1).text = (
                    inp_text + "@playagames.com"
                )
                actor[INP['PASSWORD']].getChildAt(1).text = "12345"
                add(CB['AGB']['CHECKED'])
            return

    if get_child_by_name(actor[CB['AGB_CHECKED']].name):
        if (param_bullshit_text != "") and (on_stage(CB['FUCK']['CHECKED'])):
            param_cid = param_bullshit_cid
            so.data.cid = param_cid
            so.flush()

        if buffed_req:
            bufftxt = "buf" + buffed_id
        else:
            bufftxt = param_adv

        if char_male:
            genderparam = 1
        else:
            genderparam = 2

        faceparam = '/'.join(
            char_mouth, char_hair, char_brows, char_eyes, char_beard,
            char_nose, char_ears, char_special, char_special2
        )

        # Create account
        send_action(
            ACT['ACCOUNT']['CREATE'],
            actor[INP['NAME']].getChildAt(1).text,
            actor[INP['PASSWORD']].getChildAt(1).text,
            actor[INP['EMAIL']].getChildAt(1).text,
            param_rec,
            bufftxt,
            char_volk,
            genderparam,
            char_class,
            faceparam,
            param_cid
        )
    else:
        error_message(texts[TXT['ERROR']['AGB']])


def request_player_screen(evt):
    '''
        request player screen
    '''
    sel_index = actor[CNT['HALL']['LIST']].getChildIndex(evt.target)
    if sel_index < 5:
        return

    sel_row = int((sel_index - 5) / 6) + 1
    sel_name = hall_list_name[sel_row]
    sel_guild = hall_list_guild[sel_row]
    if sel_name == "":
        return
    send_action(ACT['REQUEST']['CHAR'], sel_name)


def request_player_guild_screen(evt):
    '''
        setup request for guild screen
    '''
    sel_index = actor[CNT['HALL']['LIST']].getChildIndex(evt.target)
    if sel_index < 5:
        return

    sel_row = int((sel_index - 5) / 6 + 1)
    sel_name = hall_list_name[sel_row]
    sel_guild = hall_list_guild[sel_row]

    if sel_guild == texts[TXT['NOGUILD']]:
        return

    if sel_guild == "":
        return

    if sel_guild == gilde:
        send_action(ACT['SCREEN']['GILDEN'])
    else:
        send_action(ACT['SCREEN']['FREMDGILDE'], sel_guild)


def request_login(evt=None):
    '''
        setup login request
    '''
    if evt is KeyboardEvent:
        if ((KeyboardEvent(evt).keyCode != 13)
                and (KeyboardEvent(evt).keyCode != 10)
                and (KeyboardEvent(evt).keyCode != 16777230)):
            return

    tmp_pw = actor[INP['LOGIN_PASSWORD']].getChildAt(1).text
    if C['MD5']:
        if len(tmp_pw) < 32:
            tmp_pw = md5hash(tmp_pw)

    send_action(
        ACT['LOGIN'],
        actor[INP['NAME']].getChildAt(1).text,
        tmp_pw,
        "v1.70"
    )


def request_logout(keep_data=False):
    '''
        prepare logout action
    '''
    remove_all()
    next_pxl = 0
    actor[LBL['ERROR']].text = ""
    if not keep_data:
        so.data.userName = ""
        so.data.password = ""
        actor[INP['NAME']].getChildAt(1).text = ""
        actor[INP['LOGIN_PASSWORD']].getChildAt(1).text = ""
        so.flush()
        actor[INP['EMAIL']].getChildAt(1).text = ""
        actor[INP['PASSWORD']].getChildAt(1).text = ""

    send_action(ACT['LOGOUT'])
    savegame = list()
    char_volk = 0
    gilde = ""
    my_own_rank = -1
    my_own_attack_target = -1
    my_own_guild_money = -1
    guild_attack_time = 0
    guild_defense_time = 0
    guild_attacked = ""
    guild_attacking = ""
    pulse_taverne = False
    pulse_arbeiten = False
    pulse_gilde = False
    pulse_gilde_on_history = False
    pulse_post = False
    pulse_dealer = False
    guild_blink_ready = False
    session_id = ""
    fight_flush_mode = False
    if not keep_data:
        show_login_screen()


def request_cancel_arbeiten():
    '''
        cancel work
    '''
    send_action(ACT['ARBEIT']['CANCEL'])


def request_arbeiten():
    '''
        start working
    '''
    send_action(ACT['ARBEIT'], get_slider_value(SLDR['ARBEITEN']))


def request_create_character():
    '''
        TODO: obsolete?
    '''
    pass


def request_change_face():
    '''
        prepare to change profile picture
    '''
    if ((char_volk == revertchar_volk)
            and (char_male == revertchar_male)
            and (char_color == revertchar_color)
            and (char_mouth == revertchar_mouth)
            and (char_beard == revertchar_beard)
            and (char_nose == revertchar_nose)
            and (char_eyes == revertchar_eyes)
            and (char_brows == revertchar_brows)
            and (char_ears == revertchar_ears)
            and (char_hair == revertchar_hair)
            and (char_special == revertchar_special)
            and (char_special2 == revertchar_special2)):
        send_action(ACT['SCREEN']['OPTIONEN'])
    else:
        tmp_gender = 2
        if char_male:
            tmp_gender = 1

        send_action(
            ACT['CHANGE']['FACE'],
            actor[INP['NAME']].getChildAt(1).text,
            actor[INP['LOGIN_PASSWORD']].getChildAt(1).text,
            char_volk,
            tmp_gender,
            '/'.join(
                char_mouth,
                char_hair,
                char_brows,
                char_eyes,
                char_beard,
                char_nose,
                char_ears,
                char_special,
                char_special2
            ) + "/"
        )


def request_char_screen():
    '''
        setup and request character screen
    '''
    arrow_hall_mode = False
    send_action(ACT['SCREEN']['CHAR'])


def request_city_screen():
    '''
        TODO: obsolete?
    '''
    pass


def request_tv():
    '''
        request tv action
    '''
    if tv_function_name != "":
        LOG.debug(''.join('Calling TV function "',
                          tv_function_name,
                          '" with parameter "showtv"!'))

        ExternalInterface.call(tv_function_name,
                               "showtv",
                               '_'.join(
                                   savegame[SG['PLAYER_ID']],
                                   savegame[SG['PAYMENT_ID']],
                                   server_id,
                                   "1"),
                               savegame[SG['GENDER']],
                               tv_return_value)
        tv_poll_timer.delay = tv_poll_long
    else:
        LOG.error("Error: No TV function set!")

    tv_status_dest = 0


# -----------------------------------------------------------------------------
# Tower stuff

'''

def TowerBtnHandler(evt:Event){
    var i;
    Switch (get_actor_id(evt.target)){
        if case(PREV_COPYCAT:
            copyCatSel--;
            if (copyCatSel < 0){
                copyCatSel = 2;
            };
            display_inventory(towerSG, True, True, copyCatSel);
            break;
        if case(NEXT_COPYCAT:
            copyCatSel++;
            if (copyCatSel > 2){
                copyCatSel = 0;
            };
            display_inventory(towerSG, True, True, copyCatSel);
            break;
        if case(TOWER_TRY:
            ShowMainQuestScreen(100, (399 + tower_level));
            break;
    };
}

def TowerScrollGrab(evt:MouseEvent){
    towerScrollGrabPos = evt.localY;
    towerScrollSpeed = 0;
}

def TowerScrollmove(evt:MouseEvent){
    if (towerScrollGrabPos != -1){
        towerScrollSpeed = (evt.localY - towerScrollGrabPos);
        towerScroll = (towerScroll + (towerScrollSpeed / 375));
        towerScrollDest = towerScroll;
        towerScrollTimer.start();
        towerScrollGrabPos = evt.localY;
    };
}

def TowerScrollRelease(evt:MouseEvent){
    if (towerScrollGrabPos != -1){
        towerScrollDest = (towerScrollDest + (towerScrollSpeed / 40));
        towerScrollTimer.start();
        towerScrollGrabPos = -1;
    };
}

def TowerScrollOut(evt:MouseEvent){
    if (towerScrollGrabPos != -1){
    };
}

def TowerScrollCurrent(evt:MouseEvent){
    towerScrollDest = (towerSG[TSG_TOWER_LEVEL] + 1);
    towerScrollTimer.start();
    towerScrollGrabPos = -1;
}

def TowerScrollWheel(evt:MouseEvent){
    towerScrollSpeed = (evt.delta * 10);
    towerScroll = (towerScroll + (towerScrollSpeed / 375));
    towerScrollDest = towerScroll;
    towerScrollTimer.start();
}

def TowerKeyEvent(evt:KeyboardEvent){
    var evt:* = evt;
    if (on_stage(TOWER_SCROLLAREA)){
        if (evt.keyCode == Keyboard.ENTER){
            towerScrollDest = towerSG[TSG_TOWER_LEVEL];
            towerScrollTimer.start();
        } else {
            if (evt.keyCode == Keyboard.UP){
                towerScrollDest = (math.round(towerScrollDest) + 1);
                towerScrollTimer.start();
            } else {
                if (evt.keyCode == Keyboard.DOWN){
                    towerScrollDest = (math.round(towerScrollDest) - 1);
                    towerScrollTimer.start();
                };
            };
        };
    } else {
        var _local3 = actor[TOWER_SCROLLAREA];
        with (_local3) {
            remove_event_listener(KeyboardEvent.KEY_DOWN, TowerKeyEvent);
            remove_event_listener(FocusEvent.FOCUS_OUT, TowerScrollSetFocus);
        };
    };
}

def TowerScrollSetFocus(evt:Event){
    var evt:* = evt;
    if (on_stage(TOWER_SCROLLAREA)){
        stage.focus = actor[TOWER_SCROLLAREA];
    } else {
        var _local3 = actor[TOWER_SCROLLAREA];
        with (_local3) {
            remove_event_listener(KeyboardEvent.KEY_DOWN, TowerKeyEvent);
            remove_event_listener(FocusEvent.FOCUS_OUT, TowerScrollSetFocus);
        };
    };
}

def TowerTimerFn(evt:Event=None){
    var i;
    var towerScrollMax = "";
    var towerScrollLvl:Array;
    var thisFloor:*;
    towerScrollMax = 100;
    if (!on_stage(TOWER_SCROLLAREA)){
        towerScrollTimer.stop();
    };
    if (towerScrollDest > towerScrollMax){
        towerScrollDest = towerScrollMax;
    };
    if (towerScrollDest < 0){
        towerScrollDest = 0;
    };
    if (math.abs((towerScroll - towerScrollDest)) > 0.01){
        towerScroll = (((towerScroll * 9) + towerScrollDest) / 10);
    } else {
        towerScroll = towerScrollDest;
        towerScrollTimer.stop();
    };
    if (towerScroll > towerScrollMax){
        towerScroll = towerScrollMax;
    };
    if (towerScroll < 0){
        towerScroll = 0;
    };
    actor[TOWER_BG].y = (-700 + ((towerScroll / towerScrollMax) * 700));
    actor[TOWER_BASE].y = (towerScroll * 375);
    towerScrollLvl = list();
    i = 0;
    while (i < 3) {
        towerScrollLvl[i] = (towerScroll - 0.7);
        while (towerScrollLvl[i] > (3 - i)) {
            towerScrollLvl[i] = (towerScrollLvl[i] - 3);
        };
        i++;
    };
    towerScrollLvl[2] = (((575 - 350) + 35) + (towerScrollLvl[2] * 375));
    towerScrollLvl[1] = (((575 - 700) + 10) + (towerScrollLvl[1] * 375));
    towerScrollLvl[0] = ((575 - 1065) + (towerScrollLvl[0] * 375));
    towerScrollLvl.sort(Array.NUMERIC);
    thisFloor = 0;
    i = 0;
    while (i < 3) {
        thisFloor = math.floor((towerScroll - 0.7));
        if (thisFloor < 0){
            thisFloor = 0;
        };
        thisFloor = (thisFloor + i);
        SetCnt(
            (TOWER_WINDOW + i),
            (((thisFloor < (int(towerSG[TSG_TOWER_LEVEL]) + 1)))
                ? TOWER_WINDOW_BURNT
                : (((thisFloor == (int(towerSG[TSG_TOWER_LEVEL]) + 1)))
                    ? TOWER_WINDOW_OPEN
                    : TOWER_WINDOW_CLOSED))
        );
        SetCnt(
            (TOWER_FACE + i),
            ((OPPMONSTER + int(towerSG[TSG_TOWER_LEVEL])) + 399)
        );
        actor[(TOWER_LEVEL + i)].y = towerScrollLvl[(2 - i)];
        actor[(TOWER_WINDOW + i)].y = towerScrollLvl[(2 - i)];
        actor[(TOWER_FACE + i)].y = (towerScrollLvl[(2 - i)] + 277);
        i++;
    };
}

'''

# -----------------------------------------------------------------------------
# show functions

'''
DoShowScreenAlbum = function (){
    var i;
    i = 0;
    while (i < 4) {
        SetCnt((ALBUM_MONSTER_FRAME + i), FIGHT_CHAR_BORDER);
        i++;
    };
    Showalbum_content();
    remove_all();
    add(SCREEN_ALBUM);
};

def show_screen_album(){
    var i:* = 0;
    var DoShowScreenAlbum:* = None;
    load(FIGHT_CHAR_BORDER);
    load(UNKNOWN_ENEMY);
    i = 0;
    while (i < 5) {
        load((ALBUM_CAT_OUT + i));
        i = (i + 1);
    };
    whendo_loaded(DoShowScreenAlbum);
}

def show_tower_screen(towerData:Array){
    var thisCpc:* = 0;
    var DoShowTowerScreen:* = None;
    var thisSlot:* = 0;
    var towerData:* = towerData;
    DoShowTowerScreen = function (){
        var i:* = 0;
        var _local2 = actor[TOWER_SCROLLAREA];
        with (_local2) {
            addChild(actor[TOWER_BG]);
            addChild(actor[(TOWER_LEVEL + 2)]);
            addChild(actor[(TOWER_LEVEL + 1)]);
            addChild(actor[TOWER_LEVEL]);
            addChild(actor[TOWER_FACE]);
            addChild(actor[(TOWER_FACE + 1)]);
            addChild(actor[(TOWER_FACE + 2)]);
            addChild(actor[TOWER_WINDOW]);
            addChild(actor[(TOWER_WINDOW + 1)]);
            addChild(actor[(TOWER_WINDOW + 2)]);
            addChild(actor[TOWER_BASE]);
            add_event_listener(KeyboardEvent.KEY_DOWN, TowerKeyEvent);
        };
        stage.focus = actor[TOWER_SCROLLAREA];
        if (!on_stage(TOWER_SCROLLAREA)){
            towerScrollDest = (int(towerSG[TSG_TOWER_LEVEL]) + 1);
            if (light_mode){
                towerScroll = towerScrollDest;
            } else {
                towerScroll = 0;
            };
            towerScrollTimer.start();
            set_alpha(CHAR_SECONDPROP, 1);
            set_alpha(CHAR_PREISE, 0);
        };
        remove_all();
        add(SCREEN_TOWER);
        if (tower_level >= 100){
            remove(TOWER_TRY);
        };
        i = 0;
        while (i < 3) {
            actor[
                (LBL_TOWER_BOOSTPRICELABEL + i)
            ].text = str(int(
                (towerSG[((TSG_COPYCATS + (i * COPYCAT))
                    + CPC_PRICE_NEXT_LEVEL)] / 100)));
            i = (i + 1);
        };
        display_inventory(towerSG, True, True, copyCatSel);
    };
    towerSG = towerData[1].split("/");
    thisCpc = 0;
    while (thisCpc < 3) {
        thisSlot = 0;
        while (thisSlot < 10) {
            expand_item_structure(
                towerSG,
                (((TSG_COPYCATS + (thisCpc * COPYCAT)) + CPC_ITEMS)
                    + (thisSlot * SG['ITM']['SIZE'])));
            thisSlot = (thisSlot + 1);
        };
        thisCpc = (thisCpc + 1);
    };
    load(SCREEN_TOWER);
    load(TOWER_PIECES);
    if (towerSG[TSG_TOWER_LEVEL] < 100){
        load(((OPPMONSTER + int(towerSG[TSG_TOWER_LEVEL])) + 399));
    };
    whendo_loaded(DoShowTowerScreen);
}

def show_demo_screen(){
    var DoShowDemoScreen:* = None;
    DoShowDemoScreen = function (){
        remove_all();
        DemoMode = True;
        add(SCREEN_DEMO);
        var _local2 = actor[BG_DEMO];
        with (_local2) {
            x = (SCREEN_TITLE_X - int((width / 2)));
        };
        remove(IF_STATS, IF_LOGOUT);
    };
    load(SCREEN_DEMO);
    whendo_loaded(DoShowDemoScreen);
}

def show_option_screen(evt:Event=None){
    var DoShowOptionScreen:* = None;
    var evt:* = evt;
    DoShowOptionScreen = function (){
        var i:* = 0;
        remove_all();
        SetCnt(CHANGE_PASSWORD_SMILEY_SAD, PASSWORD_SMILEY_SAD);
        SetCnt(CHANGE_PASSWORD_SMILEY_NEUTRAL, PASSWORD_SMILEY_NEUTRAL);
        SetCnt(CHANGE_PASSWORD_SMILEY_HAPPY, PASSWORD_SMILEY_HAPPY);
        hide(CHANGE_PASSWORD_SMILEY_SAD);
        hide(CHANGE_PASSWORD_SMILEY_NEUTRAL);
        hide(CHANGE_PASSWORD_SMILEY_HAPPY);
        add(SCREEN_OPTION);
        if (((texts[TXT_LUXURY_BUTTON]) and ((savegame[SG_MUSH] >= 1000)))){
            actor[OPTION_RESEND].y = ((OPTION_Y + OPTION_Y4) - 34);
            actor[OPTION_CHANGE_PASSWORD].y = ((OPTION_Y + OPTION_Y3) - 17);
            actor[OPTION_DELETE].y = ((OPTION_Y + OPTION_Y5) - 51);
            add(OPTION_LUXURY);
        };
        if (text_dir == "right"){
            actor[LBL_OPTION_CHANGE].x = (
                (actor[OPTION_CHANGE_NAME].x
                    + actor[OPTION_CHANGE_NAME].width)
                    - actor[LBL_OPTION_CHANGE].text_width);
            actor[LBL_OPTION_IMAGE].x = (
                (actor[OPTION_IMAGEBORDER].x
                    + actor[OPTION_IMAGEBORDER].width)
                    - actor[LBL_OPTION_IMAGE].text_width);
        };
        enable_popup(
            LBL_OPTION_VER,
            POPUP_BEGIN_LINE,
            "Player ID",
            140,
            savegame[SG['PLAYER_ID']],
            POPUP_END_LINE,
            POPUP_BEGIN_LINE,
            "Server Ver.Cfg.",
            140,
            param_server_version_cfg,
            POPUP_END_LINE,
            POPUP_BEGIN_LINE,
            "Server Ver.Act.",
            140,
            param_server_version_act,
            POPUP_END_LINE
        );
        i = 0;
        while (i < 10) {
            var _local2 = actor[(CHARBACKGROUND + i)];
            with (_local2) {
                x = ((OPTION_X + OPTION_IMAGE_X) + 4);
                y = ((OPTION_Y + OPTION_Y2) + 4);
                scaleX = 0.56;
                scaleY = 0.56;
            };
            i = (i + 1);
        };
        _local2 = actor[LBL_OPTION_TITLE];
        with (_local2) {
            x = ((OPTION_X + int((OPTION_X / 2))) - int((text_width / 2)));
        };
        LoadCharacterImage();
        SetSliderValue(SLDR_OPTION_VOLUME, (so.data.volume + 1));
        if (light_mode){
            add(CB_LM_CHECKED);
        };
        if (chat_sound){
            add(CB_CS_CHECKED);
        };
        if (compare_items){
            add(CB_COMPARE_CHECKED);
        };
        if (tv_function_name != ""){
            if (disable_tv){
                add(CB_TV_CHECKED);
            };
        } else {
            remove(CB_TV_CHECKED);
            remove(CB_TV_UNCHECKED);
            remove(LBL_TV_CHECKBOX);
        };
    };
    load(SCREEN_OPTION);
    load(PASSWORD_SMILEY_SAD);
    load(PASSWORD_SMILEY_NEUTRAL);
    load(PASSWORD_SMILEY_HAPPY);
    whendo_loaded(DoShowOptionScreen);
}

DoSkipFight = function (evt:MouseEvent=None, fightDone=False){
    var quest_id:* = 0;
    var PilzBekommen:* = False;
    var i:* = 0;
    var charWin:* = False;
    var lastHero:* = None;
    var lastHeroWins:* = 0;
    var heroCount:* = 0;
    var thisWinner:* = None;
    var evt:* = evt;
    var fightDone:Boolean = fightDone;
    quest_id = (savegame[SG_ACTION_INDEX] - 1);
    var rewardX:* = FIGHT_REWARDGOLD_X;
    PilzBekommen = getPilz;
    var pilzX:* = FIGHT_REWARDGOLD_X;
    var rewardGoldText:* = "";
    var fightStyle:* = 5;
    fight_lock = False;
    DoStrikeTimer.stop();
    DoStrikeTimer.remove_event_listener(TimerEvent.TIMER, DoStrikeEvent);
    actor[FIGHT_SKIP].remove_event_listener(
        MouseEvent.CLICK, DoSkipFight);
    actor[BATTLE_SKIP].remove_event_listener(
        MouseEvent.CLICK, DoSkipFight);
    actor[BATTLE_SKIPONE].remove_event_listener(
        MouseEvent.CLICK, DoSkipFight);
    fightRound = (int((fightData.length / 6)) - 1);
    charLife = fightData[(fightRound * 6)];
    charDamage = fightData[((fightRound * 6) + 1)];
    charFlag = fightData[((fightRound * 6) + 2)];
    oppLife = fightData[((fightRound * 6) + 3)];
    oppDamage = fightData[((fightRound * 6) + 4)];
    oppFlag = fightData[((fightRound * 6) + 5)];
    charWin = (charLife > 0);
    SetLifeBars();
    if (((!(is_guildBattle)) or (lastFight))){
        remove(FIGHT_SKIP);
        remove(BATTLE_SKIP);
        remove(BATTLE_SKIPONE);
        add(LBL_FIGHT_SUMMARY);
    };
    if (is_guildBattle){
        if (((charWin) and (lastFight))){
            play(SND_JINGLE);
        };
    } else {
        show(IF_STATS);
        add(FIGHT_OK);
        if (charWin){
            play(SND_JINGLE);
        };
    };
    if (is_guildBattle){
        last_round_fighter_name = thisCharName;
        if (charWin){
            if (winners[("name_" + thisCharName)]){
                var _local4 = winners;
                var _local5 = ("name_" + thisCharName);
                var _local6 = (_local4[_local5] + 1);
                _local4[_local5] = _local6;
            } else {
                winners[("name_" + thisCharName)] = 1;
            };
        };
        if (((tower_fight_mode) and ((guildFightHonor >= 0)))){
            SetCnt(
                FIGHT_SLOT,
                GetItemID(
                    SG_INVENTORY_OFFS,
                    (guildFightHonor + 10),
                     savegame
                 )
            );
            ItemPopup(
                FIGHT_SLOT,
                (SG_INVENTORY_OFFS
                    + ((guildFightHonor + 10)
                        * SG['ITM']['SIZE'])
                ),
                None,
                False,
                True,
                False
            );
            guildFightHonor = 0;
        } else {
            SetCnt(FIGHT_SLOT, C_EMPTY);
            enable_popup(FIGHT_SLOT);
        };
        if (lastFight){
            lastHero = "";
            lastHeroWins = 0;
            heroCount = 0;
            if (texts[TXT_HERO_OF_THE_DAY]){
                for (thisWinner in winners) {
                    if (winners[thisWinner] > lastHeroWins){
                        lastHeroWins = winners[thisWinner];
                        lastHero = texts[TXT_HERO_OF_THE_DAY].split(
                            "%1").join(thisWinner[5:]).split(
                            "%2").join(str(lastHeroWins));
                        heroCount = 1;
                    } else {
                        if (winners[thisWinner] == lastHeroWins){
                            lastHeroWins = winners[thisWinner];
                            lastHero = (
                                lastHero + (chr(13)
                                + texts[TXT_HERO_OF_THE_DAY].split(
                                    "%1").join(thisWinner[5:]).split(
                                    "%2").join(str(lastHeroWins))));
                            heroCount = (heroCount + 1);
                        };
                    };
                };
                if (
                    (((((lastHeroWins >= 5))
                        and (charWin)))
                        and (!(isRaid)))){
                    add(HERO_OF_THE_DAY);
                    if (heroCount == 1){
                        actor[LBL_HERO_OF_THE_DAY_TITLE].text = (
                            (texts[TXT_HERO_OF_THE_DAY_TITLE])
                            ? texts[TXT_HERO_OF_THE_DAY_TITLE]
                            : "");
                    } else {
                        actor[LBL_HERO_OF_THE_DAY_TITLE].text = (
                            (texts[TXT_HEROES_OF_THE_DAY_TITLE])
                                ? texts[TXT_HEROES_OF_THE_DAY_TITLE]
                                : "");
                    };
                    actor[LBL_HERO_OF_THE_DAY_TITLE].x = (
                        SCREEN_TITLE_X - (
                            actor[LBL_HERO_OF_THE_DAY_TITLE].width / 2
                            ));
                    actor[LBL_HERO_OF_THE_DAY].text = lastHero;
                    actor[LBL_HERO_OF_THE_DAY].x = (S
                        CREEN_TITLE_X -
                        (actor[LBL_HERO_OF_THE_DAY].width / 2)
                        );
                };
            };
            add(FIGHT_OK);
            add(FIGHT_REWARDS);
            hide(
                FIGHT_REWARDGOLD,
                LBL_FIGHT_REWARDGOLD,
                FIGHT_REWARDSILVER,
                LBL_FIGHT_REWARDSILVER,
                FIGHT_REWARDMUSH,
                LBL_FIGHT_REWARDMUSH,
                LBL_FIGHT_REWARDEXP
            );
            if ((((guildFightExp > 0)) and (charWin))){
                if (tower_fight_mode){
                    _local4 = actor[LBL_FIGHT_REWARDGOLD];
                    with (_local4) {
                        visible = True;
                        text = str(guildFightExp);
                        x = (rewardX - text_width);
                    };
                    _local4 = actor[FIGHT_REWARDGOLD];
                    with (_local4) {
                        visible = True;
                        x = (
                            (actor[LBL_FIGHT_REWARDGOLD].x - width)
                            - 8);
                    };
                } else {
                    _local4 = actor[LBL_FIGHT_REWARDEXP];
                    with (_local4) {
                        visible = True;
                        if (text_dir == "right"){
                            text = (
                                (str(math.abs(guildFightExp)) + " :")
                                + texts[TXT_EXP]);
                        } else {
                            text = (
                                (texts[TXT_EXP] + ": ")
                                + str(math.abs(guildFightExp)));
                        };
                    };
                };
            };
            if (!isRaid){
                _local4 = actor[LBL_FIGHT_REWARDGOLD];
                with (_local4) {
                    visible = True;
                    if (text_dir == "right"){
                        text = (
                            (str(math.abs(guildFightHonor)) + " ")
                            + texts[(((guildFightHonor > 0))
                                ? TXT_GUILD_HONOR_GAINED
                                : TXT_GUILD_HONOR_LOST)]);
                    } else {
                        text = (
                            (texts[(((guildFightHonor > 0))
                                ? TXT_GUILD_HONOR_GAINED
                                : TXT_GUILD_HONOR_LOST)] + " ")
                            + str(math.abs(guildFightHonor)));
                    };
                    x = (rewardX - text_width);
                };
            };
        } else {
            if ((evt is MouseEvent)){
                if (get_actor_id(evt.target) == BATTLE_SKIP){
                    skip_guild_fights = (
                        math.abs(skip_guild_fights) + 1);
                };
            };
        };
    } else {
        if (isPvP){
            add(FIGHT_REWARDS);
            hide(
                FIGHT_REWARDGOLD,
                LBL_FIGHT_REWARDGOLD,
                FIGHT_REWARDSILVER,
                LBL_FIGHT_REWARDSILVER,
                FIGHT_REWARDMUSH,
                LBL_FIGHT_REWARDMUSH,
                LBL_FIGHT_REWARDEXP
            );
            if (HonorGain != 0){
                _local4 = actor[LBL_FIGHT_REWARDEXP];
                with (_local4) {
                    visible = True;
                    if (text_dir == "right"){
                        text = (
                            (str(math.abs(HonorGain)) + " ")
                            + texts[(((HonorGain > 0))
                                ? TXT_HONOR_GAINED
                                : TXT_HONOR_LOST)]);
                    } else {
                        text = (
                            (texts[(((HonorGain > 0))
                                ? TXT_HONOR_GAINED
                                : TXT_HONOR_LOST)] + " ")
                                + str(math.abs(HonorGain)));
                    };
                };
            };
            if (GoldGain > 0){
                if (text_dir == "right"){
                    rewardGoldText = (
                        " " + texts[TXT_GOLD_GAINED]);
                } else {
                    rewardGoldText = (texts[TXT_GOLD_GAINED] + " ");
                };
            } else {
                if (GoldGain < 0){
                    if (text_dir == "right"){
                        rewardGoldText = (" " + texts[TXT_GOLD_LOST]);
                    } else {
                        rewardGoldText = (texts[TXT_GOLD_LOST] + " ");
                    };
                };
            };
            if (silber_anteil(math.abs(GoldGain)) > 0){
                if (text_dir != "right"){
                    _local4 = actor[FIGHT_REWARDSILVER];
                    with (_local4) {
                        visible = True;
                        x = (rewardX - width);
                        rewardX = (x - 8);
                    };
                };
                _local4 = actor[LBL_FIGHT_REWARDSILVER];
                with (_local4) {
                    visible = True;
                    if (text_dir == "right"){
                        text = (
                            silber_anteil(math.abs(GoldGain))
                            + rewardGoldText);
                    } else {
                        text = (
                            (((gold_anteil(math.abs(GoldGain)) > 0))
                                ? ""
                                : rewardGoldText)
                            + silber_anteil(math.abs(GoldGain)));
                    };
                    x = (rewardX - text_width);
                    rewardX = (x - (((text_dir == "right")) ? 8 : 14));
                };
                if (text_dir == "right"){
                    _local4 = actor[FIGHT_REWARDSILVER];
                    with (_local4) {
                        visible = True;
                        x = (rewardX - width);
                        rewardX = (x - 14);
                    };
                };
            };
            if (gold_anteil(math.abs(GoldGain)) > 0){
                if (text_dir != "right"){
                    _local4 = actor[FIGHT_REWARDGOLD];
                    with (_local4) {
                        visible = True;
                        x = (rewardX - width);
                        rewardX = (x - 8);
                    };
                };
                _local4 = actor[LBL_FIGHT_REWARDGOLD];
                with (_local4) {
                    visible = True;
                    if (text_dir == "right"){
                        text = (
                            gold_anteil(math.abs(GoldGain))
                            + (((silber_anteil(math.abs(GoldGain))
                                > 0)) ? "" : rewardGoldText));
                    } else {
                        text = (
                            rewardGoldText
                            + gold_anteil(math.abs(GoldGain)));
                    };
                    x = (rewardX - text_width);
                    rewardX = (x - (((text_dir == "right")) ? 8 : 14));
                };
                if (text_dir == "right"){
                    _local4 = actor[FIGHT_REWARDGOLD];
                    with (_local4) {
                        visible = True;
                        x = (rewardX - width);
                        rewardX = (x - 14);
                    };
                };
            };
            SetCnt(FIGHT_SLOT, C_EMPTY);
            enable_popup(FIGHT_SLOT);
        } else {
            if (((isMQ) and (charWin))){
                add(FIGHT_REWARDS);
                hide(
                    FIGHT_REWARDGOLD,
                    LBL_FIGHT_REWARDGOLD,
                    FIGHT_REWARDSILVER,
                    LBL_FIGHT_REWARDSILVER,
                    FIGHT_REWARDMUSH,
                    LBL_FIGHT_REWARDMUSH,
                    LBL_FIGHT_REWARDEXP
                );
                if (HonorGain > 0){
                    _local4 = actor[LBL_FIGHT_REWARDEXP];
                    with (_local4) {
                        visible = True;
                        if (text_dir == "right"){
                            text = (
                                (str(HonorGain) + " :")
                                + texts[TXT_EXP]);
                        } else {
                            text = (
                                (texts[TXT_EXP] + ": ")
                                + str(HonorGain));
                        };
                    };
                };
                if (PilzBekommen){
                    _local4 = actor[FIGHT_REWARDMUSH];
                    with (_local4) {
                        visible = True;
                        x = (pilzX - width);
                        pilzX = (x - 8);
                    };
                    _local4 = actor[LBL_FIGHT_REWARDMUSH];
                    with (_local4) {
                        visible = True;
                        text = "1";
                        x = (pilzX - text_width);
                        pilzX = (x - 14);
                    };
                    AnimateAch(
                        FIGHT_REWARDMUSH,
                        actor[FIGHT_REWARDMUSH].y);
                };
                if (silber_anteil(GoldGain) > 0){
                    _local4 = actor[FIGHT_REWARDSILVER];
                    with (_local4) {
                        visible = True;
                        x = (rewardX - width);
                        rewardX = (x - 8);
                    };
                    _local4 = actor[LBL_FIGHT_REWARDSILVER];
                    with (_local4) {
                        visible = True;
                        text = silber_anteil(GoldGain);
                        x = (rewardX - text_width);
                        rewardX = (x - 14);
                    };
                };
                if (gold_anteil(GoldGain) > 0){
                    _local4 = actor[FIGHT_REWARDGOLD];
                    with (_local4) {
                        visible = True;
                        x = (rewardX - width);
                        rewardX = (x - 8);
                    };
                    _local4 = actor[LBL_FIGHT_REWARDGOLD];
                    with (_local4) {
                        visible = True;
                        text = gold_anteil(GoldGain);
                        x = (rewardX - text_width);
                        rewardX = (x - 14);
                    };
                };
                if (BackPackSlot >= 0){
                    SetCnt(
                        FIGHT_SLOT,
                        GetItemID(SG_INVENTORY_OFFS,
                            (BackPackSlot + 10),
                            savegame));
                    ItemPopup(
                        FIGHT_SLOT,
                        (SG_INVENTORY_OFFS
                            + ((BackPackSlot + 10)
                                * SG['ITM']['SIZE'])),
                        None,
                        False,
                        True,
                        False
                    );
                } else {
                    SetCnt(FIGHT_SLOT, C_EMPTY);
                    enable_popup(FIGHT_SLOT);
                };
            } else {
                if (isMQ){
                    hasLostMQ = True;
                } else {
                    if (
                        ((charWin)
                        and ((savegame[SG_ACTION_STATUS] == 2)))
                    ){
                        add(FIGHT_REWARDS);
                        hide(
                            FIGHT_REWARDGOLD,
                            LBL_FIGHT_REWARDGOLD,
                            FIGHT_REWARDSILVER,
                            LBL_FIGHT_REWARDSILVER,
                            FIGHT_REWARDMUSH,
                            LBL_FIGHT_REWARDMUSH,
                            LBL_FIGHT_REWARDEXP
                        );
                        if (
                            int(savegame[
                                (SG_QUEST_OFFER_EXP1 + quest_id)
                                ]) > 0){
                            _local4 = actor[LBL_FIGHT_REWARDEXP];
                            with (_local4) {
                                visible = True;
                                if (text_dir == "right"){
                                    text = (
                                        (savegame[
                                            (SG_QUEST_OFFER_EXP1
                                                + quest_id)
                                        ] + " :")
                                        + texts[TXT_EXP]);
                                } else {
                                    text = (
                                        (texts[TXT_EXP] + ": ")
                                        + savegame[
                                        (SG_QUEST_OFFER_EXP1
                                            + quest_id)]);
                                };
                            };
                        };
                        if (PilzBekommen){
                            _local4 = actor[FIGHT_REWARDMUSH];
                            with (_local4) {
                                visible = True;
                                x = (pilzX - width);
                                pilzX = (x - 8);
                            };
                            _local4 = actor[LBL_FIGHT_REWARDMUSH];
                            with (_local4) {
                                visible = True;
                                text = "1";
                                x = (pilzX - text_width);
                                pilzX = (x - 14);
                            };
                            AnimateAch(
                                FIGHT_REWARDMUSH,
                                actor[FIGHT_REWARDMUSH].y);
                        };
                        if (silber_anteil(
                            savegame[(SG_QUEST_OFFER_GOLD1
                                + quest_id)]) > 0){
                            _local4 = actor[FIGHT_REWARDSILVER];
                            with (_local4) {
                                visible = True;
                                x = (rewardX - width);
                                rewardX = (x - 8);
                            };
                            _local4 = actor[LBL_FIGHT_REWARDSILVER];
                            with (_local4) {
                                visible = True;
                                text = silber_anteil(
                                    savegame[(SG_QUEST_OFFER_GOLD1
                                        + quest_id)]);
                                x = (rewardX - text_width);
                                rewardX = (x - 14);
                            };
                        };
                        if (gold_anteil(
                            savegame[(SG_QUEST_OFFER_GOLD1
                                + quest_id)]) > 0){
                            _local4 = actor[FIGHT_REWARDGOLD];
                            with (_local4) {
                                visible = True;
                                x = (rewardX - width);
                                rewardX = (x - 8);
                            };
                            _local4 = actor[LBL_FIGHT_REWARDGOLD];
                            with (_local4) {
                                visible = True;
                                text = gold_anteil(savegame[
                                    (SG_QUEST_OFFER_GOLD1 + quest_id)]);
                                x = (rewardX - text_width);
                                rewardX = (x - 14);
                            };
                        };
                        if (int(savegame[
                            ((SG['QUEST']['OFFER']['REWARD_ITM1']
                                + (quest_id * SG['ITM']['SIZE']))
                                + SG_ITM_TYP)]) > 0){
                            SetCnt(
                                FIGHT_SLOT,
                                GetItemID(
                                    SG['QUEST']['OFFER']['REWARD_ITM1'],
                                    quest_id));
                            ItemPopup(
                                FIGHT_SLOT,
                                (SG['QUEST']['OFFER']['REWARD_ITM1']
                                    + (quest_id * SG['ITM']['SIZE'])),
                                None, False, True, False);
                        } else {
                            SetCnt(FIGHT_SLOT, C_EMPTY);
                            enable_popup(FIGHT_SLOT);
    if (charWin){
        if ((charLife / charFullLife) > 0.8){
            fightStyle = 0;
        } else {
            if ((charLife / charFullLife) > 0.4){
                fightStyle = 5;
            } else {
                if ((charLife / charFullLife) > 0.2){
                    fightStyle = 10;
                } else {
                    fightStyle = 15;
    } else {
        if ((oppLife / oppFullLife) > 0.8){
            fightStyle = 0;
        } else {
            if ((oppLife / oppFullLife) > 0.4){
                fightStyle = 5;
            } else {
                if ((oppLife / oppFullLife) > 0.2){
                    fightStyle = 10;
                } else {
                    fightStyle = 15;
    _local4 = actor[LBL_FIGHT_SUMMARY];
    with (_local4) {
        width = FIGHT_RESULT_TEXT_X;
        wordWrap = True;
        if (is_guildBattle){
            if (lastFight){
                if (tower_fight_mode){
                    if (charWin){
                        text = texts[
                            (TXT_TOWER_WON + int((random.random() * 5)))
                        ];
                    } else {
                        text = texts[
                            (TXT_TOWER_LOST + int((random.random() * 5)))
                        ];
                    };
                } else {
                    if (isRaid){
                        if (charWin){
                            text = texts[
                                TXT_RAID_WON + int(random.random() * 5)
                            ];
                        } else {
                            text = texts[
                                (TXT_RAID_LOST +
                                    int((random.random() * 5)))];
                        };
                    } else {
                        if (charWin){
                            text = texts[(TXT_GUILD_BATTLE_WON
                                + int((random.random() * 5)))];
                        } else {
                            text = texts[(TXT_GUILD_BATTLE_LOST
                                + int((random.random() * 5)))];
            } else {
                if (!inStrikeAni){
                    next_fight_timer.start();
                } else {
                    strikeBreak = True;
                };
                return;
            };
        } else {
            if (isPvP){
                text = texts[
                    ((int((random.random() * 5)) + fightStyle)
                        + ((charWin)
                            ? TXT_PVP_WIN
                            : TXT_PVP_LOSE))];
            } else {
                text = texts[
                    ((int((random.random() * 5)) + fightStyle)
                        + ((charWin)
                            ? TXT_FIGHT_WIN
                            : TXT_FIGHT_LOSE))];
        x = (SCREEN_TITLE_X - int((width / 2)));
    };
    arabize(LBL_FIGHT_SUMMARY);
};

var SetLifeBars:* = function (whichOne=0){
    var barWidth:* = 0;
    var whichOne = whichOne;
    if ((((whichOne == 0)) or ((whichOne == 1)))){
        var _local3 = actor[LBL_LIFEBAR_CHAR];
        with (_local3) {
            if (text_dir == "right"){
                text = ((str(charFullLife) + " / ") + str(charLife));
            } else {
                text = ((str(charLife) + " / ") + str(charFullLife));
            };
            x = ((FIGHT_CHARX + 150) - int((text_width / 2)));
        };
        _local3 = actor[LIFEBAR_FILL_CHAR];
        with (_local3) {
            barWidth = (
                (Number(charLife) / Number(charFullLife)) * 279);
            if (barWidth < 0){
                barWidth = 0;
            };
            width = barWidth;
            scaleY = 1;
        };
    };
    if ((((whichOne == 0)) or ((whichOne == 2)))){
        _local3 = actor[LBL_LIFEBAR_OPP];
        with (_local3) {
            if (text_dir == "right"){
                text = ((str(oppFullLife) + " / ") + str(oppLife));
            } else {
                text = ((str(oppLife) + " / ") + str(oppFullLife));
            };
            x = ((OPPX + 150) - int((text_width / 2)));
        };
        _local3 = actor[LIFEBAR_FILL_OPP];
        with (_local3) {
            barWidth = (
                (Number(oppLife) / Number(oppFullLife)) * 279);
            if (barWidth < 0){
                barWidth = 0;
            };
            width = barWidth;
            scaleY = 1;
        };
    };
};

DoStrikeEvent = function (evt:TimerEvent){
    if (((!(on_stage(FIGHT_BOX1))) or (strikeBreak))){
        DoStrikeTimer.stop();
        DoStrikeTimer.remove_event_listener(
            TimerEvent.TIMER, DoStrikeEvent);
        return;
    };
    if ((((skip_guild_fights > 0)) and (is_guildBattle))){
        DoSkipFight();
        DoStrikeTimer.stop();
        DoStrikeTimer.remove_event_listener(
            TimerEvent.TIMER, DoStrikeEvent);
        return;
    };
    if (fightRound > (int((fightData.length / 6)) - 1)){
        DoSkipFight(None, True);
        return;
    };
    charLife = fightData[(fightRound * 6)];
    charDamage = fightData[((fightRound * 6) + 1)];
    charFlag = fightData[((fightRound * 6) + 2)];
    oppLife = fightData[((fightRound * 6) + 3)];
    oppDamage = fightData[((fightRound * 6) + 4)];
    oppFlag = fightData[((fightRound * 6) + 5)];
    if (
        (((((((fightRound == 0))
            and (!(oppStrike))))
            and ((charDamage == 0))))
            and ((charFlag == 0)))){
        oppStrike = True;
    };
    DoStrikeTimer.stop();
    WeaponStrike(oppStrike);
    if (
        ((((oppStrike)
            and ((charLife <= 0))))
            or (((!(oppStrike))
            and ((oppLife <= 0)))))){
        return;
    };
    oppStrike = !(oppStrike);
    if (!oppStrike){
        fightRound++;
    };
};

var WeaponStrike:* = function (opponent=False){
    var StrikeAniTimer:* = None;
    var StrikeAlpha:* = NaN;
    var BulletAlpha:* = NaN;
    var ShieldAlpha:* = NaN;
    var DamageAlpha:* = NaN;
    var OnoAlpha:* = NaN;
    var strikeVal:* = NaN;
    var strikePhase:* = 0;
    var damageIndicatorActive:* = False;
    var weaponType:* = 0;
    var onoID:* = 0;
    var DoSkip:* = False;
    var catapultStrike:* = False;
    var StrikeAniTimerEvent:* = None;
    var opponent:Boolean = opponent;
    StrikeAniTimerEvent = function (evt:TimerEvent){
        var evt:* = evt;
        if (!on_stage(FIGHT_BOX1)){
            inStrikeAni = False;
            if (strikeBreak){
                next_fight_timer.start();
            };
            StrikeAniTimer.stop();
            StrikeAniTimer.remove_event_listener(
                TimerEvent.TIMER,
                StrikeAniTimerEvent);
            return;
        };
        Switch (((catapultStrike) ? 4 : weaponType)){
            if case(1:
                if (
                    (((((((opponent) ? oppWeapon : charWeapon) < 0))
                    and ((opponent) ? oppWeapon : charWeapon) > -4))
                    or ((opponent) ? oppWeapon : charWeapon) < -6)
                ){
                    Switch (strikePhase){
                        if case(0:
                            if ((strikeVal == 0)){
                                play(
                                    get_weapon_sound(((opponent)
                                        ? oppWeaponType
                                        : charWeaponType),
                                        ((opponent)
                                            ? oppWeapon
                                            : charWeapon), 0));
                            };
                            strikeVal = (strikeVal + 0.2);
                            if (
                                (((((opponent)
                                    ? oppFlag
                                    : charFlag) == 1))
                                and ((strikeVal >= 0.4)))){
                                ShieldAlpha = 1;
                            };
                            if (strikeVal >= 0.4){
                                strikePhase++;
                            };
                            break;
                        if case(1:
                            strikeVal = (strikeVal + 0.2);
                            if (strikeVal >= 1){
                                strikeVal = 1;
                                strikePhase++;
                                damageIndicatorActive = True;
                                DamageAlpha = 1;
                                SetLifeBars(((opponent) ? 1 : 2));
                                var _local3 = actor[
                                    LBL_DAMAGE_INDICATOR];
                                with (_local3) {
                                    text = ("-" + str(((opponent)
                                        ? oppDamage : charDamage)));
                                    if (text == "-0"){
                                        if (((opponent)
                                            ? oppFlag
                                            : charFlag) == 1){
                                            text = texts[TXT_GEBLOCKT];
                                            play(get_weapon_sound(
                                                ((opponent)
                                                    ? oppWeaponType
                                                    : charWeaponType),
                                                ((opponent)
                                                    ? oppWeapon
                                                    : charWeapon), 2));
                                        } else {
                                            text = texts[
                                                TXT_AUSGEWICHEN];
                                        };
                                    } else {
                                        play(
                                            get_weapon_sound(
                                                ((opponent)
                                                    ? oppWeaponType
                                                    : charWeaponType),
                                                ((opponent)
                                                    ? oppWeapon
                                                    : charWeapon),
                                                ((((opponent)
                                                    ? oppFlag
                                                    : charFlag))==3)
                                                        ? 3 : 1));
                                    };
                                    x = ((SCREEN_TITLE_X
                                        + (((opponent) ? -1 : 1)
                                            * 200)) -
                                            int((text_width / 2)));
                                    y = (FIGHT_WEAPONS_Y - 100);
                                };
                                if (
                                    ((((opponent)
                                    and ((charLife <= 0))))
                                    or (((!(opponent))
                                    and ((oppLife <= 0)))))){
                                    DoSkip = True;
                                };
                            };
                            break;
                        if case(2:
                            DamageAlpha = (DamageAlpha - 0.075);
                            StrikeAlpha = (StrikeAlpha - 0.2);
                            ShieldAlpha = (ShieldAlpha - 0.2);
                            actor[LBL_DAMAGE_INDICATOR].y = (
                                actor[LBL_DAMAGE_INDICATOR].y - 2);
                            if (ShieldAlpha <= 0){
                                ShieldAlpha = 0;
                            };
                            if (StrikeAlpha <= 0){
                                StrikeAlpha = 0;
                            };
                            if (DamageAlpha <= 0){
                                DamageAlpha = 0;
                                inStrikeAni = False;
                                if (strikeBreak){
                                    next_fight_timer.start();
                                };
                                StrikeAniTimer.stop();
                                StrikeAniTimer.remove_event_listener(
                                    TimerEvent.TIMER,
                                    StrikeAniTimerEvent);
                                DoStrikeTimer.start();
                            };
                            break;
                    };
                } else {
                    Switch (strikePhase){
                        if case(0:
                            if ((strikeVal == 0)){
                                play(get_weapon_sound(
                                    ((opponent)
                                        ? oppWeaponType
                                        : charWeaponType),
                                    ((opponent)
                                        ? oppWeapon
                                        : charWeapon), 0));
                            };
                            strikeVal = (strikeVal + 0.1);
                            if (
                                (((((opponent)
                                    ? oppFlag
                                    : charFlag) == 1))
                                and ((strikeVal >= 0.5)))){
                                ShieldAlpha = 1;
                            };
                            if (strikeVal >= 0.8){
                                strikePhase++;
                            };
                            break;
                        if case(1:
                            strikeVal = (strikeVal + 0.15);
                            if (strikeVal >= 1){
                                SetCnt(
                                    FIGHT_ONO, onoID, 0, 0, True);
                                OnoAlpha = 1;
                                strikeVal = 1;
                                strikePhase++;
                                damageIndicatorActive = True;
                                DamageAlpha = 1;
                                SetLifeBars(((opponent) ? 1 : 2));
                                _local3 = actor[LBL_DAMAGE_INDICATOR];
                                with (_local3) {
                                    text = (
                                        "-" + str((
                                            (opponent)
                                                ? oppDamage
                                                : charDamage)));
                                    if (text == "-0"){
                                        if (
                                            ((opponent)
                                                ? oppFlag
                                                : charFlag) == 1){
                                            text = texts[
                                            TXT_GEBLOCKT];
                                            play(get_weapon_sound(
                                                ((opponent)
                                                    ? oppWeaponType
                                                    : charWeaponType),
                                                ((opponent)
                                                    ? oppWeapon
                                                    : charWeapon),
                                                2));
                                        } else {
                                            text = texts[
                                                TXT_AUSGEWICHEN];
                                        };
                                    } else {
                                        play(get_weapon_sound(
                                            ((opponent)
                                                ? oppWeaponType
                                                : charWeaponType),
                                            ((opponent)
                                                ? oppWeapon
                                                : charWeapon),
                                            ((((opponent)
                                                ? oppFlag
                                                : charFlag))==3)
                                                    ? 3 : 1));
                                    };
                                    x = ((SCREEN_TITLE_X
                                        + (((opponent) ? -1 : 1)
                                            * 200))
                                            - int((text_width / 2)));
                                    y = (FIGHT_WEAPONS_Y - 100);
                                };
                                if (
                                    ((((opponent)
                                    and ((charLife <= 0))))
                                    or (((!(opponent))
                                    and ((oppLife <= 0)))))){
                                    DoSkip = True;
                                };
                            };
                            break;
                        if case(2:
                            DamageAlpha = (DamageAlpha - 0.075);
                            StrikeAlpha = (StrikeAlpha - 0.2);
                            ShieldAlpha = (ShieldAlpha - 0.2);
                            OnoAlpha = (OnoAlpha - 0.2);
                            actor[LBL_DAMAGE_INDICATOR].y = (
                                actor[LBL_DAMAGE_INDICATOR].y - 2);
                            if (OnoAlpha <= 0){
                                OnoAlpha = 0;
                            };
                            if (ShieldAlpha <= 0){
                                ShieldAlpha = 0;
                            };
                            if (StrikeAlpha <= 0){
                                StrikeAlpha = 0;
                            };
                            if (DamageAlpha <= 0){
                                DamageAlpha = 0;
                                inStrikeAni = False;
                                if (strikeBreak){
                                    next_fight_timer.start();
                                };
                                StrikeAniTimer.stop();
                                StrikeAniTimer.remove_event_listener(
                                    TimerEvent.TIMER,
                                    StrikeAniTimerEvent);
                                DoStrikeTimer.start();
                            };
                            break;
                    };
                };
                break;
            if case(2:
                Switch (strikePhase){
                    if case(0:
                        strikeVal = (strikeVal + 0.15);
                        if (strikeVal >= 0.4){
                            strikePhase++;
                            BulletAlpha = 1;
                            play(get_weapon_sound(
                                ((opponent)
                                    ? oppWeaponType
                                    : charWeaponType),
                                ((opponent)
                                    ? oppWeapon
                                    : charWeapon), 0));
                        };
                        break;
                    if case(1:
                        strikeVal = (strikeVal + 0.15);
                        if (
                            (((((opponent)
                                ? oppFlag
                                : charFlag) == 1))
                            and ((strikeVal >= 0.5)))){
                            ShieldAlpha = 1;
                        };
                        if (strikeVal >= 1){
                            SetCnt(FIGHT_ONO, onoID, 0, 0, True);
                            OnoAlpha = 1;
                            strikeVal = 1;
                            strikePhase++;
                            DamageAlpha = 1;
                            damageIndicatorActive = True;
                            SetLifeBars(((opponent) ? 1 : 2));
                            _local3 = actor[LBL_DAMAGE_INDICATOR];
                            with (_local3) {
                                text = ("-" + str((
                                    (opponent)
                                    ? oppDamage
                                    : charDamage)));
                                if (text == "-0"){
                                    if (
                                        ((opponent)
                                            ? oppFlag
                                            : charFlag) == 1){
                                        text = texts[TXT_GEBLOCKT];
                                        play(get_weapon_sound(
                                            ((opponent)
                                                ? oppWeaponType
                                                : charWeaponType),
                                            ((opponent)
                                                ? oppWeapon
                                                : charWeapon), 2));
                                    } else {
                                        text = texts[TXT_AUSGEWICHEN];
                                    };
                                } else {
                                    play(get_weapon_sound(
                                        ((opponent)
                                            ? oppWeaponType
                                            : charWeaponType),
                                        ((opponent)
                                            ? oppWeapon
                                            : charWeapon),
                                        ((((opponent)
                                            ? oppFlag
                                            : charFlag))==3)
                                                ? 3 : 1));
                                };
                                x = ((SCREEN_TITLE_X + (
                                    ((opponent) ? -1 : 1) * 200))
                                    - int((text_width / 2)));
                                y = (FIGHT_WEAPONS_Y - 100);
                            };
                            if (
                                ((((opponent)
                                and ((charLife <= 0))))
                                or (((!(opponent))
                                and ((oppLife <= 0)))))){
                                DoSkip = True;
                            };
                        };
                        break;
                    if case(2:
                        DamageAlpha = (DamageAlpha - 0.075);
                        StrikeAlpha = (StrikeAlpha - 0.2);
                        ShieldAlpha = (ShieldAlpha - 0.2);
                        BulletAlpha = (BulletAlpha - 0.2);
                        OnoAlpha = (OnoAlpha - 0.2);
                        actor[LBL_DAMAGE_INDICATOR].y = (
                            actor[LBL_DAMAGE_INDICATOR].y - 2);
                        if (OnoAlpha <= 0){
                            OnoAlpha = 0;
                        };
                        if (ShieldAlpha <= 0){
                            ShieldAlpha = 0;
                        };
                        if (StrikeAlpha <= 0){
                            StrikeAlpha = 0;
                        };
                        if (DamageAlpha <= 0){
                            DamageAlpha = 0;
                            inStrikeAni = False;
                            if (strikeBreak){
                                next_fight_timer.start();
                            };
                            StrikeAniTimer.stop();
                            StrikeAniTimer.remove_event_listener(
                                TimerEvent.TIMER,
                                StrikeAniTimerEvent);
                            DoStrikeTimer.start();
                        };
                        break;
                };
                break;
            if case(3:
                Switch (strikePhase){
                    if case(0:
                        strikeVal = (strikeVal + 0.05);
                        BulletAlpha = 1;
                        if (strikeVal >= 0.3){
                            strikePhase++;
                            play(get_weapon_sound(
                                ((opponent)
                                    ? oppWeaponType
                                    : charWeaponType),
                                ((opponent)
                                    ? oppWeapon
                                    : charWeapon), 0));
                        };
                        break;
                    if case(1:
                        strikeVal = (strikeVal + 0.1);
                        if (
                            (((((opponent)
                                ? oppFlag
                                : charFlag) == 1))
                            and ((strikeVal >= 0.5)))){
                            ShieldAlpha = 1;
                        };
                        if (strikeVal >= 1){
                            SetCnt(FIGHT_ONO, onoID, 0, 0, True);
                            OnoAlpha = 1;
                            strikeVal = 1;
                            strikePhase++;
                            DamageAlpha = 1;
                            damageIndicatorActive = True;
                            SetLifeBars(((opponent) ? 1 : 2));
                            _local3 = actor[LBL_DAMAGE_INDICATOR];
                            with (_local3) {
                                text = ("-" + str((
                                    (opponent)
                                        ? oppDamage
                                        : charDamage)));
                                if (text == "-0"){
                                    if (
                                        ((opponent)
                                            ? oppFlag
                                            : charFlag) == 1){
                                        text = texts[TXT_GEBLOCKT];
                                        play(get_weapon_sound(
                                            ((opponent)
                                                ? oppWeaponType
                                                : charWeaponType),
                                            ((opponent)
                                                ? oppWeapon
                                                : charWeapon), 2));
                                    } else {
                                        text = texts[TXT_AUSGEWICHEN];
                                    };
                                } else {
                                    play(get_weapon_sound(
                                        ((opponent)
                                            ? oppWeaponType
                                            : charWeaponType),
                                        ((opponent)
                                            ? oppWeapon
                                            : charWeapon),
                                        ((((opponent)
                                            ? oppFlag
                                            : charFlag))==3)
                                                ? 3 : 1));
                                };
                                x = ((SCREEN_TITLE_X +
                                    (((opponent) ? -1 : 1) * 200))
                                    - int((text_width / 2)));
                                y = (FIGHT_WEAPONS_Y - 100);
                            };
                            if (
                                ((((opponent)
                                and ((charLife <= 0))))
                                or (((!(opponent))
                                    and ((oppLife <= 0)))))){
                                DoSkip = True;
                            };
                        };
                        break;
                    if case(2:
                        DamageAlpha = (DamageAlpha - 0.075);
                        StrikeAlpha = (StrikeAlpha - 0.2);
                        ShieldAlpha = (ShieldAlpha - 0.2);
                        BulletAlpha = (BulletAlpha - 0.2);
                        OnoAlpha = (OnoAlpha - 0.2);
                        actor[LBL_DAMAGE_INDICATOR].y = (
                            actor[LBL_DAMAGE_INDICATOR].y - 2);
                        if (OnoAlpha <= 0){
                            OnoAlpha = 0;
                        };
                        if (ShieldAlpha <= 0){
                            ShieldAlpha = 0;
                        };
                        if (StrikeAlpha <= 0){
                            StrikeAlpha = 0;
                        };
                        if (DamageAlpha <= 0){
                            DamageAlpha = 0;
                            inStrikeAni = False;
                            if (strikeBreak){
                                next_fight_timer.start();
                            };
                            StrikeAniTimer.stop();
                            StrikeAniTimer.remove_event_listener(
                                TimerEvent.TIMER,
                                StrikeAniTimerEvent);
                            DoStrikeTimer.start();
                        };
                        break;
                };
                break;
            if case(4:
                Switch (strikePhase){
                    if case(0:
                        if (strikeVal == 0){
                            play(SND_CATAPULT_LAUNCH);
                            load(FIGHT_MUSH);
                        };
                        strikeVal = (strikeVal + 0.01);
                        if (strikeVal >= 0.3){
                            strikePhase++;
                            add(FIGHT_MUSH);
                        };
                        break;
                    if case(1:
                        strikeVal = (strikeVal + 0.1);
                        if (strikeVal >= 1){
                            strikeVal = 1;
                            strikePhase++;
                            DamageAlpha = 1;
                            damageIndicatorActive = True;
                            SetLifeBars(((opponent) ? 1 : 2));
                            play(SND_CATAPULT_HIT);
                            _local3 = actor[LBL_DAMAGE_INDICATOR];
                            with (_local3) {
                                text = ("-" + str((
                                    (opponent)
                                        ? oppDamage
                                        : charDamage)));
                                x = ((SCREEN_TITLE_X + (
                                    ((opponent) ? -1 : 1) * 200))
                                    - int((text_width / 2)));
                                y = (FIGHT_WEAPONS_Y - 100);
                            };
                            if (
                                ((((opponent)
                                    and ((charLife <= 0))))
                                or (((!(opponent))
                                    and ((oppLife <= 0)))))){
                                DoSkip = True;
                            };
                        };
                        break;
                    if case(2:
                        strikeVal = (strikeVal - 0.1);
                        DamageAlpha = (DamageAlpha - 0.05);
                        actor[LBL_DAMAGE_INDICATOR].y = (
                            actor[LBL_DAMAGE_INDICATOR].y - 2);
                        if (DamageAlpha <= 0){
                            DamageAlpha = 0;
                            inStrikeAni = False;
                            if (strikeBreak){
                                next_fight_timer.start();
                            };
                            remove(FIGHT_MUSH);
                            StrikeAniTimer.stop();
                            StrikeAniTimer.remove_event_listener(
                                TimerEvent.TIMER,
                                StrikeAniTimerEvent);
                            DoStrikeTimer.start();
                        };
                        break;
                };
                break;
        };
        if (catapultStrike){
            _local3 = actor[FIGHT_MUSH];
            with (_local3) {
                x = ((SCREEN_TITLE_X - 128)
                    + ((230 + (100 * ((
                        (strikePhase > 1))
                            ? (2 - strikeVal)
                            : strikeVal)))
                    * ((opponent) ? -1 : 1)));
                y = ((0 - 265) + (strikeVal * 500));
                scaleY = (((strikeVal >= 0.7))
                    ? (1.7 - strikeVal) : 1);
            };
        } else {
            _local3 = actor[
                ((opponent) ? WEAPON_OPP : WEAPON_CHAR)];
            with (_local3) {
                if (weaponType == 1){
                    if (
                        (((((((opponent)
                            ? oppWeapon
                            : charWeapon) < 0))
                        and ((((opponent)
                            ? oppWeapon
                            : charWeapon) > -4))))
                        or ((((opponent)
                            ? oppWeapon
                            : charWeapon) < -6)))){
                        if (
                            ((opponent)
                                ? oppWeapon
                                : charWeapon) == -1){
                            SetCnt(
                                ((opponent)
                                    ? WEAPON_OPP
                                    : WEAPON_CHAR),
                                (WEAPON_CLAW + int((strikeVal * 3.9);
                        } else {
                            if (
                                ((opponent)
                                    ? oppWeapon
                                    : charWeapon) == -3){
                                SetCnt(
                                    ((opponent)
                                        ? WEAPON_OPP
                                        : WEAPON_CHAR),
                                    (WEAPON_SPLAT
                                        + int((strikeVal * 2.9))));
                            } else {
                                if (
                                    ((opponent)
                                        ? oppWeapon
                                        : charWeapon) == -7){
                                    SetCnt(
                                        ((opponent)
                                            ? WEAPON_OPP
                                            : WEAPON_CHAR),
                                        (WEAPON_FIRE
                                            + int((strikeVal * 2.9))));
                                } else {
                                    SetCnt(
                                        ((opponent)
                                            ? WEAPON_OPP
                                            : WEAPON_CHAR),
                                        (WEAPON_SWOOSH
                                            + int((strikeVal * 2.9))));
                        scaleX = (((opponent) ? 1 : -1) * 1);
                        scaleY = 1;
                        y = (FIGHT_WEAPONS_Y - 240);
                        x = (((SCREEN_TITLE_X
                            + ((opponent) ? 231 : 0)) - 115)
                            + ((((opponent) ? -1 : 1) * 560)
                            * ((((opponent)
                                ? oppFlag
                                : charFlag))==1) ? 0.7 : 1));
                        rotation = (0 * ((opponent) ? -1 : 1));
                        alpha = StrikeAlpha;
                        visible = True;
                    } else {
                        scaleX = (((opponent) ? 1 : -1)
                            * SPRITE_SCALE);
                        scaleY = SPRITE_SCALE;
                        y = (FIGHT_WEAPONS_Y
                            - (math.cos((strikeVal * (TWOPI / 4)))
                                * (75 + ((((opponent) ? oppFlag
                                    : charFlag))==3) ? 75 : 0)));
                        x = (((SCREEN_TITLE_X
                            + ((opponent) ? 231 : 0)) - 115)
                            + (((((opponent) ? -1 : 1) * 230)
                            * strikeVal) * ((((opponent)
                                ? oppFlag : charFlag))==1)
                                    ? 0.7 : 1));
                        rotation = ((280 + (100 * strikeVal))
                            * ((opponent) ? -1 : 1));
                        alpha = StrikeAlpha;
                        visible = True;
                    };
                } else {
                    if (weaponType == 2){
                        scaleX = (((opponent) ? -1 : 1)
                            * SPRITE_SCALE);
                        scaleY = SPRITE_SCALE;
                        y = FIGHT_WEAPONS_Y;
                        x = (SCREEN_TITLE_X
                            + (((opponent) ? 1 : -1) * 170));
                        rotation = (((opponent) ? -1 : 1)
                            * (-30 + (70 * strikeVal)));
                        alpha = StrikeAlpha;
                        visible = True;
                    } else {
                        if (weaponType == 3){
                            scaleX = (((opponent) ? -1 : 1)
                                * SPRITE_SCALE);
                            scaleY = SPRITE_SCALE;
                            y = (FIGHT_WEAPONS_Y - 140);
                            if (strikeVal <= 0.3){
                                x = ((SCREEN_TITLE_X
                                    + (((opponent) ? 1 : -1) * 200))
                                    + (((opponent) ? -1 : 1)
                                        * ((0.3 / strikeVal) * 10)));
                            } else {
                                x = ((SCREEN_TITLE_X
                                    + (((opponent) ? 1 : -1) * 200))
                                    + (((1 - strikeVal)
                                        * math.sin(((strikeVal * 4)
                                            * TWOPI))) * -10));
                            };
                            rotation = ((opponent) ? -42 : 42);
                            alpha = StrikeAlpha;
                            visible = True;

            if (weaponType == 2){
                SetCnt(((opponent) ? BULLET_OPP : BULLET_CHAR),
                    get_arrow_id(0, ((opponent) ? 1 : 0),
                    weaponData, True, int((random.random() * 3))));
            };
            _local3 = actor[
                ((opponent) ? BULLET_OPP : BULLET_CHAR)];
            with (_local3) {
                if (weaponType == 2){
                    scaleX = ((((opponent) ? -1 : 1)
                        * strikeVal) * 2);
                    scaleY = (strikeVal * 2);
                    y = ((FIGHT_WEAPONS_Y - 70) - (height / 2));
                    x = ((SCREEN_TITLE_X
                        + (((opponent) ? 1 : -1) * 200))
                        + ((((opponent) ? -1 : 1) * 300)
                            * strikeVal));
                    rotation = 0;
                } else {
                    if (weaponType == 3){
                        scaleX = ((opponent) ? -1 : 1);
                        scaleY = 1;
                        y = (FIGHT_WEAPONS_Y - 110);
                        if (strikeVal <= 0.3){
                            x = ((SCREEN_TITLE_X
                                + (((opponent) ? 1 : -1) * 200))
                                + (((opponent) ? -1 : 1)
                                    * ((0.3 / strikeVal) * 10)));
                        } else {
                            x = ((SCREEN_TITLE_X
                                + (((opponent) ? 1 : -1) * 200))
                                + (((((opponent) ? -1 : 1) * 400)
                                    * strikeVal)
                                * ((((opponent)
                                    ? oppFlag : charFlag))==1)
                                        ? 0.7 : 1));
                        };
                        rotation = (
                            ((opponent) ? -1 : 1)
                            * (42 + ((strikeVal - 0.3) * 6)));
                    };
                };
                alpha = BulletAlpha;
                visible = (weaponType >= 2);
            };
            _local3 = actor[
                ((opponent) ? SHIELD_CHAR : SHIELD_OPP)];
            with (_local3) {
                scaleX = (((opponent) ? 1 : -1) * SPRITE_SCALE);
                scaleY = SPRITE_SCALE;
                y = ((FIGHT_WEAPONS_Y
                    - (math.cos((strikeVal * TWOPI)) * 20)) - 20);
                x = (((SCREEN_TITLE_X
                    + ((opponent) ? 0 : 231)) - 115)
                    + ((((opponent) ? -1 : 1) * 50)
                        * (((((strikeVal > 0.9))
                            and ((weaponType == 1))))
                                ? (strikeVal + 0.2) : 1)));
                alpha = ShieldAlpha;
                visible = (
                    ((opponent) ? oppFlag : charFlag) == 1);
            };
        };
        if (damageIndicatorActive){
            _local3 = actor[LBL_DAMAGE_INDICATOR];
            with (_local3) {
                visible = True;
                alpha = DamageAlpha;
                if (((opponent) ? oppFlag : charFlag) == 4){
                    default_text_format = FontFormat_CatapultDamage;
                } else {
                    if (((opponent) ? oppFlag : charFlag) == 3){
                        default_text_format =
                             FontFormat_CriticalDamage;
                    } else {
                        default_text_format = FontFormat_Damage;
                    };
                };
                text = text;
            };
            _local3 = actor[FIGHT_ONO];
            with (_local3) {
                visible = (
                    ((((opponent) ? oppFlag : charFlag) == 0))
                    or ((((opponent) ? oppFlag : charFlag) == 3)));
                Switch (weaponType){
                    if case(1:
                        x = (SCREEN_TITLE_X
                            + (((opponent) ? -1 : 1) * 200));
                        y = (FIGHT_WEAPONS_Y - 20);
                        if (OnoAlpha == 1){
                            scaleX = 0.6;
                            scaleY = 0.6;
                        } else {
                            if (OnoAlpha > 0){
                                scaleX = (scaleX + 0.2);
                                scaleY = (scaleY + 0.2);
                            };
                        };
                        break;
                    if case(2:
                        x = (SCREEN_TITLE_X
                            + (((opponent) ? -1 : 1) * 230));
                        y = (FIGHT_WEAPONS_Y - 40);
                        if (OnoAlpha == 1){
                            scaleX = 0.3;
                            scaleY = 0.3;
                        } else {
                            if (OnoAlpha > 0){
                                scaleX = (scaleX + 0.1);
                                scaleY = (scaleY + 0.1);
                            };
                        };
                        break;
                    if case(3:
                        x = (SCREEN_TITLE_X
                            + (((opponent) ? -1 : 1) * 235));
                        y = (FIGHT_WEAPONS_Y - 42);
                        if (OnoAlpha == 1){
                            scaleX = (0.4 * ((opponent) ? -1 : 1));
                            scaleY = 0.4;
                        } else {
                            if (OnoAlpha > 0){
                                scaleX = (scaleX
                                    + (0.05 * (
                                        (opponent) ? -1 : 1)));
                                scaleY = (scaleY + 0.05);
                            };
                        };
                        break;
                };
                alpha = OnoAlpha;
            };
            if (DoSkip){
                DoSkipFight();
                DoSkip = False;
            };
        };
    };
    StrikeAniTimer = new Timer(40);
    StrikeAlpha = 1;
    BulletAlpha = 0;
    ShieldAlpha = 0;
    DamageAlpha = 0;
    OnoAlpha = 0;
    const SPRITE_SCALE:Number = 1.5;
    const TWOPI:Number = (math.pi * 2);
    strikeVal = 0;
    strikePhase = 0;
    damageIndicatorActive = False;
    weaponType = ((opponent) ? oppWeaponType : charWeaponType);
    onoID = (int((random.random() * 6)) + FIGHT_ONO);
    DoSkip = False;
    catapultStrike = False;
    if (((opponent) ? oppFlag : charFlag) == 4){
        catapultStrike = True;
    } else {
        if (weaponType == 2){
            onoID = get_arrow_id(
                0, ((opponent) ? 1 : 0),
                weaponData, True, 3);
        } else {
            if (weaponType == 3){
                onoID = FIGHT_ARROW_SMASH;
            };
        };
    };
    StrikeAniTimer.add_event_listener(
        TimerEvent.TIMER, StrikeAniTimerEvent);
    StrikeAniTimer.start();
    inStrikeAni = True;
};

DoShowFightScreen = function (evt:Event=None){
    var i:* = 0;
    var DoStrikeTimer:* = None;
    var DoSkipFight:* = None;
    var strikeBreak:* = False;
    var DoStrikeEvent:* = None;
    var evt:* = evt;
    DoStrikeTimer = new Timer(200);
    if (((((isPvP) and (!(isReplay)))) and (!(is_guildBattle)))){
        if (!WaitingFor(savegame[SG_PVP_REROLL_TIME])){
            savegame[SG_PVP_REROLL_TIME] = (
                int((game_time.getTime() / 1000)) + (70 * 60));
        };
    };
    if (is_guildBattle){
        remove_all();
        if (tower_fight_mode){
            add(SCR_TOWER_BG);
        } else {
            if (isRaid){
                add(GUILD_RAID_BG);
            } else {
                add(GUILD_BATTLE_BG);
            };
        };
        if (tower_fight_mode){
            add(LBL_HERO_OF_THE_DAY_TITLE);
            actor[LBL_HERO_OF_THE_DAY_TITLE].text = texts[
                TXT_TOWER_LEVEL].split(
                    "%1").join(str((tower_level + 1)));
            actor[LBL_HERO_OF_THE_DAY_TITLE].x = (
                SCREEN_TITLE_X -
                (actor[LBL_HERO_OF_THE_DAY_TITLE].width / 2));
        } else {
            if (((isRaid) and (texts[TXT_DUNGEON_NAMES]))){
                add(LBL_HERO_OF_THE_DAY_TITLE);
                actor[LBL_HERO_OF_THE_DAY_TITLE].text = texts[
                    ((TXT_DUNGEON_NAMES + raidLevel) - 1)];
                actor[LBL_HERO_OF_THE_DAY_TITLE].x = (
                    SCREEN_TITLE_X
                    - (actor[LBL_HERO_OF_THE_DAY_TITLE].width / 2));
            } else {
                if (((!(isRaid)) and (texts[TXT_FIGHTS_COUNTER]))){
                    add(LBL_HERO_OF_THE_DAY_TITLE);
                    actor[LBL_HERO_OF_THE_DAY_TITLE].text = texts[
                        TXT_FIGHTS_COUNTER].split(
                            "%1").join(str(fightNumber)).split(
                            "%2").join(str(guild_fight_count));
                    actor[LBL_HERO_OF_THE_DAY_TITLE].x = (
                        SCREEN_TITLE_X - (
                            actor[LBL_HERO_OF_THE_DAY_TITLE].width / 2));
                };
            };
        };
    } else {
        if (on_stage(QUESTBAR_BG)){
            remove(
                QUESTBAR_BG,
                QUESTBAR_FILL,
                QUESTBAR_LIGHT,
                LBL_QUESTBAR_TEXT,
                QUEST_CANCEL,
                QUEST_SKIP,
                LBL_SCREEN_TITLE
            );
        } else {
            if (isPvP){
                remove_all();
                Switch (tz){
                    if case(0:
                        add(SCREEN_ARENA_NIGHT);
                        break;
                    if case(1:
                        add(SCREEN_ARENA_DAWN);
                        break;
                    if case(2:
                        add(SCREEN_ARENA_DAY);
                        break;
                };
            } else {
                remove_all();
                if (isMQ){
                    if (SelectedDungeon == 100){
                        add(SCR_TOWER_BG);
                    } else {
                        add(((SCR_QUEST_BG_1 + 50) + SelectedDungeon));
                    };
                } else {
                    if (int(savegame[SG_ACTION_STATUS]) == 2){
                        add(get_quest_bg());

    SetCnt(LIFEBAR_OPP, LIFEBAR_CHAR);
    SetCnt(LIFEBAR_FILL_OPP, LIFEBAR_FILL_CHAR);
    SetCnt(FIGHT_OPP_BORDER, FIGHT_CHAR_BORDER);
    SetCnt(FIGHT_BOX3, FIGHT_BOX1);
    SetCnt(FIGHT_REWARDGOLD, IF_GOLD);
    SetCnt(FIGHT_REWARDSILVER, IF_SILBER);
    SetCnt(FIGHT_REWARDMUSH, IF_PILZE);
    var _local3 = actor[LBL_NAMERANK_CHAR];
    with (_local3) {
        if (text_dir == "right"){
            text = ((((("(" + str(charLevel)) + " ")
                + texts[TXT_HALL_LIST_COLUMN_4]) + ") ")
                + thisCharName);
        } else {
            text = (((((thisCharName + " (")
                + texts[TXT_HALL_LIST_COLUMN_4]) + " ")
                + str(charLevel)) + ")");
        };
        x = ((FIGHT_CHARX + 150) - int((text_width / 2)));
        y = ((OPPY + 290) - textHeight);
    };
    _local3 = actor[LBL_NAMERANK_OPP];
    with (_local3) {
        if (text_dir == "right"){
            text = ((((("(" + str(oppLevel)) + " ")
                + texts[TXT_HALL_LIST_COLUMN_4]) + ") ") + oppName);
        } else {
            text = (((((oppName + " (")
                + texts[TXT_HALL_LIST_COLUMN_4]) + " ")
                + str(oppLevel)) + ")");
        };
        x = ((OPPX + 150) - int((text_width / 2)));
        y = ((OPPY + 290) - textHeight);
    };
    i = 0;
    while (i < 10) {
        _local3 = actor[(CHARBACKGROUND + i)];
        with (_local3) {
            x = (FIGHT_CHARX + 300);
            y = OPPY;
            scaleX = -1;
            scaleY = 1;
        };
        _local3 = actor[(CHARBACKGROUND2 + i)];
        with (_local3) {
            x = (FIGHT_CHARX + 300);
            y = OPPY;
            scaleX = -1;
            scaleY = 1;
        };
        i = (i + 1);
    };
    add(SCREEN_FIGHT);
    if (oppMonster > 0){
        add(((OPPMONSTER + oppMonster) - 1));
    } else {
        LoadCharacterImage(
            ((alternate_char_opp_img)
                ? OPPBACKGROUND2
                : OPPBACKGROUND),
                 False, oppVolk, oppMann,
                 oppKaste, oppMouth, oppBeard,
                 oppNose, oppEyes, oppBrows,
                 oppEars, oppHair, oppSpecial,
                 oppSpecial2);
    };
    if ((((thisCharMonster >= 391)) and ((thisCharMonster <= 393)))){
        add(((FIGHT_COPYCAT + thisCharMonster) - 391));
    } else {
        LoadCharacterImage(
            ((alternate_char_opp_img)
                ? CHARBACKGROUND2
                : CHARBACKGROUND),
                False, thischar_volk, thischar_male, thischar_class,
                thischar_mouth, thischar_beard, thischar_nose,
                thischar_eyes, thischar_brows, thischar_ears,
                thischar_hair, thischar_special, thischar_special2);
    };
    if (is_guildBattle){
        alternate_char_opp_img = !(alternate_char_opp_img);
    };
    add_some(LBL_NAMERANK_CHAR, LBL_NAMERANK_OPP);
    add_some(
        SHIELD_CHAR, SHIELD_OPP, WEAPON_CHAR,
        WEAPON_OPP, BULLET_CHAR, BULLET_OPP);
    hide(
        SHIELD_CHAR, SHIELD_OPP, WEAPON_CHAR,
        WEAPON_OPP, BULLET_CHAR, BULLET_OPP);
    add_some(LBL_DAMAGE_INDICATOR, FIGHT_ONO);
    hide(LBL_DAMAGE_INDICATOR, FIGHT_ONO);
    actor[FIGHT_SKIP].add_event_listener(MouseEvent.CLICK, DoSkipFight);
    actor[BATTLE_SKIP].add_event_listener(MouseEvent.CLICK, DoSkipFight);
    actor[BATTLE_SKIPONE].add_event_listener(MouseEvent.CLICK, DoSkipFight);
    if (is_guildBattle){
        add(BATTLE_SKIP);
        add(BATTLE_SKIPONE);
        remove(FIGHT_SKIP);
        if (!tower_fight_mode){
            add(LBL_FIGHT_PLAYERGUILD);
            add(LBL_FIGHT_OPPGUILD);
        };
        _local3 = actor[LBL_FIGHT_PLAYERGUILD];
        with (_local3) {
            if (tower_fight_mode){
                text = texts[TXT_TOWER_GUYS];
            } else {
                text = ownGuild;
            };
            x = ((FIGHT_CHARX + 150) - (text_width / 2));
        };
        _local3 = actor[LBL_FIGHT_OPPGUILD];
        with (_local3) {
            if (tower_fight_mode){
                text = texts[TXT_TOWER_LEVEL].split(
                    "%1").join(str((tower_level + 1)));
            } else {
                text = oppGuild;
            };
            x = ((OPPX + 150) - (text_width / 2));
        };
    };
    SetLifeBars();
    i = 0;
    while (i < 5) {
        if (is_guildBattle){
            actor[(LBL_FIGHT_CHAR_STAERKE + i)].text = "";
            actor[(LBL_FIGHT_OPP_STAERKE + i)].text = "";
            if (((tower_fight_mode)
                and (!((int(GuildBattleData[(i + 1)]) == 0))))){
                actor[(LBL_FIGHT_CHAR_STAERKE_CAPTION + i)].text = texts[
                    ((TXT_COPYCAT_NAME
                        + int(GuildBattleData[(i + 1)])) - 1)];
            } else {
                actor[(LBL_FIGHT_CHAR_STAERKE_CAPTION + i)].text = str(
                    GuildBattleData[(i + 1)]);
            };
            if (tower_fight_mode){
                actor[(LBL_FIGHT_OPP_STAERKE + i)].text = str(
                    fighterData[(i + 7)]);
                actor[(LBL_FIGHT_OPP_STAERKE_CAPTION + i)].text = texts[
                    (TXT_CHAR_STAERKE + i)];
            } else {
                if (int(GuildBattleData[(i + 7)]) != 0){
                    if (-(int(GuildBattleData[(i + 7)])) >= 400){
                        actor[
                            (LBL_FIGHT_OPP_STAERKE_CAPTION + i)
                        ].text = texts[
                            ((TXT_TOWER_ENEMY_NAMES +
                            -(int(GuildBattleData[(i + 7)]))) - 400)
                        ].split("|")[0];
                    } else {
                        if (-(int(GuildBattleData[(i + 7)])) > 220){
                            actor[
                                (LBL_FIGHT_OPP_STAERKE_CAPTION + i)
                            ].text = texts[
                                ((TXT_NEW_MONSTER_NAMES
                                    + -(int(GuildBattleData[(
                                        i + 7)]))) - 221)];
                        } else {
                            actor[
                                (LBL_FIGHT_OPP_STAERKE_CAPTION + i)
                            ].text = texts[
                                ((TXT_MONSTER_NAME
                                    + -(int(GuildBattleData[(i + 7)])))
                                    - 1)];
                        };
                    };
                } else {
                    actor[(LBL_FIGHT_OPP_STAERKE_CAPTION + i)].text = str(
                        GuildBattleData[(i + 7)]);
                };
            };
        } else {
            actor[(LBL_FIGHT_CHAR_STAERKE + i)].text = str(
                fighterData[(i + 1)]);
            actor[(LBL_FIGHT_OPP_STAERKE + i)].text = str(
                fighterData[(i + 7)]);
            actor[(LBL_FIGHT_CHAR_STAERKE_CAPTION + i)].text = texts[
                (TXT_CHAR_STAERKE + i)];
            actor[(LBL_FIGHT_OPP_STAERKE_CAPTION + i)].text = texts[
                (TXT_CHAR_STAERKE + i)];
        };
        i = (i + 1);
    };
    if (text_dir == "right"){
        i = 0;
        while (i < 5) {
            actor[(LBL_FIGHT_CHAR_STAERKE_CAPTION + i)].x = (
                (FIGHT_CHAR_PROP_COLUMN_2_X + 30)
                - actor[(LBL_FIGHT_CHAR_STAERKE_CAPTION + i)].text_width);
            actor[(LBL_FIGHT_OPP_STAERKE_CAPTION + i)].x = (
                (FIGHT_CHAR_PROP_COLUMN_4_X + 30)
                - actor[(LBL_FIGHT_OPP_STAERKE_CAPTION + i)].text_width);
            actor[(LBL_FIGHT_CHAR_STAERKE + i)].x = (
                (FIGHT_CHAR_PROP_COLUMN_1_X + 40)
                - actor[(LBL_FIGHT_CHAR_STAERKE + i)].text_width);
            actor[(LBL_FIGHT_OPP_STAERKE + i)].x = (
                (FIGHT_CHAR_PROP_COLUMN_3_X + 40)
                - actor[(LBL_FIGHT_OPP_STAERKE + i)].text_width);
            i = (i + 1);
        };
    };
    strikeBreak = False;
    var inStrikeAni:* = False;
    DoStrikeTimer.add_event_listener(TimerEvent.TIMER, DoStrikeEvent);
    DoStrikeTimer.start();
};


def show_fight_screen(
    fighterData:Array,
    fightData:Array,
    getPilz:Boolean,
    faceData:Array,
    isPvP:Boolean,
    weaponData:Array,
    HonorGain,
    GoldGain,
    isMQ:Boolean,
    isReplay=False,
    BackPackSlot=-1,
    GuildBattleData:Array=None,
    lastFight=False,
    guildFightExp=0,
    guildFightHonor=0,
    ownGuild:String="", o
    ppGuild:String="",
    raidLevel=0
){
    var is_guildBattle:* = False;
    var charWeapon:* = 0;
    var oppWeapon:* = 0;
    var charHasWeapon:* = False;
    var oppHasWeapon:* = False;
    var charWeaponType:* = 0;
    var oppWeaponType:* = 0;
    var tz:* = 0;
    var charShield:* = 0;
    var oppShield:* = 0;
    var i:* = 0;
    var oppVolk:* = 0;
    var oppMann:* = False;
    var oppKaste:* = 0;
    var thischar_volk:* = 0;
    var thischar_male:* = False;
    var thischar_class:* = 0;
    var thischar_mouth:* = None;
    var thischar_beard:* = None;
    var thischar_nose:* = None;
    var thischar_eyes:* = None;
    var thischar_brows:* = None;
    var thischar_ears:* = None;
    var thischar_hair:* = None;
    var thischar_special:* = None;
    var thischar_special2:* = None;
    var thisCharMonster:* = 0;
    var oppMouth:* = 0;
    var oppBeard:* = 0;
    var oppNose:* = 0;
    var oppEyes:* = 0;
    var oppBrows:* = 0;
    var oppEars:* = 0;
    var oppHair:* = 0;
    var oppSpecial:* = 0;
    var oppSpecial2:* = 0;
    var oppMonster:* = 0;
    var oppName:* = None;
    var thisCharName:* = None;
    var charFullLife:* = 0;
    var oppFullLife:* = 0;
    var charLife:* = 0;
    var charDamage:* = 0;
    var oppLife:* = 0;
    var charFlag:* = 0;
    var oppFlag:* = 0;
    var fightRound:* = 0;
    var oppStrike:* = False;
    var isRaid:* = False;
    var DoShowFightScreen:* = None;
    var fighterData:* = fighterData;
    var fightData:* = fightData;
    var getPilz:* = getPilz;
    var faceData:* = faceData;
    var isPvP:* = isPvP;
    var weaponData:* = weaponData;
    var HonorGain:* = HonorGain;
    var GoldGain:* = GoldGain;
    var isMQ:* = isMQ;
    var isReplay:Boolean = isReplay;
    var BackPackSlot = BackPackSlot;
    var GuildBattleData:* = GuildBattleData;
    var lastFight:Boolean = lastFight;
    var guildFightExp = guildFightExp;
    var guildFightHonor = guildFightHonor;
    var ownGuild:String = ownGuild;
    var oppGuild:String = oppGuild;
    var raidLevel = raidLevel;

    is_guildBattle = False;
    if (GuildBattleData){
        is_guildBattle = True;
    };
    hasFoughtGuildBattle = is_guildBattle;
    charWeapon = weaponData[SG['ITM']['PIC']];
    oppWeapon = weaponData[(SG['ITM']['SIZE'] + SG['ITM']['PIC'])];
    charHasWeapon = (
        ((int(weaponData[SG_ITM_TYP]) > 0))
        and ((int(weaponData[SG['ITM']['PIC']]) > 0)));
    oppHasWeapon = (
        ((int(weaponData[(SG['ITM']['SIZE'] + SG_ITM_TYP)]) > 0))
        and ((int(weaponData[(SG['ITM']['SIZE'] + SG['ITM']['PIC'])]) > 0)));
    charWeaponType = 1;
    oppWeaponType = 1;
    tz = tageszeit();
    hasLostMQ = False;
    actor[LBL['ERROR']].text = "";
    if (is_guildBattle){
        remove(GILDE_CHAT);
    };
    Switch (tz){
        if case(0:
            load(SCREEN_ARENA_NIGHT);
            break;
        if case(1:
            load(SCREEN_ARENA_DAWN);
            break;
        if case(2:
            load(SCREEN_ARENA_DAY);
            break;
    };
    while (charWeapon > 1000) {
        charWeapon = (charWeapon - 1000);
        charWeaponType = (charWeaponType + 1);
    };
    while (oppWeapon > 1000) {
        oppWeapon = (oppWeapon - 1000);
        oppWeaponType = (oppWeaponType + 1);
    };
    charShield = (int(weaponData[((SG['ITM']['SIZE'] * 2) + SG['ITM']['PIC'])])
        * (((int(weaponData[((SG['ITM']['SIZE'] * 2)
            + SG_ITM_TYP)]) == 0)) ? 0 : 1));
    oppShield = (weaponData[((SG['ITM']['SIZE'] * 3) + SG['ITM']['PIC'])]
        * (((int(weaponData[((SG['ITM']['SIZE'] * 3)
            + SG_ITM_TYP)]) == 0)) ? 0 : 1));
    if (charHasWeapon){
        load(get_weapon_sound(charWeaponType, charWeapon, 0));
        load(get_weapon_sound(charWeaponType, charWeapon, 1));
        if (((!((charWeaponType == 2))) and (!((oppShield == 0))))){
            load(get_weapon_sound(charWeaponType, charWeapon, 2));
        };
        load(get_weapon_sound(charWeaponType, charWeapon, 3));
    };
    if (oppHasWeapon){
        load(get_weapon_sound(oppWeaponType, oppWeapon, 0));
        load(get_weapon_sound(oppWeaponType, oppWeapon, 1));
        if (((!((oppWeaponType == 2))) and (!((charShield == 0))))){
            load(get_weapon_sound(oppWeaponType, oppWeapon, 2));
        };
        load(get_weapon_sound(oppWeaponType, oppWeapon, 3));
    } else {
        if (oppWeapon == -1){
            load(WEAPON_CLAW, WEAPON_CLAW2, WEAPON_CLAW3, WEAPON_CLAW4);
        } else {
            if (oppWeapon == -3){
                load(WEAPON_SPLAT, WEAPON_SPLAT2, WEAPON_SPLAT3);
            } else {
                if (oppWeapon == -4){
                    load(WEAPON_STICK);
                } else {
                    if (oppWeapon == -5){
                        load(WEAPON_BONE);
                    } else {
                        if (oppWeapon == -6){
                            load(WEAPON_STONEFIST);
                        } else {
                            if (oppWeapon == -7){
                                load(
                                    WEAPON_FIRE,
                                    WEAPON_FIRE2,
                                    WEAPON_FIRE3
                                );
                            } else {
                                if (oppWeapon == -2){
                                    load(
                                        WEAPON_SWOOSH,
                                        WEAPON_SWOOSH2,
                                        WEAPON_SWOOSH3
                                    );
    };
    i = 0;
    while (i < 6) {
        load((FIGHT_ONO + i));
        i = (i + 1);
    };
    if ((((charWeaponType == 3)) or ((oppWeaponType == 3)))){
        load(FIGHT_ARROW_SMASH);
    };
    load(SCREEN_FIGHT);
    if (int(savegame[SG_ACTION_STATUS]) == 2){
        load(get_quest_bg());
    };
    if (!charHasWeapon){
        charWeapon = int(weaponData[SG_ITM_TYP]);
        load(get_weapon_sound(charWeaponType, charWeapon, 0));
        load(get_weapon_sound(charWeaponType, charWeapon, 1));
        if (((!((charWeaponType == 2))) and (!((oppShield == 0))))){
            load(get_weapon_sound(charWeaponType, charWeapon, 2));
        };
        load(get_weapon_sound(charWeaponType, charWeapon, 3));
        SetCnt(
            WEAPON_CHAR,
            (((charWeapon == 0))
                ? WEAPON_FIST
                : (((charWeapon == -1))
                    ? WEAPON_CLAW
                    : WEAPON_SWOOSH)), -30, -30, True);
        SetCnt(BULLET_CHAR, C_EMPTY);
        charWeaponType = 1;
    } else {
        if (charWeaponType == 1){
            SetCnt(
                WEAPON_CHAR,
                GetItemID(0, 0, weaponData),
                -30, -30, True);
            SetCnt(BULLET_CHAR, C_EMPTY);
        } else {
            if (charWeaponType == 2){
                SetCnt(
                    WEAPON_CHAR,
                    GetItemID(0, 0, weaponData),
                    30, -30, True);
                SetCnt(
                    BULLET_CHAR, get_arrow_id(
                        0, 0, weaponData, True, 0));
                load(get_arrow_id(
                    0, 0, weaponData, True, 1),
                    get_arrow_id(
                        0, 0, weaponData, True, 2),
                    get_arrow_id(0, 0, weaponData, True, 3));
            } else {
                if (charWeaponType == 3){
                    SetCnt(
                        WEAPON_CHAR,
                        GetItemID(0, 0, weaponData));
                    SetCnt(
                        BULLET_CHAR,
                        get_arrow_id(0, 0, weaponData, True));
                };
            };
        };
    };
    if (!oppHasWeapon){
        oppWeapon = int(weaponData[(SG['ITM']['SIZE'] + SG_ITM_TYP)]);
        load(get_weapon_sound(oppWeaponType, oppWeapon, 0));
        load(get_weapon_sound(oppWeaponType, oppWeapon, 1));
        if (((!((oppWeaponType == 2))) and (!((charShield == 0))))){
            load(get_weapon_sound(oppWeaponType, oppWeapon, 2));
        };
        load(get_weapon_sound(oppWeaponType, oppWeapon, 3));
        if (oppWeapon == -4){
            SetCnt(WEAPON_OPP, WEAPON_STICK, -30, -30, True);
        } else {
            if (oppWeapon == -5){
                SetCnt(WEAPON_OPP, WEAPON_BONE, -30, -30, True);
            } else {
                if (oppWeapon == -6){
                    SetCnt(WEAPON_OPP, WEAPON_STONEFIST, -30, -30, True);
                } else {
                    SetCnt(
                        WEAPON_OPP,
                        (((oppWeapon == 0)) ? WEAPON_FIST : C_EMPTY),
                         -30, -30, True);
                };
            };
        };
        SetCnt(BULLET_OPP, C_EMPTY);
        oppWeaponType = 1;
    } else {
        if (oppWeaponType == 1){
            SetCnt(WEAPON_OPP, GetItemID(0, 1, weaponData), -30, -30, True);
            SetCnt(BULLET_OPP, C_EMPTY);
        } else {
            if (oppWeaponType == 2){
                SetCnt(WEAPON_OPP, GetItemID(0, 1, weaponData), 30, -30, True);
                SetCnt(BULLET_OPP, get_arrow_id(0, 1, weaponData, True, 0));
                load(
                    get_arrow_id(0, 1, weaponData, True, 1),
                    get_arrow_id(0, 1, weaponData, True, 2),
                    get_arrow_id(0, 1, weaponData, True, 3));
            } else {
                if (oppWeaponType == 3){
                    SetCnt(WEAPON_OPP, GetItemID(0, 1, weaponData));
                    SetCnt(BULLET_OPP, get_arrow_id(0, 1, weaponData, True));
                };
            };
        };
    };
    if (charShield > 0){
        SetCnt(SHIELD_CHAR, GetItemID(0, 2, weaponData), 0, 0, True);
    } else {
        SetCnt(SHIELD_CHAR, C_EMPTY);
    };
    if (oppShield > 0){
        SetCnt(SHIELD_OPP, GetItemID(0, 3, weaponData), 0, 0, True);
    } else {
        SetCnt(SHIELD_OPP, C_EMPTY);
    };
    oppVolk = int(faceData[17]);
    oppMann = (int(faceData[18]) == 1);
    oppKaste = int(faceData[19]);
    thischar_volk = int(faceData[2]);
    thischar_male = (int(faceData[3]) == 1);
    thischar_class = int(faceData[4]);
    thischar_mouth = int(faceData[5]);
    thischar_beard = int(faceData[9]);
    thischar_nose = int(faceData[10]);
    thischar_eyes = int(faceData[8]);
    thischar_brows = int(faceData[7]);
    thischar_ears = int(faceData[11]);
    thischar_hair = int(faceData[6]);
    thischar_special = int(faceData[12]);
    thischar_special2 = int(faceData[13]);
    thisCharMonster = ((int(faceData[5]))<0) ? -(int(faceData[5])) : 0;
    oppMouth = int(faceData[20]);
    oppBeard = int(faceData[24]);
    oppNose = int(faceData[25]);
    oppEyes = int(faceData[23]);
    oppBrows = int(faceData[22]);
    oppEars = int(faceData[26]);
    oppHair = int(faceData[21]);
    oppSpecial = int(faceData[27]);
    oppSpecial2 = int(faceData[28]);
    var oppLevel:* = int(faceData[16]);
    oppMonster = ((int(faceData[20]))<0) ? -(int(faceData[20])) : 0;
    oppName = "";
    if (oppMonster > 0){
        if (oppMonster >= 400){
            oppName = texts[
                ((TXT_TOWER_ENEMY_NAMES + oppMonster) - 400)
            ].split("|")[0];
        } else {
            if (oppMonster > 220){
                oppName = texts[
                    ((TXT_NEW_MONSTER_NAMES + oppMonster) - 221)];
            } else {
                oppName = texts[((TXT_MONSTER_NAME + oppMonster) - 1)];
            };
        };
    } else {
        oppName = faceData[15];
        if (!is_guildBattle){
            add_suggest_names(oppName);
        };
    };
    thisCharName = (
        ((faceData[0] == ""))
            ? actor[INP['NAME']].getChildAt(1).text
            : faceData[0]);
    if (((is_guildBattle) and (tower_fight_mode))){
        if (thisCharMonster >= 391){
            thisCharName = texts[
                ((TXT_COPYCAT_NAME + thisCharMonster) - 391)];
        };
    };
    charFullLife = fighterData[0];
    oppFullLife = fighterData[6];
    charLife = (
        (is_guildBattle)
            ? (((int(GuildBattleData[0]) < 0))
                ? (charFullLife / -(int(GuildBattleData[0])))
                : int(GuildBattleData[0]))
            : charFullLife);
    charDamage = 0;
    oppLife = (
        (is_guildBattle)
            ? (((int(GuildBattleData[6]) < 0))
                ? (oppFullLife / -(int(GuildBattleData[6])))
                : int(GuildBattleData[6]))
            : oppFullLife);
    var oppDamage:* = 0;
    charFlag = 0;
    oppFlag = 0;
    fightRound = 0;
    oppStrike = False;
    var charLevel:* = int(faceData[(16 - 15)]);
    isRaid = False;
    if (!is_guildBattle){
        alternate_char_opp_img = False;
    };
    if (((is_guildBattle) and ((ownGuild == "")))){
        isRaid = True;
    };
    if (oppMonster > 0){
        load(((OPPMONSTER + oppMonster) - 1));
    } else {
        LoadCharacterImage(
            ((alternate_char_opp_img)
                ? OPPBACKGROUND2
                : OPPBACKGROUND),
            True, oppVolk, oppMann, oppKaste, oppMouth,
            oppBeard, oppNose, oppEyes, oppBrows, oppEars,
            oppHair, oppSpecial, oppSpecial2);
    };
    if ((((thisCharMonster >= 391)) and ((thisCharMonster <= 393)))){
        load(((FIGHT_COPYCAT + thisCharMonster) - 391));
    } else {
        LoadCharacterImage(
            ((alternate_char_opp_img)
                ? CHARBACKGROUND2
                : CHARBACKGROUND), True,
            thischar_volk, thischar_male, thischar_class, thischar_mouth,
            thischar_beard, thischar_nose, thischar_eyes, thischar_brows,
            thischar_ears, thischar_hair, thischar_special, thischar_special2);
    };
    if (is_guildBattle){
        if (tower_fight_mode){
            load(SCR_TOWER_BG);
        } else {
            if (isRaid){
                load(GUILD_RAID_BG);
            } else {
                load(GUILD_BATTLE_BG);
            };
        };
    };
    whendo_loaded(DoShowFightScreen);
}

def show_email_nag_screen(valMode=-1){
    var doShowEmailNagScreen:* = None;
    var valMode = valMode;
    doShowEmailNagScreen = function (){
        remove_all();
        actor[LBL_EMAIL_RESEND].htmlText = texts[TXT_EMAIL_RESEND];
        arabize(LBL_EMAIL_RESEND);
        var _local2 = actor[LBL_WINDOW_TITLE];
        with (_local2) {
            text = texts[
                (((valMode == 1))
                    ? TXT_VALIDATE_OK_TITLE
                    : (((valMode == 2))
                        ? TXT_VALIDATE_ERR_TITLE
                        : (((valMode == 3))
                            ? TXT_VALIDATE_UNN_TITLE
                            : TXT_EMAIL_NAG_TITLE)))];
            x = ((IF_WIN_X + IF_WIN_WELCOME_X) - int((text_width / 2)));
        };
        _local2 = actor[LBL_EMAIL_NAG];
        with (_local2) {
            htmlText = texts[
                (((valMode == 1))
                    ? TXT_VALIDATE_OK
                    : (((valMode == 2))
                        ? TXT_VALIDATE_ERR
                        : (((valMode == 3))
                            ? TXT_VALIDATE_UNN
                            : TXT_EMAIL_NAG)))];
        };
        arabize(LBL_EMAIL_NAG);
        add(SCREEN_EMAIL_NAG);
        if (valMode == -1){
            add(EMAIL_RESEND);
        };
    };
    load(SCREEN_EMAIL_NAG);
    whendo_loaded(doShowEmailNagScreen);
}

def show_disconnect_screen(){
    var ReconnectTimer:* = None;
    var TryReconnect:* = None;
    TryReconnect = function (evt:TimerEvent){
        ReconnectTimer.delay = (
            param_reconnect * interval_multiplier_reconnect);
        if (on_stage(LBL_DISCONNECTED)){
            request_login();
        } else {
            ReconnectTimer.remove_event_listener(
                TimerEvent.TIMER, TryReconnect);
        };
    };
    if (on_stage(LBL_DISCONNECTED)){
        return;
    };
    remove_all();
    remove(IF_LOGOUT);
    add(SCREEN_DISCONNECTED);
    session_id = "";
    ReconnectTimer = new Timer(param_reconnect);
    ReconnectTimer.add_event_listener(TimerEvent.TIMER, TryReconnect);
    ReconnectTimer.start();
}

def show_quest_screen(evt:Event=None){
    var DoShowQuestScreen:* = None;
    var evt:* = evt;
    DoShowQuestScreen = function (evt:Event=None){
        var questBarTimer:* = None;
        var QuestBarUpdate:* = None;
        var evt:* = evt;
        QuestBarUpdate = function (evt:TimerEvent=None){
            var evt:* = evt;
            if (!on_stage(QUESTBAR_BG)){
                questBarTimer.stop();
                questBarTimer.remove_event_listener(
                    TimerEvent.TIMER, QuestBarUpdate);
                set_title_bar(WaitingTime(savegame[SG_ACTION_ENDTIME]));
                return;
            };
            if (WaitingFor(savegame[SG_ACTION_ENDTIME])){
                var _local3 = actor[QUESTBAR_FILL];
                with (_local3) {
                    width = (WaitingProgress(
                        (savegame[SG_ACTION_ENDTIME]
                            - savegame[(SG_QUEST_OFFER_DURATION1
                                + (savegame[SG_ACTION_INDEX] - 1))]),
                            savegame[SG_ACTION_ENDTIME]) * 555);
                    actor[QUESTBAR_LIGHT].x = ((x + width) - 5);
                };
                _local3 = actor[LBL_QUESTBAR_TEXT];
                with (_local3) {
                    text = WaitingTime(savegame[SG_ACTION_ENDTIME]);
                    set_title_bar(text);
                    x = int((QUESTBAR_LABEL_X - (text_width / 2)));
                };
            } else {
                questBarTimer.stop();
                questBarTimer.remove_event_listener(
                    TimerEvent.TIMER, QuestBarUpdate);
                send_action(ACT_SCREEN_TAVERNE);
            };
        };
        questBarTimer = new Timer(200);
        remove_all();
        add(get_quest_bg());
        add(SCREEN_QUEST);
        var _local3 = actor[LBL_SCREEN_TITLE];
        with (_local3) {
            text = get_quest_title((int(savegame[SG_ACTION_INDEX]) - 1));
            x = (SCREEN_TITLE_X - int((text_width / 2)));
            y = SCREEN_TITLE_Y_QUEST;
        };
        actor[QUESTBAR_FILL].width = 0;
        actor[QUESTBAR_LIGHT].x = (actor[QUESTBAR_FILL].x - 5);
        questBarTimer.add_event_listener(TimerEvent.TIMER, QuestBarUpdate);
        questBarTimer.start();
        QuestBarUpdate();
        if (skip_allowed){
            actor[QUEST_CANCEL].x = int((QUEST_CANCEL_X + 5));
            show(QUEST_SKIP);
        } else {
            actor[QUEST_CANCEL].x = int(
                (QUEST_CANCEL_X - (actor[QUEST_CANCEL].width / 2)));
            hide(QUEST_SKIP);
        };
        CheckWrongPage(ACT_SCREEN_TAVERNE);
        try_show_tv();
    };
    load(SCREEN_QUEST);
    load(get_quest_bg());
    if (text_dir == "right"){
        set_btn_text(QUEST_SKIP, ("~P " + texts[TXT_SKIP_FIGHT]));
    };
    whendo_loaded(DoShowQuestScreen);
}

def show_taverne_screen(evt:Event=None){
    var DoShowTaverneScreen:* = None;
    var evt:* = evt;
    DoShowTaverneScreen = function (evt:Event=None){
        var i:* = 0;
        var quest_type:* = 0;
        var HutBlinzelTimer:* = None;
        var HutBlinzelStep:* = 0;
        var BarkeeperStep:* = 0;
        var HutBlinzelTimerEvent:* = None;
        var evt:* = evt;
        HutBlinzelTimerEvent = function (evt:TimerEvent){
            if (on_stage(TAVERNE_BG)){
                HutBlinzelStep++;
                if (HutBlinzelStep > 70){
                    hide(TAVERNE_HUTMANN_BLINZELN);
                    HutBlinzelStep = int((random.random() * 30));
                } else {
                    if (HutBlinzelStep > 68){
                        show(TAVERNE_HUTMANN_BLINZELN);
                    };
                };
                BarkeeperStep++;
                if (BarkeeperStep >= 12){
                    hide(TAVERNE_BARKEEPER1);
                    hide(TAVERNE_BARKEEPER2);
                    BarkeeperStep = 0;
                } else {
                    if (BarkeeperStep >= 9){
                        show(TAVERNE_BARKEEPER1);
                        hide(TAVERNE_BARKEEPER2);
                    } else {
                        if (BarkeeperStep >= 6){
                            hide(TAVERNE_BARKEEPER1);
                            show(TAVERNE_BARKEEPER2);
                        } else {
                            if (BarkeeperStep >= 3){
                                show(TAVERNE_BARKEEPER1);
                                hide(TAVERNE_BARKEEPER2);
                            } else {
                                hide(TAVERNE_BARKEEPER1);
                                hide(TAVERNE_BARKEEPER2);
                            };
                        };
                    };
                };
                actor[TAVERNE_KERZEN].visible = (random.random() >= 0.5);
            } else {
                HutBlinzelTimer.stop();
                HutBlinzelTimer.remove_event_listener(
                    TimerEvent.TIMER, HutBlinzelTimerEvent);
            };
        };
        quest_type = get_quest_random(0, 5);
        HutBlinzelTimer = new Timer(50);
        HutBlinzelStep = 0;
        BarkeeperStep = 0;
        SetCnt(TIMEBAR_FILL, TIMEBAR_FILL);
        SetCnt(QO_REWARDGOLD, IF_GOLD);
        SetCnt(QO_REWARDSILVER, IF_SILBER);
        remove_all();
        add(SCREEN_TAVERNE);
        if (GetAdvent() != 0){
            add(((TAVERN_ADVENT + GetAdvent()) - 1));
        };
        if (beer_fest){
            add(BEERFEST);
            i = 0;
            while (i < 4) {
                add((TV + i));
                i = (i + 1);
            };
            add(CA_TV);
        };
        if (special_action > 0){
            add(((SPECIAL_ACTION + special_action) - 1));
            actor[
                ((SPECIAL_ACTION + special_action) - 1)
            ].mouse_enabled = False;
            if (!special_actionHint){
                add(TAVERNE_BARKEEPER_HINT);
                actor[TAVERNE_BARKEEPER_HINT].mouse_enabled = False;
                AnimateAch(
                    TAVERNE_BARKEEPER_HINT,
                    ((100 + TAVERNE_BARKEEPER_Y) - 215));
            };
            i = 0;
            while (i < 4) {
                add((TV + i));
                i = (i + 1);
            };
            add(CA_TV);
        };
        RefreshTimeBar();
        CheckWrongPage(ACT_SCREEN_TAVERNE);
        hide(TAVERNE_HUTMANN_BLINZELN);
        hide(TAVERNE_BARKEEPER1);
        hide(TAVERNE_BARKEEPER2);
        i = 0;
        while (i < 5) {
            actor[(TAVERNE_QUEST1 + i)].visible = (quest_type == i);
            i = (i + 1);
        };
        define_bunch(TAVERNE_QUESTOVL, (TAVERNE_QUESTOVL1 + quest_type));
        HutBlinzelTimer.add_event_listener(
            TimerEvent.TIMER, HutBlinzelTimerEvent);
        try_show_tv();
        if (!light_mode){
            HutBlinzelTimer.start();
        } else {
            HutBlinzelTimer.stop();
        };
    };
    if (int(savegame[SG_ACTION_STATUS]) == 2){
        show_quest_screen();
        return;
    };
    force_adventure = False;
    actor[QUEST_SLOT].alpha = 1;
    if (on_stage(TAVERNE_BG)){
        remove(QUESTOFFER);
        remove(BEEROFFER);
        add(TAVERNE_CAS);
        RefreshTimeBar();
        return;
    };
    load(SCREEN_TAVERNE);
    load(QUESTOFFER);
    load(BEEROFFER);
    if (beer_fest){
        load(BEERFEST);
    };
    if (special_action > 0){
        load(((SPECIAL_ACTION + special_action) - 1));
        load(TAVERNE_BARKEEPER_HINT);
    };
    if (GetAdvent() != 0){
        load(((TAVERN_ADVENT + GetAdvent()) - 1));
    };
    whendo_loaded(DoShowTaverneScreen);
}

def show_stall_screen(evt:Event=None){
    var i:* = 0;
    var DoShowStall:* = None;
    var evt:* = evt;
    DoShowStall = function (){
        var HandTimer:* = None;
        var BauerHandEvent:* = None;
        BauerHandEvent = function (evt:TimerEvent){
            var iHand;
            var i;
            iHand = int((random.random() * 5));
            if (
                ((!(on_stage(STALL_BG_GUT)))
                    and (!(on_stage(STALL_BG_BOESE))))){
                HandTimer.stop();
                HandTimer.remove_event_listener(
                    TimerEvent.TIMER, BauerHandEvent);
            };
            i = 0;
            while (i < 5) {
                actor[(STALL_ARME1 + i)].visible = Boolean((i == iHand));
                i++;
            };
        };
        HandTimer = new Timer(200);
        remove_all();
        actor[LBL_STALL_TITEL].text = texts[TXT_STALL_TITEL];
        if (text_dir == "right"){
            actor[LBL_STALL_TITEL].x = (
                (actor[LBL_STALL_TEXT].x + actor[LBL_STALL_TEXT].width)
                - actor[LBL_STALL_TITEL].text_width);
        };
        actor[LBL_STALL_TEXT].text = texts[TXT_STALL_TEXT];
        arabize(LBL_STALL_TEXT);
        actor[LBL_STALL_GAIN].text = "";
        if ((((char_volk >= 5)) and (!(param_censored)))){
            add(STALL_BOESE);
        } else {
            add(STALL_GUT);
        };
        add(SCREEN_STALL);
        if (tageszeit() == 1){
            remove(STALL_NIGHT);
        } else {
            if (tageszeit() == 2){
                remove(STALL_NIGHT, STALL_DAWN);
            };
        };
        HandTimer.add_event_listener(TimerEvent.TIMER, BauerHandEvent);
        HandTimer.start();
    };
    if (((on_stage(STALL_BG_GUT)) or (on_stage(STALL_BG_BOESE)))){
        return;
    };
    load(SCREEN_STALL);
    if ((((char_volk >= 5)) and (!(param_censored)))){
        load(STALL_BOESE);
        load(
            STALL_OVL_BOESE1,
            STALL_OVL_BOESE2,
            STALL_OVL_BOESE3,
            STALL_OVL_BOESE4
        );
        i = 0;
        while (i < 4) {
            load(((SND_MOUNT_1 + i) + 4));
            i = (i + 1);
        };
    } else {
        load(STALL_GUT);
        load(
            STALL_OVL_GUT1,
            STALL_OVL_GUT2,
            STALL_OVL_GUT3,
            STALL_OVL_GUT4
        );
        i = 0;
        while (i < 4) {
            load((SND_MOUNT_1 + i));
            i = (i + 1);
        };
    };
    whendo_loaded(DoShowStall);
}

def show_arena_screen(oppName:String, oppGilde:String, oppStufe){
    var tz:* = 0;
    var DoShowArenaScreen:* = None;
    var PvPDelayCheck:* = None;
    var oppName:* = oppName;
    var oppGilde:* = oppGilde;
    var oppStufe:* = oppStufe;
    DoShowArenaScreen = function (evt:Event=None){
        var evt:* = evt;
        remove_all();
        Switch (tz){
            if case(0:
                add(SCREEN_ARENA_NIGHT);
                break;
            if case(1:
                add(SCREEN_ARENA_DAWN);
                break;
            if case(2:
                add(SCREEN_ARENA_DAY);
                break;
        };
        if (oppName != ""){
            var _local3 = actor[LBL_WINDOW_TITLE];
            with (_local3) {
                text = texts[TXT_ARENA_TITLE];
                x = ((IF_WIN_X + IF_WIN_WELCOME_X) - int((text_width / 2)));
            };
            add(SCREEN_ARENA);
            if (Capabilities.version[0: 3] != "IOS"){
                if (light_mode){
                    remove(ARENA_FEUER);
                };
            };
            pvp_delay_timer.add_event_listener(TimerEvent.TIMER,
                                               PvPDelayCheck);
            pvp_delay_timer.start();
            PvPDelayCheck();
            actor[INP_ARENA_ENEMY].getChildAt(1).text = oppName;
        };
    };
    PvPDelayCheck = function (evt:TimerEvent=None){
        if (!on_stage(INP_ARENA_ENEMY)){
            pvp_delay_timer.remove_event_listener(TimerEvent.TIMER,
                                                PvPDelayCheck);
            pvp_delay_timer.stop();
            return;
        };
        if (WaitingFor(savegame[SG_PVP_REROLL_TIME])){
            if (text_dir == "right"){
                actor[LBL_ARENA_TEXT].text = (
                    ((((((((texts[TXT_ARENA_4] + " (")
                        + str(oppStufe)) + " ")
                        + texts[TXT_HALL_LIST_COLUMN_4]) + ") ")
                        + (((oppGilde == ""))
                            ? ""
                            : (("[" + oppGilde) + "] ")))
                        + oppName) + " ") + texts[TXT_ARENA_3]);
            } else {
                actor[LBL_ARENA_TEXT].text = (
                    ((((((((texts[TXT_ARENA_3] + " ") + oppName)
                    + (((oppGilde == "")) ? "" : ((" [" + oppGilde) + "]")))
                    + " (") + texts[TXT_HALL_LIST_COLUMN_4]) + " ")
                    + str(oppStufe)) + ") ") + texts[TXT_ARENA_4]);
            };
            actor[LBL_ARENA_DELAY].text = WaitingTime(
                savegame[SG_PVP_REROLL_TIME]);
            set_title_bar(WaitingTime(savegame[SG_PVP_REROLL_TIME]));
            if (text_dir == "right"){
                set_btn_text(ARENA_OK, ("(~P1) " + texts[TXT_OK]));
            } else {
                set_btn_text(ARENA_OK, (texts[TXT_OK] + " (1~P)"));
            };
            show(LBL_ARENA_DELAY);
        } else {
            if (text_dir == "right"){
                actor[LBL_ARENA_TEXT].text = (
                    ((((((((texts[TXT_ARENA_2] + " (")
                        + str(oppStufe)) + " ")
                    + texts[TXT_HALL_LIST_COLUMN_4]) + ") ")
                    + (((oppGilde == "")) ? "" : (("[" + oppGilde) + "] ")))
                    + oppName) + " ") + texts[TXT_ARENA_1]);
            } else {
                actor[LBL_ARENA_TEXT].text = (
                    ((((((((texts[TXT_ARENA_1] + " ") + oppName)
                    + (((oppGilde == "")) ? "" : ((" [" + oppGilde) + "]")))
                    + " (") + texts[TXT_HALL_LIST_COLUMN_4]) + " ")
                    + str(oppStufe)) + ") ") + texts[TXT_ARENA_2]);
            };
            arabize(LBL_ARENA_TEXT);
            set_btn_text(ARENA_OK, texts[TXT_OK]);
            hide(LBL_ARENA_DELAY);
            set_title_bar();
            pvp_delay_timer.remove_event_listener(
                TimerEvent.TIMER, PvPDelayCheck);
            pvp_delay_timer.stop();
        };
    };
    tz = tageszeit();
    if ((((int(savegame[SG_ACTION_STATUS]) == 1)) and (!(has_mirror)))){
        show_work_screen();
        return;
    };
    if ((((int(savegame[SG_ACTION_STATUS]) == 2)) and (!(has_mirror)))){
        show_quest_screen();
        return;
    };
    load(SCREEN_ARENA);
    Switch (tz){
        if case(0:
            load(SCREEN_ARENA_NIGHT);
            break;
        if case(1:
            load(SCREEN_ARENA_DAWN);
            break;
        if case(2:
            load(SCREEN_ARENA_DAY);
            break;
    };
    whendo_loaded(DoShowArenaScreen);
}

def show_hall_screen(evt:Event=None):
    var DoShowHallScreen:* = None;
    var evt:* = evt;
    DoShowHallScreen = function (){
        remove_all();
        if (guild_hall_mode){
            ruhmes_halle_such_string = gilde;
            ruhmes_halle_such_name = True;
        } else {
            ruhmes_halle_such_string = actor[INP['NAME']].getChildAt(1).text;
            ruhmes_halle_such_name = True;
        };
        actor[INP_HALLE_GOTO].getChildAt(1).text = texts[
            TXT_HALLE_SUCHFELD_TEXT];
        add(SCREEN_HALLE);
    };
    load(SCREEN_HALLE);
    whendo_loaded(DoShowHallScreen);
}

def show_dealer_screen(evt:Event=None, loadOnly=False){
    var papaya_firebug:* = None;
    var url:* = None;
    var DoShowDealerScreen:* = None;
    var evt:* = evt;
    var loadOnly:Boolean = loadOnly;
    DoShowDealerScreen = function (par:Object=None){
        remove_all();
        add(SCREEN_DEALER);
    };
    papaya_firebug = "0";
    if (param_obj["firebug"]){
        if (param_obj["firebug"] != ""){
            papaya_firebug = "1";
        };
    };
    url = (
        (((((((((((((((((((((param_papaya_path + "?playerid=")
            + savegame[SG['PLAYER_ID']]) + "&paymentid=")
            + savegame[SG_PAYMENT_ID]) + "&server_id=") + server_id)
            + "&serverdomain=") + server) + "&session_id=") + session_id)
            + "&special=") + dealer_aktion) + "&langcode=") + lang_code)
            + "&volume=") + str((so.data.volume / 10))) + "&mp_project=")
            + mp_project) + "&cfgfile=") + param_papaya_cfg_file)
            + "&firebug=") + papaya_firebug);
    if (actorURL[SCR_DEALER_BG] != url){
        actorURL[SCR_DEALER_BG] = url;
        actorLoaded[SCR_DEALER_BG] = 0;
    };
    actor[SCR_DEALER_BG].mouseChildren = True;
    actor[SCR_DEALER_BG].mouse_enabled = True;
    load(SCREEN_DEALER);
    if (!loadOnly){
        whendo_loaded(DoShowDealerScreen);
    };
}

def show_screen_gilde_gruenden(evt:Event=None){
    var DoShowScreenGilden:* = None;
    var evt:* = evt;
    DoShowScreenGilden = function (evt:Event=None){
        var evt:* = evt;
        remove_all();
        gilde = "";
        my_own_rank = -1;
        my_own_attack_target = -1;
        my_own_guild_money = -1;
        var _local3 = actor[LBL_WINDOW_TITLE];
        with (_local3) {
            text = texts[TXT_GILDE_GRUENDEN_TITLE];
            x = ((IF_WIN_X + IF_WIN_WELCOME_X) - int((text_width / 2)));
        };
        add(SCREEN_GILDE_GRUENDEN);
    };
    load(SCREEN_GILDE_GRUENDEN);
    whendo_loaded(DoShowScreenGilden);
}

def show_city_screen(evt:Event=None):
    var StatistenBleiben:* = False;
    var doShowCityScreen:* = None;
    var evt:* = evt;
    doShowCityScreen = function (){
        if (
            ((((on_stage(SCR_CITY_BACKG_NIGHT))
            or (on_stage(SCR_CITY_BACKG_DAWN))))
            or (on_stage(SCR_CITY_BACKG_DAY)))
        ){
            MakePersistent(CITY_STATISTEN, BUBBLES);
            StatistenBleiben = True;
        };
        remove_all();
        Switch (tageszeit()){
            if case(0:
                add(SCREEN_CITY_NIGHT);
                break;
            if case(1:
                add(SCREEN_CITY_DAWN);
                break;
            if case(2:
                add(SCREEN_CITY_DAY);
                break;
        };
        add(SCREEN_CITY);
        if (StatistenBleiben){
            MakeTemporary(CITY_STATISTEN, BUBBLES);
            visible_to_front(CITY_STATISTEN, BUBBLES);
        } else {
            if (int((random.random() * 3)) == 0){
                add(CITY_MAGIER1);
            };
            if (int((random.random() * 3)) == 0){
                add(CITY_ORK1);
                define_bunch(CITY_ORK, CITY_ORK1);
            };
            if (int((random.random() * 3)) == 0){
                add(CITY_SANDWICH1);
            };
            if (int((random.random() * 3)) == 0){
                add(CITY_ZWERG1);
                define_bunch(CITY_ZWERG, CITY_ZWERG1);
            };
            if (int((random.random() * 3)) == 0){
                add(CITY_ELF1);
            };
        };
        if (Capabilities.version[0: 3] != "IOS"){
            actor[SCR_CITY_CLOUDS_NIGHT].scrollRect = new Rectangle(
                0, 0, 1000, 265);
            actor[SCR_CITY_CLOUDS_DAWN].scrollRect = new Rectangle(
                0, 0, 1000, 265);
            actor[SCR_CITY_CLOUDS_DAY].scrollRect = new Rectangle(
                0, 0, 1000, 265);
            if (light_mode){
                remove(SCR_CITY_CLOUDS_NIGHT);
                remove(SCR_CITY_CLOUDS_DAWN);
                remove(SCR_CITY_CLOUDS_DAY);
            };
        };
        show_dealer_screen(None, True);
    };
    StatistenBleiben = False;
    load(BUBBLES);
    Switch (tageszeit()){
        if case(0:
            load(SCREEN_CITY_NIGHT);
            break;
        if case(1:
            load(SCREEN_CITY_DAWN);
            break;
        if case(2:
            load(SCREEN_CITY_DAY);
            break;
    };
    load(SCREEN_CITY);
    load(CITY_ESEL2);
    load(CITY_SANDWICH1);
    load(CITY_SANDWICH2);
    whendo_loaded(doShowCityScreen);
}

def show_post_screen(par:Array=None){
    var DoShowPost:* = None;
    var BuildPostList:* = None;
    var par:* = par;
    DoShowPost = function (evt:Event=None){
        var thisInstance:* = 0;
        var postSchonDa:* = False;
        var evt:* = evt;
        var PostSetFocus:* = function (evt:Event=None){
            var evt:* = evt;
            if (!on_stage(POST_BG)){
                return;
            };
            if (thisInstance != postInstance){
                var _local3 = actor[POST_LIST];
                with (_local3) {
                    remove_event_listener(KeyboardEvent.KEY_DOWN,
                                          PostKeyEvent);
                    remove_event_listener(FocusEvent.FOCUS_OUT, PostSetFocus);
                };
            } else {
                stage.stageFocusRect = False;
                stage.focus = actor[POST_LIST];
            };
        };
        var PostKeyEvent:* = function (evt:KeyboardEvent){
            var evt:* = evt;
            if (((!(on_stage(POST_LIST))) or (on_stage(POST_FLUSH_OK)))){
                return;
            };
            if (thisInstance != postInstance){
                var _local3 = actor[POST_LIST];
                with (_local3) {
                    remove_event_listener(KeyboardEvent.KEY_DOWN,
                                          PostKeyEvent);
                    remove_event_listener(FocusEvent.FOCUS_OUT, PostSetFocus);
                };
                return;
            };
            if (on_stage(POST_LIST)){
                if (
                    (((evt.keyCode == Keyboard.DELETE))
                        or ((evt.keyCode == Keyboard.BACKSPACE)))
                ){
                    PostBtnHandler(None, POST_DELETE);
                } else {
                    if (evt.keyCode == Keyboard.ENTER){
                        PostBtnHandler(None, POST_READ);
                    } else {
                        if (
                            (((evt.keyCode == Keyboard.UP))
                            or ((evt.keyCode == Keyboard.DOWN)))
                        ){
                            BuildPostList(evt);

        postInstance++;
        if (postInstance > 20000){
            postInstance = 0;
        };
        thisInstance = postInstance;
        postSchonDa = on_stage(SHP_POST_BLACK_SQUARE);
        remove_all();
        if ((par is Array)){
            PostReturnToPlayer = "";
            BuildPostList();
        };
        add(SCREEN_POST);
        var _local3 = actor[POST_LIST];
        with (_local3) {
            add_event_listener(KeyboardEvent.KEY_DOWN, PostKeyEvent);
            add_event_listener(FocusEvent.FOCUS_OUT, PostSetFocus);
        };
        PostSetFocus();
        if (!(par is Array)){
            PostReturnToPlayer = sel_name;
            actor[INP_POST_ADDRESS].getChildAt(1).type = TextFieldType.INPUT;
            actor[INP_POST_SUBJECT].getChildAt(1).type = TextFieldType.INPUT;
            actor[INP_POST_TEXT].getChildAt(1).type = TextFieldType.INPUT;
            remove(POST_LIST);
            add(POST_WRITE);
            hide(POST_GUILD);
            actor[INP_POST_ADDRESS].getChildAt(1).text = sel_name;
            actor[INP_POST_SUBJECT].getChildAt(1).text = texts[TXT_BETREFF];
            actor[INP_POST_TEXT].getChildAt(1).text = texts[TXT_NACHRICHT];
        };
        if (tageszeit() != 0){
            remove(POST_NIGHT);
        };
        if (tageszeit() != 1){
            remove(POST_DAWN);
        };
        if (
            ((((!(postSchonDa))
            and ((par is Array))))
            and (!(light_mode)))
        ){
            set_alpha(POST_LIST, 0);
            set_alpha(SHP_POST_BLACK_SQUARE, 0);
            fade_in(POST_LIST);
            fade_in(SHP_POST_BLACK_SQUARE, 20, 0.05, 0.6);
        };
    };
    BuildPostList = function (evt:Event=None){
        var tmp_array:* = None;
        var sel_row:* = 0;
        var tmpBalken:* = None;
        var line:* = None;
        var i:* = 0;
        var tmp_fmt:* = None;
        var evt:* = evt;
        tmp_array = par[1].split("/");
        if (par[2]){
            savegame[SG_MSG_COUNT] = par[2];
        };
        sel_row = (((tmp_array[0] == "")) ? 0 : 1);
        var _local3 = actor[LBL_POST_LIMIT];
        with (_local3) {
            if (int(savegame[SG_MSG_COUNT]) >= 100){
                default_text_format = FontFormat_Error;
            } else {
                default_text_format = FontFormat_Default;
            };
            text = (savegame[SG_MSG_COUNT] + " / 100");
            x = (((POST_SQUARE_X + POST_SQUARE_X) - width) + POST_LIMIT_X);
        };
        if ((evt is MouseEvent)){
            sel_row = (int(((
                actor[POST_LIST].getChildIndex(evt.target) - 3) / 4)) + 1);
        };
        if ((evt is KeyboardEvent)){
            sel_row = (o
                ldSel + ((KeyboardEvent(evt).keyCode)==Keyboard.UP)
                    ? -1 : 1);
            if (sel_row < 1){
                PostBtnHandler(None, POST_UP);
                return;
            };
            if (sel_row > 15){
                PostBtnHandler(None, POST_DOWN);
                return;
            };
            if (tmp_array[((sel_row - 1) * 3)] == ""){
                return;
            };
        };
        if (oldSel == -1){
            sel_row = 15;
        };
        while (tmp_array[((sel_row - 1) * 3)] == "") {
            sel_row = (sel_row - 1);
        };
        oldSel = sel_row;
        _local3 = actor[POST_LIST];
        with (_local3) {
            while (numChildren > 0) {
                removeChildAt(0);
            };
            mouse_enabled = True;
            doubleClickEnabled = True;
            mouseChildren = True;
        };
        if (text_dir == "right"){
            PostListAddField(
                (POST_LIST_COLUMN_1_X + 180),
                POST_LIST_LINES_Y,
                texts[TXT_POST_LIST_COLUMN_1],
                FontFormat_PostListHeading
            );
            PostListAddField(
                (POST_LIST_COLUMN_2_X + 470),
                POST_LIST_LINES_Y,
                texts[TXT_POST_LIST_COLUMN_2],
                FontFormat_PostListHeading
            );
            PostListAddField(
                (POST_LIST_COLUMN_3_X + 180),
                POST_LIST_LINES_Y,
                texts[TXT_POST_LIST_COLUMN_3],
                FontFormat_PostListHeading
            );
        } else {
            PostListAddField(
                POST_LIST_COLUMN_1_X,
                POST_LIST_LINES_Y,
                texts[TXT_POST_LIST_COLUMN_1],
                FontFormat_PostListHeading
            );
            PostListAddField(
                POST_LIST_COLUMN_2_X,
                POST_LIST_LINES_Y,
                texts[TXT_POST_LIST_COLUMN_2],
                FontFormat_PostListHeading
            );
            PostListAddField(
                POST_LIST_COLUMN_3_X,
                POST_LIST_LINES_Y,
                texts[TXT_POST_LIST_COLUMN_3],
                FontFormat_PostListHeading
            );
        };
        post_sel = sel_row;
        post_scrollDown = !((tmp_array[(tmp_array.length - 3)] == ""));
        line = 1;
        i = 0;
        while (i < ((tmp_array.length - 1) - 3)) {
            if (sel_row == line){
                tmp_fmt = FontFormat_PostListHighLightSys;
            } else {
                tmp_fmt = FontFormat_PostListTextSys;
            };
            tmpBalken = new MovieClip();
            _local3 = tmpBalken.graphics;
            with (_local3) {
                beginFill(CLR_SFORANGE, 0.5);
                lineStyle(0, 0, 0);
                drawRect(
                    0, 0,
                    ((POST_SQUARE_X - (POST_LIST_COLUMN_1_X * 2)) - 10),
                    (POST_LIST_LINE_Y + 3));
            };
            _local3 = tmpBalken;
            with (_local3) {
                x = (POST_LIST_COLUMN_1_X - 5);
                y = ((POST_LIST_LINES_Y + (line * POST_LIST_LINE_Y)) - 3);
                mouse_enabled = True;
                doubleClickEnabled = True;
                mouseChildren = False;
                alpha = (((sel_row == line)) ? 1 : 0);
            };
            DoubleClickHandler(tmpBalken, BuildPostList, PostBtnHandler);
            if (tmp_array[i] == ""){
                fight_flush_mode = False;
                return;
            };
            Switch (tmp_array[(i + 1)]){
                if case("1":
                    tmp_array[(i + 1)] = texts[TXT_SUBJECT_GUILD_DELETED];
                    break;
                if case("2":
                    tmp_array[(i + 1)] = texts[
                        TXT_SUBJECT_GUILD_DELETED_BY_ADMIN];
                    break;
                if case("3":
                    tmp_array[(i + 1)] = texts[TXT_SUBJECT_GUILD_EXPELLED];
                    break;
                if case("4":
                    tmp_array[(i + 1)] = texts[
                        TXT_SUBJECT_GUILD_EXPELLED_BY_ADMIN];
                    break;
                if case("5":
                    tmp_array[(i + 1)] = texts[TXT_SUBJECT_GUILD_INVITE];
                    break;
                if case("6":
                    if (fight_flush_mode){
                        send_action(
                            ACT_POST_DELETE, ((line + post_scroll) - 1));
                        return;
                    };
                    tmp_array[(i + 1)] = texts[TXT_SUBJECT_PVP].replace(
                        "%1", tmp_array[i]);
                    if (sel_row == line){
                        tmp_fmt = FontFormat_PostListHighLightSysRed;
                    } else {
                        tmp_fmt = FontFormat_PostListTextSysRed;
                    };
                    break;
                if case("7":
                    if (fight_flush_mode){
                        send_action(
                            ACT_POST_DELETE,
                            ((line + post_scroll) - 1));
                        return;
                    };
                    tmp_array[(i + 1)] = texts[TXT_SUBJECT_PVP].replace(
                        "%1", tmp_array[i]);
                    if (sel_row == line){
                        tmp_fmt = FontFormat_PostListHighLightSysGreen;
                    } else {
                        tmp_fmt = FontFormat_PostListTextSysGreen;
                    };
                    break;
                if case("8":
                    if (texts[TXT_INV_ACC_TITLE] != ""){
                        tmp_array[(i + 1)] = texts[TXT_INV_ACC_TITLE];
                    } else {
                        tmp_array[(i + 1)] = "FRIEND_INVITE_ACCEPTED";
                    };
                    break;
                if case("9":
                    if (texts[TXT_INV_VAL_TITLE] != ""){
                        tmp_array[(i + 1)] = texts[TXT_INV_VAL_TITLE];
                    } else {
                        tmp_array[(i + 1)] = "FRIEND_EMAIL_VERIFIED";
                    };
                    break;
                if case("1  ":
                if case("2  ":
                if case("3  ":
                if case("4  ":
                if case("5  ":
                if case("6  ":
                if case("7  ":
                if case("8  ":
                if case("9  ":
                    tmp_array[(i + 1)] = "Moo!";
                default:
                    if (sel_row == line){
                        tmp_fmt = FontFormat_PostListHighLight;
                    } else {
                        tmp_fmt = FontFormat_PostListText;
                    };
            };
            actor[POST_LIST].addChild(tmpBalken);
            add_suggest_names(tmp_array[i]);
            if (text_dir == "right"){
                i = (i + 1);
                PostListAddField(
                    (POST_LIST_COLUMN_1_X + 180),
                    (POST_LIST_LINES_Y + (line * POST_LIST_LINE_Y)),
                    tmp_array[i], tmp_fmt
                );
                i = (i + 1);
                PostListAddField(
                    (POST_LIST_COLUMN_2_X + 470),
                    (POST_LIST_LINES_Y + (line * POST_LIST_LINE_Y)),
                    tmp_array[i],
                    tmp_fmt
                );
                PostListAddField(
                    (POST_LIST_COLUMN_3_X + 180),
                    (POST_LIST_LINES_Y + (line * POST_LIST_LINE_Y)),
                    (((int(tmp_array[i]) == 0))
                        ? ""
                        : time_str(tmp_array[i])),
                    tmp_fmt
                );
            } else {
                i = (i + 1);
                PostListAddField(
                    POST_LIST_COLUMN_1_X,
                    (POST_LIST_LINES_Y + (line * POST_LIST_LINE_Y)),
                    tmp_array[i],
                    tmp_fmt
                );
                i = (i + 1);
                PostListAddField(
                    POST_LIST_COLUMN_2_X,
                    (POST_LIST_LINES_Y + (line * POST_LIST_LINE_Y)),
                    tmp_array[i],
                    tmp_fmt
                );
                PostListAddField(
                    POST_LIST_COLUMN_3_X,
                    (POST_LIST_LINES_Y + (line * POST_LIST_LINE_Y)),
                    (((int(tmp_array[i]) == 0))
                        ? ""
                        : time_str(tmp_array[i])),
                    tmp_fmt
                );
            };
            line = (line + 1);
            i = (i + 1);
        };
        fight_flush_mode = False;
    };
    var PostListAddField:* = function (
        pos_x, pos_y, txt:String, fmt:TextFormat
    ):
        var tmpLbl:* = None;
        var pos_x:* = pos_x;
        var pos_y:* = pos_y;
        var txt:* = txt;
        var fmt:* = fmt;
        tmpLbl = new TextField();
        var _local6 = tmpLbl;
        with (_local6) {
            default_text_format = fmt;
            auto_size = TextFieldAutoSize.LEFT;
            background = False;
            selectable = False;
            embed_fonts = font_embedded;
            anti_alias_type = AntiAliasType.ADVANCED;
            mouse_enabled = True;
            doubleClickEnabled = True;
            text = txt;
            if (text_dir == "right"){
                x = (pos_x - (((tmpLbl is TextField)) ? text_width : width));
            } else {
                x = pos_x;
            };
            y = pos_y;
            visible = True;
            filters = Filter_Shadow;
        };
        DoubleClickHandler(tmpLbl, BuildPostList, PostBtnHandler);
        actor[POST_LIST].addChild(tmpLbl);
    };
    load(SCREEN_POST);
    whendo_loaded(DoShowPost);
}

def show_build_character_screen(evt:Event=None):
    var RebuildMode:* = False;
    var i:* = 0;
    var evt:* = evt;
    RebuildMode = False;
    if (
        (((evt is MouseEvent))
        and ((get_actor_id(evt.target) == OPTION_CHANGEIMG)))
    ){
        RebuildMode = True;
    };
    if (
        (((evt is MouseEvent))
        and ((((get_actor_id(evt.target) == GOTO_LOGIN))
        or ((get_actor_id(evt.target) == GOTO_SIGNUP)))))
    ){
        so.data.skipAutoLOGin = True;
    };
    if (
        ((((so.data.HasAccount)
        and (!(so.data.skipAutoLOGin))))
        and (!(RebuildMode)))
    ){
        if (so.data.userName){
            actor[INP['NAME']].getChildAt(1).text = str(so.data.userName);
        };
        if (so.data.password){
            actor[INP['LOGIN_PASSWORD']].getChildAt(1).text = str(
                so.data.password);
        };
        add(BLACK_SQUARE);
        request_login();
        return;
    };
    if (((((buffed_mode) and (!(buffed_req)))) and (!(RebuildMode)))){
        show_login_screen();
        return;
    };
    remove_all();
    i = 0;
    while (i < 10) {
        var _local3 = actor[(CHARBACKGROUND + i)];
        with (_local3) {
            x = ((SCREEN_TITLE_X - 150) + CHARX);
            y = (SCREEN_TITLE_Y + CHARY);
            scaleX = 1;
            scaleY = 1;
        };
        i = (i + 1);
    };
    _local3 = actor[LBL_SCREEN_TITLE];
    with (_local3) {
        text = texts[TXT_CREATE_CHARACTER];
        x = (SCREEN_TITLE_X - int((text_width / 2)));
        y = SCREEN_TITLE_Y;
    };
    add(SCREEN_BUILDCHAR);
    if (DemoMode){
        remove(CREATE_GOTO_LOGIN, IF_LOGOUT);
    };
    if (char_volk == 0){
        RandomizeCharacter();
    };
    if (RebuildMode){
        remove(CREATE_CHARACTER);
        revertchar_volk = char_volk;
        revertchar_male = char_male;
        revertchar_color = char_color;
        revertchar_mouth = char_mouth;
        revertchar_beard = char_beard;
        revertchar_nose = char_nose;
        revertchar_eyes = char_eyes;
        revertchar_brows = char_brows;
        revertchar_ears = char_ears;
        revertchar_hair = char_hair;
        revertchar_special = char_special;
        revertchar_special2 = char_special2;
        KlasseGewählt = True;
    };
    LoadCharacterImage();
}

def show_character_screen(evt:Event=None, NoPrices=False):
    var DoShowCharacterScreen:* = None;
    var evt:* = evt;
    var NoPrices:Boolean = NoPrices;
    DoShowCharacterScreen = function (){
        var i:* = 0;
        var OneUp:* = False;
        var level_upTimer:* = None;
        var MountTimeTimer:* = None;
        var MountTimeEvent:* = None;
        var vanityRandom:* = NaN;
        var findIndex:* = 0;
        var level_upAniStep:* = 0;
        var kickIn:* = NaN;
        var level_upAniEvent:* = None;
        MountTimeEvent = function (evt:TimerEvent=None){
            if (
                ((!(on_stage(LBL_CHAR_MOUNT_RUNTIME)))
                    or ((savegame[SG_MOUNT] == 0)))
            ){
                MountTimeTimer.stop();
                MountTimeTimer.remove_event_listener(
                    TimerEvent.TIMER, MountTimeEvent);
                return;
            };
            if (
                ((texts[TXT_MOUNT_FOREVER])
                    and ((savegame[SG_MOUNT_DURATION] == 0x7D2B7500)))
            ){
                actor[LBL_CHAR_MOUNT_RUNTIME].text = texts[
                    TXT_MOUNT_FOREVER];
            } else {
                if (text_dir == "right"){
                    actor[LBL_CHAR_MOUNT_RUNTIME].text = (
                        (WaitingTime(savegame[SG_MOUNT_DURATION]) + " ")
                        + texts[TXT_MOUNT_DURATION]
                    );
                } else {
                    actor[LBL_CHAR_MOUNT_RUNTIME].text = (
                        (texts[TXT_MOUNT_DURATION] + " ")
                        + WaitingTime(savegame[SG_MOUNT_DURATION])
                    );
                };
            };
        };
        level_upTimer = new Timer(20);
        error_message(" ");
        if (!on_stage(SCR_CHAR_BG)){
            set_alpha(CHAR_SECONDPROP, 1);
            set_alpha(CHAR_PREISE, 0);
        };
        remove_all();
        i = 0;
        while (i < 10) {
            var _local2 = actor[(CHARBACKGROUND + i)];
            with (_local2) {
                x = SCR_CHAR_CHARX;
                y = SCR_CHAR_CHARY;
                scaleX = 0.86;
                scaleY = 0.86;
            };
            i = (i + 1);
        };
        i = 0;
        while (i < 5) {
            SetCnt((SCR_CHAR_GOLD1 + i), IF_GOLD);
            SetCnt((SCR_CHAR_SILBER1 + i), IF_SILBER);
            i = (i + 1);
        };
        if (text_dir == "right"){
            actor[LBL_CHAR_MOUNT_NAME].text = (
                (texts[TXT_NOMOUNT] + " ") + texts[TXT_MOUNT]);
        } else {
            actor[LBL_CHAR_MOUNT_NAME].text = (
                (texts[TXT_MOUNT] + " ") + texts[TXT_NOMOUNT]);
        };
        actor[LBL_CHAR_MOUNT_RUNTIME].text = "";
        actor[LBL_CHAR_MOUNT_DESCR].text = "";
        actor[LBL_CHAR_MOUNT_GAIN].text = "";
        if (savegame[SG_MOUNT] > 0){
            add(LBL_CHAR_MOUNT_RUNTIME);
        } else {
            remove(LBL_CHAR_MOUNT_RUNTIME);
        };
        MountTimeTimer = new Timer(500);
        MountTimeTimer.add_event_listener(TimerEvent.TIMER, MountTimeEvent);
        MountTimeTimer.start();
        i = 0;
        while (i < 8) {
            if (
                (((int(savegame[SG_MOUNT]) > 0))
                and (((i + 1) == (int(savegame[SG_MOUNT])
                + (((((savegame[SG_RACE] >= 5))
                and (!(param_censored)))) ? 4 : 0)))))
            ){
                show((CHAR_MOUNT_1 + i));
                if (text_dir == "right"){
                    actor[LBL_CHAR_MOUNT_NAME].text = (
                        (texts[(TXT_STALL_MOUNTTITEL + i)] + " ")
                        + texts[TXT_MOUNT]
                    );
                    actor[LBL_CHAR_MOUNT_DESCR].text = texts[
                        (TXT_STALL_MOUNTTEXT + i)
                    ];
                    actor[LBL_CHAR_MOUNT_GAIN].text = texts[
                        (TXT_MOUNT_GAIN1 + i)
                    ].split("|")[0];
                } else {
                    actor[LBL_CHAR_MOUNT_NAME].text = (
                        (texts[TXT_MOUNT] + " ")
                        + texts[(TXT_STALL_MOUNTTITEL + i)]
                    );
                    actor[LBL_CHAR_MOUNT_DESCR].text = texts[
                        (TXT_STALL_MOUNTTEXT + i)];
                    actor[LBL_CHAR_MOUNT_GAIN].text = texts[
                        (TXT_MOUNT_GAIN1 + i)].split("|")[0];
                };
                MountTimeEvent();
            } else {
                hide((CHAR_MOUNT_1 + i));
            };
            i = (i + 1);
        };
        if (text_dir == "right"){
            actor[LBL_SCR_CHAR_NAME].text = (
                ((gilde) ? (("[" + gilde) + "] ") : "")
                + actor[INP['NAME']].getChildAt(1).text
            );
        } else {
            actor[LBL_SCR_CHAR_NAME].text = (
                actor[INP['NAME']].getChildAt(1).text
                + ((gilde) ? ((" [" + gilde) + "]") : "")
            );
        };
        lastPlayer = actor[INP['NAME']].getChildAt(1).text;
        if (gilde){
            SelectedGuild = gilde;
            actor[SCR_CHAR_NAME].useHandCursor = True;
        } else {
            SelectedGuild = "";
            actor[SCR_CHAR_NAME].useHandCursor = False;
        };
        trim_too_long(LBL_SCR_CHAR_NAME, 260);
        i = 0;
        while (i < 3) {
            if ((int(savegame[SG_CLASS]) - 1) == i){
                show((SCR_CHAR_KLASSE_1 + i));
            } else {
                hide((SCR_CHAR_KLASSE_1 + i));
            };
            i = (i + 1);
        };
        if (text_dir == "right"){
            actor[LBL_SCR_CHAR_GILDE].text = (
                (((((savegame[SG_HONOR] + " :")
                + texts[TXT_HALL_LIST_COLUMN_5]) + "     ")
                + savegame[SG_RANK]) + " :")
                + texts[TXT_HALL_LIST_COLUMN_1]
            );
        } else {
            actor[LBL_SCR_CHAR_GILDE].text = (
                (((((texts[TXT_HALL_LIST_COLUMN_1] + ": ")
                    + savegame[SG_RANK]) + "     ")
                    + texts[TXT_HALL_LIST_COLUMN_5]) + ": ")
                    + savegame[SG_HONOR]);
        };
        actor[LBL_SCR_CHAR_EHRE].text = "";
        _local2 = actor[INP_CHARDESC];
        with (_local2) {
            getChildAt(0).text = (
                (player_desc)=="") ? texts[TXT_ENTERDESC] : player_desc;
            getChildAt(0).type = TextFieldType.INPUT;
            if (text_dir == "right"){
                getChildAt(0).wordWrap = False;
            };
        };
        actor[SCR_CHAR_NAME].x = (
            (SCR_CHAR_CHARX + 128)
            - int((actor[LBL_SCR_CHAR_NAME].text_width / 2)));
        actor[LBL_SCR_CHAR_EHRE].x = (
            (actor[LBL_SCR_CHAR_GILDE].x
            + actor[LBL_SCR_CHAR_GILDE].text_width) + CHAR_EHRE_X);
        _local2 = actor[SCR_CHAR_EXPBAR];
        with (_local2) {
            width = int(((Number(savegame[SG_EXP])
                / Number(savegame[SG_EXP_FOR_NEXTLEVEL])) * 254));
        };
        _local2 = actor[LBL_SCR_CHAR_EXPLABEL];
        with (_local2) {
            if (text_dir == "right"){
                text = ((savegame[SG_LEVEL] + " ")
                    + texts[TXT_HALL_LIST_COLUMN_4]);
            } else {
                text = ((texts[TXT_HALL_LIST_COLUMN_4] + " ")
                    + savegame[SG_LEVEL]);
            };
            x = ((EXPERIENCE_BAR_X + 127) - int((text_width / 2)));
        };
        if (text_dir == "right"){
            enable_popup(
                CA_SCR_CHAR_EXPBAR,
                POPUP_BEGIN_LINE,
                (":" + texts[TXT_EXP]),
                (POPUP_TAB + POPUP_TAB_ADD),
                savegame[SG_EXP],
                POPUP_END_LINE,
                POPUP_BEGIN_LINE,
                (":" + texts[TXT_EXPNEXTLEVEL]),
                (POPUP_TAB + POPUP_TAB_ADD),
                savegame[SG_EXP_FOR_NEXTLEVEL],
                POPUP_END_LINE
            );
        } else {
            enable_popup(
                CA_SCR_CHAR_EXPBAR,
                POPUP_BEGIN_LINE,
                (texts[TXT_EXP] + ":"),
                (POPUP_TAB + POPUP_TAB_ADD),
                savegame[SG_EXP],
                POPUP_END_LINE,
                POPUP_BEGIN_LINE,
                (texts[TXT_EXPNEXTLEVEL] + ":"),
                (POPUP_TAB + POPUP_TAB_ADD),
                savegame[SG_EXP_FOR_NEXTLEVEL],
                POPUP_END_LINE
            );
        };
        display_inventory(None, NoPrices);
        vanityRandom = random.random();
        if (
            (((((((uint(savegame[SG_NEW_FLAGS]) & 32))
            and ((int(so.data.vanityMode) == 0))))
            or ((int(so.data.vanityMode) == 2))))
            or ((((int(so.data.vanityMode) == 3))
            and ((vanityRandom < 0.5)))))
        ){
            add(SCREEN_CHAR_GOLDEN);
        } else {
            add(SCREEN_CHAR);
        };
        LoadCharacterImage();
        add_some(SCR_CHAR_NAME, SCR_CHAR_GILDE);
        mirror_ani_timer.stop();
        i = 0;
        while (i < 13) {
            if (mirror_pieces[i]){
                add((MIRROR_PIECE + i));
                mirror_ani_timer.start();
            };
            i = (i + 1);
        };
        if (
            (((((((uint(savegame[SG_NEW_FLAGS]) & 32))
                and ((int(so.data.vanityMode) == 0))))
                or ((int(so.data.vanityMode) == 2))))
                or ((((int(so.data.vanityMode) == 3))
                and ((vanityRandom < 0.5)))))
            ){
            add_some(GOLDEN_FRAME, SCR_CHAR_NAME);
            actor[SCR_CHAR_NAME].y = (CHAR_NAME_Y + 8);
            add_filter(LBL_SCR_CHAR_NAME, Filter_HeavyShadow);
        } else {
            actor[SCR_CHAR_NAME].y = CHAR_NAME_Y;
            add_filter(LBL_SCR_CHAR_NAME, Filter_Shadow);
        };
        if (texts[(TXT_ACH_4 + 4)]){
            if (int(savegame[SG_EMAIL_VALID]) == 1){
                add_some(CHAR_INVITE);
            };
        };
        if (texts[TXT_ALBUM]){
            if (Number(savegame[SG_ALBUM]) >= 10000){
                add(CHAR_ALBUM);
                enable_popup(
                    CHAR_ALBUM,
                    POPUP_BEGIN_LINE,
                    texts[TXT_ITMNAME_13],
                    POPUP_END_LINE,
                    POPUP_BEGIN_LINE,
                    texts[TXT_COLLECTION].split(
                        "%1").join(str((savegame[SG_ALBUM] - 10000))).split(
                        "%2").join(str(contentMax)).split(
                        "%3").join(str((math.round((((
                            savegame[SG_ALBUM] - 10000)
                            / contentMax) * 10000)) / 100))).split(
                        "#").join(chr(13)),
                    POPUP_END_LINE,
                    POPUP_BEGIN_LINE,
                    texts[(TXT_COLLECTION + 7)],
                    POPUP_END_LINE
                );
                if (album_effect){
                    AnimateAch(CHAR_ALBUM, CHAR_PLAYERY);
                    album_effect = False;
                };
            };
        };
        OneUp = DoAchievements(savegame);
        if (level_up){
            level_upAniEvent = function (evt:Event){
                var evt:* = evt;
                level_upAniStep++;
                if (level_upAniStep > 125){
                    level_upTimer.stop();
                    level_upTimer.remove_event_listener(
                        TimerEvent.TIMER, level_upAniEvent);
                    var _local3 = actor[LBL_SCR_CHAR_EXPLABEL];
                    with (_local3) {
                        scaleX = 1;
                        scaleY = 1;
                        x = ((EXPERIENCE_BAR_X + 127)
                            - int((text_width / 2)));
                        y = (EXPERIENCE_BAR_Y + 2);
                    };
                    return;
                };
                if (level_upAniStep > 115){
                    if (kickIn > 0){
                        kickIn = (kickIn - 0.1);
                    };
                } else {
                    if (kickIn < 1){
                        kickIn = (kickIn + 0.1);
                    };
                };
                _local3 = actor[LBL_SCR_CHAR_EXPLABEL];
                with (_local3) {
                    scaleX = (
                        ((math.cos((((level_upAniStep / 50) * 2)
                            * math.pi)) + 1) * kickIn) + 1);
                    scaleY = (
                        ((math.sin((((level_upAniStep / 50) * 2)
                            * math.pi)) + 1) * kickIn) + 1);
                    x = ((EXPERIENCE_BAR_X + 128) - int((width / 2)));
                    y = (((EXPERIENCE_BAR_Y + 17)
                        - int((height / 2)))
                        - (((math.sin((((level_upAniStep / 50) * 2)
                            * math.pi)) + 1) * kickIn) * 20));
                };
            };
            level_upAniStep = 25;
            kickIn = 0;
            add(LBL_SCR_CHAR_EXPLABEL);
            OneUp = True;
            level_up = False;
            _local2 = level_upTimer;
            with (_local2) {
                add_event_listener(TimerEvent.TIMER, level_upAniEvent);
                start();
            };
        };
        if (OneUp){
            play(SND_JINGLE);
        };
        if (arrow_hall_mode){
            enable_popup(PREV_PLAYER, texts[TXT_EHRENHALLE]);
            enable_popup(NEXT_PLAYER, texts[TXT_EHRENHALLE]);
            indexInHall = -1;
            findIndex = 0;
            while (findIndex < last_hall_members.length) {
                if (last_hall_members[findIndex].lower() == actor[
                    INP['NAME']
                ].getChildAt(1).text.lower()
                ){
                    indexInHall = (findIndex - 1);
                    break;
                };
                findIndex = (findIndex + 1);
            };
            if (indexInHall < 0){
                indexInHall = -1;
            };
            if (indexInHall != -1){
                if (indexInHall > 0){
                    add(PREV_PLAYER);
                };
                if (indexInHall < 14){
                    add(NEXT_PLAYER);
                };
            };
        } else {
            enable_popup(PREV_PLAYER, texts[TXT_GILDEN]);
            enable_popup(NEXT_PLAYER, texts[TXT_GILDEN]);
            indexInGuild = -1;
            findIndex = 0;
            while (findIndex < lastGuildMembers.length) {
                if (lastGuildMembers[
                    findIndex
                ].lower() == actor[INP['NAME']].getChildAt(1).text.lower()
                ){
                    indexInGuild = (findIndex - 1);
                    break;
                };
                findIndex = (findIndex + 1);
            };
            if (indexInGuild < 0){
                indexInGuild = -1;
            };
            if (indexInGuild != -1){
                if (indexInGuild > 0){
                    add(PREV_PLAYER);
                };
                if (indexInGuild < (int(last_guild_data[3]) - 1)){
                    add(NEXT_PLAYER);
                };
            };
        };
    };
    if (
        (((((uint(savegame[SG_NEW_FLAGS]) & 32))
        and ((int(so.data.vanityMode) == 0))))
        or ((int(so.data.vanityMode) > 1)))
    ){
        load(SCR_CHAR_BG_GOLDEN, GOLDEN_FRAME);
    };
    load(SCR_CHAR_BG, SCR_CHAR_EXPBAR, SCR_CHAR_BG_RIGHT);
    whendo_loaded(DoShowCharacterScreen);
}

def ShowPlayerScreen(
    PlayerSG:Array, PlayerName:String, PlayerGilde:String,
    PlayerComment:String
):
    var i:* = 0;
    var bin_str:* = None;
    var Playermirror_pieces:* = None;
    var DoShowPlayerScreen:* = None;
    var PlayerSG:* = PlayerSG;
    var PlayerName:* = PlayerName;
    var PlayerGilde:* = PlayerGilde;
    var PlayerComment:* = PlayerComment;
    DoShowPlayerScreen = function (){
        var i:* = 0;
        var vanityRandom:* = NaN;
        var PvPDelayCheck:* = None;
        var findIndex:* = 0;
        PvPDelayCheck = function (evt:TimerEvent=None){
            var evt:* = evt;
            if (!on_stage(CHAR_ATTACK)){
                pvp_delay_timer.remove_event_listener(
                    TimerEvent.TIMER, PvPDelayCheck);
                pvp_delay_timer.stop();
                return;
            };
            if (WaitingFor(savegame[SG_PVP_REROLL_TIME])){
                set_title_bar(WaitingTime(savegame[SG_PVP_REROLL_TIME]));
                if (text_dir == "right"){
                    set_btn_text(
                        CHAR_ATTACK, ("(~P1) " + texts[TXT_ATTACK])
                    );
                } else {
                    set_btn_text(
                        CHAR_ATTACK, (texts[TXT_ATTACK] + " (1~P)")
                    );
                };
                show(LBL_CHAR_DELAY);
                var _local3 = actor[LBL_CHAR_DELAY];
                with (_local3) {
                    text = WaitingTime(savegame[SG_PVP_REROLL_TIME]);
                    x = (((280 + 500) + CHAR_DELAY_X) - (text_width / 2));
                };
            } else {
                set_title_bar();
                set_btn_text(CHAR_ATTACK, texts[TXT_ATTACK]);
                hide(LBL_CHAR_DELAY);
                pvp_delay_timer.remove_event_listener(
                    TimerEvent.TIMER, PvPDelayCheck
                );
                pvp_delay_timer.stop();
            };
        };
        remove_all();
        dragDropProhibit = True;
        i = 0;
        while (i < 15) {
            actor[(CHAR_SLOT_1 + i)].mouse_enabled = False;
            i = (i + 1);
        };
        i = 0;
        while (i < 10) {
            var _local2 = actor[(CHARBACKGROUND + i)];
            with (_local2) {
                x = SCR_CHAR_CHARX;
                y = SCR_CHAR_CHARY;
                scaleX = 0.86;
                scaleY = 0.86;
            };
            i = (i + 1);
        };
        i = 0;
        while (i < 5) {
            SetCnt((SCR_CHAR_GOLD1 + i), IF_GOLD);
            SetCnt((SCR_CHAR_SILBER1 + i), IF_SILBER);
            i = (i + 1);
        };
        if (text_dir == "right"){
            actor[LBL_CHAR_MOUNT_NAME].text = (
                (texts[TXT_NOMOUNT] + " ") + texts[TXT_MOUNT]
            );
        } else {
            actor[LBL_CHAR_MOUNT_NAME].text = (
                (texts[TXT_MOUNT] + " ") + texts[TXT_NOMOUNT]
            );
        };
        actor[LBL_CHAR_MOUNT_RUNTIME].text = "";
        actor[LBL_CHAR_MOUNT_DESCR].text = "";
        actor[LBL_CHAR_MOUNT_GAIN].text = "";
        i = 0;
        while (i < 8) {
            if (
                (((int(PlayerSG[SG_MOUNT]) > 0))
                and (((i + 1) == (int(PlayerSG[SG_MOUNT])
                + (((((PlayerSG[SG_RACE] >= 5))
                and (!(param_censored)))) ? 4 : 0)))))
            ){
                show((CHAR_MOUNT_1 + i));
                if (text_dir == "right"){
                    actor[LBL_CHAR_MOUNT_NAME].text = (
                        (texts[(TXT_STALL_MOUNTTITEL + i)] + " ")
                        + texts[TXT_MOUNT]);
                    actor[LBL_CHAR_MOUNT_DESCR].text = texts[
                        (TXT_STALL_MOUNTTEXT + i)];
                    actor[LBL_CHAR_MOUNT_GAIN].text = texts[
                        (TXT_MOUNT_GAIN1 + i)].split("|")[0];
                } else {
                    actor[LBL_CHAR_MOUNT_NAME].text = (
                        (texts[TXT_MOUNT] + " ")
                        + texts[(TXT_STALL_MOUNTTITEL + i)]);
                    actor[LBL_CHAR_MOUNT_DESCR].text = texts[
                        (TXT_STALL_MOUNTTEXT + i)];
                    actor[LBL_CHAR_MOUNT_GAIN].text = texts[
                        (TXT_MOUNT_GAIN1 + i)].split("|")[0];
                };
            } else {
                hide((CHAR_MOUNT_1 + i));
            };
            i = (i + 1);
        };
        if (text_dir == "right"){
            actor[LBL_SCR_CHAR_NAME].text = (
                ((PlayerGilde == "")) ? "" : ((("[" + PlayerGilde) + "] ")
                    + PlayerName));
        } else {
            actor[LBL_SCR_CHAR_NAME].text = (
                PlayerName + (((PlayerGilde == ""))
                    ? "" : ((" [" + PlayerGilde) + "]")));
        };
        trim_too_long(LBL_SCR_CHAR_NAME, 260);
        lastPlayer = PlayerName;
        if (PlayerGilde){
            SelectedGuild = PlayerGilde;
            actor[SCR_CHAR_NAME].useHandCursor = True;
        } else {
            SelectedGuild = "";
            actor[SCR_CHAR_NAME].useHandCursor = False;
        };
        i = 0;
        while (i < 3) {
            if ((int(PlayerSG[SG_CLASS]) - 1) == i){
                show((SCR_CHAR_KLASSE_1 + i));
            } else {
                hide((SCR_CHAR_KLASSE_1 + i));
            };
            i = (i + 1);
        };
        if (text_dir == "right"){
            actor[LBL_SCR_CHAR_GILDE].text = (
                (((((PlayerSG[SG_HONOR] + " :")
                + texts[TXT_HALL_LIST_COLUMN_5]) + "     ")
                + PlayerSG[SG_RANK]) + " :")
                + texts[TXT_HALL_LIST_COLUMN_1]
            );
        } else {
            actor[LBL_SCR_CHAR_GILDE].text = (
                (((((texts[TXT_HALL_LIST_COLUMN_1] + ": ")
                + PlayerSG[SG_RANK]) + "     ")
                + texts[TXT_HALL_LIST_COLUMN_5]) + ": ")
                + PlayerSG[SG_HONOR]
            );
        };
        actor[LBL_SCR_CHAR_EHRE].text = "";
        _local2 = actor[INP_CHARDESC];
        with (_local2) {
            getChildAt(0).text = (
                (PlayerComment)=="")
                    ? texts[TXT_NODESC]
                    : PlayerComment;
            getChildAt(0).type = TextFieldType.DYNAMIC;
        };
        actor[SCR_CHAR_NAME].x = (
            (SCR_CHAR_CHARX + 128)
            - int((actor[LBL_SCR_CHAR_NAME].text_width / 2)));
        actor[LBL_SCR_CHAR_EHRE].x = (
            (actor[LBL_SCR_CHAR_GILDE].x
                + actor[LBL_SCR_CHAR_GILDE].text_width) + CHAR_EHRE_X);
        _local2 = actor[SCR_CHAR_EXPBAR];
        with (_local2) {
            width = int(
                ((Number(PlayerSG[SG_EXP])
                    / Number(PlayerSG[SG_EXP_FOR_NEXTLEVEL])) * 254));
        };
        _local2 = actor[LBL_SCR_CHAR_EXPLABEL];
        with (_local2) {
            if (text_dir == "right"){
                text = (
                    (PlayerSG[SG_LEVEL] + " ")
                    + texts[TXT_HALL_LIST_COLUMN_4]);
            } else {
                text = (
                    (texts[TXT_HALL_LIST_COLUMN_4] + " ")
                    + PlayerSG[SG_LEVEL]);
            };
            x = ((EXPERIENCE_BAR_X + 127) - int((text_width / 2)));
        };
        enable_popup(CA_SCR_CHAR_EXPBAR);
        set_alpha(CHAR_SECONDPROP, 1);
        set_alpha(CHAR_PREISE, 0);
        display_inventory(PlayerSG);
        vanityRandom = random.random();
        if (
            (((((((uint(PlayerSG[SG_NEW_FLAGS]) & 32))
            and ((int(so.data.vanityMode) == 0))))
            or ((int(so.data.vanityMode) == 2))))
            or ((((int(so.data.vanityMode) == 3))
            and ((vanityRandom < 0.5)))))
        ){
            add(SCREEN_CHAR_GOLDEN);
        } else {
            add(SCREEN_CHAR);
        };
        if (((!((PlayerGilde == gilde))) and (!((gilde == ""))))){
            add(PLAYER_GUILD_INVITE);
        };
        if (texts[TXT_ALBUM]){
            if (Number(PlayerSG[SG_ALBUM]) >= 10000){
                add(CHAR_ALBUM);
                enable_popup(
                    CHAR_ALBUM,
                    POPUP_BEGIN_LINE,
                    texts[TXT_ITMNAME_13],
                    POPUP_END_LINE,
                    POPUP_BEGIN_LINE,
                    texts[TXT_COLLECTION].split(
                        "%1").join(str((PlayerSG[SG_ALBUM] - 10000))).split(
                        "%2").join(str(contentMax)).split(
                        "%3").join(str((math.round(
                            (((PlayerSG[SG_ALBUM] - 10000) / contentMax)
                                * 10000)) / 100))).split(
                        "#").join(chr(13)),
                        POPUP_END_LINE
                    );
            };
        };
        if ((((PlayerGilde == gilde)) and (!((gilde == ""))))){
            add_some(CHAR_MESSAGE, CHAR_GILDE);
        } else {
            add_some(CHAR_MESSAGE);
            if (
                (((savegame[SG_ACTION_STATUS] == 0))
                or ((((savegame[SG_ACTION_STATUS] >= 1))
                and (has_mirror))))
            ){
                if (can_rob){
                    add_some(CHAR_ATTACK, LBL_CHAR_DELAY);
                } else {
                    add_some(CHAR_ATTACK, LBL_CHAR_DELAY);
                };
            };
        };
        DoAchievements(PlayerSG);
        pvp_delay_timer.add_event_listener(TimerEvent.TIMER, PvPDelayCheck);
        pvp_delay_timer.start();
        PvPDelayCheck();
        i = 0;
        while (i < 5) {
            remove((SCR_CHAR_STEIGERN1 + i));
            i = (i + 1);
        };
        remove(LBL_CHAR_MOUNT_RUNTIME);
        LoadCharacterImage(
            CHARBACKGROUND,
            False,
            PlayerSG[SG_RACE],
            (int(PlayerSG[SG_GENDER]) == 1),
            PlayerSG[SG_CLASS],
            PlayerSG[SG_FACE_1],
            PlayerSG[SG_FACE_5],
            PlayerSG[SG_FACE_6],
            PlayerSG[SG_FACE_4],
            PlayerSG[SG_FACE_3],
            PlayerSG[SG_FACE_7],
            PlayerSG[SG_FACE_2],
            PlayerSG[SG_FACE_8],
            PlayerSG[SG_FACE_9]
        );
        add_some(SCR_CHAR_NAME, SCR_CHAR_GILDE);
        if (
            (((((((uint(PlayerSG[SG_NEW_FLAGS]) & 32))
            and ((int(so.data.vanityMode) == 0))))
            or ((int(so.data.vanityMode) == 2))))
            or ((((int(so.data.vanityMode) == 3))
            and ((vanityRandom < 0.5)))))
        ){
            add_some(GOLDEN_FRAME, SCR_CHAR_NAME);
            actor[SCR_CHAR_NAME].y = (CHAR_NAME_Y + 8);
            add_filter(LBL_SCR_CHAR_NAME, Filter_HeavyShadow);
        } else {
            actor[SCR_CHAR_NAME].y = CHAR_NAME_Y;
            add_filter(LBL_SCR_CHAR_NAME, Filter_Shadow);
        };
        if (arrow_hall_mode){
            enable_popup(PREV_PLAYER, texts[TXT_EHRENHALLE]);
            enable_popup(NEXT_PLAYER, texts[TXT_EHRENHALLE]);
            indexInHall = -1;
            findIndex = 0;
            while (findIndex < last_hall_members.length) {
                if (
                    last_hall_members[
                        findIndex
                    ].lower() == PlayerName.lower()
                ){
                    indexInHall = (findIndex - 1);
                    break;
                };
                findIndex = (findIndex + 1);
            };
            if (indexInHall < 0){
                indexInHall = -1;
            };
            if (indexInHall != -1){
                if (indexInHall > 0){
                    add(PREV_PLAYER);
                };
                if (indexInHall < 14){
                    add(NEXT_PLAYER);
                };
            };
        } else {
            enable_popup(PREV_PLAYER, texts[TXT_GILDEN]);
            enable_popup(NEXT_PLAYER, texts[TXT_GILDEN]);
            indexInGuild = -1;
            findIndex = 0;
            while (findIndex < lastGuildMembers.length) {
                if (
                    lastGuildMembers[findIndex].lower() == PlayerName.lower()
                ){
                    indexInGuild = (findIndex - 1);
                    break;
                };
                findIndex = (findIndex + 1);
            };
            if (indexInGuild < 0){
                indexInGuild = -1;
            };
            if (indexInGuild != -1){
                if (indexInGuild > 0){
                    add(PREV_PLAYER);
                };
                if (indexInGuild < (int(last_guild_data[3]) - 1)){
                    add(NEXT_PLAYER);
                };
            };
        };
    };
    playerTowerLevel = int((PlayerSG[SG_MOUNT] / 65536));
    PlayerSG[SG_MOUNT] = (PlayerSG[SG_MOUNT] - (playerTowerLevel * 65536));
    bin_str = Number(PlayerSG[SG_GENDER]).tostr(2);
    while (bin_str.length < 32) {
        bin_str = ("0" + bin_str);
    };
    Playermirror_pieces = list();
    i = 0;
    while (i < 13) {
        Playermirror_pieces[i] = (bin_str[(i + 1): 1] == "1");
        i = (i + 1);
    };
    var playerHasMirror:* = (bin_str[23: 1] == "1");
    if (bin_str[31:] == "1"){
        PlayerSG[SG_GENDER] = 1;
    } else {
        PlayerSG[SG_GENDER] = 2;
    };
    i = 0;
    while (i < SG_BACKPACK_SIZE) {
        expand_item_structure(
            PlayerSG,
            (SG_BACKPACK_OFFS + (i * SG['ITM']['SIZE']))
        );
        i = (i + 1);
    };
    i = 0;
    while (i < SG_INVENTORY_SIZE) {
        expand_item_structure(
            PlayerSG,
            (SG_INVENTORY_OFFS + (i * SG['ITM']['SIZE']))
        );
        i = (i + 1);
    };
    i = 0;
    while (i < 6) {
        expand_item_structure(
            PlayerSG,
            (SG_SHAKES_ITEM1 + (i * SG['ITM']['SIZE']))
        );
        expand_item_structure(
            PlayerSG,
            (SG_FIDGET_ITEM1 + (i * SG['ITM']['SIZE']))
        );
        i = (i + 1);
    };
    i = 0;
    while (i < 3) {
        expand_item_structure(
            PlayerSG,
            (SG['QUEST']['OFFER']['REWARD_ITM1'] + (i * SG['ITM']['SIZE']))
        );
        i = (i + 1);
    };
    if (
        (((((uint(PlayerSG[SG_NEW_FLAGS]) & 32))
        and ((int(so.data.vanityMode) == 0))))
        or ((int(so.data.vanityMode) > 1)))
    ){
        load(SCR_CHAR_BG_GOLDEN, GOLDEN_FRAME);
    };
    load(SCR_CHAR_BG, SCR_CHAR_EXPBAR, SCR_CHAR_BG_RIGHT);
    whendo_loaded(DoShowPlayerScreen);
}

def show_screen_gilden(
    guildData:Array, guildDescr:String, guildMembers:Array,
    ThisGilde:String, is_mine=True, GildenRang=0,
    GildenEhre=0, AttackCost=0
){
    var DoShowScreenGilden:* = None;
    var guildData:* = guildData;
    var guildDescr:* = guildDescr;
    var guildMembers:* = guildMembers;
    var ThisGilde:* = ThisGilde;
    var is_mine:Boolean = is_mine;
    var GildenRang = GildenRang;
    var GildenEhre = GildenEhre;
    var AttackCost = AttackCost;
    DoShowScreenGilden = function (evt:Event=None){
        var i:* = 0;
        var myRank:* = 0;
        var myAttackStatus:* = 0;
        var scrollLevel:* = 0;
        var selectLevel:* = 0;
        var GoldToDonate:* = 0;
        var MushToDonate:* = 0;
        var DonateTimeout:* = None;
        var thisInstanceID:* = 0;
        var removeListenersTimer:* = None;
        var GoldKosten:* = 0;
        var PilzKosten:* = 0;
        var Nutzen:* = None;
        var Ausbaustufe:* = 0;
        var AusbaustufeEx:* = 0;
        var GoldKostenAvg:* = 0;
        var PilzKostenAvg:* = 0;
        var cheapest:* = 0;
        var countCompleted:* = 0;
        var LeftBoxWidth:* = 0;
        var RightBoxWidth:* = 0;
        var crestView:* = False;
        var startWithCrest:* = False;
        var GuildBtnRepeatTimer:* = None;
        var raidCost:* = NaN;
        var isRaid:* = False;
        var GuildBtnHandler:* = None;
        var DoDonate:* = None;
        var RequestPlayerScreen:* = None;
        var BuildGuildList:* = None;
        var evt:* = evt;
        var removeListeners:* = function (evt:TimerEvent){
            var evt:* = evt;
            if (
                ((!((guildInstanceID == thisInstanceID)))
                or (!(on_stage(GILDE_RAHMEN))))
            ){
                removeListenersTimer.stop();
                var _local3 = removeListenersTimer;
                with (_local3) {
                    remove_event_listener(TimerEvent.TIMER, removeListeners);
                };
                actor[GILDE_SCROLL_UP].remove_event_listener(
                    MouseEvent.CLICK, GuildBtnHandler);
                actor[GILDE_SCROLL_DOWN].remove_event_listener(
                    MouseEvent.CLICK, GuildBtnHandler);
                actor[GILDE_DIALOG_CANCEL].remove_event_listener(
                    MouseEvent.CLICK, GuildBtnHandler);
                actor[GILDE_DIALOG_OK_KICK].remove_event_listener(
                    MouseEvent.CLICK, GuildBtnHandler);
                actor[GILDE_DIALOG_OK_MASTER].remove_event_listener(
                    MouseEvent.CLICK, GuildBtnHandler);
                actor[GILDE_DIALOG_OK_INVITE].remove_event_listener(
                    MouseEvent.CLICK, GuildBtnHandler);
                actor[GILDE_DIALOG_OK_REVOLT].remove_event_listener(
                    MouseEvent.CLICK, GuildBtnHandler);
                actor[GILDE_DIALOG_OK_RAID].remove_event_listener(
                    MouseEvent.CLICK, GuildBtnHandler);
                actor[GILDE_INVITE].remove_event_listener(
                    MouseEvent.CLICK, GuildBtnHandler);
                actor[GILDE_PROFILE].remove_event_listener(
                    MouseEvent.CLICK, GuildBtnHandler);
                actor[GILDE_KICK].remove_event_listener(
                    MouseEvent.CLICK, GuildBtnHandler);
                actor[GILDE_PROMOTE].remove_event_listener(
                    MouseEvent.CLICK, GuildBtnHandler);
                actor[GILDE_DEMOTE].remove_event_listener(
                    MouseEvent.CLICK, GuildBtnHandler);
                actor[GILDE_MASTER].remove_event_listener(
                    MouseEvent.CLICK, GuildBtnHandler);
                actor[GILDE_REVOLT].remove_event_listener(
                    MouseEvent.CLICK, GuildBtnHandler);
                actor[GILDE_GEBAEUDE_IMPROVE].remove_event_listener(
                    MouseEvent.CLICK, GuildBtnHandler);
                actor[(GILDE_GEBAEUDE_IMPROVE + 1)].remove_event_listener(
                    MouseEvent.CLICK, GuildBtnHandler);
                actor[(GILDE_GEBAEUDE_IMPROVE + 2)].remove_event_listener(
                    MouseEvent.CLICK, GuildBtnHandler);
                actor[GILDE_KATAPULT].remove_event_listener(
                    MouseEvent.CLICK, GuildBtnHandler);
                actor[(GILDE_KATAPULT + 1)].remove_event_listener(
                    MouseEvent.CLICK, GuildBtnHandler);
                actor[(GILDE_KATAPULT + 2)].remove_event_listener(
                    MouseEvent.CLICK, GuildBtnHandler);
                actor[GILDE_GOLD].remove_event_listener(
                    MouseEvent.MOUSE_DOWN, GuildBtnHandler);
                actor[GILDE_MUSH].remove_event_listener(
                    MouseEvent.MOUSE_DOWN, GuildBtnHandler);
                actor[GILDE_GOLD].remove_event_listener(
                    MouseEvent.MOUSE_OUT, DoDonate);
                actor[GILDE_MUSH].remove_event_listener(
                    MouseEvent.MOUSE_OUT, DoDonate);
                _local3 = actor[GILDE_GOLD];
                with (_local3) {
                    remove_event_listener(
                        MouseEvent.MOUSE_DOWN, GuildBtnDownHandler);
                    remove_event_listener(
                        MouseEvent.MOUSE_UP, GuildBtnUpHandler);
                    remove_event_listener(
                        MouseEvent.MOUSE_OUT, GuildBtnUpHandler);
                };
                _local3 = actor[GILDE_MUSH];
                with (_local3) {
                    remove_event_listener(
                        MouseEvent.MOUSE_DOWN, GuildBtnDownHandler);
                    remove_event_listener(
                        MouseEvent.MOUSE_UP, GuildBtnUpHandler);
                    remove_event_listener(
                        MouseEvent.MOUSE_OUT, GuildBtnUpHandler);
                };
                _local3 = actor[INP_GILDE_TEXT];
                with (_local3) {
                    remove_event_listener(FocusEvent.FOCUS_IN, EnterGuildDesc);
                    remove_event_listener(FocusEvent.FOCUS_OUT,
                                          LeaveGuildDesc);
                };
            };
        };
        var DonateVal:* = function (avg, localMax):String{
            var dval;
            dval = 1;
            if (avg >= 10000){
                dval = 10;
            } else {
                if (avg >= 5000){
                    dval = 10;
                } else {
                    if (avg >= 1000){
                        dval = 10;
                    } else {
                        if (avg >= 500){
                            dval = 5;
                        } else {
                            if (avg >= 100){
                                dval = 5;
                            } else {
                                if (avg >= 50){
                                    dval = 2;
                                } else {
                                    if (avg >= 10){
                                        dval = 1;
                                    } else {
                                        dval = 1;

            if (((!((cheapest == -1))) and ((dval > cheapest)))){
                dval = cheapest;
            };
            if (dval > localMax){
                dval = localMax;
            };
            if (dval < 1){
                dval = 1;
            };
            return (str(dval));
        };
        var GuildBtnDownHandler:* = function (evt:Event){
            var ClickCount:* = 0;
            var evt:* = evt;
            var DoPushGuildBtn:* = function (timerevt:Event){
                var timerevt:* = timerevt;
                if (destroy_guild_btn_timer){
                    destroy_guild_btn_timer = False;
                    var _local3 = GuildBtnRepeatTimer;
                    with (_local3) {
                        stop();
                        delay = 1000;
                        remove_event_listener(
                            TimerEvent.TIMER, DoPushGuildBtn);
                    };
                } else {
                    ClickCount++;
                    Switch (ClickCount){
                        if case(1:
                            GuildBtnRepeatTimer.delay = 500;
                            break;
                        if case(3:
                            GuildBtnRepeatTimer.delay = 250;
                            break;
                        if case(10:
                            GuildBtnRepeatTimer.delay = 125;
                            break;
                        if case(20:
                            GuildBtnRepeatTimer.delay = 62;
                            break;
                    };
                    if (GuildBtnHandler(evt, True)){
                        play(SND['CLICK']);
                    } else {
                        if (GuildBtnRepeatTimer.running){
                            destroy_guild_btn_timer = True;

            ClickCount = 0;
            if (GuildBtnRepeatTimer.running){
                return;
            };
            destroy_guild_btn_timer = False;
            var _local3 = GuildBtnRepeatTimer;
            with (_local3) {
                delay = 1000;
                add_event_listener(TimerEvent.TIMER, DoPushGuildBtn);
                start();
            };
        };
        var GuildBtnUpHandler:* = function (evt:Event){
            if (GuildBtnRepeatTimer.running){
                destroy_guild_btn_timer = True;
            };
        };
        var EnterGuildDesc:* = function (evt:FocusEvent){
            var evt:* = evt;
            var _local3 = actor[INP_GILDE_TEXT].getChildAt(0);
            with (_local3) {
                if (type == TextFieldType.INPUT){
                    if (text == texts[TXT_ENTERGUILDDESC]){
                        text = "";

        var LeaveGuildDesc:* = function (evt:FocusEvent){
            var evt:* = evt;
            var _local3 = actor[INP_GILDE_TEXT].getChildAt(0);
            with (_local3) {
                if (type == TextFieldType.INPUT){
                    if (text != resolve_breaks(guildDescr)){
                        guildDescr = SemiStrip(text);
                        send_action(
                            ACT_GUILD_SET_DESC,
                            actor[INP['NAME']].getChildAt(1).text,
                            gilde,
                            ((old_crest_str + "§") + RemoveIllegalChars(
                                SemiStrip(text))),
                            MD5(actor[INP['LOGIN_PASSWORD']].getChildAt(1).text)
                        );
                    };
                    if (text == ""){
                        text = texts[TXT_ENTERGUILDDESC];

        var PlaceButtonSet:* = function (){
            var selRank;
            Switch (myRank){
                if case(1:
                    add(GILDE_SET_MASTER);
                    if (guildData[0] == savegame[SG_GUILD_INDEX]){
                        show(PLAYER_GUILD_INVITE);
                    };
                    break;
                if case(2:
                    add(GILDE_SET_OFFICER);
                    if (guildData[0] == savegame[SG_GUILD_INDEX]){
                        show(PLAYER_GUILD_INVITE);
                    };
                    break;
                if case(3:
                if case(0:
                    if (guildData[0] == savegame[SG_GUILD_INDEX]){
                        hide(PLAYER_GUILD_INVITE);
                    };
                    add(GILDE_SET_MEMBER);
                    break;
            };
            selRank = guildData[
                ((GUILD_MEMBERRANK + selectLevel) + scrollLevel)];
            if (
                (((int(guildData[((GUILD_MEMBERID + selectLevel)
                    + scrollLevel)]) == int(savegame[SG['PLAYER_ID']])))
                and (is_mine))
            ){
                add(GILDE_KICK);
                remove(GILDE_KICK_GRAY);
                remove(GILDE_PROMOTE);
                remove(GILDE_MASTER);
                add_some(GILDE_PROMOTE_GRAY, GILDE_MASTER_GRAY);
            } else {
                if ((((selRank <= 2)) and ((myRank == 2)))){
                    remove(GILDE_KICK);
                    add(GILDE_KICK_GRAY);
                };
            };
            if (selRank == 4){
                remove(GILDE_PROMOTE);
                remove(GILDE_MASTER);
                add_some(GILDE_PROMOTE_GRAY, GILDE_MASTER_GRAY);
            };
            if (int(guildData[3]) >= int(guildData[5])){
                remove(GILDE_INVITE);
                if (guildData[0] == savegame[SG_GUILD_INDEX]){
                    hide(PLAYER_GUILD_INVITE);
                };
                add_some(GILDE_INVITE_GRAY);
            };
            if ((((selRank == 2)) and ((myRank == 1)))){
                remove(GILDE_PROMOTE);
                add(GILDE_DEMOTE);
            };
            if (
                (((((((selRank == 1))
                and ((int(guildData[12]) < 0))))
                and ((myRank <= 3))))
                and ((myRank > 0)))
            ){
                remove(GILDE_MASTER_GRAY);
                add(GILDE_REVOLT);
            };
        };
        GuildBtnHandler = function (
            evt:Event, typematic=False
        ):
            var actor_id:* = 0;
            var selRank:* = 0;
            var evt:* = evt;
            var typematic:Boolean = typematic;
            actor_id = get_actor_id(evt.target);
            selRank = guildData[
                ((GUILD_MEMBERRANK + selectLevel) + scrollLevel)
            ];
            Switch (actor_id){
                if case(GILDE_SCROLL_UP:
                    scrollLevel = (scrollLevel - 15);
                    if (scrollLevel < 0){
                        scrollLevel = 0;
                    };
                    BuildGuildList();
                    break;
                if case(GILDE_SCROLL_DOWN:
                    scrollLevel = (scrollLevel + 15);
                    if (scrollLevel > (int(guildData[3]) - 15)){
                        scrollLevel = (int(guildData[3]) - 15);
                    };
                    if (scrollLevel < 0){
                        scrollLevel = 0;
                    };
                    BuildGuildList();
                    break;
                if case(GILDE_INVITE:
                    add(GILDE_DIALOG_INVITE);
                    actor[INP_GILDE_DIALOG_INVITE].getChildAt(1).text = "";
                    var _local4 = actor[LBL_WINDOW_TITLE];
                    with (_local4) {
                        text = texts[TXT_GILDE_INVITE_TITLE];
                        x = (
                            (IF_WIN_X + IF_WIN_WELCOME_X)
                            - int((text_width / 2)));
                    };
                    break;
                if case(GILDE_PROFILE:
                    request_player_screen();
                    break;
                if case(GILDE_REVOLT:
                    add(GILDE_DIALOG_REVOLT);
                    _local4 = actor[LBL_WINDOW_TITLE];
                    with (_local4) {
                        text = texts[TXT_REVOLT_WARNING_TITLE];
                        x = (
                            (IF_WIN_X + IF_WIN_WELCOME_X)
                            - int((text_width / 2)));
                    };
                    break;
                if case(GILDE_KICK:
                    if (selRank == 4){
                        KickMember();
                    } else {
                        add(GILDE_DIALOG_KICK);
                        if (int(guildData[
                            ((GUILD_MEMBERID + selectLevel) + scrollLevel)
                            ]) == int(savegame[SG['PLAYER_ID']])
                        ){
                            remove(LBL_GILDE_DIALOG_TEXT_KICK);
                            add(LBL_GILDE_DIALOG_TEXT_QUIT);
                            _local4 = actor[LBL_WINDOW_TITLE];
                            with (_local4) {
                                text = texts[TXT_GILDE_QUIT_TITLE];
                                x = (
                                    (IF_WIN_X + IF_WIN_WELCOME_X)
                                    - int((text_width / 2)));
                            };
                        } else {
                            _local4 = actor[LBL_WINDOW_TITLE];
                            with (_local4) {
                                text = texts[TXT_GILDE_KICK_TITLE];
                                x = (
                                    (IF_WIN_X + IF_WIN_WELCOME_X)
                                    - int((text_width / 2)));
                            };
                        };
                    };
                    break;
                if case(GILDE_PROMOTE:
                if case(GILDE_DEMOTE:
                    ToggleOfficer();
                    break;
                if case(GILDE_MASTER:
                    add(GILDE_DIALOG_MASTER);
                    _local4 = actor[LBL_WINDOW_TITLE];
                    with (_local4) {
                        text = texts[TXT_GILDE_MASTER_TITLE];
                        x = (
                            (IF_WIN_X + IF_WIN_WELCOME_X)
                            - int((text_width / 2)));
                    };
                    break;
                if case(GILDE_DIALOG_OK_KICK:
                    KickMember();
                    break;
                if case(GILDE_DIALOG_OK_MASTER:
                    MakeMaster();
                    break;
                if case(GILDE_DIALOG_OK_INVITE:
                    InvitePlayer();
                    break;
                if case(GILDE_DIALOG_OK_REVOLT:
                    Revolt();
                    break;
                if case(GILDE_DIALOG_OK_RAID:
                    send_action(ACT_GUILD_COMMENCE_ATTACK, -1);
                    break;
                if case(GILDE_DIALOG_CANCEL:
                    remove(GILDE_DIALOG_INVITE);
                    remove(GILDE_DIALOG_KICK);
                    remove(GILDE_DIALOG_REVOLT);
                    remove(GILDE_DIALOG_MASTER);
                    remove(LBL_GILDE_DIALOG_TEXT_QUIT);
                    remove(GILDE_DIALOG_RAID);
                    break;
                if case(GILDE_KATAPULT:
                if case((GILDE_KATAPULT + 1):
                if case((GILDE_KATAPULT + 2):
                    send_action(
                        ACT_GUILD_IMPROVE,
                        actor[INP['NAME']].getChildAt(1).text,
                        gilde,
                        MD5(actor[INP['LOGIN_PASSWORD']].getChildAt(1).text),
                        0
                    );
                    break;
                if case(GILDE_GEBAEUDE_IMPROVE:
                if case((GILDE_GEBAEUDE_IMPROVE + 1):
                if case((GILDE_GEBAEUDE_IMPROVE + 2):
                    send_action(
                        ACT_GUILD_IMPROVE,
                        actor[INP['NAME']].getChildAt(1).text,
                        gilde,
                        MD5(actor[INP['LOGIN_PASSWORD']].getChildAt(1).text),
                        ((actor_id - GILDE_GEBAEUDE_IMPROVE) + 1)
                    );
                    break;
                if case(GILDE_GOLD:
                    if (int(savegame[SG_EMAIL_VALID]) == 1){
                        if ((((int(
                            actor[LBL_IF_GOLD].text
                            ) >= int(actor[LBL_GILDE_GOLD2].text)))
                            and (((int(actor[LBL_GILDE_GOLD].text)
                                + int(actor[LBL_GILDE_GOLD2].text)
                                ) <= 10000000)))
                        ){
                            GoldToDonate = (
                                GoldToDonate
                                + int(actor[LBL_GILDE_GOLD2].text));
                            actor[LBL_IF_GOLD].text = str(
                                (int(actor[LBL_IF_GOLD].text)
                                    - int(actor[LBL_GILDE_GOLD2].text)));
                            actor[LBL_GILDE_GOLD].text = str(
                                (int(actor[LBL_GILDE_GOLD].text)
                                    + int(actor[LBL_GILDE_GOLD2].text)));
                            DonateTimeout.stop();
                            DonateTimeout.start();
                        } else {
                            DoDonate();
                            if (int(
                                actor[LBL_IF_GOLD].text) >= int(
                                actor[LBL_GILDE_GOLD2].text)
                            ){
                                error_message(
                                    texts[TXT_ERROR_GUILD_CASH_FULL]);
                            } else {
                                if (!typematic){
                                    error_message(
                                        texts[TXT_ERROR_GUILD_TOO_EXPENSIVE]);
                                };
                            };
                            return (False);
                        };
                    } else {
                        error_message(
                            texts[TXT_ERROR_GUILD_EMAIL_VALIDATE]);
                        return (False);
                    };
                    break;
                if case(GILDE_MUSH:
                    if (int(savegame[SG_EMAIL_VALID]) == 1){
                        if (int(savegame[SG_FIRST_PAYMENT]) != 0){
                            if (int(
                                actor[LBL_IF_PILZE].text
                                ) >= int(actor[LBL_GILDE_MUSH2].text)
                            ){
                                MushToDonate = (
                                    MushToDonate
                                    + int(actor[LBL_GILDE_MUSH2].text));
                                actor[LBL_IF_PILZE].text = str(
                                    (int(actor[LBL_IF_PILZE].text)
                                        - int(actor[LBL_GILDE_MUSH2].text)));
                                actor[LBL_GILDE_MUSH].text = str(
                                    (int(actor[LBL_GILDE_MUSH].text)
                                        + int(actor[LBL_GILDE_MUSH2].text)));
                                enable_popup(LBL_IF_PILZE);
                                DonateTimeout.stop();
                                DonateTimeout.start();
                            } else {
                                DoDonate();
                                if (!typematic){
                                    error_message(
                                        texts[TXT_ERROR_GUILD_TOO_EXPENSIVE]);
                                };
                                return (False);
                            };
                        } else {
                            error_message(
                                texts[TXT_ERROR_GUILD_MUSH_FREE]);
                            return (False);
                        };
                    } else {
                        error_message(
                            texts[TXT_ERROR_GUILD_EMAIL_VALIDATE]);
                        return (False);
                    };
                    break;
            };
            return (True);
        };
        DoDonate = function (evt:Event=None){
            DonateTimeout.stop();
            if (GoldToDonate > 0){
                send_action(ACT_GUILD_DONATE, 1, str((GoldToDonate * 100)));
            } else {
                if (MushToDonate > 0){
                    send_action(ACT_GUILD_DONATE, 2, str(MushToDonate));
                };
            };
            GoldToDonate = 0;
            MushToDonate = 0;
        };
        RequestPlayerScreen = function (){
            var playerName:String;
            var selRank;
            playerName = guildMembers[((selectLevel + scrollLevel) + 1)];
            if (playerName == ""){
                return;
            };
            sel_name = playerName;
            selRank = guildData[
                ((GUILD_MEMBERRANK + selectLevel) + scrollLevel)
            ];
            sel_guild = (((selRank == 4)) ? "" : gilde);
            send_action(ACT['REQUEST']['CHAR'], playerName);
        };
        var InvitePlayer:* = function (){
            var sel_name:String;
            sel_name = guildMembers[((selectLevel + scrollLevel) + 1)];
            if (sel_name == ""){
                return;
            };
            send_action(
                ACT_GUILD_INVITE,
                actor[INP['NAME']].getChildAt(1).text,
                gilde,
                actor[INP_GILDE_DIALOG_INVITE].getChildAt(1).text,
                MD5(actor[INP['LOGIN_PASSWORD']].getChildAt(1).text),
                ""
            );
        };
        var MakeMaster:* = function (){
            var sel_name:String;
            sel_name = guildMembers[((selectLevel + scrollLevel) + 1)];
            if (sel_name == ""){
                return;
            };
            send_action(
                ACT_GUILD_SET_MASTER,
                actor[INP['NAME']].getChildAt(1).text,
                gilde,
                sel_name,
                MD5(actor[INP['LOGIN_PASSWORD']].getChildAt(1).text)
            );
        };
        var KickMember:* = function (){
            var sel_name:String;
            sel_name = guildMembers[((selectLevel + scrollLevel) + 1)];
            if (sel_name == ""){
                return;
            };
            send_action(
                ACT_GUILD_EXPEL,
                actor[INP['NAME']].getChildAt(1).text,
                gilde,
                sel_name,
                MD5(actor[INP['LOGIN_PASSWORD']].getChildAt(1).text)
            );
        };
        var ToggleOfficer:* = function (){
            var sel_name:String;
            var selRank;
            sel_name = guildMembers[((selectLevel + scrollLevel) + 1)];
            selRank = guildData[
                ((GUILD_MEMBERRANK + selectLevel) + scrollLevel)
            ];
            if (sel_name == ""){
                return;
            };
            if (selRank == 2){
                send_action(
                    ACT_GUILD_SET_OFFICER,
                    actor[INP['NAME']].getChildAt(1).text,
                    gilde,
                    sel_name,
                    MD5(actor[INP['LOGIN_PASSWORD']].getChildAt(1).text),
                    0
                );
            } else {
                if (selRank == 3){
                    send_action(
                        ACT_GUILD_SET_OFFICER,
                        actor[INP['NAME']].getChildAt(1).text,
                        gilde,
                        sel_name,
                        MD5(actor[INP['LOGIN_PASSWORD']].getChildAt(1).text),
                        1
                    );
                };
            };
        };
        var Revolt:* = function (){
            send_action(ACT_REVOLT);
        };
        BuildGuildList = function (evt:Event=None){
            var i:* = 0;
            var j:* = 0;
            var tmpBalken:* = None;
            var isOnline:* = False;
            var attackError:* = False;
            var lvl:* = 0;
            var attackStatus:* = 0;
            var avgCount:* = None;
            var evt:* = evt;
            var AddGuildImage:* = function (rank, line){
                var tmp_obj:* = None;
                var rank:* = rank;
                var line:* = line;
                if (rank == 0){
                    rank = 4;
                };
                tmp_obj = new Bitmap(
                    actor[
                        ((GILDE_RANK + (((rank < 4)) ? rank : 3)) - 1)
                    ].content.bitmapData.clone()
                );
                var _local4 = tmp_obj;
                with (_local4) {
                    allow_smoothing = True;
                    force_smoothing = True;
                    smoothing = True;
                    mouse_enabled = True;
                    if (text_dir == "right"){
                        x = 180;
                    } else {
                        x = 2;
                    };
                    y = ((line * GILDE_LIST_Y) + 4);
                    alpha = (((rank == 4)) ? 0.5 : 1);
                };
                actor[GILDE_LIST].addChild(tmp_obj);
            };
            var BuildGuildPopup:* = function (evt:MouseEvent){
                var hoverLevel;
                var lvl;
                var attackStatus;
                var attackError:Boolean;
                var attackHint:String;
                hoverLevel = int(
                    ((actor[GILDE_LIST].getChildIndex(evt.target) - 1) / 2));
                lvl = int(guildData[
                    ((GUILD_MEMBERLEVEL + hoverLevel) + scrollLevel)
                ]);
                attackStatus = 0;
                attackError = False;
                attackHint = "";
                while (lvl > 1000) {
                    lvl = (lvl - 1000);
                    attackStatus++;
                };
                if (guildData[0] == savegame[SG_GUILD_INDEX]){
                    if (
                        (((int(guildData[GUILD_ATTACK_TARGET]) > 0))
                        and (!((attackStatus & 1))))
                    ){
                        attackError = True;
                    };
                    if (
                        (((int(guildData[GUILD_DEFENCE_TARGET]) > 0))
                        and (!((attackStatus & 2))))
                    ){
                        attackError = True;
                    };
                } else {
                    if (
                        (((int(guildData[GUILD_ATTACK_TARGET]) == int(
                            savegame[SG_GUILD_INDEX])))
                        and ((attackStatus & 1)))
                    ){
                        attackError = True;
                    };
                    if (
                        (((int(guildData[GUILD_DEFENCE_TARGET]) == int(
                            savegame[SG_GUILD_INDEX])))
                        and ((attackStatus & 2)))
                    ){
                        attackError = True;
                    };
                };
                if (((showActivityTime) and (is_mine))){
                    if (Number(guildData[
                        ((GUILD_MEMBERONLINE + hoverLevel) + scrollLevel)
                        ]) > 0
                    ){
                        enable_popup(
                            GILDE_LIST,
                            time_str(guildData[
                                ((GUILD_MEMBERONLINE + hoverLevel)
                                    + scrollLevel)]));
                    } else {
                        enable_popup(GILDE_LIST, ":-(");
                    };
                    return;
                };
                if (attackError){
                    if (guildData[0] != savegame[SG_GUILD_INDEX]){
                        if (
                            (((int(guildData[GUILD_ATTACK_TARGET]) == int(
                                savegame[SG_GUILD_INDEX])))
                            and ((attackStatus & 1)))
                        ){
                            attackHint = (
                                attackHint + (chr(13) + texts[
                                    (TXT_ATTACK_STATUS + 3)]));
                        };
                        if (
                            (((int(guildData[GUILD_DEFENCE_TARGET]) == int(
                                savegame[SG_GUILD_INDEX])))
                            and ((attackStatus & 2)))
                        ){
                            attackHint = (
                                attackHint + (chr(13) + texts[
                                    (TXT_ATTACK_STATUS + 4)]));
                        };
                        if (attackHint.length > 0){
                            attackHint = attackHint[1:]
                            if (text_dir == "right"){
                                enable_popup(
                                    GILDE_LIST,
                                    POPUP_BEGIN_LINE,
                                    ((("(" + texts[((TXT_RANKNAME
                                        + int(guildData[
                                            ((GUILD_MEMBERRANK + hoverLevel)
                                            + scrollLevel)])) - 1)]) + ") ")
                                        + guildMembers[((hoverLevel
                                            + scrollLevel) + 1)]),
                                    POPUP_END_LINE,
                                    POPUP_BEGIN_LINE,
                                    ((str(lvl) + " ") +
                                        texts[TXT_HALL_LIST_COLUMN_4]),
                                    POPUP_END_LINE,
                                    POPUP_BEGIN_LINE,
                                FontFormat_GuildListTextAttackErrorOnlinePopup,
                                    attackHint,
                                    POPUP_END_LINE
                                );
                            } else {
                                enable_popup(
                                    GILDE_LIST,
                                    POPUP_BEGIN_LINE,
                                    (((guildMembers[((hoverLevel
                                        + scrollLevel) + 1)] + " (")
                                        + texts[((TXT_RANKNAME
                                            + int(guildData[
                                                ((GUILD_MEMBERRANK
                                                + hoverLevel)
                                                + scrollLevel)])) - 1)
                                        ]) + ")"),
                                    POPUP_END_LINE,
                                    POPUP_BEGIN_LINE,
                                    ((texts[TXT_HALL_LIST_COLUMN_4] + " ")
                                        + str(lvl)),
                                    POPUP_END_LINE,
                                    POPUP_BEGIN_LINE,
                            FontFormat_GuildListTextAttackErrorOnlinePopup,
                                    attackHint,
                                    POPUP_END_LINE
                                );
                            };
                        } else {
                            if (text_dir == "right"){
                                enable_popup(
                                    GILDE_LIST,
                                    POPUP_BEGIN_LINE,
                                    ((("(" + texts[((TXT_RANKNAME
                                        + int(guildData[((GUILD_MEMBERRANK
                                            + hoverLevel) + scrollLevel)]))
                                            - 1)]) + ") ") + guildMembers[
                                        ((hoverLevel + scrollLevel) + 1)]),
                                    POPUP_END_LINE,
                                    POPUP_BEGIN_LINE,
                                    ((str(lvl) + " ") + texts[
                                        TXT_HALL_LIST_COLUMN_4]),
                                    POPUP_END_LINE
                                );
                            } else {
                                enable_popup(
                                    GILDE_LIST,
                                    POPUP_BEGIN_LINE,
                                    (((guildMembers[((hoverLevel
                                        + scrollLevel) + 1)] + " (")
                                        + texts[((TXT_RANKNAME
                                        + int(guildData[((GUILD_MEMBERRANK
                                        + hoverLevel) + scrollLevel)]))
                                        - 1)]) + ")"),
                                    POPUP_END_LINE,
                                    POPUP_BEGIN_LINE,
                                    ((texts[TXT_HALL_LIST_COLUMN_4] + " ")
                                        + str(lvl)),
                                    POPUP_END_LINE
                                );
                            };
                        };
                    } else {
                        if (text_dir == "right"){
                            enable_popup(
                                GILDE_LIST,
                                POPUP_BEGIN_LINE,
                                ((("(" + texts[((TXT_RANKNAME
                                    + int(guildData[((GUILD_MEMBERRANK
                                    + hoverLevel) + scrollLevel)])) - 1)])
                                    + ") ") + guildMembers[((hoverLevel
                                    + scrollLevel) + 1)]),
                                POPUP_END_LINE,
                                POPUP_BEGIN_LINE,
                                ((str(lvl) + " ")
                                    + texts[TXT_HALL_LIST_COLUMN_4]),
                                POPUP_END_LINE,
                                POPUP_BEGIN_LINE,
                                texts[TXT_GOLD_SPENT],
                                170,
                                str(int((guildData[((GUILD_MEMBERGOLDSPENT
                                    + hoverLevel) + scrollLevel)] / 100))),
                                POPUP_END_LINE,
                                POPUP_BEGIN_LINE,
                                texts[TXT_MUSH_SPENT],
                                170,
                                str(guildData[((GUILD_MEMBERMUSHSPENT
                                    + hoverLevel) + scrollLevel)]),
                                POPUP_END_LINE,
                                POPUP_BEGIN_LINE,
                    FontFormat_GuildListTextAttackErrorOnlinePopup,
                                texts[(TXT_ATTACK_STATUS + attackStatus)],
                                POPUP_END_LINE
                            );
                        } else {
                            enable_popup(
                                GILDE_LIST,
                                POPUP_BEGIN_LINE,
                                (((guildMembers[((hoverLevel + scrollLevel)
                                    + 1)] + " (") + texts[((TXT_RANKNAME
                                    + int(guildData[((GUILD_MEMBERRANK
                                    + hoverLevel) + scrollLevel)])) - 1)])
                                    + ")"),
                                POPUP_END_LINE,
                                POPUP_BEGIN_LINE,
                                ((texts[TXT_HALL_LIST_COLUMN_4] + " ")
                                    + str(lvl)),
                                POPUP_END_LINE,
                                POPUP_BEGIN_LINE,
                                texts[TXT_GOLD_SPENT],
                                170,
                                str(int((guildData[((GUILD_MEMBERGOLDSPENT
                                    + hoverLevel) + scrollLevel)] / 100))),
                                POPUP_END_LINE,
                                POPUP_BEGIN_LINE,
                                texts[TXT_MUSH_SPENT],
                                170,
                                str(guildData[((GUILD_MEMBERMUSHSPENT
                                    + hoverLevel) + scrollLevel)]),
                                POPUP_END_LINE,
                                POPUP_BEGIN_LINE,
                        FontFormat_GuildListTextAttackErrorOnlinePopup,
                                texts[(TXT_ATTACK_STATUS + attackStatus)],
                                POPUP_END_LINE
                            );
                        };
                    };
                } else {
                    if (guildData[0] != savegame[SG_GUILD_INDEX]){
                        if (text_dir == "right"){
                            enable_popup(
                                GILDE_LIST,
                                POPUP_BEGIN_LINE,
                                ((("(" + texts[((TXT_RANKNAME +
                                    int(guildData[((GUILD_MEMBERRANK
                                    + hoverLevel) + scrollLevel)])) - 1)])
                                    + ") ") + guildMembers[((hoverLevel
                                    + scrollLevel) + 1)]),
                                POPUP_END_LINE,
                                POPUP_BEGIN_LINE,
                                ((str(lvl) + " ") + texts[
                                    TXT_HALL_LIST_COLUMN_4]),
                                POPUP_END_LINE
                            );
                        } else {
                            enable_popup(
                                GILDE_LIST,
                                POPUP_BEGIN_LINE,
                                (((guildMembers[((hoverLevel + scrollLevel)
                                    + 1)] + " (") + texts[((TXT_RANKNAME
                                    + int(guildData[((GUILD_MEMBERRANK
                                    + hoverLevel) + scrollLevel)])) - 1)])
                                    + ")"),
                                POPUP_END_LINE,
                                POPUP_BEGIN_LINE,
                                ((texts[TXT_HALL_LIST_COLUMN_4] + " ")
                                    + str(lvl)),
                                POPUP_END_LINE
                            );
                        };
                    } else {
                        if (text_dir == "right"){
                            if (attackStatus == 0){
                                enable_popup(
                                    GILDE_LIST,
                                    POPUP_BEGIN_LINE,
                                    ((("(" + texts[((TXT_RANKNAME
                                        + int(guildData[((GUILD_MEMBERRANK
                                        + hoverLevel) + scrollLevel)])) - 1)])
                                        + ") ") + guildMembers[((hoverLevel
                                        + scrollLevel) + 1)]),
                                    POPUP_END_LINE,
                                    POPUP_BEGIN_LINE,
                                    ((str(lvl) + " ") + texts[
                                        TXT_HALL_LIST_COLUMN_4]),
                                    POPUP_END_LINE,
                                    POPUP_BEGIN_LINE,
                                    texts[TXT_GOLD_SPENT],
                                    170,
                                    str(int((guildData[
                                        ((GUILD_MEMBERGOLDSPENT
                                        + hoverLevel) + scrollLevel)]
                                        / 100))),
                                    POPUP_END_LINE,
                                    POPUP_BEGIN_LINE,
                                    texts[TXT_MUSH_SPENT],
                                    170,
                                    str(guildData[((GUILD_MEMBERMUSHSPENT
                                        + hoverLevel) + scrollLevel)]),
                                    POPUP_END_LINE
                                );
                            } else {
                                enable_popup(
                                    GILDE_LIST,
                                    POPUP_BEGIN_LINE,
                                    ((("(" + texts[((TXT_RANKNAME
                                        + int(guildData[((GUILD_MEMBERRANK
                                        + hoverLevel)
                                        + scrollLevel)])) - 1)])
                                        + ") ") + guildMembers[((hoverLevel
                                        + scrollLevel) + 1)]),
                                    POPUP_END_LINE,
                                    POPUP_BEGIN_LINE,
                                    ((str(lvl) + " ") +
                                        texts[TXT_HALL_LIST_COLUMN_4]),
                                    POPUP_END_LINE,
                                    POPUP_BEGIN_LINE,
                                    texts[TXT_GOLD_SPENT],
                                    170,
                                    str(int((guildData[((
                                        GUILD_MEMBERGOLDSPENT + hoverLevel)
                                        + scrollLevel)] / 100))),
                                    POPUP_END_LINE,
                                    POPUP_BEGIN_LINE,
                                    texts[TXT_MUSH_SPENT],
                                    170,
                                    str(guildData[((GUILD_MEMBERMUSHSPENT
                                        + hoverLevel) + scrollLevel)]),
                                    POPUP_END_LINE,
                                    POPUP_BEGIN_LINE,
                                    FontFormat_GuildListTextAttackOkPopup,
                                    texts[(TXT_ATTACK_OK_STATUS +
                                        attackStatus)],
                                    POPUP_END_LINE
                                );
                            };
                        } else {
                            if (attackStatus == 0){
                                enable_popup(
                                    GILDE_LIST,
                                    POPUP_BEGIN_LINE,
                                    (((guildMembers[((hoverLevel
                                        + scrollLevel) + 1)] + " (")
                                        + texts[((TXT_RANKNAME
                                        + int(guildData[((GUILD_MEMBERRANK
                                        + hoverLevel) + scrollLevel)])) - 1)])
                                        + ")"),
                                    POPUP_END_LINE,
                                    POPUP_BEGIN_LINE,
                                        ((texts[TXT_HALL_LIST_COLUMN_4] + " ")
                                            + str(lvl)),
                                    POPUP_END_LINE,
                                    POPUP_BEGIN_LINE,
                                    texts[TXT_GOLD_SPENT],
                                    170,
                                    str(int((guildData[((GUILD_MEMBERGOLDSPENT
                                        + hoverLevel) + scrollLevel)] / 100))),
                                    POPUP_END_LINE,
                                    POPUP_BEGIN_LINE,
                                    texts[TXT_MUSH_SPENT],
                                    170,
                                    str(guildData[((GUILD_MEMBERMUSHSPENT
                                        + hoverLevel) + scrollLevel)]),
                                    POPUP_END_LINE
                                );
                            } else {
                                enable_popup(
                                    GILDE_LIST,
                                    POPUP_BEGIN_LINE,
                                    (((guildMembers[((hoverLevel + scrollLevel)
                                        + 1)] + " (") + texts[((TXT_RANKNAME
                                        + int(guildData[((GUILD_MEMBERRANK
                                        + hoverLevel) + scrollLevel)])) - 1)])
                                        + ")"),
                                    POPUP_END_LINE,
                                    POPUP_BEGIN_LINE,
                                    ((texts[TXT_HALL_LIST_COLUMN_4] + " ")
                                        + str(lvl)),
                                    POPUP_END_LINE,
                                    POPUP_BEGIN_LINE,
                                    texts[TXT_GOLD_SPENT],
                                    170,
                                    str(int((guildData[((GUILD_MEMBERGOLDSPENT
                                        + hoverLevel) + scrollLevel)] / 100))),
                                    POPUP_END_LINE,
                                    POPUP_BEGIN_LINE,
                                    texts[TXT_MUSH_SPENT],
                                    170,
                                    str(guildData[((GUILD_MEMBERMUSHSPENT
                                        + hoverLevel) + scrollLevel)]),
                                    POPUP_END_LINE,
                                    POPUP_BEGIN_LINE,
                                    FontFormat_GuildListTextAttackOkPopup,
                                    texts[TXT_ATTACK_OK_STATUS + attackStatus],
                                    POPUP_END_LINE
                                );

            var RemoveGuildPopup:* = function (evt:MouseEvent){
                enable_popup(GILDE_LIST);
            };

            var AddGuildPlayer:* = function (
                memberName:String, rank, line, onlineStatus:Boolean,
                thisAttackError:Boolean, thisAttackStatus
            ){
                var tmp_obj:* = None;
                var memberName:* = memberName;
                var rank:* = rank;
                var line:* = line;
                var onlineStatus:* = onlineStatus;
                var thisAttackError:* = thisAttackError;
                var thisAttackStatus:* = thisAttackStatus;
                tmp_obj = new TextField();
                DoubleClickHandler(
                    tmp_obj, BuildGuildList, RequestPlayerScreen
                );
                var _local8 = tmp_obj;
                with (_local8) {
                    add_event_listener(MouseEvent.MOUSE_OVER, BuildGuildPopup);
                    add_event_listener(MouseEvent.MOUSE_OUT, RemoveGuildPopup);
                    if (thisAttackError){
                        if (is_mine){
                            if (
                                (((thisAttackStatus & 1))
                                 or ((thisAttackStatus & 2)))
                            ){
                                tmp_obj.default_text_format = (
                                    (onlineStatus)
                                ? FontFormat_GuildListTextAttackErrorOnlineHalf
                                : FontFormat_GuildListTextAttackErrorHalf
                                );
                            } else {
                                tmp_obj.default_text_format = (
                                    (onlineStatus)
                                    ? FontFormat_GuildListTextAttackErrorOnline
                                    : FontFormat_GuildListTextAttackError
                                );
                            };
                        } else {
                            if (
                                !(((thisAttackStatus & 1))
                                and ((thisAttackStatus & 2)))
                            ){
                                tmp_obj.default_text_format =
                                    FontFormat_GuildListTextAttackErrorHalf;
                            } else {
                                tmp_obj.default_text_format =
                                    FontFormat_GuildListTextAttackError;
                            };
                        };
                    } else {
                        tmp_obj.default_text_format = (
                            (((onlineStatus) and (is_mine)))
                                ? FontFormat_GuildListTextOnline
                                : FontFormat_GuildListText
                            );
                    };
                    auto_size = TextFieldAutoSize.LEFT;
                    background = False;
                    selectable = False;
                    embed_fonts = font_embedded;
                    anti_alias_type = AntiAliasType.ADVANCED;
                    mouse_enabled = True;
                    filters = Filter_Shadow;
                    text = memberName;
                    if (text_dir == "right"){
                        x = (172 - text_width);
                    } else {
                        x = GILDE_LIST_C1;
                    };
                    y = ((line * GILDE_LIST_Y) + 0);
                    alpha = (((rank == 4)) ? 0.5 : 1);
                };
                actor[GILDE_LIST].addChild(tmp_obj);
            };
            i = 0;
            j = 0;
            isOnline = False;
            attackError = False;
            lvl = 0;
            attackStatus = 0;
            if (guildData[0] == savegame[SG_GUILD_INDEX]){
                offline_guild_members = list();
            };
            if ((evt is MouseEvent)){
                selectLevel = int(((
                    actor[GILDE_LIST].getChildIndex(evt.target) - 1) / 2));
            };
            var _local3 = actor[GILDE_LIST];
            with (_local3) {
                while (numChildren > 0) {
                    removeChildAt(0);
                };
                mouse_enabled = True;
                doubleClickEnabled = True;
                mouseChildren = True;
            };
            tmpBalken = new MovieClip();
            _local3 = tmpBalken.graphics;
            with (_local3) {
                beginFill(CLR_SFORANGE, 0.5);
                lineStyle(0, 0, 0);
                drawRect(0, 0, GILDE_LIST_X, GILDE_LIST_Y);
            };
            _local3 = tmpBalken;
            with (_local3) {
                x = 0;
                y = (selectLevel * GILDE_LIST_Y);
                mouse_enabled = True;
                doubleClickEnabled = True;
            };
            actor[GILDE_LIST].addChild(tmpBalken);
            j = 0;
            avgLevel = 0;
            avgCount = 0;
            if (scrollLevel == -1){
                i = 0;
                while (i < int(guildData[3])) {
                    if (int(guildData[(GUILD_MEMBERID + i)]) == int(
                        savegame[SG['PLAYER_ID']])
                    ){
                        scrollLevel = (i - 7);
                    };
                    i = (i + 1);
                };
                if (scrollLevel > (int(guildData[3]) - 15)){
                    scrollLevel = (int(guildData[3]) - 15);
                };
                if (scrollLevel < 0){
                    scrollLevel = 0;
                };
            };
            i = 0;
            while (i < int(guildData[3])) {
                isOnline = WaitingFor((Number(
                    guildData[(GUILD_MEMBERONLINE + i)]) + (60 * 5)));
                lvl = int(guildData[(GUILD_MEMBERLEVEL + i)]);
                attackStatus = 0;
                attackError = False;
                while (lvl > 1000) {
                    lvl = (lvl - 1000);
                    attackStatus = (attackStatus + 1);
                };
                if (int(guildData[(GUILD_MEMBERID + i)]) == int(
                    savegame[SG['PLAYER_ID']])
                ){
                    myRank = int(guildData[(GUILD_MEMBERRANK + i)]);
                    myAttackStatus = int(
                        (Number(guildData[(GUILD_MEMBERLEVEL + i)]) / 1000)
                    );
                };
                if (
                    (((int(guildData[(GUILD_MEMBERRANK + i)]) > 0))
                    and ((int(guildData[(GUILD_MEMBERRANK + i)]) < 4)))
                ){
                    avgLevel = (avgLevel + lvl);
                    avgCount = (avgCount + 1);
                };
                if (guildData[0] == savegame[SG_GUILD_INDEX]){
                    if (!isOnline){
                        offline_guild_members.append(guildMembers[(i + 1)]);
                    };
                    if (
                        (((int(guildData[GUILD_ATTACK_TARGET]) > 0))
                        and (!((attackStatus & 1))))
                    ){
                        attackError = True;
                    };
                    if (
                        (((int(guildData[GUILD_DEFENCE_TARGET]) > 0))
                        and (!((attackStatus & 2))))
                    ){
                        attackError = True;
                    };
                } else {
                    if (
                        (((int(guildData[GUILD_ATTACK_TARGET]) == int(
                        savegame[SG_GUILD_INDEX]))) and ((attackStatus & 1)))
                    ){
                        attackError = True;
                    };
                    if ((((int(guildData[GUILD_DEFENCE_TARGET]) == int(
                        savegame[SG_GUILD_INDEX]))) and ((attackStatus & 2)))
                    ){
                        attackError = True;
                    };
                };
                if ((((i >= scrollLevel)) and ((i < (scrollLevel + 15))))){
                    AddGuildImage(int(guildData[(GUILD_MEMBERRANK + i)]), j);
                    j = (j + 1);
                    AddGuildPlayer(
                        guildMembers[(i + 1)],
                        int(guildData[(GUILD_MEMBERRANK + i)]),
                        j,
                        isOnline,
                        attackError,
                        attackStatus
                    );
                };
                i = (i + 1);
            };
            avgLevel = (avgLevel / avgCount);
            PlaceButtonSet();
            if (text_dir == "right"){
                actor[GILDE_SCROLL_UP].x = GILDE_LIST_X;
                actor[GILDE_SCROLL_DOWN].x = GILDE_LIST_X;
                actor[GILDE_CHAT_UP].x = (GILDE_GEBAEUDE_X - 2);
                actor[GILDE_CHAT_DOWN].x = (GILDE_GEBAEUDE_X - 2);
                actor[GILDE_LIST].x = (
                    (actor[GILDE_SCROLL_UP].x
                    + actor[GILDE_SCROLL_UP].width) + 5
                );
                actor[INP_GILDE_CHAT].x = (
                    (actor[GILDE_CHAT_UP].x + actor[GILDE_CHAT_UP].width) + 5
                );
                i = 0;
                while (i < 40) {
                    actor[(LBL['GILDE']['CHAT'] + i)].x = (
                        (actor[INP_GILDE_CHAT].x + actor[INP_GILDE_CHAT].width)
                        - actor[(LBL['GILDE']['CHAT'] + i)].text_width
                    );
                    actor[(LBL['GILDE']['CHAT'] + i)].auto_size = "right";
                    i = (i + 1);

        i = 0;
        myRank = 0;
        myAttackStatus = 0;
        scrollLevel = -1;
        selectLevel = 0;
        GoldToDonate = 0;
        MushToDonate = 0;
        DonateTimeout = new Timer(2000, 1);
        DonateTimeout.add_event_listener(TimerEvent.TIMER, DoDonate);
        guildInstanceID++;
        if (guildInstanceID > 10000){
            guildInstanceID = 0;
        };
        thisInstanceID = guildInstanceID;
        removeListenersTimer = new Timer(20);
        var _local3 = removeListenersTimer;
        with (_local3) {
            add_event_listener(TimerEvent.TIMER, removeListeners);
            start();
        };
        GoldKosten = 10;
        PilzKosten = 10;
        Nutzen = "";
        Ausbaustufe = 1;
        AusbaustufeEx = 1;
        GoldKostenAvg = 0;
        PilzKostenAvg = 0;
        cheapest = -1;
        countCompleted = 0;
        i = 0;
        while (i < 3) {
            Ausbaustufe = guildData[(i + 5)];
            AusbaustufeEx = (
                Ausbaustufe + ((i)==0)
                    ? 0
                    : int(guildData[GUILD_RAID_LEVEL])
            );
            GoldKosten = int((GildeBuildingGold[(Ausbaustufe + 1)] / 100));
            PilzKosten = GildeBuildingPilz[(Ausbaustufe + 1)];
            Switch (i){
                if case(0:
                    if (AusbaustufeEx > 50){
                        Nutzen = "50";
                    } else {
                        Nutzen = str(AusbaustufeEx);
                    };
                    break;
                if case(1:
                    Nutzen = (str((AusbaustufeEx * 2)) + "%");
                    break;
                if case(2:
                    Nutzen = (str((AusbaustufeEx * 2)) + "%");
                    break;
            };
            actor[(LBL_GILDE_GEBAEUDE_WERT + i)].text = Nutzen;
            actor[(LBL_GILDE_GEBAEUDE_STUFE + i)].text = str(AusbaustufeEx);
            if (text_dir == "right"){
                actor[(LBL_GILDE_GEBAEUDE_NAME + i)].x = (
                    ((GILDE_GEBAEUDE_X + GILDE_TEXT_X) + 130)
                    - actor[(LBL_GILDE_GEBAEUDE_NAME + i)].text_width
                );
                actor[(LBL_GILDE_GEBAEUDE_WERT_CAPTION + i)].x = (
                    ((GILDE_GEBAEUDE_X + GILDE_TEXT_X) + 130)
                    - actor[(LBL_GILDE_GEBAEUDE_WERT_CAPTION + i)].text_width
                );
                actor[(LBL_GILDE_GEBAEUDE_WERT + i)].x = (
                    ((GILDE_GEBAEUDE_X + GILDE_TEXT_X) + 130)
                    - actor[(LBL_GILDE_GEBAEUDE_WERT + i)].text_width
                );
                actor[(LBL_GILDE_GEBAEUDE_STUFE_CAPTION + i)].x = (
                    ((GILDE_GEBAEUDE_X + GILDE_TEXT_X) + 130)
                    - actor[(LBL_GILDE_GEBAEUDE_STUFE_CAPTION + i)].text_width
                );
                actor[(LBL_GILDE_GEBAEUDE_STUFE + i)].x = (
                    (actor[(LBL_GILDE_GEBAEUDE_STUFE_CAPTION + i)].x
                    - actor[(LBL_GILDE_GEBAEUDE_STUFE + i)].text_width) - 5
                );
                actor[(GILDE_GEBAEUDE_IMPROVE + i)].y = actor[
                    (LBL_GILDE_GEBAEUDE_NAME + i)
                ].y;
                actor[(GILDE_GEBAEUDE_IMPROVE_GRAY + i)].y = actor[
                    (LBL_GILDE_GEBAEUDE_NAME + i)
                ].y;
            };
            SetCnt((GILDE_GEBAEUDE_GOLD + i), IF_GOLD);
            SetCnt((GILDE_GEBAEUDE_MUSH + i), IF_PILZE);
            hide(
                (LBL_GILDE_GEBAEUDE_KOSTEN_GOLD + i),
                (GILDE_GEBAEUDE_GOLD + i)
            );
            hide(
                (LBL_GILDE_GEBAEUDE_KOSTEN_MUSH + i),
                (GILDE_GEBAEUDE_MUSH + i)
            );
            if (Ausbaustufe >= 50){
                countCompleted = (countCompleted + 1);
                show((LBL_GILDE_GEBAEUDE_KOSTEN_GOLD + i));
                actor[(LBL_GILDE_GEBAEUDE_KOSTEN_GOLD + i)].text = texts[
                    TXT_BUILDING_COMPLETE
                ];
                if (text_dir == "right"){
                    actor[(LBL_GILDE_GEBAEUDE_KOSTEN_GOLD + i)].x = (
                        ((GILDE_GEBAEUDE_X + GILDE_TEXT_X) + 130)
                        - actor[LBL_GILDE_GEBAEUDE_KOSTEN_GOLD + i].text_width
                    );
                } else {
                    actor[(LBL_GILDE_GEBAEUDE_KOSTEN_GOLD + i)].x = (
                        GILDE_GEBAEUDE_X + GILDE_TEXT_X
                    );
                };
            } else {
                if (GoldKosten > 0){
                    show(
                        (LBL_GILDE_GEBAEUDE_KOSTEN_GOLD + i),
                        (GILDE_GEBAEUDE_GOLD + i)
                    );
                    actor[
                        (LBL_GILDE_GEBAEUDE_KOSTEN_GOLD + i)
                    ].text = str(GoldKosten);
                    if (text_dir == "right"){
                        actor[(LBL_GILDE_GEBAEUDE_KOSTEN_GOLD + i)].x = (
                            ((GILDE_GEBAEUDE_X + GILDE_TEXT_X) + 130)
                            - actor[
                                (LBL_GILDE_GEBAEUDE_KOSTEN_GOLD + i)
                            ].text_width);
                        actor[(GILDE_GEBAEUDE_GOLD + i)].x = (
                            (actor[(LBL_GILDE_GEBAEUDE_KOSTEN_GOLD + i)].x
                            - actor[
                                (LBL_GILDE_GEBAEUDE_KOSTEN_GOLD + i)
                            ].text_width) - 7);
                    } else {
                        actor[(LBL_GILDE_GEBAEUDE_KOSTEN_GOLD + i)].x = (
                            GILDE_GEBAEUDE_X + GILDE_TEXT_X
                        );
                        actor[(GILDE_GEBAEUDE_GOLD + i)].x = (
                            (actor[(LBL_GILDE_GEBAEUDE_KOSTEN_GOLD + i)].x
                            + actor[
                                (LBL_GILDE_GEBAEUDE_KOSTEN_GOLD + i)
                            ].text_width) + 7);
                    };
                    if ((((cheapest == -1)) or ((GoldKosten < cheapest)))){
                        cheapest = GoldKosten;
                    };
                };
                if (PilzKosten > 0){
                    show(
                        (LBL_GILDE_GEBAEUDE_KOSTEN_MUSH + i),
                        (GILDE_GEBAEUDE_MUSH + i)
                    );
                    actor[
                        (LBL_GILDE_GEBAEUDE_KOSTEN_MUSH + i)
                    ].text = str(PilzKosten);
                    if (text_dir == "right"){
                        if (GoldKosten > 0){
                            actor[(LBL_GILDE_GEBAEUDE_KOSTEN_MUSH + i)].x = (
                                (actor[(GILDE_GEBAEUDE_GOLD + i)].x
                                - actor[
                                    (LBL_GILDE_GEBAEUDE_KOSTEN_MUSH + i)
                                ].text_width) - 10);
                        } else {
                            actor[(LBL_GILDE_GEBAEUDE_KOSTEN_MUSH + i)].x = (
                                ((GILDE_GEBAEUDE_X + GILDE_TEXT_X) + 130)
                                - actor[
                                    (LBL_GILDE_GEBAEUDE_KOSTEN_MUSH + i)
                                ].text_width);
                        };
                        actor[(GILDE_GEBAEUDE_MUSH + i)].x = (
                            (actor[(LBL_GILDE_GEBAEUDE_KOSTEN_MUSH + i)].x
                            - actor[(GILDE_GEBAEUDE_MUSH + i)].width) - 7
                        );
                    } else {
                        if (GoldKosten > 0){
                            actor[(LBL_GILDE_GEBAEUDE_KOSTEN_MUSH + i)].x = (
                                (actor[(GILDE_GEBAEUDE_GOLD + i)].x
                                + actor[(GILDE_GEBAEUDE_GOLD + i)].width) + 10
                            );
                        } else {
                            actor[(LBL_GILDE_GEBAEUDE_KOSTEN_MUSH + i)].x = (
                                GILDE_GEBAEUDE_X + GILDE_TEXT_X
                            );
                        };
                        actor[(GILDE_GEBAEUDE_MUSH + i)].x = (
                            (actor[(LBL_GILDE_GEBAEUDE_KOSTEN_MUSH + i)].x
                            + actor[
                                (LBL_GILDE_GEBAEUDE_KOSTEN_MUSH + i)
                            ].text_width) + 7);
                    };
                };
            };
            GoldKostenAvg = (GoldKostenAvg + GoldKosten);
            PilzKostenAvg = (PilzKostenAvg + PilzKosten);
            i = (i + 1);
        };
        GoldKostenAvg = (GoldKostenAvg / 3);
        PilzKostenAvg = (PilzKostenAvg / 3);
        actor[LBL_GILDE_GOLD2].text = GetSpendAmount();
        actor[LBL_GILDE_MUSH2].text = "1";
        actor[GILDE_GOLD2].x = (
            (actor[LBL_GILDE_GOLD2].x
            + actor[LBL_GILDE_GOLD2].text_width) + 15
        );
        actor[GILDE_MUSH2].x = (
            (actor[LBL_GILDE_GOLD2].x + actor[LBL_GILDE_GOLD2].text_width) + 15
        );
        SetCnt(GILDE_GOLD, IF_GOLD);
        SetCnt(GILDE_GOLD2, IF_GOLD);
        SetCnt(GILDE_MUSH, IF_PILZE);
        SetCnt(GILDE_MUSH2, IF_PILZE);
        RightBoxWidth = (((
            (actor[GILDE_GOLD].width + GILDE_GOLDMUSH_C1)
            + actor[LBL_GILDE_GOLD2].text_width)
            + GILDE_GOLDMUSH_C1)
            + actor[GILDE_GOLD2].width
        );
        if (
            ((((actor[GILDE_MUSH].width + GILDE_GOLDMUSH_C1)
            + actor[LBL_GILDE_MUSH2].text_width)
            + GILDE_GOLDMUSH_C1)
            + actor[GILDE_MUSH2].width) > RightBoxWidth
        ){
            RightBoxWidth = (
                (((actor[GILDE_MUSH].width + GILDE_GOLDMUSH_C1)
                + actor[LBL_GILDE_MUSH2].text_width)
                + GILDE_GOLDMUSH_C1)
                + actor[GILDE_MUSH2].width
            );
        };
        if (text_dir == "right"){
            actor[GILDE_GOLD].x = (
                ((GILDE_GOLDMUSH_X + GILDE_GOLDMUSH_C2)
                + int((RightBoxWidth / 2))) - actor[GILDE_GOLD].width
            );
            actor[GILDE_MUSH].x = actor[GILDE_GOLD].x;
            actor[LBL_GILDE_GOLD2].x = (
                (actor[GILDE_GOLD].x - actor[LBL_GILDE_GOLD2].text_width)
                - GILDE_GOLDMUSH_C1
            );
            actor[LBL_GILDE_MUSH2].x = (
                (actor[GILDE_MUSH].x - actor[LBL_GILDE_MUSH2].text_width)
                - GILDE_GOLDMUSH_C1
            );
            actor[GILDE_GOLD2].x = (
                (actor[LBL_GILDE_GOLD2].x - actor[GILDE_GOLD2].width)
                - GILDE_GOLDMUSH_C1
            );
            actor[GILDE_MUSH2].x = (
                (actor[LBL_GILDE_MUSH2].x - actor[GILDE_MUSH2].width)
                - GILDE_GOLDMUSH_C1
            );
        } else {
            actor[GILDE_GOLD].x = (
                (GILDE_GOLDMUSH_X + GILDE_GOLDMUSH_C2)
                - int((RightBoxWidth / 2))
            );
            actor[GILDE_MUSH].x = actor[GILDE_GOLD].x;
            actor[LBL_GILDE_GOLD2].x = (
                (actor[GILDE_GOLD].x + actor[GILDE_GOLD].width)
                + GILDE_GOLDMUSH_C1
            );
            actor[LBL_GILDE_MUSH2].x = (
                (actor[GILDE_MUSH].x + actor[GILDE_MUSH].width)
                + GILDE_GOLDMUSH_C1
            );
            actor[GILDE_GOLD2].x = (
                (actor[LBL_GILDE_GOLD2].x + actor[LBL_GILDE_GOLD2].text_width)
                + GILDE_GOLDMUSH_C1
            );
            actor[GILDE_MUSH2].x = (
                (actor[LBL_GILDE_MUSH2].x + actor[LBL_GILDE_MUSH2].text_width)
                + GILDE_GOLDMUSH_C1
            );
        };
        _local3 = actor[LBL_GILDE_GOLD];
        with (_local3) {
            text = str(int((guildData[1] / 100)));
            LeftBoxWidth = (
                (text_width + GILDE_GOLDMUSH_C1) + actor[GILDE_GOLD].width
            );
        };
        _local3 = actor[LBL_GILDE_MUSH];
        with (_local3) {
            text = guildData[2];
            if (
                ((text_width + GILDE_GOLDMUSH_C1) + actor[GILDE_MUSH].width)
                > LeftBoxWidth
            ){
                LeftBoxWidth = (
                    (text_width + GILDE_GOLDMUSH_C1) + actor[GILDE_MUSH].width)
            };
            if (text_dir == "right"){
                actor[GILDE_MUSH].x = (
                    (GILDE_GOLDMUSH_X + int((LeftBoxWidth / 2)))
                    - actor[GILDE_MUSH].width
                );
                actor[GILDE_GOLD].x = actor[GILDE_MUSH].x;
                actor[LBL_GILDE_GOLD].x = (
                    (actor[GILDE_GOLD].x - actor[LBL_GILDE_GOLD].text_width)
                    - GILDE_GOLDMUSH_C1
                );
                x = ((actor[GILDE_MUSH].x - actor[LBL_GILDE_MUSH].text_width)
                    - GILDE_GOLDMUSH_C1);
            } else {
                actor[GILDE_MUSH].x = (
                   GILDE_GOLDMUSH_X - int((LeftBoxWidth / 2))
                );
                actor[GILDE_GOLD].x = actor[GILDE_MUSH].x;
                actor[LBL_GILDE_GOLD].x = (
                    (actor[GILDE_GOLD].x + actor[GILDE_GOLD].width)
                    + GILDE_GOLDMUSH_C1);
                x = (
                    (actor[GILDE_MUSH].x + actor[GILDE_MUSH].width)
                    + GILDE_GOLDMUSH_C1);
            };
        };
        crestView = on_stage(GILDE_CREST);
        startWithCrest = (
            (((((((((is_mine) or ((guildData[0] == savegame[SG_GUILD_INDEX]))))
            and ((guildData[5] >= 50))))
            and ((guildData[6] >= 50))))
            and ((guildData[7] >= 50))))
            and (!(on_stage(GILDE_SCROLL_UP)))
        );
        if (guildData[0] != last_guild_crest_id){
            crestView = False;
        };
        last_guild_crest_id = guildData[0];
        remove_all();
        add(SCREEN_GILDEN);
        if (crestView){
            if (actor[GILDE_CREST].y == GILDE_GEBAEUDE_Y){
                set_alpha(GILDE_CREST_CONTROLS, 1);
                add(GILDE_CREST_CONTROLS);
            };
            remove(GILDE_GEBAEUDE);
        } else {
            actor[GILDE_CREST].y = (GILDE_GEBAEUDE_Y + 60);
            selecterCrestElement = -1;
            if (((is_mine) or ((guildData[0] == savegame[SG_GUILD_INDEX])))){
                if (startWithCrest){
                    remove(GILDE_GEBAEUDE);
                } else {
                    remove(GILDE_CREST);
                };
                actor[GILDE_CREST].mouseChildren = True;
            } else {
                remove(GILDE_CREST_GOTO_GEBAEUDE);
                actor[GILDE_CREST].mouseChildren = False;
            };
            loadCrest();
        };
        if (!((is_mine) or ((guildData[0] == savegame[SG_GUILD_INDEX])))){
            remove(GILDE_CREST_GOTO_GEBAEUDE);
            actor[GILDE_CREST].mouseChildren = False;
        };
        if (text_dir == "right"){
            actor[LBL['GILDE']['CHAT']_CAPTION].x = (
                (actor[GILDE_RAID].x -
                 actor[LBL['GILDE']['CHAT']_CAPTION].text_width)
                - 5);
            actor[GILDE_LINK].x = (
                (actor[GILDE_RAID].x - actor[LBL_GILDE_LINK].text_width) - 5
            );
            actor[INP_GILDE_TEXT].x = (GILDE_TEXT_X - 5);
            MakeRightTextArea(INP_GILDE_TEXT, 0);
            MakeRightTextArea(INP_GILDE_CHAT, 0);
        };
        i = 0;
        while (i < 3) {
            Ausbaustufe = guildData[(i + 5)];
            if (Ausbaustufe >= 50){
                hide((GILDE_GEBAEUDE_IMPROVE + i));
                show((GILDE_GEBAEUDE_IMPROVE_GRAY + i));
            };
            i = (i + 1);
        };
        GuildBtnRepeatTimer = new Timer(1000);
        actor[GILDE_SCROLL_UP].add_event_listener(
            MouseEvent.CLICK, GuildBtnHandler
        );
        actor[GILDE_SCROLL_DOWN].add_event_listener(
            MouseEvent.CLICK, GuildBtnHandler
        );
        actor[GILDE_DIALOG_CANCEL].add_event_listener(
            MouseEvent.CLICK, GuildBtnHandler
        );
        actor[GILDE_DIALOG_OK_KICK].add_event_listener(
            MouseEvent.CLICK, GuildBtnHandler
        );
        actor[GILDE_DIALOG_OK_MASTER].add_event_listener(
            MouseEvent.CLICK, GuildBtnHandler
        );
        actor[GILDE_DIALOG_OK_INVITE].add_event_listener(
            MouseEvent.CLICK, GuildBtnHandler
        );
        actor[GILDE_DIALOG_OK_REVOLT].add_event_listener(
            MouseEvent.CLICK, GuildBtnHandler
        );
        actor[GILDE_DIALOG_OK_RAID].add_event_listener(
            MouseEvent.CLICK, GuildBtnHandler
        );
        actor[GILDE_INVITE].add_event_listener(
            MouseEvent.CLICK, GuildBtnHandler
        );
        actor[GILDE_PROFILE].add_event_listener(
            MouseEvent.CLICK, GuildBtnHandler
        );
        actor[GILDE_KICK].add_event_listener(
            MouseEvent.CLICK, GuildBtnHandler
        );
        actor[GILDE_PROMOTE].add_event_listener(
            MouseEvent.CLICK, GuildBtnHandler
        );
        actor[GILDE_DEMOTE].add_event_listener(
            MouseEvent.CLICK, GuildBtnHandler
        );
        actor[GILDE_MASTER].add_event_listener(
            MouseEvent.CLICK, GuildBtnHandler
        );
        actor[GILDE_REVOLT].add_event_listener(
            MouseEvent.CLICK, GuildBtnHandler
        );
        actor[GILDE_GEBAEUDE_IMPROVE].add_event_listener(
            MouseEvent.CLICK, GuildBtnHandler
        );
        actor[(GILDE_GEBAEUDE_IMPROVE + 1)].add_event_listener(
            MouseEvent.CLICK, GuildBtnHandler
        );
        actor[(GILDE_GEBAEUDE_IMPROVE + 2)].add_event_listener(
            MouseEvent.CLICK, GuildBtnHandler
        );
        actor[GILDE_KATAPULT].add_event_listener(
            MouseEvent.CLICK, GuildBtnHandler
        );
        actor[(GILDE_KATAPULT + 1)].add_event_listener(
            MouseEvent.CLICK, GuildBtnHandler
        );
        actor[(GILDE_KATAPULT + 2)].add_event_listener(
            MouseEvent.CLICK, GuildBtnHandler
        );
        actor[GILDE_GOLD].add_event_listener(
            MouseEvent.MOUSE_DOWN, GuildBtnHandler
        );
        actor[GILDE_MUSH].add_event_listener(
            MouseEvent.MOUSE_DOWN, GuildBtnHandler
        );
        actor[GILDE_GOLD].add_event_listener(
            MouseEvent.MOUSE_OUT, DoDonate
        );
        actor[GILDE_MUSH].add_event_listener(
            MouseEvent.MOUSE_OUT, DoDonate
        );

        with (actor[GILDE_GOLD]) {
            add_event_listener(MouseEvent.MOUSE_DOWN, GuildBtnDownHandler);
            add_event_listener(MouseEvent.MOUSE_UP, GuildBtnUpHandler);
            add_event_listener(MouseEvent.MOUSE_OUT, GuildBtnUpHandler);
        };
        _local3 = actor[GILDE_MUSH];
        with (_local3) {
            add_event_listener(MouseEvent.MOUSE_DOWN, GuildBtnDownHandler);
            add_event_listener(MouseEvent.MOUSE_UP, GuildBtnUpHandler);
            add_event_listener(MouseEvent.MOUSE_OUT, GuildBtnUpHandler);
        };
        BuildGuildList();
        if (myRank > 2){
            hide(
                GILDE_GEBAEUDE_IMPROVE,
                (GILDE_GEBAEUDE_IMPROVE + 1),
                (GILDE_GEBAEUDE_IMPROVE + 2)
            );
            show(
                GILDE_GEBAEUDE_IMPROVE_GRAY,
                (GILDE_GEBAEUDE_IMPROVE_GRAY + 1),
                (GILDE_GEBAEUDE_IMPROVE_GRAY + 2)
            );
        };
        _local3 = actor[LBL_SCREEN_TITLE];
        with (_local3) {
            text = ThisGilde;
            x = (SCREEN_TITLE_X - int((text_width / 2)));
            y = SCREEN_TITLE_Y_GUILD;
        };
        _local3 = actor[LBL_GILDE_CREST_INSCRIPTION];
        with (_local3) {
            text = ThisGilde;
            x = (120 - int((text_width / 2)));
        };
        _local3 = actor[LBL_GILDE_RANG];
        with (_local3) {
            if (
                (((int(guildData[GUILD_RAID_LEVEL]) > 0))
                and (texts[(TXT_RAID_TEXT + 18)]))
            ){
                if (text_dir == "right"){
                    text = (
                        (((((((((("50/" + guildData[GUILD_RAID_LEVEL]) + " :")
                        + texts[(TXT_RAID_TEXT + 18)]) + "  ")
                        + str(((GildenEhre)==1) ? 0 : GildenEhre)) + " :")
                        + texts[TXT_HALL_LIST_COLUMN_5]) + "  ")
                        + str(GildenRang)) + " :")
                        + texts[TXT_HALL_LIST_COLUMN_1]
                    );
                } else {
                    text = (
                        ((((((((((texts[TXT_HALL_LIST_COLUMN_1] + ": ")
                        + str(GildenRang)) + "  ")
                        + texts[TXT_HALL_LIST_COLUMN_5])
                        + ": ") + str(((GildenEhre)==1) ? 0 : GildenEhre))
                        + "  ") + texts[(TXT_RAID_TEXT + 18)]) + ": ")
                        + guildData[GUILD_RAID_LEVEL]) + "/50"
                    );
                };
            } else {
                if (text_dir == "right"){
                    text = (
                        (((((str(((GildenEhre)==1) ? 0 : GildenEhre) + " :")
                        + texts[TXT_HALL_LIST_COLUMN_5]) + "     ")
                        + str(GildenRang)) + " :")
                        + texts[TXT_HALL_LIST_COLUMN_1]
                    );
                } else {
                    text = (
                        (((((texts[TXT_HALL_LIST_COLUMN_1] + ": ")
                        + str(GildenRang)) + "     ")
                        + texts[TXT_HALL_LIST_COLUMN_5]) + ": ")
                        + str(((GildenEhre)==1) ? 0 : GildenEhre)
                    );
                };
            };
        };
        if (text_dir == "right"){
            actor[GILDE_RANG].x = (1175 - actor[LBL_GILDE_RANG].text_width);
        };
        if (guildDescr.find("http://") != -1){
            guildForumLink = guildDescr[guildDescr.find("http://"):]
            guildForumLink = guildForumLink.split(
                ")").join(" ").split(
                "#").join(" ").split(
                chr(13)).join(" ").split(
                chr(10)).join(" ").split(" ")[0];
            add(GILDE_LINK);
            if (guildForumLink[guildForumLink.length: 1] == "."){
                guildForumLink = guildForumLink[0: (guildForumLink.length - 1)]
            };
            enable_popup(GILDE_LINK, guildForumLink);
        } else {
            if (guildDescr.find("www.") != -1){
                guildForumLink = (
                    "http://" + guildDescr[guildDescr.find("www."):]
                )
                guildForumLink = guildForumLink.split(
                    ")").join(" ").split("#").join(
                    " ").split(chr(13)).join(" ").split(
                    chr(10)).join(" ").split(" ")[0];
                add(GILDE_LINK);
                if (guildForumLink[guildForumLink.length: 1] == "."){
                    guildForumLink = guildForumLink[
                        0: (guildForumLink.length - 1)
                    ]
                };
                enable_popup(GILDE_LINK, guildForumLink);
            };
        };
        _local3 = actor[INP_GILDE_TEXT];
        with (_local3) {
            getChildAt(0).text = (
                (guildDescr)=="")
                    ? (((myRank == 1))
                        ? texts[TXT_ENTERGUILDDESC]
                        : texts[TXT_GUILDNOTEXT])
                    : resolve_breaks(guildDescr);
            getChildAt(0).type = (
                ((((myRank == 1)) and (is_mine)))
                    ? TextFieldType.INPUT
                    : TextFieldType.DYNAMIC
            );
            mouse_enabled = True;
            add_event_listener(FocusEvent.FOCUS_IN, EnterGuildDesc);
            add_event_listener(FocusEvent.FOCUS_OUT, LeaveGuildDesc);
            if (text_dir == "right"){
                getChildAt(0).wordWrap = False;
            };
        };
        add(GILDE_RAID_GRAY);
        add(GILDE_ATTACK_GRAY);
        add(GILDE_DEFEND_GRAY);
        if (
            (((guildData[5] >= 20))
            and ((guildData[0] == savegame[SG_GUILD_INDEX])))
        ){
            if (myRank <= 2){
                if (guildData[4] == 0){
                    add(GILDE_KATAPULT);
                } else {
                    if (guildData[4] == 1){
                        add((GILDE_KATAPULT + 1));
                    } else {
                        if (guildData[4] == 2){
                            add((GILDE_KATAPULT + 2));
                        } else {
                            if (guildData[4] == 3){
                                add((GILDE_KATAPULT_OK + 2));
                            };
                        };
                    };
                };
            } else {
                if (guildData[4] == 0){
                    add(GILDE_KATAPULT_GRAY);
                } else {
                    if (guildData[4] == 1){
                        add(GILDE_KATAPULT_OK);
                    } else {
                        if (guildData[4] == 2){
                            add((GILDE_KATAPULT_OK + 1));
                        } else {
                            if (guildData[4] == 3){
                                add((GILDE_KATAPULT_OK + 2));
                            };
                        };
                    };
                };
            };
            i = 0;
            while (i < 3) {
                enable_popup(
                    (GILDE_KATAPULT + i),
                    POPUP_BEGIN_LINE,
                    texts[TXT_CATAPULT],
                    POPUP_END_LINE,
                    POPUP_BEGIN_LINE,
                    texts[(TXT_CATAPULT + 1)].split(
                        "%1").join("3").split("#").join(chr(13)),
                    POPUP_END_LINE,
                    POPUP_BEGIN_LINE,
                    texts[(TXT_CATAPULT + 2)],
                    200,
                    texts[(TXT_CATAPULT + 3)].split(
                        "%1").join(str(guildData[4])).split(
                        "%2").join("3"),
                    POPUP_END_LINE,
                    POPUP_BEGIN_LINE,
                    texts[(TXT_CATAPULT + 4)],
                    200,
                    texts[(TXT_CATAPULT + 5)].split("%1").join("5"),
                    actor[IF_PILZE],
                    POPUP_END_LINE
                );
                i = (i + 1);
            };
            enable_popup(
                GILDE_KATAPULT_GRAY,
                POPUP_BEGIN_LINE,
                texts[TXT_CATAPULT],
                POPUP_END_LINE,
                POPUP_BEGIN_LINE,
                texts[(TXT_CATAPULT + 1)].split(
                    "%1").join("3").split("#").join(chr(13)),
                POPUP_END_LINE,
                POPUP_BEGIN_LINE,
                texts[(TXT_CATAPULT + 2)],
                200,
                texts[(TXT_CATAPULT + 3)].split(
                    "%1").join(str(guildData[4])).split("%2").join("3"),
                POPUP_END_LINE,
                POPUP_BEGIN_LINE,
                texts[(TXT_CATAPULT + 6)],
                POPUP_END_LINE
            );
            i = 0;
            while (i < 2) {
                enable_popup(
                    (GILDE_KATAPULT_OK + i),
                    POPUP_BEGIN_LINE,
                    texts[TXT_CATAPULT],
                    POPUP_END_LINE,
                    POPUP_BEGIN_LINE,
                    texts[(TXT_CATAPULT + 1)].split(
                        "%1").join("3").split("#").join(chr(13)),
                    POPUP_END_LINE,
                    POPUP_BEGIN_LINE,
                    texts[(TXT_CATAPULT + 2)],
                    200,
                    texts[(TXT_CATAPULT + 3)].split(
                        "%1").join(str(guildData[4])).split("%2").join("3"),
                    POPUP_END_LINE,
                    POPUP_BEGIN_LINE,
                    texts[(TXT_CATAPULT + 6)],
                    POPUP_END_LINE
                );
                i = (i + 1);
            };
            enable_popup(
                (GILDE_KATAPULT_OK + 2),
                POPUP_BEGIN_LINE,
                texts[TXT_CATAPULT],
                POPUP_END_LINE,
                POPUP_BEGIN_LINE,
                texts[(TXT_CATAPULT + 1)].split(
                    "%1").join("3").split("#").join(chr(13)),
                POPUP_END_LINE,
                POPUP_BEGIN_LINE,
                texts[(TXT_CATAPULT + 2)],
                200,
                texts[(TXT_CATAPULT + 3)].split(
                    "%1").join(str(guildData[4])).split("%2").join("3"),
                POPUP_END_LINE
            );
        };
        raidCost = GildeBuildingGold[(int(guildData[GUILD_RAID_LEVEL]) + 51)];
        if (int(guildData[GUILD_RAID_LEVEL]) == 0){
            raidCost = (raidCost * 0.2);
        };
        if (int(guildData[GUILD_RAID_LEVEL]) == 1){
            raidCost = (raidCost * 0.4);
        };
        if (int(guildData[GUILD_RAID_LEVEL]) == 2){
            raidCost = (raidCost * 0.6);
        };
        if (int(guildData[GUILD_RAID_LEVEL]) == 3){
            raidCost = (raidCost * 0.8);
        };
        raidCost = Number(int((raidCost / 100)));
        lastRaidCost = raidCost;
        if (texts[TXT_RAID_TEXT]){
            if (guildData[GUILD_RAID_LEVEL] >= 50){
                enable_popup(GILDE_RAID_GRAY, texts[(TXT_RAID_TEXT + 17)]);
            } else {
                enable_popup(
                    GILDE_RAID_GRAY,
                    POPUP_BEGIN_LINE,
                    texts[(TXT_RAID_TEXT + 4)],
                    POPUP_END_LINE,
                    POPUP_BEGIN_LINE,
                    texts[(TXT_RAID_TEXT + 15)],
                    (POPUP_TAB + POPUP_TAB_ADD),
                    texts[TXT_DUNGEON_NAMES
                            + int(guildData[GUILD_RAID_LEVEL])],
                    "(" + str((int(guildData[GUILD_RAID_LEVEL]) + 1)) + "/50)",
                    POPUP_END_LINE,
                    POPUP_BEGIN_LINE,
                    texts[(TXT_RAID_TEXT + 16)],
                    (POPUP_TAB + POPUP_TAB_ADD),
                    str(raidCost),
                    actor[IF_GOLD],
                    POPUP_END_LINE
                );
            };
        };
        enable_popup(GILDE_ATTACK_GRAY, texts[(TXT_GUILD_BATTLE_POPUP + 7)]);
        enable_popup(GILDE_DEFEND_GRAY, texts[(TXT_GUILD_BATTLE_POPUP + 6)]);
        actor[LBL_GILDE_ATTACK].text = "";
        actor[LBL_GILDE_DEFENCE].text = "";
        last_guild_data = guildData;
        isRaid = !((guildData[GUILD_IS_RAID] == 0));
        send_action(
            ACT_REQUEST_GUILD_NAMES,
            guildData[GUILD_ATTACK_TARGET],
            guildData[GUILD_DEFENCE_TARGET],
            ((is_mine) ? 0 : 1)
        );
        if (guildData[0] == savegame[SG_GUILD_INDEX]){
            my_own_rank = myRank;
            my_own_attack_target = int(guildData[GUILD_ATTACK_TARGET]);
            my_own_guild_money = int(guildData[1]);
            if (
                (int(savegame[SG_SERVER_TIME])
                - int(savegame[SG_GUILD_JOIN_DATE])) > ((60 * 60) * 24)
            ){
                if ((((myRank == 1)) or ((myRank == 2)))){
                    if (int(guildData[GUILD_ATTACK_TARGET]) == 0){
                        add(GILDE_ATTACK);
                        enable_popup(
                            GILDE_ATTACK,
                            texts[(TXT_GUILD_BATTLE_POPUP + 0)]
                        );
                        if (guildData[GUILD_RAID_LEVEL] >= 50){
                            if (texts[TXT_RAID_TEXT]){
                                enable_popup(
                                    GILDE_RAID_GRAY,
                                    texts[(TXT_RAID_TEXT + 17)]
                                );
                            };
                        } else {
                            add(GILDE_RAID);
                            if (texts[TXT_RAID_TEXT]){
                                enable_popup(
                                    GILDE_RAID,
                                    POPUP_BEGIN_LINE,
                                    texts[(TXT_RAID_TEXT + 0)],
                                    POPUP_END_LINE,
                                    POPUP_BEGIN_LINE,
                                    texts[(TXT_RAID_TEXT + 15)],
                                    (POPUP_TAB + POPUP_TAB_ADD),
                                    texts[(TXT_DUNGEON_NAMES
                                        + int(guildData[GUILD_RAID_LEVEL]))],
                                    ("(" + str(int(guildData[GUILD_RAID_LEVEL])
                                        + 1)) + "/50)",
                                    POPUP_END_LINE,
                                    POPUP_BEGIN_LINE,
                                    texts[(TXT_RAID_TEXT + 16)],
                                    (POPUP_TAB + POPUP_TAB_ADD),
                                    str(raidCost),
                                    actor[IF_GOLD],
                                    POPUP_END_LINE
                                );
                            };
                        };
                    } else {
                        if (int(guildData[GUILD_ATTACK_TARGET]) < 0){
                            enable_popup(
                                GILDE_ATTACK_GRAY,
                                texts[(TXT_GUILD_BATTLE_POPUP + 5)].split(
                                    "%1").join(time_str(
                                        last_guild_data[GUILD_ATTACK_TIME])));
                            if (texts[TXT_RAID_TEXT]){
                                enable_popup(
                                    GILDE_RAID_GRAY,
                                    texts[(TXT_RAID_TEXT + 3)].split(
                                        "%1").join(time_str(
                                            last_guild_data[GUILD_ATTACK_TIME]))
                                    );
                            };
                        } else {
                            if ((myAttackStatus & 1)){
                                if (isRaid){
                                    add(GILDE_RAID_OK);
                                    if (texts[TXT_RAID_TEXT]){
                                        enable_popup(
                                            GILDE_RAID_OK,
                                            texts[(TXT_RAID_TEXT + 2)]
                                        );
                                    };
                                    if (texts[TXT_RAID_TEXT]){
                                        enable_popup(
                                            GILDE_ATTACK_GRAY,
                                            texts[(TXT_RAID_TEXT + 10)]
                                        );
                                    };
                                } else {
                                    add(GILDE_ATTACK_OK);
                                    enable_popup(
                                        GILDE_ATTACK_OK,
                                        texts[(TXT_GUILD_BATTLE_POPUP + 3)]
                                    );
                                    if (texts[TXT_RAID_TEXT]){
                                        enable_popup(
                                            GILDE_RAID_GRAY,
                                            texts[(TXT_RAID_TEXT + 11)]
                                        );
                                    };
                                };
                            } else {
                                if (isRaid){
                                    add(GILDE_RAID);
                                    if (texts[TXT_RAID_TEXT]){
                                        enable_popup(
                                            GILDE_RAID,
                                            texts[(TXT_RAID_TEXT + 1)]
                                        );
                                    };
                                    if (texts[TXT_RAID_TEXT]){
                                        enable_popup(
                                            GILDE_ATTACK_GRAY,
                                            texts[(TXT_RAID_TEXT + 10)]
                                        );
                                    };
                                } else {
                                    add(GILDE_ATTACK);
                                    enable_popup(
                                        GILDE_ATTACK,
                                        texts[(TXT_GUILD_BATTLE_POPUP + 1)]
                                    );
                                    if (texts[TXT_RAID_TEXT]){
                                        enable_popup(
                                            GILDE_RAID_GRAY,
                                            texts[(TXT_RAID_TEXT + 11)]
                                        );

                } else {
                    if (int(guildData[GUILD_ATTACK_TARGET]) == 0){
                    } else {
                        if (int(guildData[GUILD_ATTACK_TARGET]) < 0){
                            enable_popup(
                                GILDE_ATTACK_GRAY,
                                texts[(TXT_GUILD_BATTLE_POPUP + 5)].split(
                                    "%1").join(time_str(last_guild_data[
                                        GUILD_ATTACK_TIME])));
                            if (texts[TXT_RAID_TEXT]){
                                enable_popup(
                                    GILDE_RAID_GRAY,
                                    texts[(TXT_RAID_TEXT + 3)].split(
                                        "%1").join(time_str(last_guild_data[
                                            GUILD_ATTACK_TIME]))
                                    );
                            };
                        } else {
                            if (isRaid){
                                if (int(savegame[SG_GUILD_FIGHT_STATUS]) & 1):
                                    add(GILDE_RAID_OK);
                                    if (texts[TXT_RAID_TEXT]){
                                        enable_popup(
                                            GILDE_RAID_OK,
                                            texts[(TXT_RAID_TEXT + 2)]
                                        );
                                    };
                                    if (texts[TXT_RAID_TEXT]){
                                        enable_popup(
                                            GILDE_ATTACK_GRAY,
                                            texts[(TXT_RAID_TEXT + 10)]
                                        );
                                    };
                                } else {
                                    add(GILDE_RAID);
                                    if (texts[TXT_RAID_TEXT]){
                                        enable_popup(
                                            GILDE_RAID,
                                            texts[(TXT_RAID_TEXT + 1)]
                                        );
                                    };
                                    if (texts[TXT_RAID_TEXT]){
                                        enable_popup(
                                            GILDE_ATTACK_GRAY,
                                            texts[(TXT_RAID_TEXT + 10)]
                                        );
                                    };
                                };
                            } else {
                                if (int(savegame[SG_GUILD_FIGHT_STATUS]) & 1):
                                    add(GILDE_ATTACK_OK);
                                    enable_popup(
                                        GILDE_ATTACK_OK,
                                        texts[(TXT_GUILD_BATTLE_POPUP + 3)]
                                    );
                                    if (texts[TXT_RAID_TEXT]){
                                        enable_popup(
                                            GILDE_RAID_GRAY,
                                            texts[(TXT_RAID_TEXT + 11)]
                                        );
                                    };
                                } else {
                                    add(GILDE_ATTACK);
                                    enable_popup(
                                        GILDE_ATTACK,
                                        texts[(TXT_GUILD_BATTLE_POPUP + 1)]
                                    );
                                    if (texts[TXT_RAID_TEXT]){
                                        enable_popup(
                                            GILDE_RAID_GRAY,
                                            texts[(TXT_RAID_TEXT + 11)]
                                        );

                if (int(guildData[GUILD_DEFENCE_TARGET]) <= 0){
                    enable_popup(
                        GILDE_DEFEND_GRAY,
                        texts[(TXT_GUILD_BATTLE_POPUP + 6)]
                    );
                } else {
                    if ((int(savegame[SG_GUILD_FIGHT_STATUS]) & 2)){
                        add(GILDE_DEFEND_OK);
                        enable_popup(
                            GILDE_DEFEND_OK,
                            texts[(TXT_GUILD_BATTLE_POPUP + 4)]
                        );
                    } else {
                        add(GILDE_DEFEND);
                        enable_popup(
                            GILDE_DEFEND,
                            texts[(TXT_GUILD_BATTLE_POPUP + 2)]
                        );
                    };
                };
            } else {
                enable_popup(
                    GILDE_RAID_GRAY,
                    texts[TXT_GUILD_JOINED_TOO_RECENTLY].split(
                        "%1").join(time_str((Number(
                            savegame[SG_GUILD_JOIN_DATE]) + ((60 * 60) * 24)),
                            True))
                    );
                enable_popup(
                    GILDE_ATTACK_GRAY,
                    texts[TXT_GUILD_JOINED_TOO_RECENTLY].split(
                        "%1").join(time_str((Number(
                            savegame[SG_GUILD_JOIN_DATE]) + ((60 * 60) * 24)),
                            True))
                    );
                enable_popup(
                    GILDE_DEFEND_GRAY,
                    texts[TXT_GUILD_JOINED_TOO_RECENTLY].split(
                        "%1").join(time_str((Number(
                            savegame[SG_GUILD_JOIN_DATE]) + ((60 * 60) * 24)),
                        True))
                    );
            };
        } else {
            remove(GILDE_RAID);
            remove(GILDE_RAID_GRAY);
            remove(GILDE_RAID_OK);
            if (
                (int(savegame[SG_SERVER_TIME])
                 - int(savegame[SG_GUILD_JOIN_DATE])) > ((60 * 60) * 24)
            ){
                if (my_own_rank == -1){
                    remove(GILDE_ATTACK_GRAY);
                    remove(GILDE_DEFEND_GRAY);
                } else {
                    if ((((my_own_rank == 1)) or ((my_own_rank == 2)))){
                        if (int(guildData[GUILD_DEFENCE_TARGET]) == 0){
                            if (my_own_attack_target == 0){
                                if (my_own_guild_money >= AttackCost){
                                    add(GILDE_ATTACK);
                                    enable_popup(
                                        GILDE_ATTACK,
                                        POPUP_BEGIN_LINE,
                                        texts[(TXT_GUILD_BATTLE_POPUP + 8)],
                                        POPUP_END_LINE,
                                        POPUP_BEGIN_LINE,
                                        texts[(TXT_GUILD_BATTLE_POPUP + 17)],
                                        str(int((AttackCost / 100))),
                                        actor[IF_GOLD],
                                        POPUP_END_LINE
                                    );
                                } else {
                                    enable_popup(
                                        GILDE_ATTACK_GRAY,
                                        POPUP_BEGIN_LINE,
                                        texts[(TXT_GUILD_BATTLE_POPUP + 18)],
                                        POPUP_END_LINE,
                                        POPUP_BEGIN_LINE,
                                        texts[(TXT_GUILD_BATTLE_POPUP + 17)],
                                        str(int((AttackCost / 100))),
                                        actor[IF_GOLD],
                                        POPUP_END_LINE
                                    );
                                };
                            } else {
                                if (my_own_attack_target < 0){
                                    enable_popup(
                                        GILDE_ATTACK_GRAY,
                                        texts[(TXT_GUILD_BATTLE_POPUP + 11)]
                                    );
                                } else {
                                    enable_popup(
                                        GILDE_ATTACK_GRAY,
                                        texts[(TXT_GUILD_BATTLE_POPUP + 16)]
                                    );
                                };
                            };
                        } else {
                            if (
                                int(guildData[GUILD_DEFENCE_TARGET]) == int(
                                    savegame[SG_GUILD_INDEX])
                                ){
                                add(GILDE_ATTACK_OK);
                                enable_popup(
                                    GILDE_ATTACK_OK,
                                    texts[(TXT_GUILD_BATTLE_POPUP + 12)]
                                );
                            } else {
                                if (int(guildData[GUILD_DEFENCE_TARGET]) < 0){
                                    enable_popup(
                                        GILDE_ATTACK_GRAY,
                                        texts[(TXT_GUILD_BATTLE_POPUP + 11)]
                                    );
                                } else {
                                    enable_popup(
                                        GILDE_ATTACK_GRAY,
                                        texts[(TXT_GUILD_BATTLE_POPUP + 13)]
                                    );
                                };
                            };
                        };
                    } else {
                        if (
                            int(guildData[GUILD_DEFENCE_TARGET]) == int(
                                savegame[SG_GUILD_INDEX])
                            ){
                            add(GILDE_ATTACK_OK);
                            enable_popup(
                                GILDE_ATTACK_OK,
                                texts[(TXT_GUILD_BATTLE_POPUP + 12)]
                            );
                        } else {
                            enable_popup(
                                GILDE_ATTACK_GRAY,
                                texts[(TXT_GUILD_BATTLE_POPUP + 14)]
                            );
                        };
                        if (
                            int(guildData[GUILD_ATTACK_TARGET]) == int(
                               savegame[SG_GUILD_INDEX])
                            ){
                            if ((int(savegame[SG_GUILD_FIGHT_STATUS]) & 2)){
                                add(GILDE_DEFEND_OK);
                                enable_popup(
                                    GILDE_DEFEND_OK,
                                    texts[(TXT_GUILD_BATTLE_POPUP + 4)]
                                );
                            } else {
                                add(GILDE_DEFEND);
                                enable_popup(
                                    GILDE_DEFEND,
                                    texts[(TXT_GUILD_BATTLE_POPUP + 9)]
                                );
                            };
                        } else {
                            enable_popup(
                                GILDE_DEFEND_GRAY,
                                texts[(TXT_GUILD_BATTLE_POPUP + 15)]
                            );
                        };
                    };
                };
            } else {
                if (my_own_rank == -1){
                    remove(GILDE_ATTACK_GRAY);
                    remove(GILDE_DEFEND_GRAY);
                } else {
                    enable_popup(
                        GILDE_ATTACK_GRAY,
                        texts[TXT_GUILD_JOINED_TOO_RECENTLY].split(
                           "%1").join(time_str((Number(
                            savegame[SG_GUILD_JOIN_DATE]) + ((60 * 60) * 24)),
                        True))
                    );
                    enable_popup(
                        GILDE_DEFEND_GRAY,
                        texts[TXT_GUILD_JOINED_TOO_RECENTLY].split(
                            "%1").join(time_str((Number(
                                savegame[SG_GUILD_JOIN_DATE])
                                + ((60 * 60) * 24)),
                        True))
                    );
                };
            };
        };
        if (
            ((((int(guildData[GUILD_MEMBERLEVEL]) % 1000) < 50))
            or (!(texts[TXT_RAID_TEXT])))
        ){
            remove(GILDE_RAID);
            remove(GILDE_RAID_GRAY);
            remove(GILDE_RAID_OK);
        };
        if (countCompleted >= 3){
        };
        if (guildData[0] != savegame[SG_GUILD_INDEX]){
            remove(GILDE_GEBAEUDE);
            remove(GILDE_CHAT);
            remove(
                GILDE_GEBAEUDE_IMPROVE_GRAY,
                (GILDE_GEBAEUDE_IMPROVE_GRAY + 1),
                (GILDE_GEBAEUDE_IMPROVE_GRAY + 2)
            );
            remove(GILDE_SCHATZ);
        };
    };
    arrow_hall_mode = False;
    if (is_mine){
        if (int(guildData[0]) != gilden_id){
            gilden_id = int(guildData[0]);
            send_action(ACT_REQUEST_GUILD, guildData[0]);
        };
    };
    last_guild_shown = ThisGilde;
    lastGuildMembers = guildMembers.join("#").split("#");
    add_suggest_names(lastGuildMembers);
    load(SCREEN_GILDEN);
    load(GILDE_SET_MEMBER);
    load(GILDE_SET_MASTER);
    load(GILDE_RANK, (GILDE_RANK + 1), (GILDE_RANK + 2));
    load(GILDE_DIALOG_INVITE, GILDE_DIALOG_KICK, GILDE_DIALOG_MASTER);
    whendo_loaded(DoShowScreenGilden);
}

def show_work_success_screen(evt:Event=None):
    show_city_screen();
    add(SCREEN_ARBEITEN_SUCCESS);
    actor[LBL_WINDOW_TITLE].text = texts[TXT_TITLE_WORK];
    actor[LBL_WINDOW_TITLE].x = (
        (IF_WIN_X + IF_WIN_WELCOME_X)
        - int((actor[LBL_WINDOW_TITLE].text_width / 2))
    );
    actor[LBL_SCR_ARBEITEN_TEXT].text = texts[TXT_ARBEIT_TEXT5];
    actor[LBL_SCR_ARBEITEN_TEXT2].text = (
        (((texts[TXT_ARBEIT_TEXT6] + " ")
        + geld(verdientes_geld)) + " ")
        + texts[TXT_ARBEIT_TEXT7]
    );
    play(SND_JINGLE);
    CheckWrongPage(ACT_SCREEN_ARBEITEN);
}

def show_work_screen(evt:Event=None):
    var ArbeitCountdown:* = None;
    var DoShowWorking:* = None;
    var evt:* = evt;
    ArbeitCountdown = new Timer(100);
    show_city_screen();
    if (savegame[SG_ACTION_STATUS] == 1){
        DoShowWorking = function (){
            var ArbeitCountdownEvent:* = None;
            ArbeitCountdownEvent = function (evt:Event):
                var evt:* = evt;
                var _local3 = actor[LBL_SCR_ARBEITEN_TIME];
                with (_local3) {
                    if (WaitingFor(savegame[SG_ACTION_ENDTIME])){
                        if (texts[TXT_WORK_FINISH]){
                            text = texts[TXT_WORK_FINISH].split(
                                "%1").join(WaitingTime(
                                   savegame[SG_ACTION_ENDTIME])).split(
                                "%2").join(time_str(savegame[SG_ACTION_ENDTIME],
                            True));
                        } else {
                            text = WaitingTime(savegame[SG_ACTION_ENDTIME]);
                        };
                        if (on_stage(LBL_SCR_ARBEITEN_TIME)){
                            set_title_bar(text);
                        };
                        actor[SCR_ARBEITEN_FILL].width = (
                            WaitingProgress((savegame[SG_ACTION_ENDTIME]
                            - ((savegame[SG_ACTION_INDEX] * 60) * 60)),
                            savegame[SG_ACTION_ENDTIME]) * 278
                        );
                    } else {
                        ArbeitCountdown.stop();
                        ArbeitCountdown.remove_event_listener(
                            TimerEvent.TIMER, ArbeitCountdownEvent
                        );
                        if (on_stage(LBL_SCR_ARBEITEN_TIME)){
                            send_action(ACT_SCREEN_ARBEITEN);
                        };
                    };
                    x = (
                         (IF_WIN_X + IF_WIN_WELCOME_X)
                         - int((actor[LBL_SCR_ARBEITEN_TIME].text_width / 2))
                    );
                };
            };
            var _local2 = actor[SCR_ARBEITEN_BAR];
            with (_local2) {
                scaleX = 0.5;
                scaleY = 0.5;
            };
            _local2 = actor[SCR_ARBEITEN_FILL];
            with (_local2) {
                width = 0;
                scaleY = 0.5;
            };
            actor[LBL_WINDOW_TITLE].text = texts[TXT_TITLE_WORK];
            actor[LBL_WINDOW_TITLE].x = (
                (IF_WIN_X + IF_WIN_WELCOME_X)
                - int((actor[LBL_WINDOW_TITLE].text_width / 2))
            );
            actor[LBL_SCR_ARBEITEN_TEXT].text = texts[TXT_ARBEIT_TEXT4];
            ArbeitCountdown.add_event_listener(
                TimerEvent.TIMER, ArbeitCountdownEvent
            );
            ArbeitCountdown.start();
            CheckWrongPage(ACT_SCREEN_ARBEITEN);
        };
        add(SCREEN_ARBEITEN_WAIT);
        SetCnt(SCR_ARBEITEN_BAR, QUESTBAR_BG);
        SetCnt(SCR_ARBEITEN_FILL, QUESTBAR_FILL);
        whendo_loaded(DoShowWorking);
    } else {
        if (savegame[SG_ACTION_STATUS] == 0){
            add(SCREEN_ARBEITEN);
            actor[LBL_WINDOW_TITLE].text = texts[TXT_TITLE_WORK];
            actor[LBL_WINDOW_TITLE].x = (
                (IF_WIN_X + IF_WIN_WELCOME_X)
                - int((actor[LBL_WINDOW_TITLE].text_width / 2))
            );
            actor[LBL_SCR_ARBEITEN_TEXT].text = texts[TXT_ARBEIT_TEXT];
            SetSliderValue(SLDR['ARBEITEN'], 1);
            ArbeitenSliderChange(1);
        };
    };
}

def show_main_quests_screen(NextEnemies:Array){
    var i:* = 0;
    var countDone:* = 0;
    var Background:* = 0;
    var DoShowMainQuestsScreen:* = None;
    var NextEnemies:* = NextEnemies;
    var doShowCongrats:* = function (){
        remove_all();
        add(DUNGEON_CONGRATS);
    };
    DoShowMainQuestsScreen = function (){
        var thisMQSInstance:* = 0;
        var DungeonLevel:* = None;
        var NextEnemy:* = None;
        var PlayUnlockSound:* = False;
        var i:* = None;
        var MainQuestsClick:* = function (evt:MouseEvent){
            var evt:* = evt;
            if (thisMQSInstance != MQSInstance){
                i = 0;
                while (i < 9) {
                    var _local3 = actor[(MQS_BUTTON + i)].content;
                    with (_local3) {
                        remove_event_listener(
                                MouseEvent.CLICK, MainQuestsClick)
                    };
                    i++;
                };
                return;
            };
            if (get_actor_id(evt.target) == (HLMQS_BUTTON + 4)){
                send_action(ACT_SCREEN_TOWER);
            } else {
                if (countDone == 9){
                    ShowMainQuestScreen(9, (int(NextEnemies[9]) - 1));
                } else {
                    if (countDone == 10){
                        ShowMainQuestScreen(10, (int(NextEnemies[10]) - 1));
                    } else {
                        if (countDone == 11){
                            ShowMainQuestScreen(11, int(NextEnemies[11] - 1))
                        } else {
                            if (countDone == 12){
                                ShowMainQuestScreen(
                                    12, (int(NextEnemies[12]) - 1)
                                );
                            } else {
                                ShowMainQuestScreen(
                                    (get_actor_id(evt.target) - MQS_BUTTON),
                                    (int(NextEnemies[(get_actor_id(evt.target)
                                        - MQS_BUTTON)]) - 1)
                                );

        MQSInstance++;
        if (MQSInstance > 1000){
            MQSInstance = 0;
        };
        thisMQSInstance = MQSInstance;
        DungeonLevel = "";
        NextEnemy = "";
        PlayUnlockSound = False;
        remove_all();
        add(Background);
        add((((countDone >= 9)) ? SCREEN_HLMAINQUESTS : SCREEN_MAINQUESTS));
        var _local2 = actor[LBL_MAINQUESTS_TITLE];
        with (_local2) {
            x = (SCREEN_TITLE_X - int((text_width / 2)));
        };
        _local2 = actor[LBL_HLMAINQUESTS_TITLE];
        with (_local2) {
            x = (SCREEN_TITLE_X - int((text_width / 2)));
        };
        if (countDone < 9){
            i = 0;
            while (i < 9) {
                if (int(NextEnemies[i]) >= 500){
                    NextEnemy = texts[
                        ((TXT_COPYCAT_NAME + int(NextEnemies[i])) - 500)
                    ];
                } else {
                    if (int(NextEnemies[i]) > 220){
                        NextEnemy = texts[
                            TXT_NEW_MONSTER_NAMES + int(NextEnemies[i]) - 221
                        ];
                    } else {
                        NextEnemy = texts[
                            ((int(NextEnemies[i]))==-1)
                                ? TXT_ENEMY_SELF
                                : (TXT_MONSTER_NAME + int(NextEnemies[i]) - 1)
                            ];
                    };
                };
                SetCnt((MQS_DISABLED + i), MQS_DISABLED);
                SetCnt((MQS_COMPLETED + i), MQS_COMPLETED);
                _local2 = actor[(MQS_DISABLED + i)];
                with (_local2) {
                    visible = (int(savegame[(SG_DUNGEON_LEVEL + i)]) <= 1);
                    alpha = 1;
                };
                actor[(MQS_COMPLETED + i)].visible = (
                    int(savegame[(SG_DUNGEON_LEVEL + i)]) >= 12
                );
                SetCnt((MQS_BUTTON + i), (MQS_BUTTON + i));
                DungeonLevel = str((int(savegame[(SG_DUNGEON_LEVEL + i)]) - 1))
                if (DungeonLevel == "0"){
                    PlayUnlockSound = True;
                    fade_out((MQS_DISABLED + i), 20, 0.05, 0, True);
                    DungeonLevel = "1";
                };
                enable_popup(
                    (MQS_BUTTON + i),
                    POPUP_BEGIN_LINE,
                    texts[(TXT_DUNGEON_NAME + i)].split("|")[0],
                    POPUP_END_LINE,
                    POPUP_BEGIN_LINE,
                    FontFormat_EpicItemQuote,
                    texts[(TXT_DUNGEON_NAME + i)].split("|")[1],
                    FontFormat_Popup,
                    POPUP_END_LINE,
                    POPUP_BEGIN_LINE,
                    texts[TXT_DUNGEON_INFO].split(
                        "%1").join(DungeonLevel).split(
                        "%2").join(NextEnemy),
                    POPUP_END_LINE
                );
                _local2 = actor[(MQS_BUTTON + i)];
                with (_local2) {
                    add_event_listener(MouseEvent.CLICK, MainQuestsClick);
                    buttonMode = True;
                    useHandCursor = True;
                    mouseChildren = False;
                };
                i = (i + 1);
            };
        } else {
            i = 0;
            while (i < 5) {
                if (i < 4){
                    SetCnt((HLMQS_DISABLED + i), MQS_DISABLED);
                    SetCnt((HLMQS_COMPLETED + i), MQS_COMPLETED);
                    if (i == 0){
                        DungeonLevel = savegame[(SG_DUNGEON_LEVEL + 9)];
                        if (countDone > 9){
                            actor[(HLMQS_DISABLED + i)].visible = False;
                            actor[(HLMQS_COMPLETED + i)].visible = True;
                        } else {
                            actor[(HLMQS_COMPLETED + i)].visible = False;
                            actor[(HLMQS_DISABLED + i)].alpha = 1;
                            if (DungeonLevel == "0"){
                                actor[(HLMQS_DISABLED + i)].visible = True;
                                PlayUnlockSound = True;
                                fade_out(
                                    (HLMQS_DISABLED + i), 20, 0.05, 0, True
                                );
                                DungeonLevel = "1";
                            } else {
                                DungeonLevel = str((int(DungeonLevel) - 1));
                                actor[(HLMQS_DISABLED + i)].visible = False;
                            };
                        };
                        Switch (DungeonLevel){
                            if case("1":
                                NextEnemy = texts[2300];
                                break;
                            if case("2":
                                NextEnemy = texts[2314];
                                break;
                            if case("3":
                                NextEnemy = texts[2358];
                                break;
                            if case("4":
                                NextEnemy = texts[2220];
                                break;
                            if case("5":
                                NextEnemy = texts[2260];
                                break;
                            if case("6":
                                NextEnemy = texts[2362];
                                break;
                            if case("7":
                                NextEnemy = texts[2360];
                                break;
                            if case("8":
                                NextEnemy = texts[2358];
                                break;
                            if case("9":
                                NextEnemy = texts[2357];
                                break;
                            if case("10":
                                NextEnemy = texts[2364];
                                break;
                        };
                    } else {
                        if (i == 1){
                            if (countDone > 10){
                                actor[(HLMQS_DISABLED + i)].visible = False;
                                actor[(HLMQS_COMPLETED + i)].visible = True;
                            } else {
                                if (countDone == 10){
                                    actor[HLMQS_COMPLETED + i].visible = False
                                    actor[(HLMQS_DISABLED + i)].alpha = 1;
                                    DungeonLevel = savegame[
                                            SG_NEW_DUNGEONS + 0]
                                    if (DungeonLevel == "0"){
                                        actor[
                                            HLMQS_DISABLED + i].visible = True
                                        PlayUnlockSound = True;
                                        fade_out(
                                            (HLMQS_DISABLED + i),
                                            20, 0.05, 0, True
                                        );
                                        DungeonLevel = "1";
                                    } else {
                                        DungeonLevel = str(
                                            (int(DungeonLevel) - 1)
                                        );
                                        actor[
                                            HLMQS_DISABLED + i
                                        ].visible = False
                                    };
                                } else {
                                    actor[HLMQS_COMPLETED + i].visible = False
                                    actor[(HLMQS_DISABLED + i)].alpha = 1;
                                    actor[(HLMQS_DISABLED + i)].visible = True;
                                };
                            };
                            NextEnemy = texts[(2372 + int(DungeonLevel)) - 1]
                        } else {
                            if (i == 2){
                                if (countDone > 11){
                                    actor[(HLMQS_DISABLED + i)].visible = False
                                    actor[(HLMQS_COMPLETED + i)].visible = True
                                } else {
                                    if (countDone == 11){
                                        actor[
                                            HLMQS_COMPLETED + i
                                        ].visible = False
                                        actor[(HLMQS_DISABLED + i)].alpha = 1;
                                        DungeonLevel = savegame[
                                            SG_NEW_DUNGEONS + 1
                                        ]
                                        if (DungeonLevel == "0"){
                                            actor[
                                                HLMQS_DISABLED + i
                                            ].visible = True;
                                            PlayUnlockSound = True;
                                            fade_out(
                                                (HLMQS_DISABLED + i),
                                                20, 0.05, 0, True
                                            );
                                            DungeonLevel = "1";
                                        } else {
                                            DungeonLevel = str(
                                                (int(DungeonLevel) - 1)
                                            );
                                            actor[
                                                (HLMQS_DISABLED + i)
                                            ].visible = False;
                                        };
                                    } else {
                                        actor[
                                            (HLMQS_COMPLETED + i)
                                        ].visible = False;
                                        actor[(HLMQS_DISABLED + i)].alpha = 1;
                                        actor[
                                            (HLMQS_DISABLED + i)
                                        ].visible = True;
                                    };
                                };
                                NextEnemy = texts[2382 + int(DungeonLevel) - 1]
                            } else {
                                if (i == 3){
                                    if (countDone > 12){
                                        actor[
                                            HLMQS_DISABLED + i
                                        ].visible = False
                                        actor[
                                            (HLMQS_COMPLETED + i)
                                        ].visible = True;
                                    } else {
                                        if (countDone == 12){
                                            actor[
                                                (HLMQS_COMPLETED + i)
                                            ].visible = False;
                                            actor[HLMQS_DISABLED + i].alpha = 1
                                            DungeonLevel = str((int(savegame[
                                                SG_DUNGEON_13]) - 120));
                                            if (DungeonLevel == "0"){
                                                actor[
                                                    HLMQS_DISABLED + i
                                                ].visible = True;
                                                PlayUnlockSound = True;
                                                fade_out(
                                                    (HLMQS_DISABLED + i),
                                                    20, 0.05, 0, True
                                                );
                                                DungeonLevel = "1";
                                            } else {
                                                DungeonLevel = str(
                                                    (int(DungeonLevel) - 1));
                                                actor[
                                                    (HLMQS_DISABLED + i)
                                                ].visible = False;
                                            };
                                        } else {
                                            actor[
                                                (HLMQS_COMPLETED + i)
                                            ].visible = False;
                                            actor[
                                                (HLMQS_DISABLED + i)
                                            ].alpha = 1;
                                            actor[
                                                (HLMQS_DISABLED + i)
                                            ].visible = True;
                                        };
                                    };
                                    NextEnemy = texts[
                                        ((9032 + int(DungeonLevel)) - 1)
                                    ];
                                };
                            };
                        };
                    };
                } else {
                    SetCnt((HLMQS_COMPLETED + i), HLMQS_TOWER_DISABLED);
                    NextEnemy = texts[
                        (TXT_TOWER_ENEMY_NAMES + tower_level)
                    ].split("|")[0];
                    DungeonLevel = str((tower_level + 1));
                    if (tower_level >= 100){
                        actor[(HLMQS_COMPLETED + i)].visible = True;
                    } else {
                        actor[(HLMQS_COMPLETED + i)].visible = False;
                    };
                };
                SetCnt((HLMQS_BUTTON + i), (HLMQS_BUTTON + i));
                enable_popup(
                    (HLMQS_BUTTON + i),
                    POPUP_BEGIN_LINE,
                    texts[(TXT_HL_MAINQUESTS_NAME + i)].split("|")[0],
                    POPUP_END_LINE, POPUP_BEGIN_LINE,
                    FontFormat_EpicItemQuote,
                    texts[(TXT_HL_MAINQUESTS_NAME + i)].split("|")[1],
                    FontFormat_Popup,
                    POPUP_END_LINE,
                    POPUP_BEGIN_LINE,
                    texts[(((i == 4))
                           ? TXT_TOWER_INFO
                           : TXT_DUNGEON_INFO)].split(
                        "%1").join(DungeonLevel).split(
                        "%2").join(NextEnemy).split(
                        "%3").join(str(tower_level)),
                    POPUP_END_LINE
                );
                _local2 = actor[(HLMQS_BUTTON + i)];
                with (_local2) {
                    add_event_listener(MouseEvent.CLICK, MainQuestsClick);
                    buttonMode = True;
                    useHandCursor = True;
                    mouseChildren = False;
                };
                i = (i + 1);
            };
        };
        if (PlayUnlockSound){
            play(SND_MAINQUESTS_UNLOCK);
        };
    };
    countDone = 0;
    i = 0;
    while (i < 10) {
        if (int(savegame[(SG_DUNGEON_LEVEL + i)]) >= 12){
            countDone = (countDone + 1);
        };
        i = (i + 1);
    };
    i = 0;
    while (i < 2) {
        if (int(savegame[(SG_NEW_DUNGEONS + i)]) >= 12){
            countDone = (countDone + 1);
        };
        i = (i + 1);
    };
    if (int(savegame[SG_DUNGEON_13]) >= (120 + 12)){
        countDone = (countDone + 1);
    };
    Background = (SCR_QUEST_BG_1 + 50);
    load(Background);
    load((((countDone >= 9)) ? SCREEN_HLMAINQUESTS : SCREEN_MAINQUESTS));
    load(MQS_DISABLED);
    load(MQS_COMPLETED);
    if (countDone >= 9){
        load(HLMQS_TOWER_DISABLED);
        load(HLMQS_TOWER_COMPLETED);
    };
    i = 0;
    while (i < 9) {
        load((MQS_BUTTON + i));
        i = (i + 1);
    };
    whendo_loaded(DoShowMainQuestsScreen);
}

def ShowMainQuestScreen(DungeonNr=0, Enemy=0){
    var DoShowMainQuestScreen:* = None;
    var MQDelayCheck:* = None;
    var DungeonNr = DungeonNr;
    var Enemy = Enemy;
    DoShowMainQuestScreen = function (){
        var DungeonLevel:* = None;
        var i:* = 0;
        DungeonLevel = "";
        if (DungeonNr == 100){
            DungeonLevel = str((tower_level + 1));
        } else {
            if (DungeonNr == 12){
                DungeonLevel = str((int(savegame[SG_DUNGEON_13]) - 121));
            } else {
                if (DungeonNr >= 10){
                    DungeonLevel = str(
                       (int(savegame[(SG_NEW_DUNGEONS + DungeonNr - 10)]) - 1)
                    );
                } else {
                    DungeonLevel = str(
                        (int(savegame[(SG_DUNGEON_LEVEL + DungeonNr)]) - 1)
                    );
                };
            };
        };
        remove_all();
        if (DungeonNr != 100){
            if (DungeonLevel == "0"){
                DungeonLevel = "1";
            };
            if (int(DungeonLevel) >= 120){
                DungeonLevel = "1";
            };
            var _local2 = actor[LBL_MAINQUEST_TITLE];
            with (_local2) {
                text = texts[(TXT_DUNGEON_INFO + 3)].split(
                    "%1").join(texts[(TXT_DUNGEON_NAME + DungeonNr)].split(
                    "|")[0]).split(
                    "%2").join(DungeonLevel
                );
                x = (SCREEN_TITLE_X - (text_width / 2));
            };
        } else {
            _local2 = actor[LBL_MAINQUEST_TITLE];
            with (_local2) {
                text = (
                    (texts[TXT_TOWER_LEVEL].split(
                        "%1").join(DungeonLevel) + " - ")
                    + texts[((TXT_TOWER_ENEMY_NAMES + Enemy) - 399)].split(
                        "|")[0]);
                x = (SCREEN_TITLE_X - (text_width / 2));
            };
        };
        _local2 = actor[LBL_MAINQUEST_TEXT];
        with (_local2) {
            text = questText.split("#").join(chr(13));
        };
        arabize(LBL_MAINQUEST_TEXT);
        if (text_dir == "right"){
            set_btn_text(
                MAINQUEST_START,
                (((WaitingFor(savegame[SG_MQ_REROLL_TIME])) ? "(~P1) " : "")
                    + texts[TXT_OK]));
        } else {
            set_btn_text(
                MAINQUEST_START,
                (texts[TXT_OK] + ((WaitingFor(savegame[SG_MQ_REROLL_TIME]))
                    ? " (1~P)" : ""))
                );
        };
        if (WaitingFor(savegame[SG_MQ_REROLL_TIME])){
            show(LBL_MAINQUEST_MUSHHINT);
            actor[LBL_MAINQUEST_MUSHHINT].text =
                texts[TXT_MQ_MUSHHINT].split(
                    "%1").join(WaitingTime(savegame[SG_MQ_REROLL_TIME]));
            arabize(LBL_MAINQUEST_MUSHHINT);
            MQDelayTimer.add_event_listener(TimerEvent.TIMER, MQDelayCheck);
            MQDelayTimer.start();
        } else {
            hide(LBL_MAINQUEST_MUSHHINT);
        };
        if (DungeonNr == 100){
            add(SCR_TOWER_BG);
        } else {
            add(((SCR_QUEST_BG_1 + 50) + DungeonNr));
        };
        SetCnt(MAINQUEST_ENEMY_BORDER, FIGHT_CHAR_BORDER);
        add(SCREEN_MAINQUEST);
        if (Enemy < 0){
            i = 0;
            while (i < 10) {
                _local2 = actor[(CHARBACKGROUND + i)];
                with (_local2) {
                    x = actor[MAINQUEST_ENEMY].x;
                    y = actor[MAINQUEST_ENEMY].y;
                    scaleX = 1;
                    scaleY = 1;
                };
                i = (i + 1);
            };
            LoadCharacterImage();
        } else {
            SetCnt(MAINQUEST_ENEMY, (OPPMONSTER + Enemy));
        };
        SelectedDungeon = DungeonNr;
    };
    MQDelayCheck = function (evt:TimerEvent=None){
        if (!on_stage(SHP_MAINQUEST)){
            MQDelayTimer.remove_event_listener(TimerEvent.TIMER, MQDelayCheck);
            MQDelayTimer.stop();
            return;
        };
        if (WaitingFor(savegame[SG_MQ_REROLL_TIME])){
            show(LBL_MAINQUEST_MUSHHINT);
            actor[LBL_MAINQUEST_MUSHHINT].text = texts[TXT_MQ_MUSHHINT].split(
                "%1").join(WaitingTime(savegame[SG_MQ_REROLL_TIME]));
            set_title_bar(WaitingTime(savegame[SG_MQ_REROLL_TIME]));
        } else {
            hide(LBL_MAINQUEST_MUSHHINT);
            set_title_bar();
            MQDelayTimer.remove_event_listener(TimerEvent.TIMER, MQDelayCheck);
            MQDelayTimer.stop();
        };
        if (text_dir == "right"){
            set_btn_text(
                MAINQUEST_START,
                (((WaitingFor(savegame[SG_MQ_REROLL_TIME])) ? "(~P1) " : "")
                + texts[TXT_OK])
            );
        } else {
            set_btn_text(
                MAINQUEST_START,
                (texts[TXT_OK] + ((WaitingFor(savegame[SG_MQ_REROLL_TIME]))
                    ? " (1~P)" : "")));
        };
    };
    var questText:* = "";
    if (savegame[SG_DUNGEON_13] < 122){
        savegame[SG_DUNGEON_13] = 122;
    };
    if (DungeonNr == 100){
        questText = texts[(TXT_TOWER_ENEMY_NAMES + tower_level)].split("|")[1];
    } else {
        if (DungeonNr == 12){
            questText = texts[
                ((TXT_QUEST_TEXT + (DungeonNr * 10))
                + ((((int(savegame[SG_DUNGEON_13]) - 2) < 120))
                   ? 0 : ((int(savegame[SG_DUNGEON_13]) - 2) - 120)))];
        } else {
            if (DungeonNr >= 10){
                questText = texts[
                    ((TXT_QUEST_TEXT + (DungeonNr * 10))
                    + ((((int(savegame[((SG_NEW_DUNGEONS + DungeonNr) - 10)])
                    - 2) < 0)) ? 0 : (int(savegame[((SG_NEW_DUNGEONS
                    + DungeonNr) - 10)]) - 2)))];
            } else {
                questText = texts[
                    ((TXT_QUEST_TEXT + (DungeonNr * 10))
                    + ((((int(savegame[(SG_DUNGEON_LEVEL + DungeonNr)])
                    - 2) < 0)) ? 0 : (int(savegame[(SG_DUNGEON_LEVEL
                    + DungeonNr)]) - 2)))];
            };
        };
    };
    hasLostMQ = False;
    LastDungeonNr = DungeonNr;
    LastDungeonEnemy = Enemy;
    load(SCREEN_MAINQUEST);
    if (DungeonNr == 100){
        load(SCR_TOWER_BG);
    } else {
        load(((SCR_QUEST_BG_1 + 50) + DungeonNr));
    };
    load(FIGHT_CHAR_BORDER);
    if (Enemy >= 0){
        load((OPPMONSTER + Enemy));
    };
    whendo_loaded(DoShowMainQuestScreen);
}

def show_toilet(
    isFull, toiletLevel, toiletExp:Number, toiletMaxExp:Number,
    itemAdded=-1
){
    var doShowToilet:* = None;
    var isFull:* = isFull;
    var toiletLevel:* = toiletLevel;
    var toiletExp:* = toiletExp;
    var toiletMaxExp:* = toiletMaxExp;
    var itemAdded = itemAdded;
    doShowToilet = function (buildScreen=True){
        var i:* = 0;
        var toiletItemAddFrame:* = 0;
        var toiletItemAddTimer:* = None;
        var gatheredItemId:* = 0;
        var itemDestX:* = NaN;
        var itemDestY:* = NaN;
        var toiletItemAddFrameEvent:* = None;
        var buildScreen:Boolean = buildScreen;
        toiletTankDest = (toiletExp / toiletMaxExp);
        toiletTankAdjustTimer.stop();
        if (buildScreen){
            toiletTankCurrent = toiletTankDest;
            remove(CHAR_RIGHTPANE);
            add(SCREEN_TOILET);
            hide(TOILET_OVERLAYS);
            show(TOILET_CHAIN);
        };
        display_inventory(None, True);
        enable_popup(
            CA_TOILET_TANK,
            texts[TXT_TOILET_HINT].split(
                "%1").join(str(int((toiletTankDest * 100)))).split(
                "%2").join(str(toiletExp)).split("%3").join(str(toiletMaxExp))
        );
        if (isFull == 0){
            hide(TOILET_IDLE);
        } else {
            show(TOILET_IDLE);
        };
        hide(TOILET_DROP);
        actor[LBL_TOILET_AURA].text = texts[(TXT_TOILET_HINT + 4)].split(
            "#").join(chr(13)).split("%1").join(str(toiletLevel));
        actor[LBL_TOILET_AURA].x = (
            (SCR_SHOP_BG_X + 248) - (actor[LBL_TOILET_AURA].text_width / 2));
        toiletTankAdjustEvent();
        if (toiletTankDest != toiletTankCurrent){
            toiletTankAdjustTimer.start();
        };
        if (itemAdded >= 0){
            toiletItemAddFrameEvent = function (evt:TimerEvent){
                if ((((toiletItemAddFrame >= 50)) or (!(on_stage(TOILET))))){
                    actor[gatheredItemId].x = itemDestX;
                    actor[gatheredItemId].y = itemDestY;
                    actor[gatheredItemId].alpha = 1;
                    toiletItemAddTimer.stop();
                    toiletItemAddTimer.remove_event_listener(
                       TimerEvent.TIMER, toiletItemAddFrameEvent
                    );
                } else {
                    if (toiletItemAddFrame >= 35){
                        actor[gatheredItemId].alpha = 1;
                        actor[gatheredItemId].x = (
                            (actor[gatheredItemId].x + itemDestX) / 2);
                        actor[gatheredItemId].y = (
                            (actor[gatheredItemId].y + itemDestY) / 2);
                    } else {
                        actor[gatheredItemId].alpha = (toiletItemAddFrame / 35)
                        actor[gatheredItemId].y = (actor[gatheredItemId].y - 5)
                    };
                };
                i = 0;
                while (i < 7) {
                    hide((TOILET_FLUSH + i));
                    i++;
                };
                show((TOILET_FLUSH + int(((toiletItemAddFrame / 50) * 7))));
                toiletItemAddFrame++;
            };
            toiletItemAddFrame = 0;
            toiletItemAddTimer = new Timer(25);
            play(SND_TOILET_FLUSH);
            toiletItemAddTimer.add_event_listener(
                TimerEvent.TIMER, toiletItemAddFrameEvent
            );
            toiletItemAddTimer.start();
            gatheredItemId = (CHAR_SLOT_11 + itemAdded);
            Switch (itemAdded){
                if case(0:
                    itemDestX = CHAR_SLOTS_LEFT_X;
                    itemDestY = CHAR_SLOTS_ROW5_Y;
                    break;
                if case(1:
                    itemDestX = CHAR_SLOTS_R5C2_X;
                    itemDestY = CHAR_SLOTS_ROW5_Y;
                    break;
                if case(2:
                    itemDestX = CHAR_SLOTS_R5C3_X;
                    itemDestY = CHAR_SLOTS_ROW5_Y;
                    break;
                if case(3:
                    itemDestX = CHAR_SLOTS_R5C4_X;
                    itemDestY = CHAR_SLOTS_ROW5_Y;
                    break;
                if case(4:
                    itemDestX = CHAR_SLOTS_RIGHT_X;
                    itemDestY = CHAR_SLOTS_ROW5_Y;
                    break;
            };
            actor[gatheredItemId].alpha = 0;
            actor[gatheredItemId].x = (SCR_SHOP_BG_X + 205);
            actor[gatheredItemId].y = 590;
        };
    };
    if (on_stage(TOILET)){
        doshow_toilet(False);
        return;
    };
    load(SCREEN_TOILET);
    show_character_screen();
    whendo_loaded(doShowToilet);
}

def show_witch(
    witchData:Array, chaldronBubble=False, enchantCost=0
){
    var doShowWitch:* = None;
    var witchData:* = witchData;
    var chaldronBubble:Boolean = chaldronBubble;
    var enchantCost = enchantCost;
    doShowWitch = function (buildScreen=True){
        var i;
        if (buildScreen){
            remove(CHAR_RIGHTPANE);
            add(SCREEN_WITCH);
        };
        if (!light_mode){
            witch_ani_timer.start();
        };
        witchDesiredType = witchData[3];
        display_inventory(None, False, False, 0, True);
        i = 0;
        while (i < int(witchData[7])) {
            load(GetItemID(14, int(witchData[(9 + (3 * i))]), None, 0));
            SetCnt(
                (WITCH_SCROLL + i),
                GetItemID(14, int(witchData[(9 + (3 * i))]),
                None,
                0)
            );
            suggestion_slot[(WITCH_SCROLL + i)] = (
                CHAR_SLOT_1 + CorrectItemType.find(math.floor(
                   (int(witchData[(9 + (3 * i))]) / 10))));
            trace(
                i,
                savegame[((SG_INVENTORY_OFFS + (CorrectItemType.find(
                    math.floor((int(witchData[(9 + (3 * i))]) / 10))
                ) * SG['ITM']['SIZE'])) + SG_ITM_EXT_ENCHANT)]);
            if (
                savegame[((SG_INVENTORY_OFFS + (CorrectItemType.find(
                    math.floor((int(witchData[(9 + (3 * i))]) / 10))
                    ) * SG['ITM']['SIZE'])) + SG_ITM_EXT_ENCHANT)] != 0
                ){
                actor[(WITCH_SCROLL + i)].alpha = 0.5;
                enable_popup(
                    (WITCH_SCROLL + i),
                    POPUP_BEGIN_LINE,
                    texts[
                        ((TXT_ITMNAME_14 + int(witchData[(9 + (3 * i))])) - 1)
                    ].split("|")[0],
                    POPUP_END_LINE,
                    POPUP_BEGIN_LINE,
                    texts[
                        (TXT_ITMNAME_14 + int(witchData[(9 + (3 * i))])) - 1
                    ].split("|")[1],
                    POPUP_END_LINE,
                    POPUP_BEGIN_LINE,
                    texts[TXT_SCROLL_DATE].split(
                        "%1").join(time_str(Number(
                            witchData[(10 + (3 * i))]), True)),
                    POPUP_END_LINE,
                    POPUP_BEGIN_LINE,
                    texts[TXT_SCROLL_BOUGHT],
                    POPUP_END_LINE
                );
            } else {
                if (enchantCost){
                    actor[(WITCH_SCROLL + i)].alpha = 1;
                    enable_popup(
                        (WITCH_SCROLL + i),
                        POPUP_BEGIN_LINE,
                        texts[((TXT_ITMNAME_14 + int(
                            witchData[(9 + (3 * i))])) - 1)].split("|")[0],
                        POPUP_END_LINE,
                        POPUP_BEGIN_LINE,
                        texts[((TXT_ITMNAME_14 + int(
                           witchData[(9 + (3 * i))])) - 1)].split("|")[1],
                        POPUP_END_LINE,
                        POPUP_BEGIN_LINE,
                        texts[TXT_SCROLL_DATE].split(
                            "%1").join(time_str(Number(witchData[
                                (10 + (3 * i))]), True)),
                        POPUP_END_LINE,
                        POPUP_BEGIN_LINE,
                        texts[TXT_SCROLL_BUYNOW],
                        POPUP_END_LINE,
                        POPUP_BEGIN_LINE,
                        actor[IF_GOLD],
                        str(math.floor((enchantCost / 100))),
                        POPUP_END_LINE
                    );
                } else {
                    actor[(WITCH_SCROLL + i)].alpha = 1;
                    enable_popup(
                        (WITCH_SCROLL + i),
                        POPUP_BEGIN_LINE,
                        texts[((TXT_ITMNAME_14 + int(
                            witchData[(9 + (3 * i))])) - 1)].split("|")[0],
                        POPUP_END_LINE,
                        POPUP_BEGIN_LINE,
                        texts[((TXT_ITMNAME_14 + int(witchData[
                            (9 + (3 * i))])) - 1)].split("|")[1],
                        POPUP_END_LINE,
                        POPUP_BEGIN_LINE,
                        texts[TXT_SCROLL_DATE].split(
                            "%1").join(time_str(Number(
                                witchData[(10 + (3 * i))]), True)),
                        POPUP_END_LINE,
                        POPUP_BEGIN_LINE,
                        texts[TXT_SCROLL_BUYHINT],
                        POPUP_END_LINE
                    );
                };
            };
            actor[(WITCH_SCROLL + i)].scaleX = 0.8;
            actor[(WITCH_SCROLL + i)].scaleY = 0.8;
            add((WITCH_SCROLL + i));
            i++;
        };
        if (witchData[2] == -1){
            enable_popup(CA_WITCH, texts[(TXT_WITCH_HINT + 6)]);
            enable_popup(CA_CHALDRON, texts[(TXT_WITCH_HINT + 7)]);
        } else {
            if (witchData[5] == 0){
                enable_popup(
                    CA_WITCH,
                    texts[TXT_WITCH_HINT].split(
                        "%1").join(texts[((TXT_WITCH_HINT + 12) + int(
                            witchData[3]))])
                    );
                enable_popup(
                    CA_CHALDRON,
                    POPUP_BEGIN_LINE,
                    texts[(TXT_WITCH_HINT + 2)],
                    (POPUP_TAB + 100),
                    texts[((TXT_WITCH_HINT + 12) + int(witchData[3]))],
                    POPUP_END_LINE,
                    POPUP_BEGIN_LINE,
                    texts[(TXT_WITCH_HINT + 3)],
                    (POPUP_TAB + 100),
                    texts[(TXT_WITCH_HINT + 4)].split(
                        "%1").join(str((math.round((
                            (witchData[1] / witchData[2]) * 100000)) / 1000))
                            ).split(
                        "%2").join(str(witchData[2])),
                    POPUP_END_LINE
                );
            } else {
                enable_popup(CA_WITCH, texts[(TXT_WITCH_HINT + 1)]);
                enable_popup(CA_CHALDRON, texts[(TXT_WITCH_HINT + 5)]);
            };
        };
    };
    if (chaldronBubble){
        play(SND_TOILET_DROP);
    };
    if (on_stage(WITCH)){
        doshow_witch(False);
        return;
    };
    load(SCREEN_WITCH);
    show_character_screen(None, True);
    whendo_loaded(doShowWitch);
}

def Showalbum_content(evt:Event=None){
    var i:* = 0;
    var entryText:* = None;
    var hintText:* = None;
    var hunterOffs:* = 0;
    var actor_id:* = 0;
    var contentCount:* = 0;
    var catMax:* = None;
    var catCount:* = None;
    var evt:* = evt;
    var SetAlbumItems:* = function (
        aOffs, itmTyp, itm_pic, itm_class
    ){
        var itemSet:Array;
        var anyItem:Boolean;
        var j;
        itemSet = list();
        anyItem = False;
        j = 0;
        while (j < 5) {
            itemSet[j] = album_content[(aOffs + j)];
            if (itemSet[j] == 1){
                anyItem = True;
            };
            j++;
        };
        if (anyItem){
            entryText = GetItemName(itmTyp, itm_pic, itm_class);
            if (itm_class > 0){
                itm_class--;
            };
            SetCnt(
               (ALBUM_WEAPON_1 + i),
               GetItemID(itmTyp, itm_pic, 0, itm_class)
            );
            SetCnt(
               (ALBUM_WEAPON_2 + i),
               GetItemID(itmTyp, itm_pic, 1, itm_class)
            );
            SetCnt(
               (ALBUM_WEAPON_3 + i),
               GetItemID(itmTyp, itm_pic, 2, itm_class)
            );
            SetCnt(
                (ALBUM_WEAPON_4 + i),
                GetItemID(itmTyp, itm_pic, 3, itm_class)
            );
            SetCnt(
               (ALBUM_WEAPON_5 + i),
               GetItemID(itmTyp, itm_pic, 4, itm_class)
            );
            actor[(ALBUM_WEAPON_1 + i)].alpha = ((itemSet[0]) ? 1 : 0.3);
            actor[(ALBUM_WEAPON_2 + i)].alpha = ((itemSet[1]) ? 1 : 0.3);
            actor[(ALBUM_WEAPON_3 + i)].alpha = ((itemSet[2]) ? 1 : 0.3);
            actor[(ALBUM_WEAPON_4 + i)].alpha = ((itemSet[3]) ? 1 : 0.3);
            actor[(ALBUM_WEAPON_5 + i)].alpha = ((itemSet[4]) ? 1 : 0.3);
            if (showAlbumOffset){
                enable_popup((ALBUM_WEAPON_1 + i), str((aOffs + 0)));
                enable_popup((ALBUM_WEAPON_2 + i), str((aOffs + 1)));
                enable_popup((ALBUM_WEAPON_3 + i), str((aOffs + 2)));
                enable_popup((ALBUM_WEAPON_4 + i), str((aOffs + 3)));
                enable_popup((ALBUM_WEAPON_5 + i), str((aOffs + 4)));
            } else {
                enable_popup((ALBUM_WEAPON_1 + i));
                enable_popup((ALBUM_WEAPON_2 + i));
                enable_popup((ALBUM_WEAPON_3 + i));
                enable_popup((ALBUM_WEAPON_4 + i));
                enable_popup((ALBUM_WEAPON_5 + i));
                if ((((itmTyp == 1)) and ((itm_class > 1)))){
                };
            };
        };
        if (showAlbumOffset){
            enable_popup(
                (LBL_ALBUM_HEADING + i),
                ((str(aOffs) + " - ") + str((aOffs + 4)))
            );
        };
    };
    var SetAlbumEpic:* = function (
        aOffs, itmTyp, itm_pic, itm_class
    ){
        if (album_content[aOffs] == 1){
            entryText = GetItemName(itmTyp, itm_pic, itm_class);
            if (entryText.find("|") != -1){
                hintText = entryText.split("|")[1].split("#").join(chr(13));
                entryText = entryText.split("|")[0];
            };
            if (itm_class > 0){
                itm_class--;
            };
            SetCnt(
               (ALBUM_WEAPON_EPIC + i),
               GetItemID(itmTyp, itm_pic, 0, itm_class));
            if (showAlbumOffset){
                enable_popup((ALBUM_WEAPON_EPIC + i), str(aOffs));
            } else {
                enable_popup((ALBUM_WEAPON_EPIC + i));
            };
        };
        if (showAlbumOffset){
            enable_popup((LBL_ALBUM_HEADING + i), str(aOffs));
        };
    };
    entryText = "";
    hintText = "";
    hunterOffs = 0;
    AlbumClear();
    actor_id = 0;
    if (evt){
        actor_id = get_actor_id(evt.target);
    };
    if (actor_id == ALBUM_PREV){
        albumPage--;
    };
    if (actor_id == ALBUM_NEXT){
        albumPage++;
    };
    if (
        (((actor_id >= ALBUM_CAT_OUT))
        and ((actor_id <= (ALBUM_CAT_OUT + 4))))
    ){
        albumCat = (actor_id - ALBUM_CAT_OUT);
        albumPage = 0;
    };
    hide(ALBUM_CAT_IN);
    show((ALBUM_CAT_IN + albumCat));
    contentCount = 0;
    catMax = [252, 246, 506, 348, 348];
    catCount = [0, 0, 0, 0, 0];
    i = 0;
    while (i < album_content.length) {
        if (album_content[i] == 1){
            if (i < 300){
                var _local3 = catCount;
                var _local4;
                var _local5 = (_local3[_local4] + 1);
                _local3[_local4] = _local5;
            } else {
                if (i < 792){
                    _local3 = catCount;
                    _local4 = 1;
                    _local5 = (_local3[_local4] + 1);
                    _local3[_local4] = _local5;
                } else {
                    if (i < 1804){
                        _local3 = catCount;
                        _local4 = 2;
                        _local5 = (_local3[_local4] + 1);
                        _local3[_local4] = _local5;
                    } else {
                        if (i < 2500){
                            _local3 = catCount;
                            _local4 = 3;
                            _local5 = (_local3[_local4] + 1);
                            _local3[_local4] = _local5;
                        } else {
                            _local3 = catCount;
                            _local4 = 4;
                            _local5 = (_local3[_local4] + 1);
                            _local3[_local4] = _local5;
                        };
                    };
                };
            };
            contentCount = (contentCount + 1);
        };
        i = (i + 1);
    };
    if (contentCount > contentMax){
        contentCount = contentMax;
    };
    i = 0;
    while (i < 5) {
        if (catCount[i] > catMax[i]){
            catCount[i] = catMax[i];
        };
        i = (i + 1);
    };
    actor[LBL_ALBUM_COLLECTION].text = texts[TXT_COLLECTION].split(
        "%1").join(str(contentCount)).split(
        "%2").join(str(contentMax)).split(
        "%3").join(str((math.round((
            (contentCount / contentMax) * 10000)) / 100))).split(
        "#").join(chr(13)
    );
    i = 0;
    while (i < 5) {
        enable_popup(
            (ALBUM_CAT_IN + i),
            (((((((texts[((TXT_COLLECTION + 2) + i)] + chr(13))
                + catCount[i]) + " / ") + catMax[i]) + " = ")
                + str((math.round(((catCount[i] / catMax[i]) * 10000)) / 100)))
                + "%"));
        enable_popup(
            (ALBUM_CAT_OUT + i),
            (((((((texts[((TXT_COLLECTION + 2) + i)] + chr(13)) + catCount[i])
                + " / ") + catMax[i]) + " = ")
                + str((math.round(((catCount[i] / catMax[i]) * 10000)) / 100)))
                + "%"));
        i = (i + 1);
    };
    enable_popup(LBL_ALBUM_COLLECTION, texts[(TXT_COLLECTION + 7)]);
    i = 0;
    while (i < 4) {
        hintText = "";
        enable_popup((LBL_ALBUM_HEADING + i));
        enable_popup((ALBUM_MONSTER_FRAME + i));
        if (albumCat == 0){
            show((ALBUM_MONSTER_FRAME + i));
            if (albumPage > 62){
                albumPage = 0;
            };
            if (albumPage < 0){
                albumPage = 62;
            };
            if (album_content[((albumPage * 4) + i)] == 1){
                SetCnt(
                   (ALBUM_MONSTER + i),
                   ((OPPMONSTER + (albumPage * 4)) + i)
                );
                if (((albumPage * 4) + i) >= 220){
                    entryText = texts[
                        (((TXT_NEW_MONSTER_NAMES + (albumPage * 4)) + i) - 220)
                    ];
                } else {
                    entryText = texts[
                        ((TXT_MONSTER_NAME + (albumPage * 4)) + i)
                    ];
                };
            } else {
                SetCnt((ALBUM_MONSTER + i), UNKNOWN_ENEMY);
                entryText = texts[TXT_UNKNOWN];
            };
            if (showAlbumOffset){
                enable_popup(
                    (ALBUM_MONSTER_FRAME + i), str(((albumPage * 4) + i))
                );
            };
            if (showAlbumOffset){
                enable_popup(
                    (LBL_ALBUM_HEADING + i), str(((albumPage * 4) + i))
                );
            };
        } else {
            if (albumCat == 1){
                entryText = texts[TXT_UNKNOWN];
                if (albumPage > 25){
                    albumPage = 0;
                };
                if (albumPage < 0){
                    albumPage = 25;
                };
                if (albumPage <= 5){
                    if ((((albumPage < 5)) or ((i <= 0)))){
                        SetAlbumItems(
                            ((300 + (albumPage * 20)) + (i * 5)), 8,
                            ((1 + (albumPage * 4)) + i), 0
                        );
                    } else {
                        entryText = "";
                    };
                } elif (albumPage <= 7){
                    SetAlbumEpic(
                        ((510 + ((albumPage - 6) * 4)) + i), 8,
                        ((50 + ((albumPage - 6) * 4)) + i), 0
                    );
                } elif (albumPage <= 11){
                    SetAlbumItems(
                        ((526 + ((albumPage - 8) * 20))
                        + (i * 5)), 9, ((1 + ((albumPage - 8) * 4))
                        + i), 0
                    );
                } elif (albumPage <= 13){
                    SetAlbumEpic(
                        ((686 + ((albumPage - 12) * 4)) + i), 9,
                        ((50 + ((albumPage - 12) * 4)) + i), 0
                    );
                } elif (albumPage <= 23){
                    if ((((albumPage < 23)) or ((i <= 0)))){
                        SetAlbumEpic(
                            (702 + ((albumPage - 14) * 4) + i),
                            10,
                            ((1 + ((albumPage - 14) * 4)) + i),
                            0
                        );
                    } else {
                        entryText = "";
                    };
                } elif (albumPage <= 25){
                    SetAlbumEpic(
                        ((760 + 16 + (albumPage
                         - 24) * 4) + i),
                        10,
                        ((50 + ((albumPage - 24) * 4)) + i),
                        0
                    );

            } else {
                if (albumCat == 2){
                    entryText = texts[TXT_UNKNOWN];
                    if (albumPage > 39){
                        albumPage = 0;
                    };
                    if (albumPage < 0){
                        albumPage = 39;
                    };
                    if (albumPage <= 7){
                        if ((((albumPage < 7)) or ((i <= 1)))){
                            SetAlbumItems(
                                (((776 + 16) + (albumPage * 20)) + (i * 5)),
                                1,
                                ((1 + (albumPage * 4)) + i),
                                1
                            );
                        } else {
                            entryText = "";
                        };
                    } elif (albumPage <= 9){
                        SetAlbumEpic(
                            (((1076 + 16) + ((albumPage - 8) * 4)) + i),
                            1,
                            ((50 + ((albumPage - 8) * 4)) + i),
                            1
                        );
                    } elif (albumPage <= 12){
                        if ((((albumPage < 12)) or ((i <= 1)))){
                            SetAlbumItems(
                                ((1092 + 16 + ((albumPage - 10) * 20))
                                    + (i * 5)),
                                2,
                                ((1 + ((albumPage - 10) * 4)) + i),
                                1
                            );
                        } else {
                            entryText = "";
                        };
                    } elif (albumPage <= 14){
                        SetAlbumEpic(
                            ((1192 + 16)
                                + ((albumPage - 13) * 4)) + i,
                            2,
                            ((50 + ((albumPage - 13) * 4)) + i),
                            1
                        );
                    } elif (albumPage <= 17){
                        if ((((albumPage < 17)) or ((i <= 1)))){
                            SetAlbumItems(
                                (((1208 + 16)
                                    + ((albumPage - 15) * 20))
                                    + (i * 5)),
                                3,
                                (1 + ((albumPage - 15) * 4))
                                    + i,
                                1
                            );
                        } else {
                            entryText = "";
                        };
                    } elif (albumPage <= 19){
                        SetAlbumEpic(
                            (((1308 + 16)
                                + ((albumPage - 18) * 4))
                                + i),
                            3,
                            ((50 + ((albumPage - 18) * 4))
                                + i),
                            1
                        );
                    } elif (albumPage <= 22){
                        if (
                            (((albumPage < 22))
                            or ((i <= 1)))
                        ){
                            SetAlbumItems(
                                (((1324 + 16)
                                 + ((albumPage - 20)
                                 * 20)) + (i * 5)),
                            4,
                            ((1 + ((albumPage - 20)
                                * 4)) + i),
                            1
                        );
                        } else {
                            entryText = "";
                        };
                    } elif (albumPage <= 24){
                        SetAlbumEpic(
                            (((1424 + 16)
                              + ((albumPage - 23)
                              * 4)) + i),
                        4,
                        ((50 + ((albumPage - 23)
                             * 4)) + i),
                        1
                    );
                    } elif (albumPage <= 27){
                        if (
                            (((albumPage < 27))
                            or ((i <= 1)))
                        ){
                            SetAlbumItems(
                                (((1440 + 16)
                                 + ((albumPage
                                 - 25) * 20))
                                 + (i * 5)),
                                5,
                                ((1 +
                                  ((albumPage
                                   - 25) * 4))
                                   + i),
                                1
                            );
                        } else {
                            entryText = "";
                        };
                    } elif (albumPage <= 29){
                        SetAlbumEpic(
                            (((1540 + 16)
                              + ((albumPage
                              - 28) * 4))
                              + i),
                            5,
                            ((50 +
                              ((albumPage
                               - 28) * 4))
                               + i),
                            1
                        );
                    } elif (albumPage <= 32){
                        if ((((albumPage < 32)) or ((i <= 1)))){
                            SetAlbumItems(
                                (1556 + 16 + (albumPage - 30) * 20) + (i * 5),
                                6,
                                ((1 + ((albumPage - 30) * 4)) + i),
                                1
                            );
                        } else {
                            entryText = "";
                        };
                    } elif (albumPage <= 34){
                        SetAlbumEpic(
                            (((1656 + 16) + ((albumPage - 33) * 4)) + i),
                            6,
                            ((50 + ((albumPage - 33) * 4)) + i),
                            1
                        );
                    } elif (albumPage <= 37){
                        if ((((albumPage < 37)) or ((i <= 1)))){
                            SetAlbumItems(
                                (1672 + 16 + (albumPage - 35) * 20) + (i * 5),
                                7,
                                ((1 + ((albumPage - 35) * 4)) + i),
                                1
                            );
                        } else {
                            entryText = "";
                        };
                    } elif (albumPage <= 39){
                        SetAlbumEpic(
                            (((1772 + 16) + ((albumPage - 38) * 4)) + i),
                            7,
                            ((50 + ((albumPage - 38) * 4)) + i),
                            1
                        );


                } else {
                    if ((((albumCat == 3)) or ((albumCat == 4)))){
                        entryText = texts[TXT_UNKNOWN];
                        if (albumPage > 29){
                            albumPage = 0;
                        };
                        if (albumPage < 0){
                            albumPage = 29;
                        };
                        hunterOffs = (((albumCat)==3) ? 0 : 696 + 16);
                        if (albumPage <= 2){
                            if ((((albumPage < 2)) or ((i <= 1)))){
                                SetAlbumItems(
                                    (((1788 + hunterOffs)
                                     + (albumPage * 20)) + (i * 5)),
                                    1,
                                    ((1 + (albumPage * 4)) + i),
                                    (albumCat - 1)
                                );
                            } else {
                                entryText = "";
                            };
                        } elif (albumPage <= 4){
                            SetAlbumEpic(
                                (((1888 + hunterOffs)
                                  + ((albumPage - 3) * 4)) + i),
                                1,
                                ((50 + ((albumPage - 3) * 4)) + i),
                                (albumCat - 1)
                            );
                        } elif (albumPage <= 7){
                            if ((((albumPage < 7)) or ((i <= 1)))){
                                SetAlbumItems(
                                    (((1904 + hunterOffs)
                                     + ((albumPage - 5) * 20))
                                     + (i * 5)),
                                    3,
                                    ((1 + ((albumPage - 5) * 4)) + i),
                                    (albumCat - 1)
                                );
                            } else {
                                entryText = "";
                            };
                        } elif (albumPage <= 9){
                            SetAlbumEpic(
                                (((2004 + hunterOffs)
                                 + ((albumPage - 8) * 4)) + i),
                                3,
                                ((50 + ((albumPage - 8) * 4)) + i),
                                (albumCat - 1)
                            );
                        } elif (albumPage <= 12){
                            if (
                                (((albumPage < 12))
                                or ((i <= 1)))
                            ){
                                SetAlbumItems(
                                    (((2020 + hunterOffs)
                                     + ((albumPage - 10) * 20))
                                     + (i * 5)),
                                    4,
                                    ((1 + ((albumPage
                                        - 10) * 4)) + i),
                                    (albumCat - 1)
                                );
                            } else {
                                entryText = "";
                            };
                        } elif (albumPage <= 14){
                            SetAlbumEpic(
                                (((2120 + hunterOffs)
                                    + ((albumPage - 13)
                                    * 4)) + i),
                                4,
                                ((50 + ((albumPage
                                    - 13) * 4)) + i),
                                (albumCat - 1)
                            );
                        } elif (albumPage <= 17){
                            if ((((albumPage < 17)) or ((i <= 1)))){
                                SetAlbumItems(
                                    (((2136 + hunterOffs)
                                     + ((albumPage - 15) * 20)) + (i * 5)),
                                    5,
                                    ((1 + ((albumPage - 15) * 4)) + i),
                                    (albumCat - 1)
                                );
                            } else {
                                entryText = "";
                            };
                        } elif (albumPage <= 19){
                            SetAlbumEpic(
                                (2236 + hunterOffs + (albumPage - 18) * 4) + i,
                                5,
                                (50 + ((albumPage - 18) * 4)) + i,
                                (albumCat - 1)
                            );
                        } elif (albumPage <= 22){
                            if ((((albumPage < 22)) or ((i <= 1)))){
                                SetAlbumItems(
                                    (((2252 + hunterOffs)
                                     + ((albumPage - 20) * 20)) + (i * 5)),
                                    6,
                                    ((1 + ((albumPage - 20) * 4)) + i),
                                    (albumCat - 1)
                                );
                            } else {
                                entryText = "";
                            };
                        } elif (albumPage <= 24){
                            SetAlbumEpic(
                                (((2352 + hunterOffs)
                                  + ((albumPage - 23) * 4)) + i),
                                6, ((50 + ((albumPage - 23) * 4)) + i),
                                (albumCat - 1)
                            );
                        } elif (albumPage <= 27){
                            if ((((albumPage < 27)) or ((i <= 1)))){
                                SetAlbumItems(
                                    (((2368 + hunterOffs)
                                        + ((albumPage - 25) * 20)) + (i * 5)),
                                    7,
                                    ((1 + ((albumPage - 25) * 4)) + i),
                                    (albumCat - 1)
                                );
                            } else {
                                entryText = "";
                            };
                        } elif (albumPage <= 29){
                            SetAlbumEpic(
                                (((2468 + hunterOffs)
                                    + ((albumPage - 28) * 4)) + i),
                                7,
                                ((50 + ((albumPage - 28) * 4)) + i),
                                (albumCat - 1)
                            );


        actor[LBL_ALBUM_PAGENUMBER_LEFT].text = str(((albumPage * 2) + 1));
        actor[LBL_ALBUM_PAGENUMBER_RIGHT].text = str(((albumPage * 2) + 2));
        actor[LBL_ALBUM_PAGENUMBER_RIGHT].x = (
            1205 - actor[LBL_ALBUM_PAGENUMBER_RIGHT].text_width
        );
        actor[(LBL_ALBUM_HEADING + i)].text = entryText;
        actor[(LBL_ALBUM_HEADING + i)].x = (
            ((i)<=1)
                ? 535
                : 1005 - (actor[(LBL_ALBUM_HEADING + i)].text_width / 2));
        actor[(LBL_ALBUM_HINT + i)].text = hintText;
        actor[(LBL_ALBUM_HINT + i)].x = (
            ((i)<=1)
                ? 535
                : 1005 - (actor[(LBL_ALBUM_HINT + i)].text_width / 2));
        i = (i + 1);
    };
    if (
        ((!((hintText == "")))
        and (((actor[LBL_ALBUM_COLLECTION].x
             + actor[LBL_ALBUM_COLLECTION].text_width) > (
             actor[LBL_ALBUM_HINT].x - 5))))
    ){
        actor[LBL_ALBUM_COLLECTION].y = (
            (actor[LBL_ALBUM_HINT].y + actor[LBL_ALBUM_HINT].textHeight) + 5
        );
    } else {
        if (
            (actor[LBL_ALBUM_COLLECTION].x
             + actor[LBL_ALBUM_COLLECTION].text_width) > (
             actor[LBL_ALBUM_HEADING].x - 5)
        ){
            actor[LBL_ALBUM_COLLECTION].y = (
                (actor[LBL_ALBUM_HEADING].y
                 + actor[LBL_ALBUM_HEADING].textHeight) + 5);
        } else {
            actor[LBL_ALBUM_COLLECTION].y = 135;
        };
    };
}

def show_login_screen(
    evt:Event=None, noBC=False, noCookie=False
):
    var playername:String;
    if (
        ((((((((!(so.data.HasAccount))
        and (!((evt is MouseEvent)))))
        and (!(noBC))))
        and (!(buffed_mode))))
        and (!(sso_mode)))
    ){
        show_build_character_screen();
        return;
    };
    remove_all();
    actor[INP['LOGIN_PASSWORD']].getChildAt(1).visible = True;
    actor[LBL_WINDOW_TITLE].text = texts[TXT_WELCOME];
    actor[LBL_WINDOW_TITLE].x = (
        (IF_WIN_X + IF_WIN_WELCOME_X) - int(
        (actor[LBL_WINDOW_TITLE].text_width / 2)));
    actor[INP['NAME']].add_event_listener(KeyboardEvent.KEY_DOWN, RequestLOGin)
    actor[INP['LOGIN_PASSWORD']].add_event_listener(
        KeyboardEvent.KEY_DOWN, RequestLOGin
    );
    if (!noCookie){
        if (so.data.userName){
            actor[INP['NAME']].getChildAt(1).text = str(so.data.userName);
        };
        if (so.data.password){
            actor[INP['LOGIN_PASSWORD']].getChildAt(1).text = str(
                so.data.password
            );
        };
    };
    add(WINDOW_LOGIN);
    LOGonRTL();
    if (buffed_mode){
        actor[LBL_GOTO_SIGNUP].htmlText = buffed_link_text;
        actor[GOTO_SIGNUP].x = (
            (IF_WIN_X + IF_WIN_WELCOME_X)
            - int((actor[LBL_GOTO_SIGNUP].text_width / 2)));
    };
    if (sso_mode){
        actor[INP['NAME']].getChildAt(1).type = TextFieldType.DYNAMIC;
        actor[INP['LOGIN_PASSWORD']].getChildAt(1).type = TextFieldType.DYNAMIC
        playername = ExternalInterface.call("sso_get_uid");
        actor[INP['NAME']].getChildAt(1).text = playername;
        actor[INP['LOGIN_PASSWORD']].getChildAt(1).text = mp_api_user_token;
    };
}

def show_bet_result(won:Boolean){
    var doShowBetResults:* = None;
    var won:* = won;
    doShowBetResults = function (){
        var BallX:* = 0;
        add(((won) ? HUTMANN_WON : HUTMANN_LOST));
        set_btn_text(
            HUTMANN_OK,
            texts[((won) ? TXT_HUTMANN_YEAH : TXT_HUTMANN_DAMN)]
        );
        add(HUTMANN_OK);
        var _local2 = actor[LBL_HUTMANN_TEXT];
        with (_local2) {
            text = texts[((won) ? TXT_HUTMANN_WIN : TXT_HUTMANN_LOSE)];
            x = (SCREEN_TITLE_X - (text_width / 2));
        };
        Switch (CupChosen){
            if case(0:
                add(HUTBECHER_1_CLICK);
                remove(HUTBECHER_1_IDLE);
                if (won){
                    BallX = HUTMANN_KUGEL_X1;
                } else {
                    BallX = (
                        (random.random())<0.5)
                            ? HUTMANN_KUGEL_X2
                            : HUTMANN_KUGEL_X3;
                };
                break;
            if case(1:
                add(HUTBECHER_2_CLICK);
                remove(HUTBECHER_2_IDLE);
                if (won){
                    BallX = HUTMANN_KUGEL_X2;
                } else {
                    BallX = (
                        (random.random())<0.5)
                        ? HUTMANN_KUGEL_X1
                        : HUTMANN_KUGEL_X3;
                };
                break;
            if case(2:
                add(HUTBECHER_3_CLICK);
                remove(HUTBECHER_3_IDLE);
                if (won){
                    BallX = HUTMANN_KUGEL_X3;
                } else {
                    BallX = (
                        (random.random())<0.5)
                        ? HUTMANN_KUGEL_X1
                        : HUTMANN_KUGEL_X2;
                };
                break;
        };
        actor[HUTKUGEL].x = BallX;
        if (won){
            play(SND_JINGLE);
            add(HUTKUGEL);
            actor[LBL_HUTMANN_GOLDBET].text = str(
                (int(actor[LBL_HUTMANN_GOLDBET].text) * 2));
            actor[LBL_HUTMANN_MUSHBET].text = str(
                (int(actor[LBL_HUTMANN_MUSHBET].text) * 2));
        } else {
            actor[LBL_HUTMANN_GOLDBET].text = "0";
            actor[LBL_HUTMANN_MUSHBET].text = "0";
        };
    };
    load(((won) ? HUTMANN_WON : HUTMANN_LOST));
    Switch (CupChosen){
        if case(0:
            load(HUTBECHER_1_CLICK);
            break;
        if case(1:
            load(HUTBECHER_2_CLICK);
            break;
        if case(2:
            load(HUTBECHER_3_CLICK);
            break;
    };
    if (won){
        load(HUTKUGEL);
    };
    whendo_loaded(doShowBetResults);
}

def ShowSignupScreen(evt:Event=None):
    var i:* = 0;
    var j:* = 0;
    var jumpTimer:* = None;
    var playername:* = None;
    var email:* = None;
    var DoJump:* = None;
    var evt:* = evt;
    jumpTimer = new Timer(200, 20);
    if (KlasseGewählt){
        remove_all();
        actor[INP['PASSWORD']].getChildAt(1).visible = True;
        actor[LBL_WINDOW_TITLE].text = texts[TXT_TITLE_SIGNUP];
        actor[LBL_WINDOW_TITLE].x = (
            (IF_WIN_X + IF_WIN_WELCOME_X)
            - int((actor[LBL_WINDOW_TITLE].text_width / 2)));
        actor[INP['NAME']].add_event_listener(
            KeyboardEvent.KEY_UP, request_signup);
        actor[INP['PASSWORD']].add_event_listener(
            KeyboardEvent.KEY_DOWN, request_signup);
        actor[INP['EMAIL']].add_event_listener(
            KeyboardEvent.KEY_DOWN, request_signup);
        if (buffed_req){
            actor[INP['NAME']].getChildAt(1).text = buffed_name;
            actor[INP['EMAIL']].getChildAt(1).text = buffed_email;
        };
        if (sso_mode){
            actor[INP['EMAIL']].getChildAt(1).type = TextFieldType.DYNAMIC;
            actor[INP['PASSWORD']].getChildAt(1).type = TextFieldType.DYNAMIC;
            playername = ExternalInterface.call("sso_get_uid");
            actor[INP['NAME']].getChildAt(1).text = playername;
            email = ExternalInterface.call("sso_get_email");
            actor[INP['EMAIL']].getChildAt(1).text = email;
            actor[INP['PASSWORD']].getChildAt(1).text = mp_api_user_token;
        };
        LOGonRTL();
        hide(
            PASSWORD_SMILEY_SAD,
            PASSWORD_SMILEY_NEUTRAL,
            PASSWORD_SMILEY_HAPPY
        );
        add(WINDOW_SIGNUP);
        if (param_bullshit_text != ""){
            add(FUCK);
        };
    } else {
        error_message(texts[TXT_ERROR_SELECTCLASS]);
        if (!SignupJumpRunning){
            DoJump = function (evt:TimerEvent){
                if (j <= 2){
                    i = 0;
                    while (i < 2) {
                        AnimateAch(
                            ((KASTE_1_IDLE + i) + (j * 2)),
                            actor[((KASTE_1_IDLE + i) + (j * 2))].y
                        );
                        i++;
                    };
                };
                j++;
                if (j > 10){
                    jumpTimer.stop();
                    jumpTimer.remove_event_listener(TimerEvent.TIMER, DoJump);
                    SignupJumpRunning = False;
                };
            };
            SignupJumpRunning = True;
            jumpTimer.add_event_listener(TimerEvent.TIMER, DoJump);
            j = 0;
            jumpTimer.start();
        };
    };
}


'''

# -----------------------------------------------------------------------------
# low level graphic stuff


def remove(*actor_ids):
    '''
        remove actor
    '''
    for actor_id in actor_ids:
        if actor[actor_id]:
            if actor[actor_id] is list:
                for i_bunch in actor[actor_id]:
                    remove(i_bunch)
                return

            if actor[actor_id] is Sound:
                return

            with actor[actor_id]:
                if parent:
                    parent.removeChild(actor[actor_id])


def show(*actor_ids):
    '''
        show actor
    '''
    for actor_id in actor_ids:
        if actor[actor_id]:
            if actor[actor_id] is list:
                for i_bunch in actor[actor_id]:
                    show(i_bunch)
                return

            with actor[actor_id]:
                visible = True


def hide(*actor_ids):
    '''
        hide actor(s)
    '''
    for actor_id in actor_ids:
        if actor[actor_id]:
            if actor[actor_id] is list:
                for i_bunch in actor[actor_id]:
                    hide(i_bunch)
                return

            with actor[actor_id]:
                visible = False


def add(actor_id, pos_x=None, pos_y=None, scale_x=None,
        scale_y=None, vis=None, container_id=-1):
    '''
        add actor to global list
    '''
    if actor[actor_id] is Sound:
        return

    if actor[actor_id] is list:
        for i_bunch in actor[actor_id]:
            if i_bunch == actor_id:
                return

            add(i_bunch, pos_x, pos_y, scale_x, scale_y, vis, container_id)
        return

    if actor[actor_id] is Loader:
        if actorLoaded[actor_id] == 0:
            load(actor_id)

    with actor[actor_id]:
        if pos_x:
            x = pos_x

        if pos_y:
            y = pos_y

        if scale_x:
            scaleX = size_x

        if scale_y:
            scaleY = size_y

        if vis is not None:
            visible = bool(vis)

    if container_id == -1:
        addChild(actor[actor_id])
    else:
        actor[container_id].addChild(actor[actor_id])


def visible_to_front(*actor_ids):
    '''
        is visible from front of screen
    '''
    for actor_id in actor_ids:
        if actor[actor_id]:
            if actor[actor_id] is list:
                for i_bunch in actor[actor_id]:
                    visible_to_front(i_bunch)
                return

            with actor[actor_id]:
                if on_stage(actor_id):
                    add(actor_id)


def move(actor_id, pos_x, pos_y):
    '''
        move actor to coords x/y
    '''
    if actor[actor_id] is list:
        for current in actor[actor_id]:
            move(current, pos_x, pos_y)
    else:
        with actor[actor_id]:
            x = pos_x
            y = pos_y


def add_some(*args):
    '''
        add multiple actors
    '''
    for arg in args:
        if actor[arg]:
            if actor[arg] is list:
                for i_bunch in actor[arg]:
                    add(i_bunch)
                return

            add(arg)


def remove_all(alsoPersistent=False):
    '''
        remove all actors
    '''
    for i in range(len(actor)):
        if actor[i]:
            if actor[i] is not list:
                if (not actorPersistent[i]) or alsoPersistent:
                    remove(i)

    ExternalInterface.call("hideSocial")


def visible(actor_id):
    '''
        actor is visible?
    '''
    if actor[actor_id] is DisplayObject:
        return bool(get_child_by_name(actor[actor_id].name)
                    and actor[actor_id].visible)
    return False


def set_alpha(actor_id, alpha_value):
    '''
        set alpha value for actor(s)
    '''
    if actor[actor_id] is list:
        for act in actor[actor_id]:
            set_alpha(act, alpha_value)
    elif getattr(actor[actor_id], 'alpha', None) is not None:
            actor[actor_id].alpha = alpha_value


def get_alpha(actor_id):
    '''
        get highest alpha value from actor(s)
    '''
    tmp_alpha = 0
    if actor[actor_id] is list:
        for act in actor[actor_id]:
            if get_alpha(act) > tmp_alpha:
                tmp_alpha = get_alpha(act)
        return tmp_alpha

    if getattr(actor[actor_id], 'alpha', None) is not None:
        return actor[actor_id].alpha

    return 0


def fade_in_event(evt):
    '''
        update alpha for fade in
    '''
    current_alpha += alpha_step
    if current_alpha >= alpha_max:
        current_alpha = alpha_max
        fade_timer.stop()
        fade_timer.remove_event_listener(TimerEvent.TIMER, fade_in_event)
    set_alpha(actor_id, current_alpha)


def fade_in(actor_id, timer_interval=20, alpha_step=0.05, alpha_max=1):
    '''
        perform fade in animation on actor
    '''
    fade_timer = Timer(timer_interval)
    current_alpha = get_alpha(actor_id)
    if alpha_step <= 0:
        return

    fade_timer.add_event_listener(TimerEvent.TIMER, fade_in_event)
    fade_timer.start()
    set_alpha(actor_id, current_alpha)


def fade_out_event(evt):
    '''
        update alpha for fade out
    '''
    current_alpha -= alpha_step
    if current_alpha <= alpha_min:
        current_alpha = alpha_min
        fade_timer.stop()
        fade_timer.remove_event_listener(TimerEvent.TIMER, fade_out_event)
        if hide_then:
            hide(actor_id)
    set_alpha(actor_id, current_alpha)


def fade_out(actor_id, timer_interval=20, alpha_step=0.05,
             alpha_min=0, hide_then=False):
    '''
        perform fade out animation on actor
    '''
    fade_timer = Timer(timer_interval)
    current_alpha = get_alpha(actor_id)
    if alpha_step <= 0:
        return

    fade_timer.add_event_listener(TimerEvent.TIMER, fade_out_event)
    fade_timer.start()
    set_alpha(actor_id, current_alpha)


def add_filter(actor_id, filter):
    '''
        add filter to actor
    '''
    actor[actor_id].filters = filter


def set_font(font_name):
    '''
        set up fonts by name
    '''
    game_font = font_name
    font_embedded = True
    if font_name in ("Verdana", "Arial Narrow", "Geeza Pro"):
        font_embedded = False
        size_mod = -6

    LOG.info("Font chosen: " + font_name)

    with (FontFormat_ToiletAura):
        font = font_name
        size = size_mod + 35
        color = CLR_BLACK
        align = "center"
        leftMargin = 0
        kerning = True

    with FontFormat_GuildListTextAttackErrorHalf:
        font = font_name
        size = size_mod + 24
        color = CLR_ATTACK_ERROR_OFFLINE_HALF
        align = text_dir
        leftMargin = 0
        kerning = True

    with FontFormat_GuildListTextAttackErrorOnlineHalf:
        font = font_name
        size = size_mod + 24
        color = CLR_ATTACK_ERROR_ONLINE_HALF
        align = text_dir
        leftMargin = 0
        kerning = True

    with FontFormat_Error:
        font = font_name
        size = size_mod + 24
        color = CLR_ERROR
        align = text_dir
        leftMargin = 0
        kerning = True

    with FontFormat_Default:
        font = font_name
        size = size_mod + 20
        color = CLR_SFORANGE
        align = "center"
        leftMargin = 0
        kerning = True

    with FontFormat_HighStakes:
        font = font_name
        size = size_mod + 20
        color = CLR_SYSMSG_RED
        align = "center"
        leftMargin = 0
        kerning = True

    with FontFormat_HighStakesHighLight:
        font = font_name
        size = size_mod + 20
        color = CLR_SYSMSG_RED_HIGHLIGHT
        align = "center"
        leftMargin = 0
        kerning = True

    with FontFormat_HighStakesHighLight:
        font = font_name
        size = size_mod + 20
        color = CLR_SYSMSG_RED_GRAYED
        align = "center"
        leftMargin = 0
        kerning = True

    with FontFormat_HighStakesHighLightGrayed:
        font = font_name
        size = size_mod + 20
        color = CLR_SYSMSG_RED_HIGHLIGHT_GRAYED
        align = "center"
        leftMargin = 0
        kerning = True

    with FontFormat_Book:
        font = font_name
        size = size_mod + 20
        color = 0
        align = "center"
        leftMargin = 0
        kerning = True

    with FontFormat_BookHint:
        font = font_name
        size = size_mod + 18
        color = 136
        align = "center"
        leftMargin = 0
        kerning = True

    with FontFormat_BookLeft:
        font = font_name
        size = size_mod + 16
        color = 0
        align = "left"
        leftMargin = 0
        kerning = True

    with FontFormat_Bullshit:
        font = font_name
        size = 14
        color = CLR_SFORANGE
        align = "left"
        leftMargin = 0
        kerning = True

    with FontFormat_AttackLabel:
        font = font_name
        size = size_mod + 19
        color = CLR_SFORANGE
        align = text_dir
        leftMargin = 0
        kerning = True

    with FontFormat_Speech:
        font = font_name
        size = size_mod + 20
        color = CLR_WHITE
        align = text_dir
        leftMargin = 0
        kerning = True

    with FontFormat_Grayed:
        font = font_name
        size = size_mod + 20
        color = CLR_GRAYED
        align = text_dir
        leftMargin = 0
        kerning = True

    with FontFormat_GrayedHighLight:
        font = font_name
        size = size_mod + 20
        color = CLR_GRAYED_HL
        align = text_dir
        leftMargin = 0
        kerning = True

    with FontFormat_ClassError:
        font = font_name
        size = size_mod + 20
        color = CLR_ERROR
        align = text_dir
        leftMargin = 0
        kerning = True

    with font_format_chat:
        font = font_name
        size = size_mod + 20
        color = CLR_SFORANGE
        align = text_dir
        leftMargin = 0
        kerning = True

    with font_format_chatWhisper:
        font = font_name
        size = size_mod + 20
        color = CLR_CHAT_WHISPER
        align = text_dir
        leftMargin = 0
        kerning = True

    with font_format_chatError:
        font = font_name
        size = size_mod + 20
        color = CLR_ERROR
        align = text_dir
        leftMargin = 0
        kerning = True

    with FontFormat_GuildBuilding:
        font = font_name
        size = size_mod + 20
        color = CLR_SFORANGE
        align = text_dir
        leftMargin = 0
        kerning = True

    with FontFormat_GuildMoney:
        font = font_name
        size = size_mod + 20
        color = CLR_SFORANGE
        align = text_dir
        leftMargin = 0
        kerning = True

    with FontFormat_DefaultLeft:
        font = font_name
        size = size_mod + 20
        color = CLR_SFORANGE
        align = text_dir
        leftMargin = 0
        kerning = True

    with FontFormat_Highlight:
        font = font_name
        size = size_mod + 20
        color = CLR_SFHIGHLIGHT
        align = text_dir
        leftMargin = 0
        kerning = True

    with FontFormat_HighlightWhisper:
        font = font_name
        size = size_mod + 20
        color = CLR_SFHIGHLIGHT_WHISPER
        align = text_dir
        leftMargin = 0
        kerning = True

    with FontFormat_Heading:
        font = font_name
        size = (size_mod + 30)
        color = CLR_SFORANGE
        align = text_dir
        leftMargin = 0
        kerning = True

    with FontFormat_ScreenTitle:
        font = font_name
        size = size_mod + 34
        color = CLR_SFORANGE
        align = text_dir
        leftMargin = 0
        kerning = True

    with FontFormat_Popup:
        font = font_name
        size = size_mod + 20
        color = CLR_SFORANGE
        align = text_dir
        leftMargin = 0
        kerning = True

    with FontFormat_PopupCompare:
        font = font_name
        size = size_mod + 20
        color = CLR_OFFLINE
        align = text_dir
        leftMargin = 0
        kerning = True

    with FontFormat_PopupCompareSum:
        font = font_name
        size = size_mod + 20
        color = CLR_ONLINE
        align = text_dir
        leftMargin = 0
        kerning = True

    with FontFormat_PopupCompareBetter:
        font = font_name
        size = size_mod + 20
        color = CLR_SYSMSG_GREEN
        align = text_dir
        leftMargin = 0
        kerning = True

    with FontFormat_PopupCompareWorse:
        font = font_name
        size = size_mod + 20
        color = CLR_SYSMSG_RED
        align = text_dir
        leftMargin = 0
        kerning = True

    with FontFormat_PopupCompareBetterHL:
        font = font_name
        size = size_mod + 20
        color = CLR_SYSMSG_GREEN_HIGHLIGHT
        align = text_dir
        leftMargin = 0
        kerning = True

    with FontFormat_PopupCompareWorseHL:
        font = font_name
        size = size_mod + 20
        color = CLR_SYSMSG_RED_HIGHLIGHT
        align = text_dir
        leftMargin = 0
        kerning = True

    with FontFormat_EpicItemQuote:
        font = font_name
        size = size_mod + 20
        color = CLR_EPICITEMQUOTE
        align = text_dir
        leftMargin = 0
        kerning = True

    with FontFormat_ItemEnchantment:
        font = font_name
        size = size_mod + 20
        color = CLR_ITEMENCHANTMENT
        align = text_dir
        leftMargin = 0
        kerning = True

    with FontFormat_LOGoutLink:
        font = font_name
        size = (size_mod + 22)
        color = CLR_SFORANGE
        align = text_dir
        leftMargin = 0
        kerning = True

    with FontFormat_LOGoutLinkHighLight:
        font = font_name
        size = (size_mod + 22)
        color = CLR_SFHIGHLIGHT
        align = text_dir
        leftMargin = 0
        kerning = True

    with FontFormat_HallListHeading:
        font = font_name
        size = (size_mod + 19)
        color = CLR_SFORANGE
        align = text_dir
        leftMargin = 0
        kerning = True

    with FontFormat_HallListText:
        font = font_name
        size = (size_mod + 19)
        color = CLR_SFORANGE
        align = text_dir
        leftMargin = 0
        kerning = True

    with FontFormat_GuildHallNoAttack:
        font = font_name
        size = (size_mod + 19)
        color = CLR_NOATTACK
        align = text_dir
        leftMargin = 0
        kerning = True

    with FontFormat_HallListHighLight:
        font = font_name
        size = (size_mod + 19)
        color = CLR_SFHIGHLIGHT
        align = text_dir
        leftMargin = 0
        kerning = True

    with FontFormat_AttribBonus:
        font = font_name
        size = (size_mod + 19)
        color = CLR_ATTRIBBONUS
        align = text_dir
        leftMargin = 0
        kerning = True

    with FontFormat_AttribTemp:
        font = font_name
        size = (size_mod + 19)
        color = CLR_SYSMSG_GREEN
        align = text_dir
        leftMargin = 0
        kerning = True

    with FontFormat_Attrib:
        font = font_name
        size = (size_mod + 19)
        color = CLR_SFORANGE
        align = text_dir
        leftMargin = 0
        kerning = True

    with FontFormat_PayIcon:
        font = font_name
        size = (size_mod + 19)
        color = CLR_WHITE
        align = text_dir
        leftMargin = 0
        kerning = True

    with FontFormat_PostListHeading:
        font = font_name
        size = (size_mod + 26)
        color = CLR_SFORANGE
        align = text_dir
        bold = True
        leftMargin = 0
        kerning = True

    with FontFormat_PostListText:
        font = font_name
        size = size_mod + 24
        color = CLR_SFORANGE
        align = text_dir
        leftMargin = 0
        kerning = True

    with FontFormat_PostListTextSys:
        font = font_name
        size = size_mod + 24
        color = CLR_SYSMSG
        align = text_dir
        leftMargin = 0
        kerning = True

    with FontFormat_GuildListText:
        font = font_name
        size = size_mod + 24
        color = CLR_OFFLINE
        align = text_dir
        leftMargin = 0
        kerning = True

    with FontFormat_GuildListTextOnline:
        font = font_name
        size = size_mod + 24
        color = CLR_ONLINE
        align = text_dir
        leftMargin = 0
        kerning = True

    with FontFormat_GuildListTextAttackError:
        font = font_name
        size = size_mod + 24
        color = CLR_ATTACK_ERROR_OFFLINE
        align = text_dir
        leftMargin = 0
        kerning = True

    with FontFormat_GuildListTextAttackErrorOnline:
        font = font_name
        size = size_mod + 24
        color = CLR_ATTACK_ERROR_ONLINE
        align = text_dir
        leftMargin = 0
        kerning = True

    with FontFormat_GuildListTextAttackErrorOnlinePopup:
        font = font_name
        size = size_mod + 20
        color = CLR_ATTACK_ERROR_ONLINE
        align = text_dir
        leftMargin = 0
        kerning = True

    with FontFormat_GuildListTextAttackOk:
        font = font_name
        size = size_mod + 24
        color = CLR_ATTACK_OK
        align = text_dir
        leftMargin = 0
        kerning = True

    with FontFormat_GuildListTextAttackOkPopup:
        font = font_name
        size = size_mod + 20
        color = CLR_ATTACK_OK
        align = text_dir
        leftMargin = 0
        kerning = True

    with FontFormat_PostListHighLight:
        font = font_name
        size = size_mod + 24
        color = CLR_SFHIGHLIGHT
        align = text_dir
        leftMargin = 0
        kerning = True

    with FontFormat_PostListHighLightSys:
        font = font_name
        size = size_mod + 24
        color = CLR_SYSMSGHIGHLIGHT
        align = text_dir
        leftMargin = 0
        kerning = True

    with FontFormat_PostListTextSysRed:
        font = font_name
        size = size_mod + 24
        color = CLR_SYSMSG_RED
        align = text_dir
        leftMargin = 0
        kerning = True

    with FontFormat_PostListHighLightSysRed:
        font = font_name
        size = size_mod + 24
        color = CLR_SYSMSG_RED_HIGHLIGHT
        align = text_dir
        leftMargin = 0
        kerning = True

    with FontFormat_PostListTextSysGreen:
        font = font_name
        size = size_mod + 24
        color = CLR_SYSMSG_GREEN
        align = text_dir
        leftMargin = 0
        kerning = True

    with FontFormat_PostListHighLightSysGreen:
        font = font_name
        size = size_mod + 24
        color = CLR_SYSMSG_GREEN_HIGHLIGHT
        align = text_dir
        leftMargin = 0
        kerning = True

    with FontFormat_QuestBar:
        font = font_name
        size = size_mod + 24
        color = CLR_WHITE
        align = text_dir
        leftMargin = 0
        kerning = True

    with FontFormat_TimeBar:
        font = font_name
        size = size_mod + 24
        color = CLR_WHITE
        align = text_dir
        leftMargin = 0
        kerning = True

    with FontFormat_LifeBar:
        font = font_name
        size = size_mod + 20
        color = CLR_WHITE
        align = text_dir
        leftMargin = 0
        kerning = True

    with FontFormat_Damage:
        font = font_name
        size = (size_mod + 30)
        color = CLR_WHITE
        align = text_dir
        leftMargin = 0
        kerning = True

    with FontFormat_CriticalDamage:
        font = font_name
        size = size_mod + 34
        color = CLR_RED
        align = text_dir
        leftMargin = 0
        kerning = True

    with FontFormat_CatapultDamage:
        font = font_name
        size = size_mod + 38
        color = CLR_ATTACK_ERROR_ONLINE_HALF
        align = text_dir
        leftMargin = 0
        kerning = True


# -----------------------------------------------------------------------------
# unsorted stuff


def do_act_zauberladen():
    '''
        setup magic shop actors
    '''
    error_message(" ")
    remove(BNC['CHAR']['RIGHTPANE'])
    remove(IMG['FIDGET']['EPCIOVL'])
    remove(IMG['SHAKES']['EPCIOVL'])
    add(BNC['SCREEN']['FIDGET'])
    if savegame[SG['LEVEL']] >= 66:
        add(CA['GOTO']['WITCH'])
    if (special_action == 2) or (special_action == 5):
        add(IMG['FIDGET']['EPCIOVL'])
        actor[IMG['FIDGET']['EPCIOVL']].mouse_enabled = False
    if not sleep_time():
        remove(BNC['FIDGET']['NIGHT'])
    else:
        remove(BNC['FIDGET']['DAY'])
    if Capabilities.version.substr(0, 3) != "IOS":
        if light_mode:
            remove(IMG['FIDGET']['TAGKERZE'])
            remove(IMG['FIDGET']['NACHTKERZE'])
    remove(IMG['FIDGET']['BLINZELN'])


def do_act_schmiede():
    '''
        setup weapon shop actors
    '''
    error_message(" ")
    remove(BNC['CHAR']['RIGHTPANE'])
    remove(IMG['FIDGET']['EPCIOVL'])
    remove(IMG['SHAKES']['EPCIOVL'])
    add(BNC['SCREEN']['SHAKES'])
    if (special_action == 2) or (special_action == 5):
        add(IMG['SHAKES']['EPCIOVL'])
        actor[IMG['SHAKES']['EPCIOVL']].mouse_enabled = False
    remove(IMG['SHAKES']['IDLE'],
           IMG['SHAKES']['IDLE1'],
           IMG['SHAKES']['IDLE2'],
           IMG['SHAKES']['IDLE3'])
    if not sleep_time():
        remove(IMG['SHAKES']['NIGHT'],
               IMG['SHAKES']['BLINZELN1'],
               IMG['SHAKES']['BLINZELN2'])
    else:
        remove(IMG['SHAKES']['DAY'])


def install_hall_popup():
    '''
        setup popup object for hall
    '''
    if this_field_popup != "":
        enable_popup(CNT['HALL']['LIST'], this_field_popup)
    else:
        enable_popup(CNT['HALL']['LIST'])


def hall_list_add_field(pos_x, pos_y, txt, fmt, max_width=0, is_guild=False):
    '''
        add field to hall table
    '''
    tmp_obj = None
    this_field_popup = ""

    if txt == "[K]":
        tmp_obj = Bitmap(
            actor[IMG['IF']['KRIEGER']].content.bitmapData.clone())
        with (tmp_obj):
            allow_smoothing = True
            force_smoothing = True
            smoothing = True
            mouse_enabled = True
    elif txt == "[M]":
        tmp_obj = Bitmap(actor[IMG['IF']['MAGIER']].content.bitmapData.clone())
        with (tmp_obj):
            allow_smoothing = True
            force_smoothing = True
            smoothing = True
            mouse_enabled = True
    elif txt == "[J]":
        tmp_obj = Bitmap(actor[IMG['IF']['JAEGER']].content.bitmapData.clone())
        with tmp_obj:
            allow_smoothing = True
            force_smoothing = True
            smoothing = True
            mouse_enabled = True
    else:
        tmp_obj = TextField()
        with tmp_obj:
            default_text_format = fmt
            auto_size = TextFieldAutoSize.LEFT
            background = False
            selectable = False
            embed_fonts = font_embedded
            anti_alias_type = AntiAliasType.ADVANCED
            text = txt

        if max_width > 0:
            this_field_popup = trim_too_long(tmp_obj, max_width)

    with tmp_obj:
        if is_guild:
            add_event_listener(MouseEvent.CLICK, request_player_guild_screen)
        else:
            add_event_listener(MouseEvent.CLICK, request_player_screen)

        add_event_listener(MouseEvent.MOUSE_OVER, install_hall_popup)
        if text_dir == "right":
            x = pos_x - width
        else:
            x = pos_x

        y = pos_y
        visible = True

    actor[CNT['HALL']['LIST']].addChild(tmp_obj)


def action_handler(event):
    '''
        handle server reply
    '''
    data_str = str(event.data)
    is_mine = False
    log_in_after_pixel = False

    if data_str[0] == "+":
        data_str = data_str[1:]
        if guild_blink_ready:
            send_action(ACT['GET']['CHAT_HISTORY'])
            pulse_gilde_on_history = True

    if data_str[0] == "E":
        act = -1 * int(data_str[1, 4])
        par_str = data_str[4:]
    else:
        act = int(data_str[0: 3])
        par_str = data_str[3:]

    par = par_str.split("")
    if on_stage(BTN['FIGHT_SKIP']):
        return

    set_title_bar()
    if act != ERR['SERVER']['DOWN']:
        interval_multiplier_reconnect = 1

    skip_allowed = False

    for case in Switch(act):
        if case(ERR['TOWER']['CLOSED']):
            break

        if case(RESP['TOWER']['SAVE']):
            parse_savgame(par[0])
            show_tower_screen(par)
            break

        if case(RESP['TOILET']['LOCKED']):
            remove(IMG['TAVERNE']['BARKEEPER']['HINT'])
            remove(BNC['TAVERNE']['CAS'])
            add(BNC['BEEROFFER'])
            enable_popup(CNT['QO']['REWARDGOLD'])
            enable_popup(CNT['QO']['REWARDSILVER'])
            enable_popup(LBL['QO']['REWARDGOLD'])
            enable_popup(LBL['QO']['REWARDSILVER'])
            enable_popup(LBL['QO']['REWARDEXP'])

            with actor[LBL['QO']['QUESTNAME']]:
                text = texts[(TXT['TOILET']['HINT'] + 5)]
                x = (POS['QO']['BLACK']['SQUARE_X']
                     + REL['QO']['QUESTNAME_X']
                     - text_width / 2)

            with actor[LBL['QO']['QUESTTEXT']]:
                text = texts[TXT['TOILET']['HINT'] + 6].replace(
                    "#", chr(13)
                )

            arabize(LBL['QO']['QUESTTEXT'])
            actor[LBL['QO']['TIME']].text = ""
            actor[LBL['QO']['REWARDEXP']].text = ""
            remove(BTN['BO']['BUY'])
            add(IMG['BO']['PORTRAIT']['TH'])
            break

        if case(RESP['TOILET']['UNLOCKED']):
            play(SND['MAINQUESTS']['UNLOCK'])
        if case(RESP['TOILET']['DROPPED']):
            pass
        if case(RESP['TOILET']['FULL']):
            pass
        if case(RESP['TOILET']['FLUSHED']):
            pass
        if case(ACT['SCREEN']['TOILET']):
            pass
        if case(RESP['TOILET']['TANKFULL']):
            pass
        if case(RESP['TOILET']['DROPTWICE']):
            if act == RESP['TOILET']['DROPPED']:
                play(SND['TOILET']['DROP'])

            parse_savgame(par[0])
            if len(par) > 1:
                if act == RESP['TOILET']['FLUSHED']:
                    show_toilet(par[1], par[2], par[3], par[4], par[5])
                else:
                    show_toilet(par[1], par[2], par[3], par[4])

            if act == RESP['TOILET']['FULL']:
                error_message(texts[TXT['TOILET']['FULL']])
            elif act == RESP['TOILET']['TANKFULL']:
                error_message(texts[TXT['TOILET']['TANKFULL']])
            elif act == RESP['TOILET']['DROPTWICE']:
                error_message(texts[TXT['TOILET']['DROPTWICE']])
            else:
                error_message("")
            break

        if case(RESP['SCREEN']['WITCH']):
            parse_savgame(par[0])
            show_witch(
                par[1].split("/"),
                (par[2].split("/")[0] == "1"),
                par[2].split("/")[1])
            break

        if case(ERR['NO_SLOT_FOR_FLUSHING']):
            error_message(texts[TXT['ERR']['NO_SLOT_FOR_FLUSHING']])
            break

        if case(ERR['TOILET']['EMPTY']):
            error_message(texts[TXT['ERR']['TOILET']['EMPTY']])
            break

        if case(ERR['GUILD']['DESCR_TOO_LONG']):
            error_message(texts[TXT['ERR']['GUILD']['DESCR_TOO_LONG']])
            break

        if case(ERR['NO_CHAT_INFO']):
            break

        if case(ERR['NO_CHAT_OVERFLOW']):
            break

        if case(ERR['GUILD']['RANK_WRONG']):
            error_message(texts[TXT['ERROR']['GUILD']['RANK_WRONG']])
            break

        if case(RESP['ALBUM']):
            tmp_byte_array = Base64.decodeToByteArray(par.join("/"))
            bit_array = list()

            for i in range(len(tmp_byte_array)):
                bit_array.append((tmp_byte_array[i] & 128) / 128)
                bit_array.append((tmp_byte_array[i] & 64) / 64)
                bit_array.append((tmp_byte_array[i] & 32) / 32)
                bit_array.append((tmp_byte_array[i] & 16) / 16)
                bit_array.append((tmp_byte_array[i] & 8) / 8)
                bit_array.append((tmp_byte_array[i] & 4) / 4)
                bit_array.append((tmp_byte_array[i] & 2) / 2)
                bit_array.append(tmp_byte_array[i] & 1)

            album_content = bit_array
            show_screen_album()
            break

        if case(RESP['INVITE']['SUCCESS']):
            show(BNC['INVITE_SUCCESS'])
            hide(BNC['INVITE_INPUTDIALOGUE'])
            break

        if case(ERR['INVITE']['NOT_VALIDATED']):
            pass
        if case(ERR['INVITE']['TOO_MANY']):
            pass
        if case(ERR['INVITE']['EMAIL_REJECTED']):
            txtid = TXT['ERROR']['INVITE']['NOT_VALIDATED']
            error_message(texts[
                txtid - act + ERR['INVITE']['NOT_VALIDATED']
            ])
            break

        if case(RESP['LOGOUT_SUCCESS']):
            break

        if case(ERR['SERVER_DOWN']):
            show_disconnect_screen()
            if (param_reconnect * interval_multiplier_reconnect) < (120000):
                interval_multiplier_reconnect += 0.1
            break

        if case(ERR['JOINED_TOO_RECENTLY']):
            parse_savgame(par[0])
            error_message(texts[TXT['GUILD']['JOINED_TOO_RECENTLY']].replace(
                "%1", time_str(
                    int(savegame[SG['GUILD']['JOIN_DATE']]) + 60 * 60 * 24,
                    True
                )
            ))
            break

        if case(RESP['ATTACK']['NOT_EXIST']):
            error_message(texts[TXT['ERROR']['PLAYER_NOT_FOUND']])
            break

        if case(ERR['GUILD']['FIGHT_TOO_EXPENSIVE']):
            pass
        if case(ERR['GUILD']['ALREADY_UNDER_ATTACK']):
            pass
        if case(ERR['GUILD']['ATTACK_DELAY']):
            pass
        if case(ERR['GUILD']['ALREADY_ATTACKING']):
            pass
        if case(ERR['GUILD']['ATTACK_STATUS']):
            txtid = TXT['ERROR']['GUILD']['FIGHT_TOO_EXPENSIVE']
            error_message(texts[
                txtid - act + ERR['GUILD']['FIGHT_TOO_EXPENSIVE']
            ])
            break

        if case(RESP['GUILD']['NAMES']):
            last_attack = last_guild_data[GUILD['ATTACK_TIME']]
            if par[0] == "":
                if last_guild_data[GUILD['IS_RAID']] != 0:
                    if texts[TXT['RAID']['TEXT']]:
                        if is_today(last_attack):
                            offset = 13
                        else:
                            offset = 12

                        last_raid = int(last_guild_data[GUILD['RAID_LEVEL']])

                        actor[LBL['GILDE']['ATTACK']].text = texts[
                            TXT['RAID']['TEXT'] + offset
                        ].replace(
                            "%1", texts[TXT['DUNGEON']['NAMES'] + last_raid]
                        ).replace(
                            "%2", time_str(last_attack, True)
                        )
                    else:
                        actor[LBL['GILDE']['ATTACK']].text = ""
                else:
                    actor[LBL['GILDE']['ATTACK']].text = ""
            else:
                if is_today(last_attack):
                    offset = 2
                else:
                    offset = 0

                actor[LBL['GILDE']['ATTACK']].text = texts[
                    TXT['GUILD']['BATTLE_MSG'] + offset
                ].replace(
                    "%1", par[0]
                ).replace(
                    "%2", time_str(last_attack, True)
                )

            if par[1] == "":
                snippet = ''
            else:
                last_defense = last_guild_data[GUILD['DEFENCE']['TIME']]

                if is_today(last_defense):
                    offset = 2
                else:
                    offset = 0

                snippet = texts[
                    TXT['GUILD']['BATTLE']['MSG'] + 1 + offense
                ].replace(
                    "%1", par[1]
                ).replace(
                    "%2", time_str(last_defense, True)
                )

            actor[LBL['GILDE']['DEFENCE']].text = snippet

            if par[2]:
                if last_guild_data[GUILD['IS_RAID']] != 0:
                    if texts[TXT['RAID']['TEXT']]:
                        enable_popup(
                            CNT['GILDE']['ATTACK'],
                            texts[TXT['RAID']['TEXT'] + 14]
                        ).replace("%1", par[2])
                elif (par[0] == "") or (par[2] == ""):
                    enable_popup(CNT['GILDE']['ATTACK'])
                elif texts[TXT['GUILD']['ATTACK']['PLAYER']]:
                    enable_popup(
                        CNT['GILDE']['ATTACK'],
                        texts[TXT['GUILD']['ATTACK']['PLAYER']].replace(
                            "%1", par[2]
                        )
                    )
                else:
                    enable_popup(CNT['GILDE']['ATTACK'], par[2])
            else:
                enable_popup(CNT['GILDE']['ATTACK'])

            guild_attack_time = last_guild_data[GUILD['ATTACK_TIME']]
            guild_defense_time = last_guild_data[GUILD['DEFENCE_TIME']]
            guild_attacked = par[0]
            guild_attacking = par[1]
            break

        if case(ERR['SESSION_ID_EXPIRED']):
            LOG.warning("Achtung, session_id ist abgelaufen.")
            session_id = ""
            fight_flush_mode = False
            show_login_screen()
            break

        if case(ERR['MSG']['LEVEL_TOO_LOW']):
            if texts[TXT['ERROR']['MSG']['LEVEL_TOO_LOW']]:
                error_message(texts[TXT['ERROR']['MSG']['LEVEL_TOO_LOW']])
            else:
                error_message(''.join(
                    "Error: You need to reach at least level 10 to ",
                    "send messages."
                ))
            break

        if case(ERR['MSG']['NOT_VALIDATED']):
            if texts[TXT['ERROR']['MSG']['NOT_VALIDATED']]:
                error_message(texts[TXT['ERROR']['MSG']['NOT_VALIDATED']])
            else:
                error_message(' '.join("Error: Your email address has to be",
                                       "validated in order to send messages."))
            break

        if case(ERR['INVENTORY_FULL']):
            error_message(texts[TXT['ERROR']['INVENTORY_FULL']])
            break

        if case(ERR['INVENTORY_FULL_ADV']):
            if texts[TXT['ERROR']['INVENTORY_FULL_ADV']]:
                error_message(texts[TXT['ERROR']['INVENTORY_FULL_ADV']])
            else:
                error_message(texts[TXT['ERROR']['INVENTORY_FULL']])

            fade_out(CNT['QUEST_SLOT'], 20, 0.04, 0.3)
            force_adventure = True
            break

        if case(ERR['PLACE_BET']):
            break

        if case(RESP['BET_WON']):
            parse_savgame(par[0])
            show_bet_result(True)
            break

        if case(RESP['BET_LOST']):
            parse_savgame(par[0])
            show_bet_result(False)
            break

        if case(ERR['ACCOUNTS_PER_IP']):
            error_message(texts[TXT['ERRROR']['ACCOUNTS_PER_IP']])
            break

        if case(ERR['TOO_SOON']):
            break

        if case(ERR['LOCKED_PAYMENT']):
            error_message(
                texts[TXT['ERRROR']['LOCKED_PAYMENT']].replace(
                    "%supportemail%", param_support_email
                ).replace(
                    "%gamestaffemail%", param_gamestaff_email
                )
            )
            break

        if case(ERR['LOCKED_ADMIN']):
            if par[2]:
                if texts[TXT['LOCK_REASON'] + int(par[1]) - 1]:
                    error_message(
                        texts[TXT['LOCK_REASON'] + int(par[1]) - 1].replace(
                            "%1", str(1 + int(par[2] / (60 * 60 * 24)))
                        )
                    )
                else:
                    error_message(texts[TXT['ERRROR']['LOCKED_ADMIN']])
            else:
                error_message(texts[TXT['ERRROR']['LOCKED_ADMIN']])
            break

        if case(RESP['REQUEST']['GUILD_QUIET']):
            destroy_guild_btn_timer = True
            if on_stage(LBL['GILDE']['CHAT_CAPTION']):
                send_action(ACT['SCREEN']['GILDEN'])
            break

        if case(RESP['REQUEST']['GUILD']):
            destroy_guild_btn_timer = True
            if on_stage(LBL['GILDE']['CHAT_CAPTION']):
                send_action(ACT['SCREEN']['GILDEN'])
            else:
                pulse_gilde = True
            break

        if case(ERR['GUILD']['DONATE_FRA']):
            error_message(texts[TXT['ERROR']['GUILD']['DONATE_FRA']])
            break

        if case(ERR['GUILD']['DONATE_NEG']):
            error_message(texts[TXT['ERROR']['GUILD']['DONATE_NEG']])
            break

        if case(ERR['MAIL']['EXISTS']):
            error_message(texts[TXT['ERROR']['MAIL_EXISTS']])
            break

        if case(RESP['VALIDATE_OK']):
            if par[0]:
                param_cid = par[0]
                LOG.debug("cid set by server: " + param_cid)
            show_email_nag_screen(1)
            break

        if case(ERR['VALIDATE']):
            show_email_nag_screen(2)
            break

        if case(RESP['PASSWORD_SENT']):
            show_login_screen()
            break

        if case(ERR['REQUEST_PW']):
            error_message(texts[TXT['ERROR']['REQUEST_PW']])
            break

        if case(RESP['TRANS_COUNT']):
            sep = '.'
            if lang_code:
                sep = ','

            permanent_link = (''.join(
                "http://www.payment.playa-games.com/legal/wiretransfer_",
                lang_code,
                ".php?amount=",
                str(int((tmpAmount / 100))),
                sep,
                str(tmpAmount % 100),
                "&use=",
                par[0]
            ))
            navigate_to_url(URLRequest(permanent_link), "_blank")
            break

        if case(RESP['DEALER']['AKTION']):
            pass
        if case(RESP['DEALER']['SPONSOR']):
            pass
        if case(RESP['EMAIL_RESENT']):
            actor[LBL['EMAIL_RESEND']].htmlText = texts[TXT['EMAIL']['RESENT']]
            arabize(LBL['EMAIL_RESEND'])
            actor[LBL['OPTION']['FIELD1']].htmlText = texts[
                TXT['EMAIL']['RESENT']
            ]
            arabize(LBL['OPTION']['FIELD1'])
            remove(BTN['OPTION']['DOCHANGE'])
            break

        if case(RESP['CHAT_HISTORY']):
            if par[0] != last_chat_hist:
                last_chat_hist = par[0]
                interval_multiplier_chat = 1
            elif interval_multiplier_chat < 5:
                interval_multiplier_chat = (interval_multiplier_chat + 0.1)
            elif interval_multiplier_chat < 30:
                interval_multiplier_chat = (interval_multiplier_chat + 1)

            if par[0] == "":
                tmp_array = []
            else:
                tmp_array = par[0].split("/")

            first_chat_fill = False
            if last_chat_index == 0:
                first_chat_fill = True

                for i in range(40):
                    with actor[(LBL['GILDE']['CHAT'] + i)]:
                        default_text_format = font_format_chat
                        text = ""

            if len(tmp_array) > 0:
                for i in range(len(tmp_array)-1, 0, -1):
                    if not par[3]:
                        if ((last_chat_index != 0)
                                and (decode_chat(tmp_array[i],
                                                 False, True) == "1")):
                            remove(BNC['GILDE']['CHAT'])

                        chat_line(decode_chat(tmp_array[i]),
                                  False,
                                  get_hl_index(tmp_array[i]))

                        if (((tmp_array[i].find("§") != -1)
                             or (not so.data.noPulseOnSysMsg))
                                and pulse_gilde_on_history):
                            pulse_gilde = True

                        if last_chat_index != 0:
                            for j in range(len(offline_guild_members)):
                                tmp_str = offline_guild_members[j].lower()
                                tmp_str += ":§"
                                if tmp_array[i].lower().find(tmp_str) != -1:
                                    if on_stage(INP['GILDE_CHAT']):
                                        send_action(ACT['SCREEN']['GILDEN'])
                                    break
                    else:
                        if par[3].split("/")[i] > last_chat_index:
                            if not first_chat_fill and chat_sound:
                                play(SND['ERROR'])

                            last_chat_index = par[3].split("/")[i]
                            if ((not last_chat_index == 0)
                                    and (decode_chat(
                                        tmp_array[i], False, True) == "1")):
                                remove(BNC['GILDE']['CHAT'])

                            chat_line(
                                decode_chat(tmp_array[i]),
                                False,
                                get_hl_index(tmp_array[i])
                            )

                            if (((tmp_array[i].find("§") != -1)
                                 or (not so.data.noPulseOnSysMsg))
                                    and (pulse_gilde_on_history)):
                                pulse_gilde = True

                            for j in range(len(offline_guild_members)):
                                tmp_str = offline_guild_members[j].lower()
                                tmp_str += ":§"
                                if tmp_array[i].lower().find(tmp_str) != -1:
                                    if on_stage(INP['GILDE_CHAT']):
                                        send_action(ACT['SCREEN']['GILDEN'])
                                    break

                pulse_gilde_on_history = False

            if (par[1]) and (not par[3]):
                last_chat_index = int(par[1])

            if par[2]:
                tmp_array = par[2].split("/")
            else:
                tmp_array = []

            if len(tmp_array) > 0:
                if chat_sound:
                    play(SND['ERROR'])

                for i in range(len(tmp_array)-1, 0, -1):
                    pulse_gilde = True
                    external_whisperer = tmp_array[i][6:]
                    external_whisperer = external_whisperer[
                        0: external_whisperer.find(":§")
                    ]
                    chat_line(decode_chat(tmp_array[i]),
                              False,
                              get_hl_index(tmp_array[i]),
                              True)

                    add_suggest_names(external_whisperer)

                    if last_chat_index != 0:
                        for j in range(len(offline_guild_members)):
                            tmp_str = offline_guild_members[j].lower()
                            tmp_str += ":§"
                            if tmp_array[i].lower().find(tmp_str) != -1:
                                if on_stage(INP['GILDE_CHAT']):
                                    send_action(ACT['SCREEN']['GILDEN'])
                                break

            guild_blink_ready = True

            if ((new_crest_suggested != "")
                    and (not first_chat_fill)
                    and (on_stage(INP['GILDE_CHAT']))):
                clickchat_line(new_crest_suggested)

            new_crest_suggested = ""
            break

        if case(RESP['WHISPER_SUCCESS']):
            add_suggest_names(last_whisper_target)
            chat_line(decode_chat(par[0]), False, get_hl_index(par[0]), True)
            break

        if case(ERR['GUILD']['NAME']['REJECTED']):
            error_message(texts[TXT['ERROR']['GUILD']['NAME_REJECTED']])
            break

        if case(ERR['GUILD']['NAME']['LENGTH']):
            error_message(texts[TXT['ERROR']['GUILD']['NAME_LENGTH']])
            break

        if case(ERR['GUILD']['NAME']['CHARACTERS']):
            error_message(texts[TXT['ERROR']['GUILD']['NAME']['CHARACTERS']])
            break

        if case(ERR['GUILD']['EMAIL']['VALIDATE']):
            error_message(texts[TXT['ERROR']['GUILD']['EMAIL_VALIDATE']])
            break

        if case(ERR['GUILD']['MUSH_FREE']):
            error_message(texts[TXT['ERROR']['GUILD']['MUSH_FREE']])
            break

        if case(RESP['CHAT_LINE']):
            if decode_chat(par[0], False, True) == "1":
                remove(BNC['GILDE']['CHAT'])

            chat_line(decode_chat(par[0]), False, get_hl_index(par[0]))

            if not on_stage(INP['GILDE_CHAT']):
                pulse_gilde = True
            break

        if case(RESP['GUILD']['DONATE_SUCCESS']):
            parse_savgame(par[0])
            send_action(ACT['SCREEN']['GILDEN'])
            break

        if case(RESP['NO_LOGIN']):
            request_logout(None, True)
            show_login_screen()
            break

        if case(RESP['DELETE_ACCOUNT']['OK']):
            request_logout()
            break

        if case(RESP['CHANGE']['PASS_OK']):
            so.data.password = option_new_data
            so.flush()
            actor[INP['LOGIN_PASSWORD']].getChildAt(1).text = option_new_data
            show_option_screen()
            error_message(texts[TXT['PASSWORD_CHANGED']])
            break

        if case(RESP['CHANGE']['NAME_OK']):
            so.data.userName = option_new_data
            so.flush()
            actor[INP['NAME']].getChildAt(1).text = option_new_data
            parse_savgame(par[0])
            show_option_screen()
            error_message(texts[TXT['NAME_CHANGED']])
            break

        if case(RESP['CHANGE']['MAIL_OK']):
            show_option_screen()
            error_message(texts[TXT['EMAIL']['CHANGED']])
            break

        if case(RESP['CHANGE']['FACE_OK']):
            parse_savgame(par[0])

        if case(ACT['SCREEN']['OPTIONEN']):
            show_option_screen()
            break

        if case(RESP['DEMO_SCREEN']):
            show_demo_screen()
            break

        if case(RESP['PLAYER_SCREEN']):
            show_demo_screen(
                ("0/" + par[0]).split("/"),
                sel_name, par[2], resolve_breaks(par[1])
            )
            break

        if case(RESP['PLAYER_DESC']['SUCCESS']):
            player_desc = actor[INP['CHARDESC']].getChildAt(0).text
            break

        if case(RESP['GUILD']['CHANGE_DESC']['SUCCESS']):
            break

        if case(RESP['GUILD_DATA']):
            if par[1] == savegame[SG['GUILD']['INDEX']]:
                gilde = par[0]

            last_chat_index = 0
            send_action(ACT['GET_CHAT_HISTORY'])
            break

        if case(RESP['MAINQUEST']):
            hide(BNC['IF']['STATS'])
            parse_savgame(par[10])
            pulse_char = False
        if case(RESP['QUEST']['DONE']):
            pass
        if case(RESP['QUEST']['DONE_PIXEL']):
            pass
        if case(RESP['QUEST']['DONE_PIXEL_2']):
            fight_lock = True
            post_fight_mode = False
            show_fight_screen(
                par[0].split("/"),
                par[1].split("/"),
                (par[6] == "1"),
                par[2].split("/"),
                (par[5] == "2"),
                (par[3] + "/" + par[4]).split("/"),
                int(par[7]),
                int(par[8]),
                (par[5] == "3"),
                False,
                int(par[9])
            )
            break

        if case(RESP['GUILD_FIGHT']):
            tower_fight_mode = False
            alternate_char_opp_img = True
            fight_lock = True
            winners = list()
            last_round_fighter_name = ""
            fights = par_str.split("§")
            guild_fight_count = int((len(fights) - 1) / 2)
            skip_guild_fights = 0
            next_fight_timer.start()
            break

        if case(RESP['TOWER_FIGHT']):
            tower_fight_mode = True
            alternate_char_opp_img = True
            fight_lock = True
            winners = list()
            last_round_fighter_name = ""
            fights = par_str.split("§")
            parse_savgame(fights.pop(), True, True)
            guild_fight_count = int(((len(fights) - 1) / 2))
            skip_guild_fights = 0
            next_fight_timer.start()
            break

        if case(RESP['QUEST']['SKIP_ALLOWED_START']):
            skip_allowed = True
        if case(RESP['QUEST']['START']):
            parse_savgame(par[0])
            show_quest_screen()
            break

        if case(RESP['QUEST']['SKIP_ALLOWED']):
            skip_allowed = True
        if case(ACT['SCREEN']['TAVERNE']):
            pass
        if case(RESP['QUEST']['STOP']):
            parse_savgame(par[0])
            if par[1]:
                special_action = par[1]
            else:
                if act != RESP['QUEST']['STOP']:
                    special_action = 0
                else:
                    LOG.info(
                        "Quest cancelled, preserving special action flag!")
            LOG.info("Tavern says special action is " + special_action)
            if par[2] is not None:
                prevent_tv = (par[2] == 1)

            show_taverne_screen()
            break

        if case(ACT['SCREEN']['GILDE_GRUENDEN']):
            show_screen_gilde_gruenden()
            break

        if case(RESP['GUILD']['FOUND_SUCCESS']):
            with (actor[LBL['IF']['GOLD']]):
                text = str((int(text) - 10))
                x = actor[IMG['IF']['GOLD']].x - text_width - 10
        if case(RESP['GUILD']['RENAME_SUCCESS']):
            pass
        if case(RESP['GUILD']['IMPROVE_SUCCESS']):
            pass
        if case(RESP['GUILD']['OFFICER_SUCCESS']):
            pass
        if case(RESP['GUILD']['EXPEL_SUCCESS']):
            pass
        if case(RESP['GUILD']['INVITE_SUCCESS']):
            pass
        if case(RESP['GUILD']['MASTER_SUCCESS']):
            pass
        if case(RESP['GUILD']['JOIN_SUCCESS']):
            send_action(ACT['SCREEN']['GILDEN'])
            break

        if case(RESP['GUILD']['DELETE_SUCCESS']):
            gilde = ""
            my_own_rank = -1
            my_own_attack_target = -1
            my_own_guild_money = -1
            show_city_screen()
            break

        if case(RESP['GUILD']['COMMENCE_ATTACK_OK']):
            pass
        if case(RESP['GUILD']['JOIN_ATTACK_OK']):
            pass
        if case(RESP['GUILD']['JOIN_DEFENSE_OK']):
            parse_savgame(par[0])
            send_action(ACT['SCREEN']['GILDEN'])
            break

        if case(ACT['SCREEN']['GILDEN']):
            savegame[SG['GUILD']['INDEX']] = par[0].split("/")[0]
            gilde = par[3]
            is_mine = True
            interval_multiplier_chat = 1

        if case(RESP['OTHER_GUILD']):
            destroy_guild_btn_timer = True

            if (not on_stage(BNC['GILDE']['CREST'])
                    or (act == RESP['OTHER_GUILD'])
                    or (last_guild_crest_id != par[0].split("/")[0])
                    or (is_mine and (old_crest_str == old_crest_str()))):
                if par[1].find("§") != -1:
                    set_crest_str(par[1].split("§")[0])
                    par[1] = par[1][(par[1].find("§") + 1):]
                else:
                    last_guild_data = par[0].split("/")
                    set_default_crest()
                old_crest_str = old_crest_str()
            else:
                if par[1].find("§") != -1:
                    par[1] = par[1][(par[1].find("§") + 1):]

            if last_guild_crest_id != par[0].split("/")[0]:
                old_crest_str = old_crest_str()

            if (not is_mine) and par[1].find("///") > -1:
                par[1] = par[1] .split("///")[1]

            if not par[6]:
                par[6] = 0

            show_screen_gilden(
                par[0].split("/"),
                tmp_str,
                par[2].split("/"),
                par[3],
                is_mine,
                int(par[5]),
                int(par[4]),
                par[6]
            )
            break

        if case(ACT['SCREEN']['STALL']):
            stundenlohn = int(par[0])
            show_stall_screen()
            break

        if case(ERR['ATTACK']['AGAIN']):
            error_message(texts[TXT['ERROR']['ATTACK']['AGAIN']])
            break

        if case(ACT['SCREEN']['ARENA']):
            show_arena_screen(par[0], par[2], par[1])
            break

        if case(ERR['INBOX_FULL']):
            error_message(texts[TXT['ERROR']['INBOX_FULL']])
            break

        if case(ERR['RECIPIENT_NOT_FOUND']):
            error_message(texts[TXT['ERROR']['RECIPIENT_NOT_FOUND']])
            break

        if case(ERR['RECIPIENT_SELF']):
            error_message(texts[TXT['ERROR']['RECIPIENT_SELF']])
            break

        if case(RESP['MESSAGE_SENT']):
            add_suggest_names(last_message_target)
            remove(BNC['POST']['WRITE'])
            remove(BNC['POST']['READ'])
            add(BNC['POST']['LIST'])
            break

        if case(RESP['READ_MESSAGE']):
            remove_all()
            add(BNC['SCREEN']['POST'])
            if tageszeit() != 0:
                remove(BNC['POST']['NIGHT'])

            if tageszeit() != 1:
                remove(BNC['POST']['DAWN'])

            remove(BNC['POST']['LIST'])
            add(BNC['POST']['READ'])

            if (post_sel + post_scroll - 1) == 1:
                remove(BTN['POST']['READ_PREV'])

            if (post_sel + post_scroll - 1) == savegame[SG['MSG']['COUNT']]:
                remove(BTN['POST']['READ_NEXT'])

            if int(par[4]) > 0:
                invitegilden_id = int(par[4])
                add(BTN['POST']['ACCEPT'])

            with actor[INP['POST']['ADDRESS']].getChildAt(1):
                type = TextFieldType.DYNAMIC
                text = (' '.join(
                    texts[TXT['POST']['FROM']],
                    par[0],
                    texts[TXT['POST']['TIME']],
                    time_str(par[2])
                ))

            with actor[INP['POST']['SUBJECT']].getChildAt(1):
                type = TextFieldType.DYNAMIC
                reply_address = par[0]
                for case in switch(par[1]):
                    if case("1  ", "2  ", "3  ", "4  ", "5  ",
                            "6  ", "7  ", "8  ", "9  "):
                        par[1] = "Moo!"
                        par[3] = "Holy Cow!"
                        break

                    if case("1"):
                        par[1] = texts[TXT['SUBJECT']['GUILD_DELETED']]
                        par[3] = texts[TXT['BODY']['GUILD_DELETED']].replace(
                            "%1", par[0]
                        ).replace(
                            "%2", par[3]
                        )
                        break

                    if case("2"):
                        par[1] = texts[
                            TXT['SUBJECT']['GUILD']['DELETED_BY_ADMIN']
                        ]
                        par[3] = texts[
                            TXT['BODY']['GUILD']['DELETED_BY_ADMIN']
                        ].replace("%1", par[0]).replace("%2", par[3])
                        break

                    if case("3"):
                        par[1] = texts[TXT['SUBJECT']['GUILD_EXPELLED']]
                        par[3] = texts[
                            TXT['BODY']['GUILD_EXPELLED']
                        ].replace(
                            "%1", par[0]
                        ).replace(
                            "%2", par[3]
                        )
                        break

                    if case("4"):
                        par[1] = texts[
                            TXT['SUBJECT']['GUILD_EXPELLED_BY_ADMIN']
                        ]
                        par[3] = texts[
                            TXT['BODY']['GUILD_EXPELLED_BY_ADMIN']
                        ].replace(
                            "%1", par[0]
                        ).replace(
                            "%2", par[3]
                        )
                        break

                    if case("5"):
                        par[1] = texts[TXT['SUBJECT']['GUILD_INVITE']]
                        par[3] = texts[TXT['BODY']['GUILD_INVITE']].replace(
                            "%1", par[0]
                        ).replace(
                            "%2", par[3]
                        )
                        break

                    if case("6", "7"):
                        par[1] = texts[TXT['SUBJECT']['PVP']].replace(
                            "%1", par[0]
                        )
                        tmp_battle_info = par[3]
                        tmp_fighter_array = tmp_battle_info.split(
                            "#"
                        )[0].split("/")
                        ich_anfg = tmp_fighter_array[0]
                        er_anfg = tmp_fighter_array[6]

                        tmp_fight_array = tmp_battle_info.split(
                            "#"
                        )[1].split("/")
                        ich_ende = tmp_fight_array[len(tmp_fight_array) - 7]
                        er_ende = tmp_fight_array[len(tmp_fight_array) - 4]
                        runden_zahl = int(len(tmp_fight_array) / 6)
                        tmp_honor = abs(tmp_battle_info.split("#")[7])
                        tmp_gold = abs(int(
                            tmp_battle_info.split("#")[8] / 100))
                        tmp_silver = abs(
                            int(tmp_battle_info.split("#")[8] % 100)
                        )

                        outcome = TXT['DU_VERLOREN']
                        if ich_ende > er_ende:
                            outcome = TXT['DU_GEWONNEN']
                        plural = texts[TXT['ROUNDS_PLURAL']]
                        if runden_zahl == 1:
                            plural = ""
                        wonlost = TXT['DU']['WAS_VERLOREN']
                        if ich_ende > er_ende:
                            wonlost = TXT['DU']['WAS_GEWONNEN']

                        par[3] = texts[TXT['BODY']['PVP']].replace(
                            "%1", par[0]
                        ).replace(
                            "%2", par[3]
                        ).replace(
                            "%3", str(ich_anfg)
                        ).replace(
                            "%4", str(er_anfg)
                        ).replace(
                            "%5", str(ich_ende)
                        ).replace(
                            "%6", str(er_ende)
                        ).replace(
                            "%7", str(runden_zahl)
                        ).replace(
                            "%8", texts[outcome]
                        ).replace(
                            "%9", plural
                        ).replace(
                            "%10", str(tmp_honor)
                        ).replace(
                            "%11", str(tmp_gold)
                        ).replace(
                            "%12", str(tmp_silver)
                        ).replace(
                            "%13", texts[wonlost]
                        ).replace(
                            "#", chr(13)
                        )
                        add(BTN['POST']['VIEWFIGHT'])
                        break

                    if case("8"):
                        if texts[TXT['INV']['ACC_TITLE']] != "":
                            par[1] = texts[TXT['INV']['ACC_TITLE']]
                            par[3] = texts[TXT['INV']['ACC_TEXT']].replace(
                                "%1", par[0]
                            )
                        else:
                            par[1] = "FRIEND_LINK_ACCEPTED"
                            par[3] = (''.join(
                                "You are seeing this message in",
                                "english because it has not been translated",
                                "for your location yet. ",
                                par[0],
                                " has accepted your invitation to the game."
                                "Please wait for ",
                                par[0],
                                " to verify"
                                "email address in order to get your bonus."
                            ))
                        add(BTN['POST']['REPLY'])
                        break

                    if case("9"):
                        if texts[TXT['INV']['VAL_TITLE']] != "":
                            par[1] = texts[TXT['INV']['VAL_TITLE']]
                            par[3] = texts[TXT['INV']['VAL_TEXT']].replace(
                                "%1", par[0]
                            )
                        else:
                            par[1] = "FRIEND_EMAIL_VERIFIED"
                            par[3] = ''.join(
                                par[0],
                                " has verified his/her email address."
                            )
                        add(BTN['POST']['REPLY'])
                        break

                    if case():
                        add(BTN['POST']['REPLY'])

                reply_subject = par[1]
                text = par[1].replace("%u20AC", "€")

            post_read_text = par[3]
            if texts[TXT['ALERT_WORDS']]:
                alert_words = texts[TXT['ALERT_WORDS']].split(" ")

                for i in range(len(alert_words)):
                    if (post_read_text.lower().find(
                            alert_words[i].lower()) != -1):
                        post_read_text = texts[TXT['ALERT_TEXT']].replace(
                            "%1", post_read_text
                        )
                        break

            with (actor[INP['POST_TEXT']].getChildAt(1)):
                type = TextFieldType.DYNAMIC
                text = swap_words(post_read_text).replace(
                    "#", chr(13)
                ).replace(
                    "%u20AC", "€"
                )

            forward_text = post_read_text
            break

        if case(ACT['SCREEN']['POST']):
            show_post_screen(par)
            break

        if case(ACT['SCREEN']['PILZDEALER']):
            if par[0]:
                dealer_aktion = int(par[0])
            else:
                dealer_aktion = 0
            pulse_dealer = False
            show_dealer_screen()
            break

        if case(ACT['SCREEN']['WELTKARTE']):
            parse_savgame(par[0])
            show_main_quests_screen(par[1].split("/"))
            break

        if case(ACT['SCREEN']['EHRENHALLE']):
            last_guild_shown = ""

        if case(RESP['SCREEN']['GILDENHALLE']):
            guild_hall_mode = (act == RESP['SCREEN']['GILDENHALLE'])
            if guild_hall_mode:
                hide(
                    LBL['HALL'][['GOTO_SPIELER_HL']],
                    LBL['HALL']['GOTO_GILDEN']
                )
                show(
                    LBL['HALL']['GOTO_SPIELER'],
                    LBL['HALL']['GOTO_GILDEN_HL']
                )
            else:
                last_hall_members = list()
                last_hall_members.append("")
                show(LBL['HALL'][['GOTO_SPIELER_HL']],
                     LBL['HALL']['GOTO_GILDEN'])
                hide(LBL['HALL']['GOTO_SPIELER'],
                     LBL['HALL']['GOTO_GILDEN_HL'])

            if par[1]:
                ruhmes_halle_such_string = par[1]
                ruhmes_halle_such_name = True

            if not on_stage(IMG['SCR']['HALLE']['BG']):
                show_hall_screen()

            with actor[CNT['HALL_LIST']]:
                while numChildren > 0:
                    removeChildAt(0)

            if text_dir == "right":
                hall_list_add_field(
                    col_idx['6_X'] + 40,
                    REL['HALL']['LIST']['LINES']['Y'],
                    texts[TXT['HALL']['LIST']['COLUMN']['1']],
                    FontFormat_HallListHeading
                )

                modetxt = TXT['HALL']['LIST']['COLUMN']['2']
                if guild_hall_mode:
                    modetxt = TXT['HALL']['LIST']['COLUMN']['3']
                hall_list_add_field(
                    col_idx['6_X'] - 10,
                    REL['HALL']['LIST']['LINES']['Y'],
                    texts[modetxt],
                    FontFormat_HallListHeading
                )
                hall_list_add_field(
                    col_idx['2_X'] - 10,
                    REL['HALL']['LIST']['LINES']['Y'],
                    texts[TXT['HALL']['LIST']['COLUMN']['5']],
                    FontFormat_HallListHeading
                )

                modetxt = TXT['GUILDHALL']['LEADER']
                if guild_hall_mode:
                    modetxt = TXT['HALL']['LIST']['COLUMN']['3']
                hall_list_add_field(
                    col_idx['4_X'] + 20,
                    REL['HALL']['LIST']['LINES']['Y'],
                    texts[modetxt],
                    FontFormat_HallListHeading
                )

                modetxt = TXT['GUILDHALL']['MEMBERS']
                if guild_hall_mode:
                    modetxt = TXT['HALL']['LIST']['COLUMN']['4']
                hall_list_add_field(
                    col_idx['3_X'] + 25,
                    REL['HALL']['LIST']['LINES']['Y'],
                    texts[modetxt],
                    FontFormat_HallListHeading
                )
            else:
                hall_list_add_field(
                    col_idx['1_X'],
                    REL['HALL']['LIST']['LINES']['Y'],
                    texts[TXT['HALL']['LIST']['COLUMN']['1']],
                    FontFormat_HallListHeading
                )

                modetxt = TXT['HALL']['LIST']['COLUMN']['2']
                if guild_hall_mode:
                    modetxt = TXT['HALL']['LIST']['COLUMN']['3']
                hall_list_add_field(
                    col_idx['2_X'],
                    REL['HALL']['LIST']['LINES']['Y'],
                    texts[modetxt],
                    FontFormat_HallListHeading
                )

                hall_list_add_field(
                    col_idx['6_X'],
                    REL['HALL']['LIST']['LINES']['Y'],
                    texts[TXT['HALL']['LIST']['COLUMN']['5']],
                    FontFormat_HallListHeading
                )

                modetxt = TXT['GUILDHALL']['LEADER']
                if guild_hall_mode:
                    modetxt = TXT['HALL']['LIST']['COLUMN']['3']
                hall_list_add_field(
                    col_idx['4_X'],
                    REL['HALL']['LIST']['LINES']['Y'],
                    texts[modetxt],
                    FontFormat_HallListHeading
                )

                modetxt = TXT['GUILDHALL']['MEMBERS']
                if guild_hall_mode:
                    modetxt = TXT['HALL']['LIST']['COLUMN']['4']
                hall_list_add_field(
                    col_idx['5_X'],
                    REL['HALL']['LIST']['LINES']['Y'],
                    texts[modetxt],
                    FontFormat_HallListHeading
                )

            hall_list_name = list()
            hall_list_guild = list()
            tmp_array = par[0].split("/")
            line = 1

            for i in range(len(tmp_array) - 1):
                tmp_str = ''
                if tmp_array[i] < 0:
                    tmp_str += '-'
                tmp_str += ruhmes_halle_such_string.lower()

                tmpidx = i
                if ruhmes_halle_such_name:
                    if guild_hall_mode:
                        tmpidx += 2
                    else:
                        tmpidx += 1

                if ((not guild_hall_mode)
                        and (not ruhmes_halle_such_name)
                        and (tmp_str == tmp_array[tmpidx].lower())):
                    tmp_fmt = FontFormat_HallListHighLight
                elif guild_hall_mode and (int(tmp_array[i + 3]) < 0):
                    tmp_fmt = FontFormat_GuildHallNoAttack
                elif ((not guild_hall_mode)
                      and (not lastAttacked.find(
                          tmp_array[i + 1].lower()) == -1)):
                    tmp_fmt = FontFormat_GuildHallNoAttack
                else:
                    tmp_fmt = FontFormat_HallListText

                last_hall_members.append(tmp_array[i + 1])
                arrow_hall_mode = True

                col_idx = col_idx
                lines_idx = REL['HALL']['LIST']['LINES']['Y']
                lines_idx += line * REL['HALL']['LIST']['LINE']['Y']

                if text_dir == "right":
                    hall_list_add_field(
                        col_idx['6_X'] + 40,
                        lines_idx,
                        abs(tmp_array[i]),
                        tmp_fmt,
                        0,
                        guild_hall_mode
                    )

                    if guild_hall_mode:
                        modetxt = ''
                    elif tmp_array[i] < 0:
                        modetxt = '[J]'
                    elif tmp_array[i + 3] < 0:
                        modetxt = '[M]'
                    else:
                        modetxt = "[K]"

                    hall_list_add_field(
                        col_idx['6_X'] - 10,
                        lines_idx + 5,
                        modetxt,
                        tmp_fmt
                    )
                    i += 1

                    hall_list_name[line] = tmp_array[i]
                    i += 1

                    tmpidx = col_idx['6_X'] - 30
                    tmpidx2 = col_idx['5_X'] - col_idx['4_X'] - 10
                    if guild_hall_mode:
                        tmpidx = col_idx['4_X'] + 20
                        tmpidx2 = (col_idx['4_X'] - col_idx['3_X'] - 10)
                    hall_list_add_field(
                        tmpidx,
                        lines_idx,
                        tmp_array[i],
                        tmp_fmt,
                        tmpidx2
                    )

                    hall_list_guild[line] = tmp_array[i]
                    i += 1

                    tmpidx = col_idx['4_X'] - 20
                    tmpidx2 = col_idx['5_X'] - col_idx['4_X'] - 10
                    if guild_hall_mode:
                        tmpidx = col_idx['6_X'] + 10
                        tmpidx2 = (col_idx['4_X'] - col_idx['2_X'] - 10)
                    tmp_str = tmp_array[i - 1]
                    if tmp_array[i] == "":
                        tmp_str = texts[TXT['NOGUILD']]
                    hall_list_add_field(
                        tmpidx,
                        lines_idx,
                        tmp_str,
                        tmp_fmt,
                        tmpidx2,
                        True
                    )
                    i += 1

                    hall_list_add_field(
                        col_idx['3_X'] + 25,
                        lines_idx,
                        abs(tmp_array[i]),
                        tmp_fmt,
                        0,
                        guild_hall_mode
                    )

                    tmpidx = tmp_array[i]
                    if tmp_array[i] == 1:
                        tmpidx = 0
                    hall_list_add_field(
                        col_idx['2_X'] - 10,
                        lines_idx,
                        tmpidx,
                        tmp_fmt,
                        0,
                        guild_hall_mode
                    )
                else:
                    hall_list_add_field(
                        col_idx['1_X'],
                        lines_idx,
                        abs(tmp_array[i]),
                        tmp_fmt,
                        0,
                        guild_hall_mode
                    )

                    if guild_hall_mode:
                        modetxt = ''
                    elif tmp_array[i] < 0:
                        modetxt = '[J]'
                    elif tmp_array[i + 3] < 0:
                        modetxt = '[M]'
                    else:
                        modetxt = "[K]"

                    hall_list_add_field(
                        col_idx['2_X'],
                        lines_idx + 5,
                        modetxt,
                        tmp_fmt
                    )
                    i += 1

                    hall_list_name[line] = tmp_array[i]
                    i += 1

                    tmpidx = col_idx['3_X']
                    tmpidx2 = col_idx['4_X'] - col_idx['3_X'] - 10
                    if guild_hall_mode:
                        tmpidx = col_idx['4_X']
                        tmpidx2 = (col_idx['5_X'] - col_idx['4_X'] - 10)
                    hall_list_add_field(
                        tmpidx,
                        lines_idx,
                        tmp_array[i],
                        tmp_fmt,
                        tmpidx2
                    )

                    hall_list_guild[line] = tmp_array[i]
                    i += 1

                    tmpidx = col_idx['4_X']
                    tmpidx2 = col_idx['5_X'] - col_idx['4_X'] - 10
                    if guild_hall_mode:
                        tmpidx = col_idx['2_X']
                        tmpidx2 = (col_idx['4_X'] - col_idx['2_X'] - 10)
                    tmp_str = tmp_array[i - 1]
                    if tmp_array[i] == "":
                        tmp_str = texts[TXT['NOGUILD']]
                    hall_list_add_field(
                        tmpidx,
                        lines_idx,
                        tmp_str,
                        tmp_fmt,
                        tmpidx2,
                        True
                    )
                    i += 1

                    hall_list_add_field(
                        col_idx['5_X'],
                        lines_idx,
                        abs(tmp_array[i]),
                        tmp_fmt,
                        0,
                        guild_hall_mode
                    )

                    tmpidx = tmp_array[i]
                    if tmp_array[i] == 1:
                        tmpidx = 0
                    hall_list_add_field(
                        col_idx['6_X'],
                        lines_idx,
                        tmpidx,
                        tmp_fmt,
                        0,
                        guild_hall_mode
                    )

                line += 1
            break

        if case(RESP['ARBEIT']['START'], RESP['ARBEIT']['STOP']):
            parse_savgame(par[0])
            show_work_screen()
            break

        if case(RESP['ARBEIT']['ERLEDIGT']):
            parse_savgame(par[0])
            verdientes_geld = par[1]
            show_work_success_screen()
            break

        if case(ACT['SCREEN']['ARBEITEN']):
            stundenlohn = int(par[0])
            show_work_screen()
            break

        if case(RESP['SAVEGAME']['STAY_ERROR']):
            error_message(texts[TXT['ERROR']['SELL_ITEM']])

        if case(RESP['SAVEGAME']['STAY'],
                RESP['SAVEGAME']['SHARD'],
                RESP['SAVEGAME']['MIRROR'],
                RESP['MOVE']['TOWER_ITEM']):
            parse_savgame(par[0])
            if on_stage(IMG['SCR']['CHAR_BG']):
                if act == RESP['MOVE']['TOWER_ITEM']:
                    show_tower_screen(par)
                else:
                    if act == RESP['SAVEGAME']['SHARD']:
                        play(SND['SHARD'])
                        mirror_fade_amount = 0.2
                        mirror_ani_timer.start()

                    if act == RESP['SAVEGAME']['MIRROR']:
                        play(SND['MIRROR'])

                    display_inventory(
                        None, on_stage(IMG['SCR']['CHAR_BG_RIGHT'])
                    )

                    for i in range(13):
                        if mirror_pieces[i]:
                            add(IMG['MIRROR']['PIECE'] + i)
                        else:
                            remove(IMG['MIRROR']['PIECE'] + i)
            break

        if case(ACT['SCREEN']['CHAR']):
            parse_savgame(par[0])
            player_desc = resolve_breaks(par[1])
            if savegame[SG['FACE']['1']] == 0:
                show_build_character_screen()
            else:
                show_character_screen(None, True)
            break

        if case(ACT['SCREEN']['ZAUBERLADEN']):
            parse_savgame(par[0])
            if par[1]:
                special_action = par[1]
            else:
                special_action = 0

            LOG.info("Magic shop says special action is" + special_action)
            if on_stage(IMG['SCR']['FIDGET_BG']):
                display_inventory()
            else:
                load(IMG['SCR']['FIDGET_BG'])
                show_character_screen()
                whendo_loaded(do_act_zauberladen)
            break

        if case(ACT['SCREEN']['SCHMIEDE']):
            parse_savgame(par[0])
            if par[1]:
                special_action = par[1]
            else:
                special_action = 0
            LOG.info("Weapon shop says special action is" + special_action)
            if on_stage(IMG['SCR']['SHAKES_BG']):
                display_inventory()
            else:
                load(IMG['SCR']['SHAKES_BG'])
                show_character_screen()
                whendo_loaded(do_act_schmiede)
            break

        if case(RESP['UPDATE']['CHECK']):
            ExternalInterface.call("refresh")
            break

        if case(RESP['LOGIN']['SUCCESS']['BOUGHT'],
                RESP['LOGIN']['SUCCESS']):
            mirror_fade_amount = 0.2
            admin_login = ""

            mush_bought = 0
            if act == RESP['LOGIN']['SUCCESS_BOUGHT']:
                mush_bought = int(par[3])

            beer_fest = False
            if par[5]:
                beer_fest = not int(par[5]) == 0

            if par[4]:
                param_server_version_act = par[4]

            session_id = ""
            if par[2]:
                session_id = par[2]

            level_up = False
            last_level = 0
            old_ach = list()
            old_album = -1
            album_effect = False
            previous_login = True
            gilden_id = 0
            parse_savgame(par[0], False)

            dealer_aktion = 0
            if par[1]:
                dealer_aktion = int(par[1])

            pulse_dealer = False
            if dealer_aktion > 0:
                pulse_dealer = True

            so.data.skipAutoLOGin = False
            if not so.data.HasAccount:
                so.data.PaymentMethod = 4

            so.data.HasAccount = True
            so.data.userName = actor[INP['NAME']].getChildAt(1).text
            so.data.password = actor[INP['LOGIN_PASSWORD']].getChildAt(1).text
            so.flush()
            add(CNT['IF']['LOGOUT'])

            if savegame[SG['FACE']['1']] == 0:
                LOG.error("Fehler): Charakter nicht initialisiert.")
                request_logout()
            else:
                parse_savgame(par[0])
                server_time = int(savegame[SG['SERVER']['TIME']])
                email_date = int(savegame[SG['EMAIL']['DATE']])

                if view_player != "":
                    sel_name = view_player
                    send_action(ACT['REQUEST']['CHAR'], view_player)
                elif param_hall != "":
                    send_action(ACT['SCREEN']['EHRENHALLE'], param_hall, "-2")
                    param_valid = ""
                elif ((int(savegame[SG['EMAIL']['VALID']]) < 1)
                      and (server_time > (email_date + 2 * 60 * 24 * 60))):
                    if param_valid != "":
                        send_action(ACT['VALIDATE'], param_valid)
                        param_valid = ""
                    else:
                        show_email_nag_screen()
                elif int(savegame[SG['EMAIL']['VALID']]) == 1:
                    if param_valid != "":
                        show_email_nag_screen(3)
                    else:
                        show_city_screen()
                elif param_valid != "":
                    send_action(ACT['VALIDATE'], param_valid)
                    param_valid = ""
                else:
                    show_city_screen()
            break

        if case(ERR['ALREADY_IN_GUILD'],
                ERR['NO_INDEX_FREE'],
                ERR['FIGHT_SELF'],
                ERR['GUILD']['NOT_FOUND'],
                ERR['GUILD']['NOT_ALLOWED'],
                ERR['GUILD']['LACK_MUSH'],
                ERR['GUILD']['LACK_GOLD'],
                ERR['GUILD']['BUILDING_NOT_FOUND'],
                ERR['GUILD']['BUILDING_MAX'],
                ERR['GUILD']['NOT_MEMBER'],
                ERR['GUILD']['MASTER_CANT_BE_OFFICER'],
                ERR['GUILD']['IS_FULL'],
                ERR['GUILD']['ALREADY_YOU_OTHER'],
                ERR['GUILD']['NOT_REAL_MEMBER'],
                ERR['GUILD']['ALREADY_YOU_THIS'],
                ERR['GUILD']['PLAYER_NOT_FOUND'],
                ERR['SUBJECT']['TOO_SHORT'],
                ERR['GUILD']['TOO_EXPENSIVE'],
                ERR['GUILD']['CHAT']['NOT_MEMBER'],
                ERR['GUILD']['CHAT']['HISTORY'],
                ERR['GUILD']['CHAT']['TEXT_ERROR'],
                ERR['BEER'],
                ERR['NO_MUSH_BAR'],
                ERR['NO_ENDURANCE'],
                ERR['WORSE_MOUNT'],
                ERR['GUILD']['ALREADY_MEMBER'],
                ERR['NOT_INVITED'],
                ERR['NO_MUSH_PVP'],
                ERR['NO_MUSH_MQ']):
            error_message(
                texts[
                    TXT['ERROR']['ALREADY_IN_GUILD']
                    - ERR['ALREADY_IN_GUILD'] + act
                ]
            )
            break

        if case(ERR['BOOST']):
            break

        if case(RESP['ACCOUNT']['SUCCESS']):
            actor[
                INP['LOGIN_PASSWORD']
            ].getChildAt(1).text = actor[INP['PASSWORD']].getChildAt(1).text
            so.data.skipAutoLOGin = False
            so.data.HasAccount = True
            so.data.had_account = True
            so.data.userName = actor[INP['NAME']].getChildAt(1).text
            so.data.password = actor[INP['LOGIN_PASSWORD']].getChildAt(1).text
            so.data.advpar = param_obj
            so.flush()
            log_in_after_pixel = True
            break

        if case(ERR['NAME_EXISTS']):
            error_message(texts[TXT['ERROR']['NAME_EXISTS']])
            break

        if case(ERR['NAME_TOO_SHORT']):
            error_message(texts[TXT['ERROR']['NAME_TOO_SHORT']])
            break

        if case(ERR['PASSWORD_TOO_SHORT']):
            error_message(texts[TXT['ERROR']['PASSWORD_TOO_SHORT']])
            break

        if case(ERR['EMAIL_REJECTED']):
            error_message(texts[TXT['ERROR']['EMAIL_REJECTED']])
            break

        if case(ERR['NAME_REJECTED']):
            error_message(texts[TXT['ERROR']['NAME_REJECTED']])
            break

        if case(ERR['LOGIN_FAILED']):
            so.data.skipAutoLlogin = True
            so.data.password = ""
            so.flush()
            actor[INP['EMAIL']].getChildAt(1).text = ""
            actor[INP['PASSWORD']].getChildAt(1).text = ""
            char_volk = 0
            show_login_screen(None, True, True)
            error_message(texts[TXT['ERROR']['LOGIN_FAILED']])
            break

        if case(ERR['TOO_EXPENSIVE']):
            if on_stage(BTN['MODIFY_CHARACTER']):
                char_volk = revertchar_volk
                char_male = revertchar_male
                char_color = revertchar_color
                char_mouth = revertchar_mouth
                char_beard = revertchar_beard
                char_nose = revertchar_nose
                char_eyes = revertchar_eyes
                char_brows = revertchar_brows
                char_ears = revertchar_ears
                char_hair = revertchar_hair
                char_special = revertchar_special
                char_special2 = revertchar_special2
                show_option_screen()

            error_message(texts[TXT['ERROR']['TOO_EXPENSIVE']])
            break

        if case(ERR['WRONG']['PASSWORD']):
            error_message(texts[TXT['ERROR']['WRONG_PASSWORD']])
            break

        if case(ERR['FACE']['DATA_INCORRECT']):
            error_message(texts[TXT['ERROR']['FACE_DATA_INCORRECT']])
            break

        if case(ERR['EMAIL_WRONG']):
            error_message(texts[TXT['ERROR']['EMAIL']['WRONG']])
            break

        if case(RESP['PLAYER_NOT_FOUND']):
            error_message(texts[TXT['ERROR']['PLAYER_NOT_FOUND']])
            break

        if case(act < 0):
            error_message(
                texts[TXT['ERROR']['UNKNOWN']] + " (#" + str(act) + ")"
            )
            break
        if case():
            LOG.warning("Warning: Action unknown: " + act + ". Ignored!")

    playerid = savegame[SG['PLAYER_ID']]
    if act == RESP['ACCOUNT']['SUCCESS']:
        playerid = par[0]

    if defined_pixel_calls[act]:
        ExternalInterface.call(
            defined_pixel_calls[act],
            str(act),
            param_cid,
            playerid,
            param_obj,
            so.data.advpar
        )

    pas = list()
    pxl_str = ""
    in_var = False

    for pixel in trackPixels:
        if (((int(pixel[0]) == act) or (next_pxl > 0))
                and (next_pxl == int(pixel[0]))):
            pas = list()

            for pa in pixel[1].split(","):
                if pa.find("-") != -1:
                    parange = pa.split("-")
                    for i in range(int(parange[0]), int(parange[1])+1):
                        pas.append(int(i))
                else:
                    pas.append(int(pa))

            if (pixel[1] == "") or (not pas.index(int(param_adv)) != -1):
                pxl_str = pixel[2].replace(
                    "%playerid%", savegame[SG['PLAYER_ID']]
                ).replace(
                    "%cid%", param_cid
                ).replace(
                    "%mushbought%", str(mush_bought / 100)
                )

                if so.data.advpar:
                    pxl_arr = pxl_str.replace("<", ">").split(">")
                    pxl_str = ""
                    in_var = False

                    for pxl_itm in pxl_arr:
                        if in_var:
                            if so.data.advpar[pxl_itm]:
                                pxl_str += str(so.data.advpar[pxl_itm])
                            else:
                                LOG.warning(''.join(
                                    "Warning: Constructing tracking pixel ",
                                    "url: Variable",
                                    pxl_itm,
                                    "was not within the stored parameters."
                                ))
                        else:
                            pxl_str = pxl_str + pxl_itm

                        in_var = not in_var

                if int(savegame[SG['PLAYER_ID']]) == 0:
                    next_pxl = -(act)
                else:
                    load_tracking_pixel(pxl_str)

    if next_pxl > 0:
        next_pxl = 0

    if log_in_after_pixel:
        request_login(event)


def io_error_handler(event):
    '''
        log IO errors

        TODO: better use exceptions??
    '''
    LOG.error(event)


def get_file_version():
    '''
        get file version

        TODO: hor does this work anyways?
    '''
    tmp_str = get_my_path(1)
    num_str = ""
    result = ""
    tmp_str = tmp_str.split(".")[0]

    for i in range(len(tmp_str), 0, -1):
        num_str = tmp_str[i: 1]
        if num_str == str(int(num_str)):
            result += num_str

    return int(result)


def get_my_path(mode=0):
    '''
        get url/path of current file
    '''
    full_path = loader_info.url
    sections = full_path.split("/")
    file_name = sections[(sections.length - 1)]
    folder_name = full_path[0: len(full_path) - len(file_name)]
    for case in Switch(mode):
        if case(0):
            return folder_name
        if case(1):
            return file_name
        if case(2):
            return full_path

    return ""


def get_ip():
    '''
        return fake own ip
    '''
    return "127.0.0.1"


def set_title_bar(msg=""):
    '''
        set browser window title
    '''
    tmp_str = ""
    if msg == "":
        tmp_str = " - "

    msg += ''.join(
        tmp_str,
        texts[TXT['GAMETITLE']],
        " (",
        server.split(".")[0],
        ")"
    )

    ExternalInterface.call("set_title", msg)


def swap_words(tmp_str):
    '''
        some oscure string manipulation

        TODO: hat does this do?
    '''
    if text_dir == "right":
        tmp_arr = list()
        tmp_str2 = ""
        tmp_char = ""
        tmp_arr = tmp_str.split(" ").reverse()

        for k in range(len(tmp_arr)):
            if len(tmp_arr[k]) >= 2:
                punct1 = tmp_arr[k][-3: 3]
                if punct1 != "...":
                    punct1 = tmp_arr[k][-1: 1]

                punct2 = tmp_arr[k][0: 1]
                if ((punct1 != "!")
                        and (punct1 != ".")
                        and (punct1 != ":")
                        and (punct1 != "،")
                        and (punct1 != "x؟")
                        and ((punct1 != "\"")
                             or (len(tmp_arr[k].split("\"")) > 2))):
                    punct1 = ""

                if ((punct2 != "\"")
                        or (len(tmp_arr[k].split("\"")) > 2)):
                    punct2 = ""

                if punct1 == "...":
                    punct2 += "..."
                    punct1 = ""

                tmpidx = 0
                if punct2 != "":
                    tmpidx = 1

                tmpidx2 = len(tmp_arr[w]) - len(punct1 + punct2) + punct2

                tmp_arr[w] = punct1 + tmp_arr[w][tmpidx: tmpidx2]

        tmp_str = tmp_arr.join(" ")
        tmp_str = tmp_str.replace(
            "(", "#PARENTHESIS#"
        ).replace(
            ")", "("
        ).replace(
            "#PARENTHESIS#", ")"
        )

        tmp_str = tmp_str.replace(
            "[", "#SBRACKET#"
        ).replace(
            "]", "["
        ).replace(
            "#SBRACKET#", "]"
        )

    return tmp_str


def superior_font(font1, font2):
    '''
        get higher rated font from hardcoded ranking
    '''
    font_ranking = [
        "Gorilla Milkshake", "Komika Text", "Verdana", "Arial Narrow"
    ]
    rank1 = font_ranking.index(font1)
    rank2 = font_ranking.index(font2)

    if rank1 < 0:
        LOG.warning(' '.join(
            "Warning: Font",
            font1,
            "was unknown and could not be ranked."
        ))
        rank1 = len(font_ranking)

    if rank2 < 0:
        LOG.warning(' '.join(
            "Warning: Font",
            font2,
            "was unknown and could not be ranked."
        ))
        rank2 = len(font_ranking)

    if rank1 > rank2:
        return font1
    else:
        return font2


def define_bunch(bunch_id, *args):
    '''
        define group of actors
    '''
    actor[bunch_id] = list()

    for arg in args:
        actor[bunch_id].append(arg)


def add_bunch(bunch_id, *args):
    '''
        add actors to goup
    '''
    for arg in args:
        actor[bunch_id].append(arg)


def define_snd(actor_id, url, predo_load=False):
    '''
        define sound actor
    '''
    if url.lower()[0: 4] == "http:":
        full_url = url
    else:
        full_url = snd_url[snd_url_index] + url

    actor[actor_id] = Sound()
    actorSoundLoader[actor_id] = SoundLoaderContext()
    actorURL[actor_id] = full_url
    actorLoaded[actor_id] = 0
    if predo_load:
        load(actor_id)


def define_btn(actor_id, caption, handler, btn_class,
               pos_x=0, pos_y=0, scale_x=1, scale_y=1, vis=True):
    '''
        define button actor
    '''
    def play_click_sound():
        '''
            button click sound
        '''
        play(SND['CLICK'])

    actor[i] = btn_class()

    with actor[actor_id]:
        add_event_listener(MouseEvent.MOUSE_DOWN, play_click_sound)
        if btn_class == btn_classPlus:
            add_event_listener(MouseEvent.MOUSE_DOWN, handler)
        else:
            add_event_listener(MouseEvent.CLICK, handler)

        x = pos_x
        y = pos_y
        scaleX = scale_x
        scaleY = scale_y
        visible = bool(vis)
        tab_enabled = False
        allow_smoothing = True
        force_smoothing = True
        smoothing = True

    if caption != "":
        set_btn_text(actor_id, caption)


def error_message(msg=""):
    '''
        Display error message
    '''
    if msg != "":
        LOG.error("Error message: " + msg)

        if on_stage(SHP['FUCK']['BLACK_SQUARE']):
            with actor[LBL['ERROR']]:
                text = msg
                scaleX = 1
                scaleY = 1
                x = POS['IF']['ERROR_X'] - int(text_width / 2)
                y = POS['IF']['ERROR_Y'] + 60

            add(LBL['ERROR'])
        else:
            if on_stage(CNT['GILDE']['LIST']):
                if msg.replace(" ", "") != "":
                    chat_line(msg, True)
            else:
                if ((on_stage(BTN['CREATE_CHARACTER'])
                     and (not on_stage(IMG['IF']['WINDOW'])))):
                    with actor[LBL['CREATE']['RACE_DESC']]:
                        default_text_format = FontFormat_ClassError
                        text = msg
                        default_text_format = FontFormat_DefaultLeft

                    actor[LBL['CREATE']['CLASS']].text = ""
                    actor[LBL['CREATE']['CLASS_DESC']].text = ""

                else:
                    with actor[LBL['ERROR']]:
                        text = msg
                        scaleX = 1
                        scaleY = 1
                        if on_stage(BTN['SHOPS_NEWWAREZ']):
                            x = POS['SHOP']['ERROR_X'] - int(text_width / 2)
                            y = POS['SHOP']['ERROR_Y']
                        elif on_stage(IMG['TOILET']):
                            x = (POS['SHOP']['ERROR_X'] - 15
                                 - int(text_width / 2))
                            y = 720
                        elif on_stage(BTN['QUEST']['CANCEL']):
                            x = POS['IF']['ERROR_X'] - int(text_width / 2)
                            y = POS['QUEST']['ERROR_Y']
                        elif on_stage(IMG['POST_BG']):
                            x = POS['IF']['ERROR_X'] - int(text_width / 2)
                            y = POS['QUEST']['ERROR_Y']
                        elif on_stage(LBL['STALL_TITEL']):
                            x = POS['IF']['ERROR_X'] - int(text_width / 2)
                            y = POS['QUEST']['ERROR_Y']
                        elif on_stage(BTN['CHAR_ATTACK']):
                            scaleX = 0.7
                            scaleY = 0.7
                            x = 280 + 500 + 235 - width / 2
                            y = 100 + 657
                        elif on_stage(SHP['MAINQUEST']):
                            x = POS['IF']['ERROR_X'] - int(text_width / 2)
                            y = POS['MQ']['ERROR_Y']
                        else:
                            x = POS['IF']['ERROR_X'] - int(text_width / 2)
                            y = POS['IF']['ERROR_Y']

                    add(LBL['ERROR'])


def enable_popup(actor_id, *args):
    '''
        enable popup actor
    '''
    i = 0
    popup_width = 0
    textY = 0
    textX = 0
    my_stamp = 0
    show_popup = None
    position_popup = None
    hide_popup = None

    my_stamp, popup_stamp = popup_stamp + 1
    if popup_stamp > 10000:
        popup_stamp = 0

    if len(args) > 0:
        with actor[actor_id]:
            add_event_listener(MouseEvent.MOUSE_OVER, show_popup)
            add_event_listener(MouseEvent.MOUSE_MOVE, position_popup)
            add_event_listener(MouseEvent.MOUSE_OUT, hide_popup)
            add_event_listener(MouseEvent.MOUSE_DOWN, hide_popup)
            add_event_listener(MouseEvent.MOUSE_UP, hide_popup)

    actorpopup_stamp[actor_id] = my_stamp


def on_stage(actor_id):
    '''
        actor is schon on screen?
    '''
    if actor[actor_id] is DisplayObject:
        return bool(get_child_by_name(actor[actor_id].name))
    return False


def tv_timer_event_handler():
    '''
        handle tev timer event
    '''
    tv_wobble += 0.1
    while tv_wobble > (2 * math.pi):
        tv_wobble -= 2 * math.pi
    if (tv_status_dest - tv_status) >= 0.1:
        tv_status += 0.1
    elif (tv_status - tv_status_dest) >= 0.1:
        tv_status -= 0.1
    else:
        tv_status = tv_status_dest

    tv_ani += 1
    if tv_ani >= 4:
        tv_ani = 0

    if tv_status == 1:
        show(CA['TV'])
    if tv_status == 0:
        hide(CA['TV'])

    for i in range(4):
        actor[IMG['TV'] + i].scaleX = tv_status
        actor[IMG['TV'] + i].scaleY = tv_status
        actor[IMG['TV'] + i].rotation = math.sin(tv_wobble) * 5
        actor[IMG['TV'] + i].alpha = tv_status
        if (i == tv_ani) and (tv_status > 0):
            show(IMG['TV'] + i)
        else:
            hide(IMG['TV'] + i)

    if not on_stage(IMG['TV']):
        tv_timer.stop()

        for i in range(4):
            hide(IMG['TV'] + i)

        tv_status = 0
        tv_status_dest = 0


def witch_timer_event_handler():
    '''
        handle itch time event
    '''
    witch_ani_step += 1

    if witch_ani_step >= 15:
        witch_ani_step = 0

    for i in range(15):
        if i == witch_ani_step:
            show(IMG['WITCH_ANI'] + i)
        else:
            hide(IMG['WITCH_ANI'] + i)

    if not on_stage(IMG['WITCH']):
        witch_ani_timer.stop()


def sound_loaded(duration):
    '''
        load sound success callback
    '''
    LOG.debug("Sound " + actor_id + " geladen.")
    actor[actor_id].play(0, duration, stObject)


def play(actor_id, endless=False):
    '''
        play a sound
    '''
    sound_loaded = None

    if actorLoaded[actor_id] == 2:
        duration = 0
        if endless:
            duration = 30000
        actor[actor_id].play(0, duration, stObject)
    else:
        LOG.warning(' '.join("Warnung: Sound",
                             actor_id,
                             "nicht geladen! Wird geladen..."))
        actor[actor_id].add_event_listener(Event.COMPLETE, sound_loaded)
        load(actor_id)


def process_arg(arg):
    '''
        process popup argument
    '''
    i_array = 0
    tmp_do = None
    if arg is list:
        for i_array in arg:
            process_arg(i_array)

    elif arg is int:
        if arg < 0:
            popup_width = -arg
        elif arg == 0:
            textX = 0
            if text_dir == "right":
                textX = popup_width

            textY += last_text_height + 10
        elif text_dir == "right":
            textX = popup_width - arg
        else:
            textX = arg

    elif arg is TextFormat:
        tmp_text_format = arg

    elif arg is DisplayObject:
        tmp_do = Bitmap(arg.content.bitmapData.clone())
        with tmp_do:
            if text_dir == "right":
                if textX < popup_width:
                    x = textX - width
                    textX = textX - width + 5
                    y = textY
                else:
                    x = popup_width - 5 - width
                    y = textY
                    textY = textY + textHeight + 10
            else:
                if textX > 0:
                    x = textX
                    textX = textX + width + 5
                    y = textY
                else:
                    x = 5
                    y = textY
                    textY = textY + textHeight + 10
        actor[POPUP_INFO].addChild(tmp_do)

    elif arg is str:
        arg = arg.replace("#", chr(13))
        tmp_text_field = TextField()
        with tmp_text_field:
            auto_size = TextFieldAutoSize.LEFT
            background = False
            selectable = False
            embed_fonts = font_embedded
            default_text_format = tmp_text_format
            htmlText = arg
            last_text_height = textHeight
            if text_dir == "right":
                auto_size = TextFieldAutoSize.RIGHT
                if textX < popup_width:
                    x = textX - text_width
                    textX -= text_width + 5
                    y = textY
                else:
                    x = popup_width - 5 - text_width
                    y = textY
                    textY += textHeight + 10
            else:
                if textX > 0:
                    x = textX
                    textX += text_width + 5
                    y = textY
                else:
                    x = 5
                    y = textY
                    textY += textHeight + 10

                if (x + text_width + 10) > popup_width:
                    popup_width = x + text_width + 10

            actor[POPUP_INFO].addChild(tmp_text_field)


def show_popup(evt, *args):
    '''
        Show popup window
    '''
    if evt.buttonDown:
        return

    if actorpopup_stamp[actor_id] != my_stamp:
        remove_event_listener(MouseEvent.MOUSE_OVER, show_popup)
        remove_event_listener(MouseEvent.MOUSE_MOVE, position_popup)
        remove_event_listener(MouseEvent.MOUSE_OUT, hide_popup)
        remove_event_listener(MouseEvent.MOUSE_DOWN, hide_popup)
        remove_event_listener(MouseEvent.MOUSE_UP, hide_popup)
        return

    if on_stage(POPUP_INFO):
        remove(POPUP_INFO)

    actor[POPUP_INFO] = MovieClip()
    if suggestion_slot[actor_id]:
        actor[SLOT_SUGGESTION].x = actor[suggestion_slot[actor_id]].x
        actor[SLOT_SUGGESTION].y = actor[suggestion_slot[actor_id]].y
        if not on_stage(SLOT_SUGGESTION):
            add_some(SLOT_SUGGESTION, suggestion_slot[actor_id])
            actor[SLOT_SUGGESTION].alpha = 0
            fade_in(SLOT_SUGGESTION)

    tmp_text_format = FontFormat_Popup
    last_text_height = 0

    popup_width = 0
    if text_dir == "right":
        popup_width = 50
        textX = popup_width

    textY = 10

    for arg in args:
        process_arg(arg)

    with actor[POPUP_INFO]:
        for i in range(numChildren):
            if getChildAt(i).x < 5:
                dist = 5 - getChildAt(i).x

                for j in range(numChildren):
                    getChildAt(j).x += dist
                    if (getChildAt(j).x
                            + getChildAt(j).width + 5) > popup_width:
                        popup_width = getChildAt(j).x + getChildAt(j).width + 5

        mouse_enabled = False
        mouseChildren = False
        allow_smoothing = True
        force_smoothing = True
        smoothing = True

    with actor[POPUP_INFO].graphics:
        beginFill(0, 0)
        lineStyle(0, 0, 0)
        drawRect(0, 0, popup_width, textY)
        beginFill(CLR_BLACK, 0.8)
        lineStyle(1, CLR_SFORANGE, 1)
        drawRect(1, 1, (popup_width - 1), (textY - 1))

    position_popup(evt)
    add(POPUP_INFO)


'''

position_popup = function (evt:MouseEvent):
    var evt:* = evt
    var _local3 = actor[POPUP_INFO]
    with (_local3) {
        x = (evt.stageX - int((popup_width / 2)))
        y = ((evt.stageY - 20) - textY)
        if (x < 0){
            x = 0
        }
        if (y < 0){
            y = 0
        }
        if (x > (RES_X - popup_width)){
            x = (RES_X - popup_width);
        };
        if (y > (RES_Y - textY)){
            y = (RES_Y - textY);
        };
        if ((((((((evt.stageX > (x - 20)))
            and ((evt.stageX < ((x + popup_width) + 15)))))
            and ((evt.stageY > (y - 20)))))
            and ((evt.stageY < ((y + textY) + 15))))){
            if (evt.stageY < (textY + 20)){
                y = (evt.stageY + 40);
            };
            if ((((((((evt.stageX > (x - 20)))
                and ((evt.stageX < ((x + popup_width) + 15)))))
                and ((evt.stageY > (y - 20)))))
                and ((evt.stageY < ((y + textY) + 15))))){
                if (evt.stageX > ((RES_X - popup_width) - 20)){
                    x = ((evt.stageX - popup_width) - 20);
                };
            };
        };
    };
};

hide_popup = function (evt:MouseEvent):
    remove(SLOT_SUGGESTION);
    remove(POPUP_INFO);
};


var DoAddBtnImage:* = function (){
    var _local2 = obj.getChildAt(1);
    with (_local2) {
        tmpImage = new Bitmap(actor[imgActor].content.bitmapData.clone());
        tmpImage.x = ((getCharBoundaries(imgIndex).x + x) + 4);
        tmpImage.y = (((getCharBoundaries(imgIndex).y + y) - 3)
                      + (((text_dir == "right")) ? 7 : 0));
        obj.addChild(tmpImage);
    };
};

var CenterTextField:* = function (obj:Object, aoffsx=0, aoffsy=0):
    var btnText:* = None;
    var char:* = None;
    var i:* = 0;
    var imgActor:* = 0;
    var tmpImage:* = None;
    var obj:* = obj;
    var aoffsx = aoffsx;
    var aoffsy = aoffsy;
    btnText = "";
    var imgIndex:* = -1;
    while (obj.numChildren > 2) {
        Sprite(obj).removeChildAt(2);
    };
    i = 0;
    while (i < caption.length) {
        char = caption[i];
        if (char == "~"){
            imgIndex = i;
            i = (i + 1);
            if (caption[i] == "P"){
                btnText = (btnText + "     ");
                load(IF_PILZE);
                imgActor = IF_PILZE;
            } else {
                if (caption[i] == "G"){
                    btnText = (btnText + "     ");
                    load(IF_GOLD);
                    imgActor = IF_GOLD;
                } else {
                    if (caption[i] == "S"){
                        btnText = (btnText + "     ");
                        load(IF_SILBER);
                        imgActor = IF_SILBER;
                    };
                };
            };
        } else {
            btnText = (btnText + char);
        };
        i = (i + 1);
    };
    var _local5 = obj.getChildAt(1);
    with (_local5) {
        auto_size = TextFieldAutoSize.LEFT;
        embed_fonts = font_embedded;
        default_text_format = new TextFormat(game_font,
                                             (((specialFontSize == 0))
                                              ? default_text_format.size
                                              : specialFontSize),
                                             default_text_format.color);
        text = btnText;
        x = int(((((obj.getChildAt(0).width / 2)
                - (text_width / 2)) + offs) + aoffsx));
        y = int(((((obj.getChildAt(0).height / 2)
                - (textHeight / 2)) + offsy) + aoffsy));
        if (imgIndex != -1){
            whendo_loaded(DoAddBtnImage);
        };
    };
};


def set_btn_text(actor_id, caption:String){
    var i:* = 0;
    var offsy:* = 0;
    var actor_id:* = actor_id;
    var caption:* = caption;
    i = actor_id;
    var offs:* = 0;
    offsy = 0;
    var specialFontSize:* = 0;
    if ((actor[i] is btn_classBasic)){
        offs = -2;
    };
    if ((actor[i] is btn_classBasic)){
        offsy = 1;
    };
    if ((actor[i] is btn_classInterface)){
        offs = 5;
    };
    if ((actor[i] is btn_classInterface)){
        offsy = 0;
    };
    if ((actor[i] is btn_classLOGin)){
        offs = -2;
    };
    if ((actor[i] is btn_classLOGin)){
        offsy = 1;
    };
    if ((actor[i] is btn_classBack)){
        offsy = 50;
    };
    if (game_font == "Verdana"){
        offsy = (offsy - 6);
    };
    if (game_font == "Arial Narrow"){
        specialFontSize = 16;
        offsy = (offsy - 4);
    };
    CenterTextField(actor[i].upState);
    CenterTextField(actor[i].downState, 1, 2);
    CenterTextField(actor[i].overState);
    CenterTextField(actor[i].hitTestState);
}

def DefineLbl(
    actor_id, caption:String, pos_x=0, pos_y=0, fmt:TextFormat=None,
    vis=True
):
    var i:* = 0;
    var fmtUL:* = None;
    var actor_id:* = actor_id;
    var caption:* = caption;
    var pos_x = pos_x;
    var pos_y = pos_y;
    var fmt:* = fmt;
    var vis:Boolean = vis;
    i = actor_id;
    actor[i] = new TextField();
    if (!fmt){
        fmt = FontFormat_Default;
    };
    var _local8 = actor[i];
    with (_local8) {
        default_text_format = fmt;
        auto_size = TextFieldAutoSize.LEFT;
        background = False;
        selectable = False;
        embed_fonts = font_embedded;
        anti_alias_type = AntiAliasType.ADVANCED;
        if (caption){
            htmlText = caption;
        };
        x = pos_x;
        y = pos_y;
        visible = Boolean(vis);
    };
}


'''

# -----------------------------------------------------------------------------
# (File) Loaders


def language_file_error():
    '''
        error handling for I18N file loader
    '''
    LOG.error("Chosen language " + lang_code + " not available!")
    if lang_code == original_lang_code:
        lang_code = original_lang_code

    if lang_code == "ar":
        text_dir = "right"

    loader.load(
        URLRequest(lang_url + "lang/sfgame_" + lang_code + ".txt")
    )


def language_filedo_loaded():
    '''
        success handler for I18N file loader
    '''
    str_data = loader.data
    in_value = False
    tmp_str = ""
    last_index = 0

    for i in range(len(str_data) - 1):
        c = str_data.charCodeAt(i)
        for case in Switch(c):
            if case(10, 13):
                in_value = False
                if len(tmp_str) > 0:
                    texts[last_index] = swap_words(tmp_str)
                    tmp_str = ""
                else:
                    if not texts[last_index]:
                        texts[last_index] = ""
                break

            if case(9, 20):
                if not in_value:
                    last_index = int(tmp_str)
                    tmp_str = ""
                    in_value = True
                else:
                    tmp_str += str_data[i]
                break

            if case(136):
                tmp_str += chr(13) + chr(10)

            if case():
                tmp_str += str_data[i]

    pending_language_file = False
    if lang_code == original_lang_code:
        if texts[TXT['FONT_NAME']] != "":
            set_font(texts[TXT['FONT_NAME']])
        else:
            set_font("Komika Text")
    else:
        chosen_lang_font = "Komika Text"
        if texts[TXT['FONT_NAME']]:
            chosen_lang_font = texts[TXT['FONT_NAME']]
        load_original_language_file()

    for i in range(TXT['COUNTRY_NAMES'], TXT['COUNTRY_NAMES'] + 100):
        if texts[i]:
            country_name[texts[i].split("=")[0]] = texts[i].split("=")[1]
        else:
            break

    loader_complete(evt)


def load_language_file():
    '''
        I18N file loader
    '''
    loader = URLLoader()
    with (loader):
        data_format = URLLoaderdata_format.TEXT
        add_event_listener(Event.COMPLETE, LanguageFileLoaded)
        add_event_listener(IOErrorEvent.IO_ERROR, LanguageFileError)
        add_event_listener(SecurityErrorEvent.SECURITY_ERROR,
                           LanguageFileError)
        if lang_code == "ar":
            text_dir = "right"

        load(URLRequest(''.join(
            lang_url,
            "lang/sfgame_",
            lang_code,
            ".txt?rnd=",
            str(random.random())
        )))

    pendingdo_loaders += 1
    pending_language_file = True


def original_language_filedo_loaded(evt):
    '''
        success on loading original I18N file
    '''
    str_data = loader.data
    in_value = False
    tmp_str = ""
    last_index = 0
    original_font = "Komika Text"

    for i in range(len(str_data) - 1):
        c = str_data.charCodeAt(i)
        for case in Switch(c):
            if case(10, 13):
                in_value = False
                if len(tmp_str) > 0:
                    old_str = tmp_str
                    if last_index == TXT['FONT_NAME']:
                        original_font = tmp_str
                    tmp_str = ""

                break
            if case(9, 20):
                if not in_value:
                    last_index = int(tmp_str)
                    tmp_str = ""
                    in_value = True
                else:
                    tmp_str += str_data[i]
                break
            if case(136):
                tmp_str += chr(13) + chr(10)

            if case():
                tmp_str += str_data[i]

    pending_language_file = False
    set_font(superior_font(chosen_lang_font, original_font))
    loader_complete(evt)


def load_original_language_file():
    '''
        I18N file loader
    '''
    with URLLoader():
        data_format = URLLoaderdata_format.TEXT
        add_event_listener(Event.COMPLETE, OriginalLanguageFileLoaded)
        load(URLRequest(
            lang_url + "lang/sfgame_" + original_lang_code + ".txt"
        ))

    pendingdo_loaders += 1
    pending_language_file = True


def configuration_filedo_loaded(evt):
    '''
        parse configuration file
    '''
    str_data = evt.target.data
    in_value = False
    tmp_str = ""
    last_index = 0

    for i in range(len(str_data) - 1):
        c = str_data.charCodeAt(i)
        for case in Switch(c):
            if case(13, 10):
                in_value = False
                if len(tmp_str) > 0:
                    for case in Switch(last_index):
                        if case(CFG['LANG_CODE']):
                            lang_code = tmp_str
                            original_lang_code = lang_code
                            break

                        if case(CFG['URL']):
                            img_url[len(img_url)] = tmp_str
                            break

                        if case(CFG['SND_URL']):
                            snd_url[len(snd_url)] = tmp_str
                            break

                        if case(CFG['LIGHT_MODE']):
                            light_mode_default = (int(tmp_str) != 0)
                            break

                        if case(CFG['SERVER']):
                            server = tmp_str
                            break

                        if case(CFG['LANG_URL']):
                            lang_url = tmp_str
                            break

                        if case(CFG['NO_CROSSDOMAIN']):
                            no_crossdomain = (int(tmp_str) != 0)
                            break

                        if case(CFG['FORUM_URL']):
                            forum_url = tmp_str
                            break

                        if case(CFG['SHOP_URL']):
                            shop_url = tmp_str
                            break

                        if case(CFG['IMPRINT_URL']):
                            imprint_url = tmp_str
                            break

                        if case(CFG['LEGAL_URL']):
                            legal_url = tmp_str
                            break

                        if case(CFG['DATAPROT_URL']):
                            dataprot_url = tmp_str
                            break

                        if case(CFG['INSTR_URL']):
                            instr_url = tmp_str
                            break

                        if case(CFG['BUFFEDMODE']):
                            buffed_mode = (tmp_str != "")
                            buffed_link_text = tmp_str
                            break

                        if case(CFG['PAYMETHODS']):
                            pay_methods = tmp_str.split("/")

                            for j in range(len(pay_methods)):
                                pay_methods[j] = int(pay_methods[j])
                            break

                        if case(CFG['SERVER_ID']):
                            server_id = int(tmp_str)
                            break

                        if case(CFG['MP_PROJECT']):
                            mp_project = tmp_str
                            break

                        if case(CFG['BUFFED_URL']):
                            buffed_link_url = tmp_str
                            break

                        if case(CFG['RESPONSE_TIMEOUT']):
                            response_timeout = int(tmp_str)
                            break

                        if case(CFG['IMAGE_TIMEOUT']):
                            image_timeout = int(tmp_str)
                            break

                        if case(CFG['SPONSOR_IMG']):
                            param_sponsor = tmp_str
                            break

                        if case(CFG['REROLL_IMG']):
                            param_reroll_img = int(tmp_str)
                            break

                        if case(CFG['RECONNECT']):
                            param_reconnect = int(tmp_str)
                            break

                        if case(CFG['PHP_TUNNEL_URL']):
                            param_php_tunnel_url = tmp_str
                            break

                        if case(CFG['TRACKING_PIXEL']):
                            trackPixels.append(tmp_str.split(";"))
                            LOG.debug(
                                ("Tracking pixel definition old " + tmp_str)
                            )
                            break

                        if case(CFG['POLL_TUNNEL_URL']):
                            param_poll_tunnel_url = tmp_str
                            break

                        if case(CFG['SUPPORT_EMAIL']):
                            param_support_email = tmp_str
                            break

                        if case(CFG['GAMESTAFF_EMAIL']):
                            param_gamestaff_email = tmp_str
                            break

                        if case(CFG['PAPAYA_PATH']):
                            param_papaya_path = tmp_str
                            break

                        if case(CFG['PAPAYA_FILE']):
                            param_papaya_cfg_file = tmp_str
                            break

                        if case(CFG['RESEND_COUNT']):
                            param_fail_tries = int(tmp_str)
                            break

                        if case(CFG[IDLE_POLLING]):
                            param_idle_polling = int(tmp_str)
                            break

                        if case(CFG['ALLOW_SKIP_QUEST']):
                            param_allow_skip_quest = (int(tmp_str) == 1)
                            param_happy_hour = (int(tmp_str) == 2)
                            break

                        if case(CFG['CENSORED']):
                            param_censored = (int(tmp_str) != 0)
                            break

                        if case(CFG['INTERNAL_PIXEL']):
                            param_internal_pixel = (int(tmp_str) != 0)
                            break

                        if case(CFG['RELOAD_PIXEL']):
                            param_reload_pixel = (int(tmp_str) != 0)
                            break

                        if case(CFG['SERVER_VERSION']):
                            param_server_version_cfg = tmp_str
                            break

                        if case(CFG['DONT_SAVE_CID']):
                            param_no_cid_save = (int(tmp_str) != 0)
                            break

                        if case(CFG['FLAGS']):
                            param_languages = tmp_str.split("/")
                            break

                        if case(CFG['FLAG_NAMES']):
                            param_language_names = tmp_str.split("/")
                            break

                        if case(CFG['LOWRES_URL']):
                            break

                        if case(CFG['SPONSOR_URL']):
                            param_sponsor_url = tmp_str
                            break

                        if case(CFG['BULLSHIT_BOX']):
                            param_bullshit_text = tmp_str
                            break

                        if case(CFG['BULLSHIT_CID']):
                            param_bullshit_cid = tmp_str
                            break

                        if case(CFG['SOCIAL_BUTTONS']):
                            param_social_buttons = tmp_str.split("/")
                            break

                        if case(CFG['PIXEL_CALL']):
                            defined_pixel_calls[
                                tmp_str.split(":")[0]
                            ] = tmp_str.split(":")[1]
                            break

                        if case(CFG['BACKGROUND_ID']):
                            login_background_id = tmp_str
                            break

                        if case(CFG['WORLDS']):
                            worlds = list()
                            tmp_worlds = tmp_str.split(";")

                            for j in range(len(tmp_worlds)):
                                tmp_world = list()
                                tmp_world[0] = tmp_worlds[j].split(":")[0]
                                tmp_world[1] = tmp_worlds[
                                    j
                                ].split(":")[1].split("/")
                                worlds.append(tmp_world)
                            break

                        if case(CFG['TV_FUNCTION']):
                            tv_function_name = tmp_str
                            break

                        if case(CFG['TV_POLL_INTERVAL_NORMAL']):
                            tv_poll_normal = int(tmp_str) * 1000
                            break

                        if case(CFG['TV_POLL_INTERVAL_LONG']):
                            tv_poll_long = int(tmp_str) * 1000
                            break
                tmp_str = ""
                break

            if case(20, 9):
                if not in_value:
                    last_index = int(tmp_str)
                    tmp_str = ""
                    in_value = True
                else:
                    tmp_str += str_data[i]
                break

            if case(136):
                tmp_str += chr(13) + chr(10)
            if case():
                tmp_str += str_data[i]

    pending_configuration_files -= 1
    if pending_configuration_files == 1:
        loader2.load(URLRequest("config_txt"))
    else:
        pending_configuration_files = False
        so = SharedObject.getLocal("SFGame/" + server.replace(".", "/"), "/")
        if so.data.lang_code:
            lang_code = so.data.lang_code

        light_mode = light_mode_default
        chat_sound = False
        compare_items = False
        disable_tv = False

        if so.data.light_mode is False:
            light_mode = False
        if so.data.light_mode is True:
            light_mode = True
        if so.data.chat_sound is False:
            chat_sound = False
        if so.data.chat_sound is True:
            chat_sound = True
        if so.data.compare_items is False:
            compare_items = False
        if so.data.compare_items is True:
            compare_items = True
        if so.data.disable_tv is False:
            disable_tv = False
        if so.data.disable_tv is True:
            disable_tv = True
        if param_obj["lang"] is not None:
            lang_code = param_obj["lang"]
        if param_obj["id"] is not None:
            param_id = str(param_obj["id"])

        if param_obj["rec"] is not None:
            param_rec = str(param_obj["rec"])
            if so.data.had_account:
                param_rec = ""

        if param_obj["viewplayer"] is not None:
            view_player = str(param_obj["viewplayer"])

        if param_obj["adminlogin"] is not None:
            admin_login = str(param_obj["adminlogin"])

        if param_obj["mp_api_user_id"] is not None:
            mp_api_user_id = str(param_obj["mp_api_user_id"])

        if param_obj["mp_api_user_token"] is not None:
            mp_api_user_token = str(param_obj["mp_api_user_token"])

        if ((param_obj["mp_api_user_id"] is not None)
                and (param_obj["mp_api_user_token"] is not None)):
            sso_mode = True

        if param_obj["cid"] is not None:
            param_cid = str(param_obj["cid"])
            param_cid_original = True
            so.data.cid = param_cid
            so.flush()
        elif param_obj["CID"] is not None:
            param_cid = str(param_obj["CID"])
            param_cid_original = True
            so.data.cid = param_cid
            so.flush()
        elif param_obj["Cid"] is not None:
            param_cid = str(param_obj["Cid"])
            param_cid_original = True
            so.data.cid = param_cid
            so.flush()
        elif so.data.cid:
            if (so.data.cid.find("_") == -1) and (len(so.data.cid) == 15):
                param_cid = so.data.cid + "_r"
        elif not param_no_cid_save:
            param_cid = so.data.cid

        had_account = so.data.had_account
        if param_obj["adv"] is not None:
            param_adv = str(param_obj["adv"])
            so.data.adv = param_adv
            so.data.advpar = param_obj
            so.flush()
        elif param_obj["cid"] is not None:
            so.data.advpar = param_obj
            so.flush()
        elif so.data.adv:
            param_adv = so.data.adv

        if param_obj["valid"] is not None:
            param_valid = str(param_obj["valid"])

        if param_obj["val"] is not None:
            param_valid = str(param_obj["val"])

        if param_obj["hall"] is not None:
            param_hall = str(param_obj["hall"])

        if param_obj["imgsvr"] is not None:
            param_imgsvr = int(param_obj["imgsvr"])

        if param_obj["port"] is not None:
            param_forceport = int(param_obj["port"])

        force_reroll = (param_reroll_img > int(so.data.force_reroll))

        if force_reroll:
            so.data.force_reroll = param_reroll_img
            so.flush()

        if len(img_url) == 0:
            img_url[0] = ""

        if len(snd_url) == 0:
            snd_url[0] = ""

        if so.data.img_url_index:
            if param_imgsvr > 0:
                img_url_index = param_imgsvr - 1
            elif (so.data.img_url_index <= len(img_url)) and not force_reroll:
                img_url_index = so.data.img_url_index - 1
            else:
                img_url_index = int(random.random() * len(img_url))
        else:
            img_url_index = int((random.random() * len(img_url)))

        if so.data.snd_url_index:
            if param_imgsvr > 0:
                snd_url_index = param_imgsvr - 1
            elif ((so.data.snd_url_index <= len(snd_url))
                  and (not force_reroll)):
                snd_url_index = so.data.snd_url_index - 1
            else:
                snd_url_index = int(random.random() * len(snd_url))
        else:
            snd_url_index = int(random.random() * len(snd_url))

        if len(img_url) == len(snd_url):
            snd_url_index = img_url_index

        so.data.img_url_index = img_url_index + 1
        so.data.snd_url_index = snd_url_index + 1
        so.flush()

        if light_mode:
            if param_lowres_url != "":
                img_url[img_url_index] = param_lowres_url
                snd_url[snd_url_index] = param_lowres_url

    loader_complete(evt)


def strip_slashes(source):
    '''
        strip slashes from url
    '''
    return source.replace("http://", "").replace("/", "")


def dodo_load_language_file():
    '''
        load language file
    '''
    Security.loadPolicyFile(img_url[img_url_index] + "crossdomain.xml")
    Security.loadPolicyFile(snd_url[snd_url_index] + "crossdomain.xml")
    Security.loadPolicyFile(lang_url + "crossdomain.xml")
    Security.loadPolicyFile("http://" + server + "/crossdomain.xml")
    Security.allowDomain(
        strip_slashes(img_url[img_url_index]),
        strip_slashes(snd_url[snd_url_index]),
        strip_slashes(lang_url),
        server
    )
    load_language_file()
    whendo_loaded(build_interface)


def do_load(actor_id):
    '''
        load stuff for actor
    '''
    if actorLoaded[actor_id] == 0:
        if actor[actor_id] is Sound:
            Security.allowDomain(actorURL[actor_id])
            req = URLRequest(actorURL[actor_id])
            actor[actor_id].load(req, actorSoundLoader[actor_id])
            actorLoaded[actor_id] = 2
        else:
            actor[actor_id].contentLoaderInfo.add_event_listener(
                IOErrorEvent.IO_ERROR, LoaderError
            )
            actor[actor_id].contentLoaderInfo.add_event_listener(
                Event.COMPLETE, LoaderComplete
            )
            Security.allowDomain(actorURL[actor_id])
            req = URLRequest(actorURL[actor_id])
            if ((actorURL[actor_id][-4:] == ".png")
                    and (not no_crossdomain)):
                actor[actor_id].load(
                    req,
                    LoaderContext(
                        True,
                        ApplicationDomain(None),
                        SecurityDomain.currentDomain
                    )
                )
            else:
                actor[actor_id].load(req)

            actorLoaded[actor_id] = 1


def load(*actor_ids):
    '''
        load stuff for actor
        (wrapper for do_load)
    '''
    for actid in actor_ids:
        if actor[actid] is list:
            for i_bunch in actor[actid]:
                load(i_bunch)
            return
        do_load(actid)


def whendo_loaded(function=None):
    '''
        async loading finished
    '''
    pending = False
    if isinstance(function, types.FunctionType):
        whendo_loaded_fn[len(whendo_loaded_fn)] = function
        whendo_loaded_active = True
        whendo_loaded_timeout.stop()
        whendo_loaded_timeout.start()

    for i in range(len(actor)):
        if actorLoaded[i] == 1:
            pending = True
            break

    if pending_language_file:
        pending = True

    if pending_debug_file:
        pending = True

    if pending_configuration_files:
        pending = True

    if not pending:
        if whendo_loaded_active:
            whendo_loaded_timeout.stop()
            whendo_loaded_active = False
            whendo_loaded_fn_temp = whendo_loaded_fn
            whendo_loaded_fn = list()

            for i in range(len(whendo_loaded_fn_temp)):
                tmp_fn = whendo_loaded_fn_temp[i]
                whendo_loaded_fn_temp[i] = Function()
                tmp_fn()


def whendo_loaded_timeout_event():
    '''
        loading stuff timeout
    '''
    whendo_loaded_timeout.stop()

    for i in range(len(actor)):
        if actor[i] is Loader:
            if actorLoaded[i] == 1:
                LOG.error(
                    ''.join(
                        "Fehler: Timeout beim Laden. Ladezustand wird",
                        "zurückgesetzt für Aktor"
                    ),
                    i,
                    actorURL[i]
                )
                actorLoaded[i] = 0

    whendo_loaded()
    to_error_count += 1

    if to_error_count == 10:
        old_img_url_index = img_url_index
        if len(img_url) > 1:
            img_url_index = int(random.random() * len(img_url))
            while img_url_index == old_img_url_index:
                img_url_index = int(random.random() * len(img_url))

        old_snd_url_index = snd_url_index
        if len(snd_url) > 1:
            snd_url_index = int(random.random() * len(snd_url))
            while snd_url_index == old_snd_url_index:
                snd_url_index = int(random.random() * len(snd_url))

        if len(img_url) == len(snd_url):
            snd_url_index = img_url_index

        so.data.img_url_index = img_url_index + 1
        so.data.snd_url_index = snd_url_index + 1
        so.flush()


def loader_complete():
    '''
        loading success
    '''
    if evt.target is LoaderInfo:
        actorLoaded[get_actor_id(evt.target.loader)] = 2
        Security.allowDomain(evt.target.loaderURL)
        with actor[get_actor_id(evt.target.loader)].content:
            force_smoothing = True
            allow_smoothing = True
            smoothing = True
    whendo_loaded()


def loader_error():
    '''
        loading failed
    '''
    if evt.target is LoaderInfo:
        for i in range(len(actor)):
            if actor[i] is Loader:
                if actorLoaded[i] == 1:
                    LOG.error(
                        ''.join(
                            "Fehler: IO-Fehler beim Laden. Ladezustand wird",
                            "zurückgesetzt für Aktor"
                        ),
                        i,
                        actorURL[i]
                    )
                    actorLoaded[i] = 0

    whendo_loaded()
    io_error_count += 1

    if io_error_count == 10:
        old_img_url_index = img_url_index
        if len(img_url) > 1:
            img_url_index = int(random.random() * len(img_url))
            while img_url_index == old_img_url_index:
                img_url_index = int(random.random() * len(img_url))

        old_snd_url_index = snd_url_index
        if len(snd_url) > 1:
            snd_url_index = int(random.random() * len(snd_url))
            while snd_url_index == old_snd_url_index:
                snd_url_index = int(random.random() * len(snd_url))

        if len(img_url) == len(snd_url):
            snd_url_index = img_url_index

        so.data.img_url_index = img_url_index + 1
        so.data.snd_url_index = snd_url_index + 1
        so.flush()


def pixel_success():
    '''
        TODO: What does this do?
    '''
    pixel_data = pixeldo_loader.data
    if ((pixel_data.lower().substr(0, 7) == "http://")
            or (pixel_data.lower().substr(0, 8) == "https://")):
        ExternalInterface.call("loadpixel", pixel_data)

    # pixeldo_loader.remove_event_listener(Event.COMPLETE, pixel_success)
    # pixeldo_loader.remove_event_listener(IOErrorEvent.IO_ERROR, pixel_failed)
    # pixeldo_loader.remove_event_listener(
    #     SecurityErrorEvent.SECURITY_ERROR, pixel_failed
    # )


def pixel_failed():
    '''
        TODO: Obsolete?
    '''
    # pixeldo_loader.remove_event_listener(Event.COMPLETE, pixel_success)
    # pixeldo_loader.remove_event_listener(IOErrorEvent.IO_ERROR, pixel_failed)
    # pixeldo_loader.remove_event_listener(
    #     SecurityErrorEvent.SECURITY_ERROR, pixel_failed
    # )
    pass


def load_tracking_pixel(url=''):
    '''
        load tracking pixel
    '''
    req = None
    variables = None
    pixeldo_loader = None
    pixel_success = None
    pixel_failed = None
    url = url

    LOG.debug("Tracking Pixel Load:" + url)

    # TODO: set via requests params
    if url.find("?") == -1:
        url = url + "?random="
    else:
        url = url + "&random="

    url += str(int((random.random() * 100000)))
    url += ("&had_account=") + int(had_account)

    if param_reload_pixel:
        LOG.debug("Tracking Pixel Reload Mode for: " + url)
        LOG.debug("CID userd " + param_cid)
        LOG.debug("Action " + act)

        # req = new URLRequest("index.php")
        # req.method = URLRequestMethod.POST

        # variables = new URLVariables()
        # variables.pixel_url = url
        # variables.pixel_cid = param_cid
        # variables.pixel_player_id = savegame[SG['PLAYER_ID']]
        # variables.pixel_action = (((next_pxl == 0)) ? act : abs(next_pxl)

        # req.data = variables

        log_in_after_pixel = False
        navigate_to_url(req, "_self")
    else:
        if param_internal_pixel:
            # pixeldo_loader = new URLLoader()
            # pixeldo_loader.add_event_listener(Event.COMPLETE, pixel_success)
            # pixeldo_loader.add_event_listener(
            #    IOErrorEvent.IO_ERROR, pixel_failed)
            # pixeldo_loader.add_event_listener(
            #   SecurityErrorEvent.SECURITY_ERROR, pixel_failed
            # )
            # pixeldo_loader.load(new URLRequest(url))
            pass
        else:
            ExternalInterface.call("loadpixel", url)


# -----------------------------------------------------------------------------

'''
    build_interface = function (){
        var i:* = 0;
        var ii:* = 0;
        var iii:* = 0;
        var attPriceLimitation:* = False;
        var iPosi:* = None;
        var yOffs:* = None;
        var dungeonBtnUpdateDelayTimer:* = None;
        var dungeonBtnHover:* = None;
        var dungeonBtnLeave:* = None;
        var dungeonBtnUpdateDelay:* = None;
        var workBtnUpdateDelayTimer:* = None;
        var workBtnHover:* = None;
        var workBtnLeave:* = None;
        var workBtnUpdateDelay:* = None;
        var tavBtnUpdateDelayTimer:* = None;
        var tavBtnHover:* = None;
        var tavBtnLeave:* = None;
        var tavBtnUpdateDelay:* = None;
        var arenaBtnUpdateDelayTimer:* = None;
        var arenaBtnHover:* = None;
        var arenaBtnLeave:* = None;
        var arenaBtnUpdateDelay:* = None;
        var HutmannLinkTimer:* = None;
        var HutmannLinkVis:* = False;
        var HutmannLinkOver:* = False;
        var HutmannRelY:* = 0;
        var HutmannAniStep:* = 0;
        var HutmannCountdown:* = 0;
        var HutmannLinkAniEvent:* = None;
        var AIRRelMoveY:* = 0;
        var AIRRelMoveYButton:* = 0;
        var AIRRelMoveYButton2:* = 0;
        var gradePassword:* = None;
        var RequestPassword:* = None;
        var CheckAGB:* = None;
        var UncheckAGB:* = None;
        var CheckFuck:* = None;
        var UncheckFuck:* = None;
        var PulseTimer:* = None;
        var PulseLevel:* = 0;
        var CloneMarker:* = None;
        var pos_x:* = 0;
        var pos_y:* = 0;
        var volk:* = None;
        var SelectRace:* = None;
        var SelectGender:* = None;
        var SelectCaste:* = None;
        var MimickInterfaceButtonHover:* = None;
        var Buh:* = False;
        var BuhHover:* = None;
        var BuhOut:* = None;
        var BubbleTimer:* = None;
        var BubbleWait:* = 0;
        var Bubbles:* = None;
        var CityAniTimer:* = None;
        var CityAniFrame:* = 0;
        var SandwichPause:* = 0;
        var ZwergFussTapp:* = 0;
        var CityAni:* = None;
        var iFrame:* = 0;
        var SchildDir:* = 0;
        var SchildTimer:* = None;
        var WacheOver:* = None;
        var WacheOut:* = None;
        var SchildFrame:* = None;
        var EselOver:* = None;
        var EselOut:* = None;
        var DealerAniTimer:* = None;
        var DealerStepTimer:* = None;
        var DealerAniStep:* = 0;
        var ShowDealerEyes:* = None;
        var HideDealerEyes:* = None;
        var DealerStep:* = None;
        var OnoTimer:* = None;
        var LastOno:* = 0;
        var ThisOno:* = 0;
        var OnoPopupTimer:* = None;
        var PopupDir:* = False;
        var ShowArenaOno:* = None;
        var HideArenaOno:* = None;
        var PopupArenaOno:* = None;
        var StepArenaOno:* = None;
        var InterfaceButtonHover:* = None;
        var ExitScreen:* = None;
        var HalleSuchClick:* = None;
        var RuhmesHalleScroll:* = None;
        var RemoveInviteWindow:* = None;
        var SendPlayerInvite:* = None;
        var PrevPlayer:* = None;
        var NextPlayer:* = None;
        var RequestAlbum:* = None;
        var PlayerGuildInviteCancel:* = None;
        var PlayerGuildInviteOK:* = None;
        var PlayerGuildInvite:* = None;
        var ZurGilde:* = None;
        var PlayerSendMessage:* = None;
        var PlayerAttack:* = None;
        var PlayerInvite:* = None;
        var BoostBtnRepeatTimer:* = None;
        var DestroyBoostBtnTimer:* = False;
        var BoostAttribute:* = None;
        var inBoostBtn:* = False;
        var BoostBtnChange:* = 0;
        var BoostBtnTimer:* = None;
        var BoostBtnTimerFunction:* = None;
        var itmTyp:* = 0;
        var itm_pic:* = 0;
        var itm_color:* = 0;
        var itm_class:* = 0;
        var InventoryItemMouseDown:* = None;
        var BackpackItemMouseDown:* = None;
        var InventoryItemMouseUp:* = None;
        var DropHandler:* = None;
        var PotionSingleClick:* = None;
        var PotionDoubleClick:* = None;
        var tower_levelLabelTimer:* = None;
        var towerBoostPriceFadeoutTimer:* = None;
        var towerBoostPriceFadeout:* = None;
        var tower_levelLabelMoveFn:* = None;
        var ShowTowerBoostPrices:* = None;
        var HideTowerBoostPrices:* = None;
        var BoostCopycat:* = None;
        var AffeBlinzeln:* = 0;
        var FidgetBlinzeln:* = 0;
        var ShakesBlinzeln:* = 0;
        var ShakesIdleStep:* = 0;
        var ShakesIdlePhase:* = 0;
        var WasIdleCount:* = 0;
        var ShopIdle:* = NaN;
        var PlayerIdle:* = False;
        var ShopAniTimer:* = None;
        var SaleRecoverTime:* = NaN;
        var ShopAniFrame:* = None;
        var ShopMouseDownEvent:* = None;
        var ShopMouseUpEvent:* = None;
        var RequestNewWarez:* = None;
        var RequestWitchScreen:* = None;
        var spellClicking:* = False;
        var CancelQuest:* = None;
        var SkipQuest:* = None;
        var AttackEnemy:* = None;
        var SelectedMount:* = 0;
        var OldMount:* = 0;
        var ClickMount:* = None;
        var BuyMount:* = None;
        var crestClaI:* = 0;
        var ShowExtendedHistory:* = None;
        var HideExtendedHistory:* = None;
        var lastChatLine:* = None;
        var AdvancedChatHandler:* = None;
        var SendChatMsg:* = None;
        var nextSuggestionTimer:* = None;
        var suggestionAllowed:* = False;
        var nextSuggestionAllow:* = None;
        var GildeBtnHandler:* = None;
        var GildeGruenden:* = None;
        var HutBtnRepeatTimer:* = None;
        var DestroyHutBtnTimer:* = False;
        var HutFaceResetTimer:* = None;
        var HutFaceReset:* = None;
        var HutBtnHandler:* = None;
        var ChooseCup:* = None;
        var cursedDescr:* = None;
        var RequestToilet:* = None;
        var ShowHutmann:* = None;
        var BuyBeer:* = None;
        var ShowBeerOffer:* = None;
        var TimeBarAniTimer:* = None;
        var timeBarAni:* = NaN;
        var TimeBarAniEvent:* = None;
        var ShowQuestOffer:* = None;
        var ReturnQuest:* = None;
        var RequestQuest:* = None;
        var toiletChainTimer:* = None;
        var toiletChainFrame:* = 0;
        var toiletChainAni:* = None;
        var ToiletHandler:* = None;
        var k:* = 0;
        var monsterChecksum:* = None;
        var SkipFight:* = None;
        var CheckLM:* = None;
        var UncheckLM:* = None;
        var CheckCS:* = None;
        var UncheckCS:* = None;
        var CheckCompare:* = None;
        var UncheckCompare:* = None;
        var CheckTV:* = None;
        var UncheckTV:* = None;
        var VolumeChange:* = None;
        var Filter_Glow:* = None;
        var ChooseLanguageIcon:* = None;
        var optionMenuSelect:* = 0;
        var OptionBtnHandler:* = None;
        var RequestMainQuest:* = None;
        var AdvancedPostHandler:* = None;
        var killFieldContent:* = None;
        var fillFieldContent:* = None;
        var ShowSocial:* = function (evt:MouseEvent){
            var thisActor;
            thisActor = get_actor_id(evt.target);
            ExternalInterface.call(
                "showSocial",
                param_social_buttons[(thisActor - SOCIAL)].split(":")[0]
            )
        };
        var ShowDatenschutz:* = function (){
            navigateToURLEx(new URLRequest(dataprot_url), "_blank");
        };
        var ShowAnleitung:* = function (){
            navigateToURLEx(new URLRequest(instr_url), "_blank");
        };
        var ShowImpressum:* = function (){
            navigateToURLEx(new URLRequest(imprint_url), "_blank");
        };
        var ShowForum:* = function (){
            navigateToURLEx(new URLRequest(forum_url), "_blank");
        };
        var ShowShop:* = function (){
            navigateToURLEx(new URLRequest(
                shop_url.split("<playerid>").join(
                    savegame[SG['PLAYER_ID']]
                ).split("<paymentid>").join(
                    savegame[SG_PAYMENT_ID]
                ).split("<playername>").join(
                    actor[INP['NAME']].getChildAt(1).text
                ).split("<face>").join(
                    (char_volk + "/" + str(((char_male)
                     ? 1 : 2))) + "/") + char_class) + "/")
                    + char_mouth) + "/") + char_hair) + "/")
                    + char_brows) + "/") + char_eyes) + "/") +
                    char_beard) + "/") + char_nose) + "/") +
                    char_ears) + "/") + char_special) + "/") +
                    char_special2) + "/"))), "_blank");
        };
        var navigateToURLEx:* = function (req:URLRequest, frameName:str){
            var req:* = req;
            var frameName:* = frameName;
            try {
                ExternalInterface.call("openUrl", req.url);
            } catch(e:Error) {
                navigate_to_url(req, frameName);
            };
        };
        dungeonBtnHover = function (evt:MouseEvent){
            dungeonBtnUpdateDelay();
            dungeonBtnUpdateDelayTimer.start();
        };
        dungeonBtnLeave = function (evt:MouseEvent=None){
            dungeonBtnUpdateDelayTimer.stop();
            set_btn_text(IF_WELTKARTE, texts[TXT_WELTKARTE]);
        };
        dungeonBtnUpdateDelay = function (evt:TimerEvent=None){
            if (WaitingFor(savegame[SG_MQ_REROLL_TIME])){
                set_btn_text(
                    IF_WELTKARTE,
                    WaitingTime(savegame[SG_MQ_REROLL_TIME])
                )
            } else {
                dungeonBtnLeave();
            };
        };
        workBtnHover = function (evt:MouseEvent){
            workBtnUpdateDelay();
            workBtnUpdateDelayTimer.start();
        };
        workBtnLeave = function (evt:MouseEvent=None){
            workBtnUpdateDelayTimer.stop();
            set_btn_text(IF_ARBEITEN, texts[TXT_ARBEITEN]);
        };
        workBtnUpdateDelay = function (evt:TimerEvent=None){
            if (((WaitingFor(savegame[SG_ACTION_ENDTIME]))
                and ((savegame[SG_ACTION_STATUS] == 1)))){
                set_btn_text(
                    IF_ARBEITEN,
                    WaitingTime(savegame[SG_ACTION_ENDTIME])
                );
            } else {
                workBtnLeave();
            };
        };
        tavBtnHover = function (evt:MouseEvent){
            tavBtnUpdateDelay();
            tavBtnUpdateDelayTimer.start();
        };
        tavBtnLeave = function (evt:MouseEvent=None){
            tavBtnUpdateDelayTimer.stop();
            set_btn_text(IF_TAVERNE, texts[TXT_TAVERNE]);
        };
        tavBtnUpdateDelay = function (evt:TimerEvent=None){
            if (((WaitingFor(savegame[SG_ACTION_ENDTIME]))
                and ((savegame[SG_ACTION_STATUS] == 2)))){
                set_btn_text(
                    IF_TAVERNE,
                    WaitingTime(savegame[SG_ACTION_ENDTIME])
                );
            } else {
                tavBtnLeave();
            };
        };
        arenaBtnHover = function (evt:MouseEvent){
            arenaBtnUpdateDelay();
            arenaBtnUpdateDelayTimer.start();
        };
        arenaBtnLeave = function (evt:MouseEvent=None){
            arenaBtnUpdateDelayTimer.stop();
            set_btn_text(IF_ARENA, texts[TXT_ARENA]);
        };
        arenaBtnUpdateDelay = function (evt:TimerEvent=None){
            if (WaitingFor(savegame[SG_PVP_REROLL_TIME])){
                set_btn_text(
                    IF_ARENA,
                    WaitingTime(savegame[SG_PVP_REROLL_TIME])
                );
            } else {
                arenaBtnLeave();
            };
        };
        var TaverneBtnIn:* = function (evt:Event){
            actor[IF_TOILET].visible = (
                (!((savegame[SG_TOILET] == 0)))
                and (!(on_stage(CA_TOILET_BOWL))));
            actor[IF_HUTMANN].visible = !(on_stage(HUTMANN_BG));
            if (
                ((!((int(savegame[SG_ACTION_STATUS]) == 0)))
                and (!(pulse_taverne)))
            ){
                HutmannCountdown = 20;
                HutmannLinkOver = True;
            };
        };
        var TaverneBtnOut:* = function (evt:Event){
            HutmannCountdown = 1;
            HutmannLinkOver = False;
        };
        HutmannLinkAniEvent = function (evt:Event){
            var i:* = 0;
            var evt:* = evt;
            if (HutmannCountdown > 0){
                HutmannCountdown--;
                if (HutmannCountdown == 0){
                    HutmannLinkVis = HutmannLinkOver;
                };
            };
            if (HutmannLinkVis){
                if (HutmannRelY > -(actor[IF_HUTMANN1].height)){
                    HutmannRelY = (HutmannRelY - 10);
                } else {
                    if (HutmannAniStep < 100){
                        HutmannAniStep++;
                    };
                    Switch (HutmannAniStep){
                        if case(2:
                        if case(8:
                        if case(14:
                        if case(20:
                        if case(26:
                            HutmannFrame = 1;
                            break;
                        if case(4:
                        if case(10:
                        if case(16:
                        if case(22:
                        if case(28:
                            HutmannFrame = 0;
                            break;
                    };
                };
            } else {
                if (HutmannRelY < 0){
                    HutmannRelY = (HutmannRelY + 10);
                };
                HutmannAniStep = 0;
                HutmannFrame = 0;
            };
            i = 0;
            while (i < 2) {
                var _local3 = actor[(IF_HUTMANN1 + i)];
                with (_local3) {
                    visible = (i == HutmannFrame);
                };
                i = (i + 1);
            };
            _local3 = actor[IF_HUTMANN];
            with (_local3) {
                y = (IF_HUTLINK_Y + HutmannRelY);
            };
            _local3 = actor[IF_TOILET];
            with (_local3) {
                y = ((IF_HUTLINK_Y + HutmannRelY) + 40);
            };
        };
        var DefiniereInterfaceButton:* = function (
            actor_id, txtID
            ){
            var dragonID:* = 0;
            var InterfaceButtonDown:* = None;
            var InterfaceButtonUp:* = None;
            var actor_id:* = actor_id;
            var txtID:* = txtID;
            InterfaceButtonDown = function (evt:MouseEvent):
                var x;
                var y;
                var i;
                i = dragonID;
                x = actor[i].x;
                y = actor[i].y;
                removeChild(actor[i]);
                delete actor[i];
                actor[i] = new interface_dragon5_png();
                actor[i].x = x;
                actor[i].y = y;
                addChild(actor[i]);
            };
            InterfaceButtonUp = function (evt:MouseEvent):
                var x;
                var y;
                var i;
                var d;
                i = dragonID;
                if (actor[i]){
                    x = actor[i].x;
                    y = actor[i].y;
                    removeChild(actor[i]);
                    delete actor[i];
                    d = actorBitmap[i];
                    Switch (d){
                        if case(0:
                            actor[i] = new interface_dragon1_png();
                            break;
                        if case(1:
                            actor[i] = new interface_dragon2_png();
                            break;
                        if case(2:
                            actor[i] = new interface_dragon3_png();
                            break;
                        if case(3:
                            actor[i] = new interface_dragon4_png();
                            break;
                        if case(4:
                        if case(5:
                            actor[i] = new interface_dragon6_png();
                            break;
                    };
                    actor[i].x = x;
                    actor[i].y = y;
                    addChild(actor[i]);
                };
                remove(CITY_OVERLAYS);
                HideArenaOno();
                WacheOut();
                if ((((
                    (on_stage(SCR_CITY_BACKG_NIGHT))
                    or (on_stage(SCR_CITY_BACKG_DAWN))))
                    or (on_stage(SCR_CITY_BACKG_DAY)))
                ){
                    add(CITY_ESEL1);
                    add(CITY_CA_OVL);
                };
                if (on_stage(CA_SCR_ARBEITEN_BLOCKCITY)){
                    if (on_stage(LBL_SCR_ARBEITEN_TIME)){
                        add(SCREEN_ARBEITEN_WAIT);
                    } else {
                        if (on_stage(SCR_ARBEITEN_OK)){
                            add(SCREEN_ARBEITEN);
                        } else {
                            add(SCREEN_ARBEITEN_SUCCESS);
                        };
                    };
                };
                if (on_stage(CA_SCR_INVITE_BLOCKCITY)){
                    add(SCREEN_INVITE);
                };
                if (on_stage(BLACK_SQUARE)){
                    add(BLACK_SQUARE);
                };
            };
            define_btn(
                actor_id,
                texts[txtID],
                InterfaceBtnHandler,
                btn_classInterface,
                IF_X,
                ((IF_Y + (IF_1 * iPosi++)) + yOffs)
            );
            DefineFromClass(
                ((IF_DRAGON_1 + iPosi) - 1),
                interface_dragon1_png,
                (actor[actor_id].x + DRAGON_X),
                (actor[actor_id].y + DRAGON_Y)
            );
            dragonID = ((IF_DRAGON_1 + iPosi) - 1);
            actor[actor_id].add_event_listener(
                MouseEvent.MOUSE_DOWN,
                InterfaceButtonDown
            );
            actor[actor_id].add_event_listener(
                MouseEvent.MOUSE_UP,
                InterfaceButtonUp
            );
            actor[actor_id].add_event_listener(
                MouseEvent.MOUSE_OUT,
                InterfaceButtonUp
            );
            actor[actor_id].add_event_listener(
                MouseEvent.MOUSE_OVER,
                InterfaceButtonHover
            );
            MakePersistent(
                ((IF_DRAGON_1 + iPosi) - 1),
                actor_id
            );
        };
        gradePassword = function (
            evt:Event=None,
            pwd_str:String=""
        ){
            var pwd:String;
            var badWords:Array;
            var newPwd:String;
            var lastChar:String;
            var pwdScore;
            var i;
            var ii;
            var cmp:String;
            var badSequences:*;
            var hasBadSequence:Boolean;
            var hasNumerals:Boolean;
            var hasUpperCase:Boolean;
            var hasLowerCase:Boolean;
            var hasSpecial:Boolean;
            pwd = pwd_str;
            badWords = list();
            if (texts[TXT_BAD_PASSWORDS]){
                badWords = texts[TXT_BAD_PASSWORDS].split(" ");
            };
            if (len(actor[INP['NAME']].getChildAt(1).text) >= 3){
                badWords.append(actor[INP['NAME']].getChildAt(1).text);
            };
            if (evt){
                if (get_actor_id(evt.target.parent) == INP['PASSWORD']){
                    pwd = actor[INP['PASSWORD']].getChildAt(1).text;
                    hide(PASSWORD_SMILEY_SAD);
                    hide(PASSWORD_SMILEY_NEUTRAL);
                    hide(PASSWORD_SMILEY_HAPPY);
                } else {
                    if (optionMenuSelect == 3){
                        hide(CHANGE_PASSWORD_SMILEY_SAD);
                        hide(CHANGE_PASSWORD_SMILEY_NEUTRAL);
                        hide(CHANGE_PASSWORD_SMILEY_HAPPY);
                        if (
                            actor[INP_OPTION_FIELD2].getChildAt(
                                1
                            ).text == actor[INP_OPTION_FIELD3].getChildAt(
                                1
                            ).text
                        ){
                            pwd = actor[INP_OPTION_FIELD2].getChildAt(1).text;
                        } else {
                            return;
                        };
                    } else {
                        return;
                    };
                };
            };
            newPwd = "";
            lastChar = "";
            pwdScore = 0;
            cmp = "";
            badSequences = [
                "01234567890",
                "abcdefghijklmnopqrstuvwxyz",
                "ABCDEFGHIJKLMNOPQRSTUVWXYZ",
                qwertzuiopasdfghjklyxcvbnm",
                "qwertyuiopasdfghjklzxcvbnm",
                "09876543210",
                "mnbvcxylkjhgfdsapoiuztrewq",
                "mnbvcxzlkjhgfdsapoiuytrewq"
            ];
            i = 0;
            while (i < len(badWords)) {
                if (pwd.lower().find(badWords[i].lower()) != -1){
                    pwdScore = (pwdScore - 5);
                };
                i++;
            };
            i = 0;
            while (i < len(pwd)) {
                if (pwd[i: 1] != lastChar){
                    newPwd = (newPwd + pwd.[i: 1]);
                };
                lastChar = pwd[i, 1];
                i++;
            };
            pwd = newPwd;
            newPwd = "";
            hasBadSequence = False;
            i = 0;
            while (i < len(pwd)) {
                if (i >= 2){
                    cmp = pwd[(i - 2): 3];
                } else {
                    cmp = "";
                    newPwd = (newPwd + pwd[i: 1]);
                };
                hasBadSequence = False;
                ii = 0;
                while (ii < len(badSequences)) {
                    if (badSequences[ii].find(cmp) != -1){
                        hasBadSequence = True;
                        break;
                    };
                    ii++;
                };
                if (!hasBadSequence){
                    newPwd = (newPwd + pwd[i: 1]);
                };
                i++;
            };
            pwd = newPwd;
            i = 3;
            while (i < len(pwd)) {
                ii = 0;
                while (ii < (len(pwd) - i)) {
                    cmp = pwd[ii: i];
                    if (pwd.last_indexOf(cmp) != ii){
                        pwdScore--;
                    };
                    ii++;
                };
                i++;
            };
            if (len(pwd) >= 12){
                pwdScore = (pwdScore + 2);
            } else {
                if (len(pwd) >= 8){
                    pwdScore = (pwdScore + 1);
                } else {
                    if (len(pwd) >= 5){
                        pwdScore = (pwdScore + 0);
                    } else {
                        pwdScore = (pwdScore - 10);
                    };
                };
            };
            hasNumerals = False;
            hasUpperCase = False;
            hasLowerCase = False;
            hasSpecial = False;
            i = 0;
            while (i < len(pwd)) {
                if (pwd[i: 1] == str(int(pwd[i: 1]))){
                    hasNumerals = True;
                } else {
                    if (pwd[i: 1] != pwd.[i: 1].lower()){
                        hasUpperCase = True;
                    } else {
                        if (pwd[i: 1] != pwd[i: 1].upper()){
                            hasLowerCase = True;
                        } else {
                            hasSpecial = True;
                        };
                    };
                };
                i++;
            };
            if (hasNumerals){
                pwdScore = (pwdScore + 1);
            };
            if (hasUpperCase){
                pwdScore = (pwdScore + 1);
            };
            if (hasLowerCase){
                pwdScore = (pwdScore + 1);
            };
            if (hasSpecial){
                pwdScore = (pwdScore + 1);
            };
            if (evt){
                if (get_actor_id(evt.target.parent) == INP['PASSWORD']){
                    if (pwdScore >= 3){
                        show(PASSWORD_SMILEY_HAPPY);
                    } else {
                        if (pwdScore >= 2){
                            show(PASSWORD_SMILEY_NEUTRAL);
                        } else {
                            show(PASSWORD_SMILEY_SAD);
                        };
                    };
                } else {
                    if (pwdScore >= 3){
                        show(CHANGE_PASSWORD_SMILEY_HAPPY);
                    } else {
                        if (pwdScore >= 2){
                            show(CHANGE_PASSWORD_SMILEY_NEUTRAL);
                        } else {
                            show(CHANGE_PASSWORD_SMILEY_SAD);
                        };
                    };
                };
            } else {
                if (pwdScore >= 3){
                    chat_line("Your password is secure.");
                } else {
                    if (pwdScore >= 2){
                        chat_line("Your password is ok, could be better.");
                    } else {
                        chat_line("Your password is insecure.");
                    };
                };
            };
        };
        var DoGotoSignup:* = function (evt:Event){
            if (buffed_mode){
                navigate_to_url(new URLRequest(buffed_link_url));
            } else {
                show_build_character_screen(evt);
            };
        };
        var ShowAGB:* = function (evt:Event=None){
            navigate_to_url(new URLRequest(legal_url), "_blank");
        };
        var ShowForgotPasswordScreen:* = function (evt:Event=None):
            remove_all();
            actor[LBL_WINDOW_TITLE].text = texts[TXT_TITLE_FORGOT_PASSWORD];
            actor[LBL_WINDOW_TITLE].x = (
                (IF_WIN_X + IF_WIN_WELCOME_X) - int(
                    (actor[LBL_WINDOW_TITLE].text_width / 2)
                )
            );
            actor[INP['NAME']].add_event_listener(
                KeyboardEvent.KEY_DOWN,
                RequestPassword
            );
            actor[INP['EMAIL']].add_event_listener(
                KeyboardEvent.KEY_DOWN,
                RequestPassword
            );
            LOGonRTL();
            add(WINDOW_FORGOT_PASSWORD);
        };
        RequestPassword = function (evt:Event):
            if ((evt is KeyboardEvent)){
                if (
                    ((((!((KeyboardEvent(evt).keyCode == 13)))
                    and (!((KeyboardEvent(evt).keyCode == 10)))))
                    and (!((KeyboardEvent(evt).keyCode == 16777230))))
                ){
                    return;
                };
            };
            send_action(
                ACT_FORGOT_PASSWORD,
                actor[INP['NAME']].getChildAt(1).text,
                actor[INP['EMAIL']].getChildAt(1).text
            );
        };
        CheckAGB = function (evt:MouseEvent):
            add(CB['AGB_CHECKED']);
        };
        UncheckAGB = function (evt:MouseEvent):
            remove(CB['AGB_CHECKED']);
        };
        CheckFuck = function (evt:MouseEvent):
            add(CB_FUCK_CHECKED);
        };
        UncheckFuck = function (evt:MouseEvent):
            remove(CB_FUCK_CHECKED);
        };
        var PulseEvent:* = function (evt:Event){
            var evt:* = evt;
            var ButtonPulse:* = function (doPulse:Boolean, btnID){
                var doPulse:* = doPulse;
                var btnID:* = btnID;
                var LabelPulse:* = function (obj:DisplayObjectContainer){
                    var obj:* = obj;
                    var _local3 = obj.getChildAt(1);
                    with (_local3) {
                        alpha = ((doPulse)
                            ? ((math.sin((((PulseLevel / 200) * 2)
                                * math.pi)) * 0.4) + 0.8)
                            : 1
                        );
                    };
                };
                PulseLevel = (PulseLevel + 1);
                if (PulseLevel > 200){
                    PulseLevel = 0;
                };
                var _local4 = actor[btnID];
                with (_local4) {
                    LabelPulse(upState);
                    LabelPulse(overState);
                    LabelPulse(downState);
                    LabelPulse(hitTestState);
                };
            };
            if (len(savegame) == 0){
                return;
            };
            if (int(savegame[SG_ACTION_STATUS]) == 1){
                if (!WaitingFor(savegame[SG_ACTION_ENDTIME])){
                    pulse_arbeiten = True;
                };
            };
            if (int(savegame[SG_ACTION_STATUS]) == 2){
                if (!WaitingFor(savegame[SG_ACTION_ENDTIME])){
                    pulse_taverne = True;
                };
            };
            if (
                ((((on_stage(TAVERNE_BG))
                or (on_stage(FIGHT_BOX1))))
                or (on_stage(QUESTBAR_BG)))
            ){
                pulse_taverne = False;
            };
            if (on_stage(LBL_SCR_ARBEITEN_TEXT)){
                pulse_arbeiten = False;
            };
            if (on_stage(GILDEN_BG)){
                pulse_gilde = False;
                pulse_gilde_on_history = False;
            };
            if (on_stage(SCR_DEALER_BG)){
                pulse_dealer = False;
            };
            if (on_stage(POST_LIST)){
                pulse_post = False;
            };
            if (
                ((((on_stage(SCR_CHAR_BG_RIGHT))
                or (on_stage(SCR_SHAKES_BG))))
                or (on_stage(SCR_FIDGET_BG)))
            ){
                pulse_char = False;
            };
            if (
                ((((((((((pulse_taverne)
                or (pulse_arbeiten)))
                or (pulse_gilde)))
                or (pulse_post)))
                or (pulse_char)))
                or (pulse_dealer))
            ){
                PulseTimer.delay = 20;
            } else {
                PulseTimer.delay = 500;
            };
            ButtonPulse(pulse_taverne, IF_TAVERNE);
            ButtonPulse(pulse_arbeiten, IF_ARBEITEN);
            ButtonPulse(pulse_gilde, IF_GILDEN);
            ButtonPulse(pulse_post, IF_POST);
            ButtonPulse(pulse_char, IF_CHARAKTER);
            ButtonPulse(pulse_dealer, IF_PILZDEALER);
        };
        CloneMarker = function ():
            var i;
            SetCnt(M_ACT, VOLK_MARKER);
            SetCnt(F_ACT, VOLK_MARKER);
            SetCnt(KASTE_1_ACT, VOLK_MARKER);
            SetCnt(KASTE_2_ACT, VOLK_MARKER);
            SetCnt(KASTE_3_ACT, VOLK_MARKER);
            i = 0;
            while (i <= 7) {
                SetCnt((VOLK_1_M_ACT + i), VOLK_MARKER);
                SetCnt((VOLK_1_F_ACT + i), VOLK_MARKER);
                i++;
            };
        };
        SelectRace = function (evt:MouseEvent):
            var actor_id;
            actor_id = get_actor_id(evt.target);
            if (
                (((actor_id >= VOLK_1_M_IDLE))
                and ((actor_id <= VOLK_8_M_IDLE)))
            ){
                char_volk = ((actor_id - VOLK_1_M_IDLE) + 1);
                char_male = True;
            };
            if (
                (((actor_id >= VOLK_1_F_IDLE))
                and ((actor_id <= VOLK_8_F_IDLE)))
            ){
                char_volk = ((actor_id - VOLK_1_F_IDLE) + 1);
                char_male = False;
            };
            RandomizeCharImage();
            if (on_stage(POPUP_INFO)){
                add(POPUP_INFO);
            };
        };
        SelectGender = function (evt:MouseEvent):
            var actor_id;
            actor_id = get_actor_id(evt.target);
            if (actor_id == M_IDLE){
                char_male = True;
            };
            if (actor_id == F_IDLE){
                char_male = False;
            };
            RandomizeCharImage();
            if (on_stage(POPUP_INFO)){
                add(POPUP_INFO);
            };
        };
        SelectCaste = function (evt:MouseEvent):
            var actor_id;
            actor_id = get_actor_id(evt.target);
            KlasseGewählt = True;
            if (actor_id == KASTE_1_IDLE){
                char_class = 1;
            };
            if (actor_id == KASTE_2_IDLE){
                char_class = 2;
            };
            if (actor_id == KASTE_3_IDLE){
                char_class = 3;
            };
            LoadCharacterImage();
            if (on_stage(POPUP_INFO)){
                add(POPUP_INFO);
            };
        };
        def AddMimickInterfaceButtonHoverHandler(actor_id){
            actor[actor_id].add_event_listener(
                MouseEvent.MOUSE_OVER,
                MimickInterfaceButtonHover
            );
        };
        MimickInterfaceButtonHover = function (evt:MouseEvent):
            var tmpContainer:* = None;
            var EndMimickInterfaceButtonHover:* = None;
            var evt:* = evt;
            var MimickHover:* = function (actor_id){
                tmpContainer = new MovieClip();
                tmpContainer.x = actor[actor_id].x;
                tmpContainer.y = actor[actor_id].y;
                tmpContainer.addChild(actor[actor_id].overState);
                addChild(tmpContainer);
            };
            EndMimickInterfaceButtonHover = function (evt:MouseEvent):
                if (get_child_by_name(tmpContainer.name)){
                    removeChild(tmpContainer);
                };
            };
            evt.target.add_event_listener(
                MouseEvent.MOUSE_OUT,
                EndMimickInterfaceButtonHover
            );
            Switch (get_actor_id(evt.target)){
                if case(CA_CITY_SHAKES:
                    MimickHover(IF_SCHMIEDE);
                    break;
                if case(CA_CITY_ZAUBERLADEN:
                    MimickHover(IF_ZAUBERLADEN);
                    break;
                if case(CA_CITY_RUHMESHALLE:
                    MimickHover(IF_EHRENHALLE);
                    break;
                if case(CA_CITY_ARENA:
                    MimickHover(IF_ARENA);
                    break;
                if case(CA_CITY_DEALER:
                    MimickHover(IF_PILZDEALER);
                    break;
                if case(CA_CITY_ESEL:
                    MimickHover(IF_STALL);
                    break;
                if case(CA_CITY_TAVERNE:
                    MimickHover(IF_TAVERNE);
                    break;
                if case(CA_CITY_POST:
                    MimickHover(IF_POST);
                    break;
                if case(CA_CITY_WACHE:
                    MimickHover(IF_ARBEITEN);
                    break;
            };
        };
        BuhHover = function ():
            Buh = True;
        };
        BuhOut = function ():
            Buh = False;
        };
        Bubbles = function (evt:Event):
            var evt:* = evt;
            var BubbleFade:* = function (inOut:Boolean, bubbleID):
                if (inOut){
                    if (
                        ((((!(on_stage(bubbleID)))
                        and (!(on_stage(CA_SCR_ARBEITEN_BLOCKCITY)))))
                        and (!(on_stage(CA_SCR_INVITE_BLOCKCITY))))
                    ){
                        add(bubbleID);
                        add(CITY_CA_OVL);
                        actor[bubbleID].alpha = 0;
                        BubbleWait = 30;
                    } else {
                        if (actor[bubbleID].alpha < 1){
                            if (
                                ((on_stage(CA_SCR_ARBEITEN_BLOCKCITY))
                                or (on_stage(CA_SCR_INVITE_BLOCKCITY)))
                            ){
                                remove(bubbleID);
                                actor[bubbleID].alpha = 0;
                                BubbleWait = 0;
                            } else {
                                if (BubbleWait > 0){
                                    BubbleWait--;
                                } else {
                                    add(bubbleID);
                                    add(CITY_CA_OVL);
                                    if (light_mode){
                                        actor[bubbleID].alpha = 1;
                                    } else {
                                        actor[bubbleID].alpha = (
                                            actor[bubbleID].alpha + 0.1
                                        );
                                    };
                                };
                            };
                        } else {
                            if (
                                ((on_stage(CA_SCR_ARBEITEN_BLOCKCITY))
                                or (on_stage(CA_SCR_INVITE_BLOCKCITY)))
                            ){
                                remove(bubbleID);
                            };
                        };
                    };
                } else {
                    if (on_stage(bubbleID)){
                        if (
                            ((on_stage(CA_SCR_ARBEITEN_BLOCKCITY))
                            or (on_stage(CA_SCR_INVITE_BLOCKCITY)))
                        ){
                            remove(bubbleID);
                            actor[bubbleID].alpha = 0;
                            BubbleWait = 0;
                        };
                        if (actor[bubbleID].alpha > 0){
                            if (light_mode){
                                actor[bubbleID].alpha = 0;
                            } else {
                                actor[bubbleID].alpha = (
                                    actor[bubbleID].alpha - 0.1
                                );
                            };
                            add(bubbleID);
                            add(CITY_CA_OVL);
                            BubbleWait = 30;
                        };
                        if (actor[bubbleID].alpha == 0){
                            remove(bubbleID);
                        };
                    };
                };
            };
            if (
                ((((on_stage(SCR_CITY_MAIN_DAWN))
                or (on_stage(SCR_CITY_MAIN_DAY))))
                or (on_stage(SCR_CITY_MAIN_NIGHT)))
            ){
                BubbleTimer.delay = 20;
            } else {
                BubbleTimer.delay = 500;
            };
            BubbleFade(Buh, BUBBLE_STATUE);
            BubbleFade(on_stage(CITY_ARENA), BUBBLE_ARENA);
            BubbleFade(on_stage(CITY_ESEL2), BUBBLE_ESEL);
            BubbleFade(on_stage(CITY_TAVERNE), BUBBLE_TAVERNE);
            BubbleFade(on_stage(CITY_RUHMESHALLE), BUBBLE_RUHMESHALLE);
            BubbleFade(on_stage(CITY_DEALER), BUBBLE_DEALER);
            BubbleFade(on_stage(CITY_POST), BUBBLE_POST);
            BubbleFade(
                ((((((on_stage(CITY_SCHILD1))
                or (on_stage(CITY_SCHILD2))))
                or (on_stage(CITY_SCHILD3))))
                or (on_stage(CITY_SCHILD4))),
                BUBBLE_WACHE
            );
            BubbleFade(on_stage(CITY_SHAKES), BUBBLE_SHAKES);
            BubbleFade(on_stage(CITY_ZAUBERLADEN), BUBBLE_ZAUBERLADEN);
        };
        CityAni = function (evt:Event):
            if (!light_mode){
                CityAniFrame++;
                if (
                    (((CityAniFrame == 5))
                    and (get_child_by_name(actor[CITY_ELF1].name)))
                ){
                    remove(CITY_ELF1);
                    add(CITY_ELF2);
                    if (on_stage(BUBBLE_POST)){
                        add(BUBBLE_POST);
                    };
                    add(CITY_CA_OVL);
                } else {
                    if (get_child_by_name(actor[CITY_ELF2].name)){
                        remove(CITY_ELF2);
                        add(CITY_ELF1);
                        if (on_stage(BUBBLE_POST)){
                            add(BUBBLE_POST);
                        };
                        add(CITY_CA_OVL);
                    };
                };
                if (
                    (((CityAniFrame == 3))
                    and ((int((random.random() * 2)) == 0)))
                ){
                    if (get_child_by_name(actor[CITY_ORK1].name)){
                        remove(CITY_ORK1);
                        add(CITY_ORK2);
                        define_bunch(CITY_ORK, CITY_ORK2);
                        add(CITY_CA_OVL);
                        if (on_stage(LBL['ERROR'])){
                            add(LBL['ERROR']);
                        };
                    } else {
                        if (get_child_by_name(actor[CITY_ORK2].name)){
                            remove(CITY_ORK2);
                            add(CITY_ORK1);
                            define_bunch(CITY_ORK, CITY_ORK1);
                            add(CITY_CA_OVL);
                            if (on_stage(LBL['ERROR'])){
                                add(LBL['ERROR']);
                            };
                        };
                    };
                };
                if (
                    (((((CityAniFrame == 2))
                    and ((int((random.random() * 2)) == 0))))
                    and (get_child_by_name(actor[CITY_ZWERG1].name)))
                ){
                    remove(CITY_ZWERG1);
                    add(CITY_ZWERG2);
                    define_bunch(CITY_ZWERG, CITY_ZWERG2);
                    add(CITY_CA_OVL);
                } else {
                    if (
                        (((CityAniFrame == 3))
                        and (on_stage(CITY_ZWERG2)))
                    ){
                        remove(CITY_ZWERG2);
                        add(CITY_ZWERG1);
                        define_bunch(CITY_ZWERG, CITY_ZWERG1);
                        add(CITY_CA_OVL);
                    };
                };
                if (SandwichPause > 0){
                    SandwichPause--;
                } else {
                    if (
                        ((((CityAniFrame % 2) == 0))
                        and (get_child_by_name(actor[CITY_SANDWICH1].name)))
                    ){
                        remove(CITY_SANDWICH1);
                        add(CITY_SANDWICH2);
                        if (on_stage(LBL['ERROR'])){
                            add(LBL['ERROR']);
                        };
                    };
                    if (
                        ((!(((CityAniFrame % 2) == 0)))
                        and (get_child_by_name(actor[CITY_SANDWICH2].name)))
                    ){
                        remove(CITY_SANDWICH2);
                        add(CITY_SANDWICH1);
                        if (on_stage(LBL['ERROR'])){
                            add(LBL['ERROR']);
                        };
                        if (int((random.random() * 8)) == 0){
                            SandwichPause = 4;
                        };
                    };
                };
                if (ZwergFussTapp > 0){
                    if (
                        ((on_stage(CITY_MAGIER1))
                        or (on_stage(CITY_MAGIER2)))
                    ){
                        if ((ZwergFussTapp % 2) == 0){
                            remove(CITY_MAGIER1);
                            add(CITY_MAGIER2);
                            if (on_stage(BUBBLE_WACHE)){
                                add(BUBBLE_WACHE);
                            };
                            if (on_stage(LBL['ERROR'])){
                                add(LBL['ERROR']);
                            };
                            add(CITY_CA_OVL);
                        } else {
                            remove(CITY_MAGIER2);
                            add(CITY_MAGIER1);
                            if (on_stage(BUBBLE_WACHE)){
                                add(BUBBLE_WACHE);
                            };
                            if (on_stage(LBL['ERROR'])){
                                add(LBL['ERROR']);
                            };
                            add(CITY_CA_OVL);
                        };
                        ZwergFussTapp--;
                    };
                } else {
                    if (
                        ((on_stage(CITY_MAGIER1))
                        and ((int((random.random() * 15)) == 0)))
                    ){
                        ZwergFussTapp = 6;
                    };
                };
            };
            if (CityAniFrame >= 10){
                CityAniFrame = 0;
            };
            if (on_stage(CA_SCR_ARBEITEN_BLOCKCITY)){
                if (on_stage(LBL_SCR_ARBEITEN_TIME)){
                    add(SCREEN_ARBEITEN_WAIT);
                } else {
                    if (on_stage(SCR_ARBEITEN_OK)){
                        add(SCREEN_ARBEITEN);
                    } else {
                        add(SCREEN_ARBEITEN_SUCCESS);
                    };
                };
            };
            if (on_stage(CA_SCR_INVITE_BLOCKCITY)){
                add(SCREEN_INVITE);
            };
        };
        WacheOver = function ():
            SchildTimer.add_event_listener(TimerEvent.TIMER, SchildFrame);
            SchildTimer.start();
            SchildDir = 1;
        };
        WacheOut = function ():
            SchildTimer.add_event_listener(TimerEvent.TIMER, SchildFrame);
            SchildTimer.start();
            SchildDir = -1;
        };
        SchildFrame = function (evt:Event):
            if (
                ((((!(((on_stage(CITY_WACHE_DAY))
                or (on_stage(CITY_WACHE_NIGHT)))))
                or (on_stage(CA_SCR_ARBEITEN_BLOCKCITY))))
                or (on_stage(CA_SCR_INVITE_BLOCKCITY)))
            ){
                SchildTimer.stop();
                SchildTimer.remove_event_listener(
                    TimerEvent.TIMER, SchildFrame
                );
                return;
            };
            remove(
                CITY_SCHILD1,
                CITY_SCHILD2,
                CITY_SCHILD3,
                CITY_SCHILD4
            );
            if (iFrame >= 0){
                add((CITY_SCHILD1 + iFrame));
            };
            add(CA_CITY_WACHE);
            if ((((iFrame < 0)) and ((SchildDir < 0)))){
                iFrame = -1;
                SchildTimer.stop();
                SchildTimer.remove_event_listener(TimerEvent.TIMER,
                                                  SchildFrame)
                return;
            };
            if ((((iFrame >= 3)) and ((SchildDir > 0)))){
                iFrame = 3;
                SchildTimer.stop();
                SchildTimer.remove_event_listener(
                    TimerEvent.TIMER, SchildFrame
                );
                return;
            };
            iFrame = (iFrame + SchildDir);
        };
        EselOver = function ():
            remove(CITY_ESEL1);
        };
        EselOut = function ():
            if (
                ((on_stage(STALL_BG_GUT))
                or (on_stage(STALL_BG_BOESE)))
            ){
                return;
            };
            add(CITY_ESEL1);
            add(CITY_CA_OVL);
        };
        ShowDealerEyes = function ():
            if (
                ((((on_stage(SCR_CITY_BACKG_NIGHT))
                or (on_stage(SCR_CITY_BACKG_DAWN))))
                or (on_stage(SCR_CITY_BACKG_DAY)))
            ){
                add(CITY_DEALER_ANI5);
                add(CA_CITY_DEALER);
                if (on_stage(CA_SCR_ARBEITEN_BLOCKCITY)){
                    if (on_stage(LBL_SCR_ARBEITEN_TIME)){
                        add(SCREEN_ARBEITEN_WAIT);
                    } else {
                        if (on_stage(SCR_ARBEITEN_OK)){
                            add(SCREEN_ARBEITEN);
                        } else {
                            add(SCREEN_ARBEITEN_SUCCESS);
                        };
                    };
                };
                if (on_stage(CA_SCR_INVITE_BLOCKCITY)){
                    add(SCREEN_INVITE);
                };
            };
        };
        HideDealerEyes = function ():
            DealerStepTimer.stop();
            DealerStepTimer.remove_event_listener(TimerEvent.TIMER, DealerStep)
        };
        var DealerAni:* = function (evt:Event):
            if (
                ((((on_stage(SCR_CITY_BACKG_NIGHT))
                or (on_stage(SCR_CITY_BACKG_DAWN))))
                or (on_stage(SCR_CITY_BACKG_DAY)))
            ){
                if (!get_child_by_name(actor[CITY_DEALER].name)){
                    DealerStepTimer.add_event_listener(
                        TimerEvent.TIMER, DealerStep
                    );
                    if (int((random.random() * 5)) == 0){
                        DealerAniStep = 5;
                    } else {
                        DealerAniStep = 1;
                    };
                    DealerStepTimer.start();
                };
            } else {
                DealerStepTimer.stop();
                DealerStepTimer.remove_event_listener(
                    TimerEvent.TIMER, DealerStep
                );
            };
        };
        DealerStep = function (evt:Event):
            if (
                ((((on_stage(SCR_CITY_BACKG_NIGHT))
                or (on_stage(SCR_CITY_BACKG_DAWN))))
                or (on_stage(SCR_CITY_BACKG_DAY)))
            ){
                Switch (DealerAniStep){
                    if case(1:
                        add(CITY_DEALER_ANI2);
                        break;
                    if case(2:
                        add(CITY_DEALER_ANI1);
                        break;
                    if case(3:
                        add(CITY_DEALER_ANI2);
                        break;
                    if case(4:
                        add(CITY_DEALER_ANI5);
                        DealerAniStep = 0;
                        break;
                    if case(5:
                    if case(6:
                    if case(7:
                        add(CITY_DEALER_ANI3);
                        break;
                    if case(8:
                        add(CITY_DEALER_ANI5);
                        break;
                    if case(9:
                    if case(10:
                    if case(11:
                        add(CITY_DEALER_ANI4);
                        break;
                    if case(12:
                        add(CITY_DEALER_ANI5);
                        DealerAniStep = 0;
                        break;
                };
                add(CA_CITY_DEALER);
                if (on_stage(CA_SCR_ARBEITEN_BLOCKCITY)){
                    if (on_stage(LBL_SCR_ARBEITEN_TIME)){
                        add(SCREEN_ARBEITEN_WAIT);
                    } else {
                        if (on_stage(SCR_ARBEITEN_OK)){
                            add(SCREEN_ARBEITEN);
                        } else {
                            add(SCREEN_ARBEITEN_SUCCESS);
                        };
                    };
                };
                if (on_stage(CA_SCR_INVITE_BLOCKCITY)){
                    add(SCREEN_INVITE);
                };
                if (DealerAniStep == 0){
                    DealerStepTimer.stop();
                    DealerStepTimer.remove_event_listener(
                        TimerEvent.TIMER, DealerStep
                    );
                    return;
                };
                DealerAniStep++;
            };
        };
        ShowArenaOno = function ():
            OnoTimer = new Timer(2000);
            OnoTimer.add_event_listener(TimerEvent.TIMER, PopupArenaOno);
            OnoTimer.start();
            PopupArenaOno();
        };
        HideArenaOno = function ():
            if (OnoTimer){
                OnoTimer.remove_event_listener(TimerEvent.TIMER, PopupArenaOno)
            };
            OnoPopupTimer.remove_event_listener(TimerEvent.TIMER, StepArenaOno)
            remove(ThisOno);
        };
        PopupArenaOno = function (evt:Event=None):
            while (ThisOno == LastOno) {
                ThisOno = (CITY_ARENA_ONO1 + int((random.random() * 4)));
            };
            LastOno = ThisOno;
            OnoPopupTimer.add_event_listener(TimerEvent.TIMER, StepArenaOno);
            OnoPopupTimer.start();
            add(ThisOno);
            add(CA_CITY_ARENA);
            actor[ThisOno].alpha = 0;
        };
        StepArenaOno = function (evt:Event):
            if (PopupDir){
                actor[ThisOno].alpha = (actor[ThisOno].alpha - 0.1);
                if (actor[ThisOno].alpha <= 0){
                    PopupDir = False;
                    remove(ThisOno);
                    OnoPopupTimer.remove_event_listener(
                        TimerEvent.TIMER, StepArenaOno
                    );
                };
            } else {
                actor[ThisOno].alpha = (actor[ThisOno].alpha + 0.1);
                if (actor[ThisOno].alpha >= 1){
                    PopupDir = True;
                };
            };
        };
        InterfaceButtonHover = function (evt:MouseEvent):
            if (
                ((((((((on_stage(SCR_CITY_BACKG_NIGHT))
                or (on_stage(SCR_CITY_BACKG_DAWN))))
                or (on_stage(SCR_CITY_BACKG_DAY))))
                and (!(on_stage(CA_SCR_ARBEITEN_BLOCKCITY)))))
                and (!(on_stage(CA_SCR_INVITE_BLOCKCITY))))
            ){
                Switch (get_actor_id(evt.target)){
                    if case(IF_SCHMIEDE:
                        add(CITY_SHAKES);
                        break;
                    if case(IF_ZAUBERLADEN:
                        add(CITY_ZAUBERLADEN);
                        break;
                    if case(IF_EHRENHALLE:
                        add(CITY_RUHMESHALLE);
                        add(CITY_CA_OVL);
                        break;
                    if case(IF_ARENA:
                        add(CITY_ARENA);
                        add(CITY_CA_OVL);
                        ShowArenaOno();
                        break;
                    if case(IF_PILZDEALER:
                        add(CITY_DEALER_ANI5);
                        add(CITY_DEALER);
                        HideDealerEyes();
                        break;
                    if case(IF_STALL:
                        add(CITY_ESEL2);
                        remove(CITY_ESEL1);
                        add(CITY_CA_OVL);
                        break;
                    if case(IF_TAVERNE:
                        add(CITY_TAVERNE);
                        add(CITY_ZWERG);
                        add(CITY_CA_OVL);
                        break;
                    if case(IF_POST:
                        add(CITY_POST);
                        add(CITY_ORK);
                        add(CITY_CA_OVL);
                        break;
                    if case(IF_ARBEITEN:
                        WacheOver();
                        break;
                };
                if (on_stage(CA_SCR_ARBEITEN_BLOCKCITY)){
                    add(SCREEN_ARBEITEN);
                };
                if (on_stage(CA_SCR_INVITE_BLOCKCITY)){
                    add(SCREEN_INVITE);
                };
            };
        };
        ExitScreen = function (evt:Event=None){
            if (on_stage(TOILET)){
                send_action(ACT_SCREEN_TAVERNE);
            } else {
                if (on_stage(WITCH)){
                    send_action(ACT_SCREEN_ZAUBERLADEN);
                } else {
                    if (
                        ((on_stage(TOWER_SCROLLAREA))
                        or (on_stage(LBL_MAINQUEST_TITLE)))
                    ){
                        send_action(ACT_SCREEN_WELTKARTE);
                    } else {
                        show_city_screen();
                    };
                };
            };
        };
        HalleSuchClick = function (evt:Event):
            if (actor[INP_HALLE_GOTO].getChildAt(
                1
            ).text == texts[TXT_HALLE_SUCHFELD_TEXT]){
                actor[INP_HALLE_GOTO].getChildAt(1).text = "";
            };
        };
        RuhmesHalleScroll = function (evt:Event):
            var evt:* = evt;
            if ((evt is KeyboardEvent)){
                if (
                    ((((!((KeyboardEvent(evt).keyCode == 13)))
                    and (!((KeyboardEvent(evt).keyCode == 10)))))
                    and (!((KeyboardEvent(evt).keyCode == 16777230))))
                ){
                    return;
                };
            };
            Switch (get_actor_id(evt.target)){
                if case(HALL_GOTO_SPIELER:
                    ruhmes_halle_such_name = True;
                    ruhmes_halle_such_string = actor[
                        INP['NAME']
                    ].getChildAt(1).text;
                    send_action(
                        ACT_SCREEN_EHRENHALLE,
                        actor[INP['NAME']].getChildAt(1).text,
                        -1
                    );
                    break;
                if case(HALL_GOTO_GILDEN:
                    if (savegame[SG_GUILD_INDEX] > 0){
                        ruhmes_halle_such_name = True;
                        ruhmes_halle_such_string = gilde;
                        send_action(
                            ACT_SCREEN_GILDENHALLE,
                            "",
                            savegame[SG_GUILD_INDEX],
                            0
                        );
                    } else {
                        ruhmes_halle_such_name = False;
                        ruhmes_halle_such_string = "";
                        send_action(ACT_SCREEN_GILDENHALLE, "", 0, 1);
                    };
                    break;
                if case(HALLE_UP:
                    if (guild_hall_mode){
                        send_action(
                            ACT_SCREEN_GILDENHALLE,
                            "",
                            "0",
                            abs(int(
                                actor[HALL_LIST].getChildAt(6 * 7 + 5).text
                            )) - 15
                        );
                    } else {
                        send_action(
                            ACT_SCREEN_EHRENHALLE,
                            "",
                            abs(int(
                                actor[HALL_LIST].getChildAt(((6 * 7) + 5)).text
                            )) - 15
                    };
                    break;
                if case(HALLE_DOWN:
                    if (guild_hall_mode){
                        send_action(
                            ACT_SCREEN_GILDENHALLE,
                            "",
                            "0",
                            abs(int(
                                actor[HALL_LIST].getChildAt(((6 * 7) + 5)).text
                            )) + 15
                    } else {
                        send_action(
                            ACT_SCREEN_EHRENHALLE,
                            "",
                            abs(int(
                                actor[HALL_LIST].getChildAt(((6 * 7) + 5)).text
                            )) + 15)
                    };
                    break;
                default:
                    ruhmes_halle_such_string = actor[
                        INP_HALLE_GOTO
                    ].getChildAt(1).text;
                    if (
                        (((((ruhmes_halle_such_string.lower() == "/s [p: 332]")
                        or (ruhmes_halle_such_string.lower() == "/s[p: 332]")))
                        or (ruhmes_halle_such_string.lower() == "/s [p:332]")))
                        or (ruhmes_halle_such_string.lower() == "/s[p:332]"))
                    ){
                        play(SND_MOUNT_1);
                        send_action(
                            ACT_SEND_CHAT,
                            EncodeChat("Moo!"),
                            last_chat_index
                        );
                        if (text_dir == "right"){
                            var _local3 = actor[IF_GOLD];
                            with (_local3) {
                                x = IF_LBL_GOLDPILZE_X;
                            };
                            _local3 = actor[LBL_IF_GOLD];
                            with (_local3) {
                                text = "0";
                                x = ((IF_LBL_GOLDPILZE_X - text_width) - 10);
                            };
                            _local3 = actor[IF_SILBER];
                            with (_local3) {
                                x = ((actor[LBL_IF_GOLD].x - width) - 10);
                            };
                            _local3 = actor[LBL_IF_SILBER];
                            with (_local3) {
                                text = "00";
                                x = ((actor[IF_SILBER].x - text_width) - 10);
                            };
                            _local3 = actor[LBL_IF_PILZE];
                            with (_local3) {
                                text = "0";
                                x = ((IF_LBL_GOLDPILZE_X - text_width) - 10);
                            };
                            enable_popup(LBL_IF_PILZE);
                        } else {
                            _local3 = actor[LBL_IF_SILBER];
                            with (_local3) {
                                text = "00";
                                x = ((IF_LBL_GOLDPILZE_X - text_width) - 10);
                            };
                            _local3 = actor[IF_GOLD];
                            with (_local3) {
                                x = ((actor[LBL_IF_SILBER].x - 24) - 10);
                            };
                            _local3 = actor[LBL_IF_GOLD];
                            with (_local3) {
                                text = "0";
                                x = ((actor[IF_GOLD].x - text_width) - 10);
                            };
                            _local3 = actor[LBL_IF_PILZE];
                            with (_local3) {
                                text = "0";
                                x = ((IF_LBL_GOLDPILZE_X - text_width) - 10);
                            };
                            enable_popup(LBL_IF_PILZE);
                        };
                    };
                    if (int(actor[INP_HALLE_GOTO].getChildAt(1).text) > 0){
                        ruhmes_halle_such_name = False;
                        if (guild_hall_mode){
                            send_action(
                                ACT_SCREEN_GILDENHALLE,
                                "",
                                "0",
                                int(actor[INP_HALLE_GOTO].getChildAt(1).text)
                            );
                        } else {
                            send_action(
                                ACT_SCREEN_EHRENHALLE,
                                "",
                                int(actor[INP_HALLE_GOTO].getChildAt(1).text)
                            );
                        };
                    } else {
                        ruhmes_halle_such_name = True;
                        if (guild_hall_mode){
                            send_action(
                                ACT_SCREEN_GILDENHALLE,
                                actor[INP_HALLE_GOTO].getChildAt(1).text,
                                "0",
                                "0"
                            );
                        } else {
                            send_action(
                                ACT_SCREEN_EHRENHALLE,
                                actor[INP_HALLE_GOTO].getChildAt(1).text,
                                -1
                            );
                        };
                    };
            };
        };
        RemoveInviteWindow = function (evt:Event=None){
            remove_all();
            show_city_screen();
        };
        SendPlayerInvite = function (evt:Event=None){
            if ((evt is KeyboardEvent)){
                if (
                    ((((!((KeyboardEvent(evt).keyCode == 13)))
                    and (!((KeyboardEvent(evt).keyCode == 10)))))
                    and (!((KeyboardEvent(evt).keyCode == 16777230))))
                ){
                    return;
                };
            };
            if (
                ((!((actor[INP_CHAR_INVITE].getChildAt(1).text == "")))
                and (!((actor[INP_CHAR_INVITE2].getChildAt(1).text == ""))))
            ){
                send_action(
                    ACT_INVITE_PLAYER,
                    actor[INP_CHAR_INVITE].getChildAt(1).text.split(
                        ";"
                    ).join("AAASEMIAAA"),
                    actor[INP_CHAR_INVITE2].getChildAt(1).text.split(
                    ";").join("AAASEMIAAA")
                );
            } else {
                error_message(texts[TXT_ERROR_INPUT_REQUIRED]);
            };
        };
        var GotoPlayerGilde:* = function (evt:MouseEvent){
            if (on_stage(TOWER_SCROLLAREA)){
                return;
            };
            if (SelectedGuild != ""){
                if (SelectedGuild == gilde){
                    send_action(ACT_SCREEN_GILDEN);
                } else {
                    send_action(ACT_SCREEN_FREMDGILDE, SelectedGuild);
                };
            };
        };
        PrevPlayer = function (evt:MouseEvent=None){
            if (arrow_hall_mode){
                sel_name = last_hall_members[indexInHall];
                send_action(ACT['REQUEST']['CHAR'],
                            last_hall_members[indexInHall]);
            } else {
                sel_name = lastGuildMembers[indexInGuild];
                send_action(ACT['REQUEST']['CHAR'],
                            lastGuildMembers[indexInGuild]);
            };
        };
        NextPlayer = function (evt:MouseEvent=None){
            if (arrow_hall_mode){
                sel_name = last_hall_members[(indexInHall + 2)];
                send_action(
                    ACT['REQUEST']['CHAR'],
                    last_hall_members[(indexInHall + 2)]
                );
            } else {
                sel_name = lastGuildMembers[(indexInGuild + 2)];
                send_action(
                    ACT['REQUEST']['CHAR'],
                    lastGuildMembers[(indexInGuild + 2)]
                );
            };
        };
        var JumpToPlayerHall:* = function (evt:Event=None){
            ruhmes_halle_such_string = lastPlayer;
            ruhmes_halle_such_name = True;
            send_action(
                ACT_SCREEN_EHRENHALLE,
                ruhmes_halle_such_string,
                -1
            );
        };
        var Enterplayer_desc:* = function (evt:FocusEvent){
            var evt:* = evt;
            var _local3 = actor[INP_CHARDESC].getChildAt(0);
            with (_local3) {
                if (type == TextFieldType.INPUT){
                    if (text == texts[TXT_ENTERDESC]){
                        text = "";
                    };
                };
            };
        };
        var Leaveplayer_desc:* = function (evt:FocusEvent){
            var evt:* = evt;
            var _local3 = actor[INP_CHARDESC].getChildAt(0);
            with (_local3) {
                if (type == TextFieldType.INPUT){
                    if (text != player_desc){
                        send_action(
                            ACT_SET_PLAYER_DESC,
                            RemoveIllegalChars(SemiStrip(text))
                        );
                    };
                    if (text == ""){
                        text = texts[TXT_ENTERDESC];
                    };
                };
            };
        };
        RequestAlbum = function (evt:Event=None){
            send_action(ACT_ALBUM);
            show_screen_album();
        };
        PlayerGuildInviteCancel = function (evt:Event=None){
            if (!on_stage(PLAYER_GUILD_INVITE)){
                return;
            };
            remove(GILDE_DIALOG_INVITE);
        };
        PlayerGuildInviteOK = function (evt:Event=None){
            if (!on_stage(PLAYER_GUILD_INVITE)){
                return;
            };
            send_action(
                ACT_GUILD_INVITE,
                actor[INP['NAME']].getChildAt(1).text,
                gilde,
                actor[INP_GILDE_DIALOG_INVITE].getChildAt(1).text,
                MD5(actor[INP['LOGIN_PASSWORD']].getChildAt(1).text),
                ""
            );
        };
        PlayerGuildInvite = function (evt:Event=None){
            var evt:* = evt;
            add(GILDE_DIALOG_INVITE);
            actor[INP_GILDE_DIALOG_INVITE].getChildAt(1).text = lastPlayer;
            var _local3 = actor[LBL_WINDOW_TITLE];
            with (_local3) {
                text = texts[TXT_GILDE_INVITE_TITLE];
                x = ((IF_WIN_X + IF_WIN_WELCOME_X) - int((text_width / 2)));
            };
        };
        var RequestStableScreen:* = function (evt:Event){
            send_action(ACT_SCREEN_STALL);
        };
        ZurGilde = function (evt:Event=None){
            send_action(ACT_SCREEN_GILDEN);
        };
        PlayerSendMessage = function (){
            show_post_screen();
        };
        PlayerAttack = function (){
            if (WaitingFor(savegame[SG_PVP_REROLL_TIME])){
                var _local2 = actor[LBL_IF_PILZE];
                with (_local2) {
                    if (int(savegame[SG_MUSH]) > 0){
                        text = str((int(savegame[SG_MUSH]) - 1));
                    };
                    x = ((IF_LBL_GOLDPILZE_X - text_width) - 10);
                };
                enable_popup(LBL_IF_PILZE);
            };
            send_action(ACT_START_FIGHT, sel_name);
            if (lastAttacked.find(sel_name.lower()) == -1){
                lastAttacked.append(sel_name.lower());
            };
        };
        PlayerInvite = function (){
            var ShowInviteScreen:* = None;
            ShowInviteScreen = function (){
                remove_all();
                show_city_screen();
                hide(INVITE_SUCCESS);
                show(INVITE_INPUTDIALOGUE);
                actor[INP_CHAR_INVITE].getChildAt(1).text = "";
                stage.focus = actor[INP_CHAR_INVITE].getChildAt(1);
                actor[INP_CHAR_INVITE2].getChildAt(1).text = "";
                actor[LBL_WINDOW_TITLE].text = texts[TXT_INVITETITLE];
                actor[LBL_WINDOW_TITLE].x = (
                    (IF_WIN_X + IF_WIN_WELCOME_X)
                    - int((actor[LBL_WINDOW_TITLE].text_width / 2))
                );
                add(SCREEN_INVITE);
            };
            load(SCREEN_INVITE);
            whendo_loaded(ShowInviteScreen);
        };
        var BoostBtnDownHandler:* = function (evt:Event){
            var ClickCount:* = 0;
            var evt:* = evt;
            var DoPushBoostBtn:* = function (timerevt:Event){
                var timerevt:* = timerevt;
                if (DestroyBoostBtnTimer){
                    DestroyBoostBtnTimer = False;
                    var _local3 = BoostBtnRepeatTimer;
                    with (_local3) {
                        stop();
                        delay = 1000;
                        remove_event_listener(TimerEvent.TIMER, DoPushBoostBtn)
                    };
                } else {
                    ClickCount++;
                    Switch (ClickCount){
                        if case(1:
                            BoostBtnRepeatTimer.delay = 500;
                            break;
                        if case(3:
                            BoostBtnRepeatTimer.delay = 250;
                            break;
                    };
                    if (BoostAttribute(evt)){
                        play(SND['CLICK']);
                    };
                };
            };
            ClickCount = 0;
            if (BoostBtnRepeatTimer.running){
                return;
            };
            DestroyBoostBtnTimer = False;
            var _local3 = BoostBtnRepeatTimer;
            with (_local3) {
                delay = 1000;
                add_event_listener(TimerEvent.TIMER, DoPushBoostBtn);
                start();
            };
        };
        var BoostBtnUpHandler:* = function (evt:Event){
            if (BoostBtnRepeatTimer.running){
                DestroyBoostBtnTimer = True;
            };
        };
        BoostAttribute = function (evt:Event):
            if (canBoost[(get_actor_id(evt.target) - SCR_CHAR_STEIGERN1)]){
                send_action(
                    ACT_BUY_ATTRIB,
                    ((get_actor_id(evt.target) - SCR_CHAR_STEIGERN1) + 1)
                );
            };
            return (canBoost[(get_actor_id(evt.target) - SCR_CHAR_STEIGERN1)]);
        };
        BoostBtnTimerFunction = function (evt:TimerEvent){
            if (BoostBtnChange > 1){
                BoostBtnChange--;
                return;
            };
            if (BoostBtnChange == 1){
                BoostBtnChange = 0;
                if (inBoostBtn){
                    if (light_mode){
                        set_alpha(CHAR_PREISE, 1);
                        set_alpha(CHAR_SECONDPROP, 0);
                    } else {
                        fade_in(CHAR_PREISE, 20, 0.2);
                        fade_out(CHAR_SECONDPROP, 20, 0.2);
                    };
                } else {
                    if (on_stage(LBL_SCR_CHAR_PREIS1)){
                        if (light_mode){
                            add(CHAR_SECONDPROP);
                            if (on_stage(POPUP_INFO)){
                                add(POPUP_INFO);
                            };
                            set_alpha(CHAR_PREISE, 0);
                            set_alpha(CHAR_SECONDPROP, 1);
                        } else {
                            fade_out(CHAR_PREISE, 20, 0.2);
                            add(CHAR_SECONDPROP);
                            if (on_stage(POPUP_INFO)){
                                add(POPUP_INFO);
                            };
                            fade_in(CHAR_SECONDPROP, 20, 0.2);
                        };
                    };
                };
            };
        };
        var BoostBtnOver:* = function (evt:Event){
            if (!inBoostBtn){
                BoostBtnChange = 6;
            };
            inBoostBtn = True;
        };
        var BoostBtnOut:* = function (evt:Event){
            if (inBoostBtn){
                BoostBtnChange = 6;
            };
            inBoostBtn = False;
        };
        InventoryItemMouseDown = function (evt:MouseEvent){
            if (
                ((((on_stage(SCR_FIDGET_BG))
                or (on_stage(SCR_SHAKES_BG))))
                or (on_stage(TOWER_SCROLLAREA)))
            ){
                add(CA_SELL_ITEM);
            };
        };
        BackpackItemMouseDown = function (evt:MouseEvent){
            add(CA_USE_ITEM);
        };
        InventoryItemMouseUp = function (evt:MouseEvent){
            remove(CA_SELL_ITEM);
            remove(CA_USE_ITEM);
        };
        DropHandler = function (actor_id, targetID):
            var towerMode:Boolean;
            var sourceSlot;
            var targetSlot;
            towerMode = on_stage(PREV_COPYCAT);
            trc("dragdrop", actor_id, targetID, towerMode);
            sourceSlot = 0;
            targetSlot = 0;
            if (targetID == CA_SELL_ITEM){
                trc("sell item");
                if (
                    (((actor_id >= CHAR_SLOT_1))
                    and ((actor_id <= CHAR_SLOT_15)))
                ){
                    trc("selling can be done");
                    sourceSlot = ((actor_id - CHAR_SLOT_1) + 1);
                    if (towerMode){
                        trc("impossible here");
                        return (False);
                    };
                    send_action(
                        ACT_INVENTORY_CHANGE,
                        (((sourceSlot <= 10))
                        ? 1
                        : (((sourceSlot <= 15))
                           ? 2
                           : (((sourceSlot <= 21))
                              ? 4
                              : 3))),
                        (sourceSlot - (((sourceSlot <= 10))
                        ? 0
                        : (((sourceSlot <= 15))
                           ? 10
                           : (((sourceSlot <= 21))
                              ? 15
                              : 21)))),
                        0,
                        0
                    );
                    return (True);
                };
                trc("wrong source");
            } else {
                if (targetID == CA_USE_ITEM){
                    trc("use item");
                    if (
                        (((actor_id >= CHAR_SLOT_10))
                        and ((actor_id <= CHAR_SLOT_SHAKES_6)))
                    ){
                        trc("using can be done");
                        sourceSlot = ((actor_id - CHAR_SLOT_1) + 1);
                        if (towerMode){
                            send_action(
                                ACT_MOVE_COPYCAT_ITEM,
                                2,
                                (sourceSlot - 10),
                                (copyCatSel + 101),
                                -1
                            );
                        } else {
                            send_action(
                                ACT_INVENTORY_CHANGE,
                                (((sourceSlot <= 10))
                                    ? 1
                                    : (((sourceSlot <= 15))
                                       ? 2
                                       : (((sourceSlot <= 21))
                                          ? 4
                                          : 3))),
                                (sourceSlot - (((sourceSlot <= 10))
                                    ? 0
                                    : (((sourceSlot <= 15))
                                       ? 10
                                       : (((sourceSlot <= 21))
                                           ? 15
                                           : 21)))),
                                1,
                                -1
                            );
                        };
                        return (True);
                    };
                    trc("wrong source");
                } else {
                    if (targetID == CA_CHALDRON){
                        if (
                            (((actor_id >= CHAR_SLOT_1))
                            and ((actor_id <= CHAR_SLOT_15)))
                        ){
                            trc("donating to witch can be done");
                            sourceSlot = ((actor_id - CHAR_SLOT_1) + 1);
                            if (towerMode){
                                trc("impossible here");
                                return (False);
                            };
                            send_action(
                                ACT_WITCH_DONATE,
                                (((sourceSlot <= 10))
                                    ? 1
                                    : (((sourceSlot <= 15))
                                       ? 2
                                       : (((sourceSlot <= 21))
                                          ? 4
                                          : 3))),
                                (sourceSlot - (((sourceSlot <= 10))
                                    ? 0
                                    : (((sourceSlot <= 15))
                                       ? 10
                                       : (((sourceSlot <= 21))
                                          ? 15
                                          : 21))))
                            );
                            return (True);
                        };
                        trc("wrong source");
                    } else {
                        trc("moving items around");
                        if (
                            (((((actor_id >= CHAR_SLOT_1))
                            and ((actor_id <= CHAR_SLOT_SHAKES_6))))
                            and (!((targetID == CA_TOILET_BOWL))))
                        ){
                            trc("source is ok");
                            sourceSlot = ((actor_id - CHAR_SLOT_1) + 1);
                            if (
                                (((targetID >= CHAR_SLOT_1))
                                and ((targetID <= CHAR_SLOT_SHAKES_6)))
                            ){
                                trc("target is ok");
                                targetSlot = ((targetID - CHAR_SLOT_1) + 1);
                                if (towerMode){
                                    if (
                                        towerSG[(((((sourceSlot <= 10))
                                            ? ((
                                               TSG_COPYCATS
                                               + (copyCatSel * COPYCAT
                                            )) + CPC_ITEMS)
                                            : TSG_LOOT_SACK) +
                                            ((((sourceSlot <= 10))
                                                ? (sourceSlot - 1)
                                                : (sourceSlot - 11))
                                                    * SG['ITM']['SIZE']))
                                                    + SG_ITM_TYP)] > 0
                                ){
                                        trc("do it");
                                        send_action(
                                            ACT_MOVE_COPYCAT_ITEM,
                                            (((sourceSlot <= 10))
                                                ? (copyCatSel + 101)
                                                : 2),
                                            (((sourceSlot <= 10))
                                                ? sourceSlot
                                                : (sourceSlot - 10)),
                                            (((targetSlot <= 10))
                                                ? (copyCatSel + 101)
                                                : 2),
                                            (((targetSlot <= 10))
                                                ? targetSlot :
                                                (targetSlot - 10))
                                            );
                                        return (True);
                                    };
                                    trc("source slot empty");
                                } else {
                                    if (
                                        savegame[
                                            (((((sourceSlot <= 15))
                                                ? SG_INVENTORY_OFFS
                                                : (((sourceSlot <= 21))
                                                ? SG_FIDGET_ITEM1
                                                : SG_SHAKES_ITEM1))
                                                  + ((sourceSlot
                                                  - (((sourceSlot <= 15))
                                                     ? 1
                                                     : (((sourceSlot <= 21))
                                                        ? 16
                                                        : 22)))
                                                          * SG['ITM']['SIZE']))
                                                          + SG_ITM_TYP)] > 0
                                    ){
                                        trc("do it");
                                        send_action(
                                            ACT_INVENTORY_CHANGE,
                                            (((sourceSlot <= 10))
                                                ? 1
                                                : (((sourceSlot <= 15))
                                                   ? 2
                                                   : (((sourceSlot <= 21))
                                                      ? 4
                                                      : 3))),
                                            (sourceSlot - (((sourceSlot <= 10))
                                                ? 0
                                                : (((sourceSlot <= 15))
                                                   ? 10
                                                   : (((sourceSlot <= 21))
                                                      ? 15
                                                      : 21)))),
                                            (((targetSlot <= 10))
                                                ? 1
                                                : (((targetSlot <= 15))
                                                   ? 2
                                                   : (((targetSlot <= 21))
                                                      ? 4
                                                      : 3))),
                                            (targetSlot - (((targetSlot <= 10))
                                                ? 0
                                                : (((targetSlot <= 15))
                                                   ? 10
                                                   : (((targetSlot <= 21))
                                                      ? 15
                                                      : 21))))
                                        );
                                        return (True);
                                    };
                                    trc("source slot empty");
                                };
                            } else {
                                trc("target wrong");
                            };
                        } else {
                            if (targetID == CA_TOILET_BOWL){
                                trc("drop in toilet");
                                if (
                                    (((actor_id >= CHAR_SLOT_10))
                                    and ((actor_id <= CHAR_SLOT_SHAKES_6)))
                                ){
                                    sourceSlot = ((actor_id - CHAR_SLOT_1) + 1)
                                    send_action(
                                        ACT_INVENTORY_CHANGE,
                                        (((sourceSlot <= 10))
                                            ? 1
                                            : (((sourceSlot <= 15))
                                               ? 2
                                               : (((sourceSlot <= 21))
                                                  ? 4
                                                  : 3))),
                                        (sourceSlot - (((sourceSlot <= 10))
                                            ? 0
                                            : (((sourceSlot <= 15))
                                               ? 10
                                               : (((sourceSlot <= 21))
                                                  ? 15
                                                  : 21)))),
                                        10,
                                        0
                                    );
                                    show(TOILET_DROP);
                                    return (True);
                                };
                            } else {
                                trc("source wrong");
                            };
                        };
                    };
                };
            };
            return (False);
        };
        PotionSingleClick = function (evt:Event=None){
        };
        PotionDoubleClick = function (evt:Event=None){
            if (!on_stage(CHAR_MESSAGE)){
                send_action(
                    ACT_KILL_POTION,
                    ((get_actor_id(evt.target) - CHAR_POTION)
                    + 1)
                );
            };
        };
        var Openfriend_link:* = function (evt:Event){
            navigate_to_url(
                new URLRequest(
                    ((("mailto:?subject=" + texts[TXT_FRIEND_SUBJECT].split(
                        " "
                    ).join("%20").split(
                        "&"
                    ).join("%26")) + "&body=") + friend_link)
                )
            );
        };
        var TowerScrollSingle:* = function (evt:Event){
        };
        towerBoostPriceFadeout = function (evt:TimerEvent){
            fade_out(TOWER_BOOSTPRICE);
        };
        tower_levelLabelMoveFn = function (evt:TimerEvent){
            if (abs((actor[LBL_TOWER_EXPLABEL].x - tower_levelLabelPos)) >= 1){
                actor[LBL_TOWER_EXPLABEL].x = (
                    (actor[LBL_TOWER_EXPLABEL].x + tower_levelLabelPos) / 2
                );
            } else {
                actor[LBL_TOWER_EXPLABEL].x = tower_levelLabelPos;
                tower_levelLabelTimer.stop();
            };
        };
        ShowTowerBoostPrices = function (evt:MouseEvent){
            var i;
            towerBoostPriceFadeoutTimer.stop();
            fade_in(TOWER_BOOSTPRICE);
            tower_levelLabelPos = (SCR_CHAR_CHARX + 3);
            tower_levelLabelTimer.start();
        };
        HideTowerBoostPrices = function (evt:MouseEvent){
            var i;
            towerBoostPriceFadeoutTimer.start();
            tower_levelLabelPos = (
                (SCR_CHAR_CHARX + 127)
                - int((actor[LBL_TOWER_EXPLABEL].text_width / 2))
            );
            tower_levelLabelTimer.start();
        };
        BoostCopycat = function (){
            send_action(
                ACT_COPYCAT_BOOST,
                (copyCatSel + 1),
                ((towerSG[
                    ((TSG_COPYCATS + (COPYCAT * copyCatSel)) + CPC_LEVEL)
                ] * 1) + 1)
            );
        };
        ShopAniFrame = function (evt:TimerEvent){
            var pv:Boolean;
            var AffeStep;
            var FidgetAugenZu:Boolean;
            var ShakesAugenZu;
            var WasPassiert:Boolean;
            pv = on_stage(POPUP_INFO);
            WasPassiert = False;
            if (dragDropActive){
                PlayerIdle = False;
                WasIdleCount = 0;
                ShopIdle = 0;
                remove(FIDGET_DAY);
                remove(FIDGET_IDLE);
                SaleRecoverTime = 10;
                return;
            };
            if (ShopIdle == 400){
                PlayerIdle = True;
                WasPassiert = True;
                if (on_stage(SCR_SHAKES_BG)){
                    if (WasIdleCount > 2){
                        ShakesIdlePhase = 4;
                        ShakesIdleStep = 0;
                    } else {
                        ShakesIdleStep++;
                        Switch (int(ShakesIdleStep)){
                            if case(1:
                            if case(5:
                            if case(9:
                            if case(12:
                            if case(15:
                            if case(19:
                            if case(23:
                            if case(27:
                            if case(33:
                                ShakesIdlePhase = 1;
                                break;
                            if case(2:
                            if case(4:
                            if case(6:
                            if case(8:
                            if case(10:
                            if case(13:
                            if case(16:
                            if case(18:
                            if case(20:
                            if case(22:
                            if case(24:
                            if case(26:
                            if case(28:
                            if case(31:
                                ShakesIdlePhase = 2;
                                break;
                            if case(3:
                            if case(7:
                            if case(11:
                            if case(14:
                            if case(17:
                            if case(21:
                            if case(25:
                            if case(29:
                                ShakesIdlePhase = 3;
                                break;
                            if case(35:
                                WasIdleCount++;
                                PlayerIdle = False;
                                ShakesIdlePhase = 0;
                                ShopIdle = 0;
                                ShakesIdleStep = 0;
                                break;
                            default:
                                WasPassiert = False;
                        };
                    };
                };
            } else {
                ShopIdle++;
            };
            if (SaleRecoverTime > 0){
                SaleRecoverTime--;
                if (SaleRecoverTime == 0){
                    WasPassiert = True;
                };
            };
            if (on_stage(SCR_SHAKES_BG)){
                ShakesBlinzeln++;
                if (ShakesBlinzeln > 73){
                    ShakesBlinzeln = int((random.random() * 30));
                    WasPassiert = True;
                    ShakesAugenZu = 0;
                } else {
                    if (ShakesBlinzeln > 72){
                        WasPassiert = True;
                        ShakesAugenZu = 0;
                    } else {
                        if (ShakesBlinzeln > 71){
                            WasPassiert = True;
                            ShakesAugenZu = 0;
                        } else {
                            if (ShakesBlinzeln > 70){
                                WasPassiert = True;
                                ShakesAugenZu = 2;
                            };
                        };
                    };
                };
                if (WasPassiert){
                    add(SCREEN_SHAKES);
                    if ((((special_action == 2)) or ((special_action == 5)))){
                        add(SHAKES_EPCIOVL);
                        actor[SHAKES_EPCIOVL].mouse_enabled = False;
                    };
                    if (!sleep_time()){
                        if (((PlayerIdle) and (!((ShakesIdlePhase == 0))))){
                            remove(SHAKES_NIGHT);
                            remove(SHAKES_DAY);
                            remove(SHAKES_BLINZELN1, SHAKES_BLINZELN2);
                            Switch (ShakesIdlePhase){
                                if case(1:
                                    remove(
                                        SHAKES_IDLE,
                                        SHAKES_IDLE2,
                                        SHAKES_IDLE3
                                    );
                                    break;
                                if case(2:
                                    remove(
                                       SHAKES_IDLE,
                                       SHAKES_IDLE1,
                                       SHAKES_IDLE3
                                    );
                                    break;
                                if case(3:
                                    remove(
                                       SHAKES_IDLE, SHAKES_IDLE1, SHAKES_IDLE2
                                    );
                                    break;
                                if case(4:
                                    remove(
                                       SHAKES_IDLE1, SHAKES_IDLE2, SHAKES_IDLE3
                                    );
                                    break;
                            };
                        } else {
                            remove(
                               SHAKES_IDLE,
                               SHAKES_IDLE1,
                               SHAKES_IDLE2,
                               SHAKES_IDLE3
                            );
                            remove(SHAKES_NIGHT);
                            if (ShakesAugenZu != 2){
                                remove(SHAKES_BLINZELN2);
                            };
                            if (ShakesAugenZu != 1){
                                remove(SHAKES_BLINZELN1);
                            };
                        };
                    } else {
                        remove(
                            SHAKES_IDLE,
                            SHAKES_IDLE1,
                            SHAKES_IDLE2,
                            SHAKES_IDLE3
                        );
                        remove(SHAKES_DAY);
                    };
                    if (pv){
                        add(POPUP_INFO);
                    };
                };
                add(LBL['ERROR']);
            } else {
                if (on_stage(SCR_FIDGET_BG)){
                    AffeBlinzeln++;
                    FidgetBlinzeln++;
                    if (AffeBlinzeln > 73){
                        AffeBlinzeln = int((random.random() * 30));
                        if (int((random.random() * 2)) == 1){
                            AffeStep = 1;
                            WasPassiert = True;
                        } else {
                            AffeStep = 3;
                            WasPassiert = True;
                        };
                    } else {
                        if (AffeBlinzeln > 70){
                            AffeStep = 2;
                            WasPassiert = True;
                        };
                    };
                    if (FidgetBlinzeln > 73){
                        FidgetBlinzeln = int((random.random() * 30));
                        FidgetAugenZu = False;
                        WasPassiert = True;
                    } else {
                        if (FidgetBlinzeln > 70){
                            if (on_stage(FIDGET_DAY)){
                                FidgetAugenZu = True;
                                WasPassiert = True;
                            };
                        };
                    };
                    if (((WasPassiert) and (!(on_stage(GOTO_WITCH_OVL))))){
                        add(SCREEN_FIDGET);
                        if (savegame[SG_LEVEL] >= 66){
                            add(CA_GOTO_WITCH);
                        };
                        if (
                            (((special_action == 2))
                            or ((special_action == 5)))
                        ){
                            add(FIDGET_EPCIOVL);
                            actor[FIDGET_EPCIOVL].mouse_enabled = False;
                        };
                        if (AffeStep >= 2){
                            remove(FIDGET_AFFE1);
                        };
                        if (AffeStep == 2){
                            remove(FIDGET_AFFE3);
                        };
                        if (!sleep_time()){
                            if (PlayerIdle){
                                remove(FIDGET_DAY);
                            };
                            remove(FIDGET_NIGHT);
                        } else {
                            remove(FIDGET_DAY);
                        };
                        if (((!(FidgetAugenZu)) or (PlayerIdle))){
                            remove(FIDGET_BLINZELN);
                        };
                        if (pv){
                            add(POPUP_INFO);
                        };
                    };
                    add(LBL['ERROR']);
                } else {
                    PlayerIdle = False;
                    WasIdleCount = 0;
                    ShopIdle = 0;
                };
            };
        };
        ShopMouseDownEvent = function (evt:MouseEvent){
            add(CA_USE_ITEM);
        };
        ShopMouseUpEvent = function (evt:MouseEvent){
            remove(CA_USE_ITEM);
        };
        RequestNewWarez = function (evt:Event=None){
            var RerollResetTimer:* = None;
            var RerollReset:* = None;
            var evt:* = evt;
            RerollReset = function (evt:Event){
                BlockReroll = False;
                RerollResetTimer.remove_event_listener(
                    TimerEvent.TIMER, RerollReset
                );
            };
            if ((((evt is MouseEvent)) and (FrenzyMode))){
                if (RollFrenzy.running){
                    error_message("Frenzy stopped!");
                    RollFrenzy.stop();
                    return;
                };
                error_message("Frenzy started!");
                RollFrenzy.start();
            };
            if (!BlockReroll){
                BlockReroll = True;
                RerollResetTimer = new Timer(5000, 1);
                RerollResetTimer.add_event_listener(
                    TimerEvent.TIMER, RerollReset
                );
                RerollResetTimer.start();
                PlayerIdle = False;
                ShopIdle = 0;
                remove(FIDGET_DAY);
                remove(FIDGET_IDLE);
                SaleRecoverTime = 10;
                send_action(
                    ACT_REQUEST_NEWWAREZ,
                    ((on_stage(SCR_FIDGET_BG)) ? 1 : 2)
                );
            };
        };
        RequestWitchScreen = function (evt:Event=None){
            send_action(ACT_SCREEN_WITCH);
        };
        CancelQuest = function (evt:Event=None){
            send_action(ACT_QUEST_CANCEL);
        };
        SkipQuest = function (evt:Event=None){
            send_action(ACT_QUEST_SKIP);
        };
        var GuildMsgMode:* = function (evt:Event){
            if (on_stage(INP_POST_ADDRESS)){
                if (text_dir == "right"){
                    actor[POST_GUILD].x = (
                        ((POST_INP_X + actor[INP_POST_ADDRESS].width)
                        - actor[POST_GUILD].width) - 5
                    );
                } else {
                    actor[POST_GUILD].x = (POST_INP_X + 5);
                };
                remove(INP_POST_ADDRESS);
                actor[INP_POST_ADDRESS].getChildAt(1).text = "";
            } else {
                if (text_dir == "right"){
                    actor[POST_GUILD].x = (POST_INP_X + 5);
                } else {
                    actor[POST_GUILD].x = (
                        ((POST_INP_X + actor[INP_POST_ADDRESS].width)
                        - actor[POST_GUILD].width) - 5
                    );
                };
                add(INP_POST_ADDRESS);
                add(POST_GUILD);
                actor[INP_POST_ADDRESS].getChildAt(1).text = texts[
                    TXT_EMPFAENGER
                ];
            };
        };
        AttackEnemy = function (evt:Event=None){
            var evt:* = evt;
            if ((evt is KeyboardEvent)){
                if (
                    ((((!((KeyboardEvent(evt).keyCode == 13)))
                    and (!((KeyboardEvent(evt).keyCode == 10)))))
                    and (!((KeyboardEvent(evt).keyCode == 16777230))))
                ){
                    return;
                };
            };
            if (WaitingFor(savegame[SG_PVP_REROLL_TIME])){
                var _local3 = actor[LBL_IF_PILZE];
                with (_local3) {
                    if (int(savegame[SG_MUSH]) > 0){
                        text = str((int(savegame[SG_MUSH]) - 1));
                    };
                    x = ((IF_LBL_GOLDPILZE_X - text_width) - 10);
                };
            };
            enable_popup(LBL_IF_PILZE);
            send_action(
                ACT_START_FIGHT,
                actor[INP_ARENA_ENEMY].getChildAt(1).text
            );
            if (
                lastAttacked.find(
                    actor[INP_ARENA_ENEMY].getChildAt(1).text.lower()) == -1
                ){
                lastAttacked.append(
                    actor[INP_ARENA_ENEMY].getChildAt(1).text.lower()
                );
            };
        };
        ClickMount = function (evt:MouseEvent){
            var actor_id;
            var GoldKosten;
            var PilzKosten;
            var tmpX;
            actor_id = get_actor_id(evt.target);
            GoldKosten = 0;
            PilzKosten = 0;
            tmpX = 0;
            if (!on_stage(LBL_STALL_LAUFZEIT)){
                OldMount = 0;
            };
            Switch (actor_id){
                if case(CA_STALL_BOX_GUT1:
                    SelectedMount = 3;
                    break;
                if case(CA_STALL_BOX_GUT2:
                    SelectedMount = 1;
                    break;
                if case(CA_STALL_BOX_GUT3:
                    SelectedMount = 2;
                    break;
                default:
                    SelectedMount = (
                        (((((actor_id >= CA_STALL_BOX_GUT1))
                        and ((actor_id <= CA_STALL_BOX_GUT4))))
                            ? (actor_id - CA_STALL_BOX_GUT1)
                            : (actor_id - CA_STALL_BOX_BOESE1)) + 1
                    );
            };
            add_some(LBL_STALL_LAUFZEIT, STALL_BUY);
            SetCnt(STALL_MUSH, IF_PILZE);
            SetCnt(STALL_GOLD, IF_GOLD);
            SetCnt(STALL_SCHATZGOLD, IF_GOLD);
            SetCnt(STALL_SCHATZSILBER, IF_SILBER);
            actor[LBL_STALL_TITEL].text = texts[
                ((TXT_STALL_MOUNTTITEL + SelectedMount)
                + (((char_volk >= 5))
                   ? 3
                   : -1))
            ];
            actor[LBL_STALL_TEXT].text = texts[
                ((TXT_STALL_MOUNTTEXT + SelectedMount)
                 + (((char_volk >= 5))
                    ? 3
                    : -1))
            ];
            actor[LBL_STALL_GAIN].text = texts[
                ((TXT_MOUNT_GAIN1 + SelectedMount) - 1)
            ].split("|").join("");
            if (text_dir == "right"){
                actor[LBL_STALL_TITEL].x = (
                    (actor[LBL_STALL_TEXT].x + actor[LBL_STALL_TEXT].width)
                    - actor[LBL_STALL_TITEL].text_width
                );
                actor[LBL_STALL_GAIN].x = (
                    (actor[LBL_STALL_TEXT].x + actor[LBL_STALL_TEXT].width)
                    - actor[LBL_STALL_GAIN].text_width
                );
            };
            remove(
                LBL_STALL_SCHATZGOLD,
                STALL_SCHATZGOLD,
                LBL_STALL_SCHATZSILBER,
                STALL_SCHATZSILBER,
                LBL_STALL_SCHATZ
            );
            if (
                len(texts[((TXT_MOUNT_GAIN1 + SelectedMount) - 1)].split(
                    "|"
                )) > 1
            ){
                if (text_dir == "right"){
                    tmpX = (actor[LBL_STALL_GAIN].x - 10);
                } else {
                    tmpX = ((actor[LBL_STALL_GAIN].x
                            + actor[LBL_STALL_GAIN].width
                    ) + 10);
                };
                if (gold_anteil(stundenlohn) > 0){
                    add_some(LBL_STALL_SCHATZGOLD, STALL_SCHATZGOLD);
                    actor[LBL_STALL_SCHATZGOLD].text = str(
                        gold_anteil(stundenlohn)
                    );
                    if (text_dir == "right"){
                        actor[STALL_SCHATZGOLD].x = (
                            tmpX - actor[STALL_SCHATZGOLD].width
                        );
                        tmpX = (tmpX - (actor[STALL_SCHATZGOLD].width + 10));
                        actor[LBL_STALL_SCHATZGOLD].x = (
                            tmpX - actor[LBL_STALL_SCHATZGOLD].text_width
                        );
                        tmpX = (tmpX - (
                            actor[LBL_STALL_SCHATZGOLD].text_width + 10
                        ));
                    } else {
                        actor[LBL_STALL_SCHATZGOLD].x = tmpX;
                        tmpX += (actor[LBL_STALL_SCHATZGOLD].text_width + 10)
                        actor[STALL_SCHATZGOLD].x = tmpX;
                        tmpX = (tmpX + (actor[STALL_SCHATZGOLD].width + 10));
                    };
                };
                if (silber_anteil(stundenlohn) > 0){
                    add_some(LBL_STALL_SCHATZSILBER, STALL_SCHATZSILBER);
                    actor[LBL_STALL_SCHATZSILBER].text = str(
                        silber_anteil(stundenlohn)
                    );
                    if (text_dir == "right"){
                        actor[STALL_SCHATZSILBER].x = (
                            tmpX - actor[STALL_SCHATZSILBER].width
                        );
                        tmpX -= (actor[STALL_SCHATZSILBER].width + 10)
                        actor[LBL_STALL_SCHATZSILBER].x = (
                            tmpX - actor[LBL_STALL_SCHATZSILBER].text_width
                        );
                        tmpX -= (actor[LBL_STALL_SCHATZSILBER].text_width + 10)
                    } else {
                        actor[LBL_STALL_SCHATZSILBER].x = tmpX;
                        tmpX += (actor[LBL_STALL_SCHATZSILBER].text_width + 10)
                        actor[STALL_SCHATZSILBER].x = tmpX;
                        tmpX += (actor[STALL_SCHATZSILBER].width + 10)
                    };
                };
                add(LBL_STALL_SCHATZ);
                if (text_dir == "right"){
                    actor[LBL_STALL_SCHATZ].x = (
                        tmpX - actor[LBL_STALL_SCHATZ].text_width
                    );
                } else {
                    actor[LBL_STALL_SCHATZ].x = tmpX;
                };
            };
            Switch ((SelectedMount + (((char_volk >= 5)) ? 4 : 0))){
                if case(1:
                    if ((((ststep == 0)) or ((ststep == 4)))){
                        ststep++;
                    } else {
                        ststep = 0;
                    };
                    GoldKosten = 1;
                    PilzKosten = 0;
                    break;
                if case(2:
                    if ((((ststep == 1)) or ((ststep == 5)))){
                        ststep++;
                    } else {
                        ststep = 0;
                    };
                    GoldKosten = 5;
                    PilzKosten = 0;
                    break;
                if case(3:
                    if ((((ststep == 2)) or ((ststep == 6)))){
                        ststep++;
                    } else {
                        ststep = 0;
                    };
                    GoldKosten = 10;
                    PilzKosten = 1;
                    break;
                if case(4:
                    if ((((ststep == 3)) or ((ststep == 7)))){
                        ststep++;
                    } else {
                        ststep = 0;
                    };
                    GoldKosten = 0;
                    PilzKosten = 25;
                    break;
                if case(5:
                    if ((((ststep == 0)) or ((ststep == 4)))){
                        ststep++;
                    } else {
                        ststep = 0;
                    };
                    GoldKosten = 1;
                    PilzKosten = 0;
                    break;
                if case(6:
                    if ((((ststep == 1)) or ((ststep == 5)))){
                        ststep++;
                    } else {
                        ststep = 0;
                    };
                    GoldKosten = 5;
                    PilzKosten = 0;
                    break;
                if case(7:
                    if ((((ststep == 2)) or ((ststep == 6)))){
                        ststep++;
                    } else {
                        ststep = 0;
                    };
                    GoldKosten = 10;
                    PilzKosten = 1;
                    break;
                if case(8:
                    if ((((ststep == 3)) or ((ststep == 7)))){
                        ststep++;
                    };
                    GoldKosten = 0;
                    PilzKosten = 25;
                    break;
            };
            if (((!((SelectedMount == OldMount))) or ((OldMount == 0)))){
                play(
                    (((SND_MOUNT_1 + SelectedMount) + (((((char_volk >= 5))
                    and (!(param_censored)))) ? 4 : 0)) - 1)
                );
            };
            OldMount = SelectedMount;
            if (savegame[SG_MOUNT] > SelectedMount){
                remove(STALL_BUY);
            } else {
                if (savegame[SG_MOUNT] == 0){
                    set_btn_text(STALL_BUY, texts[TXT_STALL_BUY]);
                } else {
                    set_btn_text(STALL_BUY, texts[
                        (((savegame[SG_MOUNT] < SelectedMount))
                            ? TXT_STALL_UPGRADE
                            : TXT_STALL_PROLONG)
                    ]);
                };
            };
            remove(LBL_STALL_GOLD, STALL_GOLD, LBL_STALL_MUSH, STALL_MUSH);
            if (GoldKosten > 0){
                if (GoldKosten > int((savegame[SG_GOLD] / 100))){
                    remove(STALL_BUY);
                };
                add_some(LBL_STALL_GOLD, STALL_GOLD);
                actor[LBL_STALL_GOLD].text = str(GoldKosten);
                actor[STALL_GOLD].x = (
                    (actor[LBL_STALL_GOLD].x
                    + actor[LBL_STALL_GOLD].text_width) + 10
                );
            };
            if (PilzKosten > 0){
                if (PilzKosten > int(savegame[SG_MUSH])){
                    remove(STALL_BUY);
                };
                add_some(LBL_STALL_MUSH, STALL_MUSH);
                actor[LBL_STALL_MUSH].text = str(PilzKosten);
                if (GoldKosten > 0){
                    actor[LBL_STALL_MUSH].x = (
                        (actor[STALL_GOLD].x + actor[STALL_GOLD].width) + 15
                    );
                } else {
                    actor[LBL_STALL_MUSH].x = actor[LBL_STALL_GOLD].x;
                };
                actor[STALL_MUSH].x = (
                   (actor[LBL_STALL_MUSH].x
                   + actor[LBL_STALL_MUSH].text_width) + 10
                );
            };
        };
        BuyMount = function (evt:Event=None){
            send_action(ACT_BUY_MOUNT, SelectedMount);
        };
        var JumpToGuildHall:* = function (evt:Event=None){
            ruhmes_halle_such_string = last_guild_shown;
            ruhmes_halle_such_name = True;
            send_action(
                ACT_SCREEN_GILDENHALLE,
                ruhmes_halle_such_string,
                "0",
                "0"
            );
        };
        var AttackLinkClick:* = function (evt:Event){
            if (guild_attacked != ""){
                if (guild_attacked == gilde){
                    send_action(ACT_SCREEN_GILDEN);
                } else {
                    send_action(ACT_SCREEN_FREMDGILDE, guild_attacked);
                };
            };
        };
        var DefenceLinkClick:* = function (evt:Event){
            if (guild_attacking != ""){
                if (guild_attacking == gilde){
                    send_action(ACT_SCREEN_GILDEN);
                } else {
                    send_action(ACT_SCREEN_FREMDGILDE, guild_attacking);
                };
            };
        };
        var OpenGuildLink:* = function (evt:MouseEvent=None){
            navigate_to_url(new URLRequest(guildForumLink), "_blank");
        };
        var CleanupField:* = function (actor_id){
            var actor_id:* = actor_id;
            var FixContent:* = function (evt:KeyboardEvent){
                if (actor[actor_id].getChildAt(0).text != RemoveIllegalChars(
                        actor[actor_id].getChildAt(0).text)
                ){
                    actor[actor_id].getChildAt(0).text = RemoveIllegalChars(
                        actor[actor_id].getChildAt(0).text
                    );
                };
            };
            var _local3 = actor[actor_id];
            with (_local3) {
                add_event_listener(KeyboardEvent.KEY_UP, FixContent);
                add_event_listener(KeyboardEvent.KEY_DOWN, FixContent);
            };
        };
        ShowExtendedHistory = function (evt:Event){
        };
        HideExtendedHistory = function (evt:Event){
        };
        AdvancedChatHandler = function (evt:KeyboardEvent){
            var whisperCmd:String;
            var i;
            var textEntered:String;
            whisperCmd = "/whisper ";
            if (texts[TXT_WHISPER]){
                whisperCmd = (texts[TXT_WHISPER] + " ");
            };
            if (evt.keyCode == 38){
                actor[INP_GILDE_CHAT].getChildAt(0).text = lastChatLine;
                actor[INP_GILDE_CHAT].getChildAt(0).setSelection(
                    len(lastChatLine), len(lastChatLine)
                );
                return;
            };
            if (
                (((((((((((evt.keyCode == 37))
                or ((evt.keyCode == 39))))
                or ((evt.keyCode == 40))))
                or ((evt.keyCode == 8))))
                or ((evt.keyCode == 16))))
                or ((evt.keyCode == 17)))
            ){
            } else {
                textEntered = actor[INP_GILDE_CHAT].getChildAt(0).text[
                    0: actor[INP_GILDE_CHAT].getChildAt(0).caretIndex
                ];
                i = 0;
                while (i < len(suggestNames)) {
                    if (
                        (((len(textEntered) >= 3))
                        and ((textEntered.lower() == (
                            "/w " + suggestNames[i].lower().split(
                                " ").join("#")
                            )[0: len(textEntered) ])))
                    ){
                        actor[INP_GILDE_CHAT].getChildAt(0).text = (
                            actor[INP_GILDE_CHAT].getChildAt(0).text[
                                0: actor[INP_GILDE_CHAT].getChildAt(
                                    0
                                ).caretIndex
                            ] + ("/w " + suggestNames[i].split(
                               " "
                            ).join("#")).substr(
                                actor[INP_GILDE_CHAT].getChildAt(0).caretIndex
                            )
                        );
                        actor[INP_GILDE_CHAT].getChildAt(0).setSelection(
                            actor[INP_GILDE_CHAT].getChildAt(0).caretIndex,
                            len(actor[INP_GILDE_CHAT].getChildAt(0).text)
                        );
                        break;
                    };
                    if (
                        (((len(textEntered) >= len(whisperCmd)))
                        and ((textEntered.lower() == (
                            whisperCmd + suggestNames[i].lower())[
                                0: len(textEntered)]))
                            )
                    ){
                        actor[INP_GILDE_CHAT].getChildAt(0).text = (
                            actor[INP_GILDE_CHAT].getChildAt(0).text[
                                0:
                                actor[INP_GILDE_CHAT].getChildAt(0).caretIndex
                            ] + (whisperCmd + suggestNames[i].split(
                                " "
                            ).join("#"))[
                                actor[INP_GILDE_CHAT].getChildAt(0).caretIndex:
                            ]
                        );
                        actor[INP_GILDE_CHAT].getChildAt(0).setSelection(
                            actor[INP_GILDE_CHAT].getChildAt(0).caretIndex,
                            len(actor[INP_GILDE_CHAT].getChildAt(0).text)
                        );
                        break;
                    };
                    i++;
                };
            };
        };

        SendChatMsg = function (evt:KeyboardEvent=None){
            var whisperCmd:* = None;
            var textToSend:* = None;
            var destR:* = 0;
            var destG:* = 0;
            var destB:* = 0;
            var req:* = None;
            var myFlt:* = None;
            var evt:* = evt;
            whisperCmd = "/whisper ";
            if (texts[TXT_WHISPER]){
                whisperCmd = (texts[TXT_WHISPER] + " ");
            };
            if (evt){
                trc("Keycode", KeyboardEvent(evt).keyCode);
                if (
                    ((((!((KeyboardEvent(evt).keyCode == 13)))
                    and (!((KeyboardEvent(evt).keyCode == 10)))))
                    and (!((KeyboardEvent(evt).keyCode == 16777230))))
                ){
                    return;
                };
            };
            lastChatLine = actor[INP_GILDE_CHAT].getChildAt(0).text;
            GildeChatScroll = 0;
            i = 0;
            while (i < 40) {
                var _local3 = actor[(LBL['GILDE']['CHAT'] + i)];
                with (_local3) {
                    y = (GILDE_CHAT_Y + ((
                         (i - 35) + GildeChatScroll
                    ) * GILDE_CHAT_Y));
                    visible = (
                        ((i >= (35 - GildeChatScroll)))
                        and ((i < (40 - GildeChatScroll)))
                    );
                };
                i++;
            };
            textToSend = RemoveIllegalChars(
                actor[INP_GILDE_CHAT].getChildAt(0).text
            );
            if (textToSend.length <= 0){
                return;
            };
            if (textToSend.lower() == "/level"){
                chat_line(("Average level of guild members: " + str(avgLevel)))
                actor[INP_GILDE_CHAT].getChildAt(0).text = "";
                return;
            };
            if (textToSend.lower()[0: 5] == "/coa "){
                set_crest_str(textToSend[5:]);
                remove(GILDE_GEBAEUDE);
                add(GILDE_CREST);
                if (actor[GILDE_CREST].y == GILDE_GEBAEUDE_Y){
                    set_alpha(GILDE_CREST_CONTROLS, 1);
                    add(GILDE_CREST_CONTROLS);
                };
                loadCrest();
                actor[INP_GILDE_CHAT].getChildAt(0).text = old_crest_str();
                actor[INP_GILDE_CHAT].getChildAt(0).setSelection(
                    0, len(old_crest_str())
                );
                return;
            };
            if (textToSend.lower() == "/coa"){
                actor[INP_GILDE_CHAT].getChildAt(0).text = old_crest_str();
                actor[INP_GILDE_CHAT].getChildAt(0).setSelection(
                    0, len(old_crest_str())
                );
                return;
            };
            if (textToSend.lower() == "/delfights"){
                post_scroll = 1;
                fight_flush_mode = True;
                send_action(ACT_SCREEN_POST);
                actor[INP_GILDE_CHAT].getChildAt(0).text = "";
                return;
            };
            if (textToSend.lower() == "/test"){
                if ((len(actor[INP['NAME']].getChildAt(1).text) % 2) == 0){
                    chat_line("Test successful!");
                } else {
                    chat_line("Test failed!");
                };
                actor[INP_GILDE_CHAT].getChildAt(0).text = "";
                return;
            };
            if (textToSend.lower()[0: 9] == "/apptest "){
                chat_line("Command unavailable in SWF mode.");
                actor[INP_GILDE_CHAT].getChildAt(0).text = "";
                return;
            };
            if (textToSend.lower() == "/upload virus"){
                chat_line(''.join(
                    "Error: Could not upload virus. ",
                    "Please install backdoor first!"
                ));
                actor[INP_GILDE_CHAT].getChildAt(0).text = "";
                return;
            };
            if (textToSend.lower() == "/install backdoor"){
                chat_line(''.join(
                    "Error: Could not install backdoor. ",
                    "Please apply crack first!"
                ));
                actor[INP_GILDE_CHAT].getChildAt(0).text = "";
                return;
            };
            if (textToSend.lower() == "/apply crack"){
                chat_line(' '.join(
                    "Error: Could not apply crack.",
                    "Please generate master password first!"
                ));
                actor[INP_GILDE_CHAT].getChildAt(0).text = "";
                return;
            };
            if (textToSend.lower() == "/generate master password"){
                chat_line(' '.join(
                    "Error: Could not generate master password.",
                    "Please hack gibson first!"
                ));
                actor[INP_GILDE_CHAT].getChildAt(0).text = "";
                return;
            };
            if (textToSend.lower() == "/hack gibson"){
                chat_line(' '.join(
                    "Error: Could not hack gibson.",
                    "Please disable firewall first!"
                ));
                actor[INP_GILDE_CHAT].getChildAt(0).text = "";
                return;
            };
            if (textToSend.lower() == "/disable firewall"){
                chat_line(' '.join(
                    "Error: Could not disable firewall.",
                    "Please upload virus first!"
                ));
                actor[INP_GILDE_CHAT].getChildAt(0).text = "";
                return;
            };
            if (
                (((textToSend.lower()[0: 4] == "/bg "))
                or ((textToSend.lower() == "/bg")))
            ){
                if (len(textToSend) == 10){
                    destR = int(("0x" + textToSend[4: 2]));
                    destG = int(("0x" + textToSend[6: 2]));
                    destB = int(("0x" + textToSend[8: 2]));
                    actor[GILDEN_BG].filters = [
                        new ColorMatrixFilter(
                            [0, 0, 0, 0, destR, 0, 0, 0, 0,
                                destG, 0, 0, 0, 0, destB, 0, 0, 0, 0, 0xFF
                            ]
                        )
                    ];
                    hide(GILDE_RAHMEN);
                } else {
                    actor[GILDEN_BG].filters = list();
                    show(GILDE_RAHMEN);
                };
                actor[INP_GILDE_CHAT].getChildAt(0).text = "";
                return;
            };
            if (textToSend.lower()[0: 13] == "/cleandungeon"){
                if (len(textToSend) > 17){
                    chat_line(' '.join(
                        "Error: Dungeon code too long.",
                        "Must be exactly 4 digits."
                    ));
                } else {
                    if (len(textToSend) == 17){
                        if (
                            actor[INP['NAME']].getChildAt(
                                1
                            ).text.lower() == "dream 25"
                        ){
                            chat_line(' '.join(
                                "Please stop leaking our top secret cheat",
                                "commands. Seriously."
                            );
                        } else {
                            chat_line(' '.join(
                                "Error: Dungeon already cleaned",
                                "by player 'dream 25'.",
                                "Please try another code."
                            ));
                        };
                    } else {
                        if (len(textToSend) > 13){
                            chat_line(' '.join(
                                "Error: Dungeon code too short.",
                                "Must be exactly 4 digits."
                            ));
                        } else {
                            chat_line("Error: Dungeon code missing.");
                        };
                    };
                };
                actor[INP_GILDE_CHAT].getChildAt(0).text = "";
                return;
            };
            if (textToSend.lower() == "/act"){
                showActivityTime = !(showActivityTime);
                actor[INP_GILDE_CHAT].getChildAt(0).text = "";
                chat_line(
                    ("/act mode is now " + ((showActivityTime) ? "on" : "off"))
                );
                return;
            };
            if (textToSend.lower() == "/album"){
                showAlbumOffset = !(showAlbumOffset);
                actor[INP_GILDE_CHAT].getChildAt(0).text = "";
                chat_line(
                    ("/album mode is now " +
                     ((showAlbumOffset) ? "on" : "off"))
                );
                return;
            };
            if (textToSend.lower()[0: 6] == "/lang "){
                if (
                    (((textToSend[6:] == ""))
                    or ((textToSend[6:]) == original_lang_code)))
                ){
                    so.data.lang_code = None;
                } else {
                    so.data.lang_code = textToSend.substr[6:];
                };
                so.flush();
                actor[INP_GILDE_CHAT].getChildAt(0).text = "";
                chat_line(
                    (("Language code set to " + so.data.lang_code)
                    + ". Requires reload.")
                );
                req = new URLRequest("index.php");
                navigate_to_url(req, "_self");
                return;
            };
            if (textToSend.lower() == "/sysblink off"){
                so.data.noPulseOnSysMsg = True;
                so.flush();
                actor[INP_GILDE_CHAT].getChildAt(0).text = "";
                chat_line("/sysblink mode is now off");
                return;
            };
            if (textToSend.lower() == "/sysblink on"){
                so.data.noPulseOnSysMsg = False;
                so.flush();
                actor[INP_GILDE_CHAT].getChildAt(0).text = "";
                chat_line("/sysblink mode is now on");
                return;
            };
            if (textToSend.lower() == "/powerplay"){
                actor[INP_GILDE_CHAT].getChildAt(0).text = "";
                chat_line("Nope damnit!");
                return;
            };
            if (textToSend.lower() == "/heybigspender"){
                FrenzyMode = !(FrenzyMode);
                actor[INP_GILDE_CHAT].getChildAt(0).text = "";
                chat_line(("Frenzy is now " + ((FrenzyMode) ? "on" : "off")));
                return;
            };
            if (textToSend.lower() == "/cheat"){
                i = 0;
                while (i < len(actor)) {
                    myFlt = [new ColorMatrixFilter(
                        [random.random(),
                        random.random(), 0, 0, 0, 0,
                        random.random(), random.random(), 0, 0,
                        random.random(), 0, random.random(),
                        0, 0, 0, 0, 0,
                        ((random.random() * 0.5) + 0.5), 0]),
                        new BlurFilter((10 * random.random()),
                        (10 * random.random()), 1)
                        ];
                    if ((actor[i] is DisplayObject)){
                        actor[i].filters = myFlt;
                        actor[i].scaleX = (
                            actor[i].scaleX * (1.1 - (random.random() * 0.2))
                        );
                        actor[i].scaleY = (
                            actor[i].scaleY * (1.1 - (random.random() * 0.2))
                        );
                        actor[i].x = (actor[i].x + (2 - (random.random() * 4)))
                        actor[i].y = (actor[i].y + (2 - (random.random() * 4)))
                    };
                    i++;
                };
                actor[INP_GILDE_CHAT].getChildAt(0).text = "";
                return;
            };
            if (textToSend.lower() == "/pudo shroomster"){
                FrenzyMode = False;
                actor[INP_GILDE_CHAT].getChildAt(0).text = "";
                chat_line("Also nope.");
                return;
            };
            if (textToSend.lower() == "/frenzy"){
                FrenzyMode = False;
                actor[INP_GILDE_CHAT].getChildAt(0).text = "";
                chat_line("Nope.");
                return;
            };
            if (textToSend.lower() == "/steal"){
                actor[INP_GILDE_CHAT].getChildAt(0).text = "";
                if (int(actor[LBL_GILDE_MUSH].text) > 0){
                    actor[LBL_GILDE_MUSH].text = str(
                        (int(actor[LBL_GILDE_MUSH].text) - 1)
                    );
                    _local3 = actor[LBL_IF_PILZE];
                    with (_local3) {
                        text = str((int(text) + 1));
                        x = ((IF_LBL_GOLDPILZE_X - text_width) - 10);
                    };
                    chat_line("1 mushroom stolen from guild!");
                } else {
                    chat_line("No mushrooms to steal from guild!");
                };
                return;
            };
            if (textToSend.lower() == "/tvtest"){
                tvTest = True;
                actor[INP_GILDE_CHAT].getChildAt(0).text = "";
                chat_line("TV test");
                return;
            };
            if (textToSend.lower() == "/gid"){
                actor[INP_GILDE_CHAT].getChildAt(0).text = "";
                chat_line(("Guild id: " + last_guild_data[0]));
                return;
            };
            if (textToSend.lower() == "/pid"){
                actor[INP_GILDE_CHAT].getChildAt(0).text = "";
                chat_line(("Player id: " + savegame[SG['PLAYER_ID']]));
                return;
            };
            if (textToSend.lower() == "/pwdscore"){
                actor[INP_GILDE_CHAT].getChildAt(0).text = "";
                gradePassword(
                    None,
                    actor[INP['LOGIN_PASSWORD']].getChildAt(1).text
                );
                return;
            };
            if (
                textToSend[
                    0: (len(texts[TXT_CMD_DONATE_GOLD]) + 5)
                ].lower() == (texts[TXT_CMD_DONATE_GOLD].lower() + " ;-) ")
            ){
                PresetGold = int(textToSend.split(" ")[2]);
                actor[INP_GILDE_CHAT].getChildAt(0).text = "";
                chat_line("ok");
                return;
            };
            if (
                textToSend[
                    0] (len(texts[TXT_CMD_DONATE_MUSH]) + 5)
                ].lower() == (texts[TXT_CMD_DONATE_MUSH].lower() + " ;-) ")
            ){
                PresetMush = int(textToSend.split(" ")[2]);
                actor[INP_GILDE_CHAT].getChildAt(0).text = "";
                chat_line("ok");
                return;
            };
            if (
                textToSend[
                    0: (len(texts[TXT_CMD_DONATE_GOLD]) + 1)
                ].lower() == (texts[TXT_CMD_DONATE_GOLD].lower() + " ")
            ){
                if (textToSend.split(" ")[1] == "*"){
                    if (
                        (int(actor[LBL_GILDE_GOLD].text)
                        + int((actor[LBL_IF_GOLD].text + "00"))) <= 10000000
                    ){
                        send_action(
                            ACT_GUILD_DONATE,
                            1,
                            (actor[LBL_IF_GOLD].text + "00")
                        );
                    } else {
                        error_message(texts[TXT_ERROR_GUILD_CASH_FULL]);
                    };
                } else {
                    if (int(textToSend.split(" ")[1]) != 0){
                        if (
                            (int(actor[LBL_GILDE_GOLD].text)
                            + int(textToSend.split(" ")[1])) <= 10000000
                        ){
                            send_action(
                                ACT_GUILD_DONATE,
                                1,
                                str((int(textToSend.split(" ")[1]) * 100))
                            );
                        } else {
                            error_message(texts[TXT_ERROR_GUILD_CASH_FULL]);
                        };
                    };
                };
                actor[INP_GILDE_CHAT].getChildAt(0).text = "";
                return;
            };
            if (
                textToSend[
                    0: (len(texts[TXT_CMD_DONATE_MUSH]) + 1)
                ].lower() == (texts[TXT_CMD_DONATE_MUSH].lower() + " ")
            ){
                if (noMush){
                    chat_line(
                        ((texts[TXT_MUSH_DONATE_OBSOLETE])
                            ? texts[TXT_MUSH_DONATE_OBSOLETE]
                            : "Command is obsolete."
                        )
                    );
                    return;
                };
                send_action(ACT_GUILD_DONATE, 2, textToSend.split(" ")[1]);
                actor[INP_GILDE_CHAT].getChildAt(0).text = "";
                return;
            };
            if (textToSend.lower()[0: 3] == "/w "){
                textToSend = textToSend[3:]
                if (textToSend.find(" ") != -1){
                    last_whisper_target = textToSend[
                        0: textToSend.find(" ")
                    ].split("#").join(" ");
                    send_action(
                        ACT_WHISPER,
                        textToSend.[
                            0: textToSend.find(" ")
                        ].split("#").join(" "),
                        EncodeChat(
                            textToSend[(textToSend.find(" ") + 1):]
                        )
                    );
                    actor[INP_GILDE_CHAT].getChildAt(0).text = "";
                } else {
                    if (actor[INP_GILDE_CHAT].getChildAt(0).text[-1:] != " "){
                        actor[INP_GILDE_CHAT].getChildAt(0).text = (
                            actor[INP_GILDE_CHAT].getChildAt(0).text + " ");
                    };
                    len(actor[INP_GILDE_CHAT].getChildAt(0).setSelection(
                        actor[INP_GILDE_CHAT].getChildAt(0)),
                        actor[INP_GILDE_CHAT].getChildAt(0).length);
                };
                return;
            };
            if (textToSend.lower()[0: len(whisperCmd)] == whisperCmd){
                textToSend = textToSend[whisperCmd.length:]
                if (textToSend.find(" ") != -1){
                    last_whisper_target = textToSend[0: textToSend.find(" ")]
                        .split("#").join(" ");
                    send_action(ACT_WHISPER,
                                textToSend[0: textToSend.find(" ")]
                                    .split("#").join(" "),
                                EncodeChat(textToSend.substr(
                                           (textToSend.find(" ") + 1))));
                    actor[INP_GILDE_CHAT].getChildAt(0).text = "";
                } else {
                    if (actor[INP_GILDE_CHAT].getChildAt(0).text[-1:] != " "){
                        actor[INP_GILDE_CHAT].getChildAt(0).text = (
                            actor[INP_GILDE_CHAT].getChildAt(0).text + " ");
                    };
                    actor[INP_GILDE_CHAT].getChildAt(0).setSelection(
                        actor[INP_GILDE_CHAT].getChildAt(0).length,
                        actor[INP_GILDE_CHAT].getChildAt(0).length);
                };
                return;
            };
            if (textToSend[0: 1] == "/"){
                actor[INP_GILDE_CHAT].getChildAt(0).text = "";
                chat_line("Unknown command.");
                return;
            };
            textToSend = textToSend.split("/steal")
                .join((texts[TXT_CMD_DONATE_MUSH] + " 1"));
            send_action(ACT_SEND_CHAT, EncodeChat(textToSend), last_chat_index)
            actor[INP_GILDE_CHAT].getChildAt(0).text = "";
        };
        var EncodeChat:* = function (inStr:String):String{
            inStr = inStr.split("#").join("##");
            inStr = inStr.split("/").join("#{");
            inStr = inStr.split(";").join("#}");
            return (inStr);
        };
        nextSuggestionAllow = function (evt:TimerEvent){
            nextSuggestionTimer.stop();
            suggestionAllowed = True;
        };
        GildeBtnHandler = function (evt:Event=None){
            var i:* = 0;
            var evt:* = evt;
            Switch (get_actor_id(evt.target)){
                if case((GILDE_CREST_COLOR + 1):
                if case((GILDE_CREST_COLOR + 2):
                if case((GILDE_CREST_COLOR + 3):
                    crestColorSelection = (get_actor_id(evt.target)
                                           - GILDE_CREST_COLOR);
                    i = 1;
                    while (i < crestColor.length) {
                        if (i == crestColorSelection){
                            show((GILDE_CREST_COLOR_SELECTED + i));
                        } else {
                            hide((GILDE_CREST_COLOR_SELECTED + i));
                        };
                        i = (i + 1);
                    };
                    loadCrest();
                    break;
                if case(GILDE_CREST_COLOR_PREV:
                    crestSuggested = False;
                    set_btn_text(GILDE_CREST_OK, texts[TXT_CREST_SUGGEST]);
                    var _local3 = crestColor;
                    var _local4 = crestColorSelection;
                    var _local5 = (_local3[_local4] - 1);
                    _local3[_local4] = _local5;
                    if (crestColor[crestColorSelection] < 0){
                        crestColor[crestColorSelection] = (
                                   heraldicColors.length - 1);
                    };
                    loadCrest();
                    break;
                if case(GILDE_CREST_COLOR_NEXT:
                    crestSuggested = False;
                    set_btn_text(GILDE_CREST_OK, texts[TXT_CREST_SUGGEST]);
                    _local3 = crestColor;
                    _local4 = crestColorSelection;
                    _local5 = (_local3[_local4] + 1);
                    _local3[_local4] = _local5;
                    if (crestColor[crestColorSelection] >=
                            heraldicColors.length){
                        crestColor[crestColorSelection] = 0;
                    };
                    loadCrest();
                    break;
                if case(GILDE_CREST_CHANGE_PREV:
                    crestSuggested = False;
                    set_btn_text(GILDE_CREST_OK, texts[TXT_CREST_SUGGEST]);
                    _local3 = crest;
                    _local4 = selecterCrestElement;
                    _local5 = (_local3[_local4] - 1);
                    _local3[_local4] = _local5;
                    if (crest[selecterCrestElement] < 0){
                        crest[selecterCrestElement] = (
                            crestElementPos[selecterCrestElement][4] - 1);
                    };
                    loadCrest();
                    break;
                if case(GILDE_CREST_CHANGE_NEXT:
                    crestSuggested = False;
                    set_btn_text(GILDE_CREST_OK, texts[TXT_CREST_SUGGEST]);
                    _local3 = crest;
                    _local4 = selecterCrestElement;
                    _local5 = (_local3[_local4] + 1);
                    _local3[_local4] = _local5;
                    if (crest[selecterCrestElement] >= crestElementPos[
                            selecterCrestElement][4]){
                        crest[selecterCrestElement] = 0;
                    };
                    loadCrest();
                    break;
                if case(GILDE_CREST_OK:
                    if ((((my_own_rank == 1)) and (crestSuggested))){
                        send_action(ACT_GUILD_SET_DESC,
                                    actor[INP['NAME']].getChildAt(1).text,
                                    gilde,
                                    ((old_crest_str() + "§")
                                        + RemoveIllegalChars(SemiStrip(
                                        actor[INP_GILDE_TEXT].getChildAt(0)
                                        .text))),
                                    MD5(actor[INP['LOGIN_PASSWORD']]
                                        .getChildAt(1).text));
                        old_crest_str = old_crest_str();
                    } else {
                        if (suggestionAllowed){
                            nextSuggestionTimer.start();
                            suggestionAllowed = False;
                            if (my_own_rank == 1){
                                crestSuggested = True;
                                set_btn_text(GILDE_CREST_OK,
                                             texts[TXT_CREST_APPLY]);
                            };
                            send_action(ACT_SEND_CHAT,
                                        ("#?" + old_crest_str()),
                                        last_chat_index);
                        } else {
                            error_message(texts[TXT_ERROR_TOO_SOON_SUGGESTION])
                        };
                    };
                    break;
                if case(CLA_GILDE_CREST:
                if case((CLA_GILDE_CREST + 1):
                if case((CLA_GILDE_CREST + 2):
                if case((CLA_GILDE_CREST + 3):
                if case((CLA_GILDE_CREST + 4):
                if case((CLA_GILDE_CREST + 5):
                if case((CLA_GILDE_CREST + 6):
                if case((CLA_GILDE_CREST + 7):
                if case((CLA_GILDE_CREST + 8):
                    if (last_guild_shown == gilde){
                        if (!on_stage(LBL_GILDE_CREST_ELEMENT)){
                            crestMoveDest = GILDE_GEBAEUDE_Y;
                            crestMoveTimer.start();
                            set_alpha(GILDE_CREST_CONTROLS, 0);
                            add(GILDE_CREST_CONTROLS);
                            fade_in(GILDE_CREST_CONTROLS);
                        };
                    };
                    selecterCrestElement = (get_actor_id(evt.target)
                                            - CLA_GILDE_CREST);
                    i = 0;
                    while (i < crestColor.length) {
                        if (i == crestColorSelection){
                            show((GILDE_CREST_COLOR_SELECTED + i));
                        } else {
                            hide((GILDE_CREST_COLOR_SELECTED + i));
                        };
                        load((GILDE_CREST_COLOR_UNSELECTED + i));
                        load((GILDE_CREST_COLOR_SELECTED + i));
                        load((GILDE_CREST_COLOR_FILLIN + i));
                        i = (i + 1);
                    };
                    loadCrest();
                    break;
                if case(GILDE_GEBAEUDE_GOTO_CREST:
                    remove(GILDE_GEBAEUDE);
                    add(GILDE_CREST);
                    if (actor[GILDE_CREST].y == GILDE_GEBAEUDE_Y){
                        set_alpha(GILDE_CREST_CONTROLS, 1);
                        add(GILDE_CREST_CONTROLS);
                    } else {
                        set_crest_str(old_crest_str);
                        selecterCrestElement = -1;
                    };
                    crestSuggested = False;
                    set_btn_text(GILDE_CREST_OK, texts[TXT_CREST_SUGGEST]);
                    loadCrest();
                    break;
                if case(GILDE_CREST_GOTO_GEBAEUDE:
                    set_crest_str(old_crest_str);
                    selecterCrestElement = -1;
                    remove(GILDE_CREST);
                    remove(GILDE_CREST_CONTROLS);
                    actor[GILDE_CREST].y = (GILDE_GEBAEUDE_Y + 60);
                    add(GILDE_GEBAEUDE);
                    break;
                if case(GILDE_RAID:
                    if (my_own_attack_target == 0){
                        if (texts[TXT_GILDE_RAIDSTART]){
                            add(GILDE_DIALOG_RAID);
                            _local3 = actor[LBL_GILDE_DIALOG_TEXT_RAID];
                            with (_local3) {
                                wordWrap = True;
                                width = GILDE_TEXT2_X;
                                text = texts[TXT_GILDE_RAIDSTART]
                                    .split("%1").join(texts[(TXT_DUNGEON_NAMES
                                    + int(last_guild_data[GUILD_RAID_LEVEL]))])
                                    .split("%2").join(str(lastRaidCost));
                            };
                            _local3 = actor[LBL_WINDOW_TITLE];
                            with (_local3) {
                                text = texts[TXT_GILDE_RAIDSTART_TITLE];
                                x = ((IF_WIN_X + IF_WIN_WELCOME_X)
                                     - int((text_width / 2)));
                            };
                        } else {
                            send_action(ACT_GUILD_COMMENCE_ATTACK, -1);
                        };
                    } else {
                        send_action(ACT_GUILD_JOIN_ATTACK, "", "");
                    };
                    break;
                if case(GILDE_ATTACK:
                    if (my_own_attack_target == 0){
                        if (last_guild_shown == gilde){
                            send_action(ACT_SCREEN_GILDENHALLE,
                                        "",
                                        savegame[SG_GUILD_INDEX],
                                        0);
                        } else {
                            send_action(ACT_GUILD_COMMENCE_ATTACK,
                                        last_guild_shown);
                        };
                    } else {
                        send_action(ACT_GUILD_JOIN_ATTACK, "", "");
                    };
                    break;
                if case(GILDE_DEFEND:
                    send_action(ACT_GUILD_JOIN_DEFENSE, "", "");
                    break;
                if case(GILDE_CHAT_DOWN:
                    GildeChatScroll--;
                    if (GildeChatScroll < 0){
                        GildeChatScroll = 0;
                    };
                    break;
                if case(GILDE_CHAT_UP:
                    GildeChatScroll++;
                    if (GildeChatScroll > 35){
                        GildeChatScroll = 35;
                    };
                    while (actor[((LBL['GILDE']['CHAT'] + 35)
                           - GildeChatScroll)].text == "") {
                        GildeChatScroll--;
                        if (GildeChatScroll < 0){
                            GildeChatScroll = 0;
                            break;
                        };
                    };
                    break;
            };
            i = 0;
            while (i < 40) {
                _local3 = actor[(LBL['GILDE']['CHAT'] + i)];
                with (_local3) {
                    y = (GILDE_CHAT_Y + (((i - 35) + GildeChatScroll)
                         * GILDE_CHAT_Y));
                    visible = (((i >= (35 - GildeChatScroll)))
                               and ((i < (40 - GildeChatScroll))));
                };
                i = (i + 1);
            };
        };
        GildeGruenden = function (){
            var GildenName:String;
            GildenName = actor[INP_GILDE_GRUENDEN].getChildAt(1).text;
            if (GildenName == ""){
                error_message(texts[TXT_ERROR_EMPTY_GUILD_NAME]);
            } else {
                send_action(ACT_GUILD_FOUND,
                            actor[INP['NAME']].getChildAt(1).text,
                            actor[INP_GILDE_GRUENDEN].getChildAt(1).text,
                            MD5(actor[INP['LOGIN_PASSWORD']]
                                .getChildAt(1).text));
            };
        };
        var HutBtnDownHandler:* = function (evt:Event){
            var ClickCount:* = 0;
            var evt:* = evt;
            var DoPushHutBtn:* = function (timerevt:Event){
                var timerevt:* = timerevt;
                if (DestroyHutBtnTimer){
                    DestroyHutBtnTimer = False;
                    var _local3 = HutBtnRepeatTimer;
                    with (_local3) {
                        stop();
                        delay = 1000;
                        remove_event_listener(TimerEvent.TIMER, DoPushHutBtn);
                    };
                } else {
                    ClickCount++;
                    Switch (ClickCount){
                        if case(1:
                            HutBtnRepeatTimer.delay = 500;
                            break;
                        if case(3:
                            HutBtnRepeatTimer.delay = 250;
                            break;
                        if case(10:
                            HutBtnRepeatTimer.delay = 125;
                            break;
                        if case(20:
                            HutBtnRepeatTimer.delay = 62;
                            break;
                    };
                    if (HutBtnHandler(evt)){
                        play(SND['CLICK']);
                    };
                };
            };
            ClickCount = 0;
            if (HutBtnRepeatTimer.running){
                return;
            };
            DestroyHutBtnTimer = False;
            var _local3 = HutBtnRepeatTimer;
            with (_local3) {
                delay = 1000;
                add_event_listener(TimerEvent.TIMER, DoPushHutBtn);
                start();
            };
        };
        var HutBtnUpHandler:* = function (evt:Event){
            if (HutBtnRepeatTimer.running){
                DestroyHutBtnTimer = True;
            };
        };
        HutFaceReset = function (evt:TimerEvent){
            if (on_stage(HUTMANN_BG)){
                add(HUTFACE_IDLE);
            };
        };
        HutBtnHandler = function (evt:Event=None):
            var evt:* = evt;
            var BetRisen:* = function (){
                if ((int(actor[LBL_HUTMANN_GOLDBET].text)
                        + int(actor[LBL_HUTMANN_MUSHBET].text)) > 0){
                    set_btn_text(HUTMANN_OK, texts[TXT_HUTMANN_START]);
                    add(HUTMANN_OK);
                    if ((((int(actor[LBL_HUTMANN_GOLDBET].text) >= (
                            50 * int(GetSpendAmount()))))
                            or (int(actor[LBL_HUTMANN_MUSHBET].text) >= 20))):
                        actor[LBL_HUTMANN_TEXT].text = texts[
                            TXT_HUTMANN_BETCOMMENT3];
                        add(HUTFACE_LOSE3);
                    } else {
                        if ((((int(actor[LBL_HUTMANN_GOLDBET].text) >= (
                                10 * int(GetSpendAmount()))))
                                or ((int(actor[LBL_HUTMANN_MUSHBET].text)
                                    >= 10)))){
                            actor[LBL_HUTMANN_TEXT].text = texts[
                                TXT_HUTMANN_BETCOMMENT2];
                            add(HUTFACE_WIN);
                        } else {
                            actor[LBL_HUTMANN_TEXT].text = texts[
                                TXT_HUTMANN_BETCOMMENT1];
                            add(HUTFACE_WIN);
                        };
                    };
                    actor[LBL_HUTMANN_TEXT].x = (SCREEN_TITLE_X
                                 - (actor[LBL_HUTMANN_TEXT].text_width / 2));
                    HutFaceResetTimer.stop();
                    HutFaceResetTimer.start();
                };
            };
            remove(HUTBECHER_1_CLICK, HUTBECHER_2_CLICK, HUTBECHER_3_CLICK);
            add_some(HUTBECHER_1_IDLE, HUTBECHER_2_IDLE, HUTBECHER_3_IDLE);
            Switch (get_actor_id(evt.target)){
                if case(HUTMANN_GOLDBET:
                    if (int((int(savegame[SG_GOLD]) / 100))
                            > int(actor[LBL_HUTMANN_GOLDBET2].text)){
                        actor[LBL_HUTMANN_GOLDBET].text = str((int(
                              actor[LBL_HUTMANN_GOLDBET].text)
                                + int(actor[LBL_HUTMANN_GOLDBET2].text)));
                        BetRisen();
                    } else {
                        var _local3 = actor[LBL_HUTMANN_TEXT];
                        with (_local3) {
                            text = texts[TXT_HUTMANN_CANTAFFORD];
                            x = (SCREEN_TITLE_X - (text_width / 2));
                        };
                        add(HUTFACE_LOSE2);
                        HutFaceResetTimer.stop();
                        HutFaceResetTimer.start();
                        if (HutBtnRepeatTimer.running){
                            DestroyHutBtnTimer = True;
                        };
                        return (False);
                    };
                    break;
                if case(HUTMANN_MUSHBET:
                    if (int(savegame[SG_MUSH]) >
                            int(actor[LBL_HUTMANN_MUSHBET2].text)){
                        actor[LBL_HUTMANN_MUSHBET].text = str(
                          (int(actor[LBL_HUTMANN_MUSHBET].text)
                           + int(actor[LBL_HUTMANN_MUSHBET2].text)));
                        BetRisen();
                    } else {
                        _local3 = actor[LBL_HUTMANN_TEXT];
                        with (_local3) {
                            text = texts[TXT_HUTMANN_CANTAFFORD];
                            x = (SCREEN_TITLE_X - (text_width / 2));
                        };
                        add(HUTFACE_LOSE2);
                        HutFaceResetTimer.stop();
                        HutFaceResetTimer.start();
                        if (HutBtnRepeatTimer.running){
                            DestroyHutBtnTimer = True;
                        };
                        return (False);
                    };
                    break;
                if case(HUTMANN_OK:
                    if (((((int(actor[LBL_HUTMANN_GOLDBET].text)
                            + int(actor[LBL_HUTMANN_MUSHBET].text)) > 0))
                            and (on_stage(HUTMANN_GOLDBET)))){
                        remove(HUTMANN_OK, HUTMANN_PLACEBET);
                        add(HUTMANN_BECHERCHOOSE);
                        PlaceHutBet(True);
                        HutFaceResetTimer.stop();
                        _local3 = actor[LBL_HUTMANN_TEXT];
                        with (_local3) {
                            text = texts[TXT_HUTMANN_CHOOSECUP];
                            x = (SCREEN_TITLE_X - (text_width / 2));
                        };
                    } else {
                        remove(HUTMANN_OK);
                        add(HUTMANN_PLACEBET);
                        if (int(savegame[SG_FIRST_PAYMENT]) == 0){
                            remove(HUTMANN_MUSHBET);
                        };
                        actor[LBL_HUTMANN_GOLDBET].text = "0";
                        actor[LBL_HUTMANN_MUSHBET].text = "0";
                        PlaceHutBet();
                        _local3 = actor[LBL_HUTMANN_TEXT];
                        with (_local3) {
                            text = texts[TXT_HUTMANN_NEWGAME];
                            x = (SCREEN_TITLE_X - (text_width / 2));
                        };
                    };
                    break;
            };
            return (True);
        };
        ChooseCup = function (evt:Event=None){
            remove(HUTMANN_BECHERCHOOSE);
            add(HUTFACE_HOVER);
            CupChosen = (get_actor_id(evt.target) - CA_HUTBECHER_1);
            send_action(ACT_PLACE_BET,
                        str((int(actor[LBL_HUTMANN_GOLDBET].text) * 100)),
                        actor[LBL_HUTMANN_MUSHBET].text);
        };
        var PlaceHutBet:* = function (LeftToCenter=False){
            var LeftBoxWidth:* = 0;
            var RightBoxWidth:* = 0;
            var LeftToCenter:Boolean = LeftToCenter;
            RightBoxWidth = ((((actor[HUTMANN_GOLDBET].width
                             + GILDE_GOLDMUSH_C1)
                            + actor[LBL_HUTMANN_GOLDBET2].text_width)
                            + GILDE_GOLDMUSH_C1)
                            + actor[HUTMANN_GOLDBET2].width);
            if (((((actor[HUTMANN_MUSHBET].width + GILDE_GOLDMUSH_C1)
                    + actor[LBL_HUTMANN_MUSHBET2].text_width)
                    + GILDE_GOLDMUSH_C1) + actor[HUTMANN_MUSHBET2].width) >
                    RightBoxWidth){
                RightBoxWidth = ((((actor[HUTMANN_MUSHBET].width
                                 + GILDE_GOLDMUSH_C1)
                                + actor[LBL_HUTMANN_MUSHBET2].text_width)
                                + GILDE_GOLDMUSH_C1)
                                + actor[HUTMANN_MUSHBET2].width);
            };
            actor[HUTMANN_GOLDBET].x = ((GILDE_GOLDMUSH_X + GILDE_GOLDMUSH_C2)
                                        - int((RightBoxWidth / 2)));
            actor[HUTMANN_MUSHBET].x = actor[HUTMANN_GOLDBET].x;
            actor[HUTMANN_MUSHBET_DISABLED].x = actor[HUTMANN_GOLDBET].x;
            actor[LBL_HUTMANN_GOLDBET2].x = ((actor[HUTMANN_GOLDBET].x
                                             + actor[HUTMANN_GOLDBET].width)
                                                + GILDE_GOLDMUSH_C1);
            actor[LBL_HUTMANN_MUSHBET2].x = ((actor[HUTMANN_MUSHBET].x
                                             + actor[HUTMANN_MUSHBET].width)
                                            + GILDE_GOLDMUSH_C1);
            actor[HUTMANN_GOLDBET2].x = ((actor[LBL_HUTMANN_GOLDBET2].x
                                         + actor[LBL_HUTMANN_GOLDBET2]
                                         .text_width)
                                        + GILDE_GOLDMUSH_C1);
            actor[HUTMANN_MUSHBET2].x = ((actor[LBL_HUTMANN_MUSHBET2].x
                                + actor[LBL_HUTMANN_MUSHBET2].text_width)
                                + GILDE_GOLDMUSH_C1);
            var _local3 = actor[LBL_HUTMANN_GOLDBET];
            with (_local3) {
                LeftBoxWidth = ((text_width + GILDE_GOLDMUSH_C1)
                                + actor[HUTMANN_GOLDBET].width);
            };
            _local3 = actor[LBL_HUTMANN_MUSHBET];
            with (_local3) {
                if (((text_width + GILDE_GOLDMUSH_C1)
                    + actor[HUTMANN_MUSHBET].width) > LeftBoxWidth){
                    LeftBoxWidth = ((text_width + GILDE_GOLDMUSH_C1)
                                    + actor[HUTMANN_MUSHBET].width);
                };
                actor[HUTMANN_MUSHBET].x = ((LeftToCenter)
                                            ? SCREEN_TITLE_X
                                            : (GILDE_GOLDMUSH_X
                                               - int((LeftBoxWidth / 2))));
                actor[HUTMANN_GOLDBET].x = actor[HUTMANN_MUSHBET].x;
                actor[LBL_HUTMANN_GOLDBET].x = ((actor[HUTMANN_GOLDBET].x
                                                + actor[HUTMANN_GOLDBET].width)
                                                + GILDE_GOLDMUSH_C1);
                x = ((actor[HUTMANN_MUSHBET].x + actor[HUTMANN_MUSHBET].width)
                                            + GILDE_GOLDMUSH_C1);
            };
        };
        RequestToilet = function (evt:Event=None){
            send_action(ACT_SCREEN_TOILET);
        };
        ShowHutmann = function (evt:Event=None){
            var doShowHutmann:* = None;
            var evt:* = evt;
            doShowHutmann = function (){
                remove_all();
                var _local2 = actor[LBL_HUTMANN_TEXT];
                with (_local2) {
                    text = texts[TXT_HUTMANN_OFFER];
                    x = (SCREEN_TITLE_X - (text_width / 2));
                };
                if (PresetGold > int((int(savegame[SG_GOLD]) / 100))){
                    PresetGold = int((int(savegame[SG_GOLD]) / 100));
                };
                if (PresetMush > int(savegame[SG_MUSH])){
                    PresetMush = int(savegame[SG_MUSH]);
                };
                if (int(savegame[SG_FIRST_PAYMENT]) == 0){
                    PresetMush = 0;
                };
                actor[LBL_HUTMANN_GOLDBET].text = str(PresetGold);
                actor[LBL_HUTMANN_MUSHBET].text = str(PresetMush);
                SetCnt(HUTMANN_GOLDBET, IF_GOLD);
                SetCnt(HUTMANN_GOLDBET2, IF_GOLD);
                SetCnt(HUTMANN_MUSHBET, IF_PILZE);
                SetCnt(HUTMANN_MUSHBET2, IF_PILZE);
                PlaceHutBet();
                add(SCREEN_HUTMANN);
                if ((((PresetGold > 0)) or ((PresetMush > 0)))){
                    add(HUTMANN_OK);
                };
                PresetGold = 0;
                PresetMush = 0;
                if (int(savegame[SG_ACTION_STATUS]) != 0){
                    remove(HUTMANN_BACK);
                };
                if (int(savegame[SG_FIRST_PAYMENT]) == 0){
                    remove(HUTMANN_MUSHBET);
                };
            };
            load(SCREEN_HUTMANN);
            load(HUTBECHER_1_HOVER, HUTBECHER_1_HOVER, HUTBECHER_1_HOVER);
            actor[LBL_HUTMANN_GOLDBET2].text = GetSpendAmount();
            whendo_loaded(doShowHutmann);
        };
        BuyBeer = function (evt:Event=None){
            send_action(ACT_BUY_BEER);
        };
        ShowBeerOffer = function (evt:Event=None){
            var i:* = 0;
            var canBuy:* = False;
            var tooHealthy:* = False;
            var evt:* = evt;
            canBuy = (int(savegame[SG_BEERS]) < 10);
            if (savegame[((SG_INVENTORY_OFFS + (SG['ITM']['SIZE'] * 5))
                    + SG_ITM_EXT_ENCHANT)] == 71){
                canBuy = (int(savegame[SG_BEERS]) < 11);
            };
            tooHealthy = False;
            special_actionHint = True;
            remove(TAVERNE_BARKEEPER_HINT);
            if (((canBuy) and ((int(savegame[SG_TIMEBAR]) > (80 * 60))))){
                canBuy = False;
                tooHealthy = True;
            };
            RefreshTimeBar(((canBuy) ? (20 * 60) : 0));
            remove(TAVERNE_CAS);
            add(BEEROFFER);
            enable_popup(QO_REWARDGOLD);
            enable_popup(QO_REWARDSILVER);
            enable_popup(LBL_QO_REWARDGOLD);
            enable_popup(LBL_QO_REWARDSILVER);
            enable_popup(LBL_QO_REWARDEXP);
            if (!texts[TXT_BEERFEST_TITLE_TOOHEALTHY]){
                texts[TXT_BEERFEST_TITLE_TOOHEALTHY] = "Beerfest!";
                texts[TXT_BEERFEST_TITLE_OK] = "Beerfest!";
                texts[TXT_BEERFEST_TEXT_TOOHEALTHY] = texts[
                    TXT_BO_TEXT_TOOHEALTHY];
                texts[TXT_BEERFEST_TEXT_OK] = texts[TXT_BO_TEXT_OK];
            };
            var _local3 = actor[LBL_QO_QUESTNAME];
            with (_local3) {
                if (beer_fest){
                    text = texts[((tooHealthy)
                                  ? TXT_BEERFEST_TITLE_TOOHEALTHY
                                  : ((canBuy)
                                     ? TXT_BEERFEST_TITLE_OK
                                     : TXT_BO_TITLE_NO))];
                } else {
                    if (special_action > 0){
                        text = texts[((((canBuy) or (tooHealthy)))
                                      ? ((TXT_SPECIAL_ACTION_TITLE
                                         + special_action) - 1)
                                        : TXT_BO_TITLE_NO)];
                    } else {
                        text = texts[((canBuy)
                                      ? TXT_BO_TITLE_OK
                                      : ((tooHealthy)
                                         ? TXT_BO_TITLE_TOOHEALTHY
                                         : TXT_BO_TITLE_NO))];
                    };
                };
                x = ((QO_BLACK_SQUARE_X + QO_QUESTNAME_X)
                     - int((text_width / 2)));
            };
            _local3 = actor[LBL_QO_QUESTTEXT];
            with (_local3) {
                if (beer_fest){
                    text = texts[((tooHealthy)
                                  ? TXT_BEERFEST_TEXT_TOOHEALTHY
                                  : ((canBuy)
                                     ? TXT_BEERFEST_TEXT_OK
                                     : TXT_BO_TEXT_NO))];
                } else {
                    if (special_action > 0){
                        text = texts[((canBuy)
                          ? ((TXT_SPECIAL_ACTION_TEXT_OK + special_action) - 1)
                          : ((tooHealthy)
                             ? ((TXT_SPECIAL_ACTION_TEXT_TOOHEALTHY
                                + special_action) - 1)
                                : TXT_BO_TEXT_NO))];
                    } else {
                        text = texts[((canBuy)
                                      ? TXT_BO_TEXT_OK
                                      : ((tooHealthy)
                                         ? TXT_BO_TEXT_TOOHEALTHY
                                         : TXT_BO_TEXT_NO))];
                    };
                };
            };
            arabize(LBL_QO_QUESTTEXT);
            actor[LBL_QO_REWARDEXP].text = ((canBuy) ? texts[TXT_BO_TIME] : "")
            if (savegame[((SG_INVENTORY_OFFS
                    + (SG['ITM']['SIZE'] * 5))
                    + SG_ITM_EXT_ENCHANT)] == 71){
                if (text_dir == "right"){
                    actor[LBL_QO_TIME].text = ((("11/" + savegame[SG_BEERS])
                                               + " ") + texts[TXT_BO_BOUGHT]);
                } else {
                    actor[LBL_QO_TIME].text = (((texts[TXT_BO_BOUGHT] + " ")
                                               + savegame[SG_BEERS]) + "/11");
                };
            } else {
                if (text_dir == "right"){
                    actor[LBL_QO_TIME].text = ((("10/" + savegame[SG_BEERS])
                                               + " ") + texts[TXT_BO_BOUGHT]);
                } else {
                    actor[LBL_QO_TIME].text = (((texts[TXT_BO_BOUGHT] + " ")
                                               + savegame[SG_BEERS]) + "/10");
                };
            };
            if (beer_fest){
                set_btn_text(BO_BUY, texts[TXT_BO_BUY_FREE]);
            } else {
                set_btn_text(BO_BUY, texts[TXT_BO_BUY]);
            };
            if (!canBuy){
                remove(BO_BUY);
            };
            add(((canBuy) ? BO_PORTRAIT_OK : ((tooHealthy)
                ? BO_PORTRAIT_TH
                : BO_PORTRAIT_NO)));
        };
        TimeBarAniEvent = function (evt:Event=None){
            var evt:* = evt;
            if (on_stage(TIMEBAR_FILL)){
                TimeBarAniTimer.delay = 20;
                timeBarAni = (timeBarAni + 0.2);
                if (timeBarAni > (2 * math.pi)){
                    timeBarAni = 0;
                };
                var _local3 = actor[TIMEBAR_FILL];
                with (_local3) {
                    alpha = ((math.sin(timeBarAni) * 0.2) + 0.5);
                };
            } else {
                TimeBarAniTimer.delay = 500;
            };
        };
        ShowQuestOffer = function (evt:Event=None){
            var i;
            var enoughTime:Boolean;
            var highStakes:Boolean;
            i = 0;
            while (i < 3) {
                highStakes = False;
                Switch (math.abs(int(savegame[(SG_QUEST_OFFER_ENEMY1 + i)]))){
                    if case(139:
                    if case(145:
                    if case(148:
                    if case(152:
                    if case(155:
                    if case(157:
                        highStakes = True;
                        break;
                };
                enoughTime = (int(savegame[(SG_QUEST_OFFER_DURATION1 + i)]) <=
                              int(savegame[SG_TIMEBAR]));
                if (highStakes){
                    if (enoughTime){
                        actor[(LBL_QO_CHOICE1 + i)].default_text_format =
                                FontFormat_HighStakes;
                        actor[(LBL_QO_CHOICE1_HL + i)].default_text_format =
                                FontFormat_HighStakesHighLight;
                    } else {
                        actor[(LBL_QO_CHOICE1 + i)].default_text_format =
                                FontFormat_HighStakesGrayed;
                        actor[(LBL_QO_CHOICE1_HL + i)].default_text_format =
                                FontFormat_HighStakesHighLightGrayed;
                    };
                } else {
                    if (enoughTime){
                        actor[(LBL_QO_CHOICE1 + i)].default_text_format =
                                FontFormat_Default;
                        actor[(LBL_QO_CHOICE1_HL + i)].default_text_format =
                                FontFormat_Highlight;
                    } else {
                        actor[(LBL_QO_CHOICE1 + i)].default_text_format =
                            FontFormat_Grayed;
                        actor[(LBL_QO_CHOICE1_HL + i)].default_text_format =
                            FontFormat_GrayedHighLight;
                    };
                };
                actor[(LBL_QO_CHOICE1 + i)].text = get_quest_title(i);
                actor[(LBL_QO_CHOICE1_HL + i)].text = get_quest_title(i);
                hide((LBL_QO_CHOICE1_HL + i));
                if (text_dir == "right"){
                    actor[LBL_QO_CHOOSE].x = (((QO_BLACK_SQUARE_X
                                              + QO_CHOOSE_X) + 140)
                                        - actor[LBL_QO_CHOOSE].text_width);
                    actor[(QO_CHOICE1 + i)].x = (((QO_BLACK_SQUARE_X
                                                 + QO_CHOOSE_X) + 140)
                                    - actor[(LBL_QO_CHOICE1 + i)].text_width);
                };
                i++;
            };
            SelectQuestOffer(-1);
            remove(TAVERNE_CAS);
            add(QUESTOFFER);
            add((QO_PORTRAIT1 + get_quest_random(0, 5)));
        };
        ReturnQuest = function (evt:Event=None){
            actor[QUEST_SLOT].alpha = 1;
            force_adventure = False;
            add(TAVERNE_CAS);
            remove(QUESTOFFER);
            remove(BEEROFFER);
            RefreshTimeBar();
        };

        var ChooseQuest:* = function (evt:Event=None){
            var quest_id;
            quest_id = (get_actor_id(evt.target) - QO_CHOICE1);
            SelectQuestOffer(quest_id);
        };
        var SelectQuestOffer:* = function (quest_id){
            var i:* = 0;
            var rewardX:* = 0;
            var GoldBonusText:* = None;
            var quest_id:* = quest_id;
            SelectedQuest = quest_id;
            rewardX = ((QO_BLACK_SQUARE_X + QO_QUESTTEXT_X) +
                       (((text_dir == "right")) ? 130 : 0));
            GoldBonusText = "";
            if ((int(savegame[SG_GOLD_BONUS]) > 0)){
                GoldBonusText = (texts[TXT_GOLDBONUS_PREFIX] + " ");
                if ((int(savegame[SG_GOLD_BONUS]) > 0)){
                    GoldBonusText = (((GoldBonusText + savegame[SG_GOLD_BONUS])
                                     + "% ") + texts[TXT_GOLDBONUS_SUFFIX]);
                    if (tower_level > 0){
                        GoldBonusText = ((((GoldBonusText + " + ")
                                         + str(tower_level)) + "% ")
                                        + texts[TXT_TOWER_BONUS]);
                    };
                };
            };
            i = 0;
            while (i < 3) {
                actor[(LBL_QO_CHOICE1_HL + i)].visible = (i == quest_id);
                actor[(LBL_QO_CHOICE1 + i)].visible = !((i == quest_id));
                i = (i + 1);
            };
            var _local3 = actor[LBL_QO_QUESTNAME];
            with (_local3) {
                text = ((quest_id)==-1)
                    ? texts[(TXT_QUEST_OFFER_TITLE + get_quest_random(0, 5))]
                    : get_quest_title(quest_id);
                x = ((QO_BLACK_SQUARE_X + QO_QUESTNAME_X)
                     - int((text_width / 2)));
            };
            actor[LBL_QO_QUESTTEXT].text = ((quest_id)==-1)
                    ? texts[(TXT_QUEST_OFFER_TEXT + get_quest_random(0, 5))]
                    : get_quest_text(quest_id);
            arabize(LBL_QO_QUESTTEXT);
            if (quest_id == -1){
                hide(QO_REWARDGOLD,
                     LBL_QO_REWARDGOLD,
                     QO_REWARDSILVER,
                     LBL_QO_REWARDSILVER);
                hide(LBL_QO_REWARD);
                hide(QO_START);
                actor[LBL_QO_REWARDEXP].text = "";
                actor[LBL_QO_TIME].text = "";
                SetCnt(QUEST_SLOT, C_EMPTY);
                enable_popup(FIGHT_SLOT);
            } else {
                show(LBL_QO_REWARD);
                show(QO_START);
                hide(QO_REWARDGOLD,
                     LBL_QO_REWARDGOLD,
                     QO_REWARDSILVER,
                     LBL_QO_REWARDSILVER);
                if (text_dir == "right"){
                    actor[LBL_QO_REWARD].x = (rewardX
                                            - actor[LBL_QO_REWARD].text_width);
                };
                if (gold_anteil(savegame[(SG_QUEST_OFFER_GOLD1
                        + quest_id)]) > 0){
                    _local3 = actor[QO_REWARDGOLD];
                    with (_local3) {
                        visible = True;
                        if (text_dir == "right"){
                            x = (rewardX - width);
                            rewardX = (x - 8);
                        } else {
                            x = rewardX;
                            rewardX = ((x + width) + 8);
                        };
                    };
                    _local3 = actor[LBL_QO_REWARDGOLD];
                    with (_local3) {
                        visible = True;
                        text = gold_anteil(savegame[(SG_QUEST_OFFER_GOLD1
                                           + quest_id)]);
                        if (text_dir == "right"){
                            x = (rewardX - text_width);
                            rewardX = (x - 8);
                        } else {
                            x = rewardX;
                            rewardX = ((x + text_width) + 14);
                        };
                    };
                };
                if (silber_anteil(savegame[(SG_QUEST_OFFER_GOLD1
                    + quest_id)]) > 0){
                    _local3 = actor[QO_REWARDSILVER];
                    with (_local3) {
                        visible = True;
                        if (text_dir == "right"){
                            x = (rewardX - width);
                            rewardX = (x - 8);
                        } else {
                            x = rewardX;
                            rewardX = ((x + width) + 8);
                        };
                    };
                    _local3 = actor[LBL_QO_REWARDSILVER];
                    with (_local3) {
                        visible = True;
                        text = silber_anteil(savegame[(SG_QUEST_OFFER_GOLD1
                                             + quest_id)]);
                        if (text_dir == "right"){
                            x = (rewardX - text_width);
                            rewardX = (x - 8);
                        } else {
                            x = rewardX;
                            rewardX = ((x + text_width) + 14);
                        };
                    };
                };
                if (text_dir == "right"){
                    actor[LBL_QO_REWARDEXP].text = ((savegame[(
                            SG_QUEST_OFFER_EXP1 + quest_id)] + " :")
                            + texts[TXT_EXP]);
                    actor[LBL_QO_REWARDEXP].x = (((QO_BLACK_SQUARE_X
                                                 + QO_QUESTTEXT_X) + 130)
                                        - actor[LBL_QO_REWARDEXP].text_width);
                } else {
                    actor[LBL_QO_REWARDEXP].text = ((texts[TXT_EXP] + ": ")
                                + savegame[(SG_QUEST_OFFER_EXP1 + quest_id)]);
                };
                if (int(savegame[SG_EXP_BONUS]) > 0){
                    if (math.round((((savegame[SG_ALBUM] - 10000) / contentMax)
                            * 100)) >= 1){
                        enable_popup(LBL_QO_REWARDEXP,
                                     ((((((((texts[TXT_EXPBONUS_PREFIX] + " ")
                                      + savegame[SG_EXP_BONUS]) + "% ")
                                        + texts[TXT_EXPBONUS_SUFFIX]) + " + ")
                                        + str(math.round((((savegame[SG_ALBUM]
                                              - 10000) / contentMax) * 100))))
                                    + "% ") + texts[(TXT_COLLECTION + 1)]));
                    } else {
                        enable_popup(LBL_QO_REWARDEXP,
                                     ((((texts[TXT_EXPBONUS_PREFIX] + " ")
                                      + savegame[SG_EXP_BONUS]) + "% ")
                                        + texts[TXT_EXPBONUS_SUFFIX]));
                    };
                } else {
                    if (math.round((((savegame[SG_ALBUM] - 10000) / contentMax)
                        * 100)) >= 1){
                        enable_popup(LBL_QO_REWARDEXP,
                                     ((((texts[TXT_EXPBONUS_PREFIX] + " ")
                                      + str(math.round((((savegame[SG_ALBUM]
                                            - 10000) / contentMax) * 100))))
                                        + "% ") + texts[(TXT_COLLECTION + 1)]))
                    } else {
                        enable_popup(LBL_QO_REWARDEXP);
                    };
                };
                if (GoldBonusText != ""){
                    enable_popup(QO_REWARDGOLD, GoldBonusText);
                    enable_popup(QO_REWARDSILVER, GoldBonusText);
                    enable_popup(LBL_QO_REWARDGOLD, GoldBonusText);
                    enable_popup(LBL_QO_REWARDSILVER, GoldBonusText);
                } else {
                    enable_popup(QO_REWARDGOLD);
                    enable_popup(QO_REWARDSILVER);
                    enable_popup(LBL_QO_REWARDGOLD);
                    enable_popup(LBL_QO_REWARDSILVER);
                };
                if (int(savegame[((SG['QUEST']['OFFER']['REWARD_ITM1']
                        + (quest_id * SG['ITM']['SIZE'])) + SG_ITM_TYP)]) > 0){
                    SetCnt(QUEST_SLOT,
                           GetItemID(SG['QUEST']['OFFER']['REWARD_ITM1'],
                                     quest_id));
                    ItemPopup(QUEST_SLOT,
                              (SG['QUEST']['OFFER']['REWARD_ITM1']
                               + (quest_id * SG['ITM']['SIZE'])),
                                None, False, False, False);
                } else {
                    SetCnt(QUEST_SLOT, C_EMPTY);
                    enable_popup(FIGHT_SLOT);
                };
                if (text_dir == "right"){
                    actor[LBL_QO_TIME].text = (((((str(int((int(savegame[
                                               (SG_QUEST_OFFER_DURATION1
                                                + quest_id)]) / 60))) + ":")
                            + (((str(int((int(
                               savegame[(SG_QUEST_OFFER_DURATION1
                               + quest_id)]) % 60))).length == 1)) ? "0" : ""))
                            + str(int((int(savegame[(SG_QUEST_OFFER_DURATION1
                                  + quest_id)]) % 60)))) + " :") +
                            texts[TXT_DURATION]);
                    actor[LBL_QO_TIME].x = (QO_BLACK_SQUARE_X + QO_QUESTTEXT_X)
                        + 130) - actor[LBL_QO_TIME].text_width);
                } else {
                    actor[LBL_QO_TIME].text = (((((texts[TXT_DURATION] + ": ")
                           + str(int((int(savegame[(SG_QUEST_OFFER_DURATION1
                             + quest_id)]) / 60)))) + ":")
                        + (((str(int((int(savegame[(SG_QUEST_OFFER_DURATION1
                           + quest_id)]) % 60))).length == 1)) ? "0" : ""))
                        + str(int((int(savegame[(SG_QUEST_OFFER_DURATION1
                              + quest_id)]) % 60))));
                };
                RefreshTimeBar(-(int(savegame[(SG_QUEST_OFFER_DURATION1
                               + quest_id)])));
            };
        };
        RequestQuest = function (evt:Event=None){
            if (SelectedQuest >= 0){
                send_action(ACT_QUEST_BEGIN,
                            (SelectedQuest + 1),
                            ((force_adventure) ? 1 : 0));
            };
        };
        toiletChainAni = function (evt:TimerEvent){
            var i;
            if (toiletChainFrame >= 6){
                toiletChainTimer.stop();
                return;
            };
            i = 0;
            while (i < 3) {
                hide((TOILET_CHAIN + i));
                i++;
            };
            if (toiletChainFrame <= 2){
                show((TOILET_CHAIN + toiletChainFrame));
            } else {
                show(((TOILET_CHAIN + 5) - toiletChainFrame));
            };
            toiletChainFrame++;
        };
        ToiletHandler = function (evt:Event=None){
            if (get_actor_id(evt.target) == CA_TOILET_CHAIN){
                toiletChainFrame = 0;
                toiletChainTimer.start();
                play(SND_TOILET_FLUSHTRY);
                send_action(ACT_TOILET_FLUSH);
            };
        };
        SkipFight = function (evt:Event=None){
        };
        CheckLM = function (evt:Event=None){
            var req:URLRequest;
            add(CB_LM_CHECKED);
            light_mode = True;
            so.data.light_mode = light_mode;
            so.flush();
            if (param_lowres_url != ""){
                req = new URLRequest("index.php");
                navigate_to_url(req, "_self");
            };
        };
        UncheckLM = function (evt:Event=None){
            var req:URLRequest;
            remove(CB_LM_CHECKED);
            light_mode = False;
            so.data.light_mode = light_mode;
            so.flush();
            if (param_lowres_url != ""){
                req = new URLRequest("index.php");
                navigate_to_url(req, "_self");
            };
        };
        CheckCS = function (evt:Event=None){
            add(CB_CS_CHECKED);
            chat_sound = True;
            so.data.chat_sound = chat_sound;
            so.flush();
            play(SND_ERROR);
        };
        UncheckCS = function (evt:Event=None){
            remove(CB_CS_CHECKED);
            chat_sound = False;
            so.data.chat_sound = chat_sound;
            so.flush();
        };
        CheckCompare = function (evt:Event=None){
            add(CB_COMPARE_CHECKED);
            compare_items = True;
            so.data.compare_items = compare_items;
            so.flush();
        };
        UncheckCompare = function (evt:Event=None){
            remove(CB_COMPARE_CHECKED);
            compare_items = False;
            so.data.compare_items = compare_items;
            so.flush();
        };
        CheckTV = function (evt:Event=None){
            add(CB_TV_CHECKED);
            disable_tv = True;
            so.data.disable_tv = disable_tv;
            so.flush();
        };
        UncheckTV = function (evt:Event=None){
            remove(CB_TV_CHECKED);
            disable_tv = False;
            so.data.disable_tv = disable_tv;
            so.flush();
        };
        VolumeChange = function (value):
            var value:* = value;
            if (notFirstVolChange){
                notFirstVolChange = False;
                if (so.data.volume is None){
                    so.data.volume = 5;
                };
                so.flush();
                set_volume((so.data.volume / 10));
                SetSliderValue(SLDR_OPTION_VOLUME, (so.data.volume + 1));
            } else {
                so.data.volume = (value - 1);
                so.flush();
                set_volume((so.data.volume / 10));
                if (notSecondVolChange){
                    notSecondVolChange = False;
                } else {
                    play(SND_TEST);
                };
            };
            var _local3 = actor[LBL_OPTION_VOLUME];
            with (_local3) {
                if (text_dir == "right"){
                    text = (((so.data.volume == 0))
                            ? texts[TXT_MUTE]
                            : ((str((so.data.volume * 10)) + "% ")
                               + texts[TXT_VOLUME]));
                } else {
                    text = (((so.data.volume == 0))
                            ? texts[TXT_MUTE]
                            : (((texts[TXT_VOLUME] + " ")
                               + str((so.data.volume * 10))) + "%"));
                };
                x = (((OPTION_X + 250) + int((OPTION_X / 2)))
                     - int((text_width / 2)));
            };
        };
        ChooseLanguageIcon = function (evt:MouseEvent){
            var req:URLRequest;
            so.data.lang_code = param_languages[(get_actor_id(evt.target)
                                                 - OPTION_FLAG)];
            so.flush();
            trc("Language set:", so.data.lang_code);
            req = new URLRequest("index.php");
            navigate_to_url(req, "_self");
        };
        OptionBtnHandler = function (evt:Event){
            hide(CHANGE_PASSWORD_SMILEY_SAD);
            hide(CHANGE_PASSWORD_SMILEY_NEUTRAL);
            hide(CHANGE_PASSWORD_SMILEY_HAPPY);
            if ((evt is KeyboardEvent)){
                if (((((!((KeyboardEvent(evt).keyCode == 13)))
                        and (!((KeyboardEvent(evt).keyCode == 10)))))
                        and (!((KeyboardEvent(evt).keyCode == 16777230))))){
                    return;
                };
            };
            remove(LUXURY_SELLER);
            Switch (get_actor_id(evt.target)){
                if case(OPTION_LUXURY:
                    remove(OPTION_DOCHANGE);
                    optionMenuSelect = 6;
                    actor[LBL_OPTION_DOCHANGE].text = texts[TXT_LUXURY_TITLE];
                    actor[LBL_OPTION_FIELD1].text = texts[TXT_LUXURY_TEXT];
                    set_btn_text(OPTION_DOCHANGE, texts[TXT_LUXURY_BTN]);
                    add(OPTION_DORESEND);
                    add(LUXURY_SELLER);
                    if ((uint(savegame[SG_NEW_FLAGS]) & 32)){
                        actor[LBL_OPTION_FIELD1].text = texts[
                            TXT_LUXURY_ALREADY];
                        remove(OPTION_DOCHANGE);
                    };
                    arabize(LBL_OPTION_FIELD1);
                    break;
                if case(OPTION_CHANGE_NAME:
                    optionMenuSelect = 1;
                    actor[LBL_OPTION_DOCHANGE].text = texts[
                        TXT_DOCHANGE_NAME_TITLE];
                    actor[LBL_OPTION_FIELD1].text = texts[
                        TXT_DOCHANGE_NAME_FIELD_1];
                    actor[LBL_OPTION_FIELD2].text = texts[
                        TXT_DOCHANGE_NAME_FIELD_2];
                    actor[LBL_OPTION_FIELD3].text = texts[
                        TXT_DOCHANGE_NAME_FIELD_3];
                    set_btn_text(OPTION_DOCHANGE, texts[TXT_DOCHANGENAME]);
                    actor[INP_OPTION_FIELD1].getChildAt(1).text = "";
                    actor[INP_OPTION_FIELD2].getChildAt(1).text = "";
                    actor[INP_OPTION_FIELD3].getChildAt(1).text = "";
                    actor[INP_OPTION_FIELD1].getChildAt(1)
                        .displayAsPassword = True;
                    actor[INP_OPTION_FIELD2].getChildAt(1)
                        .displayAsPassword = False;
                    actor[INP_OPTION_FIELD3].getChildAt(1)
                        .displayAsPassword = False;
                    add(OPTION_DOCHANGE);
                    break;
                if case(OPTION_CHANGE_EMAIL:
                    optionMenuSelect = 2;
                    actor[LBL_OPTION_DOCHANGE].text = texts[
                        TXT_DOCHANGE_EMAIL_TITLE];
                    actor[LBL_OPTION_FIELD1].text = texts[
                        TXT_DOCHANGE_EMAIL_FIELD_1];
                    if (savegame[SG_EMAIL_VALID] == 1){
                        actor[LBL_OPTION_FIELD2].text = ((texts[TXT_OLD_EMAIL])
                                                         ? texts[TXT_OLD_EMAIL]
                                                         : "Old E-Mail:");
                        actor[LBL_OPTION_FIELD3].text = texts[
                            TXT_DOCHANGE_EMAIL_FIELD_2];
                    } else {
                        actor[LBL_OPTION_FIELD2].text = texts[
                            TXT_DOCHANGE_EMAIL_FIELD_2];
                        actor[LBL_OPTION_FIELD3].text = texts[
                            TXT_DOCHANGE_EMAIL_FIELD_3];
                    };
                    set_btn_text(OPTION_DOCHANGE, texts[TXT_DOCHANGE]);
                    actor[INP_OPTION_FIELD1].getChildAt(1).text = "";
                    actor[INP_OPTION_FIELD2].getChildAt(1).text = "";
                    actor[INP_OPTION_FIELD3].getChildAt(1).text = "";
                    actor[INP_OPTION_FIELD1].getChildAt(1)
                        .displayAsPassword = True;
                    actor[INP_OPTION_FIELD2].getChildAt(1)
                        .displayAsPassword = False;
                    actor[INP_OPTION_FIELD3].getChildAt(1)
                        .displayAsPassword = False;
                    add(OPTION_DOCHANGE);
                    break;
                if case(OPTION_CHANGE_PASSWORD:
                    optionMenuSelect = 3;
                    actor[LBL_OPTION_DOCHANGE].text = texts[
                        TXT_DOCHANGE_PASSWORD_TITLE];
                    actor[LBL_OPTION_FIELD1].text = texts[
                        TXT_DOCHANGE_PASSWORD_FIELD_1];
                    actor[LBL_OPTION_FIELD2].text = texts[
                        TXT_DOCHANGE_PASSWORD_FIELD_2];
                    actor[LBL_OPTION_FIELD3].text = texts[
                        TXT_DOCHANGE_PASSWORD_FIELD_3];
                    set_btn_text(OPTION_DOCHANGE, texts[TXT_DOCHANGE]);
                    actor[INP_OPTION_FIELD1].getChildAt(1).text = "";
                    actor[INP_OPTION_FIELD2].getChildAt(1).text = "";
                    actor[INP_OPTION_FIELD3].getChildAt(1).text = "";
                    actor[INP_OPTION_FIELD1].getChildAt(1)
                        .displayAsPassword = True;
                    actor[INP_OPTION_FIELD2].getChildAt(1)
                        .displayAsPassword = True;
                    actor[INP_OPTION_FIELD3].getChildAt(1)
                        .displayAsPassword = True;
                    add(OPTION_DOCHANGE);
                    break;
                if case(OPTION_DELETE:
                    optionMenuSelect = 4;
                    actor[LBL_OPTION_DOCHANGE].text = texts[
                        TXT_DELETE_ACCOUNT_TITLE];
                    actor[LBL_OPTION_FIELD1].text = texts[
                        TXT_DELETE_ACCOUNT_FIELD_1];
                    actor[LBL_OPTION_FIELD2].text = texts[
                        TXT_DELETE_ACCOUNT_FIELD_2];
                    actor[LBL_OPTION_FIELD3].text = texts[
                        TXT_DELETE_ACCOUNT_FIELD_3];
                    set_btn_text(OPTION_DOCHANGE, texts[TXT_DOCHANGE]);
                    actor[INP_OPTION_FIELD1].getChildAt(1).text = "";
                    actor[INP_OPTION_FIELD2].getChildAt(1).text = "";
                    actor[INP_OPTION_FIELD3].getChildAt(1).text = "";
                    actor[INP_OPTION_FIELD1].getChildAt(1)
                        .displayAsPassword = True;
                    actor[INP_OPTION_FIELD2].getChildAt(1)
                        .displayAsPassword = True;
                    actor[INP_OPTION_FIELD3].getChildAt(1)
                        .displayAsPassword = False;
                    add(OPTION_DOCHANGE);
                    break;
                if case(OPTION_RESEND:
                    remove(OPTION_DOCHANGE);
                    optionMenuSelect = 5;
                    actor[LBL_OPTION_DOCHANGE].text = texts[TXT_RESEND_TITLE];
                    actor[LBL_OPTION_FIELD1].text = texts[TXT_RESEND_TEXT];
                    set_btn_text(OPTION_DOCHANGE, texts[TXT_RESEND_BTN2]);
                    add(OPTION_DORESEND);
                    if (int(savegame[SG_EMAIL_VALID]) == 1){
                        actor[LBL_OPTION_FIELD1].text = texts[
                            TXT_ALREADY_VALID];
                        remove(OPTION_DOCHANGE);
                    };
                    arabize(LBL_OPTION_FIELD1);
                    break;
                if case(OPTION_CHANGEIMG:
                    show_build_character_screen(evt);
                    break;
                default:
                    Switch (optionMenuSelect){
                        if case(1:
                            if (actor[INP_OPTION_FIELD2].getChildAt(1).text ==
                                    actor[INP_OPTION_FIELD3]
                                    .getChildAt(1).text){
                                send_action(ACT_CHANGE_NAME,
                                       actor[INP['NAME']].getChildAt(1).text,
                                   actor[INP_OPTION_FIELD1].getChildAt(1).text,
                                   actor[INP_OPTION_FIELD2].getChildAt(1).text,
                                   actor[INP_OPTION_FIELD3].getChildAt(1).text)
                                option_new_data = actor[
                                    INP_OPTION_FIELD2].getChildAt(1).text;
                            } else {
                                error_message(texts[TXT_ERROR_NAME_MISMATCH]);
                            };
                            break;
                        if case(2:
                            if ((((actor[INP_OPTION_FIELD2]
                                    .getChildAt(1).text == actor[
                                    INP_OPTION_FIELD3].getChildAt(1).text))
                                    or ((savegame[SG_EMAIL_VALID] == 1)))){
                                send_action(ACT_CHANGE_MAIL,
                                   actor[INP['NAME']].getChildAt(1).text,
                                   actor[INP_OPTION_FIELD1].getChildAt(1).text,
                                   actor[INP_OPTION_FIELD2].getChildAt(1).text,
                                   actor[INP_OPTION_FIELD3].getChildAt(1).text)
                                option_new_data = actor[INP_OPTION_FIELD2]
                                    .getChildAt(1).text;
                            } else {
                                error_message(texts[TXT_ERROR_EMAIL_MISMATCH]);
                            };
                            break;
                        if case(3:
                            if (actor[INP_OPTION_FIELD2].getChildAt(1).text ==
                                actor[INP_OPTION_FIELD3].getChildAt(1).text){
                                send_action(ACT_CHANGE_PASS,
                                   actor[INP['NAME']].getChildAt(1).text,
                                   actor[INP_OPTION_FIELD1].getChildAt(1).text,
                                   actor[INP_OPTION_FIELD2].getChildAt(1).text,
                                   actor[INP_OPTION_FIELD3].getChildAt(1).text)
                                option_new_data = actor[
                                    INP_OPTION_FIELD2].getChildAt(1).text;
                            } else {
                                error_message(
                                      texts[TXT_ERROR_PASSWORD_MISMATCH]);
                            };
                            break;
                        if case(4:
                            if (actor[INP_OPTION_FIELD1].getChildAt(1).text ==
                                actor[INP_OPTION_FIELD2].getChildAt(1).text){
                                send_action(ACT_DELETE_ACCOUNT,
                                   actor[INP['NAME']].getChildAt(1).text,
                                   actor[INP_OPTION_FIELD1].getChildAt(1).text,
                                   actor[INP_OPTION_FIELD3].getChildAt(1)
                                    .text.lower());
                            } else {
                                error_message(
                                      texts[TXT_ERROR_PASSWORD_MISMATCH]);
                            };
                            break;
                        if case(5:
                            ResendConfirmationEmail();
                            break;
                        if case(6:
                            remove(OPTION_DOCHANGE);
                            optionMenuSelect = 7;
                            actor[LBL_OPTION_DOCHANGE].text = texts[
                                TXT_LUXURY_TITLE];
                            actor[LBL_OPTION_FIELD1].text = texts[
                                TXT_LUXURY_CONFIRM];
                            set_btn_text(OPTION_DOCHANGE,
                                         texts[TXT_LUXURY_BTN2]);
                            add(OPTION_DORESEND);
                            add(LUXURY_SELLER);
                            arabize(LBL_OPTION_FIELD1);
                            break;
                        if case(7:
                            remove(OPTION_DOCHANGE);
                            optionMenuSelect = 8;
                            actor[LBL_OPTION_DOCHANGE].text = texts[
                                TXT_LUXURY_TITLE];
                            actor[LBL_OPTION_FIELD1].text = texts[
                                TXT_LUXURY_CONFIRM2];
                            set_btn_text(OPTION_DOCHANGE, texts[
                                         TXT_LUXURY_BTN3]);
                            add(OPTION_DORESEND);
                            add(LUXURY_SELLER);
                            arabize(LBL_OPTION_FIELD1);
                            break;
                        if case(8:
                            send_action(ACT_BUY_LUXURY);
                            break;
                    };
                    break;
                if case(OPTION_CHANGEIMG:
            };
            if (text_dir == "right"){
                actor[LBL_OPTION_DOCHANGE].x = ((OPTION_X + OPTION_VER_X)
                                    - actor[LBL_OPTION_DOCHANGE].text_width);
                actor[LBL_OPTION_FIELD1].width = 385;
                actor[LBL_OPTION_FIELD2].x = ((OPTION_X + OPTION_VER_X)
                                      - actor[LBL_OPTION_FIELD2].text_width);
                actor[LBL_OPTION_FIELD3].x = ((OPTION_X + OPTION_VER_X)
                                      - actor[LBL_OPTION_FIELD3].text_width);
                actor[INP_OPTION_FIELD1].x = (OPTION_X
                                              + OPTION_DOCHANGE_LABEL_X);
                actor[INP_OPTION_FIELD2].x = (OPTION_X
                                              + OPTION_DOCHANGE_LABEL_X);
                actor[INP_OPTION_FIELD3].x = (OPTION_X
                                              + OPTION_DOCHANGE_LABEL_X);
            };
        };
        RequestMainQuest = function (evt:Event=None){
            var evt:* = evt;
            if (WaitingFor(savegame[SG_MQ_REROLL_TIME])){
                if (int(actor[LBL_IF_PILZE].text) <= 0){
                    return;
                };
                var _local3 = actor[LBL_IF_PILZE];
                with (_local3) {
                    text = str((int(savegame[SG_MUSH]) - 1));
                    x = ((IF_LBL_GOLDPILZE_X - text_width) - 10);
                };
            };
            enable_popup(LBL_IF_PILZE);
            if (SelectedDungeon == 100){
                send_action(ACT_TOWER_TRY,
                            str((tower_level + 1)),
                            ((WaitingFor(savegame[SG_MQ_REROLL_TIME]))
                             ? 1 : 0));
            } else {
                send_action(ACT_MAINQUEST, str((SelectedDungeon + 1)));
            };
        };
        var ResendConfirmationEmail:* = function (evt:Event=None){
            send_action(ACT_RESEND_EMAIL);
        };
        attPriceLimitation = False;
        GoldKurve = list();
        TrueAttPreis = list();
        GoldKurve[1] = 25;
        GoldKurve[2] = 50;
        GoldKurve[3] = 75;
        i = 4;
        while (i <= 15000) {
            GoldKurve[i] = ((int(GoldKurve[(i - 1)])
                            + int((GoldKurve[int((i / 2))] / 3)))
                            + int((GoldKurve[int((i / 3))] / 4)));
            GoldKurve[i] = int((GoldKurve[i] / 5));
            GoldKurve[i] = (GoldKurve[i] * 5);
            i = (i + 1);
        };
        i = 0;
        while (i <= 15000) {
            TrueAttPreis[i] = GoldKurve[int((1 + (i / 5)))];
            i = (i + 1);
        };
        i = 0;
        while (i <= 14996) {
            if (attPriceLimitation){
                TrueAttPreis[i] = 0x3B9ACA00;
            } else {
                TrueAttPreis[i] = ((((int(TrueAttPreis[i])
                                   + int(TrueAttPreis[(i + 1)]))
                                    + int(TrueAttPreis[(i + 2)]))
                                    + int(TrueAttPreis[(i + 3)]))
                                    + int(TrueAttPreis[(i + 4)]));
                TrueAttPreis[i] = int((TrueAttPreis[i] / 5));
                TrueAttPreis[i] = int((TrueAttPreis[i] / 5));
                TrueAttPreis[i] = int((TrueAttPreis[i] * 5));
                if (TrueAttPreis[i] > 0x3B9ACA00){
                    TrueAttPreis[i] = 0x3B9ACA00;
                    attPriceLimitation = True;
                };
            };
            i = (i + 1);
        };
        i = 1;
        while (i <= 200) {
            GildeBuildingGold[i] = int((GoldKurve[(i * 2)] * 10));
            GildeBuildingGold[i] = (GildeBuildingGold[i] / 100);
            GildeBuildingGold[i] = int(GildeBuildingGold[i]);
            GildeBuildingGold[i] = (GildeBuildingGold[i] * 100);
            if (GildeBuildingGold[i] < 100){
                GildeBuildingGold[i] = 100;
            };
            if (i > 50){
                GildeBuildingGold[i] = (GildeBuildingGold[i] * 30);
                GildeBuildingPilz[i] = 0;
            } else {
                if (i > 25){
                    if (noMush){
                        GildeBuildingGold[i] = (
                                        GildeBuildingGold[i] * (i - 25));
                    };
                    GildeBuildingPilz[i] = ((noMush) ? 0 : ((i - 25) * 5));
                };
            };
            i = (i + 1);
        };
        define_snd(SND['CLICK'], "res/sfx/click.mp3", True);
        define_snd(SND_ERROR, "res/sfx/error.mp3", False);
        define_snd(SND_JINGLE, "res/sfx/jingle.mp3", True);
        DefineImg(IF_BACKGROUND,
                  (("res/gfx/if/login" + login_background_id) + ".jpg"),
                  True, 280, 100);
        DefineFromClass(IF_LEFT, interface_left_jpg, 0, 100);
        DefineFromClass(IF_TOP, interface_top_jpg, 0, 0);
        DefineFromClass(IF_MAIN, interface_main_jpg, 280, 100);
        actor[IF_MAIN].mouse_enabled = False;
        define_bunch(IF_MAIN,
                     IF_BACKGROUND,
                     IF_LEFT,
                     IF_TOP,
                     IF_MAIN,
                     IF_IMPRESSUM,
                     IF_FORUM,
                     IF_AGB,
                     IF_DATENSCHUTZ,
                     IF_ANLEITUNG);
        if (shop_url != ""){
            add_bunch(IF_MAIN, IF_SHOP);
        };
        i = 0;
        while (i < param_social_buttons.length) {
            DefineCnt((SOCIAL + i), (120 + (i * 40)), 2);
            DefineImg((SOCIAL + i),
                      (("res/gfx/if/social_"
                       + param_social_buttons[i].split(":")[0]) + ".png"),
                        True, 0, 0);
            MakePersistent((SOCIAL + i), (SOCIAL + i));
            var _local2 = actor[(SOCIAL + i)];
            with (_local2) {
                addChild(actor[(SOCIAL + i)]);
                textLinkMakeClickable(getChildAt(0).parent);
                add_event_listener(MouseEvent.CLICK, ShowSocial);
                buttonMode = True;
                useHandCursor = True;
                mouseChildren = False;
            };
            if (param_social_buttons[i].split(":").length > 1){
                if (texts[int(param_social_buttons[i].split(":")[1])]){
                    enable_popup((SOCIAL + i),
                                 texts[param_social_buttons[i].split(":")[1]]);
                };
            };
            add_bunch(IF_MAIN, (SOCIAL + i));
            i = (i + 1);
        };
        define_bunch(IF_OVL, IF_MAIN);
        if (param_sponsor != ""){
            var ShowSponsor:* = function (evt:MouseEvent=None){
                navigate_to_url(new URLRequest(param_sponsor_url), "_blank");
            };
            DefineCnt(IF_SPONSOR, SPONSOR_X, SPONSOR_Y);
            DefineImg(IF_SPONSOR, (("res/gfx/if/sponsor_"
                      + param_sponsor) + ".png"), True, 0, 0);
            if (param_sponsor_url != ""){
                MakePersistent(IF_SPONSOR, IF_SPONSOR);
                add_bunch(IF_MAIN, IF_SPONSOR);
                _local2 = actor[IF_SPONSOR];
                with (_local2) {
                    addChild(actor[IF_SPONSOR]);
                    add_event_listener(MouseEvent.CLICK, ShowSponsor);
                    mouseChildren = False;
                    useHandCursor = True;
                    buttonMode = True;
                };
            } else {
                MakePersistent(IF_SPONSOR);
                add_bunch(IF_MAIN, IF_SPONSOR);
                _local2 = actor[IF_SPONSOR];
                with (_local2) {
                    x = SPONSOR_X;
                    y = SPONSOR_Y;
                };
            };
        };
        DefineCnt(IF_LOGOUT,
                  ((shop_url)!="") ? LOGOUT_X_WITH_SHOP : LOGOUT_X, LOGOUT_Y);
        DefineLbl(LBL_IF_LOGOUT,
                  texts[TXT_LOGOUT], 0, 0,
                  FontFormat_LOGoutLink);
        add_filter(LBL_IF_LOGOUT, Filter_Shadow);
        MakePersistent(IF_LOGOUT, LBL_IF_LOGOUT);
        _local2 = actor[IF_LOGOUT];
        with (_local2) {
            addChild(actor[LBL_IF_LOGOUT]);
            textLinkMakeClickable(getChildAt(0).parent);
            x = (((shop_url)!="")
                 ? LOGOUT_X_WITH_SHOP : LOGOUT_X - int((width / 2)));
            add_event_listener(MouseEvent.CLICK, RequestLOGout);
            mouseChildren = False;
            useHandCursor = True;
            buttonMode = True;
        };
        DefineCnt(IF_IMPRESSUM, IMPRESSUM_X, LOGOUT_Y);
        DefineLbl(LBL_IF_IMPRESSUM,
                  texts[TXT_IMPRESSUM_LINK], 0, 0,
                  FontFormat_LOGoutLink);
        add_filter(LBL_IF_IMPRESSUM, Filter_Shadow);
        MakePersistent(IF_IMPRESSUM, LBL_IF_IMPRESSUM);
        _local2 = actor[IF_IMPRESSUM];
        with (_local2) {
            addChild(actor[LBL_IF_IMPRESSUM]);
            textLinkMakeClickable(getChildAt(0).parent);
            x = (IMPRESSUM_X - int((width / 2)));
            add_event_listener(MouseEvent.CLICK, ShowImpressum);
            mouseChildren = False;
            useHandCursor = True;
            buttonMode = True;
        };
        DefineCnt(IF_FORUM,
                  ((shop_url)!="") ? FORUM_X_WITH_SHOP : FORUM_X, LOGOUT_Y);
        DefineLbl(LBL_IF_FORUM,
                  texts[TXT_FORUM_LINK], 0, 0, FontFormat_LOGoutLink);
        add_filter(LBL_IF_FORUM, Filter_Shadow);
        MakePersistent(IF_FORUM, LBL_IF_FORUM);
        _local2 = actor[IF_FORUM];
        with (_local2) {
            addChild(actor[LBL_IF_FORUM]);
            textLinkMakeClickable(getChildAt(0).parent);
            x = (((shop_url)!="")
                 ? FORUM_X_WITH_SHOP : FORUM_X - int((width / 2)));
            add_event_listener(MouseEvent.CLICK, ShowForum);
            mouseChildren = False;
            useHandCursor = True;
            buttonMode = True;
        };
        DefineCnt(IF_AGB, AGB_X, LOGOUT_Y);
        DefineLbl(LBL_IF_AGB, texts[TXT_AGB_LINK], 0, 0, FontFormat_LOGoutLink)
        add_filter(LBL_IF_AGB, Filter_Shadow);
        MakePersistent(IF_AGB, LBL_IF_AGB);
        _local2 = actor[IF_AGB];
        with (_local2) {
            addChild(actor[LBL_IF_AGB]);
            textLinkMakeClickable(getChildAt(0).parent);
            x = (AGB_X - int((width / 2)));
            add_event_listener(MouseEvent.CLICK, ShowAGB);
            mouseChildren = False;
            useHandCursor = True;
            buttonMode = True;
        };
        DefineCnt(IF_DATENSCHUTZ, DATENSCHUTZ_X, LOGOUT_Y);
        DefineLbl(LBL_IF_DATENSCHUTZ,
                  texts[TXT_DATENSCHUTZ_LINK], 0, 0, FontFormat_LOGoutLink);
        add_filter(LBL_IF_DATENSCHUTZ, Filter_Shadow);
        MakePersistent(IF_DATENSCHUTZ, LBL_IF_DATENSCHUTZ);
        _local2 = actor[IF_DATENSCHUTZ];
        with (_local2) {
            addChild(actor[LBL_IF_DATENSCHUTZ]);
            textLinkMakeClickable(getChildAt(0).parent);
            x = (DATENSCHUTZ_X - int((width / 2)));
            add_event_listener(MouseEvent.CLICK, ShowDatenschutz);
            mouseChildren = False;
            useHandCursor = True;
            buttonMode = True;
        };
        DefineCnt(IF_ANLEITUNG,
                  ((shop_url)!="")
                    ? ANLEITUNG_X_WITH_SHOP
                    : ANLEITUNG_X, LOGOUT_Y);
        DefineLbl(LBL_IF_ANLEITUNG,
                  texts[TXT_ANLEITUNG_LINK], 0, 0, FontFormat_LOGoutLink);
        add_filter(LBL_IF_ANLEITUNG, Filter_Shadow);
        MakePersistent(IF_ANLEITUNG, LBL_IF_ANLEITUNG);
        _local2 = actor[IF_ANLEITUNG];
        with (_local2) {
            addChild(actor[LBL_IF_ANLEITUNG]);
            textLinkMakeClickable(getChildAt(0).parent);
            x = (((shop_url)!="")
                 ? ANLEITUNG_X_WITH_SHOP : ANLEITUNG_X - int((width / 2)));
            add_event_listener(MouseEvent.CLICK, ShowAnleitung);
            mouseChildren = False;
            useHandCursor = True;
            buttonMode = True;
        };
        DefineCnt(IF_SHOP, SHOP_X, LOGOUT_Y);
        DefineLbl(LBL_IF_SHOP,
                  texts[TXT_SHOP_LINK], 0, 0, FontFormat_LOGoutLink);
        add_filter(LBL_IF_SHOP, Filter_Shadow);
        MakePersistent(IF_SHOP, LBL_IF_SHOP);
        _local2 = actor[IF_SHOP];
        with (_local2) {
            addChild(actor[LBL_IF_SHOP]);
            textLinkMakeClickable(getChildAt(0).parent);
            x = (SHOP_X - int((width / 2)));
            add_event_listener(MouseEvent.CLICK, ShowShop);
            mouseChildren = False;
            useHandCursor = True;
            buttonMode = True;
        };
        DefineImg(IF_KRIEGER, "res/gfx/scr/hall/punkt_krieger.png", True, 0, 0)
        DefineImg(IF_JAEGER, "res/gfx/scr/hall/punkt_dieb.png", True, 0, 0);
        DefineImg(IF_MAGIER, "res/gfx/scr/hall/punkt_magier.png", True, 0, 0);
        DefineImg(IF_GOLD, "res/gfx/if/icon_gold.png", True, 0, IF_LBL_GOLD_Y);
        DefineLbl(LBL_IF_GOLD, "", 0, IF_LBL_GOLD_Y, FontFormat_Default);
        DefineImg(IF_SILBER,
                  "res/gfx/if/icon_silber.png", True,
                  IF_LBL_GOLDPILZE_X, IF_LBL_GOLD_Y);
        DefineLbl(LBL_IF_SILBER, "", 0, IF_LBL_GOLD_Y, FontFormat_Default);
        enable_popup(LBL_IF_SILBER, texts[TXT_SILVER_HINT]);
        enable_popup(IF_SILBER, texts[TXT_SILVER_HINT]);
        DefineImg(IF_PILZE, "res/gfx/if/icon_pilz.png", True,
                  IF_LBL_GOLDPILZE_X, IF_LBL_PILZE_Y);
        DefineLbl(LBL_IF_PILZE, "", 0, IF_LBL_PILZE_Y, FontFormat_Default);
        MakePersistent(LBL_IF_GOLD, LBL_IF_PILZE, LBL_IF_SILBER, IF_GOLD,
                       IF_SILBER, IF_PILZE);
        define_bunch(IF_STATS, LBL_IF_GOLD, LBL_IF_PILZE, LBL_IF_SILBER,
                     IF_GOLD, IF_SILBER, IF_PILZE);
        DefineImg(IF_HUTMANN1,
                  "res/gfx/scr/taverne/huetchenspieler/hatplayer1.png",
                  True, 0, 0);
        DefineImg(IF_HUTMANN2,
                  "res/gfx/scr/taverne/huetchenspieler/hatplayer2.png",
                  True, 0, 0);
        DefineImg(IF_HUTMANN_OVL,
                  "res/gfx/scr/taverne/huetchenspieler/hatplayer_ovl.jpg",
                  True, IF_HUTLINK_X, IF_HUTLINK_Y);
        DefineCnt(IF_HUTMANN, IF_HUTLINK_X, IF_HUTLINK_Y);
        DefineImg(IF_TOILET, "res/gfx/scr/taverne/wc_sign.png", True, 0, 0);
        DefineCnt(IF_TOILET, (IF_HUTLINK_X + 90), (IF_HUTLINK_Y + 40));
        MakePersistent(IF_HUTMANN1, IF_HUTMANN2, IF_HUTMANN_OVL, IF_HUTMANN,
                       IF_TOILET, IF_TOILET);
        _local2 = actor[IF_HUTMANN];
        with (_local2) {
            addChild(actor[IF_HUTMANN1]);
            addChild(actor[IF_HUTMANN2]);
        };
        _local2 = actor[IF_TOILET];
        with (_local2) {
            addChild(actor[IF_TOILET]);
        };
        iPosi = 0;
        yOffs = 0;
        DefiniereInterfaceButton(IF_TAVERNE, TXT_TAVERNE);
        DefiniereInterfaceButton(IF_ARENA, TXT_ARENA);
        DefiniereInterfaceButton(IF_ARBEITEN, TXT_ARBEITEN);
        DefiniereInterfaceButton(IF_SCHMIEDE, TXT_SCHMIEDE);
        DefiniereInterfaceButton(IF_ZAUBERLADEN, TXT_ZAUBERLADEN);
        DefiniereInterfaceButton(IF_STALL, TXT_STALL);
        DefiniereInterfaceButton(IF_PILZDEALER, TXT_PILZDEALER);
        yOffs = (yOffs + IF_2);
        DefiniereInterfaceButton(IF_CHARAKTER, TXT_CHARAKTER);
        DefiniereInterfaceButton(IF_POST, TXT_POST);
        DefiniereInterfaceButton(IF_GILDEN, TXT_GILDEN);
        DefiniereInterfaceButton(IF_EHRENHALLE, TXT_EHRENHALLE);
        DefiniereInterfaceButton(IF_WELTKARTE, TXT_WELTKARTE);
        DefiniereInterfaceButton(IF_OPTIONEN, TXT_OPTIONEN);
        actor[IF_WELTKARTE].add_event_listener(MouseEvent.MOUSE_OVER,
                                               dungeonBtnHover);
        actor[IF_WELTKARTE].add_event_listener(MouseEvent.MOUSE_OUT,
                                               dungeonBtnLeave);
        dungeonBtnUpdateDelayTimer = new Timer(500);
        dungeonBtnUpdateDelayTimer.add_event_listener(TimerEvent.TIMER,
                                                      dungeonBtnUpdateDelay);
        actor[IF_ARBEITEN].add_event_listener(MouseEvent.MOUSE_OVER,
                                              workBtnHover);
        actor[IF_ARBEITEN].add_event_listener(MouseEvent.MOUSE_OUT,
                                              workBtnLeave);
        workBtnUpdateDelayTimer = new Timer(500);
        workBtnUpdateDelayTimer.add_event_listener(TimerEvent.TIMER,
                                                   workBtnUpdateDelay);
        actor[IF_TAVERNE].add_event_listener(MouseEvent.MOUSE_OVER,
                                             tavBtnHover);
        actor[IF_TAVERNE].add_event_listener(MouseEvent.MOUSE_OUT,
                                             tavBtnLeave);
        tavBtnUpdateDelayTimer = new Timer(500);
        tavBtnUpdateDelayTimer.add_event_listener(TimerEvent.TIMER,
                                                  tavBtnUpdateDelay);
        actor[IF_ARENA].add_event_listener(MouseEvent.MOUSE_OVER,
                                           arenaBtnHover);
        actor[IF_ARENA].add_event_listener(MouseEvent.MOUSE_OUT,
                                           arenaBtnLeave);
        arenaBtnUpdateDelayTimer = new Timer(500);
        arenaBtnUpdateDelayTimer.add_event_listener(TimerEvent.TIMER,
                                                    arenaBtnUpdateDelay);
        define_bunch(IF_BUTTONS, IF_HUTMANN, IF_TOILET, IF_HUTMANN_OVL,
                     IF_TAVERNE, IF_ARENA, IF_ARBEITEN, IF_SCHMIEDE,
                     IF_ZAUBERLADEN);
        add_bunch(IF_BUTTONS, IF_STALL, IF_PILZDEALER, IF_CHARAKTER, IF_POST,
                  IF_GILDEN, IF_EHRENHALLE, IF_WELTKARTE, IF_OPTIONEN);
        i = IF_DRAGON_1;
        while (i <= IF_DRAGON_13) {
            add_bunch(IF_BUTTONS, i);
            i = (i + 1);
        };
        HutmannLinkTimer = new Timer(50);
        HutmannLinkTimer.add_event_listener(TimerEvent.TIMER,
                                            HutmannLinkAniEvent);
        HutmannLinkTimer.start();
        HutmannLinkVis = False;
        HutmannLinkOver = False;
        HutmannRelY = 0;
        var HutmannFrame:* = 0;
        HutmannAniStep = 0;
        HutmannCountdown = 0;
        _local2 = actor[IF_TAVERNE];
        with (_local2) {
            add_event_listener(MouseEvent.MOUSE_OVER, TaverneBtnIn);
            add_event_listener(MouseEvent.MOUSE_OUT, TaverneBtnOut);
            add_event_listener(MouseEvent.MOUSE_UP, TaverneBtnOut);
        };
        _local2 = actor[IF_HUTMANN];
        with (_local2) {
            add_event_listener(MouseEvent.MOUSE_OVER, TaverneBtnIn);
            add_event_listener(MouseEvent.MOUSE_OUT, TaverneBtnOut);
            add_event_listener(MouseEvent.MOUSE_UP, TaverneBtnOut);
            add_event_listener(MouseEvent.MOUSE_DOWN, ShowHutmann);
            mouseChildren = False;
            useHandCursor = True;
            buttonMode = True;
        };
        _local2 = actor[IF_TOILET];
        with (_local2) {
            add_event_listener(MouseEvent.MOUSE_OVER, TaverneBtnIn);
            add_event_listener(MouseEvent.MOUSE_OUT, TaverneBtnOut);
            add_event_listener(MouseEvent.MOUSE_UP, TaverneBtnOut);
            add_event_listener(MouseEvent.MOUSE_DOWN, RequestToilet);
            mouseChildren = False;
            useHandCursor = True;
            buttonMode = True;
        };
        MakePersistent(IF_BACKGROUND, IF_LEFT, IF_TOP, IF_MAIN);
        DefineFromClass(IF_WINDOW, interface_window_png, IF_WIN_X, IF_WIN_Y);
        DefineFromClass(BLACK_SQUARE, black_square, 0, 0);
        actor[BLACK_SQUARE].alpha = 0.5;
        DefineLbl(LBL_WINDOW_TITLE, "", 0, (IF_WIN_Y + IF_WIN_WELCOME_Y),
                  FontFormat_Heading);
        add_filter(LBL_WINDOW_TITLE, Filter_Shadow);
        iPosi = 0;
        AIRRelMoveY = 0;
        AIRRelMoveYButton = 0;
        AIRRelMoveYButton2 = 0;
        iPosi = (iPosi + 1);
        DefineLbl(LBL_NAME, texts[TXT_NAME], (IF_WIN_X + IF_WIN_INPUTS_X),
                  (((IF_WIN_Y + IF_WIN_INPUTS_Y)
                   + (IF_WIN_INPUTS_DISTANCE_Y * iPosi))
                    + AIRRelMoveY), FontFormat_Default);
        DefineLbl(LBL_LOGIN_PASSWORD, texts[TXT_PASSWORD],
                  (IF_WIN_X + IF_WIN_INPUTS_X),
                  (((IF_WIN_Y + IF_WIN_INPUTS_Y)
                   + (IF_WIN_INPUTS_DISTANCE_Y * iPosi)) + AIRRelMoveY),
                    FontFormat_Default);
        iPosi = (iPosi + 1);
        DefineLbl(LBL_EMAIL, texts[TXT_EMAIL], (IF_WIN_X + IF_WIN_INPUTS_X),
                  (((IF_WIN_Y + IF_WIN_INPUTS_Y)
                   + (IF_WIN_INPUTS_DISTANCE_Y * iPosi)) + AIRRelMoveY),
                    FontFormat_Default);
        iPosi = (iPosi + 1);
        DefineLbl(LBL_PASSWORD, texts[TXT_PASSWORD],
                  (IF_WIN_X + IF_WIN_INPUTS_X),
                  (((IF_WIN_Y + IF_WIN_INPUTS_Y)
                   + (IF_WIN_INPUTS_DISTANCE_Y * iPosi)) + AIRRelMoveY),
                    FontFormat_Default);
        add_filter(LBL_NAME, Filter_Shadow);
        add_filter(LBL_LOGIN_PASSWORD, Filter_Shadow);
        add_filter(LBL_EMAIL, Filter_Shadow);
        add_filter(LBL_PASSWORD, Filter_Shadow);
        DefineFromClass(INP['NAME'], text_input1,
                        (actor[LBL_NAME].x + IF_WIN_INPUTS_FIELD_X),
                        (actor[LBL_NAME].y + IF_WIN_INPUTS_FIELD_Y), 2, "name")
        DefineFromClass(INP['LOGIN_PASSWORD'], text_input2,
                        (actor[LBL_LOGIN_PASSWORD].x + IF_WIN_INPUTS_FIELD_X),
                        (actor[LBL_LOGIN_PASSWORD].y + IF_WIN_INPUTS_FIELD_Y),
                        2, "password");
        DefineFromClass(INP['EMAIL'], text_input2,
                        (actor[LBL_EMAIL].x + IF_WIN_INPUTS_FIELD_X),
                        (actor[LBL_EMAIL].y + IF_WIN_INPUTS_FIELD_Y),
                        2, "email");
        DefineFromClass(INP['PASSWORD'], text_input1,
                        (actor[LBL_PASSWORD].x + IF_WIN_INPUTS_FIELD_X),
                        (actor[LBL_PASSWORD].y + IF_WIN_INPUTS_FIELD_Y),
                        2, "password");
        DefineImg(FILLSPACE, (("res/gfx/if/file" + "space.pn") + "g"), False,
                  280, 100);
        DefineImg(PASSWORD_SMILEY_SAD, "res/gfx/if/smiley_sad.png", False,
                  (((actor[LBL_PASSWORD].x + IF_WIN_INPUTS_FIELD_X)
                   + actor[INP['PASSWORD']].width) + 5),
                    ((actor[LBL_PASSWORD].y + IF_WIN_INPUTS_FIELD_Y) + 3));
        DefineImg(PASSWORD_SMILEY_NEUTRAL, "res/gfx/if/smiley_neutral.png",
                  False,
                  (((actor[LBL_PASSWORD].x + IF_WIN_INPUTS_FIELD_X)
                   + actor[INP['PASSWORD']].width) + 5),
                    ((actor[LBL_PASSWORD].y + IF_WIN_INPUTS_FIELD_Y) + 3));
        DefineImg(PASSWORD_SMILEY_HAPPY, "res/gfx/if/smiley_happy.png", False,
                  (((actor[LBL_PASSWORD].x + IF_WIN_INPUTS_FIELD_X)
                   + actor[INP['PASSWORD']].width) + 5),
                    ((actor[LBL_PASSWORD].y + IF_WIN_INPUTS_FIELD_Y) + 3));
        enable_popup(PASSWORD_SMILEY_SAD,
                     texts[TXT_PASSWORD_SMILEY_SAD].split("#").join(chr(13)));
        enable_popup(PASSWORD_SMILEY_NEUTRAL,
                     texts[TXT_PASSWORD_SMILEY_NEUTRAL]
                        .split("#").join(chr(13)));
        enable_popup(PASSWORD_SMILEY_HAPPY,
                     texts[TXT_PASSWORD_SMILEY_HAPPY].split("#").join(chr(13)))
        actor[INP['PASSWORD']].add_event_listener(KeyboardEvent.KEY_UP,
                                                  gradePassword);
        DefineCnt(FORGOT_PASSWORD, 0,
                  (((IF_WIN_Y + IF_WIN_Y) + IF_WIN_LNK_1_Y) + AIRRelMoveY));
        DefineLbl(LBL_FORGOT_PASSWORD, texts[TXT_FORGOT_PASSWORD], 0, 0,
                  FontFormat_Default);
        add_filter(LBL_FORGOT_PASSWORD, Filter_Shadow);
        DefineCnt(GOTO_LOGIN, 0,
                  ((IF_WIN_Y + IF_WIN_Y) + IF_WIN_LNK_2_Y) + AIRRelMoveYButton)
        DefineLbl(LBL_GOTO_LOGIN, texts[TXT_GOTO_LOGIN], 0, 0,
                  FontFormat_Default);
        DefineCnt(GOTO_SIGNUP, 0,
                  (IF_WIN_Y + IF_WIN_Y + IF_WIN_LNK_2_Y) + AIRRelMoveYButton2)
        DefineLbl(LBL_GOTO_SIGNUP, texts[TXT_GOTO_SIGNUP], 0, 0,
                  FontFormat_Default);
        add_filter(LBL_GOTO_LOGIN, Filter_Shadow);
        add_filter(LBL_GOTO_SIGNUP, Filter_Shadow);
        MakePersistent(LBL_FORGOT_PASSWORD, LBL_GOTO_LOGIN, LBL_GOTO_SIGNUP);
        _local2 = actor[FORGOT_PASSWORD];
        with (_local2) {
            x = ((IF_WIN_X + IF_WIN_WELCOME_X)
                 - int((actor[LBL_FORGOT_PASSWORD].text_width / 2)));
            addChild(actor[LBL_FORGOT_PASSWORD]);
            textLinkMakeClickable(getChildAt(0).parent);
            add_event_listener(MouseEvent.CLICK, ShowForgotPasswordScreen);
            mouseChildren = False;
            useHandCursor = True;
            buttonMode = True;
        };
        _local2 = actor[GOTO_LOGIN];
        with (_local2) {
            x = ((IF_WIN_X + IF_GOTO_LOGIN_X)
                 - int(actor[LBL_GOTO_LOGIN].text_width));
            addChild(actor[LBL_GOTO_LOGIN]);
            textLinkMakeClickable(getChildAt(0).parent);
            add_event_listener(MouseEvent.CLICK, ShowBuildCharacterScreen);
            mouseChildren = False;
            useHandCursor = True;
            buttonMode = True;
        };
        _local2 = actor[GOTO_SIGNUP];
        with (_local2) {
            x = ((IF_WIN_X + IF_WIN_WELCOME_X)
                 - int((actor[LBL_GOTO_SIGNUP].text_width / 2)));
            addChild(actor[LBL_GOTO_SIGNUP]);
            textLinkMakeClickable(getChildAt(0).parent);
            add_event_listener(MouseEvent.CLICK, DoGotoSignup);
            mouseChildren = False;
            useHandCursor = True;
            buttonMode = True;
        };
        actor[INP['PASSWORD']].getChildAt(1).displayAsPassword = True;
        actor[INP['LOGIN_PASSWORD']].getChildAt(1).displayAsPassword = True;
        DefineFromClass(CB_AGB_UNCHECKED, cb_unchecked,
                        (IF_WIN_X + IF_WIN_CB_X),
                        ((IF_WIN_Y + IF_WIN_CB_Y) + AIRRelMoveY));
        actor[CB_AGB_UNCHECKED].add_event_listener(MouseEvent.CLICK, CheckAGB);
        DefineFromClass(CB['AGB_CHECKED'], cb_checked,
                        (IF_WIN_X + IF_WIN_CB_X),
                        ((IF_WIN_Y + IF_WIN_CB_Y) + AIRRelMoveY));
        actor[CB['AGB_CHECKED']].add_event_listener(MouseEvent.CLICK,
                                                    UncheckAGB);
        DefineLbl(LBL_LOGIN_LEGAL_0,
                  (((texts[TXT_LOGIN_LEGAL_2] == ""))
                   ? texts[TXT_LOGIN_LEGAL_1].split("%link")[0] : ""),
                    (actor[CB_AGB_UNCHECKED].x + AGB_LBL_X),
                    (actor[CB_AGB_UNCHECKED].y + AGB_LBL_Y));
        add_filter(LBL_LOGIN_LEGAL_0, Filter_Shadow);
        DefineCnt(AGB, ((actor[LBL_LOGIN_LEGAL_0].x + 6)
                  + actor[LBL_LOGIN_LEGAL_0].width),
                    (actor[CB_AGB_UNCHECKED].y + AGB_LBL_Y));
        DefineLbl(LBL_AGB, texts[TXT_AGB], 0, 0, FontFormat_Default);
        add_filter(LBL_AGB, Filter_Shadow);
        MakePersistent(LBL_AGB);
        _local2 = actor[AGB];
        with (_local2) {
            addChild(actor[LBL_AGB]);
            add_event_listener(MouseEvent.CLICK, ShowAGB);
            mouseChildren = False;
            useHandCursor = True;
            buttonMode = True;
        };
        DefineLbl(LBL_LOGIN_LEGAL_1,
                  (((texts[TXT_LOGIN_LEGAL_2] == ""))
                   ? texts[TXT_LOGIN_LEGAL_1].split("%link")[1]
                   : texts[TXT_LOGIN_LEGAL_1]),
                    ((actor[AGB].x + 6) + actor[AGB].width),
                    (actor[CB_AGB_UNCHECKED].y + AGB_LBL_Y));
        add_filter(LBL_LOGIN_LEGAL_1, Filter_Shadow);
        DefineCnt(DATENSCHUTZ,
                  ((actor[LBL_LOGIN_LEGAL_1].x + 6)
                   + actor[LBL_LOGIN_LEGAL_1].width),
                    (actor[CB_AGB_UNCHECKED].y + AGB_LBL_Y));
        DefineLbl(LBL_DATENSCHUTZ, texts[TXT_DATENSCHUTZ], 0, 0,
                  FontFormat_Default);
        add_filter(LBL_DATENSCHUTZ, Filter_Shadow);
        MakePersistent(LBL_DATENSCHUTZ);
        _local2 = actor[DATENSCHUTZ];
        with (_local2) {
            addChild(actor[LBL_DATENSCHUTZ]);
            add_event_listener(MouseEvent.CLICK, ShowDatenschutz);
            mouseChildren = False;
            useHandCursor = True;
            buttonMode = True;
        };
        DefineLbl(LBL_LOGIN_LEGAL_2,
                  (((texts[TXT_LOGIN_LEGAL_2] == ""))
                   ? texts[TXT_LOGIN_LEGAL_1].split("%link")[2]
                   : texts[TXT_LOGIN_LEGAL_2]),
                  ((actor[DATENSCHUTZ].x + 6) + actor[DATENSCHUTZ].width),
                  (actor[CB_AGB_UNCHECKED].y + AGB_LBL_Y));
        add_filter(LBL_LOGIN_LEGAL_2, Filter_Shadow);
        textLinkMakeClickable(actor[AGB]);
        textLinkMakeClickable(actor[DATENSCHUTZ]);
        DefineFromClass(SHP_FUCK_BLACK_SQUARE, black_square, 310,
                        ((IF_WIN_Y + IF_WIN_CB_Y) + 125));
        _local2 = actor[SHP_FUCK_BLACK_SQUARE];
        with (_local2) {
            width = 930;
            height = 90;
            alpha = 0.6;
        };
        DefineFromClass(CB_FUCK_UNCHECKED, cb_unchecked, 320,
                        ((IF_WIN_Y + IF_WIN_CB_Y) + 150));
        actor[CB_FUCK_UNCHECKED].add_event_listener(MouseEvent.CLICK,
                                                    CheckFuck);
        DefineFromClass(CB_FUCK_CHECKED, cb_checked, 320,
                        ((IF_WIN_Y + IF_WIN_CB_Y) + 150));
        actor[CB_FUCK_CHECKED].add_event_listener(MouseEvent.CLICK,
                                                  UncheckFuck);
        DefineLbl(LBL_FUCK, param_bullshit_text, 380,
                  ((IF_WIN_Y + IF_WIN_CB_Y) + 150), FontFormat_Bullshit);
        add_filter(LBL_FUCK, Filter_Shadow);
        _local2 = actor[LBL_FUCK];
        with (_local2) {
            width = 840;
            wordWrap = True;
        };
        define_bunch(FUCK, SHP_FUCK_BLACK_SQUARE, CB_FUCK_UNCHECKED, LBL_FUCK);
        define_btn(IF_LOGIN, texts[TXT_LOGIN], RequestLOGin, btn_classBasic,
                   ((IF_WIN_X + IF_WIN_WELCOME_X) + IF_WIN_X),
                   ((IF_WIN_Y + IF_WIN_Y) + AIRRelMoveYButton2));
        define_btn(IF_SIGNUP, texts[TXT_SIGNUP], request_signup,
                   btn_classBasic, ((IF_WIN_X + IF_WIN_WELCOME_X) + IF_WIN_X),
                   (((IF_WIN_Y + IF_WIN_Y) + IF_WIN_2_Y) + AIRRelMoveYButton));
        define_btn(IF_REQUEST_PASSWORD, texts[TXT_REQUEST_PASSWORD],
                   RequestPassword, btn_classBasic,
                   ((IF_WIN_X + IF_WIN_WELCOME_X) + IF_WIN_X),
                   ((IF_WIN_Y + IF_WIN_Y) + AIRRelMoveY));
        DefineLbl(LBL['ERROR'], "", IF_ERROR_X, IF_ERROR_Y, FontFormat_Error);
        add_filter(LBL['ERROR'], Filter_Shadow);
        define_bunch(WINDOW_LOGIN, BLACK_SQUARE, IF_WINDOW, LBL_WINDOW_TITLE,
                     IF_LOGIN, LBL_NAME, INP['NAME']);
        add_bunch(WINDOW_LOGIN, LBL_LOGIN_PASSWORD, INP['LOGIN_PASSWORD'],
                  GOTO_SIGNUP, FORGOT_PASSWORD);
        define_bunch(WINDOW_SIGNUP, BLACK_SQUARE, IF_WINDOW, LBL_WINDOW_TITLE,
                     IF_SIGNUP, LBL_NAME, INP['NAME']);
        add_bunch(WINDOW_SIGNUP, LBL_EMAIL, INP['EMAIL'], LBL_PASSWORD,
                  INP['PASSWORD'], GOTO_LOGIN, CB_AGB_UNCHECKED, AGB,
                  LBL_LOGIN_LEGAL_0, LBL_LOGIN_LEGAL_1, LBL_LOGIN_LEGAL_2,
                  DATENSCHUTZ);
        add_bunch(WINDOW_SIGNUP, PASSWORD_SMILEY_SAD, PASSWORD_SMILEY_NEUTRAL,
                  PASSWORD_SMILEY_HAPPY);
        define_bunch(WINDOW_FORGOT_PASSWORD, BLACK_SQUARE, IF_WINDOW,
                     LBL_WINDOW_TITLE, IF_REQUEST_PASSWORD, LBL_NAME,
                     INP['NAME']);
        add_bunch(WINDOW_FORGOT_PASSWORD, LBL_EMAIL, INP['EMAIL'], GOTO_LOGIN);
        DrachenSetzen();
        PulseTimer = new Timer(20);
        PulseLevel = 0;
        _local2 = PulseTimer;
        with (_local2) {
            add_event_listener(TimerEvent.TIMER, PulseEvent);
            start();
        };
        DefineImg(SCR_BUILDCHAR_BACKGROUND,
                  "res/gfx/scr/buildchar/char_erstellung.png", False,
                  SCR_BUILDCHAR_1_X, SCR_BUILDCHAR_1_Y);
        define_bunch(SCR_BUILDCHAR, SCR_BUILDCHAR_BACKGROUND, IF_MAIN);
        DefineLbl(LBL_SCREEN_TITLE, texts[TXT_CREATE_CHARACTER],
                  SCREEN_TITLE_X, SCREEN_TITLE_Y, FontFormat_ScreenTitle);
        add_filter(LBL_SCREEN_TITLE, Filter_Shadow);
        actor[LBL_SCREEN_TITLE].x = (SCREEN_TITLE_X
                             - int((actor[LBL_SCREEN_TITLE].text_width / 2)));
        define_btn(RANDOM, texts[TXT_RANDOM], RandomizeCharImage,
                   btn_classLOGin, SCREEN_RANDOM_BUTTON_X,
                   SCREEN_RANDOM_BUTTON_Y);
        define_btn(CREATE_CHARACTER, texts[TXT_CREATE_CHARACTER],
                   ShowSignupScreen, btn_classBasic, SCR_BUILDCHAR_CREATE_X,
                   SCR_BUILDCHAR_CREATE_Y);
        define_btn(MODIFY_CHARACTER, texts[TXT_MODIFY_CHARACTER],
                   RequestChangeFace, btn_classBasic, SCR_BUILDCHAR_CREATE_X,
                   SCR_BUILDCHAR_CREATE_Y);
        DefineLbl(LBL_CREATE_RACE, "", CREATE_RACE_X, CREATE_RACE_Y,
                  FontFormat_Default);
        DefineLbl(LBL_CREATE_RACE_DESC, "", CREATE_RACE_X, 0,
                  FontFormat_DefaultLeft);
        _local2 = actor[LBL_CREATE_RACE_DESC];
        with (_local2) {
            width = BUILDCHAR_LINES_X;
            wordWrap = True;
        };
        DefineLbl(LBL_CREATE_CLASS, "", CREATE_RACE_X, 0, FontFormat_Default);
        DefineLbl(LBL_CREATE_CLASS_DESC, "", CREATE_RACE_X, 0,
                  FontFormat_DefaultLeft);
        _local2 = actor[LBL_CREATE_CLASS_DESC];
        with (_local2) {
            width = BUILDCHAR_LINES_X;
            wordWrap = True;
        };
        add_filter(LBL_CREATE_RACE, Filter_Shadow);
        add_filter(LBL_CREATE_RACE_DESC, Filter_Shadow);
        add_filter(LBL_CREATE_CLASS, Filter_Shadow);
        add_filter(LBL_CREATE_CLASS_DESC, Filter_Shadow);
        DefineLbl(LBL_CREATE_GOTO_LOGIN, texts[TXT_CREATE_GOTO_LOGIN], 0, 0,
                  FontFormat_Default);
        add_filter(LBL_CREATE_GOTO_LOGIN, Filter_Shadow);
        MakePersistent(LBL_CREATE_GOTO_LOGIN);
        DefineCnt(CREATE_GOTO_LOGIN, 0, SCR_BUILDCHAR_LOGIN_Y);
        _local2 = actor[CREATE_GOTO_LOGIN];
        with (_local2) {
            addChild(actor[LBL_CREATE_GOTO_LOGIN]);
            textLinkMakeClickable(getChildAt(0).parent);
            mouseChildren = False;
            mouse_enabled = True;
            buttonMode = True;
            useHandCursor = True;
            add_event_listener(MouseEvent.CLICK, ShowLOGinScreen);
            x = (SCR_BUILDCHAR_LOGIN_X
                 - actor[LBL_CREATE_GOTO_LOGIN].text_width);
        };
        DefineImg(M_IDLE, "res/gfx/scr/buildchar/button_male_idle.jpg", False,
                  SCR_BUILDCHAR_GENDER_X, SCR_BUILDCHAR_GENDER_Y);
        DefineCnt(M_ACT, SCR_BUILDCHAR_GENDER_X, SCR_BUILDCHAR_GENDER_Y);
        DefineImg(F_IDLE, "res/gfx/scr/buildchar/button_female_idle.jpg",
                  False, (SCR_BUILDCHAR_GENDER_X + SCR_BUILDCHAR_GENDER_X),
                  SCR_BUILDCHAR_GENDER_Y);
        DefineCnt(F_ACT, (SCR_BUILDCHAR_GENDER_X + SCR_BUILDCHAR_GENDER_X),
                  SCR_BUILDCHAR_GENDER_Y);
        actor[M_IDLE].add_event_listener(MouseEvent.CLICK, SelectGender);
        actor[F_IDLE].add_event_listener(MouseEvent.CLICK, SelectGender);
        i = 0;
        while (i < 2) {
            enable_popup((M_IDLE + (i * 2)), texts[(TXT_GENDER_M + i)]);
            enable_popup((M_ACT + (i * 2)), texts[(TXT_GENDER_M + i)]);
            i = (i + 1);
        };
        DefineImg(KASTE_1_IDLE,
                  "res/gfx/scr/buildchar/button_warrior_idle.jpg", False,
                  SCR_BUILDCHAR_CASTE_X, SCR_BUILDCHAR_CASTE_Y);
        DefineCnt(KASTE_1_ACT, SCR_BUILDCHAR_CASTE_X, SCR_BUILDCHAR_CASTE_Y);
        DefineImg(KASTE_2_IDLE, "res/gfx/scr/buildchar/button_mage_idle.jpg",
                  False, (SCR_BUILDCHAR_CASTE_X + SCR_BUILDCHAR_CASTE_X),
                  SCR_BUILDCHAR_CASTE_Y);
        DefineCnt(KASTE_2_ACT, (SCR_BUILDCHAR_CASTE_X + SCR_BUILDCHAR_CASTE_X),
                  SCR_BUILDCHAR_CASTE_Y);
        DefineImg(KASTE_3_IDLE, "res/gfx/scr/buildchar/button_hunter_idle.jpg",
                  False, (SCR_BUILDCHAR_CASTE_X + (SCR_BUILDCHAR_CASTE_X * 2)),
                  SCR_BUILDCHAR_CASTE_Y);
        DefineCnt(KASTE_3_ACT,
                  (SCR_BUILDCHAR_CASTE_X + (SCR_BUILDCHAR_CASTE_X * 2)),
                  SCR_BUILDCHAR_CASTE_Y);
        actor[KASTE_1_IDLE].add_event_listener(MouseEvent.CLICK, SelectCaste);
        actor[KASTE_2_IDLE].add_event_listener(MouseEvent.CLICK, SelectCaste);
        actor[KASTE_3_IDLE].add_event_listener(MouseEvent.CLICK, SelectCaste);
        i = 0;
        while (i < 3) {
            enable_popup((KASTE_1_IDLE + (i * 2)), texts[(TXT_CLASSNAME + i)]);
            enable_popup((KASTE_1_ACT + (i * 2)), texts[(TXT_CLASSNAME + i)]);
            i = (i + 1);
        };
        define_bunch(VOLK_BTNS_M);
        define_bunch(VOLK_BTNS_F);
        define_bunch(VOLK_BTNS_ALL);
        DefineImg(VOLK_MARKER, "res/gfx/scr/buildchar/button_marked.png", True)
        whendo_loaded(CloneMarker);
        i = 0;
        while (i <= 7) {
            pos_x = (SCR_BUILDCHAR_VOLK_X + ((i)<4) ? 0 : SCR_BUILDCHAR_VOLK_X)
            pos_y = (SCR_BUILDCHAR_VOLK_Y
                     + (((i)<4) ? i : (i - 4) * SCR_BUILDCHAR_VOLK_Y));
            Switch ((i + 1)){
                if case(1:
                    volk = "human";
                    break;
                if case(2:
                    volk = "elf";
                    break;
                if case(3:
                    volk = "dwarf";
                    break;
                if case(4:
                    volk = "gnome";
                    break;
                if case(5:
                    volk = "orc";
                    break;
                if case(6:
                    volk = "darkelf";
                    break;
                if case(7:
                    volk = "goblin";
                    break;
                if case(8:
                    volk = "demon";
                    break;
            };
            DefineImg((VOLK_1_M_IDLE + i),
                      "res/gfx/scr/buildchar/button_" + volk
                      + "_male_idle.jpg", False, pos_x, pos_y);
            DefineCnt((VOLK_1_M_ACT + i), pos_x, pos_y);
            DefineImg((VOLK_1_F_IDLE + i),
                      "res/gfx/scr/buildchar/button_" + volk
                      + "_female_idle.jpg", False, pos_x, pos_y);
            DefineCnt((VOLK_1_F_ACT + i), pos_x, pos_y);
            add_bunch(VOLK_BTNS_M, (VOLK_1_M_IDLE + i));
            add_bunch(VOLK_BTNS_F, (VOLK_1_F_IDLE + i));
            add_bunch(VOLK_BTNS_ALL, (VOLK_1_M_IDLE + i),
                      (VOLK_1_M_ACT + i), (VOLK_1_F_IDLE + i),
                      (VOLK_1_F_ACT + i));
            actor[(VOLK_1_M_IDLE + i)].add_event_listener(MouseEvent.CLICK,
                                                          SelectRace);
            actor[(VOLK_1_F_IDLE + i)].add_event_listener(MouseEvent.CLICK,
                                                          SelectRace);
            enable_popup((VOLK_1_M_IDLE + i), texts[(TXT_RACENAME + i)]);
            enable_popup((VOLK_1_M_ACT + i), texts[(TXT_RACENAME + i)]);
            enable_popup((VOLK_1_F_IDLE + i), texts[(TXT_RACENAME + i)]);
            enable_popup((VOLK_1_F_ACT + i), texts[(TXT_RACENAME + i)]);
            i = (i + 1);
        };
        i = 0;
        while (i < 10) {
            DefineImg((CHARBACKGROUND + i), "", False,
                      ((SCREEN_TITLE_X - 150) + CHARX),
                      (SCREEN_TITLE_Y + CHARY));
            DefineImg((CHARBACKGROUND2 + i), "", False,
                      ((SCREEN_TITLE_X - 150) + CHARX),
                      (SCREEN_TITLE_Y + CHARY));
            i = (i + 1);
        };
        define_btn(MOUTH_MINUS, "", ModifyCharacter, btn_classArrowLeft);
        define_btn(MOUTH_PLUS, "", ModifyCharacter, btn_classArrowRight);
        define_btn(HAIR_MINUS, "", ModifyCharacter, btn_classArrowLeft);
        define_btn(HAIR_PLUS, "", ModifyCharacter, btn_classArrowRight);
        define_btn(BROWS_MINUS, "", ModifyCharacter, btn_classArrowLeft);
        define_btn(BROWS_PLUS, "", ModifyCharacter, btn_classArrowRight);
        define_btn(EYES_MINUS, "", ModifyCharacter, btn_classArrowLeft);
        define_btn(EYES_PLUS, "", ModifyCharacter, btn_classArrowRight);
        define_btn(NOSE_MINUS, "", ModifyCharacter, btn_classArrowLeft);
        define_btn(NOSE_PLUS, "", ModifyCharacter, btn_classArrowRight);
        define_btn(EARS_MINUS, "", ModifyCharacter, btn_classArrowLeft);
        define_btn(EARS_PLUS, "", ModifyCharacter, btn_classArrowRight);
        define_btn(BEARD_MINUS, "", ModifyCharacter, btn_classArrowLeft);
        define_btn(BEARD_PLUS, "", ModifyCharacter, btn_classArrowRight);
        define_btn(SPECIAL_MINUS, "", ModifyCharacter, btn_classArrowLeft);
        define_btn(SPECIAL_PLUS, "", ModifyCharacter, btn_classArrowRight);
        define_btn(SPECIAL2_MINUS, "", ModifyCharacter, btn_classArrowLeft);
        define_btn(SPECIAL2_PLUS, "", ModifyCharacter, btn_classArrowRight);
        define_btn(COLOR_MINUS, "", ModifyCharacter, btn_classArrowLeft);
        define_btn(COLOR_PLUS, "", ModifyCharacter, btn_classArrowRight);
        i = 0;
        while (i < 10) {
            DefineLbl((LBL_MOUTH + i),
                      (((i == 9))
                       ? texts[TXT_COLOR] : ((i)<7)
                       ? texts[(TXT_MOUTH + i)]
                       : texts[((TXT_SPECIAL + i) - 7)]),
                        0, 0, FontFormat_Default);
            add_filter((LBL_MOUTH + i), Filter_Shadow);
            i = (i + 1);
        };
        define_bunch(CHARIMG, CHARBACKGROUND, CHARMOUTH, CHAREARS, CHARBEARD,
                     CHARNOSE, CHAREYES, CHARBROWS, CHARSPECIAL, CHARSPECIAL2,
                     CHARHAIR);
        define_bunch(CHARIMG2, CHARBACKGROUND2, CHARMOUTH2, CHAREARS2,
                     CHARBEARD2, CHARNOSE2, CHAREYES2, CHARBROWS2,
                     CHARSPECIAL12, CHARSPECIAL22, CHARHAIR2);
        define_bunch(CHARSPECIALOVL_ELF_M, CHARBROWS);
        define_bunch(CHARSPECIALOVL_GOBLIN_M, CHARBROWS, CHAREARS, CHARBEARD,
                     CHARMOUTH, CHARNOSE);
        define_bunch(CHARSPECIALOVL_DWARF_M, CHAREYES, CHARSPECIAL, CHARHAIR);
        define_bunch(CHARSPECIALOVL_HUMAN_M, CHARBEARD);
        define_bunch(CHARSPECIALOVL_GOBLIN_F, CHARMOUTH, CHARHAIR, CHARNOSE);
        define_bunch(CHARSPECIALOVL_ORC_F, CHARMOUTH, CHARHAIR);
        define_bunch(CHARSPECIALOVL_ELF_F, CHARNOSE, CHAREYES, CHARBROWS,
                     CHARHAIR, CHAREARS, CHARMOUTH);
        define_bunch(CHARSPECIALOVL_HUMAN_F, CHARBROWS, CHAREYES, CHARHAIR,
                     CHAREARS);
        define_bunch(CHARSPECIALOVL_DWARF_F, CHARBROWS, CHAREYES, CHARHAIR);
        define_bunch(CHARSPECIALOVL_GNOM_M, CHARBEARD, CHARHAIR);
        define_bunch(CHARSPECIALOVL_DARKELF_M, CHAREARS);
        define_bunch(SCREEN_BUILDCHAR, SCR_BUILDCHAR, BLACK_SQUARE,
                     LBL_SCREEN_TITLE, CHARIMG, RANDOM, CREATE_CHARACTER);
        add_bunch(SCREEN_BUILDCHAR, LBL_CREATE_RACE, LBL_CREATE_RACE_DESC,
                  LBL_CREATE_CLASS, LBL_CREATE_CLASS_DESC, CREATE_GOTO_LOGIN);
        add_bunch(SCREEN_BUILDCHAR, MOUTH_MINUS, MOUTH_PLUS);
        add_bunch(SCREEN_BUILDCHAR, HAIR_MINUS, HAIR_PLUS);
        add_bunch(SCREEN_BUILDCHAR, COLOR_MINUS, COLOR_PLUS);
        add_bunch(SCREEN_BUILDCHAR, BROWS_MINUS, BROWS_PLUS);
        add_bunch(SCREEN_BUILDCHAR, EYES_MINUS, EYES_PLUS);
        add_bunch(SCREEN_BUILDCHAR, BEARD_MINUS, BEARD_PLUS);
        add_bunch(SCREEN_BUILDCHAR, NOSE_MINUS, NOSE_PLUS);
        add_bunch(SCREEN_BUILDCHAR, EARS_MINUS, EARS_PLUS);
        add_bunch(SCREEN_BUILDCHAR, SPECIAL_MINUS, SPECIAL_PLUS);
        add_bunch(SCREEN_BUILDCHAR, SPECIAL2_MINUS, SPECIAL2_PLUS);
        i = 0;
        while (i < 9) {
            add_bunch(SCREEN_BUILDCHAR, (LBL_MOUTH + i));
            i = (i + 1);
        };
        DefineImg(SCR_CITY_BACKG_NIGHT,
                  "res/gfx/scr/stadt/stadt_nacht_background.jpg",
                  False, STADT_BACKG_X, STADT_BACKG_Y);
        DefineImg(SCR_CITY_BACKG_DAWN,
                  "res/gfx/scr/stadt/stadt_abend_background.jpg",
                  False, STADT_BACKG_X, STADT_BACKG_Y);
        DefineImg(SCR_CITY_BACKG_DAY,
                  "res/gfx/scr/stadt/stadt_tag_background.jpg",
                  False, STADT_BACKG_X, STADT_BACKG_Y);
        DefineImg(SCR_CITY_MAIN_NIGHT,
                  "res/gfx/scr/stadt/stadt_nacht_unten.jpg", False,
                  STADT_MAIN_X, STADT_MAIN_Y);
        DefineImg(SCR_CITY_MAIN_DAWN,
                  "res/gfx/scr/stadt/stadt_abend_unten.jpg",
                  False, STADT_MAIN_X, STADT_MAIN_Y);
        DefineImg(SCR_CITY_MAIN_DAY,
                  "res/gfx/scr/stadt/stadt_tag_unten.jpg",
                  False, STADT_MAIN_X, STADT_MAIN_Y);
        DefineImg(SCR_CITY_FOREG_NIGHT,
                  "res/gfx/scr/stadt/stadt_nacht_vordergrund.png",
                  False, STADT_BACKG_X, (STADT_BACKG_Y + STADT_FOREG_Y));
        DefineImg(SCR_CITY_FOREG_DAWN,
                  "res/gfx/scr/stadt/stadt_abend_vordergrund.png",
                  False, STADT_BACKG_X, (STADT_BACKG_Y + STADT_FOREG_Y));
        DefineImg(SCR_CITY_FOREG_DAY,
                  "res/gfx/scr/stadt/stadt_tag_vordergrund.png",
                  False, STADT_BACKG_X, (STADT_BACKG_Y + STADT_FOREG_Y));
        if (Capabilities.version[0: 3] == "IOS"){
            define_bunch(SCREEN_CITY_NIGHT, SCR_CITY_BACKG_NIGHT,
                         SCR_CITY_MAIN_NIGHT, SCR_CITY_FOREG_NIGHT,
                         CITY_WACHE_NIGHT);
            define_bunch(SCREEN_CITY_DAWN, SCR_CITY_BACKG_DAWN,
                         SCR_CITY_MAIN_DAWN, SCR_CITY_FOREG_DAWN,
                         CITY_WACHE_NIGHT);
            define_bunch(SCREEN_CITY_DAY, SCR_CITY_BACKG_DAY,
                         SCR_CITY_MAIN_DAY, SCR_CITY_FOREG_DAY,
                         CITY_WACHE_DAY);
        } else {
            DefineImg(SCR_CITY_CLOUDS_NIGHT,
                      "res/gfx/scr/stadt/wolken_nacht.swf", False,
                      STADT_BACKG_X, STADT_BACKG_Y);
            DefineImg(SCR_CITY_CLOUDS_DAWN,
                      "res/gfx/scr/stadt/wolken_abend.swf", False,
                      STADT_BACKG_X, STADT_BACKG_Y);
            DefineImg(SCR_CITY_CLOUDS_DAY,
                      "res/gfx/scr/stadt/wolken_tag.swf", False,
                      STADT_BACKG_X, STADT_BACKG_Y);
            define_bunch(SCREEN_CITY_NIGHT,
                         SCR_CITY_BACKG_NIGHT, SCR_CITY_MAIN_NIGHT,
                         SCR_CITY_CLOUDS_NIGHT, SCR_CITY_FOREG_NIGHT,
                         CITY_WACHE_NIGHT);
            define_bunch(SCREEN_CITY_DAWN, SCR_CITY_BACKG_DAWN,
                         SCR_CITY_MAIN_DAWN, SCR_CITY_CLOUDS_DAWN,
                         SCR_CITY_FOREG_DAWN, CITY_WACHE_NIGHT);
            define_bunch(SCREEN_CITY_DAY, SCR_CITY_BACKG_DAY,
                         SCR_CITY_MAIN_DAY, SCR_CITY_CLOUDS_DAY,
                         SCR_CITY_FOREG_DAY, CITY_WACHE_DAY);
        };
        DefineImg(CITY_SHAKES,
                  "res/gfx/scr/stadt/overlay_waffenladen.png",
                  False, CITY_SHAKES_X, CITY_SHAKES_Y);
        DefineImg(CITY_ZAUBERLADEN,
                  "res/gfx/scr/stadt/overlay_zauberladen.png",
                  False, CITY_ZAUBERLADEN_X, CITY_ZAUBERLADEN_Y);
        DefineImg(CITY_RUHMESHALLE,
                  "res/gfx/scr/stadt/overlay_ruhmeshalle.png",
                  False, CITY_RUHMESHALLE_X, CITY_RUHMESHALLE_Y);
        DefineImg(CITY_ARENA,
                  "res/gfx/scr/stadt/arena_glow.png", False,
                  CITY_ARENA_X, CITY_ARENA_Y);
        DefineImg(CITY_ARENA_ONO1,
                  "res/gfx/scr/stadt/arena2.png", False, CITY_ARENA_X,
                  CITY_ARENA_Y);
        DefineImg(CITY_ARENA_ONO2,
                  "res/gfx/scr/stadt/arena3.png", False, CITY_ARENA_X,
                  CITY_ARENA_Y);
        DefineImg(CITY_ARENA_ONO3,
                  "res/gfx/scr/stadt/arena4.png",
                  False, CITY_ARENA_X, CITY_ARENA_Y);
        DefineImg(CITY_ARENA_ONO4,
                  "res/gfx/scr/stadt/arena5.png",
                   False, CITY_ARENA_X, CITY_ARENA_Y);
        DefineImg(CITY_DEALER,
                  "res/gfx/scr/stadt/dealer_mouseover.png",
                  False, CITY_DEALER_X, CITY_DEALER_Y);
        DefineImg(CITY_DEALER_ANI1,
                  "res/gfx/scr/stadt/dealer1.png",
                  False, CITY_DEALER_X, CITY_DEALER_Y);
        DefineImg(CITY_DEALER_ANI2,
                  "res/gfx/scr/stadt/dealer2.png",
                  False, CITY_DEALER_X, CITY_DEALER_Y);
        DefineImg(CITY_DEALER_ANI3,
                  "res/gfx/scr/stadt/dealer3.png",
                  False, CITY_DEALER_X, CITY_DEALER_Y);
        DefineImg(CITY_DEALER_ANI4,
                  "res/gfx/scr/stadt/dealer4.png",
                  False, CITY_DEALER_X, CITY_DEALER_Y);
        DefineImg(CITY_DEALER_ANI5,
                  "res/gfx/scr/stadt/dealer5.png",
                  False, CITY_DEALER_X, CITY_DEALER_Y);
        DefineImg(CITY_ESEL1,
                  "res/gfx/scr/stadt/esel1.png",
                  False, CITY_ESEL_X, CITY_ESEL_Y);
        DefineImg(CITY_ESEL2,
                  "res/gfx/scr/stadt/esel2.png",
                  True, CITY_ESEL_X, CITY_ESEL_Y);
        DefineImg(CITY_TAVERNE,
                  "res/gfx/scr/stadt/kneipe.png",
                  False, CITY_TAVERNE_X, CITY_TAVERNE_Y);
        DefineImg(CITY_POST,
                  "res/gfx/scr/stadt/post.png",
                  False, CITY_POST_X, CITY_POST_Y);
        DefineImg(CITY_WACHE_DAY,
                  "res/gfx/scr/stadt/stadtwache_tag.png",
                  False, CITY_WACHE_X, CITY_WACHE_Y);
        DefineImg(CITY_WACHE_NIGHT,
                  "res/gfx/scr/stadt/stadtwache_abend_nacht.png",
                  False, CITY_WACHE_X, CITY_WACHE_Y);
        DefineImg(CITY_SCHILD1,
                  "res/gfx/scr/stadt/schild1.png",
                  True, CITY_SCHILD_X, CITY_SCHILD_Y);
        DefineImg(CITY_SCHILD2,
                  "res/gfx/scr/stadt/schild2.png",
                  True, CITY_SCHILD_X, CITY_SCHILD_Y);
        DefineImg(CITY_SCHILD3,
                  "res/gfx/scr/stadt/schild3.png",
                  True, CITY_SCHILD_X, CITY_SCHILD_Y);
        DefineImg(CITY_SCHILD4,
                  "res/gfx/scr/stadt/schild4.png",
                  True, CITY_SCHILD_X, CITY_SCHILD_Y);
        DefineImg(CITY_MAGIER1,
                  "res/gfx/scr/stadt/magier1.png",
                  False, CITY_MAGIER_X, CITY_MAGIER_Y);
        DefineImg(CITY_MAGIER2,
                  "res/gfx/scr/stadt/magier2.png",
                  True, CITY_MAGIER_X, CITY_MAGIER_Y);
        DefineImg(CITY_ORK1,
                  "res/gfx/scr/stadt/ork1.png",
                  False, CITY_ORK_X, CITY_ORK_Y);
        DefineImg(CITY_ORK2,
                  "res/gfx/scr/stadt/ork2.png",
                  True, CITY_ORK_X, CITY_ORK_Y);
        DefineImg(CITY_SANDWICH1,
                  "res/gfx/scr/stadt/sandwichtyp1.png",
                  False, CITY_SANDWICH_X, CITY_SANDWICH_Y);
        DefineImg(CITY_SANDWICH2,
                  "res/gfx/scr/stadt/sandwichtyp2.png",
                  True, CITY_SANDWICH_X, CITY_SANDWICH_Y);
        DefineImg(CITY_ZWERG1,
                  "res/gfx/scr/stadt/zwerg2.png",
                  False, CITY_ZWERG_X, CITY_ZWERG_Y);
        DefineImg(CITY_ZWERG2,
                  "res/gfx/scr/stadt/zwerg1.png",
                  True, CITY_ZWERG_X, CITY_ZWERG_Y);
        DefineImg(CITY_ELF1,
                  "res/gfx/scr/stadt/elf1.png", False,
                  CITY_ELF_X, CITY_ELF_Y);
        DefineImg(CITY_ELF2,
                  "res/gfx/scr/stadt/elf2.png",
                  True, CITY_ELF_X, CITY_ELF_Y);
        define_bunch(CITY_STATISTEN, CITY_MAGIER1, CITY_MAGIER2, CITY_ORK1,
                     CITY_ORK2, CITY_SANDWICH1, CITY_SANDWICH2);
        add_bunch(CITY_STATISTEN, CITY_ZWERG1, CITY_ZWERG2, CITY_ELF1,
                  CITY_ELF2, CITY_ZWERG, CITY_ORK);
        add_bunch(CITY_STATISTEN, CITY_SCHILD1, CITY_SCHILD2, CITY_SCHILD3,
                  CITY_SCHILD4);
        define_bunch(CITY_CA_OVL, IF_OVL, CA_CITY_SHAKES, CA_CITY_ZAUBERLADEN,
                     CA_CITY_RUHMESHALLE, CA_CITY_ARENA, CA_CITY_DEALER,
                     CA_CITY_ESEL, CA_CITY_TAVERNE, CA_CITY_POST,
                     CA_CITY_WACHE, CA_CITY_BUH);
        DefineClickArea(CA_CITY_SHAKES, CITY_SHAKES, InterfaceBtnHandler,
                        CITY_CA_SHAKES_X, CITY_CA_SHAKES_Y, CITY_CA_SHAKES_X,
                        CITY_CA_SHAKES_Y, CITY_CA_OVL);
        DefineClickArea(CA_CITY_ZAUBERLADEN, CITY_ZAUBERLADEN,
                        InterfaceBtnHandler, CITY_CA_ZAUBERLADEN_X,
                        CITY_CA_ZAUBERLADEN_Y, CITY_CA_ZAUBERLADEN_X,
                        CITY_CA_ZAUBERLADEN_Y, CITY_CA_OVL);
        DefineClickArea(CA_CITY_RUHMESHALLE, CITY_RUHMESHALLE,
                        InterfaceBtnHandler, CITY_CA_RUHMESHALLE_X,
                        CITY_CA_RUHMESHALLE_Y, (CITY_CA_RUHMESHALLE_X - 45),
                        CITY_CA_RUHMESHALLE_Y, CITY_CA_OVL);
        DefineClickArea(CA_CITY_ARENA, CITY_ARENA, InterfaceBtnHandler,
                        CITY_CA_ARENA_X, CITY_CA_ARENA_Y, CITY_CA_ARENA_X,
                        CITY_CA_ARENA_Y, CITY_CA_OVL, ShowArenaOno,
                        HideArenaOno);
        DefineClickArea(CA_CITY_DEALER, CITY_DEALER, InterfaceBtnHandler,
                        CITY_CA_DEALER_X, CITY_CA_DEALER_Y, CITY_CA_DEALER_X,
                        CITY_CA_DEALER_Y, CITY_CA_OVL, HideDealerEyes,
                        ShowDealerEyes);
        DefineClickArea(CA_CITY_ESEL, CITY_ESEL2, InterfaceBtnHandler,
                        CITY_CA_ESEL_X, CITY_CA_ESEL_Y, CITY_CA_ESEL_X,
                        CITY_CA_ESEL_Y, CITY_CA_OVL, EselOver, EselOut);
        DefineClickArea(CA_CITY_TAVERNE, CITY_TAVERNE, InterfaceBtnHandler,
                        CITY_CA_TAVERNE_X, CITY_CA_TAVERNE_Y,
                        CITY_CA_TAVERNE_X, CITY_CA_TAVERNE_Y, CITY_ZWERG);
        DefineClickArea(CA_CITY_POST, CITY_POST, InterfaceBtnHandler,
                        CITY_CA_POST_X, CITY_CA_POST_Y, CITY_CA_POST_X,
                        CITY_CA_POST_Y, CITY_ORK);
        DefineClickArea(CA_CITY_WACHE, C_EMPTY, InterfaceBtnHandler,
                        CITY_CA_WACHE_X, CITY_CA_WACHE_Y, CITY_CA_WACHE_X,
                        CITY_CA_WACHE_Y, CITY_CA_OVL, WacheOver, WacheOut);
        DefineClickArea(CA_CITY_BUH, C_EMPTY, InterfaceBtnHandler,
                        CITY_CA_BUH_X, CITY_CA_BUH_Y, CITY_CA_BUH_X,
                        CITY_CA_BUH_Y, CITY_CA_OVL, BuhHover, BuhOut);
        AddMimickInterfaceButtonHoverHandler(CA_CITY_SHAKES);
        AddMimickInterfaceButtonHoverHandler(CA_CITY_ZAUBERLADEN);
        AddMimickInterfaceButtonHoverHandler(CA_CITY_RUHMESHALLE);
        AddMimickInterfaceButtonHoverHandler(CA_CITY_ARENA);
        AddMimickInterfaceButtonHoverHandler(CA_CITY_DEALER);
        AddMimickInterfaceButtonHoverHandler(CA_CITY_ESEL);
        AddMimickInterfaceButtonHoverHandler(CA_CITY_TAVERNE);
        AddMimickInterfaceButtonHoverHandler(CA_CITY_POST);
        AddMimickInterfaceButtonHoverHandler(CA_CITY_WACHE);
        define_bunch(CITY_OVERLAYS, CITY_SHAKES, CITY_ZAUBERLADEN,
                     CITY_RUHMESHALLE, CITY_ARENA, CITY_DEALER, CITY_ESEL2,
                     CITY_TAVERNE, CITY_POST);
        define_bunch(SCREEN_CITY, IF_MAIN, CA_CITY_SHAKES, CA_CITY_ZAUBERLADEN,
                     CA_CITY_RUHMESHALLE, CA_CITY_ARENA, CITY_DEALER_ANI5,
                     CA_CITY_DEALER, CITY_ESEL1, CA_CITY_ESEL, CITY_CA_OVL,
                     CA_CITY_TAVERNE, CA_CITY_POST, CA_CITY_BUH);
        define_bunch(CITY_ZWERG);
        define_bunch(CITY_ORK);
        Buh = False;
        if (lang_code == "de"){
            DefineImg(BUBBLE_ARENA,
                      (("res/gfx/scr/stadt/" + lang_code)
                       + "/bubble_arena.png"),
                        False, BUBBLE_ARENA_X, BUBBLE_ARENA_Y);
            DefineImg(BUBBLE_ESEL,
                      (("res/gfx/scr/stadt/" + lang_code)
                       + "/bubble_esel.png"),
                        False, BUBBLE_ESEL_X, BUBBLE_ESEL_Y);
            DefineImg(BUBBLE_TAVERNE,
                      (("res/gfx/scr/stadt/" + lang_code)
                       + "/bubble_gasthaus.png"),
                        False, BUBBLE_TAVERNE_X, BUBBLE_TAVERNE_Y);
            DefineImg(BUBBLE_RUHMESHALLE,
                      (("res/gfx/scr/stadt/" + lang_code)
                       + "/bubble_heldenhalle.png"),
                        False, BUBBLE_RUHMESHALLE_X, BUBBLE_RUHMESHALLE_Y);
            DefineImg(BUBBLE_KRISTALL,
                      (("res/gfx/scr/stadt/" + lang_code)
                       + "/bubble_kristall.png"),
                        False, BUBBLE_KRISTALL_X, BUBBLE_KRISTALL_Y);
            DefineImg(BUBBLE_ORAKEL,
                      (("res/gfx/scr/stadt/" + lang_code)
                       + "/bubble_orakel.png"),
                        False, BUBBLE_ORAKEL_X, BUBBLE_ORAKEL_Y);
            DefineImg(BUBBLE_DEALER,
                      (("res/gfx/scr/stadt/" + lang_code)
                       + "/bubble_pilzdealer.png"),
                        False, BUBBLE_DEALER_X, BUBBLE_DEALER_Y);
            DefineImg(BUBBLE_POST,
                      (("res/gfx/scr/stadt/" + lang_code)
                       + "/bubble_post.png"),
                        False, BUBBLE_POST_X, BUBBLE_POST_Y);
            DefineImg(BUBBLE_WACHE,
                      (("res/gfx/scr/stadt/" + lang_code)
                       + "/bubble_stadtwache.png"),
                        False, BUBBLE_WACHE_X, BUBBLE_WACHE_Y);
            DefineImg(BUBBLE_STATUE,
                      (("res/gfx/scr/stadt/" + lang_code)
                       + "/bubble_statue.png"),
                        False, BUBBLE_STATUE_X, BUBBLE_STATUE_Y);
            DefineImg(BUBBLE_SHAKES,
                      (("res/gfx/scr/stadt/" + lang_code)
                       + "/bubble_waffenladen.png"),
                        False, BUBBLE_SHAKES_X, BUBBLE_SHAKES_Y);
            DefineImg(BUBBLE_ZAUBERLADEN,
                      (("res/gfx/scr/stadt/" + lang_code)
                       + "/bubble_zauberladen.png"), False,
                        BUBBLE_ZAUBERLADEN_X, BUBBLE_ZAUBERLADEN_Y);
        } else {
            DefineImg(BUBBLE_ARENA,
                      "res/gfx/empty.png",
                      False, BUBBLE_ARENA_X, BUBBLE_ARENA_Y);
            DefineImg(BUBBLE_ESEL,
                      "res/gfx/empty.png",
                      False, BUBBLE_ESEL_X, BUBBLE_ESEL_Y);
            DefineImg(BUBBLE_TAVERNE,
                      "res/gfx/empty.png",
                      False, BUBBLE_TAVERNE_X, BUBBLE_TAVERNE_Y);
            DefineImg(BUBBLE_RUHMESHALLE,
                      "res/gfx/empty.png",
                      False, BUBBLE_RUHMESHALLE_X, BUBBLE_RUHMESHALLE_Y);
            DefineImg(BUBBLE_KRISTALL,
                      "res/gfx/empty.png",
                      False, BUBBLE_KRISTALL_X, BUBBLE_KRISTALL_Y);
            DefineImg(BUBBLE_ORAKEL, "res/gfx/empty.png",
                      False, BUBBLE_ORAKEL_X, BUBBLE_ORAKEL_Y);
            DefineImg(BUBBLE_DEALER, "res/gfx/empty.png",
                      False, BUBBLE_DEALER_X, BUBBLE_DEALER_Y);
            DefineImg(BUBBLE_POST, "res/gfx/empty.png",
                      False, BUBBLE_POST_X, BUBBLE_POST_Y);
            DefineImg(BUBBLE_WACHE, "res/gfx/empty.png",
                      False, BUBBLE_WACHE_X, BUBBLE_WACHE_Y);
            DefineImg(BUBBLE_STATUE, "res/gfx/empty.png",
                      False, BUBBLE_STATUE_X, BUBBLE_STATUE_Y);
            DefineImg(BUBBLE_SHAKES, "res/gfx/empty.png",
                      False, BUBBLE_SHAKES_X, BUBBLE_SHAKES_Y);
            DefineImg(BUBBLE_ZAUBERLADEN, "res/gfx/empty.png",
                      False, BUBBLE_ZAUBERLADEN_X, BUBBLE_ZAUBERLADEN_Y);
        };
        define_bunch(BUBBLES, BUBBLE_ARENA, BUBBLE_ESEL, BUBBLE_TAVERNE,
                     BUBBLE_RUHMESHALLE, BUBBLE_KRISTALL, BUBBLE_ORAKEL);
        add_bunch(BUBBLES, BUBBLE_DEALER, BUBBLE_POST, BUBBLE_WACHE,
                  BUBBLE_STATUE, BUBBLE_SHAKES, BUBBLE_ZAUBERLADEN);
        BubbleTimer = new Timer(20);
        BubbleWait = 0;
        BubbleTimer.add_event_listener(TimerEvent.TIMER, Bubbles);
        BubbleTimer.start();
        CityAniTimer = new Timer(400);
        CityAniFrame = 0;
        SandwichPause = 0;
        ZwergFussTapp = 0;
        CityAniTimer.add_event_listener(TimerEvent.TIMER, CityAni);
        CityAniTimer.start();
        iFrame = -1;
        SchildDir = 1;
        SchildTimer = new Timer(100);
        DealerAniTimer = new Timer(4000);
        DealerStepTimer = new Timer(100);
        DealerAniStep = 0;
        _local2 = DealerAniTimer;
        with (_local2) {
            add_event_listener(TimerEvent.TIMER, DealerAni);
            if (!light_mode){
                start();
            } else {
                stop();
            };
        };
        LastOno = 0;
        ThisOno = LastOno;
        OnoPopupTimer = new Timer(50);
        PopupDir = False;
        define_btn(IF_EXIT, "", ExitScreen, btn_classExitScreen,
                   IF_EXIT_X, IF_EXIT_Y);
        DefineImg(SCR_HALLE_BG, "res/gfx/scr/hall/heldenhalle.jpg",
                  False, 280, 100);
        define_btn(HALLE_UP, "", RuhmesHalleScroll, btn_classArrowUp,
                   HALLE_UPDOWN_X, HALLE_UP_Y);
        define_btn(HALLE_DOWN, "", RuhmesHalleScroll, btn_classArrowDown,
                   HALLE_UPDOWN_X, HALLE_DOWN_Y);
        define_btn(HALLE_GOTO, texts[TXT_HALLE_GOTO], RuhmesHalleScroll,
                   btn_classLOGin, HALLE_GOTO_X, HALLE_GOTO_Y);
        DefineFromClass(INP_HALLE_GOTO, text_input1, HALLE_INP_GOTO_X,
                        HALLE_INP_GOTO_Y, 2, "name");
        actor[INP_HALLE_GOTO].add_event_listener(KeyboardEvent.KEY_DOWN,
                                                 RuhmesHalleScroll);
        actor[INP_HALLE_GOTO].add_event_listener(MouseEvent.CLICK,
                                                 HalleSuchClick);
        DefineCnt(HALL_GOTO_SPIELER, 0, HALLE_GOTO_SPIELERGILDEN_Y);
        DefineCnt(HALL_GOTO_GILDEN, HALLE_GOTO_GILDEN_X,
                  HALLE_GOTO_SPIELERGILDEN_Y);
        DefineLbl(LBL_HALL_GOTO_SPIELER, texts[TXT_GOTO_SPIELER], 0, 0,
                  FontFormat_LOGoutLink);
        add_filter(LBL_HALL_GOTO_SPIELER, Filter_Shadow);
        DefineLbl(LBL_HALL_GOTO_GILDEN, texts[TXT_GOTO_GILDEN], 0, 0,
                  FontFormat_LOGoutLink);
        add_filter(LBL_HALL_GOTO_GILDEN, Filter_Shadow);
        DefineLbl(LBL_HALL_GOTO_SPIELER_HL, texts[TXT_GOTO_SPIELER], 0, 0,
                  FontFormat_LOGoutLinkHighLight);
        add_filter(LBL_HALL_GOTO_SPIELER_HL, Filter_Shadow);
        DefineLbl(LBL_HALL_GOTO_GILDEN_HL, texts[TXT_GOTO_GILDEN], 0, 0,
                  FontFormat_LOGoutLinkHighLight);
        add_filter(LBL_HALL_GOTO_GILDEN_HL, Filter_Shadow);
        MakePersistent(LBL_HALL_GOTO_SPIELER, LBL_HALL_GOTO_GILDEN);
        MakePersistent(LBL_HALL_GOTO_SPIELER_HL, LBL_HALL_GOTO_GILDEN_HL);
        _local2 = actor[HALL_GOTO_SPIELER];
        with (_local2) {
            addChild(actor[LBL_HALL_GOTO_SPIELER]);
            addChild(actor[LBL_HALL_GOTO_SPIELER_HL]);
            textLinkMakeClickable(getChildAt(0).parent);
            add_event_listener(MouseEvent.CLICK, RuhmesHalleScroll);
            x = (HALLE_GOTO_SPIELER_X
                 - actor[LBL_HALL_GOTO_SPIELER].text_width);
            mouseChildren = False;
            useHandCursor = True;
            buttonMode = True;
        };
        _local2 = actor[HALL_GOTO_GILDEN];
        with (_local2) {
            addChild(actor[LBL_HALL_GOTO_GILDEN]);
            addChild(actor[LBL_HALL_GOTO_GILDEN_HL]);
            textLinkMakeClickable(getChildAt(0).parent);
            add_event_listener(MouseEvent.CLICK, RuhmesHalleScroll);
            mouseChildren = False;
            useHandCursor = True;
            buttonMode = True;
        };
        DefineCnt(HALL_LIST, HALL_LIST_X, HALL_LIST_Y);
        define_bunch(SCREEN_HALLE, SCR_HALLE_BG, IF_OVL, IF_EXIT, HALLE_UP,
                     HALLE_DOWN, HALLE_GOTO, INP_HALLE_GOTO, HALL_LIST,
                     HALL_GOTO_SPIELER, HALL_GOTO_GILDEN);
        DefineClickArea(CA_SCR_ARBEITEN_BLOCKCITY, C_EMPTY,
                        InterfaceBtnHandler, 280, 100, (RES_X - 280),
                        (RES_Y - 100));
        _local2 = actor[CA_SCR_ARBEITEN_BLOCKCITY];
        with (_local2) {
            useHandCursor = False;
            buttonMode = False;
        };
        DefineLbl(LBL_SCR_ARBEITEN_TEXT, texts[TXT_ARBEIT_TEXT],
                  LBL_ARBEITEN_TEXT_X, LBL_ARBEITEN_TEXT_Y,
                  FontFormat_Default);
        DefineLbl(LBL_SCR_ARBEITEN_TEXT2, "", LBL_ARBEITEN_TEXT_X,
                  LBL_ARBEITEN_TEXT2_Y, FontFormat_Default);
        actor[LBL_SCR_ARBEITEN_TEXT].width = LBL_ARBEITEN_TEXT_X;
        actor[LBL_SCR_ARBEITEN_TEXT].wordWrap = True;
        actor[LBL_SCR_ARBEITEN_TEXT2].width = LBL_ARBEITEN_TEXT_X;
        actor[LBL_SCR_ARBEITEN_TEXT2].wordWrap = True;
        add_filter(LBL_SCR_ARBEITEN_TEXT, Filter_Shadow);
        add_filter(LBL_SCR_ARBEITEN_TEXT2, Filter_Shadow);
        DefineLbl(LBL_SCR_ARBEITEN_TIME, "", 0,
                  (IF_WIN_Y + LBL_ARBEITEN_TIME_Y), FontFormat_Default);
        add_filter(LBL_SCR_ARBEITEN_TIME, Filter_Shadow);
        DefineCnt(SCR_ARBEITEN_BAR, (IF_WIN_X + ARBEITEN_BAR_X),
                  (IF_WIN_Y + ARBEITEN_BAR_Y));
        DefineCnt(SCR_ARBEITEN_FILL, (IF_WIN_X + ARBEITEN_FILL_X),
                  (IF_WIN_Y + ARBEITEN_FILL_Y));
        DefineSlider(SLDR['ARBEITEN'], 10, ARBEITEN_SLIDER_X,
                     ARBEITEN_SLIDER_Y, ArbeitenSliderChange);
        define_btn(SCR_ARBEITEN_OK, texts[TXT_OK], request_arbeiten,
                   btn_classBasic, ((IF_WIN_X + IF_WIN_WELCOME_X) + IF_WIN_X),
                   (IF_WIN_Y + ARBEITEN_Y));
        define_btn(SCR_ARBEITEN_CLOSE, texts[TXT_OK], ShowCityScreen,
                   btn_classBasic, ((IF_WIN_X + IF_WIN_WELCOME_X) + IF_WIN_X),
                   (IF_WIN_Y + ARBEITEN_Y));
        define_btn(SCR_ARBEITEN_CANCEL, texts[TXT_ABBRECHEN],
                   request_cancel_arbeiten, btn_classBasic,
                   ((IF_WIN_X + IF_WIN_WELCOME_X) + IF_WIN_X),
                   (IF_WIN_Y + ARBEITEN_Y));
        define_bunch(SCREEN_ARBEITEN, CA_SCR_ARBEITEN_BLOCKCITY, IF_WINDOW,
                     LBL_WINDOW_TITLE, LBL_SCR_ARBEITEN_TEXT, SLDR['ARBEITEN'],
                     LBL_SCR_ARBEITEN_TEXT2, SCR_ARBEITEN_OK, IF_EXIT);
        define_bunch(SCREEN_ARBEITEN_WAIT, CA_SCR_ARBEITEN_BLOCKCITY,
                     IF_WINDOW, LBL_WINDOW_TITLE, LBL_SCR_ARBEITEN_TEXT,
                     SCR_ARBEITEN_BAR, SCR_ARBEITEN_FILL,
                     LBL_SCR_ARBEITEN_TIME, SCR_ARBEITEN_CANCEL, IF_EXIT);
        define_bunch(SCREEN_ARBEITEN_SUCCESS, CA_SCR_ARBEITEN_BLOCKCITY,
                     IF_WINDOW, LBL_WINDOW_TITLE, LBL_SCR_ARBEITEN_TEXT,
                     LBL_SCR_ARBEITEN_TEXT2, SCR_ARBEITEN_CLOSE, IF_EXIT);
        DefineClickArea(CA_SCR_INVITE_BLOCKCITY, C_EMPTY, InterfaceBtnHandler,
                        280, 100, (RES_X - 280), (RES_Y - 100));
        _local2 = actor[CA_SCR_INVITE_BLOCKCITY];
        with (_local2) {
            useHandCursor = False;
            buttonMode = False;
        };
        DefineLbl(LBL_INVITE_SUCCESS, "",
                  ((IF_WIN_X + IF_WIN_WELCOME_X) - (420 / 2)),
                  ((IF_WIN_Y + ARENA_TEXT_Y) + AIRRelMoveY),
                  FontFormat_Default);
        add_filter(LBL_INVITE_SUCCESS, Filter_Shadow);
        _local2 = actor[LBL_INVITE_SUCCESS];
        with (_local2) {
            wordWrap = True;
            width = 420;
            text = texts[TXT_INVITESUCCESS];
        };
        DefineLbl(LBL_INVITE_TEXT, "",
                  ((IF_WIN_X + IF_WIN_WELCOME_X) - (420 / 2)),
                  ((IF_WIN_Y + ARENA_TEXT_Y) + AIRRelMoveY),
                  FontFormat_Default);
        add_filter(LBL_INVITE_TEXT, Filter_Shadow);
        _local2 = actor[LBL_INVITE_TEXT];
        with (_local2) {
            wordWrap = True;
            width = 420;
            text = texts[TXT_INVITEINSTR];
        };
        DefineFromClass(INP_CHAR_INVITE, text_input1, 0,
                        (((IF_WIN_Y + ARENA_INP_Y) - 40) + AIRRelMoveY),
                        2, "email");
        _local2 = actor[INP_CHAR_INVITE];
        with (_local2) {
            getChildAt(1).text = "";
            x = (((IF_WIN_X + IF_WIN_WELCOME_X) - int((width / 2))) + 40);
            add_event_listener(KeyboardEvent.KEY_DOWN, SendPlayerInvite);
        };
        DefineLbl(LBL_INVITE_TEXT2, texts[TXT_INVITEEMAIL], 0,
                  ((actor[INP_CHAR_INVITE].y + 10) + AIRRelMoveY),
                  FontFormat_Default);
        add_filter(LBL_INVITE_TEXT2, Filter_Shadow);
        actor[LBL_INVITE_TEXT2].x = ((actor[INP_CHAR_INVITE].x
                                     - actor[LBL_INVITE_TEXT2].width) - 5);
        DefineFromClass(INP_CHAR_INVITE2, text_input1, 0,
                        (((IF_WIN_Y + ARENA_INP_Y) + 10) + AIRRelMoveY),
                        2, "text");
        _local2 = actor[INP_CHAR_INVITE2];
        with (_local2) {
            getChildAt(1).text = "";
            x = (((IF_WIN_X + IF_WIN_WELCOME_X) - int((width / 2))) + 40);
            add_event_listener(KeyboardEvent.KEY_DOWN, SendPlayerInvite);
        };
        DefineLbl(LBL_INVITE_TEXT3, texts[TXT_INVITESUBJECT], 0,
                  ((actor[INP_CHAR_INVITE2].y + 10) + AIRRelMoveY),
                  FontFormat_Default);
        add_filter(LBL_INVITE_TEXT3, Filter_Shadow);
        actor[LBL_INVITE_TEXT3].x = ((actor[INP_CHAR_INVITE2].x
                                     - actor[LBL_INVITE_TEXT3].width) - 5);
        define_btn(SCR_INVITE_OK, texts[TXT_OK], SendPlayerInvite,
                   btn_classBasic, ((IF_WIN_X + IF_WIN_WELCOME_X) + IF_WIN_X),
                   (((IF_WIN_Y + ARBEITEN_Y) + 15) + AIRRelMoveY));
        define_btn(INVITE_SUCCESS_OK, texts[TXT_OK], RemoveInviteWindow,
                   btn_classBasic, ((IF_WIN_X + IF_WIN_WELCOME_X) + IF_WIN_X),
                   (((IF_WIN_Y + ARBEITEN_Y) + 15) + AIRRelMoveY));
        define_bunch(SCREEN_INVITE, CA_SCR_INVITE_BLOCKCITY, IF_WINDOW,
                     LBL_WINDOW_TITLE, LBL_INVITE_TEXT, INP_CHAR_INVITE,
                     LBL_INVITE_TEXT2, INP_CHAR_INVITE2, LBL_INVITE_TEXT3,
                     SCR_INVITE_OK, IF_EXIT, LBL_INVITE_SUCCESS,
                     INVITE_SUCCESS_OK);
        define_bunch(INVITE_INPUTDIALOGUE, LBL_INVITE_TEXT, INP_CHAR_INVITE,
                     LBL_INVITE_TEXT2, INP_CHAR_INVITE2, LBL_INVITE_TEXT3,
                     SCR_INVITE_OK);
        define_bunch(INVITE_SUCCESS, LBL_INVITE_SUCCESS, INVITE_SUCCESS_OK);
        DefineImg(ALBUM_BG, "res/gfx/scr/album/album.jpg", False, 280, 100);
        DefineLbl(LBL_ALBUM_PAGENUMBER_LEFT, "", 340, 690, FontFormat_Book);
        DefineLbl(LBL_ALBUM_PAGENUMBER_RIGHT, "", 0, 690, FontFormat_Book);
        DefineLbl(LBL_ALBUM_COLLECTION, "", 330, 135, FontFormat_BookLeft);
        define_bunch(SCREEN_ALBUM, ALBUM_BG, IF_OVL, IF_EXIT,
                     LBL_ALBUM_PAGENUMBER_LEFT, LBL_ALBUM_PAGENUMBER_RIGHT,
                     LBL_ALBUM_COLLECTION);
        DefineImg(UNKNOWN_ENEMY, "res/gfx/scr/fight/monster/unknown.jpg",
                  False, 0, 0);
        i = 0;
        while (i < 4) {
            DefineLbl((LBL_ALBUM_HEADING + i), "", 0,
                      (((i % 2))==0) ? 135 : 440, FontFormat_Book);
            DefineLbl((LBL_ALBUM_HINT + i), "", 0,
                      (((i % 2))==0) ? 165 : 470, FontFormat_BookHint);
            DefineCnt((ALBUM_MONSTER + i),
                      ((i)<=1) ? 420 : 890, (((i % 2))==0) ? 170 : 475);
            DefineCnt((ALBUM_MONSTER_FRAME + i),
                      (actor[(ALBUM_MONSTER + i)].x - 8),
                      (actor[(ALBUM_MONSTER + i)].y - 8));
            actor[(ALBUM_MONSTER + i)].scaleX = 0.8;
            actor[(ALBUM_MONSTER + i)].scaleY = 0.8;
            actor[(ALBUM_MONSTER_FRAME + i)].scaleX = 0.8;
            actor[(ALBUM_MONSTER_FRAME + i)].scaleY = 0.8;
            DefineCnt((ALBUM_WEAPON_1 + i),
                      (actor[(ALBUM_MONSTER + i)].x + 25),
                      (actor[(ALBUM_MONSTER + i)].y
                       + (((i % 2))==0) ? 10 : 130));
            DefineCnt((ALBUM_WEAPON_2 + i),
                      (actor[(ALBUM_MONSTER + i)].x + 135),
                      (actor[(ALBUM_MONSTER + i)].y
                       + (((i % 2))==0) ? 10 : 130));
            DefineCnt((ALBUM_WEAPON_3 + i),
                      (actor[(ALBUM_MONSTER + i)].x - 30),
                      (actor[(ALBUM_MONSTER + i)].y
                       + (((i % 2))==0) ? 130 : 10));
            DefineCnt((ALBUM_WEAPON_4 + i),
                      (actor[(ALBUM_MONSTER + i)].x + 75),
                      (actor[(ALBUM_MONSTER + i)].y
                       + (((i % 2))==0) ? 130 : 10));
            DefineCnt((ALBUM_WEAPON_5 + i),
                      (actor[(ALBUM_MONSTER + i)].x + 180),
                      (actor[(ALBUM_MONSTER + i)].y
                       + (((i % 2))==0) ? 130 : 10));
            DefineCnt((ALBUM_WEAPON_EPIC + i),
                      (actor[(ALBUM_MONSTER + i)].x + 75),
                      (actor[(ALBUM_MONSTER + i)].y + 70));
            add_bunch(SCREEN_ALBUM, (LBL_ALBUM_HEADING + i),
                      (LBL_ALBUM_HINT + i), (ALBUM_MONSTER + i),
                      (ALBUM_MONSTER_FRAME + i));
            add_bunch(SCREEN_ALBUM, (ALBUM_WEAPON_1 + i),
                      (ALBUM_WEAPON_2 + i), (ALBUM_WEAPON_3 + i));
            add_bunch(SCREEN_ALBUM, (ALBUM_WEAPON_4 + i),
                      (ALBUM_WEAPON_5 + i), (ALBUM_WEAPON_EPIC + i));
            i = (i + 1);
        };
        define_bunch(ALBUM_CAT_IN);
        i = 0;
        while (i < 5) {
            DefineImg((ALBUM_CAT_OUT + i),
                      (("res/gfx/scr/album/tab_" + str(i)) + "_out.jpg"),
                      False, 0, 0);
            DefineImg((ALBUM_CAT_IN + i),
                      (("res/gfx/scr/album/tab_" + str(i)) + "_in.jpg"),
                      False, 290, (300 + (i * 80)));
            DefineCnt((ALBUM_CAT_OUT + i), 290, (300 + (i * 80)));
            MakePersistent((ALBUM_CAT_OUT + i));
            _local2 = actor[(ALBUM_CAT_OUT + i)];
            with (_local2) {
                addChild(actor[(ALBUM_CAT_OUT + i)]);
                add_event_listener(MouseEvent.CLICK, Showalbum_content);
                mouseChildren = False;
                buttonMode = True;
                useHandCursor = True;
            };
            enable_popup((ALBUM_CAT_IN + i),
                         texts[((TXT_COLLECTION + 2) + i)]);
            enable_popup((ALBUM_CAT_OUT + i),
                         texts[((TXT_COLLECTION + 2) + i)]);
            add_bunch(ALBUM_CAT_IN, (ALBUM_CAT_IN + i));
            add_bunch(SCREEN_ALBUM, (ALBUM_CAT_OUT + i), (ALBUM_CAT_IN + i));
            i = (i + 1);
        };
        define_btn(ALBUM_PREV, "", Showalbum_content,
                   btn_classArrowLeft, 340, 715);
        define_btn(ALBUM_NEXT, "", Showalbum_content,
                   btn_classArrowRight, 1180, 715);
        add_bunch(SCREEN_ALBUM, ALBUM_PREV, ALBUM_NEXT);
        DefineImg(SCR_CHAR_BG, "res/gfx/scr/char/charbg.jpg",
                  False, 280, 100);
        DefineImg(SCR_CHAR_BG_GOLDEN, "res/gfx/scr/char/gold_bg.jpg",
                  False, 280, 100);
        DefineImg(SCR_CHAR_BG_RIGHT,
                  "res/gfx/scr/char/character_right_new.jpg",
                  False, (280 + 500), 100);
        i = 0;
        while (i < 13) {
            DefineImg((MIRROR_PIECE + i),
                      (("res/gfx/scr/char/mirror/mirror"
                       + str((i + 1))) + ".png"),
                        False, SCR_CHAR_CHARX, SCR_CHAR_CHARY);
            actor[(MIRROR_PIECE + i)].alpha = 0.3;
            actor[(MIRROR_PIECE + i)].mouse_enabled = False;
            i = (i + 1);
        };
        DefineImg(GOLDEN_FRAME, "res/gfx/scr/char/gold_frame.png",
                  False, (SCR_CHAR_CHARX - 3), (SCR_CHAR_CHARY - 5));
        DefineClickArea(CA_SELL_ITEM, C_EMPTY, None,
                        (280 + 550), 100, 450, 700);
        DefineClickArea(CA_USE_ITEM, C_EMPTY, None, 280, 100, 500, 415);
        DefineCnt(SCR_CHAR_NAME, CHAR_NAME_X, CHAR_NAME_Y);
        DefineLbl(LBL_SCR_CHAR_NAME, "", 0, 0, FontFormat_Default);
        MakePersistent(LBL_SCR_CHAR_NAME);
        _local2 = actor[SCR_CHAR_NAME];
        with (_local2) {
            addChild(actor[LBL_SCR_CHAR_NAME]);
            textLinkMakeClickable(getChildAt(0).parent);
            add_event_listener(MouseEvent.CLICK, GotoPlayerGilde);
            mouseChildren = False;
            useHandCursor = True;
            buttonMode = True;
        };
        define_btn(PREV_PLAYER, "", PrevPlayer, btn_classArrowLeft,
                   (SCR_CHAR_CHARX + 10), (SCR_CHAR_CHARY + 10));
        define_btn(NEXT_PLAYER, "", NextPlayer, btn_classArrowRight,
                   (SCR_CHAR_CHARX + 215), (SCR_CHAR_CHARY + 10));
        DefineFromClass(SHP_BLACK_GILDEEHRE, black_square_neutral, GILDEEHRE_X,
                        GILDEEHRE_Y);
        _local2 = actor[SHP_BLACK_GILDEEHRE];
        with (_local2) {
            width = GILDEEHRE_X;
            height = GILDEEHRE_Y;
            alpha = 0.65;
        };
        DefineCnt(SCR_CHAR_GILDE, ((GILDEEHRE_X + GILDEEHRE_X) + 40),
                  (GILDEEHRE_Y + GILDEEHRE_Y));
        DefineLbl(LBL_SCR_CHAR_GILDE, "", 0, 0, FontFormat_Default);
        MakePersistent(LBL_SCR_CHAR_GILDE);
        _local2 = actor[SCR_CHAR_GILDE];
        with (_local2) {
            addChild(actor[LBL_SCR_CHAR_GILDE]);
            textLinkMakeClickable(getChildAt(0).parent);
            add_event_listener(MouseEvent.CLICK, JumpToPlayerHall);
            mouse_enabled = True;
            buttonMode = True;
            useHandCursor = True;
            mouseChildren = False;
        };
        DefineImg(SLOT_SUGGESTION, "res/gfx/scr/char/slot_suggestion.png",
                  False, 0, 0);
        actor[SLOT_SUGGESTION].mouse_enabled = False;
        DefineLbl(LBL_SCR_CHAR_EHRE, "", 0, (GILDEEHRE_Y + GILDEEHRE_Y),
                  FontFormat_Default);
        DefineImg(SCR_CHAR_KLASSE_1, "res/gfx/scr/char/char_krieger.jpg",
                  False, ((GILDEEHRE_X + GILDEEHRE_X) - 10),
                  ((GILDEEHRE_Y + GILDEEHRE_Y) - 10));
        DefineImg(SCR_CHAR_KLASSE_2, "res/gfx/scr/char/char_magier.jpg",
                  False, ((GILDEEHRE_X + GILDEEHRE_X) - 10),
                  ((GILDEEHRE_Y + GILDEEHRE_Y) - 10));
        DefineImg(SCR_CHAR_KLASSE_3, "res/gfx/scr/char/char_dieb.jpg",
                  False, ((GILDEEHRE_X + GILDEEHRE_X) - 10),
                  ((GILDEEHRE_Y + GILDEEHRE_Y) - 10));
        enable_popup(SCR_CHAR_KLASSE_1, texts[TXT_CLASSNAME]);
        enable_popup(SCR_CHAR_KLASSE_2, texts[(TXT_CLASSNAME + 1)]);
        enable_popup(SCR_CHAR_KLASSE_3, texts[(TXT_CLASSNAME + 2)]);
        DefineFromClass(SHP_BLACK_CHARDESC, black_square_neutral,
                        GILDEEHRE_X,
                        ((GILDEEHRE_Y + GILDEEHRE_Y) + BLACK_CHARDESC_Y));
        _local2 = actor[SHP_BLACK_CHARDESC];
        with (_local2) {
            width = BLACK_CHARDESC_X;
            height = BLACK_CHARDESC_Y;
            alpha = 0.65;
        };
        DefineFromClass(INP_CHARDESC, SimpleTextAreaSmall,
                        (GILDEEHRE_X + GILDEEHRE_X),
                        (((GILDEEHRE_Y + GILDEEHRE_Y) + BLACK_CHARDESC_Y)
                         + GILDEEHRE_Y), 1, "text");
        CleanupField(INP_CHARDESC);
        add_filter(INP_CHARDESC, Filter_Shadow);
        _local2 = actor[INP_CHARDESC];
        with (_local2) {
            mouse_enabled = True;
            add_event_listener(FocusEvent.FOCUS_IN, Enterplayer_desc);
            add_event_listener(FocusEvent.FOCUS_OUT, Leaveplayer_desc);
        };
        DefineLbl(LBL_CHAR_DELAY, "", 0, (100 + CHAR_DELAY_Y),
                  FontFormat_Default);
        add_filter(LBL_CHAR_DELAY, Filter_Shadow);
        define_bunch(CHAR_RIGHTPANE, SCR_CHAR_BG_RIGHT, IF_OVL,
                     SCR_CHAR_KLASSE_1, SCR_CHAR_KLASSE_2, SCR_CHAR_KLASSE_3,
                     SCR_CHAR_GILDE, LBL_SCR_CHAR_EHRE, INP_CHARDESC);
        add_filter(LBL_SCR_CHAR_NAME, Filter_Shadow);
        add_filter(LBL_SCR_CHAR_GILDE, Filter_Shadow);
        add_filter(LBL_SCR_CHAR_EHRE, Filter_Shadow);
        DefineImg(SCR_CHAR_EXPBAR, "res/gfx/scr/char/experience.jpg", False,
                  EXPERIENCE_BAR_X, EXPERIENCE_BAR_Y);
        DefineLbl(LBL_SCR_CHAR_EXPLABEL, "", 0, (EXPERIENCE_BAR_Y + 2),
                  FontFormat_LifeBar);
        add_filter(LBL_SCR_CHAR_EXPLABEL, Filter_Shadow);
        DefineClickArea(CA_SCR_CHAR_EXPBAR, C_EMPTY, None, EXPERIENCE_BAR_X,
                        EXPERIENCE_BAR_Y, 254, 24);
        define_btn(CHAR_MESSAGE, texts[TXT_MESSAGE], PlayerSendMessage,
                   btn_classBasic, CHAR_PLAYERX1, CHAR_PLAYERY);
        define_btn(CHAR_ATTACK, texts[TXT_ATTACK], PlayerAttack,
                   btn_classBasic, CHAR_PLAYERX2, CHAR_PLAYERY);
        define_btn(CHAR_GILDE, texts[TXT_ZURGILDE], ZurGilde, btn_classBasic,
                   CHAR_PLAYERX2, CHAR_PLAYERY);
        define_btn(CHAR_ALBUM, texts[TXT_ALBUM], RequestAlbum, btn_classBasic,
                   CHAR_PLAYERX1, CHAR_PLAYERY);
        define_btn(PLAYER_GUILD_INVITE, "", PlayerGuildInvite, btn_classInvite,
                   (((280 + 500) + CHAR_RUESTUNG_X) + 223),
                   ((100 + CHAR_RUESTUNG_Y) - 7));
        enable_popup(PLAYER_GUILD_INVITE, texts[TXT_SUBJECT_GUILD_INVITE]);
        define_btn(CHAR_INVITE, texts[(TXT_ACH_4 + 4)], PlayerInvite,
                   btn_classBasic, CHAR_PLAYERX2, CHAR_PLAYERY);
        enable_popup(CHAR_INVITE, texts[(TXT_ACH_4 + 5)]);
        i = 0;
        while (i < 8) {
            DefineImg((CHAR_MOUNT_1 + i),
                      (("res/gfx/scr/char/mount_portrait_"
                       + str((i + 1))) + ".jpg"), False,
                        (CHAR_MOUNT_X + CHAR_MOUNT_X), CHAR_MOUNT_Y);
            _local2 = actor[(CHAR_MOUNT_1 + i)];
            with (_local2) {
                add_event_listener(MouseEvent.CLICK, RequestStableScreen);
            };
            add_bunch(CHAR_RIGHTPANE, (CHAR_MOUNT_1 + i));
            i = (i + 1);
        };
        DefineLbl(LBL_CHAR_MOUNT_NAME, "", CHAR_MOUNT_X, CHAR_MOUNT_Y,
                  FontFormat_Default);
        add_filter(LBL_CHAR_MOUNT_NAME, Filter_Shadow);
        DefineLbl(LBL_CHAR_MOUNT_DESCR, "", CHAR_MOUNT_X,
                  (CHAR_MOUNT_Y + CHAR_MOUNT_LINE_Y), FontFormat_DefaultLeft);
        _local2 = actor[LBL_CHAR_MOUNT_DESCR];
        with (_local2) {
            wordWrap = True;
            width = (CHAR_MOUNT_X - 5);
        };
        add_filter(LBL_CHAR_MOUNT_DESCR, Filter_Shadow);
        DefineLbl(LBL_CHAR_MOUNT_RUNTIME, "", CHAR_MOUNT_X,
                  (CHAR_MOUNT_Y + (CHAR_MOUNT_LINE_Y * 5)), FontFormat_Default)
        add_filter(LBL_CHAR_MOUNT_RUNTIME, Filter_Shadow);
        DefineLbl(LBL_CHAR_MOUNT_GAIN, "", CHAR_MOUNT_X,
                  (CHAR_MOUNT_Y + (CHAR_MOUNT_LINE_Y * 4)), FontFormat_Default)
        add_filter(LBL_CHAR_MOUNT_GAIN, Filter_Shadow);
        DefineImg(CHAR_RUESTUNG, "res/gfx/scr/char/icon_schild.jpg", False,
                  ((280 + 500) + CHAR_RUESTUNG_X), (100 + CHAR_RUESTUNG_Y));
        DefineLbl(LBL_CHAR_RUESTUNG, "",
                  (((280 + 500) + CHAR_RUESTUNG_X) + CHAR_RUESTUNG_TEXT_X),
                  ((100 + CHAR_RUESTUNG_Y) + CHAR_RUESTUNG_TEXT_Y),
                  FontFormat_Default);
        add_filter(LBL_CHAR_RUESTUNG, Filter_Shadow);
        DefineImg(CHAR_ALBUM, "res/gfx/scr/char/icon_foliant.png", False,
                  ((280 + 500) + 350), (100 + 20));
        add_bunch(CHAR_RIGHTPANE, LBL_CHAR_MOUNT_NAME, LBL_CHAR_MOUNT_RUNTIME,
                  LBL_CHAR_MOUNT_GAIN, LBL_CHAR_MOUNT_DESCR, CHAR_RUESTUNG,
                  LBL_CHAR_RUESTUNG);
        define_bunch(SCREEN_CHAR, SCR_CHAR_BG, SCR_CHAR_EXPBAR, IF_OVL,
                     CHAR_RIGHTPANE, LBL_SCR_CHAR_EXPLABEL, CA_SCR_CHAR_EXPBAR,
                     SCR_CHAR_NAME, IF_EXIT);
        define_bunch(SCREEN_CHAR_GOLDEN, SCR_CHAR_BG, SCR_CHAR_BG_GOLDEN,
                     SCR_CHAR_EXPBAR, IF_OVL, CHAR_RIGHTPANE,
                     LBL_SCR_CHAR_EXPLABEL, CA_SCR_CHAR_EXPBAR, SCR_CHAR_NAME,
                     IF_EXIT);
        define_bunch(CHAR_SECONDPROP);
        define_bunch(CHAR_PREISE);
        BoostBtnRepeatTimer = new Timer(1000);
        DestroyBoostBtnTimer = False;
        i = 0;
        while (i < 5) {
            DefineLbl((LBL_SCR_CHAR_STAERKE_CAPTION + i),
                      texts[(TXT_CHAR_STAERKE + i)], CHAR_PROP_COLUMN_1_X,
                      (CHAR_PROP_Y + (i * CHAR_PROP_Y)), FontFormat_Default);
            DefineLbl((LBL_SCR_CHAR_STAERKE + i), "", CHAR_PROP_COLUMN_2_X,
                      (CHAR_PROP_Y + (i * CHAR_PROP_Y)), FontFormat_Attrib);
            define_btn((SCR_CHAR_STEIGERN1 + i), "", BoostAttribute,
                       btn_classPlus, CHAR_PROP_COLUMN_3_X,
                       ((CHAR_PROP_Y + (i * CHAR_PROP_Y)) - 3));
            _local2 = actor[(SCR_CHAR_STEIGERN1 + i)];
            with (_local2) {
                add_event_listener(MouseEvent.MOUSE_DOWN, BoostBtnDownHandler);
                add_event_listener(MouseEvent.MOUSE_UP, BoostBtnUpHandler);
                add_event_listener(MouseEvent.MOUSE_OUT, BoostBtnUpHandler);
                add_event_listener(MouseEvent.MOUSE_OVER, BoostBtnOver);
                add_event_listener(MouseEvent.MOUSE_OUT, BoostBtnOut);
            };
            DefineLbl((LBL_SCR_CHAR_PREIS1 + i), "", 0,
                      (CHAR_PROP_Y + (i * CHAR_PROP_Y)), FontFormat_Default);
            DefineCnt((SCR_CHAR_GOLD1 + i), 0,
                      (CHAR_PROP_Y + (i * CHAR_PROP_Y)));
            DefineLbl((LBL_SCR_CHAR_SILBER1 + i), "", 0,
                      (CHAR_PROP_Y + (i * CHAR_PROP_Y)), FontFormat_Default);
            DefineCnt((SCR_CHAR_SILBER1 + i), 0,
                      (CHAR_PROP_Y + (i * CHAR_PROP_Y)));
            DefineLbl((LBL_SCR_CHAR_SCHADEN_CAPTION + i),
                      texts[(TXT_CHAR_SCHADEN + i)], CHAR_PROP_COLUMN_5_X,
                      (CHAR_PROP_Y + (i * CHAR_PROP_Y)), FontFormat_Default);
            DefineLbl((LBL_SCR_CHAR_SCHADEN + i), "", CHAR_PROP_COLUMN_6_X,
                      (CHAR_PROP_Y + (i * CHAR_PROP_Y)), FontFormat_Attrib);
            add_bunch(CHAR_SECONDPROP, (LBL_SCR_CHAR_SCHADEN_CAPTION + i));
            add_bunch(SCREEN_CHAR, (SCR_CHAR_STEIGERN1 + i),
                      (LBL_SCR_CHAR_PREIS1 + i), (SCR_CHAR_GOLD1 + i),
                      (LBL_SCR_CHAR_SILBER1 + i), (SCR_CHAR_SILBER1 + i));
            add_bunch(SCREEN_CHAR, (LBL_SCR_CHAR_STAERKE + i),
                      (LBL_SCR_CHAR_STAERKE_CAPTION + i),
                      (LBL_SCR_CHAR_SCHADEN + i),
                      (LBL_SCR_CHAR_SCHADEN_CAPTION + i));
            add_bunch(SCREEN_CHAR_GOLDEN, (SCR_CHAR_STEIGERN1 + i),
                      (LBL_SCR_CHAR_PREIS1 + i), (SCR_CHAR_GOLD1 + i),
                      (LBL_SCR_CHAR_SILBER1 + i), (SCR_CHAR_SILBER1 + i));
            add_bunch(SCREEN_CHAR_GOLDEN, (LBL_SCR_CHAR_STAERKE + i),
                      (LBL_SCR_CHAR_STAERKE_CAPTION + i),
                      (LBL_SCR_CHAR_SCHADEN + i),
                      (LBL_SCR_CHAR_SCHADEN_CAPTION + i));
            add_bunch(CHAR_PREISE, (LBL_SCR_CHAR_PREIS1 + i),
                      (SCR_CHAR_GOLD1 + i), (LBL_SCR_CHAR_SILBER1 + i),
                      (SCR_CHAR_SILBER1 + i));
            add_bunch(CHAR_RIGHTPANE, (SCR_CHAR_STEIGERN1 + i));
            i = (i + 1);
        };
        BoostBtnChange = 0;
        BoostBtnTimer = new Timer(40);
        BoostBtnTimer.add_event_listener(TimerEvent.TIMER,
                                         BoostBtnTimerFunction);
        BoostBtnTimer.start();
        DefineCnt(CHAR_SLOT_1, CHAR_SLOTS_LEFT_X, CHAR_SLOTS_TOP_Y);
        DefineCnt(CHAR_SLOT_2, CHAR_SLOTS_LEFT_X, CHAR_SLOTS_ROW2_Y);
        DefineCnt(CHAR_SLOT_3, CHAR_SLOTS_LEFT_X, CHAR_SLOTS_ROW3_Y);
        DefineCnt(CHAR_SLOT_4, CHAR_SLOTS_LEFT_X, CHAR_SLOTS_ROW4_Y);
        DefineCnt(CHAR_SLOT_5, CHAR_SLOTS_RIGHT_X, CHAR_SLOTS_TOP_Y);
        DefineCnt(CHAR_SLOT_6, CHAR_SLOTS_RIGHT_X, CHAR_SLOTS_ROW2_Y);
        DefineCnt(CHAR_SLOT_7, CHAR_SLOTS_RIGHT_X, CHAR_SLOTS_ROW3_Y);
        DefineCnt(CHAR_SLOT_8, CHAR_SLOTS_RIGHT_X, CHAR_SLOTS_ROW4_Y);
        DefineCnt(CHAR_SLOT_9, CHAR_SLOTS_R4C2_X, CHAR_SLOTS_ROW4_Y);
        DefineCnt(CHAR_SLOT_10, CHAR_SLOTS_R4C3_X, CHAR_SLOTS_ROW4_Y);
        DefineCnt(CHAR_SLOT_11, CHAR_SLOTS_LEFT_X, CHAR_SLOTS_ROW5_Y);
        DefineCnt(CHAR_SLOT_12, CHAR_SLOTS_R5C2_X, CHAR_SLOTS_ROW5_Y);
        DefineCnt(CHAR_SLOT_13, CHAR_SLOTS_R5C3_X, CHAR_SLOTS_ROW5_Y);
        DefineCnt(CHAR_SLOT_14, CHAR_SLOTS_R5C4_X, CHAR_SLOTS_ROW5_Y);
        DefineCnt(CHAR_SLOT_15, CHAR_SLOTS_RIGHT_X, CHAR_SLOTS_ROW5_Y);
        i = 0;
        while (i < 8) {
            DefineImg((EMPTY_SLOT_1 + i),
                      (("res/gfx/scr/char/slot" + str((i + 1))) + ".png"),
                      False, 0, 0);
            i = (i + 1);
        };
        DefineImg(EMPTY_SLOT_9_1, "res/gfx/scr/char/slot9_1.png", False, 0, 0);
        DefineImg(EMPTY_SLOT_9_2, "res/gfx/scr/char/slot9_2.png", False, 0, 0);
        DefineImg(EMPTY_SLOT_9_3, "res/gfx/scr/char/slot9_3.png", False, 0, 0);
        DefineImg(EMPTY_SLOT_10, "res/gfx/scr/char/slot10.png", False, 0, 0);
        DefineImg(NO_SHIELD, "res/gfx/itm/no_shield.png", False, 0, 0);
        itmTyp = 0;
        while (itmTyp <= 14) {
            itm_pic = 0;
            while (itm_pic < C_ITEMS_PER_TYPE) {
                itm_color = 0;
                while (itm_color < 5) {
                    Switch (itmTyp){
                        if case(1:
                        if case(2:
                        if case(3:
                        if case(4:
                        if case(5:
                        if case(6:
                        if case(7:
                            itm_class = 0;
                            while (itm_class < 3) {
                                DefineImg(GetItemID(itmTyp, itm_pic, itm_color,
                                          itm_class),
                                        GetItemFile(itmTyp, itm_pic,
                                                    itm_color, itm_class),
                                        False, 0, 0);
                                itm_class = (itm_class + 1);
                            };
                            break;
                        default:
                            DefineImg(GetItemID(itmTyp, itm_pic, itm_color, 0),
                                      GetItemFile(itmTyp, itm_pic,
                                                  itm_color, 0), False, 0, 0);
                    };
                    itm_color = (itm_color + 1);
                };
                itm_pic = (itm_pic + 1);
            };
            itmTyp = (itmTyp + 1);
        };
        itmTyp = 0;
        while (itmTyp <= 1) {
            itm_pic = 0;
            while (itm_pic < C_ITEMS_PER_TYPE) {
                itm_color = 0;
                while (itm_color < 5) {
                    DefineImg(get_arrow_id(itmTyp, itm_pic, itm_color),
                              (((((((("res/gfx/itm/1-" + str((itmTyp + 2)))
                               + "/shot") + (((itmTyp == 0)) ? 2 : 1)) + "-")
                                + str(itm_pic)) + "-")
                                + str(((((itm_pic >= 50))
                                      ? (((itmTyp == 0))
                                         ? (((itm_color == 3))
                                            ? 3 : 0) : 0) : itm_color) + 1)))
                                            + ".png"), False, 0, 0);
                    itm_color = (itm_color + 1);
                };
                itm_pic = (itm_pic + 1);
            };
            itmTyp = (itmTyp + 1);
        };
        i = 0;
        while (i < 15) {
            SetCnt((CHAR_SLOT_1 + i), ITM_OFFS);
            actor[(CHAR_SLOT_1 + i)].add_event_listener(MouseEvent.MOUSE_DOWN,
                                                        InventoryItemMouseDown);
            if (i >= 10){
                actor[(CHAR_SLOT_1 + i)].add_event_listener(
                                MouseEvent.MOUSE_DOWN, BackpackItemMouseDown);
            };
            add_bunch(SCREEN_CHAR, (CHAR_SLOT_1 + i));
            add_bunch(SCREEN_CHAR_GOLDEN, (CHAR_SLOT_1 + i));
            EnableDragDrop((CHAR_SLOT_1 + i), DropHandler);
            actor[(CHAR_SLOT_1 + i)].add_event_listener(MouseEvent.MOUSE_UP,
                                                        InventoryItemMouseUp);
            i = (i + 1);
        };
        define_bunch(CHAR_ACH);
        i = 0;
        while (i < 40) {
            DefineCnt((CHAR_ACH + i),
                      (SCR_CHAR_ACH_X + (((buffed_mode)
                       ? SCR_CHAR_ACH_X_BUFFED
                       : SCR_CHAR_ACH_X) * (i % 8))), SCR_CHAR_ACH_Y);
            DefineImg((CHAR_ACH + i),
                      (((("res/gfx/scr/char/ach/ach-" + str(((i % 8) + 1)))
                       + "-") + str(int((i / 8)))) + ".png"), False, 0, 0);
            SetCnt((CHAR_ACH + i), (CHAR_ACH + i));
            MakePersistent((CHAR_ACH + i));
            if (!texts[(TXT_ACH_4 + 4)]){
                if ((i % 8) == 7){
                    _local2 = actor[(CHAR_ACH + i)];
                    with (_local2) {
                        add_event_listener(MouseEvent.CLICK, Openfriend_link);
                        buttonMode = True;
                        useHandCursor = True;
                        mouseChildren = False;
                    };
                };
            };
            add_bunch(CHAR_ACH, (CHAR_ACH + i));
            i = (i + 1);
        };
        i = 0;
        while (i < 3) {
            DefineCnt((CHAR_POTION + i), (POTION_X + (POTION_X * i)), POTION_Y)
            _local2 = actor[(CHAR_POTION + i)];
            with (_local2) {
                scaleX = 0.5;
                scaleY = 0.5;
            };
            add_bunch(SCREEN_CHAR, (CHAR_POTION + i));
            add_bunch(SCREEN_CHAR_GOLDEN, (CHAR_POTION + i));
            add_bunch(CHAR_RIGHTPANE, (CHAR_POTION + i));
            DoubleClickHandler(actor[(CHAR_POTION + i)], PotionSingleClick,
                               PotionDoubleClick);
            i = (i + 1);
        };
        define_snd(SND_SHARD, "res/sfx/tower/shard.mp3");
        define_snd(SND_MIRROR, "res/sfx/tower/mirror.mp3");
        define_snd(SND_HATCH, "res/sfx/tower/hatch.mp3");
        DefineCnt(TOWER_SCROLLAREA, (280 + 500), 100);
        _local2 = actor[TOWER_SCROLLAREA];
        with (_local2) {
            scrollRect = new Rectangle(0, 0, 500, 700);
            mouseChildren = False;
            tab_enabled = False;
            tabChildren = False;
            focuseRect = False;
        };
        define_btn(TOWER_TRY, texts[TXT_TOWER_TRY], TowerBtnHandler,
                   btn_classBasic, 940, 700);
        DefineImg(SCR_TOWER_BG,
                  "res/gfx/scr/quest/locations/location_tower.jpg",
                  False, 280, 100);
        define_bunch(SCREEN_TOWER, SCR_CHAR_BG, TOWER_SCROLLAREA, TOWER_TRY,
                     IF_OVL, IF_EXIT);
        tower_levelLabelTimer = new Timer(25);
        tower_levelLabelTimer.add_event_listener(TimerEvent.TIMER,
                                                 tower_levelLabelMoveFn);
        towerBoostPriceFadeoutTimer = new Timer(250, 1);
        towerBoostPriceFadeoutTimer.add_event_listener(TimerEvent.TIMER,
                                                       towerBoostPriceFadeout);
        i = 0;
        while (i < 3) {
            DefineImg((TOWER_PORTRAIT + i),
                      (("res/gfx/npc/copycat_" + str((i + 1))) + ".jpg"),
                      False, SCR_CHAR_CHARX, (SCR_CHAR_CHARY - 1));
            DefineImg((TOWER_NO_PORTRAIT + i),
                      (("res/gfx/npc/copycat_" + str((i + 1))) + "_empty.jpg"),
                      False, SCR_CHAR_CHARX, (SCR_CHAR_CHARY - 1));
            define_btn((TOWER_STEIGERN1 + i), "", BoostCopycat, btn_classPlus,
                       (SCR_CHAR_CHARX + 232), (SCR_CHAR_CHARY + 260));
            actor[(TOWER_STEIGERN1 + i)].scaleX = 0.8;
            actor[(TOWER_STEIGERN1 + i)].scaleY = 0.8;
            actor[(TOWER_STEIGERN1 + i)].add_event_listener(
                                MouseEvent.MOUSE_OVER, ShowTowerBoostPrices);
            actor[(TOWER_STEIGERN1 + i)].add_event_listener(
                                MouseEvent.MOUSE_OUT, HideTowerBoostPrices);
            enable_popup((TOWER_STEIGERN1 + i), texts[TXT_BOOST_COPYCAT]);
            DefineLbl((LBL_TOWER_BOOSTPRICELABEL + i), "", 0,
                      (EXPERIENCE_BAR_Y + 2), FontFormat_Default);
            add_filter((LBL_TOWER_BOOSTPRICELABEL + i),
                      Filter_Shadow);
            actor[(LBL_TOWER_BOOSTPRICELABEL + i)].alpha = 0;
            add_bunch(SCREEN_TOWER, (TOWER_PORTRAIT + i),
                      (TOWER_NO_PORTRAIT + i), (TOWER_STEIGERN1 + i),
                      (LBL_TOWER_BOOSTPRICELABEL + i));
            i = (i + 1);
        };
        i = 0;
        while (i < 15) {
            add_bunch(SCREEN_TOWER, (CHAR_SLOT_1 + i));
            i = (i + 1);
        };
        define_btn(PREV_COPYCAT, "", TowerBtnHandler, btn_classArrowLeft,
                   (SCR_CHAR_CHARX + 10), (SCR_CHAR_CHARY + 10));
        define_btn(NEXT_COPYCAT, "", TowerBtnHandler, btn_classArrowRight,
                   (SCR_CHAR_CHARX + 215), (SCR_CHAR_CHARY + 10));
        DefineCnt(TOWER_BOOSTCOIN, (SCR_CHAR_CHARX + 205), EXPERIENCE_BAR_Y);
        actor[TOWER_BOOSTCOIN].alpha = 0;
        define_bunch(TOWER_BOOSTPRICE, LBL_TOWER_BOOSTPRICELABEL,
                     (LBL_TOWER_BOOSTPRICELABEL + 1),
                     (LBL_TOWER_BOOSTPRICELABEL + 2), TOWER_BOOSTCOIN);
        DefineLbl(LBL_TOWER_EXPLABEL, "", (SCR_CHAR_CHARX + 3),
                  (EXPERIENCE_BAR_Y + 2), FontFormat_LifeBar);
        add_filter(LBL_TOWER_EXPLABEL, Filter_Shadow);
        add_bunch(SCREEN_TOWER, PREV_COPYCAT, NEXT_COPYCAT);
        add_bunch(SCREEN_TOWER, LBL_TOWER_EXPLABEL, TOWER_BOOSTCOIN,
                  SCR_CHAR_NAME);
        i = 0;
        while (i < 5) {
            add_bunch(SCREEN_TOWER, (LBL_SCR_CHAR_STAERKE + i),
                      (LBL_SCR_CHAR_STAERKE_CAPTION + i),
                      (LBL_SCR_CHAR_SCHADEN + i),
                      (LBL_SCR_CHAR_SCHADEN_CAPTION + i));
            i = (i + 1);
        };
        DefineImg(TOWER_BG, "res/gfx/scr/tower/tower_back.jpg", False, 0, 0);
        DefineImg(TOWER_BASE, "res/gfx/scr/tower/tower_base.png", False, 0, 0);
        DefineImg(TOWER_LEVEL, "res/gfx/scr/tower/tower_level.png",
                  False, 0, 0);
        DefineImg((TOWER_LEVEL + 1), "res/gfx/scr/tower/tower_level.png",
         False, 0, 0);
        DefineImg((TOWER_LEVEL + 2), "res/gfx/scr/tower/tower_level.png",
                  False, 0, 0);
        DefineImg(TOWER_ROOF, "res/gfx/scr/tower/tower_roof.png", False, 0, 0);
        DefineImg(TOWER_WINDOW_OPEN, "res/gfx/scr/tower/tower_window_open.png",
                  False, 0, 0);
        DefineImg(TOWER_WINDOW_CLOSED,
                  "res/gfx/scr/tower/tower_window_closed.png", False, 0, 0);
        DefineImg(TOWER_WINDOW_BURNT,
                  "res/gfx/scr/tower/tower_window_destroyed.png", False, 0, 0);
        DefineCnt(TOWER_WINDOW, 0, 0);
        DefineCnt((TOWER_WINDOW + 1), 0, 0);
        DefineCnt((TOWER_WINDOW + 2), 0, 0);
        i = 0;
        while (i < 3) {
            DefineCnt((TOWER_FACE + i), 175, 0);
            actor[(TOWER_FACE + i)].scaleX = 0.5;
            actor[(TOWER_FACE + i)].scaleY = 0.5;
            i = (i + 1);
        };
        define_bunch(TOWER_PIECES, TOWER_BG, TOWER_BASE, TOWER_LEVEL,
                     (TOWER_LEVEL + 1), (TOWER_LEVEL + 2), TOWER_ROOF);
        add_bunch(TOWER_PIECES, TOWER_FACE, (TOWER_FACE + 1), (TOWER_FACE + 2),
                  TOWER_WINDOW_OPEN, TOWER_WINDOW_CLOSED, TOWER_WINDOW_BURNT);
        MakePersistent(TOWER_BG, TOWER_BASE, TOWER_LEVEL, (TOWER_LEVEL + 1),
                       (TOWER_LEVEL + 2), TOWER_ROOF);
        MakePersistent(TOWER_WINDOW, (TOWER_WINDOW + 1), (TOWER_WINDOW + 2),
                       TOWER_FACE, (TOWER_FACE + 1), (TOWER_FACE + 2));
        DefineImg(SCR_FIDGET_BG, "res/gfx/scr/shops/fidget.jpg", False,
                  SCR_SHOP_BG_X, 100);
        DefineImg(FIDGET_AFFE1, "res/gfx/scr/shops/fidget_affe1.jpg", False,
                  (SCR_SHOP_BG_X + FIDGET_AFFE_X), (100 + FIDGET_AFFE_Y));
        DefineImg(FIDGET_AFFE2, "res/gfx/scr/shops/fidget_affe2.jpg", False,
                  (SCR_SHOP_BG_X + FIDGET_AFFE_X), (100 + FIDGET_AFFE_Y));
        DefineImg(FIDGET_AFFE3, "res/gfx/scr/shops/fidget_affe3.jpg", False,
                  (SCR_SHOP_BG_X + FIDGET_AFFE_X), (100 + FIDGET_AFFE_Y));
        actor[FIDGET_AFFE1].mouse_enabled = False;
        actor[FIDGET_AFFE2].mouse_enabled = False;
        actor[FIDGET_AFFE3].mouse_enabled = False;
        if (Capabilities.version[0: 3] != "IOS"){
            DefineImg(FIDGET_TAGKERZE, "res/gfx/scr/shops/tagkerze.swf", False,
                      (SCR_SHOP_BG_X + FIDGET_TAGKERZE_X),
                      (100 + FIDGET_TAGKERZE_Y));
            DefineImg(FIDGET_NACHTKERZE, "res/gfx/scr/shops/nachtkerze.swf",
                      False, (SCR_SHOP_BG_X + FIDGET_NACHTKERZE_X),
                      (100 + FIDGET_NACHTKERZE_Y));
            actor[FIDGET_TAGKERZE].mouse_enabled = False;
            actor[FIDGET_NACHTKERZE].mouse_enabled = False;
        };
        DefineImg(FIDGET_DAY, "res/gfx/scr/shops/fidget_normal.jpg", False,
                  (SCR_SHOP_BG_X + FIDGET_X), (100 + FIDGET_Y));
        DefineImg(FIDGET_IDLE, "res/gfx/scr/shops/fidget_langeweile.jpg",
                  False, (SCR_SHOP_BG_X + FIDGET_X), (100 + FIDGET_Y));
        DefineImg(FIDGET_SALE, "res/gfx/scr/shops/fidget_wasverkauft.jpg",
                  False, (SCR_SHOP_BG_X + FIDGET_X), (100 + FIDGET_Y));
        DefineImg(FIDGET_NIGHT, "res/gfx/scr/shops/fidget_nachts.jpg", False,
                  (SCR_SHOP_BG_X + FIDGET_X), (100 + FIDGET_Y));
        actor[FIDGET_DAY].mouse_enabled = False;
        actor[FIDGET_IDLE].mouse_enabled = False;
        actor[FIDGET_SALE].mouse_enabled = False;
        actor[FIDGET_NIGHT].mouse_enabled = False;
        DefineImg(FIDGET_BLINZELN,
                  "res/gfx/scr/shops/fidget_normal_blinzeln.jpg", False,
                  ((SCR_SHOP_BG_X + FIDGET_X) + FIDGET_BLINZELN_X),
                  ((100 + FIDGET_Y) + FIDGET_BLINZELN_Y));
        actor[FIDGET_BLINZELN].mouse_enabled = False;
        DefineImg(SHAKES_DAY, "res/gfx/scr/shops/shakes_normal.jpg", False,
                  (SCR_SHOP_BG_X + SHAKES_X), (100 + SHAKES_Y));
        DefineImg(SHAKES_NIGHT, "res/gfx/scr/shops/shakes_nacht.jpg", False,
                  (SCR_SHOP_BG_X + SHAKES_X), (100 + SHAKES_Y));
        DefineImg(SHAKES_IDLE, "res/gfx/scr/shops/shakes_gelangweilt.jpg",
                  False, (SCR_SHOP_BG_X + SHAKES_IDLE_X),
                  (100 + SHAKES_IDLE_Y));
        DefineImg(SHAKES_IDLE1, "res/gfx/scr/shops/shakes_spielt1.jpg", False,
                  (SCR_SHOP_BG_X + SHAKES_IDLE2_X), (100 + SHAKES_IDLE2_Y));
        DefineImg(SHAKES_IDLE2, "res/gfx/scr/shops/shakes_spielt2.jpg", False,
                  (SCR_SHOP_BG_X + SHAKES_IDLE2_X), (100 + SHAKES_IDLE2_Y));
        DefineImg(SHAKES_IDLE3, "res/gfx/scr/shops/shakes_spielt3.jpg", False,
                  (SCR_SHOP_BG_X + SHAKES_IDLE2_X), (100 + SHAKES_IDLE2_Y));
        DefineImg(SHAKES_BLINZELN1, "res/gfx/scr/shops/shakes_augen1.jpg",
                  False, ((SCR_SHOP_BG_X + SHAKES_X) + SHAKES_BLINZELN_X),
                  ((100 + SHAKES_Y) + SHAKES_BLINZELN_Y));
        DefineImg(SHAKES_BLINZELN2, "res/gfx/scr/shops/shakes_augen2.jpg",
                  False, ((SCR_SHOP_BG_X + SHAKES_X) + SHAKES_BLINZELN_X),
                  ((100 + SHAKES_Y) + SHAKES_BLINZELN_Y));
        if (Capabilities.version[0: 3] == "IOS"){
            define_bunch(FIDGET_DAY, FIDGET_DAY);
            define_bunch(FIDGET_NIGHT, FIDGET_NIGHT);
        } else {
            define_bunch(FIDGET_DAY, FIDGET_DAY, FIDGET_TAGKERZE);
            define_bunch(FIDGET_NIGHT, FIDGET_NIGHT, FIDGET_NACHTKERZE);
        };
        DefineImg(SCR_SHAKES_BG, "res/gfx/scr/shops/shakes.jpg", False,
                  SCR_SHOP_BG_X, 100);
        define_btn(SHOPS_NEWWAREZ, texts[TXT_SHOPS_NEWWAREZ], RequestNewWarez,
                   btn_classBasic, 0, NEW_WAREZ_Y);
        actor[SHOPS_NEWWAREZ].x = (NEW_WAREZ_X
                                   - int((actor[SHOPS_NEWWAREZ].width / 2)));
        DefineCnt(CHAR_SLOT_FIDGET_1, SHOP_SLOTS_C1_X, SHOP_SLOTS_R1_Y);
        DefineCnt(CHAR_SLOT_FIDGET_2, SHOP_SLOTS_C2_X, SHOP_SLOTS_R1_Y);
        DefineCnt(CHAR_SLOT_FIDGET_3, SHOP_SLOTS_C3_X, SHOP_SLOTS_R1_Y);
        DefineCnt(CHAR_SLOT_FIDGET_4, SHOP_SLOTS_C1_X, SHOP_SLOTS_R2_Y);
        DefineCnt(CHAR_SLOT_FIDGET_5, SHOP_SLOTS_C2_X, SHOP_SLOTS_R2_Y);
        DefineCnt(CHAR_SLOT_FIDGET_6, SHOP_SLOTS_C3_X, SHOP_SLOTS_R2_Y);
        DefineCnt(CHAR_SLOT_SHAKES_1, SHOP_SLOTS_C1_X, SHOP_SLOTS_R1_Y);
        DefineCnt(CHAR_SLOT_SHAKES_2, SHOP_SLOTS_C2_X, SHOP_SLOTS_R1_Y);
        DefineCnt(CHAR_SLOT_SHAKES_3, SHOP_SLOTS_C3_X, SHOP_SLOTS_R1_Y);
        DefineCnt(CHAR_SLOT_SHAKES_4, SHOP_SLOTS_C1_X, SHOP_SLOTS_R2_Y);
        DefineCnt(CHAR_SLOT_SHAKES_5, SHOP_SLOTS_C2_X, SHOP_SLOTS_R2_Y);
        DefineCnt(CHAR_SLOT_SHAKES_6, SHOP_SLOTS_C3_X, SHOP_SLOTS_R2_Y);
        define_bunch(SCREEN_FIDGET, SCR_FIDGET_BG, FIDGET_AFFE2, FIDGET_AFFE3,
                     FIDGET_AFFE1, FIDGET_SALE, FIDGET_IDLE, FIDGET_DAY,
                     FIDGET_BLINZELN, FIDGET_NIGHT, IF_OVL, SHOPS_NEWWAREZ,
                     CA_SCR_CHAR_EXPBAR, IF_EXIT);
        define_bunch(SCREEN_SHAKES, SCR_SHAKES_BG, SHAKES_IDLE, SHAKES_IDLE1,
                     SHAKES_IDLE2, SHAKES_IDLE3, SHAKES_DAY, SHAKES_BLINZELN1,
                     SHAKES_BLINZELN2, SHAKES_NIGHT, IF_OVL, SHOPS_NEWWAREZ,
                     CA_SCR_CHAR_EXPBAR, IF_EXIT);
        DefineImg(FIDGET_EPCIOVL, "res/gfx/scr/shops/epics_overlay_fidget.png",
                  False, (SCR_SHOP_BG_X - 65), (100 + 210));
        DefineImg(SHAKES_EPCIOVL, "res/gfx/scr/shops/epics_overlay_shakes.png",
                  False, (SCR_SHOP_BG_X + 200), (100 + 250));
        AffeBlinzeln = int((random.random() * 30));
        FidgetBlinzeln = int((random.random() * 30));
        ShakesBlinzeln = int((random.random() * 30));
        ShakesIdleStep = 0;
        ShakesIdlePhase = 0;
        WasIdleCount = 0;
        ShopIdle = 0;
        PlayerIdle = False;
        ShopAniTimer = new Timer(100);
        SaleRecoverTime = 0;
        ShopAniTimer.add_event_listener(TimerEvent.TIMER, ShopAniFrame);
        if (!light_mode){
            ShopAniTimer.start();
        } else {
            ShopAniTimer.stop();
        };
        i = 0;
        while (i < 5) {
            add_bunch(SCREEN_FIDGET, (LBL_SCR_CHAR_STAERKE + i),
                      (LBL_SCR_CHAR_STAERKE_CAPTION + i),
                      (LBL_SCR_CHAR_SCHADEN + i),
                      (LBL_SCR_CHAR_SCHADEN_CAPTION + i));
            add_bunch(SCREEN_SHAKES, (LBL_SCR_CHAR_STAERKE + i),
                      (LBL_SCR_CHAR_STAERKE_CAPTION + i),
                      (LBL_SCR_CHAR_SCHADEN + i),
                      (LBL_SCR_CHAR_SCHADEN_CAPTION + i));
            i = (i + 1);
        };
        i = 0;
        while (i < 6) {
            SetCnt((CHAR_SLOT_FIDGET_1 + i), ITM_OFFS);
            SetCnt((CHAR_SLOT_SHAKES_1 + i), ITM_OFFS);
            add_bunch(SCREEN_FIDGET, (CHAR_SLOT_FIDGET_1 + i));
            add_bunch(SCREEN_SHAKES, (CHAR_SLOT_SHAKES_1 + i));
            actor[(CHAR_SLOT_FIDGET_1 + i)].add_event_listener(
                                   MouseEvent.MOUSE_DOWN, ShopMouseDownEvent);
            actor[(CHAR_SLOT_SHAKES_1 + i)].add_event_listener(
                                   MouseEvent.MOUSE_DOWN, ShopMouseDownEvent);
            EnableDragDrop((CHAR_SLOT_FIDGET_1 + i), DropHandler);
            EnableDragDrop((CHAR_SLOT_SHAKES_1 + i), DropHandler);
            actor[(CHAR_SLOT_FIDGET_1 + i)].add_event_listener(
                                   MouseEvent.MOUSE_UP, ShopMouseUpEvent);
            actor[(CHAR_SLOT_SHAKES_1 + i)].add_event_listener(
                                   MouseEvent.MOUSE_UP, ShopMouseUpEvent);
            i = (i + 1);
        };
        i = 0;
        while (i < 15) {
            add_bunch(SCREEN_FIDGET, (CHAR_SLOT_1 + i));
            add_bunch(SCREEN_SHAKES, (CHAR_SLOT_1 + i));
            i = (i + 1);
        };
        RollFrenzy.add_event_listener(TimerEvent.TIMER, RequestNewWarez);
        DefineImg(GOTO_WITCH_OVL, "res/gfx/scr/shops/book_down.jpg", False,
                  ((280 + 500) + 360), (100 + 220));
        actor[GOTO_WITCH_OVL].mouse_enabled = False;
        DefineClickArea(CA_GOTO_WITCH, GOTO_WITCH_OVL, RequestWitchScreen,
                        ((280 + 500) + 359), (100 + 215), 45, 65);
        enable_popup(CA_GOTO_WITCH, texts[TXT_WITCH_BOOK]);
        define_bunch(SCREEN_WITCH);
        define_snd(SND_WITCH_DROP, "res/sfx/toilet/drop.mp3", False);
        add_bunch(SCREEN_WITCH, SND_WITCH_DROP);
        DefineImg(WITCH, "res/gfx/scr/shops/witch.jpg",
                  False, SCR_SHOP_BG_X, 100);
        add_bunch(SCREEN_WITCH, WITCH);
        i = 0;
        while (i < 15) {
            add_bunch(SCREEN_WITCH, (CHAR_SLOT_1 + i));
            i = (i + 1);
        };
        i = 0;
        while (i < 15) {
            DefineImg((WITCH_ANI + i),
                      (("res/gfx/scr/shops/witch_animation/witch"
                       + str(((i * 2) + 1))) + ".jpg"), False, (280 + 500),
                            (100 + 380));
            hide((WITCH_ANI + i));
            add_bunch(SCREEN_WITCH, (WITCH_ANI + i));
            i = (i + 1);
        };
        spellClicking = False;
        i = 0;
        while (i < 10) {
            DefineCnt((WITCH_SCROLL + i),
                      (((280 + 500) + 37) + ((i % 5) * 83)),
                      ((100 + 11) + (math.floor((i / 5)) * 95)));
            actor[(WITCH_SCROLL + i)].useHandCursor = True;
            actor[(WITCH_SCROLL + i)].buttonMode = True;
            actor[(WITCH_SCROLL + i)].add_event_listener(MouseEvent.CLICK,
                                                 function (evt:MouseEvent){
                var id;
                id = ((get_actor_id(evt.target) - WITCH_SCROLL) + 1);
                if (spellClicking){
                    send_action(ACT_WITCH_ENCHANT, id);
                };
                spellClicking = False;
            });
            actor[(WITCH_SCROLL + i)].add_event_listener(MouseEvent.MOUSE_DOWN,
                                                 function (evt:MouseEvent){
                var actorId;
                var i;
                actorId = get_actor_id(evt.target);
                i = (actorId - WITCH_SCROLL);
                actor[actorId].x = ((((280 + 500) + 37) + ((i % 5) * 83)) + 1);
                actor[actorId].y = ((100 + 11 + math.floor((i / 5)) * 95) + 2);
                spellClicking = True;
            });
            actor[(WITCH_SCROLL + i)].add_event_listener(MouseEvent.MOUSE_UP,
                                                 function (evt:MouseEvent){
                var actorId;
                var i;
                actorId = get_actor_id(evt.target);
                i = (actorId - WITCH_SCROLL);
                actor[actorId].x = (((280 + 500) + 37) + ((i % 5) * 83));
                actor[actorId].y = ((100 + 11) + (math.floor((i / 5)) * 95));
            });
            actor[(WITCH_SCROLL + i)].add_event_listener(MouseEvent.MOUSE_OUT,
                                                     function (evt:MouseEvent){
                var actorId;
                var i;
                actorId = get_actor_id(evt.target);
                i = (actorId - WITCH_SCROLL);
                actor[actorId].x = (((280 + 500) + 37) + ((i % 5) * 83));
                actor[actorId].y = ((100 + 11) + (math.floor((i / 5)) * 95));
                spellClicking = False;
            });
            i = (i + 1);
        };
        DefineClickArea(CA_WITCH, C_EMPTY, None, (SCR_SHOP_BG_X + 180), 400,
                        135, 155);
        DefineClickArea(CA_CHALDRON, C_EMPTY, None, (SCR_SHOP_BG_X + 120), 585,
                        260, 160);
        enable_popup(CA_WITCH, texts[TXT_WITCH_HINT]);
        enable_popup(CA_CHALDRON, texts[(TXT_WITCH_HINT + 1)]);
        actor[CA_WITCH].useHandCursor = False;
        actor[CA_CHALDRON].useHandCursor = False;
        add_bunch(SCREEN_WITCH, IF_OVL, CA_WITCH, CA_CHALDRON, IF_EXIT);
        DefineImg(SCR_DEALER_BG, "", False, 280, 100);
        define_bunch(SCREEN_DEALER, SCR_DEALER_BG, IF_OVL, IF_EXIT);
        DefineImg(SCR_WORLDMAP_BG, "res/gfx/scr/map/worldmap.jpg", False,
                  280, 100);
        define_bunch(SCREEN_WORLDMAP, SCR_WORLDMAP_BG, IF_OVL, IF_EXIT);
        i = 0;
        while (i < 100) {
            DefineImg((SCR_QUEST_BG_1 + i),
                      (("res/gfx/scr/quest/locations/location" + str((i + 1)))
                       + ".jpg"), False, 280, 100);
            i = (i + 1);
        };
        DefineImg(QUESTBAR_BG, "res/gfx/if/adventurebar.png", False,
                  QUESTBAR_X, QUESTBAR_Y);
        DefineImg(QUESTBAR_FILL, "res/gfx/if/adventurebar_inside.jpg", False,
                  (QUESTBAR_X + 110), (QUESTBAR_Y + 44));
        DefineImg(QUESTBAR_LIGHT, "res/gfx/if/laden_effekt.png", False,
                  ((QUESTBAR_X + 110) - 5), (QUESTBAR_Y + 44));
        DefineLbl(LBL_QUESTBAR_TEXT, "", 0, QUESTBAR_LABEL_Y,
                  FontFormat_QuestBar);
        define_btn(QUEST_CANCEL, texts[TXT_QUEST_CANCEL], CancelQuest,
                   btn_classBasic, 0, QUEST_CANCEL_Y);
        define_btn(QUEST_SKIP, (texts[TXT_SKIP_FIGHT] + " ~P"), SkipQuest,
                   btn_classBasic, 0, QUEST_CANCEL_Y);
        define_bunch(SCREEN_QUEST, QUESTBAR_BG, QUESTBAR_FILL, QUESTBAR_LIGHT,
                     LBL_QUESTBAR_TEXT, IF_OVL, LBL_SCREEN_TITLE, QUEST_CANCEL,
                     QUEST_SKIP, IF_EXIT);
        i = 0;
        while (i < 4) {
            add_bunch(SCREEN_QUEST, (TV + i));
            i = (i + 1);
        };
        add_bunch(SCREEN_QUEST, CA_TV);
        actor[QUEST_SKIP].x = int(((QUEST_CANCEL_X
                                  - actor[QUEST_SKIP].width) - 5));
        actor[QUESTBAR_FILL].scaleX = 0;
        DefineImg(POST_BG, "res/gfx/scr/post/postamt.jpg", False, 280, 100);
        DefineImg(POST_DAWN1, "res/gfx/scr/post/postamt_abend1.jpg", False,
                  (280 + POST_VOGEL_X), (100 + POST_VOGEL_Y));
        DefineImg(POST_DAWN2, "res/gfx/scr/post/postamt_abend2.jpg", False,
                  (280 + POST_FENSTER_X), (100 + POST_FENSTER_Y));
        DefineImg(POST_NIGHT1, "res/gfx/scr/post/postamt_nacht1.jpg", False,
                  (280 + POST_VOGEL_X), (100 + POST_VOGEL_Y));
        DefineImg(POST_NIGHT2, "res/gfx/scr/post/postamt_nacht2.jpg", False,
                  (280 + POST_FENSTER_X), (100 + POST_FENSTER_Y));
        define_bunch(POST_DAWN, POST_DAWN1, POST_DAWN2);
        define_bunch(POST_NIGHT, POST_NIGHT1, POST_NIGHT2);
        DefineFromClass(SHP_POST_BLACK_SQUARE, black_square, POST_SQUARE_X,
                        POST_SQUARE_Y);
        _local2 = actor[SHP_POST_BLACK_SQUARE];
        with (_local2) {
            width = POST_SQUARE_X;
            height = POST_SQUARE_Y;
            alpha = 0.6;
        };
        DefineLbl(LBL_POST_TITLE_INBOX, texts[TXT_POST_TITLE_INBOX],
                  SCREEN_TITLE_X, SCREEN_TITLE_Y, FontFormat_ScreenTitle);
        actor[LBL_POST_TITLE_INBOX].x = (SCREEN_TITLE_X
                         - int((actor[LBL_POST_TITLE_INBOX].text_width / 2)));
        DefineLbl(LBL_POST_TITLE_READ, texts[TXT_POST_TITLE_READ],
                  SCREEN_TITLE_X, SCREEN_TITLE_Y, FontFormat_ScreenTitle);
        actor[LBL_POST_TITLE_READ].x = (SCREEN_TITLE_X
                        - int((actor[LBL_POST_TITLE_READ].text_width / 2)));
        DefineLbl(LBL_POST_TITLE_WRITE, texts[TXT_POST_TITLE_WRITE],
                  SCREEN_TITLE_X, SCREEN_TITLE_Y, FontFormat_ScreenTitle);
        actor[LBL_POST_TITLE_WRITE].x = (SCREEN_TITLE_X
                     - int((actor[LBL_POST_TITLE_WRITE].text_width / 2)));
        add_filter(LBL_POST_TITLE_INBOX, Filter_Shadow);
        add_filter(LBL_POST_TITLE_READ, Filter_Shadow);
        add_filter(LBL_POST_TITLE_WRITE, Filter_Shadow);
        DefineCnt(POST_LIST, POST_LIST_X, POST_LIST_Y);
        define_btn(POST_READ, texts[TXT_POST_READ], PostBtnHandler,
                   btn_classBasic, POST_BUTTONS_X, POST_BUTTONS_Y);
        define_btn(POST_DELETE, texts[TXT_POST_DELETE], PostBtnHandler,
                   btn_classBasic,
                   (POST_BUTTONS_X
                    + ((actor[POST_READ].width + POST_BUTTONS_X) * 2)),
                    POST_BUTTONS_Y);
        define_btn(POST_WRITE, texts[TXT_POST_WRITE], PostBtnHandler,
                   btn_classBasic,
                   (POST_BUTTONS_X + ((actor[POST_READ].width
                    + POST_BUTTONS_X) * 1)), POST_BUTTONS_Y);
        define_btn(POST_FLUSH, texts[(TXT_POST_FLUSH_TEXT + 2)],
                   PostBtnHandler, btn_classBasic,
                   (POST_BUTTONS_X + ((actor[POST_READ].width
                    + POST_BUTTONS_X) * 3)), POST_BUTTONS_Y);
        define_btn(POST_DELETEREAD, texts[TXT_POST_DELETE], PostBtnHandler,
                   btn_classBasic,
                   (POST_BUTTONS_X + ((actor[POST_READ].width
                    + POST_BUTTONS_X) * 2)), POST_BUTTONS_Y);
        define_btn(POST_FORWARD, texts[TXT_POST_FORWARD], PostBtnHandler,
                   btn_classBasic, (POST_BUTTONS_X + ((actor[POST_READ].width
                                    + POST_BUTTONS_X) * 3)), POST_BUTTONS_Y);
        define_btn(POST_PROFILE, "", PostBtnHandler, btn_classView,
                   POST_PROFILE_X, POST_BUTTONS_Y);
        define_btn(POST_UP, "", PostBtnHandler, btn_classArrowUp,
                   POST_SCROLLX, POST_SCROLLUP_Y);
        define_btn(POST_DOWN, "", PostBtnHandler, btn_classArrowDown,
                   POST_SCROLLX, POST_SCROLLDOWN_Y);
        define_btn(POST_READ_NEXT, "", PostBtnHandler, btn_classArrowRight,
                   ((POST_BUTTONS_X + ((actor[POST_READ].width
                    + POST_BUTTONS_X) * 4)) + 50), (POST_BUTTONS_Y + 3));
        define_btn(POST_READ_PREV, "", PostBtnHandler, btn_classArrowLeft,
                   ((POST_BUTTONS_X + ((actor[POST_READ].width
                    + POST_BUTTONS_X) * 4)) + 5), (POST_BUTTONS_Y + 3));
        enable_popup(POST_PROFILE, texts[TXT_POPUP_PROFILE]);
        DefineLbl(LBL_POST_FLUSH_TEXT,
                  texts[(TXT_POST_FLUSH_TEXT + 1)].split("#").join(chr(13)),
                   ((IF_WIN_X + IF_WIN_WELCOME_X) - (ARENA_TEXT_X / 2)),
                   (IF_WIN_Y + ARENA_TEXT_Y), FontFormat_DefaultLeft);
        add_filter(LBL_POST_FLUSH_TEXT, Filter_Shadow);
        define_btn(POST_FLUSH_CANCEL, texts[TXT_ABBRECHEN], PostBtnHandler,
                   btn_classBasic, 0, (IF_WIN_Y + GILDE_OK_Y));
        define_btn(POST_FLUSH_OK, texts[TXT_OK], PostBtnHandler,
                   btn_classBasic, 0, (IF_WIN_Y + GILDE_OK_Y));
        _local2 = actor[POST_FLUSH_CANCEL];
        with (_local2) {
            x = ((IF_WIN_X + IF_WIN_WELCOME_X) + 10);
        };
        _local2 = actor[POST_FLUSH_OK];
        with (_local2) {
            x = (((IF_WIN_X + IF_WIN_WELCOME_X) - int(width)) - 10);
        };
        define_bunch(POST_FLUSHMSG);
        add_bunch(POST_FLUSHMSG, CA_POST_BLOCK, IF_WINDOW, LBL_WINDOW_TITLE,
                  LBL_POST_FLUSH_TEXT, POST_FLUSH_OK, POST_FLUSH_CANCEL,
                  IF_EXIT);
        DefineClickArea(CA_POST_BLOCK, C_EMPTY, None, 280, 100, (RES_X - 280),
                        (RES_Y - 100));
        _local2 = actor[CA_POST_BLOCK];
        with (_local2) {
            useHandCursor = False;
            buttonMode = False;
        };
        DefineFromClass(INP_POST_SUBJECT, SimpleTextField, POST_INP_X,
                        POST_SUBJECT_Y, 2, "text");
        DefineFromClass(INP_POST_ADDRESS, SimpleTextField, POST_INP_X,
                        POST_ADDRESS_Y, 2, "name");
        DefineFromClass(INP_POST_TEXT, SimpleTextArea, POST_INP_X, POST_TEXT_Y,
                        2, "text");
        CleanupField(INP_POST_SUBJECT);
        CleanupField(INP_POST_ADDRESS);
        CleanupField(INP_POST_TEXT);
        AdvancedPostHandler = function (evt:TextEvent){
            var i;
            var textEntered:String;
            if (evt.text.length == 1){
                textEntered = (actor[INP_POST_ADDRESS].getChildAt(1).text[
                               0: actor[INP_POST_ADDRESS].getChildAt(1)
                               .selectionBeginIndex] + evt.text);
                i = 0;
                while (i < suggestNames.length) {
                    if ((((textEntered.length > 0))
                        and ((textEntered.lower() == suggestNames[i].lower()[
                             0: textEntered.length])))){
                        actor[INP_POST_ADDRESS].getChildAt(1).text = (
                          textEntered + suggestNames[i][textEntered.length:]);
                        actor[INP_POST_ADDRESS].getChildAt(1).setSelection(
                           textEntered.length, actor[INP_POST_ADDRESS]
                           .getChildAt(1).text.length);
                        evt.preventDefault();
                        break;
                    };
                    i++;
                };
            };
        };
        killFieldContent = function (evt:Event){
            var actor_id;
            actor_id = get_actor_id(evt.target.parent);
            if (actor[actor_id].getChildAt(1).type == TextFieldType.DYNAMIC){
                return;
            };
            Switch (actor_id){
                if case(INP_POST_ADDRESS:
                    if (actor[actor_id].getChildAt(1).text == texts[
                        TXT_EMPFAENGER]){
                        actor[actor_id].getChildAt(1).text = "";
                    };
                    break;
                if case(INP_POST_SUBJECT:
                    if (actor[actor_id].getChildAt(1).text == texts[
                        TXT_BETREFF]){
                        actor[actor_id].getChildAt(1).text = "";
                    };
                    break;
                if case(INP_POST_TEXT:
                    if (actor[actor_id].getChildAt(1).text == texts[
                            TXT_NACHRICHT]){
                        actor[actor_id].getChildAt(1).text = "";
                    };
                    break;
            };
        };
        fillFieldContent = function (evt:Event){
            var actor_id;
            actor_id = get_actor_id(evt.target.parent);
            Switch (actor_id){
                if case(INP_POST_ADDRESS:
                    if (actor[actor_id].getChildAt(1).text == ""){
                        actor[actor_id].getChildAt(1).text = texts[
                            TXT_EMPFAENGER];
                    };
                    break;
                if case(INP_POST_SUBJECT:
                    if (actor[actor_id].getChildAt(1).text == ""){
                        actor[actor_id].getChildAt(1).text = texts[
                            TXT_BETREFF];
                    };
                    break;
                if case(INP_POST_TEXT:
                    if (actor[actor_id].getChildAt(1).text == ""){
                        actor[actor_id].getChildAt(1).text = texts[
                            TXT_NACHRICHT];
                    };
                    break;
            };
        };
        actor[INP_POST_ADDRESS].getChildAt(1).add_event_listener(
                                 TextEvent.TEXT_INPUT, AdvancedPostHandler);
        actor[INP_POST_SUBJECT].add_event_listener(
                                   MouseEvent.MOUSE_DOWN, killFieldContent);
        actor[INP_POST_ADDRESS].add_event_listener(
                                   MouseEvent.MOUSE_DOWN, killFieldContent);
        actor[INP_POST_TEXT].add_event_listener(
                                MouseEvent.MOUSE_DOWN, killFieldContent);
        actor[INP_POST_SUBJECT].add_event_listener(
                                   FocusEvent.FOCUS_OUT, fillFieldContent);
        actor[INP_POST_ADDRESS].add_event_listener(
                               FocusEvent.FOCUS_OUT, fillFieldContent);
        actor[INP_POST_TEXT].add_event_listener(
                                FocusEvent.FOCUS_OUT, fillFieldContent);
        define_btn(POST_SEND, texts[TXT_POST_SEND], PostBtnHandler,
                   btn_classBasic, POST_BUTTONS_X, POST_SENDBUTTON_Y);
        define_btn(POST_CANCEL, texts[TXT_POST_CANCEL], PostBtnHandler,
                   btn_classBasic,
                   ((POST_BUTTONS_X + actor[POST_SEND].width)
                    + POST_BUTTONS_X), POST_SENDBUTTON_Y);
        define_btn(POST_RETURN, texts[TXT_POST_RETURN], PostBtnHandler,
                   btn_classBasic, POST_BUTTONS_X, POST_SENDBUTTON_Y);
        define_btn(POST_ACCEPT, texts[TXT_POST_ACCEPT], PostBtnHandler,
                   btn_classBasic,
                   (POST_BUTTONS_X + actor[POST_SEND].width + POST_BUTTONS_X),
                   POST_SENDBUTTON_Y);
        define_btn(POST_REPLY, texts[TXT_POST_REPLY], PostBtnHandler,
                   btn_classBasic,
                   (POST_BUTTONS_X + actor[POST_SEND].width + POST_BUTTONS_X),
                   POST_SENDBUTTON_Y);
        define_btn(POST_VIEWFIGHT, texts[TXT_POST_VIEWFIGHT], PostBtnHandler,
                   btn_classBasic,
                   (POST_BUTTONS_X + actor[POST_SEND].width + POST_BUTTONS_X),
                   POST_SENDBUTTON_Y);
        DefineLbl(LBL_POST_LIMIT, "", POST_SQUARE_X,
                  (POST_SQUARE_Y - POST_LIMIT_Y), FontFormat_Default);
        add_filter(LBL_POST_LIMIT, Filter_Shadow);
        DefineCnt(POST_GUILD, 0, (POST_ADDRESS_Y + 2));
        DefineLbl(LBL_POST_GUILD, texts[TXT_GILDEN], 0, 0, FontFormat_Default);
        add_filter(LBL_POST_GUILD, Filter_Shadow);
        MakePersistent(LBL_POST_GUILD);
        _local2 = actor[POST_GUILD];
        with (_local2) {
            addChild(actor[LBL_POST_GUILD]);
            textLinkMakeClickable(getChildAt(0).parent);
            x = (((POST_INP_X + actor[INP_POST_ADDRESS].width) - width) - 5);
            add_event_listener(MouseEvent.CLICK, GuildMsgMode);
            mouseChildren = False;
            useHandCursor = True;
            buttonMode = True;
        };
        define_bunch(POST_LIST, LBL_POST_TITLE_INBOX, POST_LIST, POST_READ,
                     POST_DELETE, POST_FLUSH, POST_WRITE, POST_UP, POST_DOWN,
                     LBL_POST_LIMIT);
        define_bunch(POST_WRITE, LBL_POST_TITLE_WRITE, INP_POST_SUBJECT,
                     INP_POST_ADDRESS, POST_GUILD, INP_POST_TEXT, POST_SEND,
                     POST_CANCEL);
        define_bunch(POST_READ, LBL_POST_TITLE_READ, INP_POST_SUBJECT,
                     INP_POST_ADDRESS, INP_POST_TEXT, POST_RETURN,
                     POST_DELETEREAD, POST_READ_NEXT, POST_READ_PREV,
                     POST_PROFILE, POST_FORWARD);
        define_bunch(SCREEN_POST, POST_BG, IF_OVL, POST_NIGHT, POST_DAWN,
                     SHP_POST_BLACK_SQUARE, POST_LIST, IF_EXIT);
        DefineImg(ARENA_BG_DAY, "res/gfx/scr/arena/arena_tag.jpg",
                  False, 280, 100);
        DefineImg(ARENA_BG_DAWN, "res/gfx/scr/arena/arena_abend.jpg",
                  False, 280, 100);
        DefineImg(ARENA_BG_NIGHT, "res/gfx/scr/arena/arena_nacht.jpg",
                  False, 280, 100);
        if (Capabilities.version[0: 3] != "IOS"){
            DefineImg(ARENA_FEUER, "res/gfx/scr/arena/arenafeuer.swf",
                      False, ARENA_FEUER_X, ARENA_FEUER_Y);
        };
        DefineLbl(LBL_ARENA_TEXT, "",
                  ((IF_WIN_X + IF_WIN_WELCOME_X) - (ARENA_TEXT_X / 2)),
                  ((IF_WIN_Y + ARENA_TEXT_Y) + AIRRelMoveY),
                  FontFormat_Default);
        DefineLbl(LBL_ARENA_DELAY, "",
                  (IF_WIN_X + ARENA_DELAY_X),
                  ((IF_WIN_Y + ARENA_DELAY_Y) + AIRRelMoveY),
                  FontFormat_Default);
        add_filter(LBL_ARENA_TEXT, Filter_Shadow);
        add_filter(LBL_ARENA_DELAY, Filter_Shadow);
        _local2 = actor[LBL_ARENA_TEXT];
        with (_local2) {
            wordWrap = True;
            width = ARENA_TEXT_X;
            text = texts[TXT_ARENA_1];
        };
        DefineFromClass(INP_ARENA_ENEMY, text_input1, 0,
                        ((IF_WIN_Y + ARENA_INP_Y) + AIRRelMoveY), 2, "name");
        _local2 = actor[INP_ARENA_ENEMY];
        with (_local2) {
            getChildAt(1).text = "";
            x = ((IF_WIN_X + IF_WIN_WELCOME_X) - int((width / 2)));
            add_event_listener(KeyboardEvent.KEY_DOWN, AttackEnemy);
        };
        define_btn(ARENA_OK, texts[TXT_OK], AttackEnemy, btn_classBasic, 0,
                   ((IF_WIN_Y + ARENA_OK_Y) + AIRRelMoveY));
        _local2 = actor[ARENA_OK];
        with (_local2) {
            x = ((IF_WIN_X + IF_WIN_WELCOME_X) - int((width / 2)));
        };
        define_bunch(WINDOW_ARENA, IF_WINDOW, LBL_WINDOW_TITLE, LBL_ARENA_TEXT,
                     INP_ARENA_ENEMY, LBL_ARENA_DELAY, ARENA_OK);
        define_bunch(SCREEN_ARENA_DAY, ARENA_BG_DAY);
        define_bunch(SCREEN_ARENA_DAWN, ARENA_BG_DAWN);
        define_bunch(SCREEN_ARENA_NIGHT, ARENA_BG_NIGHT);
        if (Capabilities.version[0: 3] == "IOS"){
            define_bunch(SCREEN_ARENA, IF_OVL, WINDOW_ARENA, IF_EXIT);
        } else {
            define_bunch(SCREEN_ARENA, ARENA_FEUER, IF_OVL, WINDOW_ARENA,
                         IF_EXIT);
        };
        DefineImg(STALL_BG_GUT, "res/gfx/scr/stall/stall_gut.jpg",
                  False, 280, 100);
        DefineImg(STALL_BG_BOESE, "res/gfx/scr/stall/stall_boese.jpg",
                  False, 280, 100);
        DefineImg(STALL_DAWN, "res/gfx/scr/stall/stall_abend.jpg",
                  False, (280 + STALL_TUER_X), (100 + STALL_TUER_Y));
        DefineImg(STALL_NIGHT, "res/gfx/scr/stall/stall_nacht.jpg",
                  False, (280 + STALL_TUER_X), (100 + STALL_TUER_Y));
        DefineImg(STALL_ARME1, "res/gfx/scr/stall/stall_arme1.png",
                  False, (280 + STALL_ARME_X), (100 + STALL_ARME_Y));
        DefineImg(STALL_ARME2, "res/gfx/scr/stall/stall_arme2.png",
                  False, (280 + STALL_ARME_X), (100 + STALL_ARME_Y));
        DefineImg(STALL_ARME3, "res/gfx/scr/stall/stall_arme3.png",
                  False, (280 + STALL_ARME_X), (100 + STALL_ARME_Y));
        DefineImg(STALL_ARME4, "res/gfx/scr/stall/stall_arme4.png",
                  False, (280 + STALL_ARME_X), (100 + STALL_ARME_Y));
        DefineImg(STALL_ARME5, "res/gfx/scr/stall/stall_arme5.png",
                  False, (280 + STALL_ARME_X), (100 + STALL_ARME_Y));
        DefineImg(STALL_OVL_GUT1, "res/gfx/scr/stall/tiger2_mouseover.jpg",
                  False, (280 + STALL_OVL_GUT1_X), (100 + STALL_OVL_GUT1_Y));
        DefineImg(STALL_OVL_GUT2, "res/gfx/scr/stall/kuh_mouseover.jpg",
                  False, (280 + STALL_OVL_GUT2_X), (100 + STALL_OVL_GUT2_Y));
        DefineImg(STALL_OVL_GUT3, "res/gfx/scr/stall/horse_mouseover.jpg",
                  False, (280 + STALL_OVL_GUT3_X), (100 + STALL_OVL_GUT3_Y));
        DefineImg(STALL_OVL_GUT4, "res/gfx/scr/stall/greif_mouseover.jpg",
                  False, (280 + STALL_OVL_GUT4_X), (100 + STALL_OVL_GUT4_Y));
        DefineImg(STALL_OVL_BOESE1, "res/gfx/scr/stall/pig_mouseover.jpg",
                  False, (280 + STALL_OVL_BOESE1_X),
                  (100 + STALL_OVL_BOESE1_Y));
        DefineImg(STALL_OVL_BOESE2, "res/gfx/scr/stall/wolf_mouseover.jpg",
                  False, (280 + STALL_OVL_BOESE2_X),
                  (100 + STALL_OVL_BOESE2_Y));
        DefineImg(STALL_OVL_BOESE3, "res/gfx/scr/stall/raptor_mouseover.jpg",
                  False, (280 + STALL_OVL_BOESE3_X),
                  (100 + STALL_OVL_BOESE3_Y));
        DefineImg(STALL_OVL_BOESE4, "res/gfx/scr/stall/dragon_mouseover.jpg",
                  False, (280 + STALL_OVL_BOESE4_X),
                  (100 + STALL_OVL_BOESE4_Y));
        DefineClickArea(CA_STALL_BOX_GUT1, STALL_OVL_GUT1, ClickMount,
                        (STALL_BOX1_X + 280), (STALL_BOX1_Y + 100),
                        STALL_BOX1_X, STALL_BOX1_Y);
        DefineClickArea(CA_STALL_BOX_GUT2, STALL_OVL_GUT2, ClickMount,
                        (STALL_BOX2_X + 280), (STALL_BOX2_Y + 100),
                        STALL_BOX2_X, STALL_BOX2_Y);
        DefineClickArea(CA_STALL_BOX_GUT3, STALL_OVL_GUT3, ClickMount,
                        (STALL_BOX3_X + 280), (STALL_BOX3_Y + 100),
                        STALL_BOX3_X, STALL_BOX3_Y);
        DefineClickArea(CA_STALL_BOX_GUT4, STALL_OVL_GUT4, ClickMount,
                        (STALL_BOX4_X + 280), (STALL_BOX4_Y + 100),
                        STALL_BOX4_X, STALL_BOX4_Y);
        DefineClickArea(CA_STALL_BOX_BOESE1, STALL_OVL_BOESE1, ClickMount,
                        (STALL_BOX1_X + 280), (STALL_BOX1_Y + 100),
                        STALL_BOX1_X, STALL_BOX1_Y);
        DefineClickArea(CA_STALL_BOX_BOESE2, STALL_OVL_BOESE2, ClickMount,
                        (STALL_BOX2_X + 280), (STALL_BOX2_Y + 100),
                        STALL_BOX2_X, STALL_BOX2_Y);
        DefineClickArea(CA_STALL_BOX_BOESE3, STALL_OVL_BOESE3, ClickMount,
                        (STALL_BOX3_X + 280), (STALL_BOX3_Y + 100),
                        STALL_BOX3_X, STALL_BOX3_Y);
        DefineClickArea(CA_STALL_BOX_BOESE4, STALL_OVL_BOESE4, ClickMount,
                        (STALL_BOX4_X + 280), (STALL_BOX4_Y + 100),
                        STALL_BOX4_X, STALL_BOX4_Y);
        i = 0;
        while (i < 8) {
            define_snd((SND_MOUNT_1 + i),
                       (("res/sfx/mounts/mount" + str((i + 1))) + ".mp3"));
            i = (i + 1);
        };
        define_bunch(STALL_GUT, STALL_BG_GUT, IF_OVL, CA_STALL_BOX_GUT1,
                     CA_STALL_BOX_GUT2, CA_STALL_BOX_GUT3, CA_STALL_BOX_GUT4);
        define_bunch(STALL_BOESE, STALL_BG_BOESE, IF_OVL, CA_STALL_BOX_BOESE1,
                     CA_STALL_BOX_BOESE2, CA_STALL_BOX_BOESE3,
                     CA_STALL_BOX_BOESE4);
        define_bunch(SCREEN_STALL, STALL_DAWN, STALL_NIGHT, STALL_ARME1,
                     STALL_ARME2, STALL_ARME3, STALL_ARME4, STALL_ARME5,
                     IF_EXIT);
        DefineFromClass(SHP_STALL_BLACK_SQUARE, black_square_neutral,
                        (SCREEN_TITLE_X - int((STALL_SQUARE_X / 2))),
                        STALL_SQUARE_Y);
        _local2 = actor[SHP_STALL_BLACK_SQUARE];
        with (_local2) {
            width = STALL_SQUARE_X;
            height = STALL_SQUARE_Y;
            alpha = 0.65;
        };
        DefineLbl(LBL_STALL_TITEL, texts[TXT_STALL_TITEL],
                  (actor[SHP_STALL_BLACK_SQUARE].x + STALL_TITEL_X),
                  (actor[SHP_STALL_BLACK_SQUARE].y + STALL_TITEL_Y),
                  FontFormat_Heading);
        DefineLbl(LBL_STALL_TEXT, texts[TXT_STALL_TEXT],
                  (actor[SHP_STALL_BLACK_SQUARE].x + STALL_TITEL_X),
                  ((actor[LBL_STALL_TITEL].y
                   + actor[LBL_STALL_TITEL].textHeight) + STALL_ZEILEN_Y),
                    FontFormat_DefaultLeft);
        _local2 = actor[LBL_STALL_TEXT];
        with (_local2) {
            wordWrap = True;
            width = (STALL_SQUARE_X - (STALL_TITEL_X * 2));
        };
        DefineLbl(LBL_STALL_GAIN, "",
                  (actor[SHP_STALL_BLACK_SQUARE].x + STALL_TITEL_X),
                  (((actor[LBL_STALL_TITEL].y
                   + actor[LBL_STALL_TITEL].textHeight) + STALL_ZEILEN_Y)
                + STALL_GAIN_Y), FontFormat_DefaultLeft);
        DefineLbl(LBL_STALL_SCHATZ, texts[TXT_STALL_SCHATZ], 0,
                  actor[LBL_STALL_GAIN].y, FontFormat_DefaultLeft);
        DefineLbl(LBL_STALL_SCHATZGOLD, "", 0, actor[LBL_STALL_GAIN].y,
                  FontFormat_DefaultLeft);
        DefineLbl(LBL_STALL_SCHATZSILBER, "", 0, actor[LBL_STALL_GAIN].y,
                  FontFormat_DefaultLeft);
        DefineCnt(STALL_SCHATZGOLD, 0, actor[LBL_STALL_GAIN].y);
        DefineCnt(STALL_SCHATZSILBER, 0, actor[LBL_STALL_GAIN].y);
        DefineLbl(LBL_STALL_GOLD, "0",
                  (actor[SHP_STALL_BLACK_SQUARE].x + STALL_TITEL_X), 0,
                  FontFormat_Default);
        _local2 = actor[LBL_STALL_GOLD];
        with (_local2) {
            y = (((STALL_SQUARE_Y + STALL_SQUARE_Y)
                 - STALL_TITEL_Y) - textHeight);
            DefineCnt(STALL_GOLD,
                      (actor[SHP_STALL_BLACK_SQUARE].x + STALL_TITEL_X), y);
            DefineLbl(LBL_STALL_MUSH, "0", 0, y, FontFormat_Default);
            DefineCnt(STALL_MUSH, 0, y);
            DefineLbl(LBL_STALL_LAUFZEIT, texts[TXT_STALL_LAUFZEIT],
                      (actor[SHP_STALL_BLACK_SQUARE].x + STALL_TITEL_X),
                      ((y - textHeight) - STALL_ZEILEN_Y),
                      FontFormat_Default);
        };
        define_btn(STALL_BUY, texts[TXT_STALL_BUY], BuyMount,
                   btn_classBasic, 0, 0);
        _local2 = actor[STALL_BUY];
        with (_local2) {
            x = (((SCREEN_TITLE_X + int((STALL_SQUARE_X / 2)))
                 - width) - STALL_TITEL_X);
            y = (((STALL_SQUARE_Y + STALL_SQUARE_Y) - STALL_TITEL_Y) - height);
        };
        add_bunch(SCREEN_STALL, SHP_STALL_BLACK_SQUARE, LBL_STALL_TITEL,
                  LBL_STALL_TEXT, LBL_STALL_GAIN);
        SelectedMount = 0;
        OldMount = 0;
        DefineImg(GILDEN_BG, "res/gfx/scr/gilde/gilde.jpg", False, 280, 100);
        DefineImg(GILDE_RAHMEN, "res/gfx/scr/gilde/gilde_interface.png",
                  False, 280, 100);
        DefineLbl(LBL_GILDE_GRUENDEN_TEXT, "", ((IF_WIN_X + IF_WIN_WELCOME_X)
                  - (GILDE_GRUENDEN_TEXT_X / 2)),
                ((IF_WIN_Y + GILDE_GRUENDEN_TEXT_Y) + AIRRelMoveY),
                FontFormat_Default);
        add_filter(LBL_GILDE_GRUENDEN_TEXT, Filter_Shadow);
        _local2 = actor[LBL_GILDE_GRUENDEN_TEXT];
        with (_local2) {
            wordWrap = True;
            width = GILDE_GRUENDEN_TEXT_X;
            text = texts[TXT_GILDE_GRUENDEN];
        };
        arabize(LBL_GILDE_GRUENDEN_TEXT);
        DefineFromClass(INP_GILDE_GRUENDEN, text_input1, 0,
                        ((IF_WIN_Y + GILDE_GRUENDEN_INP_Y) + AIRRelMoveY),
                        2, "name");
        _local2 = actor[INP_GILDE_GRUENDEN];
        with (_local2) {
            getChildAt(1).text = "";
            x = ((IF_WIN_X + IF_WIN_WELCOME_X) - int((width / 2)));
        };
        define_btn(GILDE_GRUENDEN, texts[TXT_GILDE_GRUENDEN_OK], GildeGruenden,
                   btn_classBasic, 0,
                   ((IF_WIN_Y + GILDE_GRUENDEN_OK_Y) + AIRRelMoveY));
        _local2 = actor[GILDE_GRUENDEN];
        with (_local2) {
            x = ((IF_WIN_X + IF_WIN_WELCOME_X) - int((width / 2)));
        };
        define_bunch(GILDE_GEBAEUDE);
        i = 0;
        while (i < 3) {
            DefineImg((GILDE_GEBAEUDE + i),
                      (("res/gfx/scr/gilde/building" + str((i + 1))) + ".png"),
                      False, GILDE_GEBAEUDE_X,
                      (GILDE_GEBAEUDE_Y + (GILDE_GEBAEUDE_Y * i)));
            DefineLbl((LBL_GILDE_GEBAEUDE_NAME + i),
                      texts[(TXT_GILDE_GEBAEUDE_NAME1 + i)],
                      (GILDE_GEBAEUDE_X + GILDE_TEXT_X),
                      (GILDE_GEBAEUDE_Y + (GILDE_GEBAEUDE_Y * i)),
                      FontFormat_GuildBuilding);
            DefineLbl((LBL_GILDE_GEBAEUDE_WERT_CAPTION + i),
                      texts[(TXT_GILDE_GEBAEUDE_WERT1 + i)],
                      (GILDE_GEBAEUDE_X + GILDE_TEXT_X),
                      ((GILDE_GEBAEUDE_Y + (GILDE_GEBAEUDE_Y * i))
                       + (GILDE_GEBAEUDE_LINE * 1)), FontFormat_GuildBuilding);
            DefineLbl((LBL_GILDE_GEBAEUDE_WERT + i), "",
                      (GILDE_GEBAEUDE_X + GILDE_TEXT_IMPROVE_X),
                      ((GILDE_GEBAEUDE_Y + (GILDE_GEBAEUDE_Y * i))
                       + (GILDE_GEBAEUDE_LINE * 2)), FontFormat_GuildBuilding);
            DefineLbl((LBL_GILDE_GEBAEUDE_STUFE_CAPTION + i),
                      texts[TXT_GILDE_GEBAEUDE_STUFE],
                      (GILDE_GEBAEUDE_X + GILDE_TEXT_IMPROVE_X),
                      ((GILDE_GEBAEUDE_Y + (GILDE_GEBAEUDE_Y * i))
                       + (GILDE_GEBAEUDE_LINE * 3)), FontFormat_GuildBuilding);
            DefineLbl((LBL_GILDE_GEBAEUDE_STUFE + i), "",
                      ((actor[(LBL_GILDE_GEBAEUDE_STUFE_CAPTION + i)].x
                       + actor[(LBL_GILDE_GEBAEUDE_STUFE_CAPTION
                                + i)].text_width) + 10),
                        actor[(LBL_GILDE_GEBAEUDE_STUFE_CAPTION + i)].y,
                        FontFormat_GuildBuilding);
            DefineLbl((LBL_GILDE_GEBAEUDE_KOSTEN_GOLD + i), "", 0,
                      ((GILDE_GEBAEUDE_Y + (GILDE_GEBAEUDE_Y * i))
                       + (GILDE_GEBAEUDE_LINE * 4)), FontFormat_GuildBuilding);
            DefineLbl((LBL_GILDE_GEBAEUDE_KOSTEN_MUSH + i), "", 0,
                      ((GILDE_GEBAEUDE_Y + (GILDE_GEBAEUDE_Y * i))
                       + (GILDE_GEBAEUDE_LINE * 4)), FontFormat_GuildBuilding);
            DefineCnt((GILDE_GEBAEUDE_GOLD + i), 0,
                      ((GILDE_GEBAEUDE_Y + (GILDE_GEBAEUDE_Y * i))
                       + (GILDE_GEBAEUDE_LINE * 4)));
            DefineCnt((GILDE_GEBAEUDE_MUSH + i), 0,
                      ((GILDE_GEBAEUDE_Y + (GILDE_GEBAEUDE_Y * i))
                       + (GILDE_GEBAEUDE_LINE * 4)));
            define_btn((GILDE_GEBAEUDE_IMPROVE + i), "", GildeBtnHandler,
                       btn_classPlus,
                       (GILDE_GEBAEUDE_X + GILDE_GEBAEUDE_IMPROVE_X),
                       ((GILDE_GEBAEUDE_Y + (GILDE_GEBAEUDE_Y * i))
                        + GILDE_GEBAEUDE_IMPROVE_Y));
            DefineImg((GILDE_GEBAEUDE_IMPROVE_GRAY + i),
                      "res/gfx/scr/gilde/plus_disabled.png", False,
                      (GILDE_GEBAEUDE_X + GILDE_GEBAEUDE_IMPROVE_X),
                       ((GILDE_GEBAEUDE_Y + (GILDE_GEBAEUDE_Y * i))
                        + GILDE_GEBAEUDE_IMPROVE_Y));
            add_filter((LBL_GILDE_GEBAEUDE_NAME + i), Filter_Shadow);
            add_filter((LBL_GILDE_GEBAEUDE_WERT_CAPTION + i), Filter_Shadow);
            add_filter((LBL_GILDE_GEBAEUDE_WERT + i), Filter_Shadow);
            add_filter((LBL_GILDE_GEBAEUDE_STUFE_CAPTION + i), Filter_Shadow);
            add_filter((LBL_GILDE_GEBAEUDE_STUFE + i), Filter_Shadow);
            add_filter((LBL_GILDE_GEBAEUDE_KOSTEN_GOLD + i), Filter_Shadow);
            add_filter((LBL_GILDE_GEBAEUDE_KOSTEN_MUSH + i), Filter_Shadow);
            enable_popup((GILDE_GEBAEUDE + i),
                         texts[(TXT_GILDE_GEBAEUDE1_POPUP + i)]);
            enable_popup((LBL_GILDE_GEBAEUDE_NAME + i),
                         texts[(TXT_GILDE_GEBAEUDE1_POPUP + i)]);
            enable_popup((LBL_GILDE_GEBAEUDE_WERT_CAPTION + i),
                         texts[(TXT_GILDE_GEBAEUDE1_POPUP + i)]);
            enable_popup((LBL_GILDE_GEBAEUDE_WERT + i),
                         texts[(TXT_GILDE_GEBAEUDE1_POPUP + i)]);
            enable_popup((LBL_GILDE_GEBAEUDE_STUFE_CAPTION + i),
                         texts[(TXT_GILDE_GEBAEUDE1_POPUP + i)]);
            enable_popup((LBL_GILDE_GEBAEUDE_STUFE + i),
                         texts[(TXT_GILDE_GEBAEUDE1_POPUP + i)]);
            enable_popup((GILDE_GEBAEUDE_IMPROVE + i),
                         texts[TXT_GILDE_AUSBAUEN]);
            add_bunch(GILDE_GEBAEUDE, (GILDE_GEBAEUDE + i),
                      (LBL_GILDE_GEBAEUDE_NAME + i),
                      (LBL_GILDE_GEBAEUDE_WERT_CAPTION + i),
                      (LBL_GILDE_GEBAEUDE_WERT + i),
                      (LBL_GILDE_GEBAEUDE_STUFE_CAPTION + i));
            add_bunch(GILDE_GEBAEUDE, (LBL_GILDE_GEBAEUDE_STUFE + i),
                      (LBL_GILDE_GEBAEUDE_KOSTEN_GOLD + i),
                      (LBL_GILDE_GEBAEUDE_KOSTEN_MUSH + i),
                      (GILDE_GEBAEUDE_GOLD + i), (GILDE_GEBAEUDE_MUSH + i),
                      (GILDE_GEBAEUDE_IMPROVE_GRAY + i),
                      (GILDE_GEBAEUDE_IMPROVE + i));
            i = (i + 1);
        };
        define_btn(GILDE_GEBAEUDE_GOTO_CREST, " ", GildeBtnHandler,
                   btn_classBack, (GILDE_GEBAEUDE_X + 211),
                   (GILDE_GEBAEUDE_Y - 5));
        _local2 = actor[GILDE_GEBAEUDE_GOTO_CREST];
        with (_local2) {
            scaleX = 0.4;
            scaleY = 0.4;
        };
        enable_popup(GILDE_GEBAEUDE_GOTO_CREST,
                     texts[TXT_BUILDINGS_GOTO_CREST]);
        add_bunch(GILDE_GEBAEUDE, GILDE_GEBAEUDE_GOTO_CREST);
        define_bunch(GILDE_CREST);
        DefineCnt(GILDE_CREST, (GILDE_GEBAEUDE_X - 2),
                  (GILDE_GEBAEUDE_Y + 60));
        i = 0;
        while (i < crestElementPos.length) {
            DefineImg((GILDE_CREST + i), "", False, 0, 0);
            actor[(GILDE_CREST + i)].mouse_enabled = False;
            MakePersistent((GILDE_CREST + i));
            crestClaI = i;
            if (crestClaI == 1){
                crestClaI = 0;
            } else {
                if (crestClaI == 0){
                    crestClaI = 1;
                };
            };
            DefineClickArea((CLA_GILDE_CREST + crestClaI), C_EMPTY,
                            GildeBtnHandler, crestElementPos[crestClaI][0],
                            crestElementPos[crestClaI][1],
                            crestElementPos[crestClaI][2],
                            crestElementPos[crestClaI][3],
                            0, None, None, True);
            MakePersistent((CLA_GILDE_CREST + crestClaI));
            _local2 = actor[GILDE_CREST];
            with (_local2) {
                addChild(actor[(GILDE_CREST + i)]);
                addChild(actor[(CLA_GILDE_CREST + crestClaI)]);
                if (i == 2){
                    DefineImg(GILDE_CREST_SHIELDCOLOR, "", False, 0, 0);
                    actor[GILDE_CREST_SHIELDCOLOR].mouse_enabled = False;
                    MakePersistent(GILDE_CREST_SHIELDCOLOR);
                    addChild(actor[GILDE_CREST_SHIELDCOLOR]);
                };
                if (i == 3){
                    DefineLbl(LBL_GILDE_CREST_INSCRIPTION, "Gildenname", 15,
                              210, FontFormat_Book);
                    actor[LBL_GILDE_CREST_INSCRIPTION].mouse_enabled = False;
                    MakePersistent(LBL_GILDE_CREST_INSCRIPTION);
                    addChild(actor[LBL_GILDE_CREST_INSCRIPTION]);
                };
            };
            i = (i + 1);
        };
        define_btn(GILDE_CREST_GOTO_GEBAEUDE, " ", GildeBtnHandler,
                   btn_classBack, (GILDE_GEBAEUDE_X + 211),
                   (GILDE_GEBAEUDE_Y - 5));
        _local2 = actor[GILDE_CREST_GOTO_GEBAEUDE];
        with (_local2) {
            scaleX = 0.4;
            scaleY = 0.4;
        };
        enable_popup(GILDE_CREST_GOTO_GEBAEUDE,
                     texts[TXT_CREST_GOTO_BUILDINGS]);
        define_bunch(GILDE_CREST_CONTROLS);
        define_btn(GILDE_CREST_CHANGE_PREV, "", GildeBtnHandler,
                   btn_classArrowLeft, (GILDE_GEBAEUDE_X + 10),
                   (GILDE_GEBAEUDE_Y + 250));
        define_btn(GILDE_CREST_CHANGE_NEXT, "", GildeBtnHandler,
                   btn_classArrowRight, (GILDE_GEBAEUDE_X + 193),
                   (GILDE_GEBAEUDE_Y + 250));
        DefineLbl(LBL_GILDE_CREST_ELEMENT, "Element",
                  (GILDE_GEBAEUDE_X + 120), (GILDE_GEBAEUDE_Y + 0xFF),
                  FontFormat_Default);
        add_filter(LBL_GILDE_CREST_ELEMENT, Filter_Shadow);
        define_btn(GILDE_CREST_COLOR_PREV, "", GildeBtnHandler,
                   btn_classArrowLeft, (GILDE_GEBAEUDE_X + 10),
                   (GILDE_GEBAEUDE_Y + 295));
        define_btn(GILDE_CREST_COLOR_NEXT, "", GildeBtnHandler,
                   btn_classArrowRight, (GILDE_GEBAEUDE_X + 193),
                   (GILDE_GEBAEUDE_Y + 295));
        define_btn(GILDE_CREST_OK, texts[TXT_CREST_SUGGEST],
                   GildeBtnHandler, btn_classBasic, (GILDE_GEBAEUDE_X + 30),
                   (GILDE_GEBAEUDE_Y + 340));
        enable_popup(GILDE_CREST_OK,
                     texts[TXT_CREST_INFO].split("#").join(chr(13)));
        i = 1;
        while (i < 4) {
            DefineCnt((GILDE_CREST_COLOR + i),
                      ((GILDE_GEBAEUDE_X + 23) + (i * 40)),
                      (GILDE_GEBAEUDE_Y + 296));
            DefineImg((GILDE_CREST_COLOR_UNSELECTED + i),
                      "res/gfx/scr/gilde/crest/color_idle.jpg", False, 0, 0);
            DefineImg((GILDE_CREST_COLOR_SELECTED + i),
                      "res/gfx/scr/gilde/crest/color_hover.jpg", False, 0, 0);
            DefineImg((GILDE_CREST_COLOR_FILLIN + i),
                      "res/gfx/scr/gilde/crest/color_field.jpg", False, 2, 2);
            MakePersistent((GILDE_CREST_COLOR_UNSELECTED + i));
            MakePersistent((GILDE_CREST_COLOR_SELECTED + i));
            MakePersistent((GILDE_CREST_COLOR_FILLIN + i));
            _local2 = actor[(GILDE_CREST_COLOR + i)];
            with (_local2) {
                addChild(actor[(GILDE_CREST_COLOR_UNSELECTED + i)]);
                addChild(actor[(GILDE_CREST_COLOR_SELECTED + i)]);
                addChild(actor[(GILDE_CREST_COLOR_FILLIN + i)]);
            };
            actor[(GILDE_CREST_COLOR + i)].add_event_listener(
                                      MouseEvent.CLICK, GildeBtnHandler);
            actor[(GILDE_CREST_COLOR + i)].buttonMode = True;
            actor[(GILDE_CREST_COLOR + i)].useHandCursor = True;
            actor[(GILDE_CREST_COLOR + i)].mouseChildren = False;
            add_bunch(GILDE_CREST_CONTROLS, (GILDE_CREST_COLOR + i));
            i = (i + 1);
        };
        add_bunch(GILDE_CREST_CONTROLS, GILDE_CREST_CHANGE_PREV,
                  GILDE_CREST_CHANGE_NEXT, LBL_GILDE_CREST_ELEMENT,
                  GILDE_CREST_COLOR_PREV, GILDE_CREST_COLOR_NEXT,
                  GILDE_CREST_OK);
        add_bunch(GILDE_CREST, GILDE_CREST, GILDE_CREST_GOTO_GEBAEUDE);
        DefineLbl(LBL_GILDE_GOLD, "", 0, (GILDE_GOLD_Y + ((noMush) ? 15 : 0)),
                  FontFormat_GuildMoney);
        add_filter(LBL_GILDE_GOLD, Filter_Shadow);
        DefineLbl(LBL_GILDE_MUSH, "", 0, (GILDE_GOLD_Y + GILDE_MUSH_Y),
                  FontFormat_GuildMoney);
        add_filter(LBL_GILDE_MUSH, Filter_Shadow);
        DefineCnt(GILDE_GOLD, GILDE_GOLDMUSH_X,
                  (GILDE_GOLD_Y + ((noMush) ? 15 : 0)));
        DefineCnt(GILDE_MUSH, GILDE_GOLDMUSH_X, (GILDE_GOLD_Y + GILDE_MUSH_Y));
        define_btn(GILDE_GOLD, "", GildeBtnHandler, btn_classPlus,
                   (GILDE_GOLDMUSH_X + GILDE_GOLDMUSH_C2),
                   (GILDE_GOLD_Y + ((noMush) ? 15 : 0)));
        _local2 = actor[GILDE_GOLD];
        with (_local2) {
            scaleX = 0.8;
            scaleY = 0.8;
        };
        enable_popup(GILDE_GOLD, texts[TXT_GILDE_GOLD]);
        define_btn(GILDE_MUSH, "", GildeBtnHandler, btn_classPlus,
                   (GILDE_GOLDMUSH_X + GILDE_GOLDMUSH_C2),
                   (GILDE_GOLD_Y + GILDE_MUSH_Y));
        _local2 = actor[GILDE_MUSH];
        with (_local2) {
            scaleX = 0.8;
            scaleY = 0.8;
        };
        enable_popup(GILDE_MUSH, texts[TXT_GILDE_MUSH]);
        DefineLbl(LBL_GILDE_GOLD2, "1", (GILDE_GOLDMUSH_X + GILDE_GOLDMUSH_C3),
                  (GILDE_GOLD_Y + ((noMush) ? 15 : 0)), FontFormat_GuildMoney);
        add_filter(LBL_GILDE_GOLD2, Filter_Shadow);
        enable_popup(LBL_GILDE_GOLD2, texts[TXT_GILDE_GOLD]);
        DefineLbl(LBL_GILDE_MUSH2, "1", 0, (GILDE_GOLD_Y + GILDE_MUSH_Y),
                  FontFormat_GuildMoney);
        add_filter(LBL_GILDE_MUSH2, Filter_Shadow);
        enable_popup(LBL_GILDE_MUSH2, texts[TXT_GILDE_MUSH]);
        actor[LBL_GILDE_MUSH2].x = ((actor[LBL_GILDE_GOLD2].x
                                    + actor[LBL_GILDE_GOLD2].text_width)
                                        - actor[LBL_GILDE_MUSH2].text_width);
        DefineCnt(GILDE_GOLD2,
                  ((actor[LBL_GILDE_GOLD2].x
                   + actor[LBL_GILDE_GOLD2].text_width) + 15),
                    (GILDE_GOLD_Y + ((noMush) ? 15 : 0)));
        DefineCnt(GILDE_MUSH2,
                  ((actor[LBL_GILDE_GOLD2].x
                   + actor[LBL_GILDE_GOLD2].text_width) + 15),
                    (GILDE_GOLD_Y + GILDE_MUSH_Y));
        if (noMush){
            define_bunch(GILDE_SCHATZ, LBL_GILDE_GOLD, GILDE_GOLD, GILDE_GOLD,
                         LBL_GILDE_GOLD2, GILDE_GOLD2);
        } else {
            define_bunch(GILDE_SCHATZ, LBL_GILDE_GOLD, LBL_GILDE_MUSH,
                         GILDE_GOLD, GILDE_MUSH, GILDE_GOLD, GILDE_MUSH,
                         LBL_GILDE_GOLD2, LBL_GILDE_MUSH2, GILDE_GOLD2,
                         GILDE_MUSH2);
        };
        define_bunch(SCREEN_GILDE_GRUENDEN, GILDEN_BG, IF_WINDOW,
                     LBL_WINDOW_TITLE, IF_OVL, LBL_GILDE_GRUENDEN_TEXT,
                     INP_GILDE_GRUENDEN, GILDE_GRUENDEN, IF_EXIT);
        define_bunch(SCREEN_GILDEN, GILDEN_BG, IF_OVL, GILDE_RAHMEN, IF_EXIT,
                     LBL_SCREEN_TITLE, GILDE_GEBAEUDE, GILDE_CREST,
                     GILDE_SCHATZ);
        DefineCnt(GILDE_RANG, GILDE_RANG_X, GILDE_RANG_Y);
        DefineLbl(LBL_GILDE_RANG, "", 0, 0, FontFormat_Default);
        add_filter(LBL_GILDE_RANG, Filter_Shadow);
        _local2 = actor[GILDE_RANG];
        with (_local2) {
            addChild(actor[LBL_GILDE_RANG]);
            textLinkMakeClickable(getChildAt(0).parent);
            mouseChildren = False;
            mouse_enabled = True;
            buttonMode = True;
            useHandCursor = True;
            add_event_listener(MouseEvent.CLICK, JumpToGuildHall);
        };
        MakePersistent(LBL_GILDE_RANG);
        DefineFromClass(INP_GILDE_TEXT, SimpleTextAreaGuild, GILDE_TEXT_X,
                        GILDE_LIST_Y, 1, "text");
        CleanupField(INP_GILDE_TEXT);
        add_filter(INP_GILDE_TEXT, Filter_Shadow);
        DefineCnt(GILDE_LIST, GILDE_LIST_X, GILDE_LIST_Y);
        DefineImg(GILDE_RANK, "res/gfx/scr/gilde/punkt_krone.png",
                  False, 0, 0);
        DefineImg((GILDE_RANK + 1), "res/gfx/scr/gilde/punkt_orden.png",
                  False, 0, 0);
        DefineImg((GILDE_RANK + 2), "res/gfx/scr/gilde/punkt_normalo.png",
                  False, 0, 0);
        define_btn(GILDE_SCROLL_UP, "", GildeBtnHandler, btn_classArrowUp,
                   GILDE_LIST_SCROLLX, GILDE_LIST_Y);
        define_btn(GILDE_SCROLL_DOWN, "", GildeBtnHandler, btn_classArrowDown,
                   GILDE_LIST_SCROLLX, GILDE_LIST_SCROLLY);
        i = 0;
        DefineImg(GILDE_INVITE_GRAY,
                  "res/gfx/scr/gilde/button_gilde_einladen_grau.jpg", False,
                  (GILDE_TOOLX + (i * GILDE_TOOLX)), GILDE_TOOLY);
        i = (i + 1);
        define_btn(GILDE_INVITE, "", GildeBtnHandler, btn_classInvite,
                   (GILDE_TOOLX + (i * GILDE_TOOLX)), GILDE_TOOLY);
        i = (i + 1);
        define_btn(GILDE_PROFILE, "", GildeBtnHandler, btn_classView,
                   (GILDE_TOOLX + (i * GILDE_TOOLX)), GILDE_TOOLY);
        DefineImg(GILDE_KICK_GRAY,
                  "res/gfx/scr/gilde/button_gilde_rauswerfen_grau.jpg", False,
                  (GILDE_TOOLX + (i * GILDE_TOOLX)), GILDE_TOOLY);
        i = (i + 1);
        define_btn(GILDE_KICK, "", GildeBtnHandler, btn_classKick,
                   (GILDE_TOOLX + (i * GILDE_TOOLX)), GILDE_TOOLY);
        DefineImg(GILDE_PROMOTE_GRAY,
                  "res/gfx/scr/gilde/button_gilde_orden_grau.jpg", False,
                  (GILDE_TOOLX + (i * GILDE_TOOLX)), GILDE_TOOLY);
        define_btn(GILDE_PROMOTE, "", GildeBtnHandler, btn_classPromote,
                   (GILDE_TOOLX + (i * GILDE_TOOLX)), GILDE_TOOLY);
        i = (i + 1);
        define_btn(GILDE_DEMOTE, "", GildeBtnHandler, btn_classDemote,
                   (GILDE_TOOLX + (i * GILDE_TOOLX)), GILDE_TOOLY);
        DefineImg(GILDE_MASTER_GRAY,
                  "res/gfx/scr/gilde/button_gilde_gildenleiter_grau.jpg",
                  False, (GILDE_TOOLX + (i * GILDE_TOOLX)), GILDE_TOOLY);
        define_btn(GILDE_MASTER, "", GildeBtnHandler, btn_classMaster,
                   (GILDE_TOOLX + (i * GILDE_TOOLX)), GILDE_TOOLY);
        i = (i + 1);
        define_btn(GILDE_REVOLT, "", GildeBtnHandler, btn_classRevolt,
                   (GILDE_TOOLX + (i * GILDE_TOOLX)), GILDE_TOOLY);
        define_btn(GILDE_RAID, "", GildeBtnHandler, btn_classRaid,
                   (GILDE_ATTACKX - 50), GILDE_TOOLY);
        DefineImg(GILDE_RAID_GRAY,
                  "res/gfx/scr/gilde/button_gilde_raid_grey.jpg", False,
                  (GILDE_ATTACKX - 50), GILDE_TOOLY);
        DefineImg(GILDE_RAID_OK,
                  "res/gfx/scr/gilde/button_gilde_raid_check.jpg", False,
                  (GILDE_ATTACKX - 50), GILDE_TOOLY);
        define_btn(GILDE_ATTACK, "", GildeBtnHandler, btn_classAttack,
                   (GILDE_ATTACKX + 5), GILDE_TOOLY);
        define_btn(GILDE_DEFEND, "", GildeBtnHandler, btn_classDefend,
                   (GILDE_DEFENDX + 5), GILDE_TOOLY);
        DefineImg(GILDE_ATTACK_GRAY,
                  "res/gfx/scr/gilde/button_gilde_attack_grau.jpg", False,
                  (GILDE_ATTACKX + 5), GILDE_TOOLY);
        DefineImg(GILDE_ATTACK_OK,
                  "res/gfx/scr/gilde/button_gilde_attack_check.jpg", False,
                  (GILDE_ATTACKX + 5), GILDE_TOOLY);
        DefineImg(GILDE_DEFEND_GRAY,
                  "res/gfx/scr/gilde/button_gilde_defend_grau.jpg", False,
                  (GILDE_DEFENDX + 5), GILDE_TOOLY);
        DefineImg(GILDE_DEFEND_OK,
                  "res/gfx/scr/gilde/button_gilde_defend_check.jpg", False,
                  (GILDE_DEFENDX + 5), GILDE_TOOLY);
        define_btn(GILDE_KATAPULT, "", GildeBtnHandler, btn_classCatapult0,
                   (GILDE_ATTACKX - 105), GILDE_TOOLY);
        define_btn((GILDE_KATAPULT + 1), "", GildeBtnHandler,
                   btn_classCatapult1, actor[GILDE_KATAPULT].x,
                   actor[GILDE_KATAPULT].y);
        define_btn((GILDE_KATAPULT + 2), "", GildeBtnHandler,
                   btn_classCatapult2, actor[GILDE_KATAPULT].x,
                   actor[GILDE_KATAPULT].y);
        DefineImg(GILDE_KATAPULT_GRAY,
                  "res/gfx/scr/gilde/button_gilde_catapult0_grau.png",
                  False, actor[GILDE_KATAPULT].x, actor[GILDE_KATAPULT].y);
        DefineImg(GILDE_KATAPULT_OK,
                  "res/gfx/scr/gilde/button_gilde_catapult1_idle.png", False,
                  actor[GILDE_KATAPULT].x, actor[GILDE_KATAPULT].y);
        DefineImg((GILDE_KATAPULT_OK + 1),
                  "res/gfx/scr/gilde/button_gilde_catapult2_idle.png",
                  False, actor[GILDE_KATAPULT].x, actor[GILDE_KATAPULT].y);
        DefineImg((GILDE_KATAPULT_OK + 2),
                  "res/gfx/scr/gilde/button_gilde_catapult3_idle.png",
                  False, actor[GILDE_KATAPULT].x, actor[GILDE_KATAPULT].y);
        define_bunch(GILDE_KATAPULT, GILDE_KATAPULT, (GILDE_KATAPULT + 1),
                     (GILDE_KATAPULT + 2), GILDE_KATAPULT_GRAY,
                     GILDE_KATAPULT_OK, (GILDE_KATAPULT_OK + 1),
                     (GILDE_KATAPULT_OK + 2));
        DefineCnt(GILDE_ATTACK, GILDE_ATTACKLABEL_X, GILDE_TOOLY);
        DefineCnt(GILDE_DEFENCE, GILDE_ATTACKLABEL_X,
                  (GILDE_TOOLY + GILDE_DEFENSELABEL_Y));
        DefineLbl(LBL_GILDE_ATTACK, "", 0, 0, FontFormat_AttackLabel);
        DefineLbl(LBL_GILDE_DEFENCE, "", 0, 0, FontFormat_AttackLabel);
        add_filter(LBL_GILDE_ATTACK, Filter_Shadow);
        add_filter(LBL_GILDE_DEFENCE, Filter_Shadow);
        MakePersistent(LBL_GILDE_ATTACK, LBL_GILDE_DEFENCE);
        _local2 = actor[GILDE_ATTACK];
        with (_local2) {
            addChild(actor[LBL_GILDE_ATTACK]);
            textLinkMakeClickable(getChildAt(0).parent);
            mouseChildren = False;
            useHandCursor = True;
            buttonMode = True;
            add_event_listener(MouseEvent.CLICK, AttackLinkClick);
        };
        _local2 = actor[GILDE_DEFENCE];
        with (_local2) {
            addChild(actor[LBL_GILDE_DEFENCE]);
            textLinkMakeClickable(getChildAt(0).parent);
            mouseChildren = False;
            useHandCursor = True;
            buttonMode = True;
            add_event_listener(MouseEvent.CLICK, DefenceLinkClick);
        };
        enable_popup(GILDE_INVITE, texts[TXT_POPUP_INVITE]);
        enable_popup(GILDE_INVITE_GRAY, texts[TXT_POPUP_INVITE]);
        enable_popup(GILDE_PROFILE, texts[TXT_POPUP_PROFILE]);
        enable_popup(GILDE_KICK, texts[TXT_POPUP_KICK]);
        enable_popup(GILDE_KICK_GRAY, texts[TXT_POPUP_KICK]);
        enable_popup(GILDE_PROMOTE, texts[TXT_POPUP_OFFIZIER]);
        enable_popup(GILDE_PROMOTE_GRAY, texts[TXT_POPUP_OFFIZIER]);
        enable_popup(GILDE_DEMOTE, texts[TXT_POPUP_OFFIZIER]);
        enable_popup(GILDE_MASTER, texts[TXT_POPUP_LEITER]);
        enable_popup(GILDE_MASTER_GRAY, texts[TXT_POPUP_LEITER]);
        enable_popup(GILDE_REVOLT, texts[TXT_POPUP_REVOLT]);
        define_bunch(GILDE_SET_MEMBER, GILDE_INVITE_GRAY, GILDE_PROFILE,
                     GILDE_KICK_GRAY, GILDE_PROMOTE_GRAY, GILDE_MASTER_GRAY);
        define_bunch(GILDE_SET_OFFICER, GILDE_INVITE, GILDE_PROFILE,
                     GILDE_KICK, GILDE_PROMOTE_GRAY, GILDE_MASTER_GRAY);
        define_bunch(GILDE_SET_MASTER, GILDE_INVITE, GILDE_PROFILE, GILDE_KICK,
                     GILDE_PROMOTE, GILDE_MASTER);
        define_bunch(GILDE_LISTBUTTONS, GILDE_SET_MEMBER, GILDE_SET_OFFICER,
                     GILDE_SET_MASTER);
        add_bunch(SCREEN_GILDEN, INP_GILDE_TEXT, GILDE_LIST,
                  LBL['GILDE']['CHAT']_CAPTION, GILDE_CHAT_UP, GILDE_CHAT_DOWN)
        add_bunch(SCREEN_GILDEN, INP_GILDE_CHAT, GILDE_SCROLL_UP,
                  GILDE_SCROLL_DOWN, GILDE_RANG, GILDE_ATTACK, GILDE_DEFENCE);
        DefineLbl(LBL['GILDE']['CHAT']_CAPTION, texts[TXT_CHAT_CAPTION],
                  GILDE_CHAT_X, (GILDE_CHAT_Y - GILDE_CHAT_CAPTION_Y));
        add_filter(LBL['GILDE']['CHAT']_CAPTION, Filter_Shadow);
        hide(LBL['GILDE']['CHAT']_CAPTION);
        DefineCnt(GILDE_LINK, 0, GILDE_RANG_Y);
        DefineLbl(LBL_GILDE_LINK, texts[TXT_FORUM_LINK], 0, 0);
        add_filter(LBL_GILDE_LINK, Filter_HeavyShadow);
        MakePersistent(LBL_GILDE_LINK);
        _local2 = actor[GILDE_LINK];
        with (_local2) {
            addChild(actor[LBL_GILDE_LINK]);
            textLinkMakeClickable(getChildAt(0).parent);
            add_event_listener(MouseEvent.CLICK, OpenGuildLink);
            x = ((GILDE_LIST_SCROLLX - 30) - actor[LBL_GILDE_LINK].text_width);
            mouseChildren = False;
            useHandCursor = True;
            buttonMode = True;
        };
        define_btn(GILDE_CHAT_UP, "", GildeBtnHandler, btn_classArrowUp,
                   GILDE_LIST_SCROLLX, (GILDE_CHAT_Y + GILDE_CHAT_UP_Y));
        define_btn(GILDE_CHAT_DOWN, "", GildeBtnHandler, btn_classArrowDown,
                   GILDE_LIST_SCROLLX, (GILDE_CHAT_Y + GILDE_CHAT_DOWN_Y));
        define_bunch(GILDE_CHAT, LBL['GILDE']['CHAT']_CAPTION, GILDE_CHAT_UP,
                     GILDE_CHAT_DOWN, INP_GILDE_CHAT);
        i = 0;
        while (i < 40) {
            DefineLbl((LBL['GILDE']['CHAT'] + i), "", GILDE_CHAT_X,
                      (GILDE_CHAT_Y + ((i - 35) * GILDE_CHAT_Y)));
            actor[(LBL['GILDE']['CHAT'] + i)].visible = (i >= 35);
            actor[(LBL['GILDE']['CHAT'] + i)].add_event_listener(
                                             MouseEvent.CLICK, clickChatLine);
            add_filter((LBL['GILDE']['CHAT'] + i), Filter_Shadow);
            add_bunch(SCREEN_GILDEN, (LBL['GILDE']['CHAT'] + i));
            add_bunch(GILDE_CHAT, (LBL['GILDE']['CHAT'] + i));
            i = (i + 1);
        };
        DefineFromClass(INP_GILDE_CHAT, ChatInputField, GILDE_CHAT_X,
                        GILDE_CHAT_FIELD_Y, 1, "chat");
        actor[INP_GILDE_CHAT].getChildAt(0).text = "";
        add_filter(INP_GILDE_CHAT, Filter_Shadow);
        actor[INP_GILDE_CHAT].add_event_listener(KeyboardEvent.KEY_DOWN,
                                                 SendChatMsg);
        actor[INP_GILDE_CHAT].add_event_listener(KeyboardEvent.KEY_UP,
                                                 AdvancedChatHandler);
        actor[INP_GILDE_CHAT].add_event_listener(FocusEvent.FOCUS_IN,
                                                 ShowExtendedHistory);
        actor[INP_GILDE_CHAT].add_event_listener(FocusEvent.FOCUS_OUT,
                                                 HideExtendedHistory);
        CleanupField(INP_GILDE_CHAT);
        lastChatLine = "";
        nextSuggestionTimer = new Timer((62 * 1000));
        suggestionAllowed = True;
        nextSuggestionTimer.add_event_listener(TimerEvent.TIMER,
                                               nextSuggestionAllow);
        DefineClickArea(CA_GILDE_DIALOG_BLOCK, C_EMPTY, None, 280, 100,
                        (RES_X - 280), (RES_Y - 100));
        _local2 = actor[CA_GILDE_DIALOG_BLOCK];
        with (_local2) {
            useHandCursor = False;
            buttonMode = False;
        };
        DefineLbl(LBL_GILDE_DIALOG_TEXT_KICK, "",
                  ((IF_WIN_X + IF_WIN_WELCOME_X) - (GILDE_TEXT2_X / 2)),
                  (IF_WIN_Y + GILDE_TEXT_Y), FontFormat_Default);
        DefineLbl(LBL_GILDE_DIALOG_TEXT_QUIT, "",
                  ((IF_WIN_X + IF_WIN_WELCOME_X) - (GILDE_TEXT2_X / 2)),
                  (IF_WIN_Y + GILDE_TEXT_Y), FontFormat_Default);
        DefineLbl(LBL_GILDE_DIALOG_TEXT_MASTER, "",
                  ((IF_WIN_X + IF_WIN_WELCOME_X) - (GILDE_TEXT2_X / 2)),
                  (IF_WIN_Y + GILDE_TEXT_Y), FontFormat_Default);
        DefineLbl(LBL_GILDE_DIALOG_TEXT_INVITE, "",
                  ((IF_WIN_X + IF_WIN_WELCOME_X) - (GILDE_TEXT2_X / 2)),
                  (IF_WIN_Y + GILDE_TEXT_Y), FontFormat_Default);
        DefineLbl(LBL_GILDE_DIALOG_TEXT_REVOLT, "",
                  ((IF_WIN_X + IF_WIN_WELCOME_X) - (GILDE_TEXT2_X / 2)),
                  (IF_WIN_Y + GILDE_TEXT_Y), FontFormat_Default);
        DefineLbl(LBL_GILDE_DIALOG_TEXT_RAID, "",
                  ((IF_WIN_X + IF_WIN_WELCOME_X) - (GILDE_TEXT2_X / 2)),
                  (IF_WIN_Y + GILDE_TEXT_Y), FontFormat_Default);
        _local2 = actor[LBL_GILDE_DIALOG_TEXT_KICK];
        with (_local2) {
            wordWrap = True;
            width = GILDE_TEXT2_X;
            text = texts[TXT_GILDE_KICK];
        };
        _local2 = actor[LBL_GILDE_DIALOG_TEXT_QUIT];
        with (_local2) {
            wordWrap = True;
            width = GILDE_TEXT2_X;
            text = texts[TXT_GILDE_QUIT];
        };
        _local2 = actor[LBL_GILDE_DIALOG_TEXT_MASTER];
        with (_local2) {
            wordWrap = True;
            width = GILDE_TEXT2_X;
            text = texts[TXT_GILDE_MASTER];
        };
        _local2 = actor[LBL_GILDE_DIALOG_TEXT_INVITE];
        with (_local2) {
            wordWrap = True;
            width = GILDE_TEXT2_X;
            text = texts[TXT_GILDE_INVITE];
        };
        _local2 = actor[LBL_GILDE_DIALOG_TEXT_REVOLT];
        with (_local2) {
            wordWrap = True;
            width = GILDE_TEXT2_X;
            text = texts[TXT_REVOLT_WARNING];
        };
        DefineFromClass(INP_GILDE_DIALOG_INVITE, text_input1, 0,
                        (IF_WIN_Y + GILDE_INP_Y), 2, "name");
        _local2 = actor[INP_GILDE_DIALOG_INVITE];
        with (_local2) {
            getChildAt(1).text = "";
            x = ((IF_WIN_X + IF_WIN_WELCOME_X) - int((width / 2)));
        };
        define_btn(GILDE_DIALOG_CANCEL, texts[TXT_ABBRECHEN], GildeBtnHandler,
                   btn_classBasic, 0, (IF_WIN_Y + GILDE_OK_Y));
        define_btn(GILDE_DIALOG_OK_KICK, texts[TXT_OK], GildeBtnHandler,
                   btn_classBasic, 0, (IF_WIN_Y + GILDE_OK_Y));
        define_btn(GILDE_DIALOG_OK_MASTER, texts[TXT_OK], GildeBtnHandler,
                   btn_classBasic, 0, (IF_WIN_Y + GILDE_OK_Y));
        define_btn(GILDE_DIALOG_OK_INVITE, texts[TXT_OK], GildeBtnHandler,
                   btn_classBasic, 0, (IF_WIN_Y + GILDE_OK_Y));
        define_btn(GILDE_DIALOG_OK_REVOLT, texts[TXT_OK], GildeBtnHandler,
                   btn_classBasic, 0, (IF_WIN_Y + GILDE_OK_Y));
        define_btn(GILDE_DIALOG_OK_RAID, texts[TXT_OK], GildeBtnHandler,
                   btn_classBasic, 0, (IF_WIN_Y + GILDE_OK_Y));
        _local2 = actor[GILDE_DIALOG_CANCEL];
        with (_local2) {
            x = ((IF_WIN_X + IF_WIN_WELCOME_X) + 10);
        };
        _local2 = actor[GILDE_DIALOG_OK_KICK];
        with (_local2) {
            x = (((IF_WIN_X + IF_WIN_WELCOME_X) - int(width)) - 10);
        };
        _local2 = actor[GILDE_DIALOG_OK_MASTER];
        with (_local2) {
            x = (((IF_WIN_X + IF_WIN_WELCOME_X) - int(width)) - 10);
        };
        _local2 = actor[GILDE_DIALOG_OK_INVITE];
        with (_local2) {
            x = (((IF_WIN_X + IF_WIN_WELCOME_X) - int(width)) - 10);
        };
        _local2 = actor[GILDE_DIALOG_OK_REVOLT];
        with (_local2) {
            x = (((IF_WIN_X + IF_WIN_WELCOME_X) - int(width)) - 10);
        };
        _local2 = actor[GILDE_DIALOG_OK_RAID];
        with (_local2) {
            x = (((IF_WIN_X + IF_WIN_WELCOME_X) - int(width)) - 10);
        };
        define_bunch(GILDE_DIALOG_KICK, CA_GILDE_DIALOG_BLOCK, IF_WINDOW,
                     LBL_WINDOW_TITLE, LBL_GILDE_DIALOG_TEXT_KICK,
                     GILDE_DIALOG_OK_KICK, GILDE_DIALOG_CANCEL);
        define_bunch(GILDE_DIALOG_MASTER, CA_GILDE_DIALOG_BLOCK, IF_WINDOW,
                     LBL_WINDOW_TITLE, LBL_GILDE_DIALOG_TEXT_MASTER,
                     GILDE_DIALOG_OK_MASTER, GILDE_DIALOG_CANCEL);
        define_bunch(GILDE_DIALOG_INVITE, CA_GILDE_DIALOG_BLOCK, IF_WINDOW,
                     LBL_WINDOW_TITLE, LBL_GILDE_DIALOG_TEXT_INVITE,
                     INP_GILDE_DIALOG_INVITE, GILDE_DIALOG_OK_INVITE,
                     GILDE_DIALOG_CANCEL);
        define_bunch(GILDE_DIALOG_REVOLT, CA_GILDE_DIALOG_BLOCK, IF_WINDOW,
                     LBL_WINDOW_TITLE, LBL_GILDE_DIALOG_TEXT_REVOLT,
                     GILDE_DIALOG_OK_REVOLT, GILDE_DIALOG_CANCEL);
        define_bunch(GILDE_DIALOG_RAID, CA_GILDE_DIALOG_BLOCK, IF_WINDOW,
                     LBL_WINDOW_TITLE, LBL_GILDE_DIALOG_TEXT_RAID, G
                     ILDE_DIALOG_OK_RAID, GILDE_DIALOG_CANCEL);
        actor[GILDE_DIALOG_CANCEL].add_event_listener(MouseEvent.CLICK,
                                                      PlayerGuildInviteCancel);
        actor[GILDE_DIALOG_OK_INVITE].add_event_listener(MouseEvent.CLICK,
                                                         PlayerGuildInviteOK);
        DefineImg(HUTMANN_BG,
                  "res/gfx/scr/taverne/huetchenspieler/huetchenspieler.jpg",
                  False, 280, 100);
        DefineImg(HUTFACE_IDLE,
                  "res/gfx/scr/taverne/huetchenspieler/" +
                  "huetchenspieler_neutral.jpg", False,
                  (280 + HUTMANN_FACE_X), (100 + HUTMANN_FACE_Y));
        DefineImg(HUTFACE_HOVER,
                  "res/gfx/scr/taverne/huetchenspieler/"
                  + "huetchenspieler_keinelust.jpg", False,
                  (280 + HUTMANN_FACE_X), (100 + HUTMANN_FACE_Y));
        DefineImg(HUTFACE_WIN,
                  "res/gfx/scr/taverne/huetchenspieler/" +
                  "huetchenspieler_gewonnen.jpg", False,
                  (280 + HUTMANN_FACE_X), (100 + HUTMANN_FACE_Y));
        DefineImg(HUTFACE_LOSE1,
                  "res/gfx/scr/taverne/huetchenspieler/"
                  + "huetchenspieler_verloren.jpg", False,
                  (280 + HUTMANN_FACE_X), (100 + HUTMANN_FACE_Y));
        DefineImg(HUTFACE_LOSE2,
                  "res/gfx/scr/taverne/huetchenspieler/"
                  + "huetchenspieler_verloren2.jpg",
                  False, (280 + HUTMANN_FACE_X), (100 + HUTMANN_FACE_Y));
        DefineImg(HUTFACE_LOSE3,
                  "res/gfx/scr/taverne/huetchenspieler/"
                  + "huetchenspieler_verloren3.jpg", False,
                  (280 + HUTMANN_FACE_X), (100 + HUTMANN_FACE_Y));
        DefineImg(HUTBECHER_1_IDLE,
                  "res/gfx/scr/taverne/huetchenspieler/"
                  + "huetchenspieler_becher1_1.jpg", False,
                  (280 + HUTMANN_BECHER1_X), (100 + HUTMANN_BECHER1_Y));
        DefineImg(HUTBECHER_1_HOVER,
                  "res/gfx/scr/taverne/huetchenspieler/"
                  + "huetchenspieler_becher1_2.jpg", False,
                  ((280 + HUTMANN_BECHER1_X) + HUTMANN_BECHER1_X2),
                  ((100 + HUTMANN_BECHER1_Y) + HUTMANN_BECHER1_Y2));
        DefineImg(HUTBECHER_1_CLICK,
                  "res/gfx/scr/taverne/huetchenspieler/"
                  + "huetchenspieler_becher1_3.jpg", False,
                  ((280 + HUTMANN_BECHER1_X) + HUTMANN_BECHER1_X3),
                  ((100 + HUTMANN_BECHER1_Y) + HUTMANN_BECHER1_Y3));
        define_bunch(HUTBECHER_1_HOVER, HUTBECHER_1_HOVER, HUTFACE_HOVER);
        DefineClickArea(CA_HUTBECHER_1, HUTBECHER_1_HOVER, ChooseCup,
                        (280 + HUTMANN_BECHER1_X), (100 + HUTMANN_BECHER1_Y),
                        HUTMANN_BECHER_X, HUTMANN_BECHER_Y);
        DefineImg(HUTBECHER_2_IDLE,
                  "res/gfx/scr/taverne/huetchenspieler/"
                  + "huetchenspieler_becher2_1.jpg",
                  False, (280 + HUTMANN_BECHER2_X), (100 + HUTMANN_BECHER2_Y));
        DefineImg(HUTBECHER_2_HOVER,
                  "res/gfx/scr/taverne/huetchenspieler/"
                  + "huetchenspieler_becher2_2.jpg", False,
                  ((280 + HUTMANN_BECHER2_X) + HUTMANN_BECHER2_X2),
                  ((100 + HUTMANN_BECHER2_Y) + HUTMANN_BECHER2_Y2));
        DefineImg(HUTBECHER_2_CLICK,
                  "res/gfx/scr/taverne/huetchenspieler/"
                  + "huetchenspieler_becher2_3.jpg", False,
                  ((280 + HUTMANN_BECHER2_X) + HUTMANN_BECHER2_X3),
                  ((100 + HUTMANN_BECHER2_Y) + HUTMANN_BECHER2_Y3));
        define_bunch(HUTBECHER_2_HOVER, HUTBECHER_2_HOVER, HUTFACE_HOVER);
        DefineClickArea(CA_HUTBECHER_2, HUTBECHER_2_HOVER, ChooseCup,
                        (280 + HUTMANN_BECHER2_X), (100 + HUTMANN_BECHER2_Y),
                        HUTMANN_BECHER_X, HUTMANN_BECHER_Y);
        DefineImg(HUTBECHER_3_IDLE, "res/gfx/scr/taverne/huetchenspieler/"
                  + "huetchenspieler_becher3_1.jpg", False,
                  (280 + HUTMANN_BECHER3_X), (100 + HUTMANN_BECHER3_Y));
        DefineImg(HUTBECHER_3_HOVER, "res/gfx/scr/taverne/huetchenspieler/"
                  + "huetchenspieler_becher3_2.jpg", False,
                  ((280 + HUTMANN_BECHER3_X) + HUTMANN_BECHER3_X2),
                  ((100 + HUTMANN_BECHER3_Y) + HUTMANN_BECHER3_Y2));
        DefineImg(HUTBECHER_3_CLICK, "res/gfx/scr/taverne/huetchenspieler/"
                  + "huetchenspieler_becher3_3.jpg", False,
                  ((280 + HUTMANN_BECHER3_X) + HUTMANN_BECHER3_X3),
                  ((100 + HUTMANN_BECHER3_Y) + HUTMANN_BECHER3_Y3));
        define_bunch(HUTBECHER_3_HOVER, HUTBECHER_3_HOVER, HUTFACE_HOVER);
        DefineClickArea(CA_HUTBECHER_3, HUTBECHER_3_HOVER, ChooseCup,
                        (280 + HUTMANN_BECHER3_X), (100 + HUTMANN_BECHER3_Y),
                        HUTMANN_BECHER_X, HUTMANN_BECHER_Y);
        define_bunch(HUTMANN_BECHERCHOOSE, CA_HUTBECHER_1, CA_HUTBECHER_2,
                     CA_HUTBECHER_3, HUTFACE_IDLE);
        DefineImg(HUTKUGEL, "res/gfx/scr/taverne/huetchenspieler/"
                  + "huetchenspieler_ball.png", False, 0, (100 + HUTKUGEL_Y));
        DefineLbl(LBL_HUTMANN_TEXT, texts[TXT_HUTMANN_OFFER], 0,
                  (100 + HUTMANN_TEXT_Y), FontFormat_Default);
        actor[LBL_HUTMANN_TEXT].x = (SCREEN_TITLE_X -
                                     (actor[LBL_HUTMANN_TEXT].text_width / 2));
        add_filter(LBL_HUTMANN_TEXT, Filter_Shadow);
        DefineLbl(LBL_HUTMANN_GOLDBET, "", 0, HUTMANN_GOLD_Y,
                  FontFormat_GuildMoney);
        add_filter(LBL_HUTMANN_GOLDBET, Filter_Shadow);
        DefineLbl(LBL_HUTMANN_MUSHBET, "", 0,
                  (HUTMANN_GOLD_Y + GILDE_MUSH_Y), FontFormat_GuildMoney);
        add_filter(LBL_HUTMANN_MUSHBET, Filter_Shadow);
        DefineCnt(HUTMANN_GOLDBET, 0, HUTMANN_GOLD_Y);
        DefineCnt(HUTMANN_MUSHBET, 0, (HUTMANN_GOLD_Y + GILDE_MUSH_Y));
        define_btn(HUTMANN_GOLDBET, "", HutBtnHandler, btn_classPlus,
                   0, HUTMANN_GOLD_Y);
        _local2 = actor[HUTMANN_GOLDBET];
        with (_local2) {
            scaleX = 0.8;
            scaleY = 0.8;
        };
        enable_popup(HUTMANN_GOLDBET, texts[TXT_HUTMANN_GOLDBET]);
        DefineImg(HUTMANN_MUSHBET_DISABLED,
                  "res/gfx/scr/gilde/plus_disabled.png", False, 0,
                  (HUTMANN_GOLD_Y + GILDE_MUSH_Y));
        enable_popup(HUTMANN_MUSHBET_DISABLED, texts[TXT_MUSHBET_BOUGHT]);
        define_btn(HUTMANN_MUSHBET, "", HutBtnHandler, btn_classPlus, 0,
                   (HUTMANN_GOLD_Y + GILDE_MUSH_Y));
        _local2 = actor[HUTMANN_MUSHBET];
        with (_local2) {
            scaleX = 0.8;
            scaleY = 0.8;
        };
        _local2 = actor[HUTMANN_MUSHBET_DISABLED];
        with (_local2) {
            scaleX = 0.8;
            scaleY = 0.8;
        };
        enable_popup(HUTMANN_MUSHBET, texts[TXT_HUTMANN_MUSHBET]);
        DefineLbl(LBL_HUTMANN_GOLDBET2, "1", 0, HUTMANN_GOLD_Y,
                  FontFormat_GuildMoney);
        add_filter(LBL_HUTMANN_GOLDBET2, Filter_Shadow);
        enable_popup(LBL_HUTMANN_GOLDBET2, texts[TXT_HUTMANN_GOLDBET]);
        DefineLbl(LBL_HUTMANN_MUSHBET2, "1", 0,
                  (HUTMANN_GOLD_Y + GILDE_MUSH_Y), FontFormat_GuildMoney);
        add_filter(LBL_HUTMANN_MUSHBET2, Filter_Shadow);
        enable_popup(LBL_HUTMANN_MUSHBET2, texts[TXT_HUTMANN_MUSHBET]);
        DefineCnt(HUTMANN_GOLDBET2, 0, HUTMANN_GOLD_Y);
        DefineCnt(HUTMANN_MUSHBET2, 0, (HUTMANN_GOLD_Y + GILDE_MUSH_Y));
        define_bunch(HUTMANN_PLACEBET, HUTMANN_MUSHBET_DISABLED,
                     HUTMANN_MUSHBET, LBL_HUTMANN_MUSHBET2, HUTMANN_MUSHBET2,
                     HUTMANN_GOLDBET, LBL_HUTMANN_GOLDBET2, HUTMANN_GOLDBET2,
                     HUTFACE_IDLE);
        DefineLbl(LBL_HUTMANN_INSTR,
                  texts[TXT_HUTMANN_INSTR]
                  .split("#").join(((text_dir)=="right") ? "" : chr(13)),
                  HUTMANN_INSTR_X, HUTMANN_INSTR_Y, FontFormat_DefaultLeft);
        add_filter(LBL_HUTMANN_INSTR, Filter_Shadow);
        define_bunch(SCREEN_HUTMANN, HUTMANN_BG, IF_OVL, IF_EXIT,
                     HUTFACE_HOVER, HUTFACE_WIN, HUTFACE_LOSE1, HUTFACE_LOSE2,
                     HUTFACE_LOSE3, HUTFACE_IDLE);
        define_btn(HUTMANN_OK, texts[TXT_HUTMANN_START], HutBtnHandler,
                   btn_classLOGin, HUTMANN_OK_X, HUTMANN_OK_Y);
        define_btn(HUTMANN_BACK, texts[TXT_HUTMANN_BACK], InterfaceBtnHandler,
                   btn_classBack, HUTMANN_BACK_X, HUTMANN_BACK_Y);
        HutBtnRepeatTimer = new Timer(1000);
        DestroyHutBtnTimer = False;
        _local2 = actor[HUTMANN_GOLDBET];
        with (_local2) {
            add_event_listener(MouseEvent.MOUSE_DOWN, HutBtnDownHandler);
            add_event_listener(MouseEvent.MOUSE_UP, HutBtnUpHandler);
            add_event_listener(MouseEvent.MOUSE_OUT, HutBtnUpHandler);
        };
        _local2 = actor[HUTMANN_MUSHBET];
        with (_local2) {
            add_event_listener(MouseEvent.MOUSE_DOWN, HutBtnDownHandler);
            add_event_listener(MouseEvent.MOUSE_UP, HutBtnUpHandler);
            add_event_listener(MouseEvent.MOUSE_OUT, HutBtnUpHandler);
        };
        define_bunch(HUTMANN_WON, HUTFACE_WIN);
        define_bunch(HUTMANN_LOST, HUTFACE_LOSE1);
        add_bunch(SCREEN_HUTMANN, HUTBECHER_1_IDLE);
        add_bunch(SCREEN_HUTMANN, HUTBECHER_2_IDLE);
        add_bunch(SCREEN_HUTMANN, HUTBECHER_3_IDLE);
        add_bunch(SCREEN_HUTMANN, LBL_HUTMANN_TEXT, LBL_HUTMANN_GOLDBET,
                  LBL_HUTMANN_MUSHBET, LBL_HUTMANN_GOLDBET2,
                  LBL_HUTMANN_MUSHBET2, LBL_HUTMANN_INSTR, HUTMANN_BACK);
        add_bunch(SCREEN_HUTMANN, HUTMANN_GOLDBET, HUTMANN_MUSHBET,
                  HUTMANN_GOLDBET2, HUTMANN_MUSHBET2, HUTMANN_GOLDBET,
                  HUTMANN_MUSHBET_DISABLED, HUTMANN_MUSHBET);
        HutFaceResetTimer = new Timer(2000, 1);
        HutFaceResetTimer.add_event_listener(TimerEvent.TIMER, HutFaceReset);
        DefineImg(TAVERNE_BG, "res/gfx/scr/taverne/taverne.jpg",
                  False, 280, 100);
        DefineImg(TAVERNE_BARKEEPER1,
                  "res/gfx/scr/taverne/taverne_barkeeper1.jpg", False,
                  (280 + TAVERNE_BARKEEPER_X), (100 + TAVERNE_BARKEEPER_Y));
        DefineImg(TAVERNE_BARKEEPER2,
                  "res/gfx/scr/taverne/taverne_barkeeper2.jpg", False,
                  (280 + TAVERNE_BARKEEPER_X), (100 + TAVERNE_BARKEEPER_Y));
        DefineImg(TAVERNE_BARKEEPER_HINT,
                  "res/gfx/scr/taverne/exclamation.png",
                  False, ((280 + TAVERNE_BARKEEPER_X) + 50),
                  ((100 + TAVERNE_BARKEEPER_Y) - 215));
        DefineImg(TAVERNE_HUTMANN_BLINZELN,
                  "res/gfx/scr/taverne/huetchenspieler_blink.jpg",
                  False, (280 + TAVERNE_HUTAUGEN_X),
                  (100 + TAVERNE_HUTAUGEN_Y));
        DefineImg(TAVERNE_HUTMANN_OVL,
                  "res/gfx/scr/taverne/huetchenspieler_mouseover.jpg",
                  False, (280 + TAVERNE_HUTAUGEN_X),
                  (100 + TAVERNE_HUTAUGEN_Y));
        DefineClickArea(CA_TAVERNE_HUTMANN,
                        TAVERNE_HUTMANN_OVL, ShowHutmann,
                        (TAVERNE_HUT_X + 280), (TAVERNE_HUT_Y + 100),
                        TAVERNE_HUT_X, TAVERNE_HUT_Y);
        DefineClickArea(CA_TAVERNE_QUESTOFFER, TAVERNE_QUESTOVL,
                        ShowQuestOffer, (TAVERNE_QUEST_X + 280),
                        (TAVERNE_QUEST_Y + 100), TAVERNE_QUEST_X,
                        TAVERNE_QUEST_Y);
        DefineClickArea(CA_TAVERNE_TOILETTE, C_EMPTY, RequestToilet,
                        (280 + 470), (100 + 195), 36, 30);
        DefineImg(TAVERNE_KERZEN,
                  "res/gfx/scr/taverne/taverne_kerzen.jpg", False,
                  (280 + TAVERNE_KERZEN_X), (100 + TAVERNE_KERZEN_Y));
        DefineImg(TAVERNE_QUESTOVL1,
                  "res/gfx/scr/taverne/taverne_orc_mouseover.jpg", False,
                  ((TAVERNE_QUEST_X + 280) + TAVERNE_QUESTOVL1_X),
                  ((TAVERNE_QUEST_Y + 100) + TAVERNE_QUESTOVL1_Y));
        DefineImg(TAVERNE_QUESTOVL2,
                  "res/gfx/scr/taverne/taverne_bauer_mouseover.jpg", False,
                  ((TAVERNE_QUEST_X + 280) + TAVERNE_QUESTOVL2_X),
                  ((TAVERNE_QUEST_Y + 100) + TAVERNE_QUESTOVL2_Y));
        DefineImg(TAVERNE_QUESTOVL3,
                  "res/gfx/scr/taverne/taverne_zauberin_mouseover.jpg",
                  False, ((TAVERNE_QUEST_X + 280) + TAVERNE_QUESTOVL3_X),
                  ((TAVERNE_QUEST_Y + 100) + TAVERNE_QUESTOVL3_Y));
        DefineImg(TAVERNE_QUESTOVL4,
                  "res/gfx/scr/taverne/taverne_questgeber_mouseover.jpg",
                  False, ((TAVERNE_QUEST_X + 280) + TAVERNE_QUESTOVL4_X),
                  ((TAVERNE_QUEST_Y + 100) + TAVERNE_QUESTOVL4_Y));
        DefineImg(TAVERNE_QUESTOVL5,
                  "res/gfx/scr/taverne/taverne_tourist_mouseover.jpg",
                  False, ((TAVERNE_QUEST_X + 280) + TAVERNE_QUESTOVL5_X),
                  ((TAVERNE_QUEST_Y + 100) + TAVERNE_QUESTOVL5_Y));
        DefineImg(TAVERNE_BAROVL,
                  "res/gfx/scr/taverne/barkeeper_mouseover.jpg", False,
                  TAVERNE_BAROVL_X, TAVERNE_BAROVL_Y);
        DefineClickArea(CA_TAVERNE_BAR, TAVERNE_BAROVL, ShowBeerOffer,
                        TAVERNE_BAR_X, TAVERNE_BAR_Y, TAVERNE_BAR_X,
                        TAVERNE_BAR_Y);
        DefineImg(TIMEBAR_BG, "res/gfx/if/adventurebar.png", False,
                  TIMEBAR_X, TIMEBAR_Y);
        DefineImg(TIMEBAR_FILL, "res/gfx/scr/taverne/ausdauer.jpg", False,
                  (TIMEBAR_X + 110), (TIMEBAR_Y + 44));
        DefineCnt(TIMEBAR_FILL, 0, (TIMEBAR_Y + 44));
        DefineLbl(LBL_TIMEBAR_TEXT, "", 0, TIMEBAR_LABEL_Y, FontFormat_TimeBar)
        add_filter(LBL_TIMEBAR_TEXT, Filter_Shadow);
        enable_popup(TIMEBAR_BG, texts[TXT_TIMEBAR]);
        enable_popup(TIMEBAR_FILL, texts[TXT_TIMEBAR]);
        enable_popup(TIMEBAR_FILL, texts[TXT_TIMEBAR]);
        enable_popup(LBL_TIMEBAR_TEXT, texts[TXT_TIMEBAR]);
        define_bunch(SCREEN_TAVERNE, TAVERNE_BG, IF_OVL, TAVERNE_BARKEEPER1,
                     TAVERNE_BARKEEPER2, TAVERNE_HUTMANN_BLINZELN,
                     CA_TAVERNE_BAR);
        define_bunch(TAVERNE_CAS, CA_TAVERNE_QUESTOFFER, CA_TAVERNE_HUTMANN,
                     CA_TAVERNE_TOILETTE, CA_TAVERNE_BAR);
        DefineImg(BEERFEST,
                  "res/gfx/scr/taverne/beerfest.png", False, 280, 100);
        actor[BEERFEST].mouse_enabled = False;
        define_bunch(BEERFEST, BEERFEST, TIMEBAR_BG, TIMEBAR_FILL,
                     TIMEBAR_FILL, LBL_TIMEBAR_TEXT, IF_OVL, IF_EXIT);
        i = 0;
        while (i < 4) {
            DefineImg((TV + i), (("res/gfx/scr/taverne/tv_animation/tv" +
                      str((i + 1))) + ".png"), False, (280 + 20), (100 + 20));
            hide((TV + i));
            add_bunch(SCREEN_TAVERNE, (TV + i));
            i = (i + 1);
        };
        DefineClickArea(CA_TV, C_EMPTY, request_tv, (280 + 20), (100 + 20),
                        280, 160);
        hide(CA_TV);
        add_bunch(SCREEN_TAVERNE, CA_TV);
        cursedDescr = "Fliegende";
        if (int((random.random() * 100)) == 0){
            cursedDescr = "Verfluchte";
        };
        enable_popup(CA_TV, POPUP_BEGIN_LINE,
                     texts[TXT_TV_HINT].split("|")[0].split("Fliegende")
                     .join(cursedDescr), POPUP_END_LINE, POPUP_BEGIN_LINE,
                     FontFormat_EpicItemQuote, texts[TXT_TV_HINT]
                     .split("|")[1].split("#").join(chr(13)), POPUP_END_LINE);
        i = 0;
        while (i < 4) {
            DefineImg((TAVERN_ADVENT + i),
                      (("res/gfx/scr/taverne/advent_wreath_"
                       + str((i + 1))) + ".jpg"), False, (280 + 337), 100);
            actor[(TAVERN_ADVENT + i)].mouse_enabled = False;
            i = (i + 1);
        };
        i = 0;
        while (i < 5) {
            DefineImg((SPECIAL_ACTION + i),
                      (("res/gfx/scr/taverne/event_ovl_" + str((i + 1)))
                       + ".png"), False, 280, 100);
            define_bunch((SPECIAL_ACTION + i), (SPECIAL_ACTION + i),
                         TIMEBAR_BG, TIMEBAR_FILL, TIMEBAR_FILL,
                         LBL_TIMEBAR_TEXT, IF_OVL, IF_EXIT);
            i = (i + 1);
        };
        i = 0;
        while (i < 5) {
            DefineImg((TAVERNE_QUEST1 + i),
                      (("res/gfx/scr/taverne/taverne_quest"
                       + str((i + 1))) + ".jpg"), False,
                        (280 + TAVERNE_QUEST_X), (100 + TAVERNE_QUEST_Y));
            add_bunch(SCREEN_TAVERNE, (TAVERNE_QUEST1 + i));
            i = (i + 1);
        };
        add_bunch(SCREEN_TAVERNE,
                  TAVERNE_KERZEN, IF_EXIT, TIMEBAR_BG, TIMEBAR_FILL,
                  TIMEBAR_FILL, LBL_TIMEBAR_TEXT);
        add_bunch(SCREEN_TAVERNE, CA_TAVERNE_QUESTOFFER, CA_TAVERNE_HUTMANN,
                  CA_TAVERNE_TOILETTE);
        DefineFromClass(SHP_QO_BLACK_SQUARE, black_square_neutral,
                        QO_BLACK_SQUARE_X, QO_BLACK_SQUARE_Y);
        _local2 = actor[SHP_QO_BLACK_SQUARE];
        with (_local2) {
            width = QO_BLACK_SQUARE_X;
            height = QO_BLACK_SQUARE_Y;
            alpha = 0.6;
        };
        DefineLbl(LBL_QO_CHOOSE, texts[TXT_QO_CHOOSE], (QO_BLACK_SQUARE_X
                  + QO_CHOOSE_X), (QO_BLACK_SQUARE_Y + QO_CHOOSE_Y),
FontFormat_Default);
        i = 0;
        while (i < 3) {
            DefineLbl((LBL_QO_CHOICE1 + i), "TEST", 0, 0, FontFormat_Default);
            DefineLbl((LBL_QO_CHOICE1_HL + i), "TEST", 0, 0,
                      FontFormat_Highlight);
            MakePersistent((LBL_QO_CHOICE1 + i), (LBL_QO_CHOICE1_HL + i));
            DefineCnt((QO_CHOICE1 + i), (QO_BLACK_SQUARE_X + QO_CHOOSE_X),
                      ((QO_BLACK_SQUARE_Y + QO_CHOOSE_Y) +
                       ((i + 1) * QO_CHOICES_Y)));
            _local2 = actor[(QO_CHOICE1 + i)];
            with (_local2) {
                addChild(actor[(LBL_QO_CHOICE1 + i)]);
                addChild(actor[(LBL_QO_CHOICE1_HL + i)]);
                add_event_listener(MouseEvent.CLICK, ChooseQuest);
                mouseChildren = False;
                useHandCursor = True;
                buttonMode = True;
            };
            i = (i + 1);
        };
        define_bunch(QUESTOFFER);
        DefineLbl(LBL_QO_QUESTNAME, "QuestName", 0, (QO_BLACK_SQUARE_Y +
                  QO_QUESTNAME_Y), FontFormat_Heading);
        DefineLbl(LBL_QO_QUESTTEXT, "quest_text", (QO_BLACK_SQUARE_X
                  + QO_QUESTTEXT_X), (QO_BLACK_SQUARE_Y + QO_QUESTTEXT_Y),
                    FontFormat_DefaultLeft);
        actor[LBL_QO_QUESTTEXT].width = LBL_QO_TEXT_X;
        actor[LBL_QO_QUESTTEXT].wordWrap = True;
        actor[LBL_QO_QUESTTEXT].default_text_format.align = "right";
        DefineLbl(LBL_QO_REWARD, texts[TXT_QO_REWARD],
                  (QO_BLACK_SQUARE_X + QO_QUESTTEXT_X),
                  (QO_BLACK_SQUARE_Y + QO_REWARD_Y), FontFormat_Default);
        DefineCnt(QO_REWARDGOLD, 0,
                  ((QO_BLACK_SQUARE_Y + QO_REWARD_Y) + QO_REWARDS_Y));
        DefineCnt(QO_REWARDSILVER, 0,
                  ((QO_BLACK_SQUARE_Y + QO_REWARD_Y) + QO_REWARDS_Y));
        DefineLbl(LBL_QO_REWARDGOLD, "", 0,
                  ((QO_BLACK_SQUARE_Y + QO_REWARD_Y) + QO_REWARDS_Y),
                  FontFormat_Default);
        DefineLbl(LBL_QO_REWARDSILVER, "", 0,
                  ((QO_BLACK_SQUARE_Y + QO_REWARD_Y) + QO_REWARDS_Y),
                  FontFormat_Default);
        DefineLbl(LBL_QO_REWARDEXP, "",
                  (QO_BLACK_SQUARE_X + QO_QUESTTEXT_X),
                  ((QO_BLACK_SQUARE_Y + QO_REWARD_Y) + (QO_REWARDS_Y * 2)),
                  FontFormat_Default);
        DefineLbl(LBL_QO_TIME, "",
                  (QO_BLACK_SQUARE_X + QO_QUESTTEXT_X),
                  ((QO_BLACK_SQUARE_Y + QO_REWARD_Y) + (QO_REWARDS_Y * 3)),
                  FontFormat_Default);
        define_btn(QO_START, texts[TXT_QO_START], RequestQuest, btn_classBasic,
                   (QO_BLACK_SQUARE_X + QO_START_X),
                   (QO_BLACK_SQUARE_Y + QO_RETURN_Y));
        define_btn(BO_BUY, texts[TXT_BO_BUY], BuyBeer, btn_classBasic,
                   (QO_BLACK_SQUARE_X + QO_START_X),
                   (QO_BLACK_SQUARE_Y + QO_RETURN_Y));
        define_btn(QO_RETURN, texts[TXT_QO_RETURN], ReturnQuest,
                   btn_classBasic, (QO_BLACK_SQUARE_X + QO_START_X),
                   (QO_BLACK_SQUARE_Y + QO_START_Y));
        DefineLbl(LBL_QO_QUESTSTODAY, "", 0,
                  (QO_BLACK_SQUARE_Y + QO_QUESTSTODAY_Y),
                  FontFormat_Default);
        DefineCnt(QUEST_SLOT, ((QO_BLACK_SQUARE_X + QO_SLOT_X) + 20),
                  (QO_BLACK_SQUARE_Y + QO_SLOT_Y));
        add_bunch(QUESTOFFER, SHP_QO_BLACK_SQUARE, LBL_QO_CHOOSE, QO_CHOICE1,
                  QO_CHOICE2, QO_CHOICE3, LBL_QO_QUESTNAME, LBL_QO_QUESTTEXT);
        add_bunch(QUESTOFFER, LBL_QO_REWARD, LBL_QO_REWARDGOLD,
                  LBL_QO_REWARDSILVER, QO_REWARDGOLD, QO_REWARDSILVER,
                  LBL_QO_REWARDEXP, LBL_QO_TIME, QUEST_SLOT, QO_START,
                  QO_RETURN, LBL_QO_QUESTSTODAY);
        i = 0;
        while (i < 5) {
            DefineImg((QO_PORTRAIT1 + i),
                      (("res/gfx/scr/taverne/portrait_questgeber_"
                       + str((i + 1))) + ".png"), False,
                        (QO_BLACK_SQUARE_X + QO_PORTRAIT_X),
                        (QO_BLACK_SQUARE_Y + QO_PORTRAIT_Y));
            add_bunch(QUESTOFFER, (QO_PORTRAIT1 + i));
            i = (i + 1);
        };
        DefineImg(BO_PORTRAIT_OK,
                  "res/gfx/scr/taverne/portrait_barkeeper_2.png",
                  False, (QO_BLACK_SQUARE_X + QO_PORTRAIT_X),
                  (QO_BLACK_SQUARE_Y + QO_PORTRAIT_Y));
        DefineImg(BO_PORTRAIT_NO,
                  "res/gfx/scr/taverne/portrait_barkeeper_3.png", False,
                  (QO_BLACK_SQUARE_X + QO_PORTRAIT_X),
                  (QO_BLACK_SQUARE_Y + QO_PORTRAIT_Y));
        DefineImg(BO_PORTRAIT_TH,
                  "res/gfx/scr/taverne/portrait_barkeeper_1.png", False,
                  (QO_BLACK_SQUARE_X + QO_PORTRAIT_X),
                  (QO_BLACK_SQUARE_Y + QO_PORTRAIT_Y));
        define_bunch(BEEROFFER, SHP_QO_BLACK_SQUARE, LBL_QO_QUESTNAME,
                     LBL_QO_QUESTTEXT, LBL_QO_TIME, LBL_QO_REWARDEXP, BO_BUY,
                     BO_BUY, QO_RETURN, BO_PORTRAIT_OK, BO_PORTRAIT_NO,
                     BO_PORTRAIT_TH);
        TimeBarAniTimer = new Timer(20);
        TimeBarAniTimer.add_event_listener(TimerEvent.TIMER, TimeBarAniEvent);
        TimeBarAniTimer.start();
        timeBarAni = 0;
        define_bunch(SCREEN_TOILET);
        define_snd(SND_TOILET_FLUSHTRY, "res/sfx/toilet/flush_try.mp3", False);
        define_snd(SND_TOILET_FLUSH, "res/sfx/toilet/flush.mp3", False);
        define_snd(SND_TOILET_DROP, "res/sfx/toilet/drop.mp3", False);
        add_bunch(SCREEN_TOILET, SND_TOILET_FLUSHTRY, SND_TOILET_FLUSH,
                  SND_TOILET_DROP);
        DefineImg(TOILET, "res/gfx/scr/taverne/toilet/toilet_bg.png", False,
                  SCR_SHOP_BG_X, 100);
        DefineImg((TOILET + 1), "res/gfx/scr/taverne/toilet/tank_content.png",
                  False, (SCR_SHOP_BG_X + 170), 190);
        DefineImg((TOILET + 2), "res/gfx/scr/taverne/toilet/toilet_ovl.png",
                  False, SCR_SHOP_BG_X, 100);
        i = 0;
        while (i < 3) {
            add_bunch(SCREEN_TOILET, (TOILET + i));
            i = (i + 1);
        };
        DefineImg(TOILET_IDLE, "res/gfx/scr/taverne/toilet/bowl_idle.png",
                  False, SCR_SHOP_BG_X, 100);
        DefineImg(TOILET_DROP, "res/gfx/scr/taverne/toilet/bowl_dropitem.png",
                  False, SCR_SHOP_BG_X, 100);
        add_bunch(SCREEN_TOILET, TOILET_IDLE, TOILET_DROP);
        define_bunch(TOILET_OVERLAYS, TOILET_IDLE, TOILET_DROP);
        DefineLbl(LBL_TOILET_AURA, "0", (SCR_SHOP_BG_X + 240), 430,
                  FontFormat_ToiletAura);
        add_bunch(SCREEN_TOILET, LBL_TOILET_AURA);
        i = 0;
        while (i < 7) {
            DefineImg((TOILET_FLUSH + i),
                      ("res/gfx/scr/taverne/toilet/bowl_flush_" + str((i + 1)))
                      + ".png"), False, SCR_SHOP_BG_X, 100);
            hide((TOILET_FLUSH + i));
            add_bunch(SCREEN_TOILET, (TOILET_FLUSH + i));
            add_bunch(TOILET_OVERLAYS, (TOILET_FLUSH + i));
            i = (i + 1);
        };
        i = 0;
        while (i < 3) {
            DefineImg((TOILET_CHAIN + i),
                      (("res/gfx/scr/taverne/toilet/chain_"
                       + str((i + 1))) + ".png"), False, SCR_SHOP_BG_X, 100);
            hide((TOILET_CHAIN + i));
            add_bunch(SCREEN_TOILET, (TOILET_CHAIN + i));
            add_bunch(TOILET_OVERLAYS, (TOILET_CHAIN + i));
            i = (i + 1);
        };
        i = 0;
        while (i < 15) {
            add_bunch(SCREEN_TOILET, (CHAR_SLOT_1 + i));
            i = (i + 1);
        };
        DefineClickArea(CA_TOILET_TANK, C_EMPTY, None, (SCR_SHOP_BG_X + 170),
                        190, 156, 120);
        DefineClickArea(CA_TOILET_CHAIN, C_EMPTY, ToiletHandler,
                        (SCR_SHOP_BG_X + 320), 210, 36, 206);
        DefineClickArea(CA_TOILET_BOWL, C_EMPTY, None, (SCR_SHOP_BG_X + 120),
                        540, 260, 120);
        DefineClickArea(CA_TOILET_LID, C_EMPTY, None, (SCR_SHOP_BG_X + 180),
                        380, 135, 155);
        enable_popup(CA_TOILET_CHAIN, texts[(TXT_TOILET_HINT + 1)]);
        enable_popup(CA_TOILET_BOWL, texts[(TXT_TOILET_HINT + 2)]);
        enable_popup(CA_TOILET_LID, texts[(TXT_TOILET_HINT + 3)]);
        actor[CA_TOILET_TANK].useHandCursor = False;
        actor[CA_TOILET_BOWL].useHandCursor = False;
        add_bunch(SCREEN_TOILET, IF_OVL, CA_TOILET_LID, CA_TOILET_TANK,
                  CA_TOILET_CHAIN, CA_TOILET_BOWL, IF_EXIT);
        toiletChainTimer = new Timer(50);
        toiletChainFrame = 0;
        toiletChainTimer.add_event_listener(TimerEvent.TIMER, toiletChainAni);
        i = 0;
        while (i < 6) {
            DefineImg((FIGHT_ONO + i), (("res/gfx/scr/fight/smash"
                      + str((i + 1))) + ".png"), False, 0, 0);
            i = (i + 1);
        };
        DefineImg(FIGHT_ARROW_SMASH, "res/gfx/scr/fight/arrowsmash.png",
                  False, 0, 0);
        DefineCnt(FIGHT_ONO, 0, 0);
        DefineLbl(LBL_FIGHT_PLAYERGUILD, "", 0, (OPPY + 5),
                  FontFormat_ScreenTitle);
        DefineLbl(LBL_FIGHT_OPPGUILD, "", 0, (OPPY + 5),
                  FontFormat_ScreenTitle);
        add_filter(LBL_FIGHT_PLAYERGUILD, Filter_Shadow);
        add_filter(LBL_FIGHT_OPPGUILD, Filter_Shadow);
        define_bunch(OPPIMG);
        define_bunch(OPPIMG2);
        i = 0;
        while (i < 10) {
            DefineImg((OPPBACKGROUND + i), "", False, OPPX, OPPY);
            add_bunch(OPPIMG, (OPPBACKGROUND + i));
            DefineImg((OPPBACKGROUND2 + i), "", False, OPPX, OPPY);
            add_bunch(OPPIMG2, (OPPBACKGROUND2 + i));
            i = (i + 1);
        };
        k = 0;
        k = 0;
        while (k < 500) {
            i = k;
            if (param_censored){
                if ((((i >= 66)) and ((i <= 68)))){
                    i = 69;
                };
                if (i == 73){
                    i = 128;
                };
                if ((((i >= 117)) and ((i <= 118)))){
                    i = 69;
                };
            };
            if (i >= 399){
                monsterChecksum = MD5((str(i) + "ScriptKiddieLovesToPeek"));
                DefineImg((OPPMONSTER + k),
                          (("res/gfx/scr/fight/monster/monster"
                           + monsterChecksum) + ".jpg"), False, OPPX, OPPY);
            } else {
                DefineImg((OPPMONSTER + k),
                          (("res/gfx/scr/fight/monster/monster"
                           + str((i + 1))) + ".jpg"), False, OPPX, OPPY);
            };
            k = (k + 1);
        };
        i = 0;
        while (i < 3) {
            ii = -7;
            while (ii < 100) {
                iii = 0;
                while (iii < 4) {
                    define_snd(get_weapon_sound((i + 1), (ii + 1), iii),
                               get_weapon_sound_file((i + 1), (ii + 1), iii));
                    iii = (iii + 1);
                };
                ii = (ii + 1);
            };
            i = (i + 1);
        };
        DefineLbl(LBL_NAMERANK_CHAR, "", (FIGHT_CHARX + 310), OPPY,
                  FontFormat_Default);
        add_filter(LBL_NAMERANK_CHAR, Filter_Shadow);
        DefineLbl(LBL_NAMERANK_OPP, "", 0, OPPY, FontFormat_Default);
        add_filter(LBL_NAMERANK_OPP, Filter_Shadow);
        DefineImg(LIFEBAR_CHAR, "res/gfx/scr/fight/lifebar.png", False,
                  FIGHT_CHARX, ((OPPY + 300) + LIFEBAR_Y));
        DefineImg(LIFEBAR_FILL_CHAR, "res/gfx/scr/fight/lifebar_red.png",
                  False, (FIGHT_CHARX + 10), (((OPPY + 300) + 8) + LIFEBAR_Y));
        DefineCnt(LIFEBAR_OPP, OPPX, ((OPPY + 300) + LIFEBAR_Y));
        DefineCnt(LIFEBAR_FILL_OPP, (OPPX + 10), (((OPPY + 300) + 8)
                  + LIFEBAR_Y));
        DefineLbl(LBL_LIFEBAR_CHAR, "", 0, (((OPPY + 300) + 13) + LIFEBAR_Y),
                  FontFormat_LifeBar);
        DefineLbl(LBL_LIFEBAR_OPP, "", 0, (((OPPY + 300) + 13) + LIFEBAR_Y),
                  FontFormat_LifeBar);
        DefineImg(FIGHT_CHAR_BORDER, "res/gfx/scr/fight/character_border.png",
                  False, (FIGHT_CHARX - 10), (OPPY - 10));
        DefineCnt(FIGHT_OPP_BORDER, (OPPX - 10), (OPPY - 10));
        DefineCnt(BULLET_CHAR, 0, 0);
        SetCnt(BULLET_CHAR, ITM_OFFS);
        DefineCnt(BULLET_OPP, 0, 0);
        SetCnt(BULLET_OPP, ITM_OFFS);
        DefineCnt(WEAPON_CHAR, 0, 0);
        SetCnt(WEAPON_CHAR, ITM_OFFS);
        DefineCnt(SHIELD_CHAR, 0, 0);
        SetCnt(SHIELD_CHAR, ITM_OFFS);
        DefineCnt(WEAPON_OPP, 0, 0);
        SetCnt(WEAPON_OPP, ITM_OFFS);
        DefineCnt(SHIELD_OPP, 0, 0);
        SetCnt(SHIELD_OPP, ITM_OFFS);
        DefineImg(WEAPON_FIST, "res/gfx/itm/kampf_faust.png", False, 0, 0);
        DefineImg(WEAPON_STONEFIST, "res/gfx/itm/kampf_steinfaust.png",
                  False, 0, 0);
        DefineImg(WEAPON_BONE, "res/gfx/itm/kampf_knochen.png", False, 0, 0);
        DefineImg(WEAPON_STICK, "res/gfx/itm/kampf_stock.png", False, 0, 0);
        DefineImg(WEAPON_CLAW, "res/gfx/itm/kampf_kralle1.png", False, 0, 0);
        DefineImg(WEAPON_CLAW2, "res/gfx/itm/kampf_kralle2.png", False, 0, 0);
        DefineImg(WEAPON_CLAW3, "res/gfx/itm/kampf_kralle3.png", False, 0, 0);
        DefineImg(WEAPON_CLAW4, "res/gfx/itm/kampf_kralle4.png", False, 0, 0);
        DefineImg(WEAPON_SWOOSH, "res/gfx/itm/kampf_swoosh1.png", False, 0, 0);
        DefineImg(WEAPON_SWOOSH2, "res/gfx/itm/kampf_swoosh2.png", False, 0, 0)
        DefineImg(WEAPON_SWOOSH3, "res/gfx/itm/kampf_swoosh3.png", False, 0, 0)
        DefineImg(WEAPON_SPLAT, "res/gfx/itm/kampf_splat1.png", False, 0, 0);
        DefineImg(WEAPON_SPLAT2, "res/gfx/itm/kampf_splat2.png", False, 0, 0);
        DefineImg(WEAPON_SPLAT3, "res/gfx/itm/kampf_splat3.png", False, 0, 0);
        DefineImg(WEAPON_FIRE, "res/gfx/itm/kampf_feuer1.png", False, 0, 0);
        DefineImg(WEAPON_FIRE2, "res/gfx/itm/kampf_feuer2.png", False, 0, 0);
        DefineImg(WEAPON_FIRE3, "res/gfx/itm/kampf_feuer3.png", False, 0, 0);
        DefineLbl(LBL_DAMAGE_INDICATOR, "", 0, 0, FontFormat_Damage);
        add_filter(LBL_DAMAGE_INDICATOR, Filter_Shadow);
        define_btn(FIGHT_SKIP, texts[TXT_SKIP_FIGHT], SkipFight,
                   btn_classBasic, 0, 0);
        define_btn(FIGHT_OK, texts[TXT_OK], InterfaceBtnHandler,
                   btn_classBasic, 0, 0);
        _local2 = actor[FIGHT_OK];
        with (_local2) {
            y = FIGHT_Y;
            x = (SCREEN_TITLE_X - int((width / 2)));
        };
        _local2 = actor[FIGHT_SKIP];
        with (_local2) {
            y = FIGHT_Y;
            x = (SCREEN_TITLE_X - int((width / 2)));
        };
        define_btn(BATTLE_SKIP, texts[TXT_SKIP_FIGHT], SkipFight,
                   btn_classBasic, 0, 0);
        define_btn(BATTLE_SKIPONE, texts[TXT_GUILD_BATTLE_SKIP],
                   SkipFight, btn_classBasic, 0, 0);
        _local2 = actor[BATTLE_SKIPONE];
        with (_local2) {
            y = FIGHT_Y;
            x = ((SCREEN_TITLE_X - width) - 5);
        };
        _local2 = actor[BATTLE_SKIP];
        with (_local2) {
            y = FIGHT_Y;
            x = (SCREEN_TITLE_X + 5);
        };
        DefineLbl(LBL_FIGHT_SUMMARY, "", 0, FIGHT_SUMMARY_Y,
                  FontFormat_Default);
        add_filter(LBL_FIGHT_SUMMARY, Filter_Shadow);
        DefineImg(GUILD_BATTLE_BG, "res/gfx/scr/fight/schlachtfeld.jpg",
                  False, 280, 100);
        DefineImg(GUILD_RAID_BG, "res/gfx/scr/fight/raid.jpg", False,
                  280, 100);
        define_bunch(SCREEN_FIGHT, BLACK_SQUARE, LBL_NAMERANK_CHAR,
                     LIFEBAR_CHAR, LIFEBAR_FILL_CHAR, LBL_LIFEBAR_CHAR,
                     LBL_NAMERANK_OPP, IF_EXIT);
        add_bunch(SCREEN_FIGHT, LIFEBAR_OPP, LIFEBAR_FILL_OPP, LBL_LIFEBAR_OPP,
                  IF_OVL, FIGHT_SKIP, FIGHT_CHAR_BORDER, FIGHT_OPP_BORDER);
        DefineImg(FIGHT_BOX1, "res/gfx/scr/fight/box1.png", False,
                  (FIGHT_CHAR_PROP_COLUMN_1_X + FIGHT_BOX1_X),
                  (FIGHT_CHAR_PROP_Y + FIGHT_BOX1_Y));
        DefineImg(FIGHT_BOX2, "res/gfx/scr/fight/box2.png", False,
                  (SCREEN_TITLE_X - 254), (FIGHT_CHAR_PROP_Y + FIGHT_BOX1_Y));
        DefineCnt(FIGHT_BOX3, (FIGHT_CHAR_PROP_COLUMN_3_X + FIGHT_BOX3_X),
                  (FIGHT_CHAR_PROP_Y + FIGHT_BOX1_Y));
        DefineCnt(FIGHT_SLOT, (SCREEN_TITLE_X - 45), FIGHT_SLOT_Y);
        DefineCnt(FIGHT_REWARDGOLD, FIGHT_REWARDGOLD_X, FIGHT_REWARDGOLD_Y);
        DefineCnt(FIGHT_REWARDSILVER, FIGHT_REWARDGOLD_X, FIGHT_REWARDGOLD_Y);
        DefineCnt(FIGHT_REWARDMUSH, FIGHT_REWARDGOLD_X, FIGHT_REWARDMUSH_Y);
        DefineLbl(LBL_FIGHT_REWARDGOLD, "", 0, FIGHT_REWARDGOLD_Y,
                  FontFormat_Default);
        add_filter(LBL_FIGHT_REWARDGOLD, Filter_Shadow);
        DefineLbl(LBL_FIGHT_REWARDSILVER, "", 0, FIGHT_REWARDGOLD_Y,
                  FontFormat_Default);
        add_filter(LBL_FIGHT_REWARDSILVER, Filter_Shadow);
        DefineLbl(LBL_FIGHT_REWARDMUSH, "", 0, FIGHT_REWARDMUSH_Y,
                  FontFormat_Default);
        add_filter(LBL_FIGHT_REWARDMUSH, Filter_Shadow);
        DefineLbl(LBL_FIGHT_REWARDEXP, "", FIGHT_REWARDEXP_X,
                  FIGHT_REWARDGOLD_Y, FontFormat_Default);
        add_filter(LBL_FIGHT_REWARDEXP, Filter_Shadow);
        add_bunch(SCREEN_FIGHT, FIGHT_BOX1, FIGHT_BOX2, FIGHT_BOX3);
        define_bunch(FIGHT_REWARDS, FIGHT_SLOT, FIGHT_REWARDGOLD,
                     LBL_FIGHT_REWARDGOLD, FIGHT_REWARDSILVER,
                     LBL_FIGHT_REWARDSILVER, FIGHT_REWARDMUSH,
                     LBL_FIGHT_REWARDMUSH, LBL_FIGHT_REWARDEXP);
        DefineLbl(LBL_HERO_OF_THE_DAY_TITLE,
                  ((texts[TXT_HERO_OF_THE_DAY_TITLE])
                   ? texts[TXT_HERO_OF_THE_DAY_TITLE] : ""), 0, 120,
                    FontFormat_Heading);
        actor[LBL_HERO_OF_THE_DAY_TITLE].x = (SCREEN_TITLE_X
                          - (actor[LBL_HERO_OF_THE_DAY_TITLE].width / 2));
        DefineLbl(LBL_HERO_OF_THE_DAY, "", 0, 160, FontFormat_Default);
        actor[LBL_HERO_OF_THE_DAY].default_text_format.align = "center";
        add_filter(LBL_HERO_OF_THE_DAY_TITLE, Filter_Shadow);
        add_filter(LBL_HERO_OF_THE_DAY, Filter_Shadow);
        define_bunch(HERO_OF_THE_DAY, LBL_HERO_OF_THE_DAY_TITLE,
                     LBL_HERO_OF_THE_DAY);
        i = 0;
        while (i < 5) {
            DefineLbl((LBL_FIGHT_CHAR_STAERKE_CAPTION + i),
                      texts[(TXT_CHAR_STAERKE + i)],
                      FIGHT_CHAR_PROP_COLUMN_1_X,
                      (FIGHT_CHAR_PROP_Y + (i * FIGHT_CHAR_PROP_Y)),
                      FontFormat_Default);
            DefineLbl((LBL_FIGHT_CHAR_STAERKE + i), "",
                      FIGHT_CHAR_PROP_COLUMN_2_X,
                      (FIGHT_CHAR_PROP_Y + (i * FIGHT_CHAR_PROP_Y)),
                      FontFormat_Attrib);
            DefineLbl((LBL_FIGHT_OPP_STAERKE_CAPTION + i),
                      texts[(TXT_CHAR_STAERKE + i)],
                      FIGHT_CHAR_PROP_COLUMN_3_X, (FIGHT_CHAR_PROP_Y
                       + (i * FIGHT_CHAR_PROP_Y)), FontFormat_Default);
            DefineLbl((LBL_FIGHT_OPP_STAERKE + i), "",
                      FIGHT_CHAR_PROP_COLUMN_4_X,
                      (FIGHT_CHAR_PROP_Y + (i * FIGHT_CHAR_PROP_Y)),
                      FontFormat_Attrib);
            add_filter((LBL_FIGHT_CHAR_STAERKE_CAPTION + i), Filter_Shadow);
            add_filter((LBL_FIGHT_CHAR_STAERKE + i), Filter_Shadow);
            add_filter((LBL_FIGHT_OPP_STAERKE_CAPTION + i), Filter_Shadow);
            add_filter((LBL_FIGHT_OPP_STAERKE + i), Filter_Shadow);
            add_bunch(SCREEN_FIGHT, (LBL_FIGHT_CHAR_STAERKE + i),
                      (LBL_FIGHT_CHAR_STAERKE_CAPTION + i),
                      (LBL_FIGHT_OPP_STAERKE + i),
                      (LBL_FIGHT_OPP_STAERKE_CAPTION + i));
            i = (i + 1);
        };
        DefineImg(FIGHT_MUSH, "res/gfx/scr/fight/bigmush.png", False, 0, 0);
        define_snd(SND_CATAPULT_LAUNCH, "res/sfx/catapult_launch.mp3");
        define_snd(SND_CATAPULT_HIT, "res/sfx/catapult_hit.mp3");
        i = 0;
        while (i < 3) {
            DefineImg((FIGHT_COPYCAT + i),
                      (("res/gfx/npc/copycat_" + str((i + 1))) + ".jpg"),
                      False, FIGHT_CHARX, OPPY);
            i = (i + 1);
        };
        DefineImg(BG_DEMO, "res/gfx/scr/demo/demo.png", False, 0, DEMO_Y);
        define_btn(DEMO_LOGOFF, texts[TXT_OK], RequestLOGout, btn_classBasic,
                   DEMO_X, DEMO_Y);
        define_bunch(SCREEN_DEMO, BG_DEMO, IF_OVL, DEMO_LOGOFF, BLACK_SQUARE);
        DefineFromClass(SHP_OPTION_BLACK, black_square_neutral, OPTION_X,
                        OPTION_Y);
        _local2 = actor[SHP_OPTION_BLACK];
        with (_local2) {
            width = OPTION_X;
            height = OPTION_Y;
            alpha = 0.65;
        };
        DefineLbl(LBL_OPTION_TITLE, texts[TXT_OPTION_TITLE], 0,
                  (OPTION_Y + OPTION_Y0), FontFormat_ScreenTitle);
        add_filter(LBL_OPTION_TITLE, Filter_Shadow);
        DefineLbl(LBL_OPTION_IMAGE, texts[TXT_CHARIMG],
                  (OPTION_X + OPTION_IMAGE_X), (OPTION_Y + OPTION_Y1),
                  FontFormat_Heading);
        add_filter(LBL_OPTION_IMAGE, Filter_Shadow);
        DefineImg(OPTION_IMAGEBORDER,
                  "res/gfx/scr/option/character_border_small.png",
                  False, (OPTION_X + OPTION_IMAGE_X), (OPTION_Y + OPTION_Y2));
        define_btn(OPTION_CHANGEIMG, texts[TXT_CHANGEIMG], OptionBtnHandler,
                   btn_classBasic, (OPTION_X + OPTION_IMAGE_X),
                   ((OPTION_Y + OPTION_Y5) - 2));
        DefineLbl(LBL_OPTION_CHANGE, texts[TXT_CHANGE],
                  (OPTION_X + OPTION_CHANGE_X), (OPTION_Y + OPTION_Y1),
                  FontFormat_Heading);
        add_filter(LBL_OPTION_CHANGE, Filter_Shadow);
        define_btn(OPTION_CHANGE_NAME, texts[TXT_CHANGE_NAME],
                   OptionBtnHandler, btn_classBasic,
                   (OPTION_X + OPTION_CHANGE_X), (OPTION_Y + OPTION_Y2));
        define_btn(OPTION_RESEND, texts[TXT_RESEND_BTN1], OptionBtnHandler,
                   btn_classBasic, (OPTION_X + OPTION_CHANGE_X),
                   (OPTION_Y + OPTION_Y4));
        define_btn(OPTION_CHANGE_EMAIL, texts[TXT_CHANGE_EMAIL],
                   OptionBtnHandler, btn_classBasic,
                   (OPTION_X + OPTION_CHANGE_X), (OPTION_Y + OPTION_Y2));
        define_btn(OPTION_CHANGE_PASSWORD, texts[TXT_CHANGE_PASSWORD],
                   OptionBtnHandler, btn_classBasic,
                   (OPTION_X + OPTION_CHANGE_X), (OPTION_Y + OPTION_Y3));
        define_btn(OPTION_DELETE, texts[TXT_DELETE_ACCOUNT],
                   OptionBtnHandler, btn_classBasic,
                   (OPTION_X + OPTION_CHANGE_X), (OPTION_Y + OPTION_Y5));
        define_btn(OPTION_LUXURY, texts[TXT_LUXURY_BUTTON],
                   OptionBtnHandler, btn_classBasic,
                   (OPTION_X + OPTION_CHANGE_X), ((OPTION_Y + OPTION_Y5) - 2));
        DefineImg(LUXURY_SELLER, "res/gfx/scr/option/seller.jpg",
                  False, 1100, 190);
        DefineFromClass(CB_LM_UNCHECKED, cb_unchecked, LM_X, LM_Y);
        actor[CB_LM_UNCHECKED].add_event_listener(MouseEvent.CLICK, CheckLM);
        DefineFromClass(CB_LM_CHECKED, cb_checked, LM_X, LM_Y);
        actor[CB_LM_CHECKED].add_event_listener(MouseEvent.CLICK, UncheckLM);
        DefineLbl(LBL_LM, texts[TXT_LM], (LM_X + LM_X), (LM_Y + LM_Y),
                  FontFormat_Default);
        add_filter(LBL_LM, Filter_Shadow);
        DefineFromClass(CB_CS_UNCHECKED, cb_unchecked, LM_X, (LM_Y - 50));
        actor[CB_CS_UNCHECKED].add_event_listener(MouseEvent.CLICK, CheckCS);
        DefineFromClass(CB_CS_CHECKED, cb_checked, LM_X, (LM_Y - 50));
        actor[CB_CS_CHECKED].add_event_listener(MouseEvent.CLICK, UncheckCS);
        DefineLbl(LBL_CS, ((texts[TXT_CS]) ? texts[TXT_CS] : "Chat Sound"),
                  (LM_X + LM_X), ((LM_Y + LM_Y) - 50), FontFormat_Default);
        add_filter(LBL_CS, Filter_Shadow);
        DefineFromClass(CB_COMPARE_UNCHECKED, cb_unchecked, (LM_X + 250),
                        (LM_Y - 50));
        actor[CB_COMPARE_UNCHECKED].add_event_listener(MouseEvent.CLICK,
                                                       CheckCompare);
        DefineFromClass(CB_COMPARE_CHECKED, cb_checked, (LM_X + 250),
                        (LM_Y - 50));
        actor[CB_COMPARE_CHECKED].add_event_listener(MouseEvent.CLICK,
                                                     UncheckCompare);
        DefineLbl(LBL_COMPARE, texts[TXT_COMPARE], ((LM_X + LM_X) + 250),
                  ((LM_Y + LM_Y) - 50), FontFormat_Default);
        add_filter(LBL_COMPARE, Filter_Shadow);
        DefineFromClass(CB_TV_UNCHECKED, cb_unchecked, (LM_X + 250), LM_Y);
        actor[CB_TV_UNCHECKED].add_event_listener(MouseEvent.CLICK, CheckTV);
        DefineFromClass(CB_TV_CHECKED, cb_checked, (LM_X + 250), LM_Y);
        actor[CB_TV_CHECKED].add_event_listener(MouseEvent.CLICK, UncheckTV);
        DefineLbl(LBL_TV_CHECKBOX, texts[TXT_TV_DISABLE],
                  ((LM_X + LM_X) + 250), (LM_Y + LM_Y), FontFormat_Default);
        add_filter(LBL_TV_CHECKBOX, Filter_Shadow);
        DefineLbl(LBL_OPTION_DOCHANGE, "", (OPTION_X + OPTION_DOCHANGE_X),
                  (OPTION_Y + OPTION_Y1), FontFormat_Heading);
        add_filter(LBL_OPTION_DOCHANGE, Filter_Shadow);
        DefineLbl(LBL_OPTION_FIELD1, "", (OPTION_X + OPTION_DOCHANGE_LABEL_X),
                  ((OPTION_Y + OPTION_Y2) + OPTION_TEXT_Y),
                  FontFormat_DefaultLeft);
        _local2 = actor[LBL_OPTION_FIELD1];
        with (_local2) {
            wordWrap = True;
            width = 300;
        };
        DefineLbl(LBL_OPTION_FIELD2, "", (OPTION_X + OPTION_DOCHANGE_LABEL_X),
                  ((OPTION_Y + OPTION_Y3) + OPTION_TEXT_Y), FontFormat_Default)
        DefineLbl(LBL_OPTION_FIELD3, "", (OPTION_X + OPTION_DOCHANGE_LABEL_X),
                  ((OPTION_Y + OPTION_Y4) + OPTION_TEXT_Y), FontFormat_Default)
        add_filter(LBL_OPTION_FIELD1, Filter_Shadow);
        add_filter(LBL_OPTION_FIELD2, Filter_Shadow);
        add_filter(LBL_OPTION_FIELD3, Filter_Shadow);
        DefineFromClass(INP_OPTION_FIELD1, text_input1,
                        (OPTION_X + OPTION_DOCHANGE_FIELD_X),
                        (OPTION_Y + OPTION_Y2), 2, "name");
        DefineFromClass(INP_OPTION_FIELD2, text_input2,
                        (OPTION_X + OPTION_DOCHANGE_FIELD_X),
                        (OPTION_Y + OPTION_Y3), 2, "name");
        DefineFromClass(INP_OPTION_FIELD3, text_input1,
                        (OPTION_X + OPTION_DOCHANGE_FIELD_X),
                        (OPTION_Y + OPTION_Y4), 2, "name");
        actor[INP_OPTION_FIELD1].add_event_listener(KeyboardEvent.KEY_DOWN,
                                                    OptionBtnHandler);
        actor[INP_OPTION_FIELD2].add_event_listener(KeyboardEvent.KEY_DOWN,
                                                    OptionBtnHandler);
        actor[INP_OPTION_FIELD3].add_event_listener(KeyboardEvent.KEY_DOWN,
                                                    OptionBtnHandler);
        actor[INP_OPTION_FIELD2].add_event_listener(KeyboardEvent.KEY_UP,
                                                    gradePassword);
        actor[INP_OPTION_FIELD3].add_event_listener(KeyboardEvent.KEY_UP,
                                                    gradePassword);
        DefineCnt(CHANGE_PASSWORD_SMILEY_SAD,
                  ((OPTION_X + OPTION_DOCHANGE_X) - 50),
                  (OPTION_Y + OPTION_Y5));
        DefineCnt(CHANGE_PASSWORD_SMILEY_NEUTRAL,
                  ((OPTION_X + OPTION_DOCHANGE_X) - 50),
                  (OPTION_Y + OPTION_Y5));
        DefineCnt(CHANGE_PASSWORD_SMILEY_HAPPY,
                  ((OPTION_X + OPTION_DOCHANGE_X) - 50),
                  (OPTION_Y + OPTION_Y5));
        enable_popup(CHANGE_PASSWORD_SMILEY_SAD,
                     texts[TXT_PASSWORD_SMILEY_SAD].split("#").join(chr(13)));
        enable_popup(CHANGE_PASSWORD_SMILEY_NEUTRAL,
                     texts[TXT_PASSWORD_SMILEY_NEUTRAL].split(
                                          "#").join(chr(13)));
        enable_popup(CHANGE_PASSWORD_SMILEY_HAPPY,
                     texts[TXT_PASSWORD_SMILEY_HAPPY].split("#").join(chr(13)))
        define_btn(OPTION_DOCHANGE, texts[TXT_DOCHANGE], OptionBtnHandler,
                   btn_classBasic, (OPTION_X + OPTION_DOCHANGE_X),
                   (OPTION_Y + OPTION_Y5));
        DefineLbl(LBL_OPTION_VOLUME, "", 0, (OPTION_Y + OPTION_Y6),
                  FontFormat_Default);
        add_filter(LBL_OPTION_VOLUME, Filter_Shadow);
        DefineSlider(SLDR_OPTION_VOLUME, 11,
                     ((OPTION_X + OPTION_VOLUME_X) + 250),
                     (OPTION_Y + OPTION_Y7), VolumeChange);
        define_snd(SND_TEST, "res/sfx/click.mp3");
        define_bunch(OPTION_DOCHANGE, LBL_OPTION_DOCHANGE, LBL_OPTION_FIELD1,
                     LBL_OPTION_FIELD2, LBL_OPTION_FIELD3, INP_OPTION_FIELD1,
                     INP_OPTION_FIELD2, INP_OPTION_FIELD3, OPTION_DOCHANGE);
        define_bunch(OPTION_DORESEND, LBL_OPTION_DOCHANGE, LBL_OPTION_FIELD1,
                     OPTION_DOCHANGE);
        DefineLbl(LBL_OPTION_VER,
                  ("v1.70" + (((get_file_version() == 0)) ? ""
                   : ("." + str(get_file_version())))), 0,
                    ((OPTION_Y + OPTION_VER_Y) + 110), FontFormat_Default);
        actor[LBL_OPTION_VER].x = (((OPTION_X + OPTION_VER_X) + 60)
                                   - actor[LBL_OPTION_VER].text_width);
        add_filter(LBL_OPTION_VER, Filter_Shadow);
        define_bunch(SCREEN_OPTION, SHP_OPTION_BLACK, OPTION_IMAGEBORDER,
                     LBL_OPTION_TITLE, LBL_OPTION_IMAGE, OPTION_CHANGEIMG,
                     LBL_OPTION_CHANGE, OPTION_RESEND);
        add_bunch(SCREEN_OPTION, OPTION_CHANGE_EMAIL, OPTION_CHANGE_PASSWORD,
                  OPTION_DELETE, LBL_OPTION_VOLUME, SLDR_OPTION_VOLUME,
                  IF_EXIT, SND_TEST, LBL_OPTION_VER, CB_LM_UNCHECKED, LBL_LM);
        add_bunch(SCREEN_OPTION, CHANGE_PASSWORD_SMILEY_SAD,
                  CHANGE_PASSWORD_SMILEY_NEUTRAL, CHANGE_PASSWORD_SMILEY_HAPPY,
                  CB_CS_UNCHECKED, LBL_CS, CB_COMPARE_UNCHECKED, LBL_COMPARE,
                  CB_TV_UNCHECKED, LBL_TV_CHECKBOX);
        Filter_Glow = [new GradientGlowFilter(0, 45, [16777026, 16777026],
                                              [0, 0.4], [0, 127], 16, 16, 1, 1,
                                              "outer")];
        i = 0;
        while (i < param_languages.length) {
            DefineImg((OPTION_FLAG + i),
                      ("res/gfx/if/flags/flag_" + param_languages[i] + ".png"),
                      False,
                      ((LM_X + (35 * i)) - ((lang_code)==param_languages[i])
                       ? 8 : 0),
                        (LM_Y + ((lang_code)==param_languages[i]) ? 53 : 60),
                        ((lang_code)==param_languages[i]) ? 0.9 : 0.6,
                        ((lang_code)==param_languages[i]) ? 0.9 : 0.6);
            if (lang_code == param_languages[i]){
                add_filter((OPTION_FLAG + i), Filter_Glow);
            };
            actor[(OPTION_FLAG + i)].add_event_listener(MouseEvent.CLICK,
                                                        ChooseLanguageIcon);
            add_bunch(SCREEN_OPTION, (OPTION_FLAG + i));
            enable_popup((OPTION_FLAG + i), param_language_names[i]);
            i = (i + 1);
        };
        optionMenuSelect = 0;
        DefineLbl(LBL_HLMAINQUESTS_TITLE, texts[TXT_HL_MAINQUESTS_TITLE], 0,
                  MQS_TITLE_Y, FontFormat_ScreenTitle);
        add_filter(LBL_HLMAINQUESTS_TITLE, Filter_Shadow);
        DefineImg(HLMQS_DISABLED, "res/gfx/scr/dungeons/unknown.png",
                  False, 0, 0);
        DefineImg(HLMQS_COMPLETED, "res/gfx/scr/dungeons/done.png",
                  False, 0, 0);
        DefineImg(HLMQS_TOWER_DISABLED, "res/gfx/scr/dungeons/unknown.png",
                  False, 0, 0);
        DefineImg(HLMQS_TOWER_COMPLETED, "res/gfx/scr/dungeons/done_tower.png",
                  False, 0, 0);
        define_bunch(SCREEN_HLMAINQUESTS, IF_OVL, IF_EXIT,
                     LBL_HLMAINQUESTS_TITLE, SND_MAINQUESTS_UNLOCK);
        i = 0;
        while (i < 5) {
            if (i == 4){
                DefineCnt((HLMQS_BUTTON + 4),
                          ((MQS_BUTTON_X + MQS_BUTTON_X) + 0),
                          ((MQS_BUTTON_Y + MQS_BUTTON_Y) - 170));
                DefineImg((HLMQS_BUTTON + 4),
                          "res/gfx/scr/dungeons/button_tower.jpg", False,
                          ((MQS_BUTTON_X + MQS_BUTTON_X) + 0),
                          ((MQS_BUTTON_Y + MQS_BUTTON_Y) - 170));
                DefineCnt((HLMQS_DISABLED + 4),
                          ((MQS_BUTTON_X + MQS_BUTTON_X) + 0),
                          ((MQS_BUTTON_Y + MQS_BUTTON_Y) - 170));
                DefineCnt((HLMQS_COMPLETED + 4),
                          ((MQS_BUTTON_X + MQS_BUTTON_X) + 0),
                          ((MQS_BUTTON_Y + MQS_BUTTON_Y) - 170));
            } else {
                DefineCnt((HLMQS_BUTTON + i),
                          (MQS_BUTTON_X + ((MQS_BUTTON_X * 2) * int((i % 2)))),
                          ((MQS_BUTTON_Y + 100) + (200 * int((i / 2)))));
                DefineImg((HLMQS_BUTTON + i),
                          (("res/gfx/scr/dungeons/button" + str((60 + i)))
                           + ".jpg"), False, (MQS_BUTTON_X +
                           ((MQS_BUTTON_X * 2) * int((i % 2)))),
                            ((MQS_BUTTON_Y + 100) + (200 * int((i / 2)))));
                DefineCnt((HLMQS_DISABLED + i),
                          (MQS_BUTTON_X + ((MQS_BUTTON_X * 2) * int((i % 2)))),
                          ((MQS_BUTTON_Y + 100) + (200 * int((i / 2)))));
                DefineCnt((HLMQS_COMPLETED + i),
                          (MQS_BUTTON_X + ((MQS_BUTTON_X * 2) * int((i % 2)))),
                          ((MQS_BUTTON_Y + 100) + (200 * int((i / 2)))));
            };
            add_bunch(SCREEN_HLMAINQUESTS, (HLMQS_BUTTON + i),
                      (HLMQS_DISABLED + i), (HLMQS_COMPLETED + i));
            enable_popup((HLMQS_DISABLED + i), POPUP_BEGIN_LINE,
                         texts[(TXT_HL_MAINQUESTS_NAME + i)].split("|")[0],
                         POPUP_END_LINE, POPUP_BEGIN_LINE,
                         FontFormat_EpicItemQuote,
                         texts[(TXT_HL_MAINQUESTS_NAME + i)].split("|")[1],
                         FontFormat_Popup, POPUP_END_LINE, POPUP_BEGIN_LINE,
                         texts[(TXT_DUNGEON_INFO + 1)], POPUP_END_LINE);
            enable_popup((HLMQS_COMPLETED + i), POPUP_BEGIN_LINE,
                         texts[(TXT_HL_MAINQUESTS_NAME + i)].split("|")[0],
                         POPUP_END_LINE, POPUP_BEGIN_LINE,
                         FontFormat_EpicItemQuote,
                         texts[(TXT_HL_MAINQUESTS_NAME + i)].split("|")[1],
                         FontFormat_Popup, POPUP_END_LINE, POPUP_BEGIN_LINE,
                         texts[(TXT_DUNGEON_INFO + 2)], POPUP_END_LINE);
            i = (i + 1);
        };
        DefineLbl(LBL_MAINQUESTS_TITLE, texts[(TXT_DUNGEON_INFO + 4)], 0,
                  MQS_TITLE_Y, FontFormat_ScreenTitle);
        add_filter(LBL_MAINQUESTS_TITLE, Filter_Shadow);
        define_snd(SND_MAINQUESTS_UNLOCK, "res/sfx/unlock.mp3", False);
        DefineImg(MQS_DISABLED,
                  "res/gfx/scr/dungeons/unknown.png", False, 0, 0);
        DefineImg(MQS_COMPLETED,
                  "res/gfx/scr/dungeons/done.png", False, 0, 0);
        define_bunch(SCREEN_MAINQUESTS, IF_OVL, IF_EXIT, LBL_MAINQUESTS_TITLE,
                     SND_MAINQUESTS_UNLOCK);
        i = 0;
        while (i < 9) {
            DefineCnt((MQS_BUTTON + i),
                      (MQS_BUTTON_X + (MQS_BUTTON_X * int((i % 3)))),
                      (MQS_BUTTON_Y + (MQS_BUTTON_Y * int((i / 3)))));
            DefineImg((MQS_BUTTON + i),
                      (("res/gfx/scr/dungeons/button" + str(51 + i)) + ".jpg"),
                      False, (MQS_BUTTON_X + (MQS_BUTTON_X * int((i % 3)))),
                      (MQS_BUTTON_Y + (MQS_BUTTON_Y * int((i / 3)))));
            DefineCnt((MQS_DISABLED + i),
                      (MQS_BUTTON_X + (MQS_BUTTON_X * int((i % 3)))),
                      (MQS_BUTTON_Y + (MQS_BUTTON_Y * int((i / 3)))));
            DefineCnt((MQS_COMPLETED + i),
                      (MQS_BUTTON_X + (MQS_BUTTON_X * int((i % 3)))),
                      (MQS_BUTTON_Y + (MQS_BUTTON_Y * int((i / 3)))));
            add_bunch(SCREEN_MAINQUESTS, (MQS_BUTTON + i), (MQS_DISABLED + i),
                      (MQS_COMPLETED + i));
            enable_popup((MQS_DISABLED + i), POPUP_BEGIN_LINE,
                         texts[(TXT_DUNGEON_NAME + i)].split("|")[0],
                         POPUP_END_LINE, POPUP_BEGIN_LINE,
                         FontFormat_EpicItemQuote,
                         texts[(TXT_DUNGEON_NAME + i)].split("|")[1],
                         FontFormat_Popup, POPUP_END_LINE, POPUP_BEGIN_LINE,
                         texts[(TXT_DUNGEON_INFO + 1)], POPUP_END_LINE);
            enable_popup((MQS_COMPLETED + i), POPUP_BEGIN_LINE,
                         texts[(TXT_DUNGEON_NAME + i)].split("|")[0],
                         POPUP_END_LINE, POPUP_BEGIN_LINE,
                         FontFormat_EpicItemQuote,
                         texts[(TXT_DUNGEON_NAME + i)].split("|")[1],
                         FontFormat_Popup, POPUP_END_LINE, POPUP_BEGIN_LINE,
                         texts[(TXT_DUNGEON_INFO + 2)], POPUP_END_LINE);
            i = (i + 1);
        };
        DefineImg(DUNGEON_CONGRATS, "res/gfx/scr/dungeons/congrats.jpg",
                  False, 280, 100);
        DefineLbl(LBL_DUNGEON_CONGRATS,
                  ((texts[TXT_CONGRATS])
                   ? texts[TXT_CONGRATS].split("#").join(chr(13))
                   : ""), 1000, 600, FontFormat_Default);
        actor[LBL_DUNGEON_CONGRATS].wordWrap = True;
        actor[LBL_DUNGEON_CONGRATS].default_text_format.align = "right";
        add_filter(LBL_DUNGEON_CONGRATS, Filter_Shadow);
        define_bunch(DUNGEON_CONGRATS, DUNGEON_CONGRATS, LBL_DUNGEON_CONGRATS,
                     IF_OVL, IF_EXIT);
        DefineFromClass(SHP_MAINQUEST, black_square, MQ_SQUARE_X, MQ_SQUARE_Y);
        _local2 = actor[SHP_MAINQUEST];
        with (_local2) {
            width = MQ_SQUARE_X;
            height = MQ_SQUARE_Y;
            alpha = 0.6;
        };
        DefineLbl(LBL_MAINQUEST_TITLE, "", 0, (MQ_SQUARE_Y + MQ_TITLE_Y),
                  FontFormat_ScreenTitle);
        add_filter(LBL_MAINQUEST_TITLE, Filter_Shadow);
        DefineLbl(LBL_MAINQUEST_TEXT, "", (MQ_SQUARE_X + MQ_TEXT_X),
                  (MQ_SQUARE_Y + MQ_TEXT_Y), FontFormat_DefaultLeft);
        _local2 = actor[LBL_MAINQUEST_TEXT];
        with (_local2) {
            width = (MQ_SQUARE_X - (MQ_TEXT_X * 2));
            wordWrap = True;
        };
        add_filter(LBL_MAINQUEST_TEXT, Filter_Shadow);
        define_btn(MAINQUEST_START, "", RequestMainQuest, btn_classBasic, 0,
                   ((MQ_SQUARE_Y + MQ_SQUARE_Y) - MQ_BUTTON_Y));
        _local2 = actor[MAINQUEST_START];
        with (_local2) {
            x = (((MQ_SQUARE_X + MQ_SQUARE_X) - MQ_TEXT_X) - width);
        };
        DefineLbl(LBL_MAINQUEST_MUSHHINT, texts[TXT_MQ_MUSHHINT],
                  (MQ_SQUARE_X + MQ_TEXT_X),
                  ((MQ_SQUARE_Y + MQ_SQUARE_Y) - MQ_MUSHHINT_Y),
                  FontFormat_DefaultLeft);
        _local2 = actor[LBL_MAINQUEST_MUSHHINT];
        with (_local2) {
            width = ((MQ_SQUARE_X - (MQ_TEXT_X * 3))
                     - actor[MAINQUEST_START].width);
            wordWrap = True;
        };
        add_filter(LBL_MAINQUEST_MUSHHINT, Filter_Shadow);
        DefineCnt(MAINQUEST_ENEMY, MAINQUEST_ENEMY_X, MAINQUEST_ENEMY_Y);
        DefineCnt(MAINQUEST_ENEMY_BORDER, (MAINQUEST_ENEMY_X - MQ_BORDER_X),
                  (MAINQUEST_ENEMY_Y - MQ_BORDER_Y));
        define_bunch(SCREEN_MAINQUEST, SHP_MAINQUEST, IF_OVL,
                     LBL_MAINQUEST_TITLE, LBL_MAINQUEST_TEXT,
                     MAINQUEST_ENEMY_BORDER, MAINQUEST_ENEMY,
                     LBL_MAINQUEST_MUSHHINT, MAINQUEST_START, IF_EXIT);
        DefineLbl(LBL_DISCONNECTED, texts[TXT_DISCONNECTED],
                  ((DISCONNECTED_X - (DISCONNECTED_X / 2)) + 10),
                  (DISCONNECTED_Y + 10), FontFormat_Error);
        _local2 = actor[LBL_DISCONNECTED];
        with (_local2) {
            wordWrap = True;
            width = (DISCONNECTED_X - 20);
        };
        add_filter(LBL_DISCONNECTED, Filter_Shadow);
        DefineFromClass(SHP_DISCONNECTED, black_square_neutral,
                        (DISCONNECTED_X - (DISCONNECTED_X / 2)),
                        DISCONNECTED_Y);
        _local2 = actor[SHP_DISCONNECTED];
        with (_local2) {
            width = DISCONNECTED_X;
            height = (actor[LBL_DISCONNECTED].textHeight + 20);
            alpha = 0.8;
        };
        define_bunch(SCREEN_DISCONNECTED, BLACK_SQUARE, SHP_DISCONNECTED,
                     LBL_DISCONNECTED);
        DefineLbl(LBL_EMAIL_NAG, texts[TXT_EMAIL_NAG], EMAIL_NAG_X,
                  EMAIL_NAG_Y, FontFormat_DefaultLeft);
        actor[LBL_EMAIL_NAG].width = EMAIL_NAG_TEXT_X;
        actor[LBL_EMAIL_NAG].wordWrap = True;
        add_filter(LBL_EMAIL_NAG, Filter_Shadow);
        DefineLbl(LBL_EMAIL_RESEND, texts[TXT_EMAIL_RESEND], 0, 0,
                  FontFormat_Default);
        add_filter(LBL_EMAIL_RESEND, Filter_Shadow);
        MakePersistent(LBL_EMAIL_RESEND);
        DefineCnt(EMAIL_RESEND, EMAIL_NAG_X, (EMAIL_NAG_Y + EMAIL_RESEND_Y));
        _local2 = actor[EMAIL_RESEND];
        with (_local2) {
            addChild(actor[LBL_EMAIL_RESEND]);
            textLinkMakeClickable(getChildAt(0).parent);
            mouseChildren = False;
            mouse_enabled = True;
            buttonMode = True;
            useHandCursor = True;
            add_event_listener(MouseEvent.CLICK, ResendConfirmationEmail);
        };
        define_btn(EMAIL_NAG, texts[TXT_OK], ShowCityScreen, btn_classBasic,
                   ((IF_WIN_X + IF_WIN_WELCOME_X) + IF_WIN_X),
                   (IF_WIN_Y + EMAIL_NAG_Y));
        define_bunch(SCREEN_EMAIL_NAG, IF_WINDOW, LBL_WINDOW_TITLE,
                     LBL_EMAIL_NAG, EMAIL_NAG, IF_EXIT);
        DefineCnt(POPUP_INFO);
        _local2 = actor[POPUP_INFO];
        with (_local2) {
        };
        add(POPUP_INFO);
        add(IF_MAIN);
        add(IF_BUTTONS);
        if (param_obj["login"]){
            show_login_screen(None, True);
        } else {
            show_build_character_screen();
        };
    };

'''


def main():
    '''
        main function
         - program starting point
    '''
    global LOG

    LOG = setup_logging()

    init_vars()

    s = Session()
    configure(s)

    # response = s.login()


if __name__ == "__main__":
    main()


'''

def DefineImg(actor_id, url:String, predo_load=True, pos_x=0, pos_y=0,
              scale_x=1, scale_y=1, vis=True):
    var i:* = 0;
    var full_url:* = None;
    var LoaderCompleteLocal:* = None;
    var actor_id:* = actor_id;
    var url:* = url;
    var predo_load:Boolean = predo_load;
    var pos_x = pos_x;
    var pos_y = pos_y;
    var scale_x = scale_x;
    var scale_y = scale_y;
    var vis:Boolean = vis;
    LoaderCompleteLocal = function (evt:Event){
        actor[i].cacheAsBitmap = True;
    };
    i = actor_id;
    if (url.lower()[0: 4] == "http:"){
        full_url = url;
    } else {
        full_url = (img_url[img_url_index] + url);
    };
    actor[i] = new Loader();
    actor[i].contentLoaderInfo.add_event_listener(IOErrorEvent.IO_ERROR,
                                                  LoaderError);
    actor[i].contentLoaderInfo.add_event_listener(Event.COMPLETE,
                                                  LoaderComplete);
    actor[i].contentLoaderInfo.add_event_listener(Event.COMPLETE,
                                                  LoaderCompleteLocal);
    actorLoaded[i] = 0;
    actorURL[i] = full_url;
    var _local10 = actor[i];
    with (_local10) {
        tab_enabled = False;
        x = pos_x;
        y = pos_y;
        force_smoothing = True;
        allow_smoothing = True;
        smoothing = True;
        scaleX = scale_x;
        scaleY = scale_y;
        visible = Boolean(vis);
    };
    if (predo_load){
        load(i);
    };
}

def DefineClickArea(actor_id, imgActorID, fn:Function, pos_x, pos_y, size_x,
                    size_y, ovlActorID=0, hoverFn:Function=None,
                    outFn:Function=None, stayPut=False):
    var actor_id:* = actor_id;
    var imgActorID:* = imgActorID;
    var fn:* = fn;
    var pos_x:* = pos_x;
    var pos_y:* = pos_y;
    var size_x:* = size_x;
    var size_y:* = size_y;
    var ovlActorID = ovlActorID;
    var hoverFn:* = hoverFn;
    var outFn:* = outFn;
    var stayPut:Boolean = stayPut;
    var ClickAreaHover:* = function (evt:MouseEvent):
        if (imgActorID != C_EMPTY){
            add(imgActorID);
        };
        if (ovlActorID != C_EMPTY){
            visible_to_front(ovlActorID);
        };
        if (!stayPut){
            add(actor_id);
        };
        if ((hoverFn is Function)){
            hoverFn();
        };
    };
    var ClickAreaOut:* = function (evt:MouseEvent):
        remove(imgActorID);
        if ((outFn is Function)){
            outFn();
        };
    };
    actor[actor_id] = new MovieClip();
    var _local13 = actor[actor_id];
    with (_local13) {
        tab_enabled = False;
        x = pos_x;
        y = pos_y;
        graphics.beginFill(0xFF0000);
        graphics.drawRect(0, 0, size_x, size_y);
        alpha = ((C_SHOW_CA) ? 0.3 : 0);
        mouseChildren = False;
        mouse_enabled = True;
        if ((fn is Function)){
            add_event_listener(MouseEvent.MOUSE_OVER, ClickAreaHover);
            add_event_listener(MouseEvent.MOUSE_OUT, ClickAreaOut);
            add_event_listener(MouseEvent.CLICK, fn);
            useHandCursor = True;
            buttonMode = True;
        };
    };
}

def DefineFromClass(actor_id, imgClass:Class, pos_x=0, pos_y=0, txtManip=0,
                    txtType:String=""):
    var i:* = 0;
    var actor_id:* = actor_id;
    var imgClass:* = imgClass;
    var pos_x = pos_x;
    var pos_y = pos_y;
    var txtManip = txtManip;
    var txtType:String = txtType;
    var ManipTextField:* = function (field){
        var field:* = field;
        var _local3 = field;
        with (_local3) {
            embed_fonts = font_embedded;
            default_text_format = new TextFormat(game_font,
                     (default_text_format.size + size_mod),
                     default_text_format.color);
        };
    };
    i = actor_id;
    actor[i] = new (imgClass)();
    actorLoaded[i] = 2;
    var _local8 = actor[i];
    with (_local8) {
        x = pos_x;
        y = pos_y;
        allow_smoothing = True;
        force_smoothing = True;
        smoothing = True;
        visible = True;
    };
    if (txtManip == 1){
        ManipTextField(actor[i].getChildAt(0));
    } else {
        if (txtManip == 2){
            ManipTextField(actor[i].getChildAt(1));
        };
    };
}

def DefineCnt(actor_id, pos_x=0, pos_y=0, vis=True):
    var i:* = 0;
    var actor_id:* = actor_id;
    var pos_x = pos_x;
    var pos_y = pos_y;
    var vis:Boolean = vis;
    i = actor_id;
    actor[i] = new MovieClip();
    var _local6 = actor[i];
    with (_local6) {
        tab_enabled = False;
        x = pos_x;
        y = pos_y;
        visible = Boolean(vis);
        force_smoothing = True;
        allow_smoothing = True;
        smoothing = True;
    };
}

def textLinkMakeClickable(obj:Sprite){
}

def DefineSlider(actor_id, Ticks, pos_x, pos_y, fn:Function){
    var i:* = 0;
    var oldSliderVal:* = 0;
    var actor_id:* = actor_id;
    var Ticks:* = Ticks;
    var pos_x:* = pos_x;
    var pos_y:* = pos_y;
    var fn:* = fn;
    var SliderMove:* = function (evt:MouseEvent):
        var tmpX;
        var sliderVal;
        if (evt.buttonDown){
            if ((((evt.localX > 35)) and ((evt.localX < (45 + 198))))){
                tmpX = evt.localX;
                sliderVal = (int(((((tmpX - 40) / 198)
                             * (Ticks - 1)) + 0.5)) + 1);
                tmpX = (int((((sliderVal - 1) / (Ticks - 1)) * 198)) + 40);
                evt.target.getChildAt(1).x = (tmpX - 7);
                if (oldSliderVal != sliderVal){
                    fn(sliderVal);
                };
                oldSliderVal = sliderVal;
            };
        };
    };
    var ClickTick:* = function (evt:MouseEvent):
        var tmpX;
        var sliderVal;
        tmpX = (evt.stageX - actor[(actor_id + 1)].x);
        sliderVal = (int(((((tmpX - 40) / 198) * (Ticks - 1)) + 0.5)) + 1);
        tmpX = (int((((sliderVal - 1) / (Ticks - 1)) * 198)) + 40);
        actor[(actor_id + 1)].getChildAt(1).x = (tmpX - 7);
        if (oldSliderVal != sliderVal){
            fn(sliderVal);
        };
        oldSliderVal = sliderVal;
    };
    actorBitmap[actor_id] = Ticks;
    actorBitmap[(actor_id + 1)] = [fn];
    DefineFromClass((actor_id + 1), DragonSlider, pos_x, pos_y);
    define_bunch(actor_id, (actor_id + 1));
    var _local7 = actor[(actor_id + 1)];
    with (_local7) {
        add_event_listener(MouseEvent.MOUSE_DOWN, SliderMove);
        add_event_listener(MouseEvent.MOUSE_MOVE, SliderMove);
        buttonMode = True;
        useHandCursor = True;
    };
    i = 1;
    while (i <= Ticks) {
        DefineFromClass(((actor_id + 1) + i), SliderTick,
                        (((pos_x + 40) + int((198 * ((i - 1)
                         / (Ticks - 1))))) - 5), (pos_y - 10));
        _local7 = actor[((actor_id + 1) + i)];
        with (_local7) {
            add_event_listener(MouseEvent.MOUSE_DOWN, ClickTick);
            buttonMode = True;
            useHandCursor = True;
        };
        add_bunch(actor_id, ((actor_id + 1) + i));
        i = (i + 1);
    };
    fn(get_slider_value(actor_id));
}

def get_slider_value(actor_id){
    var tmpX;
    tmpX = (actor[(actor_id + 1)].getChildAt(1).x + 5);
    return ((int(((((tmpX - 40) / 198) * (actorBitmap[actor_id] - 1))
            + 0.5)) + 1));
}

def SetSliderValue(actor_id, value):
    var tmpX;
    var oldVal;
    oldVal = get_slider_value(actor_id);
    tmpX = (int((((value - 1) / (actorBitmap[actor_id] - 1)) * 198)) + 40);
    actor[(actor_id + 1)].getChildAt(1).x = (tmpX - 7);
    if (oldVal != value){
        var _local5 = actorBitmap[(actor_id + 1)];
        _local5[0](value);
    };
}

def MakePersistent(... _args):
    var i;
    var i_bunch;
    i = 0;
    while (i < _args.length) {
        if ((actor[_args[i]] is Array)){
            i_bunch = 0;
            while (i_bunch < actor[_args[i]].length) {
                MakePersistent(actor[_args[i]][i_bunch]);
                i_bunch++;
            };
            return;
        };
        actorPersistent[_args[i]] = True;
        i++;
    };
}

def MakeTemporary(... _args):
    var i;
    var i_bunch;
    i = 0;
    while (i < _args.length) {
        if ((actor[_args[i]] is Array)){
            i_bunch = 0;
            while (i_bunch < actor[_args[i]].length) {
                MakeTemporary(actor[_args[i]][i_bunch]);
                i_bunch++;
            };
            return;
        };
        actorPersistent[_args[i]] = False;
        i++;
    };
}

def EnableDragDrop(actor_id, handler:Function, ... _args):
    var old_x:* = 0;
    var old_y:* = 0;
    var i:* = 0;
    var i_bunch:* = 0;
    var MouseBtnDown:* = None;
    var dragResetTimer:* = None;
    var dragReset:* = None;
    var MouseBtnUp:* = None;
    var actor_id:* = actor_id;
    var handler:* = handler;
    var Targets:* = _args;
    MouseBtnDown = function (evt:MouseEvent):
        var topPosition;
        if (((dragDropProhibit) or (dragNotYet))){
            return;
        };
        topPosition = (evt.target.parent.numChildren - 1);
        evt.target.parent.setChildIndex(evt.target, topPosition);
        evt.target.startDrag();
        dragDropActive = True;
    };
    dragReset = function (evt:Event){
        dragNotYet = False;
        dragResetTimer.stop();
    };
    MouseBtnUp = function (evt:MouseEvent):
        var dropped:Boolean;
        var droppedOn;
        var i_bunch;
        if (!dragDropActive){
            return;
        };
        dropped = False;
        dragDropActive = False;
        dragNotYet = True;
        dragResetTimer.start();
        evt.target.stopDrag();
        if (evt.target.dropTarget is not None){
            i = 0;
            while (i < Targets.length) {
                if ((actor[Targets[i]] is Array)){
                    i_bunch = 0;
                    while (i_bunch < actor[Targets[i]].length) {
                        if (actor[actor[Targets[i]][i_bunch]] == evt.target
                                    .dropTarget.parent){
                            dropped = True;
                            droppedOn = actor[Targets[i]][i_bunch];
                            break;
                        };
                        i_bunch++;
                    };
                } else {
                    if (actor[Targets[i]] == evt.target.dropTarget.parent){
                        dropped = True;
                        droppedOn = Targets[i];
                        break;
                    };
                };
                i++;
            };
            if (Targets.length == 0){
                i = 0;
                while (i < actor.length) {
                    if ((actor[i] is DisplayObject)){
                        if ((((actor[i] == evt.target.dropTarget.parent))
                            or ((actor[i] == evt.target.dropTarget)))){
                            dropped = True;
                            droppedOn = i;
                            break;
                        };
                    };
                    i++;
                };
            };
            if (dropped){
                if (!handler(actor_id, droppedOn)){
                    evt.target.x = old_x;
                    evt.target.y = old_y;
                };
            } else {
                evt.target.x = old_x;
                evt.target.y = old_y;
            };
        } else {
            evt.target.x = old_x;
            evt.target.y = old_y;
        };
    };
    old_x = actor[actor_id].x;
    old_y = actor[actor_id].y;
    if ((actor[actor_id] is Array)){
        i_bunch = 0;
        while (i_bunch < actor[actor_id].length) {
            if ((((actor[actor[actor_id][i_bunch]] is MovieClip))
                or ((actor[actor[actor_id][i_bunch]] is Sprite)))){
                actor[actor[actor_id][i_bunch]].add_event_listener(
                                       MouseEvent.MOUSE_DOWN, MouseBtnDown);
                actor[actor[actor_id][i_bunch]].add_event_listener(
                                        MouseEvent.MOUSE_UP, MouseBtnUp);
            } else {
                trc(("Fehler: Drag & Drop nicht unterstützt für Actor "
                    + actor[actor_id][i_bunch]));
            };
            i_bunch = (i_bunch + 1);
        };
        return;
    };
    if ((((actor[actor_id] is MovieClip)) or ((actor[actor_id] is Sprite)))){
        actor[actor_id].add_event_listener(MouseEvent.MOUSE_DOWN, MouseBtnDown)
        actor[actor_id].add_event_listener(MouseEvent.MOUSE_UP, MouseBtnUp);
    } else {
        trc(("Fehler: Drag & Drop nicht unterstützt für Actor " + actor_id));
    };
    dragResetTimer = new Timer(500);
    dragResetTimer.add_event_listener(TimerEvent.TIMER, dragReset);
}

def SetCnt(cntID, ImgID=0, pos_x=0, pos_y=0, center=False):
    var i_bunch:* = 0;
    var CntImgLoaded:* = None;
    var cntID:* = cntID;
    var ImgID = ImgID;
    var pos_x = pos_x;
    var pos_y = pos_y;
    var center:Boolean = center;
    if (!(actor[ImgID] is Loader)){
        if (actorBitmap[cntID]){
            actor[cntID].removeChild(actorBitmap[cntID]);
            actorBitmap[cntID] = None;
        };
        return;
    };
    if ((actor[cntID] is Array)){
        i_bunch = 0;
        while (i_bunch < actor[cntID].length) {
            SetCnt(actor[cntID][i_bunch], ImgID);
            i_bunch = (i_bunch + 1);
        };
        return;
    };
    if (actorBitmap[cntID]){
        actor[cntID].removeChild(actorBitmap[cntID]);
        actorBitmap[cntID] = None;
    };
    if (ImgID != 0){
        if (actorLoaded[ImgID] == 2){
            if ((((((ImgID == ITM_EMPTY)) or ((ImgID == ITM_OFFS))))
                and ((actor[cntID].width == 0)))){
                var _local7 = actor[cntID];
                with (_local7) {
                    graphics.beginFill(0, 0);
                    graphics.drawRect(0, 0, 90, 90);
                };
            };
            if ((actor[ImgID].content is Bitmap)){
                actorBitmap[cntID] = new Bitmap();
                actorBitmap[cntID].bitmapData = actor[ImgID].content.bitmapData
                _local7 = actorBitmap[cntID];
                with (_local7) {
                    allow_smoothing = True;
                    force_smoothing = True;
                    smoothing = True;
                    x = (pos_x - ((center) ? (width / 2) : 0));
                    y = (pos_y - ((center) ? (height / 2) : 0));
                };
                actor[cntID].addChild(actorBitmap[cntID]);
            } else {
                actorBitmap[cntID] = new Bitmap();
                actorBitmap[cntID].bitmapData = BitmapData(actor[ImgID].width,
                                                           actor[ImgID].height,
                                                           True, 0);
                actorBitmap[cntID].bitmapData.draw(
                                           (actor[ImgID] as IBitmapDrawable));
                _local7 = actorBitmap[cntID];
                with (_local7) {
                    allow_smoothing = True;
                    force_smoothing = True;
                    smoothing = True;
                    x = (pos_x - ((center) ? (width / 2) : 0));
                    y = (pos_y - ((center) ? (height / 2) : 0));
                };
                actor[cntID].addChild(actorBitmap[cntID]);
            };
        } else {
            CntImgLoaded = function (evt:Event):
                actorLoaded[ImgID] = 2;
                SetCnt(cntID, ImgID, pos_x, pos_y, center);
            };
            actor[ImgID].contentLoaderInfo.add_event_listener(
                                              Event.COMPLETE, CntImgLoaded);
            if (actorLoaded[ImgID] == 0){
                load(ImgID);
            };
        };
    };
}


def AddBMO(bunch_id, offset){
    var i;
    i = 0;
    while (i < actor[bunch_id].length) {
        if ((actor[actor[bunch_id][i]] is Array)){
            AddBMO(actor[bunch_id][i], offset);
        } else {
            add((actor[bunch_id][i] + offset));
        };
        i++;
    };
}

def RemoveIllegalChars(inpStr:String):String{
    var LegalChars:String;
    var i;
    var j;
    var thisChar:String;
    var outStr:String;
    var pass:Boolean;
    if (texts[TXT_LEGALCHARS] == ""){
        return (inpStr);
    };
    LegalChars = texts[TXT_LEGALCHARS];
    thisChar = "";
    outStr = "";
    pass = False;
    i = 0;
    while (i < inpStr.length) {
        thisChar = inpStr[i: 1]
        pass = False;
        j = 0;
        while (j < LegalChars.length) {
            if ((((thisChar.charCodeAt() == 13))
                or ((thisChar.charCodeAt() == 10)))){
                pass = True;
                break;
            };
            if (thisChar == LegalChars[j: 1]){
                pass = True;
                break;
            };
            j++;
        };
        if (pass){
            outStr = (outStr + thisChar);
        };
        i++;
    };
    return (outStr);
}

def SemiStrip(inpStr:String):String{
    var i;
    var outStr:String;
    outStr = "";
    i = 0;
    while (i < inpStr.length) {
        if (inpStr[i] == chr(13)){
            outStr = (outStr + "#");
        } else {
            if (inpStr[i] == ";"){
                outStr = (outStr + ",");
            } else {
                if (inpStr[i] == "§"){
                    outStr = (outStr + "$");
                } else {
                    outStr = (outStr + inpStr[i]);
                };
            };
        };
        i++;
    };
    return (outStr);
}

def resolve_breaks(inpStr:String):String{
    var i;
    var outStr:String;
    outStr = "";
    i = 0;
    while (i < inpStr.length) {
        if (inpStr[i] == "#"){
            outStr = (outStr + chr(13));
        } else {
            outStr = (outStr + inpStr[i]);
        };
        i++;
    };
    return (outStr);
}

def PostBtnHandler(evt:MouseEvent=None, actor_id=0){
    var par:* = None;
    var GuildMsg:* = False;
    var thisRecipient:* = None;
    var recipients:* = None;
    var evt:* = evt;
    var actor_id = actor_id;
    remove(LBL['ERROR']);
    GuildMsg = False;
    if (evt){
        actor_id = get_actor_id(evt.target);
    };
    thisRecipient = "";
    recipients = list();
    Switch (actor_id){
        if case(POST_SEND:
            last_message_target = "";
            if (!on_stage(INP_POST_ADDRESS)){
                GuildMsg = True;
            } else {
                last_message_target = actor[INP_POST_ADDRESS]
                    .getChildAt(1).text;
            };
            if (actor[INP_POST_TEXT].getChildAt(1).text.find(
                    actor[INP['LOGIN_PASSWORD']].getChildAt(1).text) != -1){
                error_message(((texts[TXT_ERROR_COMPROMISED_ACCOUNT])
                              ? texts[TXT_ERROR_COMPROMISED_ACCOUNT]
                              : "You should never give your password away."));
            } else {
                if (actor[INP_POST_ADDRESS].getChildAt(1).text == texts[
                    TXT_EMPFAENGER]){
                    error_message(texts[TXT_ERROR_RECIPIENT_NOT_FOUND]);
                } else {
                    thisRecipient = actor[INP_POST_ADDRESS].getChildAt(1).text;
                    if (thisRecipient.find(",") != -1){
                        recipients = thisRecipient.split(",");
                    } else {
                        recipients = [thisRecipient];
                    };
                    while (recipients.length > 0) {
                        thisRecipient = recipients.shift();
                        while (thisRecipient[0: 1] == " ") {
                            thisRecipient = thisRecipient[1:]
                        };
                        while (thisRecipient[
                               (thisRecipient.length - 1): 1] == " ") {
                            thisRecipient = thisRecipient[
                                0: (thisRecipient.length - 1)]
                        };
                        send_action(((GuildMsg)
                                    ? ACT_POST_SEND_GUILD
                                    : ACT_POST_SEND),
                            RemoveIllegalChars(SemiStrip(thisRecipient)),
                            RemoveIllegalChars(SemiStrip(
                               actor[INP_POST_SUBJECT].getChildAt(1).text
                               .split("/").join(""))),
                            RemoveIllegalChars(SemiStrip(actor[INP_POST_TEXT]
                                               .getChildAt(1).text)));
                    };
                };
            };
            break;
        if case(POST_UP:
            if (post_scroll > 1){
                oldSel = -1;
                post_scroll = (post_scroll - 15);
                if (post_scroll < 1){
                    post_scroll = 1;
                };
                send_action(ACT_SCREEN_POST, post_scroll);
            };
            break;
        if case(POST_DOWN:
            if (post_scrollDown){
                post_scroll = (post_scroll + 15);
                post_scrollDown = False;
                if (post_scroll > 86){
                    post_scroll = 86;
                };
                if (post_scroll < 1){
                    post_scroll = 1;
                };
                send_action(ACT_SCREEN_POST, post_scroll);
            };
            break;
        if case(POST_READ:
            if (text_dir == "right"){
                MakeRightTextArea(INP_POST_ADDRESS, 1);
                MakeRightTextArea(INP_POST_SUBJECT, 1);
                MakeRightTextArea(INP_POST_TEXT, 1);
            };
            if (post_sel > 0){
                send_action(ACT_POST_READ, ((post_sel + post_scroll) - 1));
            };
            break;
        if case(POST_READ_NEXT:
            post_sel++;
            if (post_sel > 15){
                post_scroll = (post_scroll + 1);
                post_sel = 15;
            };
            send_action(ACT_POST_READ, ((post_sel + post_scroll) - 1));
            break;
        if case(POST_READ_PREV:
            post_sel--;
            if (post_sel < 1){
                post_scroll = (post_scroll - 1);
                post_sel = 1;
            };
            send_action(ACT_POST_READ, ((post_sel + post_scroll) - 1));
            break;
        if case(POST_DELETE:
        if case(POST_DELETEREAD:
            if (post_sel > 0){
                send_action(ACT_POST_DELETE, ((post_sel + post_scroll) - 1));
                if (int(savegame[SG_MSG_COUNT]) > 0){
                    savegame[SG_MSG_COUNT] = str((int(
                                                 savegame[SG_MSG_COUNT]) - 1));
                };
            };
            break;
        if case(POST_FLUSH:
            var _local4 = actor[LBL_WINDOW_TITLE];
            with (_local4) {
                text = texts[TXT_POST_FLUSH_TEXT];
                x = ((IF_WIN_X + IF_WIN_WELCOME_X) - int((text_width / 2)));
            };
            add(POST_FLUSHMSG);
            break;
        if case(POST_FLUSH_CANCEL:
            remove(POST_FLUSHMSG);
            add(IF_EXIT);
            break;
        if case(POST_FLUSH_OK:
            remove(POST_FLUSHMSG);
            send_action(ACT_POST_DELETE, -1);
            break;
        if case(POST_PROFILE:
            if (reply_address != ""){
                sel_name = reply_address;
                send_action(ACT['REQUEST']['CHAR'], reply_address);
            };
            break;
        if case(POST_WRITE:
            actor[INP_POST_ADDRESS].getChildAt(1).type = TextFieldType.INPUT;
            actor[INP_POST_SUBJECT].getChildAt(1).type = TextFieldType.INPUT;
            actor[INP_POST_TEXT].getChildAt(1).type = TextFieldType.INPUT;
            remove(POST_LIST);
            add(POST_WRITE);
            if (gilde != ""){
                if (text_dir == "right"){
                    actor[POST_GUILD].x = (POST_INP_X + 5);
                } else {
                    actor[POST_GUILD].x = (((POST_INP_X
                        + actor[INP_POST_ADDRESS].width)
                            - actor[POST_GUILD].width) - 5);
                };
                show(POST_GUILD);
            } else {
                hide(POST_GUILD);
            };
            actor[INP_POST_ADDRESS].getChildAt(1).text = texts[TXT_EMPFAENGER];
            actor[INP_POST_SUBJECT].getChildAt(1).text = texts[TXT_BETREFF];
            actor[INP_POST_TEXT].getChildAt(1).text = texts[TXT_NACHRICHT];
            if (text_dir == "right"){
                MakeRightTextArea(INP_POST_ADDRESS, 1);
                MakeRightTextArea(INP_POST_SUBJECT, 1);
                MakeRightTextArea(INP_POST_TEXT, 1);
            };
            break;
        if case(POST_CANCEL:
        if case(POST_RETURN:
            if (PostReturnToPlayer != ""){
                send_action(ACT['REQUEST']['CHAR'], PostReturnToPlayer);
            } else {
                remove(POST_WRITE);
                remove(POST_READ);
                remove(POST_ACCEPT);
                remove(POST_REPLY);
                add(POST_LIST);
            };
            break;
        if case(POST_ACCEPT:
            if (invitegilden_id > 0){
                send_action(ACT_GUILD_JOIN,
                            actor[INP['NAME']].getChildAt(1).text,
                            invitegilden_id,
                            MD5(actor[INP['LOGIN_PASSWORD']]
                                .getChildAt(1).text));
            };
            break;
        if case(POST_REPLY:
            if (reply_address != ""){
                actor[INP_POST_ADDRESS]
                    .getChildAt(1).type = TextFieldType.INPUT;
                actor[INP_POST_SUBJECT]
                    .getChildAt(1).type = TextFieldType.INPUT;
                actor[INP_POST_TEXT].getChildAt(1).type = TextFieldType.INPUT;
                remove(POST_READ);
                remove(POST_REPLY);
                remove(POST_FORWARD);
                if (gilde != ""){
                    if (text_dir == "right"){
                        actor[POST_GUILD].x = (POST_INP_X + 5);
                    } else {
                        actor[POST_GUILD].x = (((POST_INP_X
                                   + actor[INP_POST_ADDRESS].width)
                                    - actor[POST_GUILD].width) - 5);
                    };
                    show(POST_GUILD);
                } else {
                    hide(POST_GUILD);
                };
                add(POST_WRITE);
                show(POST_GUILD);
                actor[INP_POST_ADDRESS].getChildAt(1).text = reply_address;
                actor[INP_POST_TEXT].getChildAt(1).text = texts[TXT_NACHRICHT];
                if (text_dir == "right"){
                    if (actor[INP_POST_SUBJECT].getChildAt(
                            1).text.find(texts[TXT_RE]) == -1){
                        actor[INP_POST_SUBJECT].getChildAt(
                           1).text = ((reply_subject + " ") + texts[TXT_RE]);
                    };
                    MakeRightTextArea(INP_POST_ADDRESS, 1);
                    MakeRightTextArea(INP_POST_SUBJECT, 1);
                    MakeRightTextArea(INP_POST_TEXT, 1);
                } else {
                    if (actor[INP_POST_SUBJECT].getChildAt(
                            1).text.find(texts[TXT_RE]) == -1){
                        actor[INP_POST_SUBJECT].getChildAt(1)
                        .text = ((texts[TXT_RE] + " ") + reply_subject);
                    };
                };
            };
            break;
        if case(POST_FORWARD:
            if (forward_text != ""){
                actor[INP_POST_ADDRESS].getChildAt(1)
                    .type = TextFieldType.INPUT;
                actor[INP_POST_SUBJECT].getChildAt(1)
                    .type = TextFieldType.INPUT;
                actor[INP_POST_TEXT].getChildAt(1).type = TextFieldType.INPUT;
                remove(POST_READ);
                remove(POST_REPLY);
                remove(POST_FORWARD);
                if (gilde != ""){
                    if (text_dir == "right"){
                        actor[POST_GUILD].x = (POST_INP_X + 5);
                    } else {
                        actor[POST_GUILD].x = (((POST_INP_X
                                   + actor[INP_POST_ADDRESS].width)
                                    - actor[POST_GUILD].width) - 5);
                    };
                    show(POST_GUILD);
                } else {
                    hide(POST_GUILD);
                };
                add(POST_WRITE);
                show(POST_GUILD);
                stage.focus = actor[INP_POST_ADDRESS].getChildAt(1);
                actor[INP_POST_ADDRESS].getChildAt(1).text = "";
                actor[INP_POST_TEXT].getChildAt(1)
                    .text = texts[(TXT_POST_FORWARD + 2)].split("%1")
                    .join(reply_address).split("%2").join(forward_text)
                    .split("#").join(chr(13));
                if (text_dir == "right"){
                    if (actor[INP_POST_SUBJECT].getChildAt(1).text
                            .find(texts[(TXT_POST_FORWARD + 1)]) == -1){
                        actor[INP_POST_SUBJECT].getChildAt(1)
                            .text = ((reply_subject + " ")
                                     + texts[(TXT_POST_FORWARD + 1)]);
                    };
                    MakeRightTextArea(INP_POST_ADDRESS, 1);
                    MakeRightTextArea(INP_POST_SUBJECT, 1);
                    MakeRightTextArea(INP_POST_TEXT, 1);
                } else {
                    if (actor[INP_POST_SUBJECT].getChildAt(1).text
                            .find(texts[(TXT_POST_FORWARD + 1)]) == -1){
                        actor[INP_POST_SUBJECT].getChildAt(1)
                            .text = ((texts[(TXT_POST_FORWARD + 1)] + " ")
                                     + reply_subject);
                    };
                };
            };
            break;
        if case(POST_VIEWFIGHT:
            par = tmp_battle_info.split("#");
            post_fight_mode = True;
            show_fight_screen(par[0].split("/"), par[1].split("/"),
                              (par[6] == "1"), par[2].split("/"),
                              (par[5] == "2"),
                              ((par[3] + "/") + par[4]).split("/"),
                              int(par[7]), int(par[8]), (par[5] == "3"), True);
            break;
        default:
            if (post_sel > 0){
                send_action(ACT_POST_READ, ((post_sel + post_scroll) - 1));
            };
    };
}

def AlbumClear(){
    var i;
    i = 0;
    while (i < 4) {
        hide((ALBUM_MONSTER_FRAME + i));
        SetCnt((ALBUM_MONSTER + i), C_EMPTY);
        SetCnt((ALBUM_WEAPON_1 + i), C_EMPTY);
        SetCnt((ALBUM_WEAPON_2 + i), C_EMPTY);
        SetCnt((ALBUM_WEAPON_3 + i), C_EMPTY);
        SetCnt((ALBUM_WEAPON_4 + i), C_EMPTY);
        SetCnt((ALBUM_WEAPON_5 + i), C_EMPTY);
        actor[(ALBUM_WEAPON_1 + i)].alpha = 1;
        actor[(ALBUM_WEAPON_2 + i)].alpha = 1;
        actor[(ALBUM_WEAPON_3 + i)].alpha = 1;
        actor[(ALBUM_WEAPON_4 + i)].alpha = 1;
        actor[(ALBUM_WEAPON_5 + i)].alpha = 1;
        SetCnt((ALBUM_WEAPON_EPIC + i), C_EMPTY);
        actor[(LBL_ALBUM_HEADING + i)].text = "";
        actor[(LBL_ALBUM_HINT + i)].text = "";
        i++;
    };
}

def GetAdvent(){
    var tmpNow:Date;
    var tmpAdventEnd:Date;
    var tmpDate:Date;
    var advent;
    Switch (lang_code){
        if case("de":
            break;
        default:
            return (0);
    };
    tmpNow = new Date();
    tmpAdventEnd = new Date(tmpNow.getFullYear(), 11, 27);
    tmpDate = new Date(tmpNow.getFullYear(), 11, 24);
    while (tmpDate.getDay() != 0) {
        tmpDate.setDate((tmpDate.getDate() - 1));
    };
    if (tmpNow.getTime() < tmpAdventEnd.getTime()){
        advent = 4;
        while (advent >= 1) {
            trace("Advent", advent, tmpNow.tostr());
            if (tmpNow.getTime() >= tmpDate.getTime()){
                return (advent);
            };
            tmpDate.setDate((tmpDate.getDate() - 7));
            advent--;
        };
    };
    return (0);
}

def RefreshTimeBar(OfferTime=0){
    var tmpTime:* = NaN;
    var tmpText:* = None;
    var OfferTime = OfferTime;
    var tmpX:* = 0;
    if (OfferTime < 0){
        if ((Number(savegame[SG_TIMEBAR]) + OfferTime) < 0){
            OfferTime = 0;
        };
    };
    var _local3 = actor[TIMEBAR_FILL];
    with (_local3) {
        if (OfferTime < 0){
            tmpX = (((Number(savegame[SG_TIMEBAR]) + OfferTime) / 6000) * 555);
        } else {
            tmpX = ((Number(savegame[SG_TIMEBAR]) / 6000) * 555);
        };
        width = int(tmpX);
        tmpX = int((x + width));
    };
    _local3 = actor[TIMEBAR_FILL];
    with (_local3) {
        if (OfferTime < 0){
            width = int(((-(OfferTime) / 6000) * 555));
            x = tmpX;
        } else {
            width = int(((OfferTime / 6000) * 555));
            x = tmpX;
        };
    };
    tmpTime = int(savegame[SG_TIMEBAR]);
    tmpText = "";
    if (tmpTime > (60 * 60)){
        tmpText = (tmpText + (str(int((tmpTime / (60 * 60)))) + ":"));
        tmpTime = (tmpTime % (60 * 60));
        if ((tmpTime / 60) < 10){
            tmpText = (tmpText + "0");
        };
    };
    tmpText = (tmpText + (str(int((tmpTime / 60))) + ":"));
    tmpTime = (tmpTime % 60);
    if (tmpTime < 10){
        tmpText = (tmpText + "0");
    };
    tmpText = (tmpText + str(int(tmpTime)));
    if (text_dir == "right"){
        tmpText = ((tmpText + " :") + texts[TXT_AUSDAUER]);
    } else {
        tmpText = ((texts[TXT_AUSDAUER] + ": ") + tmpText);
    };
    if (OfferTime != 0){
        tmpText = (tmpText + (" (" + (((OfferTime > 0)) ? "+" : "-")));
        tmpText = (tmpText + (str(int((math.abs(OfferTime) / 60))) + ":"));
        if ((math.abs(OfferTime) % 60) < 10){
            tmpText = (tmpText + "0");
        };
        tmpText = (tmpText + (str(int((math.abs(OfferTime) % 60))) + ")"));
    };
    tmpTime = Number(savegame[SG_TIMEBAR]);
    if (text_dir == "right"){
        tmpText = (" :" + texts[TXT_AUSDAUER]);
        tmpText = (str(Number((tmpTime / 60)).toFixed(1))
                   .split(".0")[0] + tmpText);
    } else {
        tmpText = (texts[TXT_AUSDAUER] + ": ");
        tmpText = (tmpText + str(Number((tmpTime / 60)).toFixed(1))
                   .split(".0")[0]);
    };
    if (OfferTime != 0){
        if (text_dir == "right"){
            tmpText = (((((OfferTime > 0)) ? "+" : "-") + ") ") + tmpText);
            tmpText = (("(" + str(Number((math.abs(OfferTime) / 60))
                       .toFixed(1)).split(".0")[0]) + tmpText);
        } else {
            tmpText = (tmpText + (" (" + (((OfferTime > 0)) ? "+" : "-")));
            tmpText = (tmpText + (str(Number((math.abs(OfferTime) / 60))
                       .toFixed(1)).split(".0")[0] + ")"));
        };
    };
    _local3 = actor[LBL_TIMEBAR_TEXT];
    with (_local3) {
        text = tmpText;
        x = int((TIMEBAR_LABEL_X - (text_width / 2)));
    };
}

def try_show_tv(evt:Event=None){
    var evt:* = evt;
    if (tvTest){
        tv_status_dest = 1;
        tv_timer.start();
        tvTest = False;
    } else {
        if (((((!((tv_function_name == ""))) and (!(disable_tv))))
                and (!(prevent_tv)))){
            if (!evt){
                tv_poll_timer.start();
                tv_poll_timer.delay = tv_poll_normal;
            } else {
                if (((!(on_stage(TAVERNE_BG)))
                        and (!(on_stage(QUESTBAR_BG))))){
                    tv_poll_timer.stop();
                    return;
                };
            };
            trc((("Calling TV function \"" + tv_function_name)
                + "\" with parameter \"requesttv\"!"));
            try {
                tv_return_value = ExternalInterface.call(tv_function_name,
                     "requesttv", (((((savegame[SG['PLAYER_ID']] + "_")
                   + savegame[SG_PAYMENT_ID]) + "_") + server_id) + "_1"),
                    savegame[SG_GENDER], 0);
            } catch(e:Error) {
                trc(("There was an error: " + e.message));
                tv_poll_timer.delay = tv_poll_long;
            };
            trc(("Return value is " + str(tv_return_value)));
            if (tv_return_value > 0){
                tv_status_dest = 1;
                tv_poll_timer.delay = tv_poll_long;
            } else {
                tv_status_dest = 0;
                if (tv_return_value == -2){
                    tv_poll_timer.stop();
                } else {
                    if (tv_return_value == -1){
                        tv_poll_timer.delay = tv_poll_long;
                    } else {
                        tv_poll_timer.delay = tv_poll_normal;
                    };
                };
            };
            if (tv_status_dest != tv_status){
                tv_timer.start();
            };
        } else {
            if (((!(disable_tv)) and (!(prevent_tv)))){
                trc("Notice: No TV function set!");
            };
        };
    };
}

def arabize(actor_id){
    var i;
    var ii;
    var lines:Array;
    var thisStr:String;
    var nextStr:String;
    var dontCrash;
    lines = list();
    dontCrash = 0;
    if (text_dir != "right"){
        return;
    };
    actor[actor_id].width = (actor[actor_id].width - 5);
    i = 0;
    while (i < actor[actor_id].numLines) {
        lines.append(actor[actor_id].getLineText(i));
        i++;
    };
    actor[actor_id].width = (actor[actor_id].width + 5);
    dontCrash = 0;
    i = 0;
    while (i < lines.length) {
        while (((!((lines[i][-1:] == " "))) and ((lines[i].length > 0)))) {
            if (lines[i].length <= 1){
                break;
            };
            if ((((i == (lines.length - 1))) and ((lines[i].length > 0)))){
                lines.append(" ");
            };
            lines[(i + 1)] = (lines[i][-1:] + lines[(i + 1)]);
            lines[i] = lines[i][0: (lines[i].length - 1)]
            dontCrash++;
            if (dontCrash > 3000){
                break;
            };
        };
        i++;
    };
    actor[actor_id].text = "";
    i = 0;
    while (i < lines.length) {
        actor[actor_id].text = ((lines[i] + chr(13)) + actor[actor_id].text);
        i++;
    };
}

def GetSpendAmount():String{
    var amount;
    amount = 1;
    if (int(savegame[SG_LEVEL]) >= 120){
        amount = 100;
    } else {
        if (int(savegame[SG_LEVEL]) >= 100){
            amount = 50;
        } else {
            if (int(savegame[SG_LEVEL]) >= 50){
                amount = 10;
            } else {
                if (int(savegame[SG_LEVEL]) >= 25){
                    amount = 5;
                };
            };
        };
    };
    return (str(amount));
}

def add_suggest_names(addArray){
    var i;
    if (!(addArray is Array)){
        addArray = [addArray];
    };
    i = 0;
    while (i < addArray.length) {
        if (suggestNames.find(addArray[i]) == -1){
            suggestNames.append(addArray[i]);
        };
        i++;
    };
    i = 0;
    while (i < suggestNames.length) {
        if (suggestNames[i].lower() == actor[INP['NAME']].getChildAt(1)
                .text.lower()){
            suggestNames.splice(i, 1);
            i--;
        };
        i++;
    };
}

def get_actor_id(actorObj:Object, iStart=0, iEnde=-1){
    var i;
    var res;
    res = C_EMPTY;
    i = iStart;
    while (i <= ((iEnde)==-1) ? (actor.length - 1) : iEnde) {
        if (actorObj == actor[i]){
            res = i;
            break;
        };
        i++;
    };
    return (res);
}

def GetActorName(actor_id=0):String{
    var loader:* = None;
    var actor_id = actor_id;
    loader = new URLLoader();
    if (!(actorName is Array)){
        var ConstFileLoaded:* = function (evt:Event):
            var str_data:String;
            var constName:String;
            var i;
            var c;
            var tmp_str:String;
            str_data = loader.data;
            constName = "";
            var equals:Boolean;
            tmp_str = "";
            var last_index;
            i = 0;
            while (i < (str_data.length - 1)) {
                c = str_data.charCodeAt(i);
                Switch (c){
                    if case(10:
                    if case(13:
                        if (constName != ""){
                            actorName[int(tmp_str[1:])] = constName;
                        };
                        constName = "";
                        tmp_str = "";
                        break;
                    if case(61:
                        if (tmp_str[0: 14].lower() == "_global const "){
                            constName = tmp_str[14] (tmp_str.length - 15)]
                            tmp_str = "";
                        };
                        break;
                    default:
                        tmp_str = (tmp_str + str_data[i]);
                };
                i++;
            };
            pending_debug_file = False;
            loader_complete(evt);
        };
        actorName = list();
        var _local3 = loader;
        with (_local3) {
            data_format = URLLoaderdata_format.TEXT;
            add_event_listener(Event.COMPLETE, ConstFileLoaded);
            load(new URLRequest("constants.as"));
        };
        pendingdo_loaders = (pendingdo_loaders + 1);
        pending_debug_file = True;
    };
    return (actorName[actor_id]);
}

def crestMoveFn(evt:TimerEvent){
    if (actor[GILDE_CREST].y > crestMoveDest){
        actor[GILDE_CREST].y = (actor[GILDE_CREST].y - 5);
    } else {
        if (actor[GILDE_CREST].y < crestMoveDest){
            actor[GILDE_CREST].y = (actor[GILDE_CREST].y + 5);
        } else {
            crestMoveTimer.stop();
        };
    };
}

def getRandomCrest(){
    var i;
    var result:Array;
    var guildChecksum:* = 0;
    result = list();
    i = 0;
    while (i < crestElementPos.length) {
        result.append(int((random.random() * crestElementPos[i][4])));
        i++;
    };
    return (result);
}

def set_default_crest(){
    var i:* = 0;
    var lastResult:* = 0;
    var GuildRandom:* = function (val){
        var result;
        result = math.abs(((last_guild_data[0] + lastResult) % val));
        lastResult = result;
        return (result);
    };
    lastResult = 0;
    crest = list();
    i = 0;
    while (i < crestElementPos.length) {
        crest.append(int(GuildRandom(crestElementPos[i][4])));
        i = (i + 1);
    };
    i = 0;
    while (i < crestColor.length) {
        crestColor[i] = GuildRandom(heraldicColors.length);
        i = (i + 1);
    };
    loadCrest();
}

def old_crest_str():String{
    var result:* = None;
    var i:* = 0;
    var dec2hex:* = function (d):String{
        var c:Array;
        var l;
        var r;
        c = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "A", "B", "C",
            "D", "E", "F"];
        if (d > 0xFF){
            d = 0xFF;
        };
        l = (d / 16);
        r = (d % 16);
        return ((c[l] + c[r]));
    };
    result = "";
    i = 0;
    while (i < crest.length) {
        result = (result + dec2hex(crest[i]));
        i = (i + 1);
    };
    i = 0;
    while (i < crestColor.length) {
        result = (result + dec2hex(crestColor[i]));
        i = (i + 1);
    };
    return (result);
}

def set_crest_str(str:String){
    var i;
    var hex:String;
    var val;
    i = 0;
    while (i < crest.length) {
        hex = str[0: 2]
        str = str[2: 0]
        val = int(("0x" + hex));
        if (val < 0){
            val = 0;
        };
        if (val >= crestElementPos[i][4]){
            val = 0;
        };
        crest[i] = val;
        i++;
    };
    i = 0;
    while (i < crestColor.length) {
        hex = str[0: 2]
        str = str[2:]
        val = int(("0x" + hex));
        if (val < 0){
            val = 0;
        };
        if (val >= heraldicColors.length){
            val = 0;
        };
        crestColor[i] = val;
        i++;
    };
    loadCrest();
}

def loadCrest(){
    var i:* = 0;
    var newLoad:* = False;
    var url:* = None;
    var localActorID:* = 0;
    var tmpFltFigure:* = None;
    var tmpFltShield:* = None;
    var tmpFlt:* = None;
    tmpFltFigure = new ColorMatrixFilter([heraldicColors[crestColor[3]][0], 0,
                                         0, 0, 0,
                                         heraldicColors[crestColor[3]][1], 0,
                                         0, 0, 0,
                                         heraldicColors[crestColor[3]][2],
                                         0, 0, 0, 0, 0, 0, 0, 1, 0]);
    tmpFltShield = new ColorMatrixFilter([0, heraldicColors[crestColor[1]][0],
                                         heraldicColors[crestColor[2]][0],
                                         0, 0, 0,
                                         heraldicColors[crestColor[1]][1],
                                         heraldicColors[crestColor[2]][1],
                                         0, 0, 0,
                                         heraldicColors[crestColor[1]][2],
                                         heraldicColors[crestColor[2]][2],
                                         0, 0, 0, 0, 0, 1, 0]);
    i = 1;
    while (i < 4) {
        tmpFlt = new ColorMatrixFilter([0, heraldicColors[crestColor[i]][0],
                                       0, 0, 0, 0,
                                       heraldicColors[crestColor[i]][1], 0, 0,
                                       0, 0, heraldicColors[crestColor[i]][2],
                                       0, 0, 0, 0, 0, 0, 1, 0]);
        actor[(GILDE_CREST_COLOR_FILLIN + i)].filters = [tmpFlt];
        enable_popup((GILDE_CREST_COLOR + i),
                     texts[(TXT_CREST_TINCTUREBOXES + i)].split("%1")
                     .join(texts[(TXT_CREST_TINCTURES + crestColor[i])]));
        i = (i + 1);
    };
    i = 0;
    while (i < crestElementPos.length) {
        localActorID = (GILDE_CREST + i);
        url = (((((img_url[img_url_index]
               + "res/gfx/scr/gilde/crest/tiles/crest_") + str((i + 1))) + "_")
                + str((crest[i] + 1))) + ".png");
        newLoad = !((actorURL[localActorID] == url));
        actorURL[localActorID] = url;
        if (newLoad){
            actorLoaded[localActorID] = 0;
            load(localActorID);
        };
        if (i == 2){
            url = (((((img_url[img_url_index]
                   + "res/gfx/scr/gilde/crest/tiles/crest_")
                    + str((i + 1))) + "_") + str((crest[i] + 1)))
                        + "_color.png");
            newLoad = !((actorURL[GILDE_CREST_SHIELDCOLOR] == url));
            actorURL[GILDE_CREST_SHIELDCOLOR] = url;
            if (newLoad){
                actorLoaded[GILDE_CREST_SHIELDCOLOR] = 0;
                load(GILDE_CREST_SHIELDCOLOR);
            };
            actor[GILDE_CREST_SHIELDCOLOR].filters = [tmpFltShield];
        };
        if (i == 3){
            var _local2 = actor[LBL_GILDE_CREST_INSCRIPTION];
            with (_local2) {
                y = 210;
                Switch ((crest[i] + 1)){
                    if case(7:
                    if case(1:
                    if case(4:
                    if case(5:
                    if case(8:
                    if case(9:
                        y = (y - 2);
                        break;
                    if case(3:
                    if case(6:
                        y = (y - 1);
                        break;
                    if case(2:
                    if case(10:
                    if case(11:
                    if case(12:
                        break;
                };
            };
        };
        if (i == 6){
            if (selecterCrestElement == i){
                actor[(GILDE_CREST + i)].filters = [tmpFltFigure,
                    Filter_CrestSelected];
            } else {
                actor[(GILDE_CREST + i)].filters = [tmpFltFigure];
            };
        } else {
            if (selecterCrestElement == i){
                actor[(GILDE_CREST + i)].filters = [Filter_CrestSelected];
            } else {
                actor[(GILDE_CREST + i)].filters = [];
            };
        };
        i = (i + 1);
    };
    if (selecterCrestElement >= 0){
        actor[LBL_GILDE_CREST_ELEMENT].text = texts[(TXT_CREST_ELEMENT
                 + selecterCrestElement)].split("%1")
                .join(str((crest[selecterCrestElement] + 1)))
                .split("%2")
                .join(str(crestElementPos[selecterCrestElement][4]));
        actor[LBL_GILDE_CREST_ELEMENT].x = ((GILDE_GEBAEUDE_X + 120)
                        - (actor[LBL_GILDE_CREST_ELEMENT].text_width / 2));
    };
}

def clickchat_line(evt){
    var lineText:String;
    var chatAuthor:*;
    if ((evt is MouseEvent)){
        lineText = evt.target.text;
    } else {
        lineText = evt;
    };
    if (crestSuggestion[lineText]){
        remove(GILDE_GEBAEUDE);
        add(GILDE_CREST);
        if (actor[GILDE_CREST].y == GILDE_GEBAEUDE_Y){
            set_alpha(GILDE_CREST_CONTROLS, 1);
            add(GILDE_CREST_CONTROLS);
        } else {
            selecterCrestElement = -1;
        };
        if (my_own_rank == 1){
            crestSuggested = True;
            set_btn_text(GILDE_CREST_OK, texts[TXT_CREST_APPLY]);
        } else {
            crestSuggested = False;
            set_btn_text(GILDE_CREST_OK, texts[TXT_CREST_SUGGEST]);
        };
        set_crest_str(crestSuggestion[lineText]);
        return;
    };
    chatAuthor = lineText[6:]
    if (chatAuthor.find(":") != -1){
        chatAuthor = chatAuthor[0: chatAuthor.find(":")]
        if (chatAuthor.length <= 20){
            if (chatAuthor.find(" > ") == -1){
                if (actor[INP_GILDE_CHAT].getChildAt(0).text == ""){
                    actor[INP_GILDE_CHAT].getChildAt(0).text = (("/w "
                                + chatAuthor.split(" ").join("#")) + " ");
                };
                actor[INP_GILDE_CHAT].getChildAt(0).setSelection(
                     actor[INP_GILDE_CHAT].getChildAt(0).text.length,
                     actor[INP_GILDE_CHAT].getChildAt(0).text.length);
            };
        };
    };
    stage.focus = actor[INP_GILDE_CHAT].getChildAt(0);
}

def ArbeitenSliderChange(value):
    var txtWorkDur:String;
    if (texts[TXT_ARBEIT_TEXT3] == ""){
        txtWorkDur = texts[TXT_ARBEIT_TEXT2].split("%hours")
            .join(str(value)).split("%reward")
            .join(Geld((value * stundenlohn)));
        if (texts[TXT_WORK_FINISH]){
            actor[LBL_SCR_ARBEITEN_TEXT2].text = texts[TXT_WORK_FINISH]
            .split("%1").join(txtWorkDur).split("%2")
            .join(time_str((int((game_time.getTime() / 1000))
                  + (((value + 1) * 60) * 60)), True));
        } else {
            actor[LBL_SCR_ARBEITEN_TEXT2].text = txtWorkDur;
        };
    } else {
        actor[LBL_SCR_ARBEITEN_TEXT2].text = ((((((value + " ")
          + texts[TXT_ARBEIT_TEXT2]) + " ") + Geld((value * stundenlohn)))
            + " ") + texts[TXT_ARBEIT_TEXT3]);
    };
}

def DoubleClickHandler(dispObj:Object, fnClick:Function,
                       fnDoubleClick:Function){
    var dblClickTimer:* = None;
    var waiting:* = False;
    var tmpEvt:* = None;
    var dblClickTimerEvent:* = None;
    var dispObj:* = dispObj;
    var fnClick:* = fnClick;
    var fnDoubleClick:* = fnDoubleClick;
    var dblClickEvent:* = function (evt:MouseEvent){
        if (waiting){
            fnClick(tmpEvt);
            fnDoubleClick(evt);
            dblClickTimer.stop();
            dblClickTimer.remove_event_listener(TimerEvent.TIMER,
                                                dblClickTimerEvent);
            waiting = False;
        } else {
            tmpEvt = evt;
            dblClickTimer.add_event_listener(TimerEvent.TIMER,
                                             dblClickTimerEvent);
            dblClickTimer.start();
            waiting = True;
        };
    };
    dblClickTimerEvent = function (evt:TimerEvent){
        waiting = False;
        dblClickTimer.remove_event_listener(TimerEvent.TIMER,
                                            dblClickTimerEvent);
        fnClick(tmpEvt);
    };
    dblClickTimer = new Timer(300, 1);
    waiting = False;
    var _local5 = dispObj;
    with (_local5) {
        mouse_enabled = True;
        add_event_listener(MouseEvent.MOUSE_DOWN,
                           dblClickEvent);
    };
}

def ach_level(SG:Array, achIndex, almode=0){
    var alresult;
    var alnext;
    alresult = 0;
    alnext = 0;
    Switch (achIndex){
        if case(0:
            alnext = 2;
            if (int(SG[SG_ACHIEVEMENTS]) >= 2){
                alresult = 1;
                alnext = 5;
            };
            if (int(SG[SG_ACHIEVEMENTS]) >= 5){
                alresult = 2;
                alnext = 10;
            };
            if (int(SG[SG_ACHIEVEMENTS]) >= 10){
                alresult = 3;
                alnext = 20;
            };
            if (int(SG[SG_ACHIEVEMENTS]) >= 20){
                alresult = 4;
                alnext = 30;
            };
            if (int(SG[SG_ACHIEVEMENTS]) >= 30){
                alresult = 5;
                alnext = 40;
            };
            if (int(SG[SG_ACHIEVEMENTS]) >= 40){
                alresult = 6;
                alnext = 50;
            };
            if (int(SG[SG_ACHIEVEMENTS]) >= 50){
                alresult = 7;
                alnext = 60;
            };
            if (int(SG[SG_ACHIEVEMENTS]) >= 60){
                alresult = 8;
                alnext = 70;
            };
            if (int(SG[SG_ACHIEVEMENTS]) >= 70){
                alresult = 9;
                alnext = 80;
            };
            if (int(SG[SG_ACHIEVEMENTS]) >= 80){
                alresult = 10;
                alnext = 90;
            };
            if (int(SG[SG_ACHIEVEMENTS]) >= 90){
                alresult = 11;
                alnext = 100;
            };
            if (int(SG[SG_ACHIEVEMENTS]) >= 100){
                alresult = 12;
                alnext = 0;
            };
            break;
        if case(1:
            alnext = 1;
            if (int(SG[(SG_ACHIEVEMENTS + 1)]) >= 1){
                alresult = 1;
                alnext = 5;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 1)]) >= 5){
                alresult = 2;
                alnext = 10;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 1)]) >= 10){
                alresult = 3;
                alnext = 20;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 1)]) >= 20){
                alresult = 4;
                alnext = 30;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 1)]) >= 30){
                alresult = 5;
                alnext = 40;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 1)]) >= 40){
                alresult = 6;
                alnext = 50;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 1)]) >= 50){
                alresult = 7;
                alnext = 60;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 1)]) >= 60){
                alresult = 8;
                alnext = 70;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 1)]) >= 70){
                alresult = 9;
                alnext = 80;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 1)]) >= 80){
                alresult = 10;
                alnext = 90;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 1)]) >= 90){
                alresult = 11;
                alnext = 100;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 1)]) >= 100){
                alresult = 12;
                alnext = 0;
            };
            break;
        if case(2:
            alnext = 1;
            if (int(SG[(SG_ACHIEVEMENTS + 2)]) >= 1){
                alresult = 1;
                alnext = 5;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 2)]) >= 5){
                alresult = 2;
                alnext = 10;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 2)]) >= 10){
                alresult = 3;
                alnext = 25;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 2)]) >= 25){
                alresult = 4;
                alnext = 50;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 2)]) >= 50){
                alresult = 5;
                alnext = 100;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 2)]) >= 100){
                alresult = 6;
                alnext = 250;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 2)]) >= 250){
                alresult = 7;
                alnext = 500;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 2)]) >= 500){
                alresult = 8;
                alnext = 1000;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 2)]) >= 1000){
                alresult = 9;
                alnext = 2500;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 2)]) >= 2500){
                alresult = 10;
                alnext = 5000;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 2)]) >= 5000){
                alresult = 11;
                alnext = 10000;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 2)]) >= 10000){
                alresult = 12;
                alnext = 0;
            };
            break;
        if case(3:
            alnext = 1;
            if (int(SG[(SG_ACHIEVEMENTS + 3)]) >= 1){
                alresult = 1;
                alnext = 5;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 3)]) >= 5){
                alresult = 2;
                alnext = 10;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 3)]) >= 10){
                alresult = 3;
                alnext = 25;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 3)]) >= 25){
                alresult = 4;
                alnext = 50;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 3)]) >= 50){
                alresult = 5;
                alnext = 100;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 3)]) >= 100){
                alresult = 6;
                alnext = 250;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 3)]) >= 250){
                alresult = 7;
                alnext = 500;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 3)]) >= 500){
                alresult = 8;
                alnext = 1000;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 3)]) >= 1000){
                alresult = 9;
                alnext = 2500;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 3)]) >= 2500){
                alresult = 10;
                alnext = 5000;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 3)]) >= 5000){
                alresult = 11;
                alnext = 10000;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 3)]) >= 10000){
                alresult = 12;
                alnext = 0;
            };
            break;
        if case(4:
            alnext = 1;
            if (int(SG[(SG_ACHIEVEMENTS + 4)]) >= 1){
                alresult = 1;
                alnext = 5;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 4)]) >= 5){
                alresult = 2;
                alnext = 10;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 4)]) >= 10){
                alresult = 3;
                alnext = 25;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 4)]) >= 25){
                alresult = 4;
                alnext = 50;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 4)]) >= 50){
                alresult = 5;
                alnext = 100;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 4)]) >= 100){
                alresult = 6;
                alnext = 250;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 4)]) >= 250){
                alresult = 7;
                alnext = 500;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 4)]) >= 500){
                alresult = 8;
                alnext = 1000;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 4)]) >= 1000){
                alresult = 9;
                alnext = 2500;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 4)]) >= 2500){
                alresult = 10;
                alnext = 5000;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 4)]) >= 5000){
                alresult = 11;
                alnext = 10000;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 4)]) >= 10000){
                alresult = 12;
                alnext = 0;
            };
            break;
        if case(5:
            alnext = 1;
            if (int(SG[(SG_ACHIEVEMENTS + 5)]) >= 100){
                alresult = 1;
                alnext = 5;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 5)]) >= 500){
                alresult = 2;
                alnext = 10;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 5)]) >= 1000){
                alresult = 3;
                alnext = 25;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 5)]) >= 2500){
                alresult = 4;
                alnext = 50;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 5)]) >= 5000){
                alresult = 5;
                alnext = 100;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 5)]) >= 10000){
                alresult = 6;
                alnext = 250;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 5)]) >= 25000){
                alresult = 7;
                alnext = 500;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 5)]) >= 50000){
                alresult = 8;
                alnext = 1000;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 5)]) >= 100000){
                alresult = 9;
                alnext = 2500;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 5)]) >= 250000){
                alresult = 10;
                alnext = 5000;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 5)]) >= 500000){
                alresult = 11;
                alnext = 10000;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 5)]) >= 1000000){
                alresult = 12;
                alnext = 0;
            };
            break;
        if case(6:
            alnext = 1000;
            if (int(SG[(SG_ACHIEVEMENTS + 6)]) >= 1000){
                alresult = 1;
                alnext = 1500;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 6)]) >= 1500){
                alresult = 2;
                alnext = 2500;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 6)]) >= 2500){
                alresult = 3;
                alnext = 5000;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 6)]) >= 5000){
                alresult = 4;
                alnext = 10000;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 6)]) >= 10000){
                alresult = 5;
                alnext = 15000;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 6)]) >= 15000){
                alresult = 6;
                alnext = 20000;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 6)]) >= 20000){
                alresult = 7;
                alnext = 25000;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 6)]) >= 25000){
                alresult = 8;
                alnext = 30000;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 6)]) >= 30000){
                alresult = 9;
                alnext = 35000;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 6)]) >= 35000){
                alresult = 10;
                alnext = 40000;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 6)]) >= 40000){
                alresult = 11;
                alnext = 50000;
            };
            if (int(SG[(SG_ACHIEVEMENTS + 6)]) >= 50000){
                alresult = 12;
                alnext = 0;
            };
            break;
        if case(7:
            alresult = int(SG[(SG_ACHIEVEMENTS + 7)]);
            alnext = (alresult + 1);
            if (alresult >= 12){
                alresult = 12;
                alnext = 0;
            };
    };
    if (almode == 1){
        if (alresult >= 10){
            return (4);
        };
        if (alresult >= 7){
            return (3);
        };
        if (alresult >= 4){
            return (2);
        };
        if (alresult >= 1){
            return (1);
        };
        return (0);
    };
    if (almode == 2){
        return (alnext);
    };
    if (almode == 3){
        return (alresult);
    };
    if (almode == 4){
        if (achIndex == 1){
            return ((((int(SG[(SG_ACHIEVEMENTS + achIndex)])
                    + (((int(SG[SG_NEW_DUNGEONS]) >= 2))
                       ? (int(SG[SG_NEW_DUNGEONS]) - 2) : 0))
                    + (((int(SG[(SG_NEW_DUNGEONS + 1)]) >= 2))
                       ? (int(SG[(SG_NEW_DUNGEONS + 1)]) - 2) : 0))
                    + (((int(SG[SG_DUNGEON_13]) >= 122))
                       ? (int(SG[SG_DUNGEON_13]) - 122) : 0)));
        };
        return ((int(SG[(SG_ACHIEVEMENTS + achIndex)]) / (((achIndex == 5))
                ? 100 : 1)));
    };
    return (alresult);
}

def SingPlur(inp_text:String, amount, sep:String="*"):String{
    var tmp_array:Array;
    tmp_array = inp_text.split(sep);
    if (tmp_array.length == 4){
        return (((tmp_array[0] +
                tmp_array[(((amount == 1)) ? 1 : 2)]) + tmp_array[3]));
    };
    if (tmp_array.length == 5){
        return (((tmp_array[0]
                + tmp_array[(((amount == 1))
                         ? 1 : (((amount == 2)) ? 2 : 3))]) + tmp_array[4]));
    };
    if (tmp_array.length == 6){
        return (((tmp_array[0]
                + tmp_array[(((amount == 1))
                             ? 1 : (((amount == 2))
                                    ? 2 : (((amount <= 10)) ? 3 : 4)))])
                                        + tmp_array[4]));
    };
    return (tmp_array.join(""));
}

def AnimateAch(actor_id, y_level=635, AchAniPow=-10){
    var AchAniTimer:* = None;
    var actor_id:* = actor_id;
    var y_level:Number = y_level;
    var AchAniPow = AchAniPow;
    var AchAniEvent:* = function (evt:Event){
        var evt:* = evt;
        var _local3 = actor[actor_id];
        with (_local3) {
            y = (y + AchAniPow);
            AchAniPow = (AchAniPow + 2);
            if (y >= y_level){
                y = y_level;
                AchAniPow = (AchAniPow * -0.5);
                if (math.abs(AchAniPow) <= 3){
                    y = y_level;
                    AchAniTimer.remove_event_listener(TimerEvent.TIMER,
                                                      AchAniEvent);
                    AchAniTimer.stop();
                    return;
                };
            };
        };
    };
    AchAniTimer = new Timer(50);
    var AchAniStep:* = 0;
    var _local5 = AchAniTimer;
    with (_local5) {
        add_event_listener(TimerEvent.TIMER, AchAniEvent);
        start();
    };
}

def DoAchievements(SG:Array):
    var i;
    var achPop:Array;
    var achAusfM:String;
    var achAusfF:String;
    var achAusf;
    var achCurrentGrade:String;
    var OneUp:Boolean;
    remove(CHAR_ACH);
    achAusfM = "";
    achAusfF = "";
    achAusf = 0;
    achCurrentGrade = "";
    OneUp = False;
    i = 0;
    while (i < ((buffed_mode) ? 7 : 8)) {
        achAusf = ach_level(SG, (i % 8), 1);
        add(((CHAR_ACH + i) + (achAusf * 8)));
        if (old_ach[(i % 8)] < 0){
            old_ach[(i % 8)] = -(old_ach[(i % 8)]);
            AnimateAch(((CHAR_ACH + i) + (achAusf * 8)));
            OneUp = True;
        };
        Switch (achAusf){
            if case(0:
                achAusfM = "";
                achAusfF = "";
                achCurrentGrade = texts[TXT_ACH_5];
                break;
            default:
                achAusfM = (texts[((TXT_ACH_5 + (achAusf * 2)) - 1)] + " ");
                achAusfF = (texts[(TXT_ACH_5 + (achAusf * 2))] + " ");
                achCurrentGrade = texts[(TXT_ACH_2 + (i % 8))].split("%1")
                    .join(str(ach_level(SG, (i % 8), 0))).split("%2")
                    .join(str(ach_level(SG, (i % 8), 4)));
                if (i == 6){
                    achCurrentGrade = texts[TXT_NEW_HONOR_ACH]
                        .split("%1").join(str(ach_level(SG, (i % 8), 0)))
                        .split("%2").join(str(ach_level(SG, (i % 8), 4)));
                };
        };
        achPop = list();
        if (texts[(TXT_ACH_4 + 4)]){
            achPop[achPop.length] = texts[(TXT_ACH_1 + (i % 8))]
                .split("%1").join(achAusfM).split("%2")
                .join(achAusfF).split("%3").join("");
        } else {
            achPop[achPop.length] = texts[(TXT_ACH_1 + (i % 8))]
                .split("%1").join(achAusfM).split("%2")
                .join(achAusfF).split("%3").join(texts[(TXT_ACH_4 + 3)]
                     .split("%1").join(friend_link));
        };
        achPop[achPop.length] = SingPlur(achCurrentGrade,
                                         ach_level(SG, (i % 8), 4));
        if (i == 1){
            if (SG[SG['PLAYER_ID']] == savegame[SG['PLAYER_ID']]){
                if (tower_level > 0){
                    achPop[achPop.length] = SingPlur(texts[(TXT_ACH_2 + 8)].
                                                     split("%1")
                                                     .join(str(tower_level)),
                                                     tower_level);
                };
            } else {
                if (playerTowerLevel > 0){
                    achPop[achPop.length] = SingPlur(texts[(TXT_ACH_2 + 8)].
                                                     split("%1")
                                                 .join(str(playerTowerLevel)),
                                                 playerTowerLevel);
                };
            };
        };
        if (ach_level(SG, (i % 8), 2) > 0){
            if (i == 6){
                achPop[achPop.length] = SingPlur(texts[TXT_NEW_HONOR_ACH2]
                                                 .split("%1")
                                                 .join(str(ach_level(
                                                       SG, (i % 8), 2)))
            .split("%2").join(texts[(TXT_ACH_4 + (((achAusf == 0)) ? 1 : 2))]),
            ach_level(SG, (i % 8), 2));
            } else {
                achPop[achPop.length] = SingPlur(texts[(TXT_ACH_3 + (i % 8))]
                                                 .split("%1")
                .join(str(ach_level(SG, (i % 8), 2))).split("%2")
                .join(texts[(TXT_ACH_4 + (((achAusf == 0)) ? 1 : 2))]),
                ach_level(SG, (i % 8), 2));
            };
        };
        if (ach_level(SG, (i % 8), 3) > 0){
            achPop[achPop.length] = texts[TXT_ACH_4]
                .split("%1").join(str(ach_level(SG, (i % 8), 3)));
        };
        enable_popup((CHAR_ACH + i + (ach_level(SG, (i % 8), 1) * 8)), achPop);
        i++;
    };
    return (OneUp);
}

def MirrorAniFn(evt:Event){
    var i;
    mirror_fade_amount = (mirror_fade_amount - 0.002);
    if (mirror_fade_amount <= 0){
        mirror_fade_amount = 0;
        mirror_ani_timer.stop();
    };
    mirrorAniStep = (mirrorAniStep + 0.1);
    i = 0;
    while (i < 13) {
        actor[(MIRROR_PIECE + i)].alpha = (0.3 + (math.sin((mirrorAniStep
                                           + (((i / 13) * 2) * math.pi)))
                                        * mirror_fade_amount));
        i++;
    };
}

def trim_too_long(actorIDObj:Object, max_width):String{
    var tmp_str:* = None;
    var remainLength:* = 0;
    var actor_id:* = 0;
    var Shortened:* = False;
    var actorIDObj:* = actorIDObj;
    var max_width:* = max_width;
    Shortened = False;
    var _local4 = (((actorIDObj is int)) ? actor[actorIDObj] : actorIDObj);
    with (_local4) {
        tmp_str = text;
        remainLength = tmp_str.length;
        while (text_width > max_width) {
            remainLength--;
            Shortened = True;
            if (text_dir == "right"){
                text = ("..." + tmp_str[-(remainLength): remainLength]);
                if (tmp_str.find("]") >= 0){
                    text = ("[" + text);
                };
            } else {
                text = (tmp_str[0: remainLength] + "...");
                if (tmp_str.find("[") >= 0){
                    text = (text + "]");
                };
            };
        };
    };
    if ((actorIDObj is int)){
        if (Shortened){
            enable_popup(int(actorIDObj), tmp_str);
        } else {
            enable_popup(int(actorIDObj));
        };
    };
    return (((Shortened) ? tmp_str : ""));
}

def CheckWrongPage(correctAct){
    if (correctAct != lastAct){
        if (correctAct == ACT_SCREEN_TAVERNE){
            Switch (lastAct){
                if case(ACT_SCREEN_ARENA:
                    if (!has_mirror){
                        error_message(texts[TXT_ERROR_TAVERNE_ARENA]);
                    };
                    break;
                if case(ACT_SCREEN_ARBEITEN:
                    error_message(texts[TXT_ERROR_TAVERNE_ARBEITEN]);
                    break;
                if case(ACT_SCREEN_WELTKARTE:
                    if (!has_mirror){
                        error_message(texts[TXT_ERROR_TAVERNE_MAINQUEST]);
                    };
                    break;
            };
        } else {
            if (correctAct == ACT_SCREEN_ARBEITEN){
                Switch (lastAct){
                    if case(ACT_SCREEN_ARENA:
                        error_message(texts[TXT_ERROR_ARBEITEN_ARENA]);
                        break;
                    if case(ACT_SCREEN_TAVERNE:
                        error_message(texts[TXT_ERROR_ARBEITEN_TAVERNE]);
                        break;
                    if case(ACT_SCREEN_WELTKARTE:
                        error_message(texts[TXT_ERROR_ARBEITEN_MAINQUEST]);
                        break;
                };
            };
        };
    };
}

def MakeRightTextArea(actor_id, child=0, createHandler=True){
    var tmp_text_format:* = None;
    var actor_id:* = actor_id;
    var child = child;
    var createHandler:Boolean = createHandler;
    var makeRightHandler:* = function (evt:Event){
        MakeRightTextArea(actor_id, child, False);
    };
    if (text_dir != "right"){
        return;
    };
    tmp_text_format = actor[actor_id].getChildAt(child).default_text_format;
    tmp_text_format.align = "right";
    if (!actor[actor_id].hasHandler){
        if (createHandler){
            actor[actor_id].hasHandler = True;
        };
    };
    actor[actor_id].getChildAt(child).default_text_format = tmp_text_format;
    actor[actor_id].getChildAt(child).setTextFormat(tmp_text_format);
}

def display_inventory(SG:Array=None, NoPrices=False,
                      towerMode=False, copyCatIdRaw=0,
                      witchMode=False):
    var i:* = 0;
    var ii:* = 0;
    var HideBackPack:* = False;
    var boostPrice:* = 0;
    var boostGold:* = 0;
    var boostSilver:* = 0;
    var preisX:* = 0;
    var popupLines:* = None;
    var tempBonus:* = 0;
    var tmpHealth:* = 0;
    var potionDuration:* = None;
    var copyCatId:* = None;
    var popupLinesCpc:* = None;
    var DamageReductionCpc:* = 0;
    var DamageReductionMaxCpc:* = 0;
    var tmpKritische:* = NaN;
    var tmpDamageMin:* = 0;
    var tmpDamageMax:* = 0;
    var tmpDamageFactor:* = NaN;
    var tmpLifeFactor:* = NaN;
    var SchadenLblID:* = 0;
    var SchadenID:* = 0;
    var tmpItmClass:* = 0;
    var tmpItmPic:* = 0;
    var hasEpic:* = False;
    var DamageReduction:* = 0;
    var DamageReductionMax:* = 0;
    var SG:* = SG;
    var NoPrices:Boolean = NoPrices;
    var towerMode:Boolean = towerMode;
    var copyCatIdRaw = copyCatIdRaw;
    var witchMode:Boolean = witchMode;
    var GetBoostPrice:* = function (boostCount):
        return (int(TrueAttPreis[boostCount]));
    };
    HideBackPack = False;
    tempBonus = 0;
    tmpHealth = 0;
    var hours:* = 0;
    potionDuration = "";
    copyCatId = 0;
    if (towerMode){
        copyCatId = (TSG_COPYCATS + (COPYCAT * copyCatIdRaw));
        i = 0;
        while (i < 3) {
            if (i == copyCatIdRaw){
                if (int(SG[(copyCatId + CPC_LEVEL)])
                        >= int(savegame[SG_LEVEL])){
                    hide((TOWER_STEIGERN1 + i));
                    hide((LBL_TOWER_BOOSTPRICELABEL + i));
                } else {
                    show((TOWER_STEIGERN1 + i));
                    show((LBL_TOWER_BOOSTPRICELABEL + i));
                };
            } else {
                hide((TOWER_STEIGERN1 + i));
                hide((LBL_TOWER_BOOSTPRICELABEL + i));
            };
            i = (i + 1);
        };
        i = 0;
        while (i < 5) {
            ii = 0;
            while (ii < 12) {
                SG[((TSG_LOOT_SACK + (i * 12)) + ii)] = savegame[
                    ((SG_BACKPACK_OFFS + (i * 12)) + ii)];
                ii = (ii + 1);
            };
            i = (i + 1);
        };
        if (SG[(copyCatId + CPC_LEVEL)] != 0){
            actor[LBL_SCR_CHAR_NAME].text = texts[
                (TXT_COPYCAT_NAME + copyCatIdRaw)];
        } else {
            actor[LBL_SCR_CHAR_NAME].text = "";
        };
        actor[SCR_CHAR_NAME].x = ((SCR_CHAR_CHARX + 128)
                      - int((actor[LBL_SCR_CHAR_NAME].text_width / 2)));
        var _local7 = actor[SCR_CHAR_EXPBAR];
        with (_local7) {
            width = int(((Number(SG[(copyCatId + CPC_GOLD_STOLEN)])
                        / Number(SG[(copyCatId + CPC_GOLD_STOLEN_NEXT)]))
                            * 254));
        };
        i = 0;
        while (i < 3) {
            hide((TOWER_NO_PORTRAIT + i));
            hide((TOWER_PORTRAIT + i));
            _local7 = actor[(TOWER_NO_PORTRAIT + i)];
            with (_local7) {
                scaleX = 0.86;
                scaleY = 0.86;
            };
            _local7 = actor[(TOWER_PORTRAIT + i)];
            with (_local7) {
                scaleX = 0.86;
                scaleY = 0.86;
            };
            i = (i + 1);
        };
        _local7 = actor[LBL_TOWER_EXPLABEL];
        with (_local7) {
            if (SG[(copyCatId + CPC_LEVEL)] != 0){
                show((TOWER_PORTRAIT + copyCatIdRaw));
                if (text_dir == "right"){
                    text = ((SG[(copyCatId + CPC_LEVEL)] + " ")
                            + texts[TXT_HALL_LIST_COLUMN_4]);
                } else {
                    text = ((texts[TXT_HALL_LIST_COLUMN_4] + " ")
                            + SG[(copyCatId + CPC_LEVEL)]);
                };
            } else {
                show((TOWER_NO_PORTRAIT + copyCatIdRaw));
                text = "";
            };
            if (tower_levelLabelPos > (SCR_CHAR_CHARX + 3)){
                x = ((SCR_CHAR_CHARX + 127)
                     - int((actor[LBL_TOWER_EXPLABEL].text_width / 2)));
            } else {
                x = (SCR_CHAR_CHARX + 3);
            };
        };
        popupLinesCpc = list();
        popupLinesCpc.append([POPUP_BEGIN_LINE, ((texts[163] + ": ")
                             + SG[(copyCatId + CPC_ARMOR)]), POPUP_END_LINE]);
        DamageReductionCpc = int((Number(SG[(copyCatId + CPC_ARMOR)])
                                 / Number(SG[(copyCatId + CPC_LEVEL)])));
        DamageReductionMaxCpc = 50;
        Switch (int(SG[(copyCatId + CPC_CLASS)])){
            if case(2:
                DamageReductionMaxCpc = 10;
                break;
            if case(3:
                DamageReductionMaxCpc = 25;
                break;
        };
        if (DamageReductionCpc > DamageReductionMaxCpc){
            DamageReductionCpc = DamageReductionMaxCpc;
        };
        if (text_dir == "right"){
            popupLinesCpc[popupLinesCpc.length] = [POPUP_BEGIN_LINE,
                FontFormat_Attrib, ((((((((("(" + texts[TXT_MAX]) + " -")
                                    + str(DamageReductionMaxCpc)) + "%) ")
                + str(DamageReductionCpc)) + "% :")
                + SG[(copyCatId + CPC_LEVEL)]) + " ")
                + texts[TXT_RUESTUNG_SUM_HINT]), POPUP_END_LINE];
        } else {
            popupLinesCpc[popupLinesCpc.length] = [POPUP_BEGIN_LINE,
            FontFormat_Attrib, (((((((((texts[TXT_RUESTUNG_SUM_HINT] + " ")
                                + SG[(copyCatId + CPC_LEVEL)]) + ": -")
                                + str(DamageReductionCpc))
                                + "% (") + texts[TXT_MAX]) + " -")
                                + str(DamageReductionMaxCpc)) + "%)"),
                    POPUP_END_LINE];
        };
        if (texts[TXT_SHIELD_FORMULA]){
            popupLinesCpc[popupLinesCpc.length] = [
                POPUP_BEGIN_LINE, FontFormat_Attrib,
                texts[TXT_SHIELD_FORMULA], POPUP_END_LINE];
        };
        enable_popup(LBL_TOWER_EXPLABEL, popupLinesCpc);
        i = 0;
        while (i < 3) {
            _local7 = actor[(LBL_TOWER_BOOSTPRICELABEL + i)];
            with (_local7) {
                x = ((EXPERIENCE_BAR_X + 196) - text_width);
            };
            i = (i + 1);
        };
        SetCnt(TOWER_BOOSTCOIN, IF_GOLD);
    } else {
        if (!(SG is Array)){
            SG = savegame;
        } else {
            HideBackPack = True;
        };
    };
    i = 0;
    while (i < 5) {
        if (int(SG[(((towerMode)
                ? (copyCatId + CPC_ATTRIBS_BONUS)
                : SG_ATTR_STAERKE_BONUS) + i)]) > 0){
            actor[(LBL_SCR_CHAR_STAERKE + i)]
                .default_text_format = FontFormat_AttribBonus;
        } else {
            actor[(LBL_SCR_CHAR_STAERKE + i)]
                .default_text_format = FontFormat_Attrib;
        };
        actor[(LBL_SCR_CHAR_STAERKE + i)].text = str((int(SG[(((towerMode)
                                ? (copyCatId + CPC_ATTRIBS)
                            : SG_ATTR_STAERKE) + i)]) + int(SG[(((towerMode)
                                ? (copyCatId + CPC_ATTRIBS_BONUS)
                                : SG_ATTR_STAERKE_BONUS) + i)])));
        popupLines = list();
        popupLines[popupLines.length] = [POPUP_BEGIN_LINE,
            FontFormat_Attrib, texts[(TXT_CHAR_SCHADEN + i)], POPUP_END_LINE];
        if (text_dir == "right"){
            popupLines[popupLines.length] = [POPUP_BEGIN_LINE,
                FontFormat_Attrib,
                (actor[(LBL_SCR_CHAR_STAERKE_CAPTION + i)].text + " ÷ 2 ="),
                POPUP_END_LINE];
        } else {
            popupLines[popupLines.length] = [POPUP_BEGIN_LINE,
            FontFormat_Attrib,
            (("= " + actor[(LBL_SCR_CHAR_STAERKE_CAPTION + i)].text) + " / 2"),
            POPUP_END_LINE];
        };
        enable_popup((LBL_SCR_CHAR_SCHADEN + i), popupLines);
        enable_popup((LBL_SCR_CHAR_SCHADEN_CAPTION + i), popupLines);
        popupLines = list();
        popupLines[popupLines.length] = [POPUP_BEGIN_LINE, FontFormat_Attrib,
            actor[(LBL_SCR_CHAR_STAERKE_CAPTION + i)].text, POPUP_END_LINE];
        popupLines[popupLines.length] = [POPUP_BEGIN_LINE,
            FontFormat_Attrib, texts[(TXT_ATTRIBHELP + i)], POPUP_END_LINE];
        if ((((((towerMode) ? (copyCatIdRaw + 1) : int(SG[SG_CLASS])) == 1))
                and ((i == 0)))){
            popupLines[popupLines.length] = [POPUP_BEGIN_LINE,
            FontFormat_Attrib, texts[TXT_ATTRIBHELP_WARRIOR], POPUP_END_LINE];
        } else {
        if ((((((towerMode) ? (copyCatIdRaw + 1) : int(SG[SG_CLASS])) == 3))
                and ((i == 1)))){
            popupLines[popupLines.length] = [POPUP_BEGIN_LINE,
                FontFormat_Attrib, texts[TXT_ATTRIBHELP_HUNTER],
                POPUP_END_LINE];
        } else {
        if ((((((towerMode) ? (copyCatIdRaw + 1) : int(SG[SG_CLASS])) == 2))
                and ((i == 2)))){
            popupLines[popupLines.length] = [POPUP_BEGIN_LINE,
                FontFormat_Attrib, texts[TXT_ATTRIBHELP_MAGE], POPUP_END_LINE];
        } else {
        if (i <= 2){
            popupLines[popupLines.length] = [POPUP_BEGIN_LINE,
                FontFormat_Attrib, texts[(TXT_ATTRIBHELP_EXT + i)],
                POPUP_END_LINE];

        popupLines[popupLines.length] = [POPUP_BEGIN_LINE, FontFormat_Attrib,
            texts[TXT_BASIS], POPUP_TAB,
            str(int(SG[(((towerMode)
                ? (copyCatId + CPC_ATTRIBS)
                : SG_ATTR_STAERKE) + i)])), POPUP_END_LINE];
        tempBonus = 0;
        tempBonus = int(SG[(((towerMode)
                        ? (copyCatId + CPC_ATTRIBS_BONUS)
                        : SG_ATTR_STAERKE_BONUS) + i)]);
        if (!towerMode){
            ii = 0;
            while (ii < 3) {
                if (int(SG[(SG_POTION_TYPE + ii)]) == 16){
                    tmpHealth = int(SG[(SG_POTION_GAIN + ii)]);
                } else {
                    if (((int(SG[(SG_POTION_TYPE + ii)]) - 1) % 5) == i){
                        potionDuration = time_str(
                                      SG[(SG_POTION_DURATION + ii)], True);
                        if (int(SG[(SG_POTION_GAIN + ii)]) <= 25){
                            tempBonus = ((int(SG[(SG_ATTR_STAERKE + i)])
                                 + int(SG[(SG_ATTR_STAERKE_BONUS + i)]))
                            / ((100 + int(SG[(SG_POTION_GAIN + ii)])) / 100));

                            if (HideBackPack){
                                popupLines[popupLines.length] = [
                                    POPUP_BEGIN_LINE, FontFormat_AttribTemp,
                                    texts[TXT_TEMPORARY], POPUP_TAB,
                                    str(math.round(
                                        ((int(SG[(SG_POTION_GAIN + ii)])
                                         / 100) * tempBonus))),
                                    POPUP_END_LINE];
                            } else {
                                if (text_dir == "right"){
                                    popupLines[popupLines.length] =
                                        [POPUP_BEGIN_LINE,
                                        FontFormat_AttribTemp,
                                        texts[TXT_TEMPORARY],
                                        POPUP_TAB,
                                        ((((("(" + potionDuration) + " ")
                                         + texts[TXT_UNTIL]) + ") ")
                                        + str(math.round(((int(SG[(
                                          SG_POTION_GAIN + ii)]) / 100)
                                        * tempBonus)))), POPUP_END_LINE];
                                } else {
                                    popupLines[popupLines.length] = [
                                        POPUP_BEGIN_LINE,
                                        FontFormat_AttribTemp,
                                        texts[TXT_TEMPORARY],
                                        POPUP_TAB,
                                        (((((str(math.round(((int(SG[
                                         (SG_POTION_GAIN + ii)]) / 100)
                                        * tempBonus))) + " (")
                                        + texts[TXT_UNTIL]) + " ")
                                        + potionDuration) + ")"),
                                        POPUP_END_LINE];
                                };
                            };
                            tempBonus = (tempBonus
                                         - int(SG[(SG_ATTR_STAERKE + i)]));
                        } else {
                            if (HideBackPack){
                                popupLines[popupLines.length] = [
                                    POPUP_BEGIN_LINE,
                                    FontFormat_AttribTemp,
                                    texts[TXT_TEMPORARY], POPUP_TAB,
                                    str(int(SG[(SG_POTION_GAIN + ii)])),
                                    POPUP_END_LINE];
                            } else {
                                if (text_dir == "right"){
                                    popupLines[popupLines.length] =
                                        [POPUP_BEGIN_LINE,
                                        FontFormat_AttribTemp,
                                        texts[TXT_TEMPORARY],
                                        POPUP_TAB,
                                        ((((("(" + potionDuration) + " ")
                                         + texts[TXT_UNTIL]) + ") ")
                                        + str(int(SG[(SG_POTION_GAIN + ii)]))),
                                        POPUP_END_LINE];
                                } else {
                                    popupLines[popupLines.length] = [
                                        POPUP_BEGIN_LINE,
                                        FontFormat_AttribTemp,
                                        texts[TXT_TEMPORARY],
                                        POPUP_TAB,
                                        ((((str(int(SG[(SG_POTION_GAIN + ii)]))
                                         + " (") + texts[TXT_UNTIL]) + " ")
                                            + potionDuration) + ")"),
                                        POPUP_END_LINE];
                                };
                            };
                            tempBonus = (int(SG[(SG_ATTR_STAERKE_BONUS + i)])
                                         - int(SG[(SG_POTION_GAIN + ii)]));
                        };
                        break;
                    };
                };
                ii = (ii + 1);
            };
        };
        if (tempBonus > 0){
            popupLines[popupLines.length] = [POPUP_BEGIN_LINE,
                FontFormat_AttribBonus, texts[TXT_BONUS],
                POPUP_TAB, str(tempBonus), POPUP_END_LINE];
        };
        enable_popup((LBL_SCR_CHAR_STAERKE + i), popupLines);
        enable_popup((LBL_SCR_CHAR_STAERKE_CAPTION + i), popupLines);
        if (!towerMode){
            boostPrice = GetBoostPrice(SG[(SG_ATTR_STAERKE_GEKAUFT + i)]);
            if (boostPrice > 9999){
                boostPrice = (int((boostPrice / 100)) * 100);
            };
            if (boostPrice > 0x3B9ACA00){
                boostPrice = 0x3B9ACA00;
            };
            canBoost[i] = Boolean((boostPrice <= Number(SG[SG_GOLD])));
            boostGold = int((boostPrice / 100));
            boostSilver = (boostPrice % 100);
            hide((LBL_SCR_CHAR_PREIS1 + i), (SCR_CHAR_GOLD1 + i),
                 (LBL_SCR_CHAR_SILBER1 + i), (SCR_CHAR_SILBER1 + i));
            preisX = (CHAR_PROP_COLUMN_4_X + (
                      ((text_dir == "right")) ? 240 : 0));
            if (boostGold > 0){
                _local7 = actor[(LBL_SCR_CHAR_PREIS1 + i)];
                with (_local7) {
                    text = str(boostGold);
                    if (text_dir == "right"){
                        x = (preisX - text_width);
                        preisX = (x - 8);
                    } else {
                        x = preisX;
                        preisX = ((x + text_width) + 8);
                    };
                };
                _local7 = actor[(SCR_CHAR_GOLD1 + i)];
                with (_local7) {
                    if (text_dir == "right"){
                        x = (preisX - width);
                        preisX = (x - 10);
                    } else {
                        x = preisX;
                        preisX = ((x + width) + 10);
                    };
                };
                show((LBL_SCR_CHAR_PREIS1 + i), (SCR_CHAR_GOLD1 + i));
            };
            if (boostSilver > 0){
                _local7 = actor[(LBL_SCR_CHAR_SILBER1 + i)];
                with (_local7) {
                    text = str(boostSilver);
                    if (text_dir == "right"){
                        x = (preisX - text_width);
                        preisX = (x - 8);
                    } else {
                        x = preisX;
                        preisX = ((x + text_width) + 8);
                    };
                };
                _local7 = actor[(SCR_CHAR_SILBER1 + i)];
                with (_local7) {
                    if (text_dir == "right"){
                        x = (preisX - width);
                        preisX = (x - 10);
                    } else {
                        x = preisX;
                        preisX = ((x + width) + 10);
                    };
                };
                show((LBL_SCR_CHAR_SILBER1 + i), (SCR_CHAR_SILBER1 + i));
            };
        };
        i = (i + 1);
    };
    tmpKritische = (math.round(((((int(SG[((towerMode)
                    ? ((copyCatId + CPC_ATTRIBS) + 4)
                    : SG_ATTR_WILLENSKRAFT)]) + int(SG[((towerMode)
                    ? ((copyCatId + CPC_ATTRIBS_BONUS) + 4)
                    : SG_ATTR_WILLENSKRAFT_BONUS)])) * 25)
                    / (Number(SG[((towerMode)
                       ? (copyCatId + CPC_LEVEL) : SG_LEVEL)]) * 10))
                    * 100)) / 100);
    if (tmpKritische < 0){
        tmpKritische = 0;
    };
    if (tmpKritische > 50){
        tmpKritische = 50;
    };
    tmpDamageMin = SG[((towerMode)
                       ? (copyCatId + CPC_DAMAGE_MIN)
                       : SG_DAMAGE_MIN)];
    tmpDamageMax = SG[((towerMode)
                       ? (copyCatId + CPC_DAMAGE_MAX)
                       : SG_DAMAGE_MAX)];
    tmpDamageFactor = 0;
    tmpLifeFactor = 5;
    SchadenLblID = 0;
    Switch (int(((towerMode)
            ? (copyCatIdRaw + 1)
            : SG[SG_CLASS]))){
        if case(1:
            SchadenLblID = LBL_SCR_CHAR_SCHADEN_CAPTION;
            SchadenID = LBL_SCR_CHAR_SCHADEN;
            tmpDamageFactor = (1 + ((Number(SG[((towerMode)
                               ? (copyCatId + CPC_ATTRIBS)
                               : SG_ATTR_STAERKE)]) + Number(SG[((towerMode)
                               ? (copyCatId + CPC_ATTRIBS_BONUS)
                               : SG_ATTR_STAERKE_BONUS)])) / 10));
            tmpLifeFactor = 5;
            break;
        if case(2:
            SchadenLblID = LBL_SCR_CHAR_LEBEN_CAPTION;
            SchadenID = LBL_SCR_CHAR_LEBEN;
            tmpDamageFactor = (1 + ((Number(SG[((towerMode)
                               ? ((copyCatId + CPC_ATTRIBS) + 2)
                               : SG_ATTR_AUSDAUER)]) + Number(SG[((towerMode)
                               ? ((copyCatId + CPC_ATTRIBS_BONUS) + 2)
                               : SG_ATTR_AUSDAUER_BONUS)])) / 10));
            tmpLifeFactor = 2;
            break;
        if case(3:
            SchadenLblID = LBL_SCR_CHAR_KAMPFWERT_CAPTION;
            SchadenID = LBL_SCR_CHAR_KAMPFWERT;
            tmpDamageFactor = (1 + ((Number(SG[((towerMode)
                               ? ((copyCatId + CPC_ATTRIBS) + 1)
                               : SG_ATTR_BEWEGLICHKEIT)])
                                + Number(SG[((towerMode)
                                     ? ((copyCatId + CPC_ATTRIBS_BONUS) + 1)
                                     : SG_ATTR_BEWEGLICHKEIT_BONUS)])) / 10));
            tmpLifeFactor = 4;
            break;
    };
    tmpDamageMin = math.round((tmpDamageMin * tmpDamageFactor));
    tmpDamageMax = math.round((tmpDamageMax * tmpDamageFactor));
    actor[LBL_SCR_CHAR_SCHADEN].text = int(((Number(SG[((towerMode)
                                       ? (copyCatId + CPC_ATTRIBS)
                                       : SG_ATTR_STAERKE)])
                            + Number(SG[((towerMode)
                                     ? (copyCatId + CPC_ATTRIBS_BONUS)
                                     : SG_ATTR_STAERKE_BONUS)])) / 2));
    actor[LBL_SCR_CHAR_KAMPFWERT].text = int(((Number(SG[((towerMode)
                         ? ((copyCatId + CPC_ATTRIBS) + 1)
                         : SG_ATTR_BEWEGLICHKEIT)]) + Number(SG[((towerMode)
                         ? ((copyCatId + CPC_ATTRIBS_BONUS) + 1)
                         : SG_ATTR_BEWEGLICHKEIT_BONUS)])) / 2));
    actor[LBL_SCR_CHAR_LEBEN].text = int(((Number(SG[((towerMode)
                                 ? ((copyCatId + CPC_ATTRIBS) + 2)
                                 : SG_ATTR_AUSDAUER)]) + Number(SG[((towerMode)
                                 ? ((copyCatId + CPC_ATTRIBS_BONUS) + 2)
                                 : SG_ATTR_AUSDAUER_BONUS)])) / 2));
    actor[LBL_SCR_CHAR_RUESTUNG].default_text_format = (((tmpHealth > 0))
                            ? FontFormat_AttribBonus : FontFormat_Attrib);
    actor[LBL_SCR_CHAR_RUESTUNG].text = int(((((Number(SG[((towerMode)
            ? ((copyCatId + CPC_ATTRIBS) + 3)
            : SG_ATTR_INTELLIGENZ)]) + Number(SG[((towerMode)
            ? ((copyCatId + CPC_ATTRIBS_BONUS) + 3)
            : SG_ATTR_INTELLIGENZ_BONUS)])) * (tmpLifeFactor * 2))
            * (((tmpHealth > 0)) ? (Number((tmpHealth + 100)) / 100) : 1))
            * (0.5 + (SG[((towerMode) ? (copyCatId + CPC_LEVEL)
               : SG_LEVEL)] / 2))));
    actor[LBL_SCR_CHAR_WIDERSTAND].text = (str(tmpKritische) + str("%"));
    popupLines = list();
    popupLines[popupLines.length] = [POPUP_BEGIN_LINE,
        FontFormat_Attrib, texts[TXT_SCHADEN], POPUP_END_LINE];
    if (text_dir == "right"){
        popupLines[popupLines.length] = [
            POPUP_BEGIN_LINE, FontFormat_Attrib,
            (((texts[TXT_WAFFENSCHADEN] + " × (1 + ") +
             actor[((LBL_SCR_CHAR_STAERKE_CAPTION + SchadenID) -
              LBL_SCR_CHAR_SCHADEN)].text) + " ÷ 10) ="), POPUP_END_LINE];
    } else {
        popupLines[popupLines.length] = [POPUP_BEGIN_LINE, FontFormat_Attrib,
            (((("= " + texts[TXT_WAFFENSCHADEN]) + " * (1 + ")
             + actor[((LBL_SCR_CHAR_STAERKE_CAPTION + SchadenID)
                  - LBL_SCR_CHAR_SCHADEN)].text) + " / 10)"), POPUP_END_LINE];
    };
    enable_popup(SchadenID, popupLines);
    enable_popup(SchadenLblID, popupLines);
    popupLines = list();
    popupLines[popupLines.length] = [POPUP_BEGIN_LINE, FontFormat_Attrib,
        actor[LBL_SCR_CHAR_RUESTUNG_CAPTION].text, POPUP_END_LINE];
    if (text_dir == "right"){
        popupLines[popupLines.length] = [POPUP_BEGIN_LINE, FontFormat_Attrib,
            (((((((((((tmpHealth > 0)) ? "(" : "")
             + actor[(LBL_SCR_CHAR_STAERKE_CAPTION + 3)].text) + " × ")
            + str(tmpLifeFactor)) + " × (") + texts[TXT_HALL_LIST_COLUMN_4])
            + " + 1)") + (((tmpHealth > 0)) ? ((") + " + str(tmpHealth))
            + "%") : "")) + " ="), POPUP_END_LINE];
    } else {
        popupLines[popupLines.length] = [POPUP_BEGIN_LINE, FontFormat_Attrib,
            (((((((("= " + (((tmpHealth > 0)) ? "(" : ""))
             + actor[(LBL_SCR_CHAR_STAERKE_CAPTION + 3)].text) + " * ")
            + str(tmpLifeFactor)) + " * (") + texts[TXT_HALL_LIST_COLUMN_4])
            + " + 1)") + (((tmpHealth > 0)) ? ((") + " + str(tmpHealth)) + "%")
            : "")), POPUP_END_LINE];
    };
    enable_popup((LBL_SCR_CHAR_SCHADEN + 3), popupLines);
    enable_popup((LBL_SCR_CHAR_SCHADEN_CAPTION + 3), popupLines);
    popupLines = list();
    popupLines[popupLines.length] = [POPUP_BEGIN_LINE, FontFormat_Attrib,
                actor[LBL_SCR_CHAR_WIDERSTAND_CAPTION].text, POPUP_END_LINE];
    if (text_dir == "right"){
        popupLines[popupLines.length] = [POPUP_BEGIN_LINE, FontFormat_Attrib,
                (((actor[(LBL_SCR_CHAR_STAERKE_CAPTION + 4)].text + " × 5 ÷ (")
                 + texts[TXT_GEGNERSTUFE]) + " × 2) ="), POPUP_END_LINE];
    } else {
        popupLines[popupLines.length] = [POPUP_BEGIN_LINE, FontFormat_Attrib,
                (((("= " + actor[(LBL_SCR_CHAR_STAERKE_CAPTION + 4)].text)
                 + " * 5 / (") + texts[TXT_GEGNERSTUFE]) + " * 2)"),
                POPUP_END_LINE];
    };
    popupLines[popupLines.length] = [POPUP_BEGIN_LINE, FontFormat_Attrib,
            texts[TXT_KRITISCHMINMAX], POPUP_END_LINE];
    enable_popup((LBL_SCR_CHAR_SCHADEN + 4), popupLines);
    enable_popup((LBL_SCR_CHAR_SCHADEN_CAPTION + 4), popupLines);
    actor[LBL_SCR_CHAR_SCHADEN_CAPTION].text = texts[TXT_CHAR_SCHADEN];
    actor[LBL_SCR_CHAR_LEBEN_CAPTION].text = texts[TXT_CHAR_LEBEN];
    actor[LBL_SCR_CHAR_KAMPFWERT_CAPTION].text = texts[TXT_CHAR_KAMPFWERT];
    if (SchadenLblID > 0){
        actor[SchadenLblID].text = texts[TXT_SCHADEN];
        actor[SchadenID].text = ((tmpDamageMin
                     + (((str(tmpDamageMin).length >= 6)) ? "-" : " - "))
                    + tmpDamageMax);
    };
    if (text_dir == "right"){
        actor[LBL_SCR_CHAR_SCHADEN].x = ((CHAR_PROP_COLUMN_6_X - 15)
                                     - actor[LBL_SCR_CHAR_SCHADEN].text_width);
        actor[LBL_SCR_CHAR_KAMPFWERT].x = ((CHAR_PROP_COLUMN_6_X - 15)
                                   - actor[LBL_SCR_CHAR_KAMPFWERT].text_width);
        actor[LBL_SCR_CHAR_LEBEN].x = ((CHAR_PROP_COLUMN_6_X - 15)
                                   - actor[LBL_SCR_CHAR_LEBEN].text_width);
        actor[LBL_SCR_CHAR_RUESTUNG].x = ((CHAR_PROP_COLUMN_6_X - 15)
                                  - actor[LBL_SCR_CHAR_RUESTUNG].text_width);
        actor[LBL_SCR_CHAR_WIDERSTAND].x = ((CHAR_PROP_COLUMN_6_X - 15)
                                - actor[LBL_SCR_CHAR_WIDERSTAND].text_width);
        actor[LBL_SCR_CHAR_SCHADEN_CAPTION].x = ((CHAR_PROP_COLUMN_6_X + 110)
                             - actor[LBL_SCR_CHAR_SCHADEN_CAPTION].text_width);
        actor[LBL_SCR_CHAR_KAMPFWERT_CAPTION].x = ((CHAR_PROP_COLUMN_6_X + 110)
                           - actor[LBL_SCR_CHAR_KAMPFWERT_CAPTION].text_width);
        actor[LBL_SCR_CHAR_LEBEN_CAPTION].x = ((CHAR_PROP_COLUMN_6_X + 110)
                               - actor[LBL_SCR_CHAR_LEBEN_CAPTION].text_width);
        actor[LBL_SCR_CHAR_RUESTUNG_CAPTION].x = ((CHAR_PROP_COLUMN_6_X + 110)
                          - actor[LBL_SCR_CHAR_RUESTUNG_CAPTION].text_width);
        actor[LBL_SCR_CHAR_WIDERSTAND_CAPTION].x = (
                            (CHAR_PROP_COLUMN_6_X + 110)
                        - actor[LBL_SCR_CHAR_WIDERSTAND_CAPTION].text_width);
        i = 0;
        while (i < 5) {
            actor[(LBL_SCR_CHAR_STAERKE + i)].x = (
                       (CHAR_PROP_COLUMN_1_X + 50)
                       - actor[(LBL_SCR_CHAR_STAERKE + i)].text_width);
            actor[(LBL_SCR_CHAR_STAERKE_CAPTION + i)].x =
                        ((CHAR_PROP_COLUMN_1_X + 150)
                         - actor[(LBL_SCR_CHAR_STAERKE_CAPTION + i)]
                         .text_width);
            i = (i + 1);
        };
        if (!towerMode){
            actor[LBL_CHAR_MOUNT_NAME].x =
                (((CHAR_MOUNT_X + CHAR_MOUNT_X) - 20)
                 - actor[LBL_CHAR_MOUNT_NAME].text_width);
            actor[LBL_CHAR_MOUNT_DESCR].width = (CHAR_MOUNT_X - 20);
            actor[LBL_CHAR_MOUNT_RUNTIME].x = (((CHAR_MOUNT_X + CHAR_MOUNT_X)
                           - 20) - actor[LBL_CHAR_MOUNT_RUNTIME].text_width);
            actor[LBL_CHAR_MOUNT_GAIN].x = (((CHAR_MOUNT_X + CHAR_MOUNT_X)
                                - 20) - actor[LBL_CHAR_MOUNT_GAIN].text_width);
            MakeRightTextArea(INP_CHARDESC);
            actor[SCR_CHAR_GILDE].x = ((((GILDEEHRE_X + GILDEEHRE_X) + 40)
                               + 280) - actor[LBL_SCR_CHAR_GILDE].text_width);
        };
    };
    if (!towerMode){
        i = 0;
        while (i < 3) {
            SetCnt((CHAR_POTION + i),
                   ((int(SG[(SG_POTION_TYPE + i)]))==0)
                   ? C_EMPTY
                   : GetItemID(12, int(SG[(SG_POTION_TYPE + i)]), 0, 0));
            if (int(SG[(SG_POTION_TYPE + i)]) == 0){
                enable_popup((CHAR_POTION + i));
            } else {
                if (HideBackPack){
                    enable_popup((CHAR_POTION + i),
                                 POPUP_BEGIN_LINE,
                                 texts[((TXT_ITMNAME_12
                                    + int(SG[(SG_POTION_TYPE + i)])) - 1)],
                                POPUP_END_LINE, POPUP_BEGIN_LINE,
                                texts[(((int(SG[(SG_POTION_TYPE + i)]) == 16))
                               ? TXT_ITEM_ATTRIB_CLASS_12
                               : (TXT_ITEM_ATTRIB_CLASS_1
                                  + ((int(SG[(SG_POTION_TYPE + i)])
                                     - 1) % 5)))], POPUP_TAB,
                                (("+ " + SG[(SG_POTION_GAIN + i)])
                                 + (((((int(SG[(SG_POTION_TYPE + i)]) == 16))
                                    or ((SG[(SG_POTION_GAIN + i)] <= 25))))
                                ? "%" : "")), POPUP_END_LINE);
                } else {
                    enable_popup((CHAR_POTION + i),
                                 POPUP_BEGIN_LINE,
                                 texts[((TXT_ITMNAME_12
                                    + int(SG[(SG_POTION_TYPE + i)])) - 1)],
                                POPUP_END_LINE,
                                POPUP_BEGIN_LINE,
                                texts[(((int(SG[(SG_POTION_TYPE + i)]) == 16))
                                       ? TXT_ITEM_ATTRIB_CLASS_12
                                       : (TXT_ITEM_ATTRIB_CLASS_1
                              + ((int(SG[(SG_POTION_TYPE + i)]) - 1) % 5)))],
                            POPUP_TAB, (("+ " + SG[(SG_POTION_GAIN + i)])
                            + (((((int(SG[(SG_POTION_TYPE + i)]) == 16))
                       or ((SG[(SG_POTION_GAIN + i)] <= 25)))) ? "%" : "")),
                        POPUP_END_LINE, POPUP_BEGIN_LINE, texts[TXT_REMAINING],
                        POPUP_TAB, time_str(SG[(SG_POTION_DURATION + i)],
                            True), POPUP_END_LINE, POPUP_BEGIN_LINE,
                        texts[TXT_POTION_KILL_INSTRUCTIONS], POPUP_END_LINE);
                };
            };
            i = (i + 1);
        };
    };
    move(CHAR_SLOT_1, CHAR_SLOTS_LEFT_X, CHAR_SLOTS_TOP_Y);
    move(CHAR_SLOT_2, CHAR_SLOTS_LEFT_X, CHAR_SLOTS_ROW2_Y);
    move(CHAR_SLOT_3, CHAR_SLOTS_LEFT_X, CHAR_SLOTS_ROW3_Y);
    move(CHAR_SLOT_4, CHAR_SLOTS_LEFT_X, CHAR_SLOTS_ROW4_Y);
    move(CHAR_SLOT_5, CHAR_SLOTS_RIGHT_X, CHAR_SLOTS_TOP_Y);
    move(CHAR_SLOT_6, CHAR_SLOTS_RIGHT_X, CHAR_SLOTS_ROW2_Y);
    move(CHAR_SLOT_7, CHAR_SLOTS_RIGHT_X, CHAR_SLOTS_ROW3_Y);
    move(CHAR_SLOT_8, CHAR_SLOTS_RIGHT_X, CHAR_SLOTS_ROW4_Y);
    move(CHAR_SLOT_9, CHAR_SLOTS_R4C2_X, CHAR_SLOTS_ROW4_Y);
    move(CHAR_SLOT_10, CHAR_SLOTS_R4C3_X, CHAR_SLOTS_ROW4_Y);
    move(CHAR_SLOT_11, CHAR_SLOTS_LEFT_X, CHAR_SLOTS_ROW5_Y);
    move(CHAR_SLOT_12, CHAR_SLOTS_R5C2_X, CHAR_SLOTS_ROW5_Y);
    move(CHAR_SLOT_13, CHAR_SLOTS_R5C3_X, CHAR_SLOTS_ROW5_Y);
    move(CHAR_SLOT_14, CHAR_SLOTS_R5C4_X, CHAR_SLOTS_ROW5_Y);
    move(CHAR_SLOT_15, CHAR_SLOTS_RIGHT_X, CHAR_SLOTS_ROW5_Y);
    move(CHAR_SLOT_FIDGET_1, SHOP_SLOTS_C1_X, SHOP_SLOTS_R1_Y);
    move(CHAR_SLOT_FIDGET_2, SHOP_SLOTS_C2_X, SHOP_SLOTS_R1_Y);
    move(CHAR_SLOT_FIDGET_3, SHOP_SLOTS_C3_X, SHOP_SLOTS_R1_Y);
    move(CHAR_SLOT_FIDGET_4, SHOP_SLOTS_C1_X, SHOP_SLOTS_R2_Y);
    move(CHAR_SLOT_FIDGET_5, SHOP_SLOTS_C2_X, SHOP_SLOTS_R2_Y);
    move(CHAR_SLOT_FIDGET_6, SHOP_SLOTS_C3_X, SHOP_SLOTS_R2_Y);
    move(CHAR_SLOT_SHAKES_1, SHOP_SLOTS_C1_X, SHOP_SLOTS_R1_Y);
    move(CHAR_SLOT_SHAKES_2, SHOP_SLOTS_C2_X, SHOP_SLOTS_R1_Y);
    move(CHAR_SLOT_SHAKES_3, SHOP_SLOTS_C3_X, SHOP_SLOTS_R1_Y);
    move(CHAR_SLOT_SHAKES_4, SHOP_SLOTS_C1_X, SHOP_SLOTS_R2_Y);
    move(CHAR_SLOT_SHAKES_5, SHOP_SLOTS_C2_X, SHOP_SLOTS_R2_Y);
    move(CHAR_SLOT_SHAKES_6, SHOP_SLOTS_C3_X, SHOP_SLOTS_R2_Y);
    tmpItmClass = 0;
    tmpItmPic = 0;
    tmpItmPic = int(SG[((((towerMode)
                    ? (copyCatId + CPC_ITEMS)
                    : SG_INVENTORY_OFFS) + (8 * SG['ITM']['SIZE']))
                    + SG['ITM']['PIC'])]);
    tmpItmClass = 0;
    while (tmpItmPic >= 1000) {
        tmpItmPic = (tmpItmPic - 1000);
        tmpItmClass = (tmpItmClass + 1);
    };
    i = 0;
    while (i < 15) {
        if ((((i < 10)) or (!(towerMode)))){
            if (int(SG[((((towerMode)
                ? (copyCatId + CPC_ITEMS)
                : SG_INVENTORY_OFFS) + (i * SG['ITM']['SIZE']))
                + SG_ITM_TYP)]) == 0){
                SG[((((towerMode)
                    ? (copyCatId + CPC_ITEMS)
                    : SG_INVENTORY_OFFS) +
                    (i * SG['ITM']['SIZE'])) + SG['ITM']['PIC'])] = 0;
            };
        };
        if ((((i > 9)) and (HideBackPack))){
            SetCnt((CHAR_SLOT_1 + i), C_EMPTY);
            enable_popup((CHAR_SLOT_1 + i));
        } else {
            if ((((i == 9)) and ((tmpItmClass >= 1)))){
                SetCnt((CHAR_SLOT_1 + i), get_arrow_id(((towerMode) ?
                       (copyCatId + CPC_ITEMS) : SG_INVENTORY_OFFS), 8, SG,
                        True, ((tmpItmClass)==1) ? 1 : -1));
                actor[(CHAR_SLOT_1 + i)].mouse_enabled = False;
            } else {
                SetCnt((CHAR_SLOT_1 + i),
                       GetItemID(((towerMode) ? (((i > 9))
                                 ? TSG_LOOT_SACK : (copyCatId + CPC_ITEMS))
                        : SG_INVENTORY_OFFS), ((((towerMode) and ((i > 9))))
                        ? (i - 10) : i), SG, ((towerMode) ? (((i > 9)) ? -1
                                         : (-(copyCatSel) - 3)) : -2)));
                ItemPopup((CHAR_SLOT_1 + i), (((towerMode) ? (((i > 9))
                          ? TSG_LOOT_SACK : (copyCatId + CPC_ITEMS))
                    : SG_INVENTORY_OFFS) + (((((towerMode) and ((i > 9))))
                         ? (i - 10) : i) * SG['ITM']['SIZE'])), SG,
                        HideBackPack, NoPrices, towerMode, witchMode);
                actor[(CHAR_SLOT_1 + i)]
                    .mouse_enabled = !((int(SG[((((towerMode)
                    ? (((i > 9)) ? TSG_LOOT_SACK : (copyCatId + CPC_ITEMS))
                    : SG_INVENTORY_OFFS) + (((((towerMode) and ((i > 9))))
                  ? (i - 10) : i) * SG['ITM']['SIZE'])) + SG_ITM_TYP)]) == 0));
            };
        };
        if (HideBackPack){
            dragDropProhibit = True;
        } else {
            dragDropProhibit = False;
        };
        i = (i + 1);
    };
    if (!towerMode){
        var IsEpic:* = function (pic):
            while (pic > 1000) {
                pic = (pic - 1000);
            };
            return ((pic >= 50));
        };
        hasEpic = False;
        i = 0;
        while (i < 6) {
            if (int(SG[((SG_FIDGET_ITEM1 + (i * SG['ITM']['SIZE']))
                + SG_ITM_TYP)]) == 0){
                SG[((SG_FIDGET_ITEM1 + (i * SG['ITM']['SIZE']))
                    + SG['ITM']['PIC'])] = 0;
            };
            SetCnt((CHAR_SLOT_FIDGET_1 + i), GetItemID(SG_FIDGET_ITEM1, i, SG))
            ItemPopup((CHAR_SLOT_FIDGET_1 + i),
                      (SG_FIDGET_ITEM1 + (i * SG['ITM']['SIZE'])),
                      SG, HideBackPack);
            if (((IsEpic(SG[((SG_FIDGET_ITEM1 + (i * SG['ITM']['SIZE']))
                    + SG['ITM']['PIC'])])) and (on_stage(SCR_FIDGET_BG)))){
                hasEpic = True;
            };
            if (int(SG[((SG_SHAKES_ITEM1 + (i * SG['ITM']['SIZE']))
                    + SG_ITM_TYP)]) == 0){
                SG[((SG_SHAKES_ITEM1 + (i * SG['ITM']['SIZE']))
                    + SG['ITM']['PIC'])] = 0;
            };
            SetCnt((CHAR_SLOT_SHAKES_1 + i), GetItemID(SG_SHAKES_ITEM1, i, SG))
            ItemPopup((CHAR_SLOT_SHAKES_1 + i),
                      (SG_SHAKES_ITEM1 + (i * SG['ITM']['SIZE'])),
                      SG, HideBackPack);
            if (((IsEpic(SG[((SG_SHAKES_ITEM1 + (i * SG['ITM']['SIZE']))
                    + SG['ITM']['PIC'])])) and (on_stage(SCR_SHAKES_BG)))){
                hasEpic = True;
            };
            i = (i + 1);
        };
        if (!hasEpic){
            BlockReroll = False;
        } else {
            if (RollFrenzy.running){
                error_message("Yay!");
                play(SND_JINGLE);
                RollFrenzy.stop();
            };
        };
        if (text_dir == "right"){
            actor[LBL_CHAR_RUESTUNG]
                .text = ((SG[SG_ARMOR] + " :") + texts[TXT_RUESTUNG_SUM]);
        } else {
            actor[LBL_CHAR_RUESTUNG]
                .text = ((texts[TXT_RUESTUNG_SUM] + ": ") + SG[SG_ARMOR]);
        };
        DamageReduction = int((Number(SG[SG_ARMOR]) / Number(SG[SG_LEVEL])));
        DamageReductionMax = 50;
        Switch (int(SG[SG_CLASS])){
            if case(2:
                DamageReductionMax = 10;
                break;
            if case(3:
                DamageReductionMax = 25;
                break;
        };
        if (DamageReduction > DamageReductionMax){
            DamageReduction = DamageReductionMax;
        };
        popupLines = list();
        popupLines[popupLines.length] = [POPUP_BEGIN_LINE, FontFormat_Attrib,
            texts[TXT_RUESTUNG_SUM], POPUP_END_LINE];
        if (text_dir == "right"){
            popupLines[popupLines.length] = [POPUP_BEGIN_LINE,
                FontFormat_Attrib,
                ((((((((("(" + texts[TXT_MAX]) + " -")
                 + str(DamageReductionMax)) + "%) ")
                    + str(DamageReduction)) + "% :") + SG[SG_LEVEL]) + " ")
                + texts[TXT_RUESTUNG_SUM_HINT]), POPUP_END_LINE];
        } else {
            popupLines[popupLines.length] = [POPUP_BEGIN_LINE,
            FontFormat_Attrib, (((((((((texts[TXT_RUESTUNG_SUM_HINT] + " ")
                + SG[SG_LEVEL]) + ": -") + str(DamageReduction)) + "% (")
                + texts[TXT_MAX]) + " -") + str(DamageReductionMax)) + "%)"),
            POPUP_END_LINE];
        };
        if (texts[TXT_SHIELD_FORMULA]){
            popupLines[popupLines.length] = [POPUP_BEGIN_LINE,
                FontFormat_Attrib, texts[TXT_SHIELD_FORMULA], POPUP_END_LINE];
        };
        enable_popup(LBL_CHAR_RUESTUNG, popupLines);
        enable_popup(CHAR_RUESTUNG, popupLines);
    };
}

def ItemPopup(slot_id, sgIndex, SG:Array=None,
              HideBackPack=False, NoPrices=False,
              towerMode=False, witchMode=False){
    var attribLines:Array;
    var shopLines:Array;
    var i;
    var ii;
    var iii;
    var goldRaw;
    var gold;
    var silber;
    var pilze;
    var compareIndex;
    var compareVal;
    var compareFound:Boolean;
    var lossFound:Boolean;
    var hours;
    var socket;
    var socketPower;
    var enchant;
    var enchantPower;
    var itm_color:Number;
    var itm_class;
    var itm_pic;
    var attribSum;
    var itmName:String;
    var itmQuote:String;
    var quoteArray:Array;
    towerMode = on_stage(PREV_COPYCAT);
    attribLines = list();
    shopLines = list();
    if (!(SG is Array)){
        SG = savegame;
    };
    if (SG[(sgIndex + SG_ITM_TYP)] > 0){
        ii = 0;
        iii = 0;
        goldRaw = SG[(sgIndex + SG_ITM_GOLD)];
        if (witchMode){
            if (SG[(sgIndex + SG_ITM_TYP)] == witchDesiredType){
                goldRaw = (goldRaw * 2);
            } else {
                goldRaw = 0;
            };
        };
        gold = int((goldRaw / 100));
        silber = int((goldRaw % 100));
        pilze = int((SG[(sgIndex + SG_ITM_MUSH)] % 100));
        compareIndex = 0;
        compareFound = False;
        lossFound = False;
        socket = int(SG[(sgIndex + SG_ITM_EXT_SOCKET)]);
        socketPower = int(SG[(sgIndex + SG_ITM_EXT_SOCKET_POWER)]);
        enchant = int(SG[(sgIndex + SG_ITM_EXT_ENCHANT)]);
        enchantPower = int(SG[(sgIndex + SG_ITM_EXT_ENCHANT_POWER)]);
        if (((!(HideBackPack)) and (!(NoPrices)))){
            shopLines[shopLines.length] = FontFormat_Popup;
            if (gold > 0){
                if (silber > 0){
                    shopLines[shopLines.length] = [POPUP_BEGIN_LINE, str(gold),
                    actor[IF_GOLD], str(silber), actor[IF_SILBER],
                    POPUP_END_LINE];
                } else {
                    shopLines[shopLines.length] = [POPUP_BEGIN_LINE, str(gold),
                    actor[IF_GOLD], POPUP_END_LINE];
                };
            } else {
                if (silber > 0){
                    shopLines[shopLines.length] = [POPUP_BEGIN_LINE,
                    str(silber), actor[IF_SILBER], POPUP_END_LINE];
                };
            };
            if (pilze > 0){
                shopLines[shopLines.length] = [POPUP_BEGIN_LINE, str(pilze),
                actor[IF_PILZE], POPUP_END_LINE];
            };
            if (witchMode){
                if (SG[(sgIndex + SG_ITM_TYP)] != witchDesiredType){
                    shopLines.append([POPUP_BEGIN_LINE,
                    texts[TXT_WITCH_WRONGTYPE], POPUP_END_LINE]);
                };
            } else {
                if ((((((pilze + gold) + silber) == 0))
                    and ((SG[(sgIndex + SG_ITM_TYP)] <= 10)))){
                    shopLines.append([POPUP_BEGIN_LINE,
                                     texts[TXT_TOILET_ITEM], POPUP_END_LINE]);
                };
            };
        };
        itm_color = 0;
        itm_class = 0;
        itm_pic = int(SG[(sgIndex + SG['ITM']['PIC'])]);
        i = 0;
        while (i < 8) {
            itm_color = (itm_color + Number(SG[((sgIndex
                         + SG['ITM']['SCHADEN_MIN']) + i)]));
            i++;
        };
        itm_color = (itm_color % 5);
        while (itm_pic >= 1000) {
            itm_pic = (itm_pic - 1000);
            itm_class++;
        };
        if (C_DISPLAY_ITEM_INFO){
            shopLines[shopLines.length] = [POPUP_BEGIN_LINE,
                actorURL[GetItemID(sgIndex, 0, SG)], POPUP_END_LINE];
            shopLines[shopLines.length] = [POPUP_BEGIN_LINE,
                "Typ: ", POPUP_TAB, str(SG[(sgIndex + SG_ITM_TYP)]),
                POPUP_END_LINE];
            shopLines[shopLines.length] = [POPUP_BEGIN_LINE,
                "Pic: ", POPUP_TAB, str(itm_pic), POPUP_END_LINE];
            shopLines[shopLines.length] = [POPUP_BEGIN_LINE,
                "Color: ", POPUP_TAB, str((itm_color + 1)), POPUP_END_LINE];
            shopLines[shopLines.length] = [POPUP_BEGIN_LINE,
                "Class: ", POPUP_TAB, str((itm_class + 1)), POPUP_END_LINE];
            shopLines[shopLines.length] = [POPUP_BEGIN_LINE,
                "Sock: ", POPUP_TAB, str(socket), POPUP_END_LINE];
            shopLines[shopLines.length] = [POPUP_BEGIN_LINE,
                "SockPwr: ", POPUP_TAB, str(socketPower), POPUP_END_LINE];
            shopLines[shopLines.length] = [POPUP_BEGIN_LINE,
                "Enchant: ", POPUP_TAB, str(enchant), POPUP_END_LINE];
            shopLines[shopLines.length] = [POPUP_BEGIN_LINE,
                "EnchantPwr: ", POPUP_TAB, str(enchantPower), POPUP_END_LINE];
        };
        i = 0;
        while (i < 10) {
            suggestion_slot[slot_id] = 0;
            if (int(SG[(sgIndex + SG_ITM_TYP)]) == CorrectItemType[i]){
                if ((((slot_id >= CHAR_SLOT_11))
                        and ((slot_id <= CHAR_SLOT_SHAKES_6)))){
                    suggestion_slot[slot_id] = (i + CHAR_SLOT_1);
                    if (SG[((SG_INVENTORY_OFFS + (SG['ITM']['SIZE'] * i))
                            + SG_ITM_TYP)] > 0){
                        if (((compare_items) and (!(towerMode)))){
                            compareIndex = (SG_INVENTORY_OFFS
                                            + (SG['ITM']['SIZE'] * i));
                        };
                    };
                };
                break;
            };
            i++;
        };
        attribSum = 0;
        i = 0;
        while (i < 3) {
            if ((((int(SG[((sgIndex + SG_ITM_ATTRIBTYP1) + i)]) > 0))
                    and ((int(SG[((sgIndex + SG_ITM_ATTRIBVAL1) + i)]) > 0)))){
                var _temp1 = ii;
                ii = (ii + 1);
                var _local33 = _temp1;
                attribLines[_local33] = POPUP_BEGIN_LINE;
                if (int(SG[((sgIndex + SG_ITM_ATTRIBTYP1) + i)]) <= 6){
                    var _temp2 = ii;
                    ii = (ii + 1);
                    var _local34 = _temp2;
                    attribLines[_local34] = FontFormat_Popup;
                } else {
                    var _temp3 = ii;
                    ii = (ii + 1);
                    _local34 = _temp3;
                    attribLines[_local34] = FontFormat_Popup;
                };
                var _temp4 = ii;
                ii = (ii + 1);
                _local34 = _temp4;
                attribLines[_local34] = texts[(TXT_ITEM_ATTRIB_CLASSES
                           + int(SG[((sgIndex + SG_ITM_ATTRIBTYP1) + i)]))];
                var _temp5 = ii;
                ii = (ii + 1);
                var _local35 = _temp5;
                attribLines[_local35] = (POPUP_TAB + POPUP_TAB_ADD);
                if (int(SG[((sgIndex + SG_ITM_ATTRIBTYP1) + i)]) == 11){
                    hours = int(SG[((sgIndex + SG_ITM_ATTRIBVAL1) + i)]);
                    var _temp6 = ii;
                    ii = (ii + 1);
                    var _local36 = _temp6;
                    attribLines[_local36] = (((int((hours / 24)))>0)
                        ? (((str(int((hours / 24))) + " ")
                           + texts[(((int((hours / 24)) == 1))
                            ? TXT_DAY : TXT_DAYS)]) + ((((hours % 24) > 0))
                            ? ", " : "")) : "" + ((((hours % 24) > 0))
                            ? ((str((hours % 24)) + " ")
                           + texts[((((hours % 24) == 1))
                                    ? TXT_HOUR : TXT_HOURS)]) : ""));
                } else {
                    if (int(SG[((sgIndex + SG_ITM_ATTRIBTYP1) + i)]) == 12){
                        var _temp7 = ii;
                        ii = (ii + 1);
                        _local36 = _temp7;
                        attribLines[_local36] = POPUP_TAB;
                        var _temp8 = ii;
                        ii = (ii + 1);
                        var _local37 = _temp8;
                        attribLines[_local37] = (("+ " + SG[((sgIndex
                                 + SG_ITM_ATTRIBVAL1) + i)]) + "%");
                    } else {
                        if (SG[(sgIndex + SG_ITM_TYP)] == 12){
                            var _temp9 = ii;
                            ii = (ii + 1);
                            _local36 = _temp9;
                            attribLines[_local36] = POPUP_TAB;
                            if (SG[((sgIndex + SG_ITM_ATTRIBVAL1) + i)] <= 25){
                                var _temp10 = ii;
                                ii = (ii + 1);
                                _local37 = _temp10;
                                attribLines[_local37] = (("+ "
                                     + SG[((sgIndex + SG_ITM_ATTRIBVAL1) + i)])
                                    + "%");
                            } else {
                                var _temp11 = ii;
                                ii = (ii + 1);
                                _local37 = _temp11;
                                attribLines[_local37] = ("+ "
                                 + SG[((sgIndex + SG_ITM_ATTRIBVAL1) + i)]);
                            };
                        } else {
                            var _temp12 = ii;
                            ii = (ii + 1);
                            _local36 = _temp12;
                            attribLines[_local36] =
                                SG[((sgIndex + SG_ITM_ATTRIBVAL1) + i)];
                        };
                    };
                };
                if (compareIndex > 0){
                    compareFound = False;
                    iii = 0;
                    while (iii < 3) {
                        if ((((((int(SG[((compareIndex + SG_ITM_ATTRIBTYP1)
                                + iii)]) == int(SG[((sgIndex
                                 + SG_ITM_ATTRIBTYP1) + i)])))
                                and ((int(SG[((compareIndex
                                     + SG_ITM_ATTRIBVAL1) + iii)]) > 0))))
                                and ((int(SG[((sgIndex + SG_ITM_ATTRIBVAL1)
                                     + i)]) > 0)))){
                            compareVal = (int(SG[((sgIndex
                                          + SG_ITM_ATTRIBVAL1) + i)])
                                    - int(SG[((compareIndex +
                                     SG_ITM_ATTRIBVAL1) + iii)]));
                            if (int(SG[((compareIndex + SG_ITM_ATTRIBTYP1)
                                + iii)]) == 6){
                                compareVal = (compareVal * 5);
                            };
                            attribSum = (attribSum + compareVal);
                            var _temp13 = ii;
                            ii = (ii + 1);
                            _local36 = _temp13;
                            attribLines[_local36] = (((compareVal == 0))
                                 ? FontFormat_Popup : (((compareVal > 0))
                               ? FontFormat_PopupCompareBetter
                               : FontFormat_PopupCompareWorse));
                            var _temp14 = ii;
                            ii = (ii + 1);
                            _local37 = _temp14;
                            attribLines[_local37] = COMPARE_TAB;
                            var _temp15 = ii;
                            ii = (ii + 1);
                            var _local38 = _temp15;
                            attribLines[_local38] = (((compareVal >= 0))
                                 ? (((compareVal == 0)) ? "+-" : "+") : "-");
                            var _temp16 = ii;
                            ii = (ii + 1);
                            var _local39 = _temp16;
                            attribLines[_local39] = str(math.abs(compareVal));
                            var _temp17 = ii;
                            ii = (ii + 1);
                            var _local40 = _temp17;
                            attribLines[_local40] = FontFormat_Popup;
                            compareFound = True;
                            break;
                        };
                        iii++;
                    };
                    if (!compareFound){
                        var _temp18 = ii;
                        ii = (ii + 1);
                        _local36 = _temp18;
                        attribLines[_local36] = FontFormat_PopupCompareBetter;
                        var _temp19 = ii;
                        ii = (ii + 1);
                        _local37 = _temp19;
                        attribLines[_local37] = COMPARE_TAB;
                        var _temp20 = ii;
                        ii = (ii + 1);
                        _local38 = _temp20;
                        attribLines[_local38] = "+";
                        var _temp21 = ii;
                        ii = (ii + 1);
                        _local39 = _temp21;
                        attribLines[_local39] = str((SG[((sgIndex
                            + SG_ITM_ATTRIBVAL1) + i)]
                            * (((SG[((sgIndex + SG_ITM_ATTRIBTYP1) + i)]
                               == 6)) ? 5 : 1)));
                        var _temp22 = ii;
                        ii = (ii + 1);
                        _local40 = _temp22;
                        attribLines[_local40] = FontFormat_Popup;
                        attribSum = (attribSum + (SG[((sgIndex
                             + SG_ITM_ATTRIBVAL1) + i)] * (((SG[((sgIndex
                             + SG_ITM_ATTRIBTYP1) + i)] == 6)) ? 5 : 1)));
                    };
                };
                var _temp23 = ii;
                ii = (ii + 1);
                _local36 = _temp23;
                attribLines[_local36] = POPUP_END_LINE;
            };
            if ((((((compareIndex > 0)) and ((int(SG[((compareIndex
                + SG_ITM_ATTRIBTYP1) + i)]) > 0))))
                and ((int(SG[((compareIndex + SG_ITM_ATTRIBVAL1) + i)])
                     > 0)))){
                lossFound = False;
                iii = 0;
                while (iii < 3) {
                    if ((((((int(SG[((compareIndex + SG_ITM_ATTRIBTYP1) + i)])
                        == int(SG[((sgIndex + SG_ITM_ATTRIBTYP1) + iii)])))
                         and ((int(SG[((compareIndex + SG_ITM_ATTRIBVAL1)
                              + i)]) > 0)))) and
                            ((int(SG[((sgIndex + SG_ITM_ATTRIBVAL1)
                             + iii)]) > 0)))){
                        lossFound = True;
                        break;
                    };
                    iii++;
                };
                if (!lossFound){
                    var _temp24 = ii;
                    ii = (ii + 1);
                    _local33 = _temp24;
                    attribLines[_local33] = POPUP_BEGIN_LINE;
                    var _temp25 = ii;
                    ii = (ii + 1);
                    _local34 = _temp25;
                    attribLines[_local34] = texts[(TXT_ITEM_ATTRIB_CLASSES
                       + int(SG[((compareIndex + SG_ITM_ATTRIBTYP1) + i)]))];
                    var _temp26 = ii;
                    ii = (ii + 1);
                    _local35 = _temp26;
                    attribLines[_local35] = (POPUP_TAB + POPUP_TAB_ADD);
                    var _temp27 = ii;
                    ii = (ii + 1);
                    _local36 = _temp27;
                    attribLines[_local36] = "-";
                    var _temp28 = ii;
                    ii = (ii + 1);
                    _local37 = _temp28;
                    attribLines[_local37] = FontFormat_PopupCompareWorse;
                    var _temp29 = ii;
                    ii = (ii + 1);
                    _local38 = _temp29;
                    attribLines[_local38] = COMPARE_TAB;
                    var _temp30 = ii;
                    ii = (ii + 1);
                    _local39 = _temp30;
                    attribLines[_local39] = "-";
                    var _temp31 = ii;
                    ii = (ii + 1);
                    _local40 = _temp31;
                    attribLines[_local40] = str((SG[((compareIndex
                                                + SG_ITM_ATTRIBVAL1) + i)]
                                * (((SG[((compareIndex + SG_ITM_ATTRIBTYP1)
                                   + i)] == 6)) ? 5 : 1)));
                    var _temp32 = ii;
                    ii = (ii + 1);
                    var _local41 = _temp32;
                    attribLines[_local41] = FontFormat_Popup;
                    var _temp33 = ii;
                    ii = (ii + 1);
                    var _local42 = _temp33;
                    attribLines[_local42] = POPUP_END_LINE;
                    attribSum = (attribSum - (SG[((compareIndex
                                 + SG_ITM_ATTRIBVAL1) + i)]
                        * (((SG[((compareIndex + SG_ITM_ATTRIBTYP1) + i)]
                           == 6)) ? 5 : 1)));
                };
            };
            i++;
        };
        itmName = GetItemName(sgIndex, SG);
        itmQuote = "";
        quoteArray = list();
        if (itmName.find("|") > 0){
            itmQuote = itmName.split("|")[1];
            itmName = itmName.split("|")[0];
            quoteArray[0] = POPUP_BEGIN_LINE;
            quoteArray[1] = ((SG[(sgIndex + SG_ITM_TYP)])==14)
                ? FontFormat_ItemEnchantment : FontFormat_EpicItemQuote;
            quoteArray[2] = itmQuote;
            quoteArray[3] = FontFormat_Popup;
            quoteArray[4] = POPUP_END_LINE;
        };
        if (SG[(sgIndex + SG_ITM_TYP)] < 8){
            if ((itm_class + 1) != ((towerMode)
                ? (copyCatSel + 1) : savegame[SG_CLASS])){
                quoteArray.append(POPUP_BEGIN_LINE);
                quoteArray.append(FontFormat_Error);
                quoteArray.append(texts[TXT_NECESSARY_CLASS].split("%1")
                      .join(texts[((TXT_NECESSARY_CLASS + itm_class) + 1)]));
                quoteArray.append(FontFormat_Popup);
                quoteArray.append(POPUP_END_LINE);
            };
        };
        if (SG[(sgIndex + SG_ITM_EXT_ENCHANT)] > 0){
            if (SG[(sgIndex + SG_ITM_TYP)] == 14){
                itmName = texts[TXT_SCROLL_NAME].split("%1").join(itmName);
            } else {
                quoteArray.append(POPUP_BEGIN_LINE);
                quoteArray.append(FontFormat_ItemEnchantment);
                quoteArray.append(texts[TXT_ENCHANT_HINT]);
                quoteArray.append((POPUP_TAB + POPUP_TAB_ADD));
                quoteArray.append(texts[((TXT_ITMNAME_14
                 + int(SG[(sgIndex + SG_ITM_EXT_ENCHANT)])) - 1)]
                    .split("|")[0]);
                quoteArray.append(FontFormat_Popup);
                quoteArray.append(POPUP_END_LINE);
            };
            quoteArray.append(POPUP_BEGIN_LINE);
            quoteArray.append(FontFormat_ItemEnchantment);
            quoteArray.append(texts[((TXT_ENCHANT_NAMES + int(SG[(sgIndex
                              + SG_ITM_EXT_ENCHANT)])) - 1)]);
            quoteArray.append((POPUP_TAB + POPUP_TAB_ADD));
            quoteArray.append(texts[((TXT_ENCHANT_VALUES + int(SG[(sgIndex
                              + SG_ITM_EXT_ENCHANT)])) - 1)].split("%1")
                    .join(str(SG[(sgIndex + SG_ITM_EXT_ENCHANT_POWER)])));
            quoteArray.append(FontFormat_Popup);
            quoteArray.append(POPUP_END_LINE);
        };
        if (int(SG[(sgIndex + SG_ITM_TYP)]) == 1){
            if (compareIndex > 0){
                compareVal = (math.round(((Number(SG[(sgIndex
                    + SG['ITM']['SCHADEN_MIN'])])
                    + Number(SG[(sgIndex + SG_ITM_SCHADEN_MAX)])) / 2))
                    - math.round(((Number(SG[(compareIndex
                    + SG['ITM']['SCHADEN_MIN'])]) +
                    Number(SG[(compareIndex + SG_ITM_SCHADEN_MAX)])) / 2)));
                enable_popup(slot_id, itmName, quoteArray, POPUP_BEGIN_LINE,
                             texts[TXT_SCHADEN], (POPUP_TAB + POPUP_TAB_ADD),
                             ((SG[(sgIndex + SG['ITM']['SCHADEN_MIN'])] + "-")
                              + SG[(sgIndex + SG_ITM_SCHADEN_MAX)]),
                            (("(~" + str(math.round(((Number(SG[(sgIndex
                             + SG['ITM']['SCHADEN_MIN'])])
                            + Number(SG[(sgIndex + SG_ITM_SCHADEN_MAX)]))
                            / 2)))) + ")"), (((compareVal == 0))
                            ? FontFormat_Popup : (((compareVal > 0))
                            ? FontFormat_PopupCompareBetter
                            : FontFormat_PopupCompareWorse)), COMPARE_TAB,
                            ((((compareVal >= 0)) ? (((compareVal == 0))
                             ? "+- " : "+ ") : "- ")
                            + str(math.abs(compareVal))), FontFormat_Popup,
                            POPUP_END_LINE, attribLines, shopLines);
            } else {
                enable_popup(slot_id, itmName, quoteArray, POPUP_BEGIN_LINE,
                             texts[TXT_SCHADEN], (POPUP_TAB + POPUP_TAB_ADD),
                             ((SG[(sgIndex + SG['ITM']['SCHADEN_MIN'])] + "-")
                              + SG[(sgIndex + SG_ITM_SCHADEN_MAX)]),
                            (("(~" + str(math.round(((Number(SG[(sgIndex
                             + SG['ITM']['SCHADEN_MIN'])])
                            + Number(SG[(sgIndex + SG_ITM_SCHADEN_MAX)]))
                            / 2)))) + ")"), POPUP_END_LINE,
                            attribLines, shopLines);
            };
        } else {
            if (int(SG[(sgIndex + SG_ITM_TYP)]) == 2){
                if (compareIndex > 0){
                    compareVal = (int(SG[(sgIndex + SG['ITM']['SCHADEN_MIN'])])
                                  - int(SG[(compareIndex
                                        + SG['ITM']['SCHADEN_MIN'])]));
                    enable_popup(slot_id, itmName, quoteArray,
                                 POPUP_BEGIN_LINE, texts[TXT_BLOCKEN],
                                 (POPUP_TAB + POPUP_TAB_ADD),
                                 (SG[(sgIndex + SG['ITM']['SCHADEN_MIN'])]
                                  + " %"),
                                 (((compareVal == 0))
                                  ? FontFormat_Popup
                                  : (((compareVal > 0))
                                     ? FontFormat_PopupCompareBetter
                                     : FontFormat_PopupCompareWorse)),
                                 COMPARE_TAB,
                                 ((((compareVal >= 0))
                                    ? (((compareVal == 0))
                                       ? "+- " : "+ ") : "- ")
                                    + str(math.abs(compareVal))),
                                    FontFormat_Popup, POPUP_END_LINE,
                                    attribLines, shopLines);
                } else {
                    enable_popup(slot_id, itmName, quoteArray,
                                 POPUP_BEGIN_LINE, texts[TXT_BLOCKEN],
                                 (POPUP_TAB + POPUP_TAB_ADD),
                                 (SG[(sgIndex + SG['ITM']['SCHADEN_MIN'])]
                                  + " %"), POPUP_END_LINE, attribLines,
                                shopLines);
                };
            } else {
                if (int(SG[(sgIndex + SG['ITM']['SCHADEN_MIN'])]) > 0){
                    if (compareIndex > 0){
                        compareVal = (int(SG[(sgIndex
                                  + SG['ITM']['SCHADEN_MIN'])])
                                - int(SG[(compareIndex
                                      + SG['ITM']['SCHADEN_MIN'])]));
                        enable_popup(slot_id, itmName, quoteArray,
                                     POPUP_BEGIN_LINE, texts[TXT_RUESTUNG],
                                     (POPUP_TAB + POPUP_TAB_ADD),
                                     SG[(sgIndex + SG['ITM']['SCHADEN_MIN'])],
                                     (((compareVal == 0))
                                      ? FontFormat_Popup : (((compareVal > 0))
                                      ? FontFormat_PopupCompareBetter
                                      : FontFormat_PopupCompareWorse)),
                                    COMPARE_TAB,
                                    ((((compareVal >= 0))
                                     ? (((compareVal == 0))
                                        ? "+- " : "+ ") : "- ")
                                        + str(math.abs(compareVal))),
                                        FontFormat_Popup, POPUP_END_LINE,
                                        attribLines, shopLines);
                    } else {
                        enable_popup(slot_id, itmName, quoteArray,
                                     POPUP_BEGIN_LINE, texts[TXT_RUESTUNG],
                                     (POPUP_TAB + POPUP_TAB_ADD),
                                     SG[(sgIndex + SG['ITM']['SCHADEN_MIN'])],
                                     POPUP_END_LINE, attribLines, shopLines);
                    };
                } else {
                    enable_popup(slot_id, itmName, quoteArray, attribLines,
                                 shopLines);
                };
            };
        };
    } else {
        enable_popup(slot_id);
    };
}

def get_hl_index(inStr:String){
    return (int(decode_chat(inStr, True)));
}

def decode_chat(inStr:String, getHLMode=False,
                getGBMode=False):String{
    var namePart:String;
    var timePart:String;
    var crestStr:String;
    var authorStr:String;
    var dateStr:String;
    if (text_dir == "right"){
        if (inStr.find("§") != -1){
            namePart = inStr.split("§")[0];
            if (namePart[-1: 1] == ":"){
                namePart = namePart[0: (namePart.length - 1)]
            };
            timePart = namePart[0: namePart.find(" ")]
            namePart = namePart[(namePart.find(" ") + 1):]
            inStr = ((((inStr.split("§")[1] + " §:")
                     + namePart) + " ") + timePart);
        };
    };
    inStr = inStr.split("§").join(((getHLMode) ? "§" : ""));
    if (((!((inStr.find("#?") == -1))) and ((inStr.find("##") == -1)))){
        crestStr = inStr.split("#?")[1];
        authorStr = inStr.split("#?")[0];
        dateStr = inStr[0: 5]
        authorStr = authorStr[6:]
        authorStr = authorStr[0: (authorStr.length - 3)]
        inStr = ((dateStr + " ") + texts[TXT_CREST_SUGGESTION]
                 .split("%1").join(authorStr));
        if (!crestSuggestion[inStr]){
            new_crest_suggested = inStr;
        };
        crestSuggestion[inStr] = crestStr;
    };
    inStr = inStr.split("#{").join("/");
    inStr = inStr.split("#}").join(";");
    inStr = inStr.split("##").join("#");
    inStr = inStr.split("%u20AC").join("€");
    if (inStr[0: 1] == "#"){
        if (text_dir == "right"){
            if (inStr[0: 4] == "#dg#"){
                inStr = ((((((((texts[TXT_DONATE_GOLD_2] + " ")
                         + str((Number(inStr.split("#")[3]) / 100))) + " ")
                        + texts[TXT_DONATE_GOLD_1]) + " ") + inStr
                        .split("#")[2].split(" ")[1]) + " ")
                        + inStr.split("#")[2].split(" ")[0]);
            } else {
                if (inStr[0: 4] == "#dm#"){
                    inStr = ((((((((texts[TXT_DONATE_MUSH_2] + " ")
                             + inStr.split("#")[3]) + " ")
                            + texts[TXT_DONATE_MUSH_1]) + " ")
                            + inStr.split("#")[2].split(" ")[1]) + " ")
                            + inStr.split("#")[2].split(" ")[0]);
            } else {
                if (inStr[0: 4] == "#sr#"){
                    if (texts[TXT_SERVER_STARTED]){
                        inStr = texts[TXT_SERVER_STARTED].split("%1")
                        .join(time_str(int(inStr.split("#")[2])));
                    } else {
                        inStr = "Server restarted at %1".split("%1")
                        .join(time_str(int(inStr.split("#")[2])));
                    };
            } else {
                if (inStr[0: 4] == "#bd#"){
                    if (int(inStr.split("#")[3]) == 0){
                        inStr = texts[(TXT_CATAPULT + 7)];
                    } else {
                        inStr = ((((texts[TXT_BUILDING_1].split("%1")
                                 .join(texts[((TXT_GILDE_GEBAEUDE_NAME1
                                       + int(inStr.split("#")[3])) - 1)])
                                + " ") + inStr.split("#")[2].split(" ")[1])
                                + " ") + inStr.split("#")[2].split(" ")[0]);
                    };
            } else {
                if (inStr[0: 4] == "#ra#"){
                    inStr = ((((((((texts[(TXT_RANKMSG_6
                             + int(inStr.split("#")[3]))] + " ")
                            + inStr.split("#")[4]) + " ")
                            + texts[(TXT_RANKMSG_1
                            + int(inStr.split("#")[3]))]) + " ")
                            + inStr.split("#")[2].split(" ")[1]) + " ")
                            + inStr.split("#")[2].split(" ")[0]);
            } else {
                if (inStr[0: 4] == "#in#"){
                    inStr = ((((texts[TXT_GUILD_JOINED] + " ")
                        + inStr.split("#")[2].split(" ")[1]) + " ")
                        + inStr.split("#")[2].split(" ")[0]);
            } else {
                if (inStr[0: 4] == "#ou#"){
                    inStr = ((((texts[TXT_GUILD_QUIT] + " ") + inStr
                             .split("#")[2].split(" ")[1]) + " ")
                            + inStr.split("#")[2].split(" ")[0]);
            } else {
                if (inStr[0: 4] == "#rv#"){
                    inStr = texts[TXT_REVOLT_CHAT_MSG].split("%1")
                        .join(inStr.split("#")[2]).split("%2")
                        .join(inStr.split("#")[3]).split("%3")
                        .join(inStr.split("#")[4]);
            } else {
                if (inStr[0: 4] == "#a+#"){
                    inStr = texts[TXT_GUILD_ATTACK_SUCCESS].split("%1")
                        .join(((inStr.split("#")[2].split(" ")[1] + " ")
                          + inStr.split("#")[2].split(" ")[0])).split("%2")
                            .join(inStr.split("#")[3]);
                    if (getGBMode){
                        return ("1");
                    };
            } else {
                if (inStr[0: 4] == "#a-#"){
                    inStr = texts[TXT_GUILD_ATTACK_FAIL].split("%1")
                        .join(((inStr.split("#")[2].split(" ")[1] + " ")
                              + inStr.split("#")[2].split(" ")[0])).split("%2")
                            .join(inStr.split("#")[3]);
                    if (getGBMode){
                        return ("1");
                    };
            } else {
                if (inStr[0: 4] == "#d+#"){
                    inStr = texts[TXT_GUILD_DEFENSE_SUCCESS].split("%1")
                        .join(((inStr.split("#")[2].split(" ")[1] + " ")
                          + inStr.split("#")[2].split(" ")[0])).split("%2")
                            .join(inStr.split("#")[3]);
                    if (getGBMode){
                        return ("1");
                    };
            } else {
                if (inStr[0: 4] == "#d-#"){
                    inStr = texts[TXT_GUILD_DEFENSE_FAIL]
                        .split("%1").join(((inStr.split("#")[2].split(" ")[1]
                          + " ") + inStr.split("#")[2].split(" ")[0]))
                            .split("%2").join(inStr.split("#")[3]);
                    if (getGBMode){
                        return ("1");
                    };
            } else {
                if (inStr[0: 4] == "#r+#"){
                    inStr = texts[TXT_GUILD_RAID_SUCCESS]
                        .split("%1").join(((("(50/" + inStr.split("#")[2])
                          + ") ") + texts[((TXT_DUNGEON_NAMES
                          + int(inStr.split("#")[2])) - 1)]));
                    if (getGBMode){
                        return ("1");
                    };
            } else {
                if (inStr[0: 4] == "#r-#"){
                    inStr = texts[TXT_GUILD_RAID_FAIL].split("%1")
                        .join(((("(50/" + inStr.split("#")[2]) + ") ")
                              + texts[((TXT_DUNGEON_NAMES
                                       + int(inStr.split("#")[2])) - 1)]));
                    if (getGBMode){
                        return ("1");
                    };
            } else {
                if (inStr[0: 4] == "#lu#"){
                    inStr = texts[TXT_GUILD_LEVEL_UP].split("%1")
                        .join(inStr.split("#")[2]).split("%2")
                        .join(inStr.split("#")[3]);
            } else {
                if (inStr[0: 4] == "#du#"){
                    inStr = texts[TXT_GUILD_DUNGEON_COMPLETED].split("%1")
                        .join(inStr.split("#")[2]).split("%2")
                        .join(texts[(((inStr.split("#")[3] == 100)) ? 9538
                              : ((TXT_DUNGEON_NAME + (1 * inStr.split("#")[3]))
                                 - 1))].split("|")[0]).split("%3")
                                    .join(inStr.split("#")[4]);
            } else {
                if (inStr[0: 4] == "#ep#"){
                    inStr = texts[TXT_GUILD_EPICITEM].split("%1")
                        .join(inStr.split("#")[2]).split("%2")
                        .join(GetItemName(0, inStr.split("#")[3].split("/")));
                };
        } else {
            if (inStr[0: 4] == "#dg#"){
                inStr = ((((((inStr.split("#")[2] + " ")
                         + texts[TXT_DONATE_GOLD_1]) + " ")
                        + str((Number(inStr.split("#")[3]) / 100))) + " ")
                        + texts[TXT_DONATE_GOLD_2]);
        } else {
            if (inStr[0: 4] == "#dm#"){
                inStr = ((((((inStr.split("#")[2] + " ")
                         + texts[TXT_DONATE_MUSH_1]) + " ")
                            + inStr.split("#")[3]) + " ")
                            + texts[TXT_DONATE_MUSH_2]);
        } else {
            if (inStr[0: 4] == "#sr#"){
                if (texts[TXT_SERVER_STARTED]){
                    inStr = texts[TXT_SERVER_STARTED].split("%1")
                        .join(time_str(int(inStr.split("#")[2])));
                } else {
                    inStr = "Server restarted at %1".split("%1")
                        .join(time_str(int(inStr.split("#")[2])));
                };
        } else {
            if (inStr[0: 4] == "#bd#"){
                if (int(inStr.split("#")[3]) == 0){
                    inStr = ((inStr.split("#")[2] + " ")
                             + texts[(TXT_CATAPULT + 7)]);
                } else {
                    inStr = ((inStr.split("#")[2] + " ")
                             + texts[TXT_BUILDING_1].split("%1")
                             .join(texts[((TXT_GILDE_GEBAEUDE_NAME1
                                   + int(inStr.split("#")[3])) - 1)]));
                };
        } else {
            if (inStr[0: 4] == "#ra#"){
                inStr = ((((((inStr.split("#")[2] + " ") + texts[
                         (TXT_RANKMSG_1 + int(inStr.split("#")[3]))]) + " ")
                            + inStr.split("#")[4]) + " ")
                        + texts[(TXT_RANKMSG_6 + int(inStr.split("#")[3]))]);
        } else {
            if (inStr[0: 4] == "#in#"){
                inStr = ((inStr.split("#")[2] + " ") + texts[TXT_GUILD_JOINED])
        } else {
            if (inStr[0: 4] == "#ou#"){
                inStr = ((inStr.split("#")[2] + " ") + texts[TXT_GUILD_QUIT]);
        } else {
            if (inStr[0: 4] == "#rv#"){
                inStr = texts[TXT_REVOLT_CHAT_MSG].split("%1")
                    .join(inStr.split("#")[2]).split("%2")
                    .join(inStr.split("#")[3]).split("%3")
                    .join(inStr.split("#")[4]);
        } else {
            if (inStr[0: 4] == "#a+#"){
                inStr = texts[TXT_GUILD_ATTACK_SUCCESS].split("%1")
                    .join(inStr.split("#")[2]).split("%2")
                    .join(inStr.split("#")[3]);
                if (getGBMode){
                    return ("1");
                };
        } else {
            if (inStr[0: 4] == "#a-#"){
                inStr = texts[TXT_GUILD_ATTACK_FAIL].split("%1")
                    .join(inStr.split("#")[2]).split("%2")
                    .join(inStr.split("#")[3]);
                if (getGBMode){
                    return ("1");
                };
        } else {
            if (inStr[0: 4] == "#d+#"){
                inStr = texts[TXT_GUILD_DEFENSE_SUCCESS].split("%1")
                    .join(inStr.split("#")[2]).split("%2")
                    .join(inStr.split("#")[3]);
                if (getGBMode){
                    return ("1");
                };
        } else {
            if (inStr[0: 4] == "#d-#"){
                inStr = texts[TXT_GUILD_DEFENSE_FAIL].split("%1")
                    .join(inStr.split("#")[2]).split("%2")
                    .join(inStr.split("#")[3]);
                if (getGBMode){
                    return ("1");
                };
        } else {
            if (inStr[0: 4] == "#r+#"){
                inStr = texts[TXT_GUILD_RAID_SUCCESS].split("%1")
                    .join((((texts[((TXT_DUNGEON_NAMES + int(inStr
                          .split("#")[2])) - 1)] + " (") + inStr
                            .split("#")[2]) + "/50)"));
                if (getGBMode){
                    return ("1");
                };
        } else {
            if (inStr[0:4] == "#r-#"){
                inStr = texts[TXT_GUILD_RAID_FAIL]
                    .split("%1").join((((texts[
                        ((TXT_DUNGEON_NAMES + int(inStr.split("#")[2])) - 1)]
                        + " (") + inStr.split("#")[2]) + "/50)"));
                if (getGBMode){
                    return ("1");
                };
        } else {
            if (inStr[0:4] == "#lu#"){
                inStr = texts[TXT_GUILD_LEVEL_UP].split("%1")
                    .join(inStr.split("#")[2])
                    .split("%2").join(inStr.split("#")[3]);
        } else {
            if (inStr[0:4] == "#du#"){
                inStr = texts[TXT_GUILD_DUNGEON_COMPLETED]
                    .split("%1").join(inStr.split("#")[2])
                    .split("%2").join(texts[(((inStr.split("#")[3] == 100))
                        ? 9538 : (TXT_DUNGEON_NAME + (1 * inStr.split("#")[3]))
                        - 1)].split("|")[0])
                        .split("%3").join(inStr.split("#")[4]);
        } else {
            if (inStr[0:4] == "#ep#"){
                inStr = texts[TXT_GUILD_EPICITEM]
                    .split("%1").join(inStr.split("#")[2])
                    .split("%2").join(
                          GetItemName(0, inStr.split("#")[3].split("/")));
            };
        if (on_stage(LBL_GILDE_TITEL)){
            send_action(ACT_SCREEN_GILDEN);
        };
        if (getGBMode){
            return ("0");
        };
        if (getHLMode){
            return (str(inStr.length));
        };
    };
    if (getHLMode){
        return (str(inStr.find("§")));
    };
    return (inStr);
}

def chat_line(line:String, isError=False, hlIndex=-1,
              isWhisper=False){
    var i:* = 0;
    var nextLine:* = None;
    var line:* = line;
    var isError:Boolean = isError;
    var hlIndex = hlIndex;
    var isWhisper:Boolean = isWhisper;
    nextLine = "";
    var seekSpace:* = False;
    var noSpace:* = False;
    var indent:* = 0;
    if (GildeChatScroll > 0){
        GildeChatScroll++;
    };
    if (GildeChatScroll > 35){
        GildeChatScroll = 35;
    };
    line = swap_words(line);
    while (line.split("  ").length > 1) {
        line = line.split("  ").join(" ");
    };
    i = 0;
    while (i < 39) {
        var _local6 = actor[(LBL['GILDE']['CHAT'] + i)];
        with (_local6) {
            default_text_format = actor[((LBL['GILDE']['CHAT']
                                         + i) + 1)].default_text_format;
            htmlText = actor[((LBL['GILDE']['CHAT'] + i) + 1)].htmlText;
            y = (GILDE_CHAT_Y + (((i + GildeChatScroll) - 35) * GILDE_CHAT_Y));
            visible = ((((i + GildeChatScroll) >= 35)) and
                       (((i + GildeChatScroll) < 40)));
        };
        i = (i + 1);
    };
    _local6 = actor[(LBL['GILDE']['CHAT'] + 39)];
    with (_local6) {
        default_text_format = ((isError)
                               ? font_format_chatError : font_format_chat);
        if (isWhisper){
            default_text_format = font_format_chatWhisper;
        };
        do  {
            text = line;
            if ((((text_width > GILDE_TEXT_X)) or (seekSpace))){
                if (!noSpace){
                    seekSpace = True;
                };
                if ((((text_width <= GILDE_TEXT_X)) and (
                    (line[(line.length - 1):] == " ")))){
                    seekSpace = False;
                } else {
                    nextLine = (line[(line.length - 1):] + nextLine);
                };
                line = line[0: (line.length - 1)]
                if (line == ""){
                    line = nextLine;
                    nextLine = "";
                    noSpace = True;
                    seekSpace = False;
                    text = line;
                };
            };
        } while ((((text_width > GILDE_TEXT_X)) or (seekSpace)));
        if (hlIndex > -1){
            if (hlIndex > text.length){
                hlIndex = text.length;
            };
            if (isWhisper){
                if (text_dir == "right"){
                    setTextFormat(FontFormat_HighlightWhisper, hlIndex, length)
                } else {
                    setTextFormat(FontFormat_HighlightWhisper, 0, hlIndex);
                };
            } else {
                if (text_dir == "right"){
                    setTextFormat(FontFormat_Highlight, hlIndex, length);
                } else {
                    setTextFormat(FontFormat_Highlight, 0, hlIndex);
                };
            };
        };
        if (GildeChatScroll == 0){
            y = (GILDE_CHAT_Y + ((39 - 35) * GILDE_CHAT_Y));
            visible = True;
        };
    };
    if (nextLine != ""){
        chat_line(nextLine, isError, -1, isWhisper);
    };
}

def PayMethod(DealerMenu){
    if (DealerMenu > (pay_methods.length - 1)){
        return (0);
    };
    return (pay_methods[DealerMenu]);
}

def toiletTankAdjustEvent(evt:TimerEvent=None){
    actor[(TOILET + 1)].y = ((190 + 122) - (toiletTankCurrent * 118));
    if (toiletTankCurrent > (toiletTankDest + 0.01)){
        toiletTankCurrent = (toiletTankCurrent - 0.01);
    } else {
        if (toiletTankCurrent < (toiletTankDest - 0.01)){
            toiletTankCurrent = (toiletTankCurrent + 0.01);
        } else {
            toiletTankCurrent = toiletTankDest;
            toiletTankAdjustTimer.stop();
        };
    };
}

def next_fight(evt:TimerEvent){
    var guildFightExp;
    var guildFightHonor;
    var par:Array;
    var thisRoundFighterName:String;
    var GuildBattleData:Array;
    var tmp_str:*;
    guildFightExp = 0;
    guildFightHonor = 0;
    if (fights.length < 2){
        fights = list();
        return;
    };
    thisRoundFighterName = "";
    var nextRoundFighterName:String = "";
    var thisRoundOppName:String = "";
    if (skip_guild_fights > 0){
        while (fights.length > 3) {
            if (thisRoundFighterName != ""){
                last_round_fighter_name = thisRoundFighterName;
            };
            if (fights[0].split(";")[2].split("/")[5] > 0){
                thisRoundFighterName = fights[0].split(";")[2].split("/")[0];
            } else {
                thisRoundFighterName = "?";
            };
            thisRoundOppName = fights[0].split(";")[2].split("/")[15];
            if (thisRoundFighterName.lower() == actor[INP['NAME'
                ]].getChildAt(1).text.lower()){
                if (skip_guild_fights == 1){
                    skip_guild_fights = -1;
                    break;
                };
            };
            if (fights[2]){
                nextRoundFighterName = fights[2].split(";")[2].split("/")[0];
                if (last_round_fighter_name == thisRoundFighterName){
                    if (winners[("name_" + thisRoundFighterName)]){
                        var _local10 = winners;
                        var _local11 = ("name_" + thisRoundFighterName);
                        var _local12 = (_local10[_local11] + 1);
                        _local10[_local11] = _local12;
                    } else {
                        winners[("name_" + thisRoundFighterName)] = 1;
                    };
                };
            };
            fights.shift();
            fights.shift();
        };
    };
    thisRoundFighterName = fights[0].split(";")[2].split("/")[0];
    if (thisRoundFighterName.lower() == actor[INP['NAME'
        ]].getChildAt(1).text.lower()){
        if (skip_guild_fights == 1){
            skip_guild_fights = -1;
        };
    };
    par = fights.shift().split(";");
    GuildBattleData = fights.shift().split("/");
    if (fights.length == 1){
        tmp_str = fights.pop();
        guildFightExp = tmp_str.split(";")[1];
        guildFightHonor = tmp_str.split(";")[2];
    };
    post_fight_mode = False;
    fightNumber = ((guild_fight_count - int(((fights.length + 1) / 2)))
     (((guild_fight_count % 2))==0) ? 1 : 0);
    if (fightNumber > guild_fight_count){
        fightNumber = 1;
    };
    show_fight_screen(par[0].split("/"), par[1].split("/"), (par[6] == "1"),
                      par[2].split("/"), (par[5] == "2"), ((par[3] + "/")
                                                       + par[4]).split("/"),
                        int(par[7]), int(par[8]), (par[5] == "3"), False,
                        int(par[9]), GuildBattleData, (fights.length <= 1),
                        guildFightExp, guildFightHonor, par[10], par[11],
                        par[12]);
}

def guild_fight_timer_fn(evt:TimerEvent){
    if (guild_attack_time != 0){
        if (!WaitingFor(guild_attack_time)){
            if (on_stage(LBL['GILDE']['CHAT']_CAPTION)){
                send_action(ACT_SCREEN_GILDEN);
            } else {
                pulse_gilde = True;
            };
            guild_attack_time = 0;
        };
    };
    if (guild_defense_time != 0){
        if (!WaitingFor(guild_defense_time)){
            if (on_stage(LBL['GILDE']['CHAT']_CAPTION)){
                send_action(ACT_SCREEN_GILDEN);
            } else {
                pulse_gilde = True;
            };
            guild_defense_time = 0;
        };
    };
}

def expand_item_structure(arr:Array, offset){
    var typeOriginal:Number;
    var picOriginal:Number;
    var mushOriginal:Number;
    var enchantment;
    var socket;
    var enchantmentPower;
    var socketPower;
    typeOriginal = arr[(offset + SG_ITM_TYP)];
    picOriginal = arr[(offset + SG['ITM']['PIC'])];
    mushOriginal = arr[(offset + SG_ITM_MUSH)];
    enchantment = int((typeOriginal / math.pow(2, 24)));
    socket = (typeOriginal - (enchantment * math.pow(2, 24)));
    socket = (socket / math.pow(2, 16));
    typeOriginal = ((typeOriginal - (enchantment * math.pow(2, 24)))
                    - (socket * math.pow(2, 16)));
    enchantmentPower = int((picOriginal / math.pow(2, 16)));
    picOriginal = (picOriginal - (enchantmentPower * math.pow(2, 16)));
    socketPower = int((mushOriginal / math.pow(2, 16)));
    mushOriginal = (mushOriginal - (socketPower * math.pow(2, 16)));
    arr[(offset + SG_ITM_TYP)] = typeOriginal;
    arr[(offset + SG['ITM']['PIC'])] = picOriginal;
    arr[(offset + SG_ITM_MUSH)] = mushOriginal;
    arr[(offset + SG_ITM_EXT_SOCKET)] = socket;
    arr[(offset + SG_ITM_EXT_ENCHANT)] = enchantment;
    arr[(offset + SG_ITM_EXT_ENCHANT_POWER)] = enchantmentPower;
    arr[(offset + SG_ITM_EXT_SOCKET_POWER)] = socketPower;
}

def WaitingFor(targetTime:Number):
    var tmpTime:Date;
    tmpTime = new Date();
    tmpTime.setTime(((targetTime * 1000) - ((1000 * 60) * 60)));
    return ((game_time.getTime() < tmpTime.getTime()));
}

def WaitingTime(targetTime:Number):String{
    var tmpTime:* = None;
    var timeDiff:* = None;
    var targetTime:* = targetTime;
    tmpTime = new Date();
    timeDiff = new Date();
    var diffDays:* = 0;
    tmpTime.setTime(((targetTime * 1000) - ((1000 * 60) * 60)));
    timeDiff.setTime((tmpTime.getTime() - game_time.getTime()));
    var _local3 = timeDiff;
    diffDays = ((((timeDiff.getTime() / 1000) / 60) / 60) / 24);
    return ((((diffDays > 0)) ? ((str((diffDays + 1)) + " ")
            + texts[(((diffDays == 0))
                     ? TXT_TAG : TXT_TAGE)])
                    : ((((((getUTCHours())>0)
                       ? (str((getUTCHours() - 0)) + ":")
                       : "" + ((getUTCMinutes())<10) ? "0" : "")
                        + str(getUTCMinutes())) + ((getUTCSeconds())<10)
                    ? ":0" : ":") + str(getUTCSeconds()))));
}

def WaitingProgress(startTime:Number, targetTime:Number):
    var tmpTime:Date;
    var tmpTime2:Date;
    tmpTime = new Date();
    tmpTime2 = new Date();
    tmpTime.setTime(((targetTime * 1000) - ((1000 * 60) * 60)));
    tmpTime2.setTime(((startTime * 1000) - ((1000 * 60) * 60)));
    return (((game_time.getTime() - tmpTime2.getTime())
            / (tmpTime.getTime() - tmpTime2.getTime())));
}

def LOGonRTL(){
    if (text_dir == "right"){
        actor[LBL_NAME].x = (((IF_WIN_X + IF_GOTO_LOGIN_X) - 15)
                             - actor[LBL_NAME].text_width);
        actor[LBL_LOGIN_PASSWORD].x = (((IF_WIN_X + IF_GOTO_LOGIN_X) - 15)
                                       - actor[LBL_LOGIN_PASSWORD].text_width);
        actor[LBL_EMAIL].x = (((IF_WIN_X + IF_GOTO_LOGIN_X) - 15)
                              - actor[LBL_EMAIL].text_width);
        actor[LBL_PASSWORD].x = (((IF_WIN_X + IF_GOTO_LOGIN_X) - 15)
                                 - actor[LBL_PASSWORD].text_width);
        actor[INP['NAME']].x = (IF_WIN_X + IF_WIN_INPUTS_X);
        actor[INP['LOGIN_PASSWORD']].x = (IF_WIN_X + IF_WIN_INPUTS_X);
        actor[INP['EMAIL']].x = (IF_WIN_X + IF_WIN_INPUTS_X);
        actor[INP['PASSWORD']].x = (IF_WIN_X + IF_WIN_INPUTS_X);
    };
}

def ModifyCharacter(evt:Event):
    var actor_id:* = 0;
    var evt:* = evt;
    var RemoveColorOffset:* = function (val, type){
        if ((getCharImageBound(char_volk, char_male, 11) & type)){
            while (val >= 100) {
                val = (val - 100);
            };
        };
        return (val);
    };
    var AddColorOffset:* = function (val, type){
        if ((getCharImageBound(char_volk, char_male, 11) & type)){
            val = (val + (100 * char_color));
        };
        return (val);
    };
    actor_id = get_actor_id(evt.target);
    char_hair = RemoveColorOffset(char_hair, C_HAIR);
    char_brows = RemoveColorOffset(char_brows, C_BROWS);
    char_beard = RemoveColorOffset(char_beard, C_BEARD);
    char_special2 = RemoveColorOffset(char_special2, C_SPECIAL2);
    Switch (actor_id){
        if case(MOUTH_MINUS:
            char_mouth--;
            if (char_mouth < 1){
                char_mouth = getCharImageBound(char_volk, char_male, 1);
            };
            break;
        if case(MOUTH_PLUS:
            char_mouth++;
            if (char_mouth > getCharImageBound(char_volk, char_male, 1)){
                char_mouth = 1;
            };
            break;
        if case(HAIR_MINUS:
            char_hair--;
            if (char_hair < 1){
                char_hair = getCharImageBound(char_volk, char_male, 7);
            };
            break;
        if case(HAIR_PLUS:
            char_hair++;
            if (char_hair > getCharImageBound(char_volk, char_male, 7)){
                char_hair = 1;
            };
            break;
        if case(BROWS_MINUS:
            char_brows--;
            if (char_brows < 1){
                char_brows = getCharImageBound(char_volk, char_male, 5);
            };
            break;
        if case(BROWS_PLUS:
            char_brows++;
            if (char_brows > getCharImageBound(char_volk, char_male, 5)){
                char_brows = 1;
            };
            break;
        if case(EYES_MINUS:
            char_eyes--;
            if (char_eyes < 1){
                char_eyes = getCharImageBound(char_volk, char_male, 4);
            };
            break;
        if case(EYES_PLUS:
            char_eyes++;
            if (char_eyes > getCharImageBound(char_volk, char_male, 4)){
                char_eyes = 1;
            };
            break;
        if case(BEARD_MINUS:
            char_beard--;
            if (char_beard < 1){
                char_beard = getCharImageBound(char_volk, char_male, 2);
            };
            break;
        if case(BEARD_PLUS:
            char_beard++;
            if (char_beard > getCharImageBound(char_volk, char_male, 2)){
                char_beard = 1;
            };
            break;
        if case(NOSE_MINUS:
            char_nose--;
            if (char_nose < 1){
                char_nose = getCharImageBound(char_volk, char_male, 3);
            };
            break;
        if case(NOSE_PLUS:
            char_nose++;
            if (char_nose > getCharImageBound(char_volk, char_male, 3)){
                char_nose = 1;
            };
            break;
        if case(EARS_MINUS:
            char_ears--;
            if (char_ears < 1){
                char_ears = getCharImageBound(char_volk, char_male, 6);
            };
            break;
        if case(EARS_PLUS:
            char_ears++;
            if (char_ears > getCharImageBound(char_volk, char_male, 6)){
                char_ears = 1;
            };
            break;
        if case(SPECIAL_MINUS:
            char_special--;
            if (char_special < 1){
                char_special = getCharImageBound(char_volk, char_male, 8);
            };
            break;
        if case(SPECIAL_PLUS:
            char_special++;
            if (char_special > getCharImageBound(char_volk, char_male, 8)){
                char_special = 1;
            };
            break;
        if case(SPECIAL2_MINUS:
            char_special2--;
            if (char_special2 < 1){
                char_special2 = getCharImageBound(char_volk, char_male, 9);
            };
            break;
        if case(SPECIAL2_PLUS:
            char_special2++;
            if (char_special2 > getCharImageBound(char_volk, char_male, 9)){
                char_special2 = 1;
            };
            break;
        if case(COLOR_PLUS:
            char_color++;
            if (char_color > getCharImageBound(char_volk, char_male, 10)){
                char_color = 1;
            };
            break;
        if case(COLOR_MINUS:
            char_color--;
            if (char_color < 1){
                char_color = getCharImageBound(char_volk, char_male, 10);
            };
            break;
    };
    char_hair = AddColorOffset(char_hair, C_HAIR);
    char_brows = AddColorOffset(char_brows, C_BROWS);
    char_beard = AddColorOffset(char_beard, C_BEARD);
    char_special2 = AddColorOffset(char_special2, C_SPECIAL2);
    LoadCharacterImage();
}

def LoadCharacterImage(actor_id=0, loadOnly=False, isVolk=0,
                       isMann=False, isKaste=0, isMouth=0,
                       isBeard=0, isNose=0, isEyes=0, isBrows=0,
                       isEars=0, isHair=0, isSpecial=0,
                       isSpecial2=0):
    var charPrefix:* = None;
    var i:* = 0;
    var actorOffset:* = 0;
    var actor_id = actor_id;
    var loadOnly:Boolean = loadOnly;
    var isVolk = isVolk;
    var isMann:Boolean = isMann;
    var isKaste = isKaste;
    var isMouth = isMouth;
    var isBeard = isBeard;
    var isNose = isNose;
    var isEyes = isEyes;
    var isBrows = isBrows;
    var isEars = isEars;
    var isHair = isHair;
    var isSpecial = isSpecial;
    var isSpecial2 = isSpecial2;
    var LoadCharacterItemImage:* = function (localActorID,
                                             parURL:String, itemIndex):
        var newLoad:Boolean;
        var url:String;
        url = (img_url[img_url_index] + parURL);
        if ((((itemIndex > 0)) and ((getCharImageBound(isVolk,
            isMann, itemIndex) == 0)))){
            url = (img_url[img_url_index] + "res/gfx/empty.png");
        };
        newLoad = !((actorURL[localActorID] == url));
        actorURL[localActorID] = url;
        if (newLoad){
            actorLoaded[localActorID] = 0;
            load(localActorID);
        };
    };
    charPrefix = getCharPrefix(False, isVolk, isMann, isKaste);
    if (actor_id == C_EMPTY){
        if (on_stage(SCR_BUILDCHAR_BACKGROUND)){
            var _local16 = actor[LBL_CREATE_RACE];
            with (_local16) {
                text = texts[((TXT_RACENAME + char_volk) - 1)];
                if (text_dir == "right"){
                    x = ((actor[LBL_CREATE_RACE_DESC].x
                         + actor[LBL_CREATE_RACE_DESC].width) - text_width);
                };
            };
            _local16 = actor[LBL_CREATE_RACE_DESC];
            with (_local16) {
                text = texts[((TXT_RACEDESC + char_volk) - 1)];
                y = ((actor[LBL_CREATE_RACE].y
                     + actor[LBL_CREATE_RACE].textHeight) + BUILDCHAR_LINES_Y);
            };
            arabize(LBL_CREATE_RACE_DESC);
            _local16 = actor[LBL_CREATE_CLASS];
            with (_local16) {
                text = texts[((KlasseGewählt)
                              ? ((TXT_CLASSNAME + char_class) - 1)
                              : TXT_NOCLASS)];
                y = ((actor[LBL_CREATE_RACE_DESC].y
                     + actor[LBL_CREATE_RACE_DESC].textHeight)
                     + BUILDCHAR_LINES_Y);
                if (text_dir == "right"){
                    x = ((actor[LBL_CREATE_RACE_DESC].x
                         + actor[LBL_CREATE_RACE_DESC].width) - text_width);
                };
            };
            _local16 = actor[LBL_CREATE_CLASS_DESC];
            with (_local16) {
                text = texts[((KlasseGewählt)
                              ? ((TXT_CLASSDESC + char_class) - 1)
                              : TXT_NOCLASS_DESC)];
                y = ((actor[LBL_CREATE_CLASS].y +
                     actor[LBL_CREATE_CLASS].textHeight)
                    + BUILDCHAR_LINES_Y);
            };
            arabize(LBL_CREATE_CLASS_DESC);
        };
        LoadCharacterImage(CHARBACKGROUND, loadOnly, char_volk, char_male,
                           char_class, char_mouth, char_beard, char_nose,
                           char_eyes, char_brows, char_ears, char_hair,
                           char_special, char_special2);
        if (on_stage(SCR_BUILDCHAR_BACKGROUND)){
            remove(VOLK_BTNS_ALL);
            add(F_IDLE);
            add(M_IDLE);
            if (char_male){
                add(VOLK_BTNS_M);
                add(((VOLK_1_M_ACT + char_volk) - 1));
                add(M_ACT);
            } else {
                add(VOLK_BTNS_F);
                add(((VOLK_1_F_ACT + char_volk) - 1));
                add(F_ACT);
            };
            add(KASTE_1_IDLE);
            add(KASTE_2_IDLE);
            add(KASTE_3_IDLE);
            if (KlasseGewählt){
                add((KASTE_1_ACT + ((char_class - 1) * 2)));
            };
            i = 1;
            while (i < 11) {
                if (getCharImageBound(char_volk, char_male, i) == 0){
                    remove((MOUTH_MINUS + ((i - 1) * 2)));
                    remove((MOUTH_PLUS + ((i - 1) * 2)));
                    remove((LBL_MOUTH + (i - 1)));
                } else {
                    add((MOUTH_MINUS + ((i - 1) * 2)));
                    add((MOUTH_PLUS + ((i - 1) * 2)));
                    add((LBL_MOUTH + (i - 1)));
                };
                i = (i + 1);
            };
            PositionModifyCharacterButtons();
            if (!on_stage(CREATE_CHARACTER)){
                remove(CREATE_GOTO_LOGIN, KASTE_1_IDLE, KASTE_2_IDLE,
                       KASTE_3_IDLE, KASTE_1_ACT, KASTE_2_ACT, KASTE_3_ACT,
                       CREATE_CHARACTER, BLACK_SQUARE);
                add_some(MODIFY_CHARACTER, IF_EXIT);
            };
        };
        return;
    };
    LoadCharacterItemImage(actor_id,
                           (charPrefix + getCharSuffix(0, isKaste)), 0);
    LoadCharacterItemImage((actor_id + 1),
                           (charPrefix + getCharSuffix(1, isMouth)), 1);
    LoadCharacterItemImage((actor_id + 2),
                           (charPrefix + getCharSuffix(2, isBeard)), 2);
    LoadCharacterItemImage((actor_id + 3),
                           (charPrefix + getCharSuffix(3, isNose)), 3);
    LoadCharacterItemImage((actor_id + 4),
                           (charPrefix + getCharSuffix(4, isEyes)), 4);
    LoadCharacterItemImage((actor_id + 5),
                           (charPrefix + getCharSuffix(5, isBrows)), 5);
    LoadCharacterItemImage((actor_id + 6),
                           (charPrefix + getCharSuffix(6, isEars)), 6);
    LoadCharacterItemImage((actor_id + 7),
                           (charPrefix + getCharSuffix(7, isHair)), 7);
    LoadCharacterItemImage((actor_id + 8),
                           (charPrefix + getCharSuffix(8, isSpecial)), 8);
    LoadCharacterItemImage((actor_id + 9),
                           (charPrefix + getCharSuffix(9, isSpecial2)), 9);
    actorOffset = (actor_id - CHARBACKGROUND);
    if (!loadOnly){
        add((CHARIMG + actorOffset));
        if ((((isVolk == 2)) and (isMann))){
            AddBMO(CHARSPECIALOVL_ELF_M, actorOffset);
        };
        if ((((isVolk == 7)) and (isMann))){
            AddBMO(CHARSPECIALOVL_GOBLIN_M, actorOffset);
        };
        if ((((isVolk == 6)) and (isMann))){
            AddBMO(CHARSPECIALOVL_DARKELF_M, actorOffset);
        };
        if ((((isVolk == 3)) and (isMann))){
            AddBMO(CHARSPECIALOVL_DWARF_M, actorOffset);
        };
        if ((((isVolk == 1)) and (isMann))){
            AddBMO(CHARSPECIALOVL_HUMAN_M, actorOffset);
        };
        if ((((isVolk == 4)) and (isMann))){
            AddBMO(CHARSPECIALOVL_GNOM_M, actorOffset);
        };
        if ((((isVolk == 7)) and (!(isMann)))){
            AddBMO(CHARSPECIALOVL_GOBLIN_F, actorOffset);
        };
        if ((((isVolk == 5)) and (!(isMann)))){
            AddBMO(CHARSPECIALOVL_ORC_F, actorOffset);
        };
        if ((((isVolk == 2)) and (!(isMann)))){
            AddBMO(CHARSPECIALOVL_ELF_F, actorOffset);
        };
        if ((((isVolk == 1)) and (!(isMann)))){
            AddBMO(CHARSPECIALOVL_HUMAN_F, actorOffset);
        };
        if ((((isVolk == 3)) and (!(isMann)))){
            AddBMO(CHARSPECIALOVL_DWARF_F, actorOffset);
        };
    };
}

def PositionModifyCharacterButtons():
    var i:* = 0;
    var positionModifyCharacterBtn:* = function (actor_id):
        if (on_stage(actor_id)){
            actor[actor_id].y = (MODIFY_CHARACTER_BUTTONS_Y
                                 + (iPosi++ * MODIFY_CHARACTER_BUTTONS_1));
        };
    };
    var iPosi:* = 0;
    positionModifyCharacterBtn(EYES_PLUS);
    positionModifyCharacterBtn(BROWS_PLUS);
    positionModifyCharacterBtn(MOUTH_PLUS);
    positionModifyCharacterBtn(NOSE_PLUS);
    positionModifyCharacterBtn(EARS_PLUS);
    positionModifyCharacterBtn(HAIR_PLUS);
    positionModifyCharacterBtn(COLOR_PLUS);
    positionModifyCharacterBtn(BEARD_PLUS);
    positionModifyCharacterBtn(SPECIAL_PLUS);
    positionModifyCharacterBtn(SPECIAL2_PLUS);
    i = 0;
    while (i < 10) {
        if (text_dir == "right"){
            actor[(LBL_MOUTH + i)].x = ((MODIFY_CHARACTER_BUTTONS_X
                                - actor[(LBL_MOUTH + i)].text_width) + 20);
            actor[(MOUTH_MINUS + (i * 2))].x = (MODIFY_CHARACTER_BUTTONS_X
                                                + MODIFY_CHARACTER_LABEL_X);
            actor[(MOUTH_PLUS + (i * 2))].x = (actor[(MOUTH_MINUS + (i * 2))].x
                                               + MODIFY_CHARACTER_BUTTONS_2);
            actor[(MOUTH_MINUS + (i * 2))].y = actor[(MOUTH_PLUS + (i * 2))].y;
            actor[(LBL_MOUTH + i)].y = (actor[(MOUTH_PLUS + (i * 2))].y
                                        + MODIFY_CHARACTER_LABEL_Y);
        } else {
            actor[(MOUTH_MINUS + (i * 2))].x = MODIFY_CHARACTER_BUTTONS_X;
            actor[(MOUTH_PLUS + (i * 2))].x = (actor[(MOUTH_MINUS + (i * 2))].x
                                               + MODIFY_CHARACTER_BUTTONS_2);
            actor[(MOUTH_MINUS + (i * 2))].y = actor[(MOUTH_PLUS + (i * 2))].y;
            actor[(LBL_MOUTH + i)].x = (actor[(MOUTH_PLUS + (i * 2))].x
                                        + MODIFY_CHARACTER_LABEL_X);
            actor[(LBL_MOUTH + i)].y = (actor[(MOUTH_PLUS + (i * 2))].y
                                        + MODIFY_CHARACTER_LABEL_Y);
        };
        i = (i + 1);
    };
}

def getCharSuffix(itemIndex, itemValue):String{
    var strItem:String;
    var strExt:String;
    var colorIndex;
    var colorString:String;
    strExt = C_CHAREXT;
    colorIndex = 0;
    colorString = "";
    while (itemValue > 100) {
        itemValue = (itemValue - 100);
        colorIndex++;
    };
    if (colorIndex > 0){
        colorString = (("_" + str(colorIndex)) + "_");
    };
    Switch (itemIndex){
        if case(0:
            strExt = ".jpg";
            Switch (itemValue){
                if case(1:
                    strItem = "body_hunter";
                    break;
                if case(2:
                    strItem = "body_mage";
                    break;
                if case(3:
                    strItem = "body_warrior";
                    break;
            };
            break;
        if case(1:
            strItem = ("mund" + str(itemValue));
            break;
        if case(2:
            strItem = (("bart" + colorString) + str(itemValue));
            break;
        if case(-2:
            strItem = ("tattoo" + str(itemValue));
            break;
        if case(3:
            strItem = ("nase" + str(itemValue));
            break;
        if case(4:
            strItem = ("augen" + str(itemValue));
            break;
        if case(5:
            strItem = (("brauen" + colorString) + str(itemValue));
            break;
        if case(6:
            strItem = ("ohren" + str(itemValue));
            break;
        if case(7:
            strItem = (("haare" + colorString) + str(itemValue));
            break;
        if case(8:
            strItem = ("special" + str(itemValue));
            break;
        if case(9:
            strItem = (("special2" + colorString) + str(itemValue));
            break;
    };
    return ((strItem + strExt));
}

def RandomizeCharacter(evt:Event=None):
    char_volk = (int((random.random() * 8)) + 1);
    char_male = (random.random() > 0.5);
    if (param_obj["playerclass"]){
        char_class = int(param_obj["playerclass"]);
        if (char_class < 1){
            char_class = 1;
        };
        if (char_class > 3){
            char_class = 3;
        };
        KlasseGewählt = True;
    } else {
        char_class = (int((random.random() * 3)) + 1);
        KlasseGewählt = False;
    };
    RandomizeCharImage();
}

def RandomizeCharImage(evt:Event=None):
    var evt:* = evt;
    var ColorOffset:* = function (ItemID){
        if ((getCharImageBound(char_volk, char_male, 11) & ItemID)){
            return ((char_color * 100));
        };
        return (0);
    };
    char_color = int(((random.random() * getCharImageBound(char_volk,
                     char_male, 10)) + 1));
    char_mouth = int(((random.random() * getCharImageBound(char_volk,
                     char_male, 1)) + 1));
    char_beard = (int(((random.random() * getCharImageBound(char_volk,
                  char_male, 2)) + 1)) + ColorOffset(C_BEARD));
    char_nose = int(((random.random() * getCharImageBound(char_volk,
                    char_male, 3)) + 1));
    char_eyes = int(((random.random() * getCharImageBound(char_volk,
                    char_male, 4)) + 1));
    char_brows = (int(((random.random() * getCharImageBound(char_volk,
                  char_male, 5)) + 1)) + ColorOffset(C_BROWS));
    char_ears = int(((random.random() * getCharImageBound(char_volk,
                    char_male, 6)) + 1));
    char_hair = (int(((random.random() * getCharImageBound(char_volk,
                 char_male, 7)) + 1)) + ColorOffset(C_HAIR));
    char_special = int(((random.random() * getCharImageBound(char_volk,
                       char_male, 8)) + 1));
    char_special2 = (int(((random.random() * getCharImageBound(char_volk,
                     char_male, 9)) + 1)) + ColorOffset(C_SPECIAL2));
    LoadCharacterImage();
}

def getCharImageBound(isVolk, isMann:Boolean, itemIndex){
    if (isMann){
        Switch (isVolk){
            if case(1:
                Switch (itemIndex){
                    if case(1:
                        return (9);
                    if case(2:
                        return (13);
                    if case(3:
                        return (6);
                    if case(4:
                        return (7);
                    if case(5:
                        return (7);
                    if case(6:
                        return (5);
                    if case(7:
                        return (11);
                    if case(8:
                        return (17);
                    if case(9:
                        return (0);
                    if case(10:
                        return (5);
                    if case(11:
                        return (((C_BROWS + C_HAIR) + C_BEARD));
                };
            if case(2:
                Switch (itemIndex){
                    if case(1:
                        return (8);
                    if case(2:
                        return (7);
                    if case(3:
                        return (7);
                    if case(4:
                        return (8);
                    if case(5:
                        return (5);
                    if case(6:
                        return (4);
                    if case(7:
                        return (10);
                    if case(8:
                        return (13);
                    if case(9:
                        return (0);
                    if case(10:
                        return (3);
                    if case(11:
                        return (((C_HAIR + C_BROWS) + C_BEARD));
                };
            if case(3:
                Switch (itemIndex){
                    if case(1:
                        return (5);
                    if case(2:
                        return (5);
                    if case(3:
                        return (5);
                    if case(4:
                        return (8);
                    if case(5:
                        return (5);
                    if case(6:
                        return (5);
                    if case(7:
                        return (10);
                    if case(8:
                        return (13);
                    if case(9:
                        return (0);
                    if case(10:
                        return (5);
                    if case(11:
                        return (((C_BROWS + C_HAIR) + C_BEARD));
                };
            if case(4:
                Switch (itemIndex){
                    if case(1:
                        return (10);
                    if case(2:
                        return (12);
                    if case(3:
                        return (6);
                    if case(4:
                        return (9);
                    if case(5:
                        return (9);
                    if case(6:
                        return (6);
                    if case(7:
                        return (12);
                    if case(8:
                        return (17);
                    if case(9:
                        return (0);
                    if case(10:
                        return (5);
                    if case(11:
                        return (((C_HAIR + C_BEARD) + C_BROWS));
                };
            if case(5:
                Switch (itemIndex){
                    if case(1:
                        return (7);
                    if case(2:
                        return (5);
                    if case(3:
                        return (5);
                    if case(4:
                        return (6);
                    if case(5:
                        return (5);
                    if case(6:
                        return (5);
                    if case(7:
                        return (10);
                    if case(8:
                        return (9);
                    if case(9:
                        return (0);
                    if case(10:
                        return (5);
                    if case(11:
                        return ((C_HAIR + C_BEARD));
                };
            if case(6:
                Switch (itemIndex){
                    if case(1:
                        return (6);
                    if case(2:
                        return (6);
                    if case(3:
                        return (5);
                    if case(4:
                        return (5);
                    if case(5:
                        return (5);
                    if case(6:
                        return (5);
                    if case(7:
                        return (8);
                    if case(8:
                        return (12);
                    if case(9:
                        return (0);
                    if case(10:
                        return (3);
                    if case(11:
                        return (((C_HAIR + C_BEARD) + C_BROWS));
                };
            if case(7:
                Switch (itemIndex){
                    if case(1:
                        return (6);
                    if case(2:
                        return (8);
                    if case(3:
                        return (5);
                    if case(4:
                        return (9);
                    if case(5:
                        return (6);
                    if case(6:
                        return (5);
                    if case(7:
                        return (12);
                    if case(8:
                        return (12);
                    if case(9:
                        return (0);
                    if case(10:
                        return (0);
                    if case(11:
                        return (0);
                };
            if case(8:
                Switch (itemIndex){
                    if case(1:
                        return (9);
                    if case(2:
                        return (10);
                    if case(3:
                        return (6);
                    if case(4:
                        return (7);
                    if case(5:
                        return (5);
                    if case(6:
                        return (5);
                    if case(7:
                        return (0);
                    if case(8:
                        return (17);
                    if case(9:
                        return (11);
                    if case(10:
                        return (5);
                    if case(11:
                        return ((C_BEARD + C_SPECIAL2));
                };
        };
    } else {
        Switch (isVolk){
            if case(1:
                Switch (itemIndex){
                    if case(1:
                        return (8);
                    if case(2:
                        return (0);
                    if case(3:
                        return (6);
                    if case(4:
                        return (6);
                    if case(5:
                        return (6);
                    if case(6:
                        return (6);
                    if case(7:
                        return (8);
                    if case(8:
                        return (5);
                    if case(9:
                        return (0);
                    if case(10:
                        return (4);
                    if case(11:
                        return ((C_BROWS + C_HAIR));
                };
            if case(2:
                Switch (itemIndex){
                    if case(1:
                        return (8);
                    if case(2:
                        return (0);
                    if case(3:
                        return (8);
                    if case(4:
                        return (7);
                    if case(5:
                        return (8);
                    if case(6:
                        return (7);
                    if case(7:
                        return (8);
                    if case(8:
                        return (5);
                    if case(9:
                        return (0);
                    if case(10:
                        return (4);
                    if case(11:
                        return ((C_HAIR + C_BROWS));
                };
            if case(3:
                Switch (itemIndex){
                    if case(1:
                        return (9);
                    if case(2:
                        return (0);
                    if case(3:
                        return (6);
                    if case(4:
                        return (6);
                    if case(5:
                        return (8);
                    if case(6:
                        return (4);
                    if case(7:
                        return (8);
                    if case(8:
                        return (4);
                    if case(9:
                        return (0);
                    if case(10:
                        return (4);
                    if case(11:
                        return ((C_HAIR + C_BROWS));
                };
            if case(4:
                Switch (itemIndex){
                    if case(1:
                        return (7);
                    if case(2:
                        return (0);
                    if case(3:
                        return (7);
                    if case(4:
                        return (6);
                    if case(5:
                        return (6);
                    if case(6:
                        return (6);
                    if case(7:
                        return (8);
                    if case(8:
                        return (5);
                    if case(9:
                        return (0);
                    if case(10:
                        return (4);
                    if case(11:
                        return ((C_HAIR + C_BROWS));
                };
            if case(5:
                Switch (itemIndex){
                    if case(1:
                        return (7);
                    if case(2:
                        return (0);
                    if case(3:
                        return (5);
                    if case(4:
                        return (6);
                    if case(5:
                        return (5);
                    if case(6:
                        return (4);
                    if case(7:
                        return (8);
                    if case(8:
                        return (7);
                    if case(9:
                        return (0);
                    if case(10:
                        return (4);
                    if case(11:
                        return (C_HAIR);
                };
            if case(6:
                Switch (itemIndex){
                    if case(1:
                        return (9);
                    if case(2:
                        return (0);
                    if case(3:
                        return (6);
                    if case(4:
                        return (6);
                    if case(5:
                        return (6);
                    if case(6:
                        return (3);
                    if case(7:
                        return (6);
                    if case(8:
                        return (5);
                    if case(9:
                        return (0);
                    if case(10:
                        return (3);
                    if case(11:
                        return (C_HAIR);
                };
            if case(7:
                Switch (itemIndex){
                    if case(1:
                        return (9);
                    if case(2:
                        return (0);
                    if case(3:
                        return (5);
                    if case(4:
                        return (6);
                    if case(5:
                        return (5);
                    if case(6:
                        return (4);
                    if case(7:
                        return (8);
                    if case(8:
                        return (4);
                    if case(9:
                        return (0);
                    if case(10:
                        return (4);
                    if case(11:
                        return (C_HAIR);
                };
            if case(8:
                Switch (itemIndex){
                    if case(1:
                        return (8);
                    if case(2:
                        return (5);
                    if case(3:
                        return (7);
                    if case(4:
                        return (6);
                    if case(5:
                        return (5);
                    if case(6:
                        return (4);
                    if case(7:
                        return (7);
                    if case(8:
                        return (6);
                    if case(9:
                        return (4);
                    if case(10:
                        return (3);
                    if case(11:
                        return (C_HAIR);
                };
        };
    };
    return (0);
}

def getCharPrefix(isGut:Boolean, isVolk, isMann:Boolean, isKaste):
    var strTemp:String;
    var strRace:String;
    strTemp = "res/gfx/char/";
    strRace = "";
    Switch (isVolk){
        if case(1:
            strRace = "human";
            break;
        if case(2:
            strRace = "elf";
            break;
        if case(3:
            strRace = "dwarf";
            break;
        if case(4:
            strRace = "gnome";
            break;
        if case(5:
            strRace = "orc";
            break;
        if case(6:
            strRace = "dunkelelf";
            break;
        if case(7:
            strRace = "goblin";
            break;
        if case(8:
            strRace = "demon";
            break;
    };
    strTemp = (strTemp + (strRace + " "));
    strTemp = (strTemp + ((isMann) ? "m" : "f"));
    strTemp = (strTemp + (("/" + strRace) + "_"));
    if (!isMann){
        strTemp = (strTemp + "female_");
    };
    return (strTemp);
}

def DrachenSetzen():
    var i;
    var d;
    var x;
    var y;
    i = IF_DRAGON_1;
    while (i <= IF_DRAGON_13) {
        x = actor[i].x;
        y = actor[i].y;
        delete actor[i];
        d = (random.random() * 5);
        actorBitmap[i] = d;
        Switch (d){
            if case(0:
                actor[i] = new interface_dragon1_png();
                break;
            if case(1:
                actor[i] = new interface_dragon2_png();
                break;
            if case(2:
                actor[i] = new interface_dragon3_png();
                break;
            if case(3:
                actor[i] = new interface_dragon4_png();
                break;
            if case(4:
            if case(5:
                actor[i] = new interface_dragon6_png();
                break;
        };
        actor[i].x = x;
        actor[i].y = y;
        addChild(actor[i]);
        i++;
    };
}

def InterfaceBtnHandler(evt:Event):
    var tmpAction;
    tmpAction = 0;
    Switch (get_actor_id(evt.target)){
        if case(CA_CITY_SHAKES:
        if case(IF_SCHMIEDE:
            tmpAction = ACT_SCREEN_SCHMIEDE;
            break;
        if case(CA_CITY_RUHMESHALLE:
        if case(IF_EHRENHALLE:
            ruhmes_halle_such_string = actor[INP['NAME']].getChildAt(1).text;
            send_action(ACT_SCREEN_EHRENHALLE,
                        actor[INP['NAME']].getChildAt(1).text, -1);
            break;
        if case(CA_CITY_ARENA:
        if case(IF_ARENA:
            tmpAction = ACT_SCREEN_ARENA;
            break;
        if case(CA_CITY_ESEL:
        if case(IF_STALL:
            tmpAction = ACT_SCREEN_STALL;
            break;
        if case(CA_CITY_POST:
        if case(IF_POST:
            post_scroll = 1;
            send_action(ACT_SCREEN_POST, 1);
            break;
        if case(CA_CITY_WACHE:
        if case(IF_ARBEITEN:
            tmpAction = ACT_SCREEN_ARBEITEN;
            break;
        if case(IF_TAVERNE:
        if case(CA_CITY_TAVERNE:
        if case(HUTMANN_BACK:
            tmpAction = ACT_SCREEN_TAVERNE;
            break;
        if case(CA_CITY_ZAUBERLADEN:
        if case(IF_ZAUBERLADEN:
            tmpAction = ACT_SCREEN_ZAUBERLADEN;
            break;
        if case(IF_PILZDEALER:
        if case(CA_CITY_DEALER:
            tmpAction = ACT_SCREEN_PILZDEALER;
            break;
        if case(FIGHT_OK:
            tmpAction = ((post_fight_mode)
                         ? ACT_SCREEN_POST
                         : ACT['SCREEN']['CHAR']);
            if (hasFoughtGuildBattle){
                if (tower_fight_mode){
                    tmpAction = ACT_SCREEN_TOWER;
                } else {
                    tmpAction = ACT_SCREEN_GILDEN;
                };
            };
            if (hasLostMQ){
                hasLostMQ = False;
                tmpAction = 0;
                ShowMainQuestScreen(LastDungeonNr, LastDungeonEnemy);
            };
            break;
        if case(IF_CHARAKTER:
            arrow_hall_mode = False;
            tmpAction = ACT['SCREEN']['CHAR'];
            break;
        if case(IF_GILDEN:
            pulse_gilde = False;
            pulse_gilde_on_history = False;
            tmpAction = ACT_SCREEN_GILDEN;
            break;
        if case(IF_WELTKARTE:
            tmpAction = ACT_SCREEN_WELTKARTE;
            break;
        if case(IF_OPTIONEN:
            tmpAction = ACT['SCREEN']['OPTIONEN'];
            break;
        if case(CA_CITY_BUH:
            slm_count++;
            break;
    };
    if (tmpAction > 0){
        send_action(tmpAction);
    };
}

def guild_chat_poll_fn(e:Event){
    if (param_poll_tunnel_url == ""){
        if (gilde == ""){
            guild_chat_poll.delay = 1000;
            return;
        };
        if (on_stage(INP_GILDE_CHAT)){
            guild_chat_poll.delay = (1000 * interval_multiplier_chat);
        } else {
            if (param_idle_polling > 0){
                guild_chat_poll.delay = (1000 * param_idle_polling);
            } else {
                guild_chat_poll.delay = (1000 * 60);
            };
        };
    } else {
        guild_chat_poll.delay = 1000;
        if (gilde == ""){
            return;
        };
    };
    send_action(ACT_GET_CHAT_HISTORY, last_chat_index);
}

def ChatPollIntervalReset(){
    if (param_poll_tunnel_url != ""){
        guild_chat_poll.stop();
        guild_chat_poll.start();
    };
}


'''
