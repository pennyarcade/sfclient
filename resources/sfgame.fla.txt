
﻿package sfgame_fla {


    public dynamic class MainTimeline extends MovieClip {



        public const ACT_ACCOUNT_CREATE = 1;
        public const ACT_ALBUM = 116;
        public const ACT_ARBEIT = 502;
        public const ACT_ARBEIT_CANCEL = 505;
        public const ACT_BUY_ATTRIB = 21;
        public const ACT_BUY_BEER = 518;
        public const ACT_BUY_LUXURY = 195;
        public const ACT_BUY_MOUNT = 20;
        public const ACT_CHANGE_FACE = 801;
        public const ACT_CHANGE_MAIL = 804;
        public const ACT_CHANGE_NAME = 803;
        public const ACT_CHANGE_PASS = 805;
        public const ACT_CHAR_CREATE = 501;
        public const ACT_COPYCAT_BOOST = 314;
        public const ACT_DEALER_AKTION = 25;
        public const ACT_DEALER_SPONSOR = 26;
        public const ACT_DELETE_ACCOUNT = 802;
        public const ACT_FORGOT_PASSWORD = 3;
        public const ACT_GET_CHAT_HISTORY = 517;
        public const ACT_GUILD_COMMENCE_ATTACK = 114;
        public const ACT_GUILD_DELETE = 102;
        public const ACT_GUILD_DONATE = 111;
        public const ACT_GUILD_EXPEL = 104;
        public const ACT_GUILD_FOUND = 101;
        public const ACT_GUILD_IMPROVE = 107;
        public const ACT_GUILD_INVITE = 103;
        public const ACT_GUILD_JOIN = 110;
        public const ACT_GUILD_JOIN_ATTACK = 112;
        public const ACT_GUILD_JOIN_DEFENSE = 113;
        public const ACT_GUILD_RENAME = 109;
        public const ACT_GUILD_SET_DESC = 108;
        public const ACT_GUILD_SET_MASTER = 105;
        public const ACT_GUILD_SET_OFFICER = 106;
        public const ACT_INVENTORY_CHANGE = 504;
        public const ACT_INVITE_PLAYER = 115;
        public const ACT_KILL_POTION = 27;
        public const ACT_LOAD_CATAPULT = 196;
        public const ACT_LOGIN = 2;
        public const ACT_LOGOUT = 535;
        public const ACT_MAINQUEST = 519;
        public const ACT_MOVE_COPYCAT_ITEM = 318;
        public const ACT_PLACE_BET = 22;
        public const ACT_POST_DELETE = 508;
        public const ACT_POST_READ = 507;
        public const ACT_POST_SEND = 509;
        public const ACT_POST_SEND_GUILD = 536;
        public const ACT_QUEST_BEGIN = 510;
        public const ACT_QUEST_CANCEL = 511;
        public const ACT_QUEST_SKIP = 189;
        public const ACT_RE_LOGIN = 515;
        public const ACT_REQUEST_CHAR = 513;
        public const ACT_REQUEST_GUILD = 503;
        public const ACT_REQUEST_GUILD_NAMES = 533;
        public const ACT_REQUEST_NEWWAREZ = 506;
        public const ACT_REQUEST_TRANS_COUNT = 530;
        public const ACT_RESEND_EMAIL = 531;
        public const ACT_REVOLT = 534;
        public const ACT_ROB_PLAYER = 313;
        public const ACT_SCREEN_ARBEITEN = 12;
        public const ACT_SCREEN_ARENA = 11;
        public const ACT_SCREEN_CHAR = 4;
        public const ACT_SCREEN_EHRENHALLE = 7;
        public const ACT_SCREEN_FREMDGILDE = 23;
        public const ACT_SCREEN_GILDE_GRUENDEN = 17;
        public const ACT_SCREEN_GILDEN = 6;
        public const ACT_SCREEN_GILDENHALLE = 24;
        public const ACT_SCREEN_OPTIONEN = 9;
        public const ACT_SCREEN_PILZDEALER = 16;
        public const ACT_SCREEN_POST = 5;
        public const ACT_SCREEN_SCHMIEDE = 13;
        public const ACT_SCREEN_STALL = 15;
        public const ACT_SCREEN_TAVERNE = 10;
        public const ACT_SCREEN_TOILET = 303;
        public const ACT_SCREEN_TOWER = 312;
        public const ACT_SCREEN_WELTKARTE = 8;
        public const ACT_SCREEN_WITCH = 322;
        public const ACT_SCREEN_ZAUBERLADEN = 14;
        public const ACT_SEND_CHAT = 516;
        public const ACT_SET_PLAYER_DESC = 0x0202;
        public const ACT_START_FIGHT = 0x0200;
        public const ACT_TOILET_FLUSH = 302;
        public const ACT_TOWER_TRY = 313;
        public const ACT_VALIDATE = 532;
        public const ACT_WHISPER = 537;
        public const ACT_WITCH_DONATE = 323;
        public const ACT_WITCH_ENCHANT = 325;
        public const ARROW_MAX = 22950;
        public const ARROW_OFFS = 21900;
        public const BLACK_SQUARE = 1;
        public const BNC_ALBUM_CAT_IN = 24435;
        public const BNC_BEERFEST = 24481;
        public const BNC_BEEROFFER = 23630;
        public const BNC_BUBBLES = 281;
        public const BNC_CHAR_ACH = 23076;
        public const BNC_CHAR_PREISE = 409;
        public const BNC_CHAR_RIGHTPANE = 23078;
        public const BNC_CHAR_SECONDPROP = 408;
        public const BNC_CHARIMG = 329;
        public const BNC_CHARIMG2 = 340;
        public const BNC_CHARIMG_SPECIALOVL_DARKELF_M = 351;
        public const BNC_CHARIMG_SPECIALOVL_DWARF_F = 349;
        public const BNC_CHARIMG_SPECIALOVL_DWARF_M = 343;
        public const BNC_CHARIMG_SPECIALOVL_ELF_F = 347;
        public const BNC_CHARIMG_SPECIALOVL_ELF_M = 341;
        public const BNC_CHARIMG_SPECIALOVL_GNOM_M = 350;
        public const BNC_CHARIMG_SPECIALOVL_GOBLIN_F = 345;
        public const BNC_CHARIMG_SPECIALOVL_GOBLIN_M = 342;
        public const BNC_CHARIMG_SPECIALOVL_HUMAN_F = 348;
        public const BNC_CHARIMG_SPECIALOVL_HUMAN_M = 344;
        public const BNC_CHARIMG_SPECIALOVL_ORC_F = 346;
        public const BNC_CITY_CA_OVL = 264;
        public const BNC_CITY_ORK = 266;
        public const BNC_CITY_OVERLAYS = 267;
        public const BNC_CITY_STATISTEN = 268;
        public const BNC_CITY_ZWERG = 265;
        public const BNC_DUNGEON_CONGRATS = 24356;
        public const BNC_FIDGET_DAY = 23090;
        public const BNC_FIDGET_NIGHT = 23091;
        public const BNC_FIGHT_REWARDS = 24208;
        public const BNC_FUCK = 81;
        public const BNC_GILDE_CHAT = 23449;
        public const BNC_GILDE_CREST = 24541;
        public const BNC_GILDE_CREST_CONTROLS = 24570;
        public const BNC_GILDE_DIALOG_INVITE = 23516;
        public const BNC_GILDE_DIALOG_KICK = 23514;
        public const BNC_GILDE_DIALOG_MASTER = 23515;
        public const BNC_GILDE_DIALOG_RAID = 23518;
        public const BNC_GILDE_DIALOG_REVOLT = 23517;
        public const BNC_GILDE_GEBAEUDE = 23486;
        public const BNC_GILDE_KATAPULT = 24528;
        public const BNC_GILDE_LISTBUTTONS = 23396;
        public const BNC_GILDE_SCHATZ = 23497;
        public const BNC_GILDE_SET_MASTER = 23402;
        public const BNC_GILDE_SET_MEMBER = 23400;
        public const BNC_GILDE_SET_OFFICER = 23401;
        public const BNC_HERO_OF_THE_DAY = 24212;
        public const BNC_HUTBECHER_1_HOVER = 23582;
        public const BNC_HUTBECHER_2_HOVER = 23583;
        public const BNC_HUTBECHER_3_HOVER = 23584;
        public const BNC_HUTMANN_BECHERCHOOSE = 23585;
        public const BNC_HUTMANN_LOST = 23587;
        public const BNC_HUTMANN_PLACEBET = 23581;
        public const BNC_HUTMANN_WON = 23586;
        public const BNC_IF_BUTTONS = 112;
        public const BNC_IF_MAIN = 9;
        public const BNC_IF_OVL = 10;
        public const BNC_IF_STATS = 33;
        public const BNC_INVITE_INPUTDIALOGUE = 22975;
        public const BNC_INVITE_SUCCESS = 22978;
        public const BNC_OPPIMG = 23844;
        public const BNC_OPPIMG2 = 23855;
        public const BNC_OPTION_DOCHANGE = 24306;
        public const BNC_OPTION_DORESEND = 24307;
        public const BNC_POST_DAWN = 23263;
        public const BNC_POST_FLUSHMSG = 24592;
        public const BNC_POST_LIST = 23291;
        public const BNC_POST_NIGHT = 23264;
        public const BNC_POST_READ = 23293;
        public const BNC_POST_WRITE = 23292;
        public const BNC_PURCHASE_BUTTONS = 25634;
        public const BNC_QUESTOFFER = 23625;
        public const BNC_SCR_BUILDCHAR = 118;
        public const BNC_SCREEN_ALBUM = 24438;
        public const BNC_SCREEN_ARBEITEN = 316;
        public const BNC_SCREEN_ARBEITEN_SUCCESS = 318;
        public const BNC_SCREEN_ARBEITEN_WAIT = 317;
        public const BNC_SCREEN_ARENA = 23304;
        public const BNC_SCREEN_ARENA_DAWN = 23307;
        public const BNC_SCREEN_ARENA_DAY = 23305;
        public const BNC_SCREEN_ARENA_NIGHT = 23306;
        public const BNC_SCREEN_BUILDCHAR = 116;
        public const BNC_SCREEN_CHAR = 23079;
        public const BNC_SCREEN_CHAR_GOLDEN = 24531;
        public const BNC_SCREEN_CITY = 263;
        public const BNC_SCREEN_CITY_DAWN = 261;
        public const BNC_SCREEN_CITY_DAY = 262;
        public const BNC_SCREEN_CITY_NIGHT = 260;
        public const BNC_SCREEN_DEALER = 23256;
        public const BNC_SCREEN_DEALER2 = 23257;
        public const BNC_SCREEN_DEMO = 24243;
        public const BNC_SCREEN_DISCONNECTED = 24370;
        public const BNC_SCREEN_EMAIL_NAG = 24375;
        public const BNC_SCREEN_FIDGET = 23103;
        public const BNC_SCREEN_FIGHT = 24240;
        public const BNC_SCREEN_GILDE_GRUENDEN = 23498;
        public const BNC_SCREEN_GILDEN = 23499;
        public const BNC_SCREEN_HALLE = 283;
        public const BNC_SCREEN_HLMAINQUESTS = 24767;
        public const BNC_SCREEN_HUTMANN = 23588;
        public const BNC_SCREEN_INVITE = 22974;
        public const BNC_SCREEN_MAINQUEST = 24366;
        public const BNC_SCREEN_MAINQUESTS = 24353;
        public const BNC_SCREEN_OPTION = 24308;
        public const BNC_SCREEN_POST = 23294;
        public const BNC_SCREEN_QUEST = 23213;
        public const BNC_SCREEN_SHAKES = 23104;
        public const BNC_SCREEN_STALL = 23358;
        public const BNC_SCREEN_TAVERNE = 23532;
        public const BNC_SCREEN_TOILET = 24598;
        public const BNC_SCREEN_TOWER = 24716;
        public const BNC_SCREEN_WITCH = 25635;
        public const BNC_SCREEN_WORLDMAP = 23106;
        public const BNC_SPECIAL_ACTION = 24496;
        public const BNC_STALL_BOESE = 23342;
        public const BNC_STALL_GUT = 23341;
        public const BNC_TAVERNE_CAS = 23533;
        public const BNC_TAVERNE_QUESTOVL = 23539;
        public const BNC_TOILET_OVERLAYS = 24613;
        public const BNC_TOWER_BOOSTPRICE = 25608;
        public const BNC_TOWER_PIECES = 24752;
        public const BNC_VOLK_BTNS_ALL = 165;
        public const BNC_VOLK_BTNS_F = 163;
        public const BNC_VOLK_BTNS_M = 164;
        public const BNC_WINDOW_ARENA = 23302;
        public const BNC_WINDOW_FORGOT_PASSWORD = 79;
        public const BNC_WINDOW_LOGIN = 77;
        public const BNC_WINDOW_SIGNUP = 78;
        public const BTN_ALBUM_NEXT = 24437;
        public const BTN_ALBUM_PREV = 24436;
        public const BTN_ARENA_OK = 23301;
        public const BTN_BACK = 114;
        public const BTN_BATTLE_SKIP = 24188;
        public const BTN_BATTLE_SKIPONE = 24189;
        public const BTN_BEARD_MINUS = 168;
        public const BTN_BEARD_PLUS = 169;
        public const BTN_BO_BUY = 23629;
        public const BTN_BROWS_MINUS = 174;
        public const BTN_BROWS_PLUS = 175;
        public const BTN_CHAR_ALBUM = 22964;
        public const BTN_CHAR_ATTACK = 22961;
        public const BTN_CHAR_GILDE = 22962;
        public const BTN_CHAR_INVITE = 22963;
        public const BTN_CHAR_MESSAGE = 22960;
        public const BTN_CHAR_ROB = 24741;
        public const BTN_COLOR_MINUS = 184;
        public const BTN_COLOR_PLUS = 185;
        public const BTN_COUNTRY_NEXT = 25619;
        public const BTN_COUNTRY_PREV = 25618;
        public const BTN_CREATE_CHARACTER = 202;
        public const BTN_DEALER_BUY1 = 23223;
        public const BTN_DEALER_BUY2 = 23224;
        public const BTN_DEALER_BUY3 = 23225;
        public const BTN_DEMO_LOGOFF = 24242;
        public const BTN_DISCONNECTED = 24369;
        public const BTN_EARS_MINUS = 176;
        public const BTN_EARS_PLUS = 177;
        public const BTN_EMAIL_NAG = 24374;
        public const BTN_EYES_MINUS = 172;
        public const BTN_EYES_PLUS = 173;
        public const BTN_FIGHT_OK = 24187;
        public const BTN_FIGHT_SKIP = 24186;
        public const BTN_GILDE_ATTACK = 23381;
        public const BTN_GILDE_CHAT_DOWN = 23404;
        public const BTN_GILDE_CHAT_UP = 23403;
        public const BTN_GILDE_CREST_CHANGE_NEXT = 24556;
        public const BTN_GILDE_CREST_CHANGE_PREV = 24555;
        public const BTN_GILDE_CREST_COLOR_NEXT = 24554;
        public const BTN_GILDE_CREST_COLOR_PREV = 24553;
        public const BTN_GILDE_CREST_GOTO_GEBAEUDE = 24542;
        public const BTN_GILDE_CREST_OK = 24589;
        public const BTN_GILDE_DEFEND = 23382;
        public const BTN_GILDE_DEMOTE = 23375;
        public const BTN_GILDE_DIALOG_CANCEL = 23508;
        public const BTN_GILDE_DIALOG_OK_INVITE = 23511;
        public const BTN_GILDE_DIALOG_OK_KICK = 23509;
        public const BTN_GILDE_DIALOG_OK_MASTER = 23510;
        public const BTN_GILDE_DIALOG_OK_RAID = 23513;
        public const BTN_GILDE_DIALOG_OK_REVOLT = 23512;
        public const BTN_GILDE_GEBAEUDE_GOTO_CREST = 24540;
        public const BTN_GILDE_GEBAEUDE_IMPROVE = 23480;
        public const BTN_GILDE_GOLD = 23491;
        public const BTN_GILDE_GRUENDEN = 23363;
        public const BTN_GILDE_INVITE = 23371;
        public const BTN_GILDE_KATAPULT = 24507;
        public const BTN_GILDE_KICK = 23373;
        public const BTN_GILDE_MASTER = 23376;
        public const BTN_GILDE_MUSH = 23492;
        public const BTN_GILDE_PROFILE = 23372;
        public const BTN_GILDE_PROMOTE = 23374;
        public const BTN_GILDE_RAID = 23378;
        public const BTN_GILDE_REVOLT = 23377;
        public const BTN_GILDE_SCROLL_DOWN = 23370;
        public const BTN_GILDE_SCROLL_UP = 23369;
        public const BTN_HAIR_MINUS = 178;
        public const BTN_HAIR_PLUS = 179;
        public const BTN_HALLE_DOWN = 285;
        public const BTN_HALLE_GOTO = 286;
        public const BTN_HALLE_UP = 284;
        public const BTN_HUTMANN_BACK = 23579;
        public const BTN_HUTMANN_GOLDBET = 23571;
        public const BTN_HUTMANN_MUSHBET = 23572;
        public const BTN_HUTMANN_OK = 23578;
        public const BTN_IF_ARBEITEN = 101;
        public const BTN_IF_ARENA = 100;
        public const BTN_IF_CHARAKTER = 106;
        public const BTN_IF_EHRENHALLE = 109;
        public const BTN_IF_EXIT = 115;
        public const BTN_IF_GILDEN = 108;
        public const BTN_IF_LOGIN = 48;
        public const BTN_IF_OPTIONEN = 111;
        public const BTN_IF_PILZDEALER = 105;
        public const BTN_IF_POST = 107;
        public const BTN_IF_REQUEST_PASSWORD = 49;
        public const BTN_IF_SCHMIEDE = 102;
        public const BTN_IF_SIGNUP = 47;
        public const BTN_IF_STALL = 104;
        public const BTN_IF_TAVERNE = 99;
        public const BTN_IF_WELTKARTE = 110;
        public const BTN_IF_ZAUBERLADEN = 103;
        public const BTN_INVITE_SUCCESS_OK = 22977;
        public const BTN_MAINQUEST_START = 24361;
        public const BTN_MODIFY_CHARACTER = 203;
        public const BTN_MOUTH_MINUS = 166;
        public const BTN_MOUTH_PLUS = 167;
        public const BTN_NEXT_COPYCAT = 24740;
        public const BTN_NEXT_PLAYER = 357;
        public const BTN_NOSE_MINUS = 170;
        public const BTN_NOSE_PLUS = 171;
        public const BTN_OPTION_CHANGE_EMAIL = 24253;
        public const BTN_OPTION_CHANGE_NAME = 24251;
        public const BTN_OPTION_CHANGE_PASSWORD = 24254;
        public const BTN_OPTION_CHANGEIMG = 24249;
        public const BTN_OPTION_DELETE = 24255;
        public const BTN_OPTION_DOCHANGE = 24264;
        public const BTN_OPTION_LUXURY = 24529;
        public const BTN_OPTION_RESEND = 24252;
        public const BTN_OPTIONEN = 24700;
        public const BTN_PLAYER_GUILD_INVITE = 24485;
        public const BTN_POST_ACCEPT = 23285;
        public const BTN_POST_CANCEL = 23283;
        public const BTN_POST_DELETE = 23271;
        public const BTN_POST_DELETEREAD = 23272;
        public const BTN_POST_DOWN = 23276;
        public const BTN_POST_FLUSH = 24591;
        public const BTN_POST_FLUSH_CANCEL = 24593;
        public const BTN_POST_FLUSH_OK = 24594;
        public const BTN_POST_FORWARD = 24539;
        public const BTN_POST_PROFILE = 23273;
        public const BTN_POST_READ = 23270;
        public const BTN_POST_READ_NEXT = 23277;
        public const BTN_POST_READ_PREV = 23278;
        public const BTN_POST_REPLY = 23286;
        public const BTN_POST_RETURN = 23284;
        public const BTN_POST_SEND = 23282;
        public const BTN_POST_UP = 23275;
        public const BTN_POST_VIEWFIGHT = 23287;
        public const BTN_POST_WRITE = 23274;
        public const BTN_PREV_COPYCAT = 24739;
        public const BTN_PREV_PLAYER = 356;
        public const BTN_PURCHASE = 25624;
        public const BTN_PURCHASE_MAX = 25633;
        public const BTN_QO_RETURN = 23617;
        public const BTN_QO_START = 23616;
        public const BTN_QUEST_CANCEL = 23211;
        public const BTN_QUEST_SKIP = 23212;
        public const BTN_RANDOM = 119;
        public const BTN_SCR_ARBEITEN_CANCEL = 311;
        public const BTN_SCR_ARBEITEN_CLOSE = 312;
        public const BTN_SCR_ARBEITEN_OK = 310;
        public const BTN_SCR_CHAR_STEIGERN1 = 383;
        public const BTN_SCR_INVITE_OK = 22973;
        public const BTN_SERVER_NEXT = 25622;
        public const BTN_SERVER_PREV = 25621;
        public const BTN_SHOPS_NEWWAREZ = 23102;
        public const BTN_SPECIAL2_MINUS = 182;
        public const BTN_SPECIAL2_PLUS = 183;
        public const BTN_SPECIAL_MINUS = 180;
        public const BTN_SPECIAL_PLUS = 181;
        public const BTN_STALL_BUY = 23357;
        public const BTN_TOWER_STEIGERN1 = 24788;
        public const BTN_TOWER_TRY = 24791;
        public const C_AUTO_LOGIN = true;
        public const C_BEARD = 1;
        public const C_BROWS = 2;
        public const C_CHAREXT = ".png";
        public const C_DISPLAY_ITEM_INFO = false;
        public const C_EMPTY = 0;
        public const C_HAIR = 4;
        public const C_ITEMS_PER_TYPE = 110;
        public const C_MD5:Boolean = true;
        public const C_SHOW_CA = false;
        public const C_SPECIAL2 = 8;
        public const C_TIMEOFDAY = -1;
        public const CA_CHALDRON = 25639;
        public const CA_CITY_ARENA = 227;
        public const CA_CITY_BUH = 259;
        public const CA_CITY_DEALER = 234;
        public const CA_CITY_ESEL = 237;
        public const CA_CITY_POST = 241;
        public const CA_CITY_RUHMESHALLE = 221;
        public const CA_CITY_SHAKES = 217;
        public const CA_CITY_TAVERNE = 239;
        public const CA_CITY_WACHE = 244;
        public const CA_CITY_ZAUBERLADEN = 219;
        public const CA_DEALER_AKTION = 23254;
        public const CA_DEALER_SPONSOR = 23255;
        public const CA_GILDE_DIALOG_BLOCK = 23500;
        public const CA_GOTO_WITCH = 25640;
        public const CA_HUTBECHER_1 = 23562;
        public const CA_HUTBECHER_2 = 23563;
        public const CA_HUTBECHER_3 = 23564;
        public const CA_POST_BLOCK = 24595;
        public const CA_SCR_ARBEITEN_BLOCKCITY = 295;
        public const CA_SCR_CHAR_EXPBAR = 360;
        public const CA_SCR_INVITE_BLOCKCITY = 22967;
        public const CA_SELL_ITEM = 361;
        public const CA_STALL_BOX_BOESE1 = 23337;
        public const CA_STALL_BOX_BOESE2 = 23338;
        public const CA_STALL_BOX_BOESE3 = 23339;
        public const CA_STALL_BOX_BOESE4 = 23340;
        public const CA_STALL_BOX_GUT1 = 23333;
        public const CA_STALL_BOX_GUT2 = 23334;
        public const CA_STALL_BOX_GUT3 = 23335;
        public const CA_STALL_BOX_GUT4 = 23336;
        public const CA_TAVERNE_BAR = 23541;
        public const CA_TAVERNE_HUTMANN = 23524;
        public const CA_TAVERNE_QUESTOFFER = 23531;
        public const CA_TAVERNE_TOILETTE = 24597;
        public const CA_TOILET_BOWL = 24616;
        public const CA_TOILET_CHAIN = 24615;
        public const CA_TOILET_LID = 24619;
        public const CA_TOILET_TANK = 24614;
        public const CA_TV = 25706;
        public const CA_USE_ITEM = 362;
        public const CA_WITCH = 25638;
        public const CB_AGB_CHECKED = 76;
        public const CB_AGB_UNCHECKED = 75;
        public const CB_COMPARE_CHECKED = 24625;
        public const CB_COMPARE_UNCHECKED = 24624;
        public const CB_CS_CHECKED = 24483;
        public const CB_CS_UNCHECKED = 24482;
        public const CB_FUCK_CHECKED = 84;
        public const CB_FUCK_UNCHECKED = 83;
        public const CB_LM_CHECKED = 24284;
        public const CB_LM_UNCHECKED = 24283;
        public const CB_TV_CHECKED = 25704;
        public const CB_TV_UNCHECKED = 25703;
        public const CFG_ALLOW_SKIP_QUEST = 34;
        public const CFG_BACKGROUND_ID = 57;
        public const CFG_BUFFED_URL = 19;
        public const CFG_BUFFEDMODE = 15;
        public const CFG_BULLSHIT_BOX = 50;
        public const CFG_BULLSHIT_CID = 51;
        public const CFG_CENSORED = 40;
        public const CFG_DATAPROT_URL = 13;
        public const CFG_DONT_SAVE_CID = 44;
        public const CFG_FLAG_NAMES = 47;
        public const CFG_FLAGS = 46;
        public const CFG_FORUM_URL = 10;
        public const CFG_GAMESTAFF_EMAIL = 36;
        public const CFG_IDLE_POLLING = 33;
        public const CFG_IMAGE_TIMEOUT = 21;
        public const CFG_IMG_URL = 2;
        public const CFG_IMPRINT_URL = 11;
        public const CFG_INSTR_URL = 14;
        public const CFG_INTERNAL_PIXEL = 41;
        public const CFG_LANG_CODE = 1;
        public const CFG_LANG_URL = 8;
        public const CFG_LEGAL_URL = 12;
        public const CFG_LIGHT_MODE = 45;
        public const CFG_LOWRES_URL = 48;
        public const CFG_MOBILE_PAYMENT_OLD = 55;
        public const CFG_MOBILE_PAYMENT_URL = 56;
        public const CFG_MOBILE_VALIDATION = 54;
        public const CFG_MP_PROJECT = 18;
        public const CFG_NO_CROSSDOMAIN = 9;
        public const CFG_NO_TUNNELING_TIME = 27;
        public const CFG_PAPAYA_CFG_FILE = 31;
        public const CFG_PAPAYA_PATH = 30;
        public const CFG_PAYMETHODS = 16;
        public const CFG_PHP_TUNNEL_URL = 25;
        public const CFG_PIXEL_CALL = 53;
        public const CFG_POLL_TUNNEL_URL = 28;
        public const CFG_PORT_FIREWALL = 6;
        public const CFG_PORT_OFFSET = 4;
        public const CFG_PORT_RANGE = 5;
        public const CFG_RECONNECT = 24;
        public const CFG_RELOAD_PIXEL = 42;
        public const CFG_REROLL_IMG = 23;
        public const CFG_RESEND_COUNT = 32;
        public const CFG_RESPONSE_TIMEOUT = 20;
        public const CFG_SERVER = 7;
        public const CFG_SERVER_ID = 17;
        public const CFG_SERVER_VERSION = 43;
        public const CFG_SHOP_URL = 35;
        public const CFG_SND_URL = 3;
        public const CFG_SOCIAL_BUTTONS = 52;
        public const CFG_SPONSOR_IMG = 22;
        public const CFG_SPONSOR_URL = 49;
        public const CFG_SUPPORT_EMAIL = 29;
        public const CFG_TRACKING_PIXEL = 26;
        public const CFG_TV_FUNCTION = 59;
        public const CFG_TV_POLL_INTERVAL_LONG = 61;
        public const CFG_TV_POLL_INTERVAL_NORMAL = 60;
        public const CFG_WORLDS = 58;
        public const CLA_GILDE_CREST = 24560;
        public const CLR_ATTACK_ERROR_OFFLINE = 0xA10000;
        public const CLR_ATTACK_ERROR_OFFLINE_HALF = 0xB04000;
        public const CLR_ATTACK_ERROR_ONLINE = 0xFF2000;
        public const CLR_ATTACK_ERROR_ONLINE_HALF = 0xFF6000;
        public const CLR_ATTACK_OK = 8978312;
        public const CLR_ATTRIBBONUS = 8947967;
        public const CLR_BLACK = 0;
        public const CLR_CHAT_WHISPER = 0xFF00FF;
        public const CLR_EPICITEMQUOTE = 8947967;
        public const CLR_ERROR = 0xFF0000;
        public const CLR_GRAYED = 13664290;
        public const CLR_GRAYED_HL = 15769634;
        public const CLR_ITEMENCHANTMENT = 0xA300FF;
        public const CLR_NOATTACK = 15761432;
        public const CLR_OFFLINE = 15769634;
        public const CLR_ONLINE = 15790146;
        public const CLR_RED = 16729156;
        public const CLR_SFHIGHLIGHT = 16777026;
        public const CLR_SFHIGHLIGHT_WHISPER = 16746751;
        public const CLR_SFORANGE = 15777858;
        public const CLR_SYSMSG = 16746564;
        public const CLR_SYSMSG_GREEN = 4521796;
        public const CLR_SYSMSG_GREEN_HIGHLIGHT = 8978312;
        public const CLR_SYSMSG_RED = 16729156;
        public const CLR_SYSMSG_RED_GRAYED = 13648964;
        public const CLR_SYSMSG_RED_HIGHLIGHT = 16746632;
        public const CLR_SYSMSG_RED_HIGHLIGHT_GRAYED = 13666440;
        public const CLR_SYSMSGHIGHLIGHT = 16764040;
        public const CLR_WHITE = 0xFFFFFF;
        public const CNT_AGB = 69;
        public const CNT_ALBUM_CAT_OUT = 24430;
        public const CNT_ALBUM_MONSTER = 24388;
        public const CNT_ALBUM_MONSTER_FRAME = 24392;
        public const CNT_ALBUM_WEAPON_1 = 24396;
        public const CNT_ALBUM_WEAPON_2 = 24400;
        public const CNT_ALBUM_WEAPON_3 = 24404;
        public const CNT_ALBUM_WEAPON_4 = 24408;
        public const CNT_ALBUM_WEAPON_5 = 24412;
        public const CNT_ALBUM_WEAPON_EPIC = 24416;
        public const CNT_BULLET_CHAR = 24194;
        public const CNT_BULLET_OPP = 24195;
        public const CNT_CHANGE_PASSWORD_SMILEY_HAPPY = 24267;
        public const CNT_CHANGE_PASSWORD_SMILEY_NEUTRAL = 24266;
        public const CNT_CHANGE_PASSWORD_SMILEY_SAD = 24265;
        public const CNT_CHAR_ACH = 23033;
        public const CNT_CHAR_POTION = 23073;
        public const CNT_CHAR_SLOT_1 = 410;
        public const CNT_CHAR_SLOT_10 = 419;
        public const CNT_CHAR_SLOT_11 = 420;
        public const CNT_CHAR_SLOT_12 = 421;
        public const CNT_CHAR_SLOT_13 = 422;
        public const CNT_CHAR_SLOT_14 = 423;
        public const CNT_CHAR_SLOT_15 = 424;
        public const CNT_CHAR_SLOT_2 = 411;
        public const CNT_CHAR_SLOT_3 = 412;
        public const CNT_CHAR_SLOT_4 = 413;
        public const CNT_CHAR_SLOT_5 = 414;
        public const CNT_CHAR_SLOT_6 = 415;
        public const CNT_CHAR_SLOT_7 = 416;
        public const CNT_CHAR_SLOT_8 = 417;
        public const CNT_CHAR_SLOT_9 = 418;
        public const CNT_CHAR_SLOT_FIDGET_1 = 425;
        public const CNT_CHAR_SLOT_FIDGET_2 = 426;
        public const CNT_CHAR_SLOT_FIDGET_3 = 427;
        public const CNT_CHAR_SLOT_FIDGET_4 = 428;
        public const CNT_CHAR_SLOT_FIDGET_5 = 429;
        public const CNT_CHAR_SLOT_FIDGET_6 = 430;
        public const CNT_CHAR_SLOT_SHAKES_1 = 431;
        public const CNT_CHAR_SLOT_SHAKES_2 = 432;
        public const CNT_CHAR_SLOT_SHAKES_3 = 433;
        public const CNT_CHAR_SLOT_SHAKES_4 = 434;
        public const CNT_CHAR_SLOT_SHAKES_5 = 435;
        public const CNT_CHAR_SLOT_SHAKES_6 = 436;
        public const CNT_CREATE_GOTO_LOGIN = 200;
        public const CNT_DATENSCHUTZ = 72;
        public const CNT_EMAIL_RESEND = 24372;
        public const CNT_FIGHT_BOX3 = 24200;
        public const CNT_FIGHT_ONO = 24220;
        public const CNT_FIGHT_OPP_BORDER = 24185;
        public const CNT_FIGHT_REWARDGOLD = 24202;
        public const CNT_FIGHT_REWARDMUSH = 24206;
        public const CNT_FIGHT_REWARDSILVER = 24204;
        public const CNT_FIGHT_SLOT = 24201;
        public const CNT_FORGOT_PASSWORD = 62;
        public const CNT_GILDE_ATTACK = 23389;
        public const CNT_GILDE_CREST = 24559;
        public const CNT_GILDE_CREST_COLOR = 24584;
        public const CNT_GILDE_DEFENCE = 23390;
        public const CNT_GILDE_GEBAEUDE_GOLD = 23474;
        public const CNT_GILDE_GEBAEUDE_MUSH = 23477;
        public const CNT_GILDE_GOLD = 23489;
        public const CNT_GILDE_GOLD2 = 23495;
        public const CNT_GILDE_LINK = 23446;
        public const CNT_GILDE_LIST = 23368;
        public const CNT_GILDE_MUSH = 23490;
        public const CNT_GILDE_MUSH2 = 23496;
        public const CNT_GILDE_RANG = 23365;
        public const CNT_GOTO_LOGIN = 64;
        public const CNT_GOTO_SIGNUP = 66;
        public const CNT_HALL_GOTO_GILDEN = 291;
        public const CNT_HALL_GOTO_SPIELER = 288;
        public const CNT_HALL_LIST = 294;
        public const CNT_HLMQS_BUTTON = 24768;
        public const CNT_HLMQS_COMPLETED = 24783;
        public const CNT_HLMQS_DISABLED = 24778;
        public const CNT_HUTMANN_GOLDBET = 23569;
        public const CNT_HUTMANN_GOLDBET2 = 23576;
        public const CNT_HUTMANN_MUSHBET = 23570;
        public const CNT_HUTMANN_MUSHBET2 = 23577;
        public const CNT_IF_AGB = 19;
        public const CNT_IF_ANLEITUNG = 23;
        public const CNT_IF_DATENSCHUTZ = 21;
        public const CNT_IF_DRAGON_1 = 86;
        public const CNT_IF_DRAGON_10 = 95;
        public const CNT_IF_DRAGON_11 = 96;
        public const CNT_IF_DRAGON_12 = 97;
        public const CNT_IF_DRAGON_13 = 98;
        public const CNT_IF_DRAGON_2 = 87;
        public const CNT_IF_DRAGON_3 = 88;
        public const CNT_IF_DRAGON_4 = 89;
        public const CNT_IF_DRAGON_5 = 90;
        public const CNT_IF_DRAGON_6 = 91;
        public const CNT_IF_DRAGON_7 = 92;
        public const CNT_IF_DRAGON_8 = 93;
        public const CNT_IF_DRAGON_9 = 94;
        public const CNT_IF_FORUM = 15;
        public const CNT_IF_HUTMANN = 39;
        public const CNT_IF_IMPRESSUM = 13;
        public const CNT_IF_LOGOUT = 11;
        public const CNT_IF_SHOP = 25;
        public const CNT_IF_SPONSOR = 18;
        public const CNT_IF_TOILET = 25611;
        public const CNT_LIFEBAR_FILL_OPP = 24161;
        public const CNT_LIFEBAR_OPP = 24159;
        public const CNT_MAINQUEST_ENEMY = 24364;
        public const CNT_MAINQUEST_ENEMY_BORDER = 24363;
        public const CNT_MAINQUEST_SLOT = 24362;
        public const CNT_MQS_BUTTON = 24311;
        public const CNT_MQS_COMPLETED = 24342;
        public const CNT_MQS_DISABLED = 24331;
        public const CNT_POST_GUILD = 23289;
        public const CNT_POST_LIST = 23269;
        public const CNT_PW_GOTO_LOGIN = 25615;
        public const CNT_QO_CHOICE1 = 23591;
        public const CNT_QO_CHOICE2 = 23592;
        public const CNT_QO_CHOICE3 = 23593;
        public const CNT_QO_CHOICE4 = 23594;
        public const CNT_QO_CHOICE5 = 23595;
        public const CNT_QO_REWARDGOLD = 23609;
        public const CNT_QO_REWARDSILVER = 23611;
        public const CNT_QUEST_SLOT = 23619;
        public const CNT_SCR_ARBEITEN_BAR = 313;
        public const CNT_SCR_ARBEITEN_FILL = 314;
        public const CNT_SCR_CHAR_GILDE = 22957;
        public const CNT_SCR_CHAR_GOLD1 = 393;
        public const CNT_SCR_CHAR_NAME = 354;
        public const CNT_SCR_CHAR_SILBER1 = 403;
        public const CNT_SHIELD_CHAR = 24192;
        public const CNT_SHIELD_OPP = 24193;
        public const CNT_SOCIAL = 24460;
        public const CNT_STALL_GOLD = 23354;
        public const CNT_STALL_MUSH = 23356;
        public const CNT_STALL_SCHATZGOLD = 23349;
        public const CNT_STALL_SCHATZSILBER = 23351;
        public const CNT_TIMEBAR_FILL = 23544;
        public const CNT_TOWER_BOOSTCOIN = 25607;
        public const CNT_TOWER_FACE = 0x6400;
        public const CNT_TOWER_SCROLLAREA = 24743;
        public const CNT_TOWER_SLOT = 24720;
        public const CNT_TOWER_WINDOW = 24753;
        public const CNT_WEAPON_CHAR = 24190;
        public const CNT_WEAPON_OPP = 24191;
        public const CNT_WITCH_SCROLL = 25641;
        public const CPC_ARMOR = 19;
        public const CPC_ATTRIBS = 4;
        public const CPC_ATTRIBS_BONUS = 9;
        public const CPC_ATTRIBS_BOUGHT = 14;
        public const CPC_CLASS = 1;
        public const CPC_DAMAGE_MAX = 21;
        public const CPC_DAMAGE_MIN = 20;
        public const CPC_FREE = 143;
        public const CPC_GOLD_STOLEN = 2;
        public const CPC_GOLD_STOLEN_NEXT = 3;
        public const CPC_ITEMS = 22;
        public const CPC_LEVEL = 0;
        public const CPC_PRICE_NEXT_LEVEL = 142;
        public const DIST_DEALER_BTN_Y = 50;
        public const ERR_ACCOUNTS_PER_IP = -56;
        public const ERR_ALREADY_IN_GUILD = -13;
        public const ERR_ATTACK_AGAIN = -48;
        public const ERR_BEER = -34;
        public const ERR_BOOST = -42;
        public const ERR_DEALER_AKTION = 175;
        public const ERR_DEALER_SPONSOR = 177;
        public const ERR_EMAIL_REJECTED = -4;
        public const ERR_EMAIL_WRONG = -10;
        public const ERR_FACE_DATA_INCORRECT = -9;
        public const ERR_FIGHT_SELF = -15;
        public const ERR_GENDER_OR_RACE = -11;
        public const ERR_GUILD_ALREADY_ATTACKING = -63;
        public const ERR_GUILD_ALREADY_MEMBER = -38;
        public const ERR_GUILD_ALREADY_UNDER_ATTACK = -61;
        public const ERR_GUILD_ALREADY_YOU_OTHER = -25;
        public const ERR_GUILD_ALREADY_YOU_THIS = -27;
        public const ERR_GUILD_ATTACK_DELAY = -62;
        public const ERR_GUILD_ATTACK_STATUS = -64;
        public const ERR_GUILD_BUILDING_MAX = -21;
        public const ERR_GUILD_BUILDING_NOT_FOUND = -20;
        public const ERR_GUILD_CHAT_HISTORY = -32;
        public const ERR_GUILD_CHAT_NOT_MEMBER = -31;
        public const ERR_GUILD_CHAT_TEXT_ERROR = -33;
        public const ERR_GUILD_DESCR_TOO_LONG = -102;
        public const ERR_GUILD_DONATE_FRA = -52;
        public const ERR_GUILD_DONATE_NEG = -51;
        public const ERR_GUILD_EMAIL_VALIDATE = -46;
        public const ERR_GUILD_FIGHT_TOO_EXPENSIVE = -60;
        public const ERR_GUILD_IS_FULL = -24;
        public const ERR_GUILD_LACK_GOLD = -19;
        public const ERR_GUILD_LACK_MUSH = -18;
        public const ERR_GUILD_MASTER_CANT_BE_OFFICER = -23;
        public const ERR_GUILD_MUSH_FREE = -47;
        public const ERR_GUILD_NAME_CHARACTERS = -45;
        public const ERR_GUILD_NAME_LENGTH = -44;
        public const ERR_GUILD_NAME_REJECTED = -43;
        public const ERR_GUILD_NOT_ALLOWED = -17;
        public const ERR_GUILD_NOT_FOUND = -16;
        public const ERR_GUILD_NOT_MEMBER = -22;
        public const ERR_GUILD_NOT_REAL_MEMBER = -26;
        public const ERR_GUILD_PLAYER_NOT_FOUND = -28;
        public const ERR_GUILD_RANK_WRONG = -95;
        public const ERR_GUILD_TOO_EXPENSIVE = -30;
        public const ERR_INBOX_FULL = 203;
        public const ERR_INVENTORY_FULL = -58;
        public const ERR_INVENTORY_FULL_ADV = -86;
        public const ERR_INVITE_EMAIL_REJECTED = -92;
        public const ERR_INVITE_NOT_VALIDATED = -90;
        public const ERR_INVITE_TOO_MANY = -91;
        public const ERR_JOINED_TOO_RECENTLY = -68;
        public const ERR_LOCKED_ADMIN = -54;
        public const ERR_LOCKED_PAYMENT = -53;
        public const ERR_LOGIN_FAILED = -6;
        public const ERR_LUXURY_ALREADY = -94;
        public const ERR_MAIL_EXISTS = -12;
        public const ERR_MSG_LEVEL_TOO_LOW = -84;
        public const ERR_MSG_NOT_VALIDATED = -85;
        public const ERR_NAME_EXISTS = -1;
        public const ERR_NAME_REJECTED = -5;
        public const ERR_NAME_TOO_SHORT = -2;
        public const ERR_NO_ALBUM = -93;
        public const ERR_NO_CHAT_INFO = -96;
        public const ERR_NO_CHAT_OVERFLOW = -97;
        public const ERR_NO_ENDURANCE = -36;
        public const ERR_NO_INDEX_FREE = -14;
        public const ERR_NO_MUSH_BAR = -35;
        public const ERR_NO_MUSH_MQ = -41;
        public const ERR_NO_MUSH_PVP = -40;
        public const ERR_NO_SLOT_FOR_FLUSHING = -307;
        public const ERR_NOT_INVITED = -39;
        public const ERR_PASSWORD_TOO_SHORT = -3;
        public const ERR_PLACE_BET = -57;
        public const ERR_RECIPIENT_NOT_FOUND = 204;
        public const ERR_RECIPIENT_SELF = 205;
        public const ERR_REQUEST_PW = -49;
        public const ERR_REVOLT_FAILED = -67;
        public const ERR_SERVER_DOWN = -69;
        public const ERR_SESSION_ID_EXPIRED = -65;
        public const ERR_STOP_TUNNELING = -66;
        public const ERR_SUBJECT_TOO_SHORT = -29;
        public const ERR_TOILET_EMPTY = -310;
        public const ERR_TOO_EXPENSIVE = -7;
        public const ERR_TOO_SOON = -55;
        public const ERR_TOWER_CLOSED = -98;
        public const ERR_TOWER_ITEMMOVE = -100;
        public const ERR_TOWER_NO_COPYCATS = -101;
        public const ERR_VALIDATE = -50;
        public const ERR_WORSE_MOUNT = -37;
        public const ERR_WRONG_PASSWORD = -8;
        public const GUILD_ATTACK_TARGET = 364;
        public const GUILD_ATTACK_TIME = 365;
        public const GUILD_DEFENCE_TARGET = 366;
        public const GUILD_DEFENCE_TIME = 367;
        public const GUILD_EVENT_TRIGGER_COUNT = 368;
        public const GUILD_IS_RAID = 9;
        public const GUILD_MEMBERGOLDSPENT = 214;
        public const GUILD_MEMBERHONOR = 164;
        public const GUILD_MEMBERID = 14;
        public const GUILD_MEMBERLEVEL = 64;
        public const GUILD_MEMBERMUSHSPENT = 264;
        public const GUILD_MEMBERONLINE = 114;
        public const GUILD_MEMBERRANK = 314;
        public const GUILD_RAID_LEVEL = 8;
        public const IMG_ALBUM_BG = 24376;
        public const IMG_ALBUM_CAT_IN = 24425;
        public const IMG_ALBUM_CAT_OUT = 24420;
        public const IMG_ARENA_BG_DAWN = 23297;
        public const IMG_ARENA_BG_DAY = 23295;
        public const IMG_ARENA_BG_NIGHT = 0x5B00;
        public const IMG_ARENA_FEUER = 23298;
        public const IMG_BEERFEST = 24480;
        public const IMG_BG_DEMO = 24241;
        public const IMG_BO_PORTRAIT_NO = 23627;
        public const IMG_BO_PORTRAIT_OK = 23626;
        public const IMG_BO_PORTRAIT_TH = 23628;
        public const IMG_BTN_GOLD = 42;
        public const IMG_BTN_PILZE = 44;
        public const IMG_BTN_SILBER = 43;
        public const IMG_BUBBLE_ARENA = 269;
        public const IMG_BUBBLE_DEALER = 275;
        public const IMG_BUBBLE_ESEL = 270;
        public const IMG_BUBBLE_KRISTALL = 273;
        public const IMG_BUBBLE_ORAKEL = 274;
        public const IMG_BUBBLE_POST = 276;
        public const IMG_BUBBLE_RUHMESHALLE = 272;
        public const IMG_BUBBLE_SHAKES = 279;
        public const IMG_BUBBLE_STATUE = 278;
        public const IMG_BUBBLE_TAVERNE = 271;
        public const IMG_BUBBLE_WACHE = 277;
        public const IMG_BUBBLE_ZAUBERLADEN = 280;
        public const IMG_CHAR_ACH = 22993;
        public const IMG_CHAR_ALBUM = 22965;
        public const IMG_CHAR_MOUNT_1 = 22979;
        public const IMG_CHAR_RUESTUNG = 22991;
        public const IMG_CHARIMG_BACKGROUND = 319;
        public const IMG_CHARIMG_BACKGROUND2 = 330;
        public const IMG_CHARIMG_BEARD = 321;
        public const IMG_CHARIMG_BEARD2 = 332;
        public const IMG_CHARIMG_BROWS = 324;
        public const IMG_CHARIMG_BROWS2 = 335;
        public const IMG_CHARIMG_EARS = 325;
        public const IMG_CHARIMG_EARS2 = 336;
        public const IMG_CHARIMG_EYES = 323;
        public const IMG_CHARIMG_EYES2 = 334;
        public const IMG_CHARIMG_HAIR = 326;
        public const IMG_CHARIMG_HAIR2 = 337;
        public const IMG_CHARIMG_MOUTH = 320;
        public const IMG_CHARIMG_MOUTH2 = 331;
        public const IMG_CHARIMG_NOSE = 322;
        public const IMG_CHARIMG_NOSE2 = 333;
        public const IMG_CHARIMG_SPECIAL = 327;
        public const IMG_CHARIMG_SPECIAL12 = 338;
        public const IMG_CHARIMG_SPECIAL2 = 328;
        public const IMG_CHARIMG_SPECIAL22 = 339;
        public const IMG_CITY_ARENA = 222;
        public const IMG_CITY_ARENA_ONO1 = 223;
        public const IMG_CITY_ARENA_ONO2 = 224;
        public const IMG_CITY_ARENA_ONO3 = 225;
        public const IMG_CITY_ARENA_ONO4 = 226;
        public const IMG_CITY_DEALER = 228;
        public const IMG_CITY_DEALER_ANI1 = 229;
        public const IMG_CITY_DEALER_ANI2 = 230;
        public const IMG_CITY_DEALER_ANI3 = 231;
        public const IMG_CITY_DEALER_ANI4 = 232;
        public const IMG_CITY_DEALER_ANI5 = 233;
        public const IMG_CITY_ELF1 = 0x0101;
        public const IMG_CITY_ELF2 = 258;
        public const IMG_CITY_ESEL1 = 235;
        public const IMG_CITY_ESEL2 = 236;
        public const IMG_CITY_MAGIER1 = 249;
        public const IMG_CITY_MAGIER2 = 250;
        public const IMG_CITY_ORK1 = 251;
        public const IMG_CITY_ORK2 = 252;
        public const IMG_CITY_POST = 240;
        public const IMG_CITY_RUHMESHALLE = 220;
        public const IMG_CITY_SANDWICH1 = 253;
        public const IMG_CITY_SANDWICH2 = 254;
        public const IMG_CITY_SCHILD1 = 245;
        public const IMG_CITY_SCHILD2 = 246;
        public const IMG_CITY_SCHILD3 = 247;
        public const IMG_CITY_SCHILD4 = 248;
        public const IMG_CITY_SHAKES = 216;
        public const IMG_CITY_TAVERNE = 238;
        public const IMG_CITY_WACHE_DAY = 242;
        public const IMG_CITY_WACHE_NIGHT = 243;
        public const IMG_CITY_ZAUBERLADEN = 218;
        public const IMG_CITY_ZWERG1 = 0xFF;
        public const IMG_CITY_ZWERG2 = 0x0100;
        public const IMG_DEALER_ARM1 = 23215;
        public const IMG_DEALER_ARM2 = 23216;
        public const IMG_DEALER_ARM3 = 23217;
        public const IMG_DEALER_ARM4 = 23218;
        public const IMG_DEALER_AUGEN1 = 23219;
        public const IMG_DEALER_AUGEN2 = 23220;
        public const IMG_DEALER_AUGEN3 = 23221;
        public const IMG_DEALER_AUGEN4 = 23222;
        public const IMG_DEALER_EFFECT = 23253;
        public const IMG_DEALER_PAYICON1 = 23226;
        public const IMG_DEALER_PAYICON2 = 23227;
        public const IMG_DEALER_PAYICON3 = 23228;
        public const IMG_DEALER_PAYICON4 = 23229;
        public const IMG_DEALER_PAYICON5 = 23230;
        public const IMG_DEALER_PAYICON6 = 23231;
        public const IMG_DEALER_PAYICON7 = 23232;
        public const IMG_DEALER_PAYICON8 = 23233;
        public const IMG_DEALER_PAYICON9 = 23234;
        public const IMG_DEALER_PAYICONHOVER1 = 23235;
        public const IMG_DEALER_PAYICONHOVER2 = 23236;
        public const IMG_DEALER_PAYICONHOVER3 = 23237;
        public const IMG_DEALER_PAYICONHOVER4 = 23238;
        public const IMG_DEALER_PAYICONHOVER5 = 23239;
        public const IMG_DEALER_PAYICONHOVER6 = 23240;
        public const IMG_DEALER_PAYICONHOVER7 = 23241;
        public const IMG_DEALER_PAYICONHOVER8 = 23242;
        public const IMG_DEALER_PAYICONHOVER9 = 23243;
        public const IMG_DUNGEON_CONGRATS = 24354;
        public const IMG_EMPTY_SLOT_1 = 438;
        public const IMG_EMPTY_SLOT_10 = 449;
        public const IMG_EMPTY_SLOT_9_1 = 446;
        public const IMG_EMPTY_SLOT_9_2 = 447;
        public const IMG_EMPTY_SLOT_9_3 = 448;
        public const IMG_F_ACT = 156;
        public const IMG_F_IDLE = 155;
        public const IMG_FIDGET_AFFE1 = 23080;
        public const IMG_FIDGET_AFFE2 = 23081;
        public const IMG_FIDGET_AFFE3 = 23082;
        public const IMG_FIDGET_BLINZELN = 23089;
        public const IMG_FIDGET_DAY = 23085;
        public const IMG_FIDGET_EPCIOVL = 24536;
        public const IMG_FIDGET_IDLE = 23086;
        public const IMG_FIDGET_NACHTKERZE = 23084;
        public const IMG_FIDGET_NIGHT = 23088;
        public const IMG_FIDGET_SALE = 23087;
        public const IMG_FIDGET_TAGKERZE = 23083;
        public const IMG_FIGHT_ARROW_SMASH = 24219;
        public const IMG_FIGHT_BOX1 = 24198;
        public const IMG_FIGHT_BOX2 = 24199;
        public const IMG_FIGHT_CHAR_BORDER = 24184;
        public const IMG_FIGHT_COPYCAT = 24759;
        public const IMG_FIGHT_MUSH = 24534;
        public const IMG_FIGHT_ONO = 24213;
        public const IMG_FILLSPACE = 68;
        public const IMG_GILDE_ATTACK_GRAY = 23383;
        public const IMG_GILDE_ATTACK_OK = 23384;
        public const IMG_GILDE_CREST = 24543;
        public const IMG_GILDE_CREST_COLOR_FILLIN = 24579;
        public const IMG_GILDE_CREST_COLOR_SELECTED = 24575;
        public const IMG_GILDE_CREST_COLOR_UNSELECTED = 24571;
        public const IMG_GILDE_CREST_SHIELDCOLOR = 24590;
        public const IMG_GILDE_DEFEND_GRAY = 23385;
        public const IMG_GILDE_DEFEND_OK = 23386;
        public const IMG_GILDE_GEBAEUDE = 23450;
        public const IMG_GILDE_GEBAEUDE_IMPROVE_GRAY = 23483;
        public const IMG_GILDE_INVITE_GRAY = 23391;
        public const IMG_GILDE_KATAPULT_GRAY = 24517;
        public const IMG_GILDE_KATAPULT_OK = 24518;
        public const IMG_GILDE_KICK_GRAY = 23393;
        public const IMG_GILDE_MASTER_GRAY = 23395;
        public const IMG_GILDE_PROFILE_GRAY = 23392;
        public const IMG_GILDE_PROMOTE_GRAY = 23394;
        public const IMG_GILDE_RAHMEN = 23360;
        public const IMG_GILDE_RAID_GRAY = 23379;
        public const IMG_GILDE_RAID_OK = 23380;
        public const IMG_GILDE_RANK = 23397;
        public const IMG_GILDEN_BG = 23359;
        public const IMG_GOLDEN_FRAME = 24506;
        public const IMG_GOTO_WITCH_OVL = 25672;
        public const IMG_GUILD_BATTLE_BG = 24238;
        public const IMG_GUILD_RAID_BG = 24239;
        public const IMG_HLMQS_BUTTON = 24773;
        public const IMG_HLMQS_COMPLETED = 24764;
        public const IMG_HLMQS_DISABLED = 24763;
        public const IMG_HLMQS_TOWER_COMPLETED = 24766;
        public const IMG_HLMQS_TOWER_DISABLED = 24765;
        public const IMG_HUTBECHER_1_CLICK = 23555;
        public const IMG_HUTBECHER_1_HOVER = 23554;
        public const IMG_HUTBECHER_1_IDLE = 23553;
        public const IMG_HUTBECHER_2_CLICK = 23558;
        public const IMG_HUTBECHER_2_HOVER = 23557;
        public const IMG_HUTBECHER_2_IDLE = 23556;
        public const IMG_HUTBECHER_3_CLICK = 23561;
        public const IMG_HUTBECHER_3_HOVER = 23560;
        public const IMG_HUTBECHER_3_IDLE = 23559;
        public const IMG_HUTFACE_HOVER = 23548;
        public const IMG_HUTFACE_IDLE = 23547;
        public const IMG_HUTFACE_LOSE1 = 23550;
        public const IMG_HUTFACE_LOSE2 = 23551;
        public const IMG_HUTFACE_LOSE3 = 0x5C00;
        public const IMG_HUTFACE_WIN = 23549;
        public const IMG_HUTKUGEL = 23565;
        public const IMG_HUTMANN_BG = 23546;
        public const IMG_HUTMANN_MUSHBET_DISABLED = 23573;
        public const IMG_IF_BACKGROUND = 5;
        public const IMG_IF_GOLD = 27;
        public const IMG_IF_HUTMANN1 = 37;
        public const IMG_IF_HUTMANN2 = 38;
        public const IMG_IF_HUTMANN_OVL = 40;
        public const IMG_IF_JAEGER = 35;
        public const IMG_IF_KRIEGER = 34;
        public const IMG_IF_LEFT = 6;
        public const IMG_IF_MAGIER = 36;
        public const IMG_IF_MAIN = 8;
        public const IMG_IF_PILZE = 29;
        public const IMG_IF_SILBER = 28;
        public const IMG_IF_SPONSOR = 17;
        public const IMG_IF_TOILET = 25610;
        public const IMG_IF_TOP = 7;
        public const IMG_IF_WINDOW = 45;
        public const IMG_IF_WINDOW_HIGH = 25612;
        public const IMG_IF_WINDOW_TOPHALF = 25613;
        public const IMG_KASTE_1_ACT = 158;
        public const IMG_KASTE_1_IDLE = 157;
        public const IMG_KASTE_2_ACT = 160;
        public const IMG_KASTE_2_IDLE = 159;
        public const IMG_KASTE_3_ACT = 162;
        public const IMG_KASTE_3_IDLE = 161;
        public const IMG_LIFEBAR_CHAR = 0x5E5E;
        public const IMG_LIFEBAR_FILL_CHAR = 24160;
        public const IMG_LUXURY_SELLER = 24535;
        public const IMG_M_ACT = 154;
        public const IMG_M_IDLE = 153;
        public const IMG_MAINQUEST_COMINGSOON = 24365;
        public const IMG_MIRROR_PIECE = 24701;
        public const IMG_MQS_BUTTON = 24321;
        public const IMG_MQS_COMPLETED = 24352;
        public const IMG_MQS_DISABLED = 24341;
        public const IMG_NO_SHIELD = 25609;
        public const IMG_OPIMG_BEARD = 23836;
        public const IMG_OPIMG_BEARD2 = 23847;
        public const IMG_OPIMG_BROWS = 23839;
        public const IMG_OPIMG_BROWS2 = 23850;
        public const IMG_OPIMG_EARS = 23840;
        public const IMG_OPIMG_EARS2 = 23851;
        public const IMG_OPIMG_HAIR = 23841;
        public const IMG_OPIMG_HAIR2 = 23852;
        public const IMG_OPIMG_SPECIAL = 23842;
        public const IMG_OPIMG_SPECIAL12 = 23853;
        public const IMG_OPIMG_SPECIAL2 = 23843;
        public const IMG_OPIMG_SPECIAL22 = 23854;
        public const IMG_OPPIMG_BACKGROUND = 23834;
        public const IMG_OPPIMG_BACKGROUND2 = 23845;
        public const IMG_OPPIMG_EYES = 23838;
        public const IMG_OPPIMG_EYES2 = 23849;
        public const IMG_OPPIMG_MONSTER = 24800;
        public const IMG_OPPIMG_MOUTH = 23835;
        public const IMG_OPPIMG_MOUTH2 = 23846;
        public const IMG_OPPIMG_NOSE = 23837;
        public const IMG_OPPIMG_NOSE2 = 23848;
        public const IMG_OPTION_BOX = 24256;
        public const IMG_OPTION_FLAG = 24627;
        public const IMG_OPTION_IMAGEBORDER = 24248;
        public const IMG_PASSWORD_SMILEY_HAPPY = 58;
        public const IMG_PASSWORD_SMILEY_NEUTRAL = 57;
        public const IMG_PASSWORD_SMILEY_SAD = 56;
        public const IMG_POST_BG = 23258;
        public const IMG_POST_DAWN1 = 23259;
        public const IMG_POST_DAWN2 = 23260;
        public const IMG_POST_NIGHT1 = 23261;
        public const IMG_POST_NIGHT2 = 23262;
        public const IMG_QO_PORTRAIT1 = 23620;
        public const IMG_QUESTBAR_BG = 23207;
        public const IMG_QUESTBAR_FILL = 23208;
        public const IMG_QUESTBAR_LIGHT = 23209;
        public const IMG_SCR_BUILDCHAR_BACKGROUND = 117;
        public const IMG_SCR_CHAR_BG = 352;
        public const IMG_SCR_CHAR_BG_GOLDEN = 24530;
        public const IMG_SCR_CHAR_BG_RIGHT = 353;
        public const IMG_SCR_CHAR_EXPBAR = 358;
        public const IMG_SCR_CHAR_KLASSE_1 = 22952;
        public const IMG_SCR_CHAR_KLASSE_2 = 22953;
        public const IMG_SCR_CHAR_KLASSE_3 = 22954;
        public const IMG_SCR_CITY_BACKG_DAWN = 205;
        public const IMG_SCR_CITY_BACKG_DAY = 206;
        public const IMG_SCR_CITY_BACKG_NIGHT = 204;
        public const IMG_SCR_CITY_CLOUDS_DAWN = 211;
        public const IMG_SCR_CITY_CLOUDS_DAY = 212;
        public const IMG_SCR_CITY_CLOUDS_NIGHT = 210;
        public const IMG_SCR_CITY_FOREG_DAWN = 214;
        public const IMG_SCR_CITY_FOREG_DAY = 215;
        public const IMG_SCR_CITY_FOREG_NIGHT = 213;
        public const IMG_SCR_CITY_MAIN_DAWN = 208;
        public const IMG_SCR_CITY_MAIN_DAY = 209;
        public const IMG_SCR_CITY_MAIN_NIGHT = 207;
        public const IMG_SCR_DEALER_BG = 23214;
        public const IMG_SCR_FIDGET_BG = 23101;
        public const IMG_SCR_HALLE_BG = 282;
        public const IMG_SCR_QUEST_BG_1 = 23107;
        public const IMG_SCR_SHAKES_BG = 23100;
        public const IMG_SCR_TOWER_BG = 24792;
        public const IMG_SCR_WORLDMAP_BG = 23105;
        public const IMG_SHAKES_BLINZELN1 = 23098;
        public const IMG_SHAKES_BLINZELN2 = 23099;
        public const IMG_SHAKES_DAY = 23092;
        public const IMG_SHAKES_EPCIOVL = 24537;
        public const IMG_SHAKES_IDLE = 23093;
        public const IMG_SHAKES_IDLE1 = 23095;
        public const IMG_SHAKES_IDLE2 = 23096;
        public const IMG_SHAKES_IDLE3 = 23097;
        public const IMG_SHAKES_NIGHT = 23094;
        public const IMG_SLOT_SUGGESTION = 437;
        public const IMG_SOCIAL = 24440;
        public const IMG_SPECIAL_ACTION = 24486;
        public const IMG_STALL_ARME1 = 23312;
        public const IMG_STALL_ARME2 = 23313;
        public const IMG_STALL_ARME3 = 23314;
        public const IMG_STALL_ARME4 = 23315;
        public const IMG_STALL_ARME5 = 23316;
        public const IMG_STALL_BG_BOESE = 23309;
        public const IMG_STALL_BG_GUT = 23308;
        public const IMG_STALL_DAWN = 23310;
        public const IMG_STALL_NIGHT = 23311;
        public const IMG_STALL_OVL_BOESE1 = 23321;
        public const IMG_STALL_OVL_BOESE2 = 23322;
        public const IMG_STALL_OVL_BOESE3 = 23323;
        public const IMG_STALL_OVL_BOESE4 = 23324;
        public const IMG_STALL_OVL_GUT1 = 23317;
        public const IMG_STALL_OVL_GUT2 = 23318;
        public const IMG_STALL_OVL_GUT3 = 23319;
        public const IMG_STALL_OVL_GUT4 = 23320;
        public const IMG_TAVERN_ADVENT = 25711;
        public const IMG_TAVERNE_BARKEEPER1 = 23520;
        public const IMG_TAVERNE_BARKEEPER2 = 23521;
        public const IMG_TAVERNE_BARKEEPER_HINT = 24538;
        public const IMG_TAVERNE_BAROVL = 23540;
        public const IMG_TAVERNE_BG = 23519;
        public const IMG_TAVERNE_HUTMANN_BLINZELN = 23522;
        public const IMG_TAVERNE_HUTMANN_OVL = 23523;
        public const IMG_TAVERNE_KERZEN = 23525;
        public const IMG_TAVERNE_QUEST1 = 23526;
        public const IMG_TAVERNE_QUEST2 = 23527;
        public const IMG_TAVERNE_QUEST3 = 23528;
        public const IMG_TAVERNE_QUEST4 = 23529;
        public const IMG_TAVERNE_QUEST5 = 23530;
        public const IMG_TAVERNE_QUESTOVL1 = 23534;
        public const IMG_TAVERNE_QUESTOVL2 = 23535;
        public const IMG_TAVERNE_QUESTOVL3 = 23536;
        public const IMG_TAVERNE_QUESTOVL4 = 23537;
        public const IMG_TAVERNE_QUESTOVL5 = 23538;
        public const IMG_TIMEBAR_BG = 23542;
        public const IMG_TIMEBAR_FILL = 23543;
        public const IMG_TOILET = 24599;
        public const IMG_TOILET_CHAIN = 24610;
        public const IMG_TOILET_DROP = 24618;
        public const IMG_TOILET_FLUSH = 24602;
        public const IMG_TOILET_IDLE = 24617;
        public const IMG_TOWER_BASE = 24744;
        public const IMG_TOWER_BG = 24715;
        public const IMG_TOWER_LEVEL = 24745;
        public const IMG_TOWER_NO_PORTRAIT = 24756;
        public const IMG_TOWER_PORTRAIT = 24717;
        public const IMG_TOWER_ROOF = 24748;
        public const IMG_TOWER_WINDOW_BURNT = 24751;
        public const IMG_TOWER_WINDOW_CLOSED = 24750;
        public const IMG_TOWER_WINDOW_OPEN = 24749;
        public const IMG_TV = 25707;
        public const IMG_UNKNOWN_ENEMY = 24439;
        public const IMG_VOLK_1_F_ACT = 145;
        public const IMG_VOLK_1_F_IDLE = 137;
        public const IMG_VOLK_1_M_ACT = 129;
        public const IMG_VOLK_1_M_IDLE = 120;
        public const IMG_VOLK_2_F_ACT = 146;
        public const IMG_VOLK_2_F_IDLE = 138;
        public const IMG_VOLK_2_M_ACT = 130;
        public const IMG_VOLK_2_M_IDLE = 121;
        public const IMG_VOLK_3_F_ACT = 147;
        public const IMG_VOLK_3_F_IDLE = 139;
        public const IMG_VOLK_3_M_ACT = 131;
        public const IMG_VOLK_3_M_IDLE = 122;
        public const IMG_VOLK_4_F_ACT = 148;
        public const IMG_VOLK_4_F_IDLE = 140;
        public const IMG_VOLK_4_M_ACT = 132;
        public const IMG_VOLK_4_M_IDLE = 123;
        public const IMG_VOLK_5_F_ACT = 149;
        public const IMG_VOLK_5_F_IDLE = 141;
        public const IMG_VOLK_5_M_ACT = 133;
        public const IMG_VOLK_5_M_IDLE = 124;
        public const IMG_VOLK_6_F_ACT = 150;
        public const IMG_VOLK_6_F_IDLE = 142;
        public const IMG_VOLK_6_M_ACT = 134;
        public const IMG_VOLK_6_M_IDLE = 125;
        public const IMG_VOLK_7_F_ACT = 151;
        public const IMG_VOLK_7_F_IDLE = 143;
        public const IMG_VOLK_7_M_ACT = 135;
        public const IMG_VOLK_7_M_IDLE = 126;
        public const IMG_VOLK_8_F_ACT = 152;
        public const IMG_VOLK_8_F_IDLE = 144;
        public const IMG_VOLK_8_M_ACT = 136;
        public const IMG_VOLK_8_M_IDLE = 127;
        public const IMG_VOLK_MARKER = 128;
        public const IMG_WEAPON_BONE = 24223;
        public const IMG_WEAPON_CLAW = 24231;
        public const IMG_WEAPON_CLAW2 = 24232;
        public const IMG_WEAPON_CLAW3 = 24233;
        public const IMG_WEAPON_CLAW4 = 24234;
        public const IMG_WEAPON_FIRE = 24228;
        public const IMG_WEAPON_FIRE2 = 24229;
        public const IMG_WEAPON_FIRE3 = 24230;
        public const IMG_WEAPON_FIST = 24221;
        public const IMG_WEAPON_SPLAT = 24225;
        public const IMG_WEAPON_SPLAT2 = 24226;
        public const IMG_WEAPON_SPLAT3 = 24227;
        public const IMG_WEAPON_STICK = 24224;
        public const IMG_WEAPON_STONEFIST = 24222;
        public const IMG_WEAPON_SWOOSH = 24235;
        public const IMG_WEAPON_SWOOSH2 = 24236;
        public const IMG_WEAPON_SWOOSH3 = 24237;
        public const IMG_WITCH = 25637;
        public const IMG_WITCH_ANI = 25673;
        public const INP_ARENA_ENEMY = 23300;
        public const INP_CHAR_INVITE = 22969;
        public const INP_CHAR_INVITE2 = 22971;
        public const INP_CHARDESC = 22959;
        public const INP_EMAIL = 53;
        public const INP_GILDE_CHAT = 23448;
        public const INP_GILDE_DIALOG_INVITE = 23507;
        public const INP_GILDE_GRUENDEN = 23362;
        public const INP_GILDE_TEXT = 23367;
        public const INP_HALLE_GOTO = 287;
        public const INP_LOGIN_PASSWORD = 60;
        public const INP_NAME = 51;
        public const INP_OPTION_FIELD1 = 24261;
        public const INP_OPTION_FIELD2 = 24262;
        public const INP_OPTION_FIELD3 = 24263;
        public const INP_PASSWORD = 55;
        public const INP_POST_ADDRESS = 23280;
        public const INP_POST_SUBJECT = 23279;
        public const INP_POST_TEXT = 23281;
        public const ITM_EMPTY = 30000;
        public const ITM_MAX = 60000;
        public const ITM_OFFS = 30001;
        public const LBL_AGB = 70;
        public const LBL_ALBUM_COLLECTION = 24379;
        public const LBL_ALBUM_HEADING = 24380;
        public const LBL_ALBUM_HINT = 24384;
        public const LBL_ALBUM_PAGENUMBER_LEFT = 24377;
        public const LBL_ALBUM_PAGENUMBER_RIGHT = 24378;
        public const LBL_ARENA_DELAY = 23303;
        public const LBL_ARENA_TEXT = 23299;
        public const LBL_BEARD = 190;
        public const LBL_BROWS = 188;
        public const LBL_CHAR_ALBUM = 22966;
        public const LBL_CHAR_DELAY = 23077;
        public const LBL_CHAR_MOUNT_DESCR = 22988;
        public const LBL_CHAR_MOUNT_GAIN = 22990;
        public const LBL_CHAR_MOUNT_NAME = 22987;
        public const LBL_CHAR_MOUNT_RUNTIME = 22989;
        public const LBL_CHAR_RUESTUNG = 22992;
        public const LBL_COLOR = 195;
        public const LBL_COMPARE = 24626;
        public const LBL_COPYCAT_NAME = 24738;
        public const LBL_COUNTRY = 25617;
        public const LBL_CREATE_CLASS = 198;
        public const LBL_CREATE_CLASS_DESC = 199;
        public const LBL_CREATE_GOTO_LOGIN = 201;
        public const LBL_CREATE_RACE = 196;
        public const LBL_CREATE_RACE_DESC = 197;
        public const LBL_CS = 24484;
        public const LBL_DAMAGE_INDICATOR = 24196;
        public const LBL_DATENSCHUTZ = 73;
        public const LBL_DEALER_PAYICON1 = 23244;
        public const LBL_DEALER_PAYICON2 = 23245;
        public const LBL_DEALER_PAYICON3 = 23246;
        public const LBL_DEALER_PAYICON4 = 23247;
        public const LBL_DEALER_PAYICON5 = 23248;
        public const LBL_DEALER_PAYICON6 = 23249;
        public const LBL_DEALER_PAYICON7 = 23250;
        public const LBL_DEALER_PAYICON8 = 23251;
        public const LBL_DEALER_PAYICON9 = 23252;
        public const LBL_DISCONNECTED = 24368;
        public const LBL_DUNGEON_CONGRATS = 24355;
        public const LBL_EARS = 192;
        public const LBL_EMAIL = 52;
        public const LBL_EMAIL_NAG = 24371;
        public const LBL_EMAIL_RESEND = 24373;
        public const LBL_ERROR = 61;
        public const LBL_EYES = 189;
        public const LBL_FIGHT_CHAR_AUSDAUER = 24166;
        public const LBL_FIGHT_CHAR_AUSDAUER_CAPTION = 24176;
        public const LBL_FIGHT_CHAR_BEWEGLICHKEIT = 24165;
        public const LBL_FIGHT_CHAR_BEWEGLICHKEIT_CAPTION = 24175;
        public const LBL_FIGHT_CHAR_INTELLIGENZ = 24167;
        public const LBL_FIGHT_CHAR_INTELLIGENZ_CAPTION = 24177;
        public const LBL_FIGHT_CHAR_STAERKE = 24164;
        public const LBL_FIGHT_CHAR_STAERKE_CAPTION = 24174;
        public const LBL_FIGHT_CHAR_WILLENSKRAFT = 24168;
        public const LBL_FIGHT_CHAR_WILLENSKRAFT_CAPTION = 24178;
        public const LBL_FIGHT_OPP_AUSDAUER = 24171;
        public const LBL_FIGHT_OPP_AUSDAUER_CAPTION = 24181;
        public const LBL_FIGHT_OPP_BEWEGLICHKEIT = 24170;
        public const LBL_FIGHT_OPP_BEWEGLICHKEIT_CAPTION = 24180;
        public const LBL_FIGHT_OPP_INTELLIGENZ = 24172;
        public const LBL_FIGHT_OPP_INTELLIGENZ_CAPTION = 24182;
        public const LBL_FIGHT_OPP_STAERKE = 24169;
        public const LBL_FIGHT_OPP_STAERKE_CAPTION = 24179;
        public const LBL_FIGHT_OPP_WILLENSKRAFT = 24173;
        public const LBL_FIGHT_OPP_WILLENSKRAFT_CAPTION = 24183;
        public const LBL_FIGHT_OPPGUILD = 23833;
        public const LBL_FIGHT_PLAYERGUILD = 23832;
        public const LBL_FIGHT_REWARDEXP = 24209;
        public const LBL_FIGHT_REWARDGOLD = 24203;
        public const LBL_FIGHT_REWARDMUSH = 24207;
        public const LBL_FIGHT_REWARDSILVER = 24205;
        public const LBL_FIGHT_SUMMARY = 24197;
        public const LBL_FORGOT_PASSWORD = 63;
        public const LBL_FUCK = 85;
        public const LBL_GILDE_ATTACK = 0x5B5B;
        public const LBL_GILDE_CHAT = 23406;
        public const LBL_GILDE_CHAT_CAPTION = 23405;
        public const LBL_GILDE_CREST_ELEMENT = 24557;
        public const LBL_GILDE_CREST_INSCRIPTION = 24558;
        public const LBL_GILDE_DEFENCE = 23388;
        public const LBL_GILDE_DIALOG_TEXT_INVITE = 23504;
        public const LBL_GILDE_DIALOG_TEXT_KICK = 23502;
        public const LBL_GILDE_DIALOG_TEXT_MASTER = 23503;
        public const LBL_GILDE_DIALOG_TEXT_QUIT = 23501;
        public const LBL_GILDE_DIALOG_TEXT_RAID = 23506;
        public const LBL_GILDE_DIALOG_TEXT_REVOLT = 23505;
        public const LBL_GILDE_GEBAEUDE_KOSTEN_GOLD = 23468;
        public const LBL_GILDE_GEBAEUDE_KOSTEN_MUSH = 23471;
        public const LBL_GILDE_GEBAEUDE_NAME = 23453;
        public const LBL_GILDE_GEBAEUDE_STUFE = 23465;
        public const LBL_GILDE_GEBAEUDE_STUFE_CAPTION = 23462;
        public const LBL_GILDE_GEBAEUDE_WERT = 23459;
        public const LBL_GILDE_GEBAEUDE_WERT_CAPTION = 23456;
        public const LBL_GILDE_GOLD = 23487;
        public const LBL_GILDE_GOLD2 = 23493;
        public const LBL_GILDE_GRUENDEN_TEXT = 23361;
        public const LBL_GILDE_LINK = 23447;
        public const LBL_GILDE_MUSH = 23488;
        public const LBL_GILDE_MUSH2 = 23494;
        public const LBL_GILDE_RANG = 23366;
        public const LBL_GILDE_TITEL = 23364;
        public const LBL_GOTO_LOGIN = 65;
        public const LBL_GOTO_SIGNUP = 67;
        public const LBL_HAIR = 187;
        public const LBL_HALL_GOTO_GILDEN = 292;
        public const LBL_HALL_GOTO_GILDEN_HL = 293;
        public const LBL_HALL_GOTO_SPIELER = 289;
        public const LBL_HALL_GOTO_SPIELER_HL = 290;
        public const LBL_HERO_OF_THE_DAY = 24211;
        public const LBL_HERO_OF_THE_DAY_TITLE = 24210;
        public const LBL_HLMAINQUESTS_TITLE = 24762;
        public const LBL_HUTMANN_GOLDBET = 23567;
        public const LBL_HUTMANN_GOLDBET2 = 23574;
        public const LBL_HUTMANN_INSTR = 23580;
        public const LBL_HUTMANN_MUSHBET = 23568;
        public const LBL_HUTMANN_MUSHBET2 = 23575;
        public const LBL_HUTMANN_TEXT = 23566;
        public const LBL_IF_AGB = 20;
        public const LBL_IF_ANLEITUNG = 24;
        public const LBL_IF_DATENSCHUTZ = 22;
        public const LBL_IF_FORUM = 16;
        public const LBL_IF_GOLD = 30;
        public const LBL_IF_IMPRESSUM = 14;
        public const LBL_IF_LOGOUT = 12;
        public const LBL_IF_PILZE = 32;
        public const LBL_IF_SHOP = 26;
        public const LBL_IF_SILBER = 31;
        public const LBL_INVITE_SUCCESS = 22976;
        public const LBL_INVITE_TEXT = 22968;
        public const LBL_INVITE_TEXT2 = 22970;
        public const LBL_INVITE_TEXT3 = 22972;
        public const LBL_LIFEBAR_CHAR = 24162;
        public const LBL_LIFEBAR_OPP = 24163;
        public const LBL_LM = 24285;
        public const LBL_LOGIN_LEGAL_0 = 80;
        public const LBL_LOGIN_LEGAL_1 = 71;
        public const LBL_LOGIN_LEGAL_2 = 74;
        public const LBL_LOGIN_PASSWORD = 59;
        public const LBL_MAINQUEST_MUSHHINT = 24360;
        public const LBL_MAINQUEST_TEXT = 24359;
        public const LBL_MAINQUEST_TITLE = 24358;
        public const LBL_MAINQUESTS_TITLE = 24309;
        public const LBL_MOUTH = 186;
        public const LBL_NAME = 50;
        public const LBL_NAMERANK_CHAR = 24156;
        public const LBL_NAMERANK_OPP = 24157;
        public const LBL_NOSE = 191;
        public const LBL_OPTION_CHANGE = 24250;
        public const LBL_OPTION_DOCHANGE = 24257;
        public const LBL_OPTION_FIELD1 = 24258;
        public const LBL_OPTION_FIELD2 = 24259;
        public const LBL_OPTION_FIELD3 = 24260;
        public const LBL_OPTION_IMAGE = 24247;
        public const LBL_OPTION_TITLE = 24246;
        public const LBL_OPTION_VER = 24282;
        public const LBL_OPTION_VOLUME = 24268;
        public const LBL_PASSWORD = 54;
        public const LBL_POST_FLUSH_TEXT = 24596;
        public const LBL_POST_GUILD = 23290;
        public const LBL_POST_LIMIT = 23288;
        public const LBL_POST_TITLE_INBOX = 23266;
        public const LBL_POST_TITLE_READ = 23267;
        public const LBL_POST_TITLE_WRITE = 23268;
        public const LBL_PW_GOTO_LOGIN = 25616;
        public const LBL_QO_CHOICE1 = 23596;
        public const LBL_QO_CHOICE1_HL = 23601;
        public const LBL_QO_CHOICE2 = 23597;
        public const LBL_QO_CHOICE2_HL = 23602;
        public const LBL_QO_CHOICE3 = 23598;
        public const LBL_QO_CHOICE3_HL = 23603;
        public const LBL_QO_CHOICE4 = 23599;
        public const LBL_QO_CHOICE4_HL = 23604;
        public const LBL_QO_CHOICE5 = 23600;
        public const LBL_QO_CHOICE5_HL = 23605;
        public const LBL_QO_CHOOSE = 23590;
        public const LBL_QO_QUESTNAME = 23606;
        public const LBL_QO_QUESTSTODAY = 23618;
        public const LBL_QO_QUESTTEXT = 23607;
        public const LBL_QO_REWARD = 23608;
        public const LBL_QO_REWARDEXP = 23613;
        public const LBL_QO_REWARDGOLD = 23610;
        public const LBL_QO_REWARDITM = 23614;
        public const LBL_QO_REWARDSILVER = 23612;
        public const LBL_QO_TIME = 23615;
        public const LBL_QUESTBAR_TEXT = 23210;
        public const LBL_SCR_ARBEITEN_TEXT = 296;
        public const LBL_SCR_ARBEITEN_TEXT2 = 297;
        public const LBL_SCR_ARBEITEN_TIME = 315;
        public const LBL_SCR_CHAR_AUSDAUER = 365;
        public const LBL_SCR_CHAR_AUSDAUER_CAPTION = 375;
        public const LBL_SCR_CHAR_BEWEGLICHKEIT = 364;
        public const LBL_SCR_CHAR_BEWEGLICHKEIT_CAPTION = 374;
        public const LBL_SCR_CHAR_EHRE = 22956;
        public const LBL_SCR_CHAR_EXPLABEL = 359;
        public const LBL_SCR_CHAR_GILDE = 22955;
        public const LBL_SCR_CHAR_INTELLIGENZ = 366;
        public const LBL_SCR_CHAR_INTELLIGENZ_CAPTION = 376;
        public const LBL_SCR_CHAR_KAMPFWERT = 369;
        public const LBL_SCR_CHAR_KAMPFWERT_CAPTION = 379;
        public const LBL_SCR_CHAR_LEBEN = 370;
        public const LBL_SCR_CHAR_LEBEN_CAPTION = 380;
        public const LBL_SCR_CHAR_NAME = 355;
        public const LBL_SCR_CHAR_PREIS1 = 388;
        public const LBL_SCR_CHAR_RUESTUNG = 371;
        public const LBL_SCR_CHAR_RUESTUNG_CAPTION = 381;
        public const LBL_SCR_CHAR_SCHADEN = 368;
        public const LBL_SCR_CHAR_SCHADEN_CAPTION = 378;
        public const LBL_SCR_CHAR_SILBER1 = 398;
        public const LBL_SCR_CHAR_STAERKE = 363;
        public const LBL_SCR_CHAR_STAERKE_CAPTION = 373;
        public const LBL_SCR_CHAR_WIDERSTAND = 372;
        public const LBL_SCR_CHAR_WIDERSTAND_CAPTION = 382;
        public const LBL_SCR_CHAR_WILLENSKRAFT = 367;
        public const LBL_SCR_CHAR_WILLENSKRAFT_CAPTION = 377;
        public const LBL_SCREEN_TITLE = 113;
        public const LBL_SERVER = 25620;
        public const LBL_SPECIAL = 193;
        public const LBL_SPECIAL2 = 194;
        public const LBL_STALL_GAIN = 23347;
        public const LBL_STALL_GOLD = 23353;
        public const LBL_STALL_LAUFZEIT = 23346;
        public const LBL_STALL_MUSH = 23355;
        public const LBL_STALL_SCHATZ = 23348;
        public const LBL_STALL_SCHATZGOLD = 23350;
        public const LBL_STALL_SCHATZSILBER = 23352;
        public const LBL_STALL_TEXT = 23345;
        public const LBL_STALL_TITEL = 23344;
        public const LBL_TIMEBAR_TEXT = 23545;
        public const LBL_TOILET_AURA = 24620;
        public const LBL_TOWER_BOOSTPRICELABEL = 25604;
        public const LBL_TOWER_EXPLABEL = 25603;
        public const LBL_TV_CHECKBOX = 25705;
        public const LBL_WINDOW_TITLE = 46;
        public const LBL_WINDOW_TITLE_HIGH = 25614;
        public const LBL_WORLD_TITLE = 25623;
        public const POPUP_BEGIN_LINE = 5;
        public const POPUP_END_LINE = 0;
        public const POPUP_INFO = 41;
        public const POS_AGB_X = 150;
        public const POS_ANLEITUNG_X = 1000;
        public const POS_ANLEITUNG_X_WITH_SHOP = 1035;
        public const POS_ARBEITEN_SLIDER_X = 650;
        public const POS_ARBEITEN_SLIDER_Y = 420;
        public const POS_ARENA_FEUER_X = 442;
        public const POS_ARENA_FEUER_Y = 126;
        public const POS_BUBBLE_ARENA_X = 375;
        public const POS_BUBBLE_ARENA_Y = 228;
        public const POS_BUBBLE_DEALER_X = 606;
        public const POS_BUBBLE_DEALER_Y = 480;
        public const POS_BUBBLE_ESEL_X = 289;
        public const POS_BUBBLE_ESEL_Y = 495;
        public const POS_BUBBLE_KRISTALL_X = 582;
        public const POS_BUBBLE_KRISTALL_Y = 175;
        public const POS_BUBBLE_ORAKEL_X = 782;
        public const POS_BUBBLE_ORAKEL_Y = 155;
        public const POS_BUBBLE_POST_X = 775;
        public const POS_BUBBLE_POST_Y = 440;
        public const POS_BUBBLE_RUHMESHALLE_X = 1076;
        public const POS_BUBBLE_RUHMESHALLE_Y = 593;
        public const POS_BUBBLE_SHAKES_X = 1032;
        public const POS_BUBBLE_SHAKES_Y = 517;
        public const POS_BUBBLE_STATUE_X = 1136;
        public const POS_BUBBLE_STATUE_Y = 381;
        public const POS_BUBBLE_TAVERNE_X = 468;
        public const POS_BUBBLE_TAVERNE_Y = 441;
        public const POS_BUBBLE_WACHE_X = 500;
        public const POS_BUBBLE_WACHE_Y = 625;
        public const POS_BUBBLE_ZAUBERLADEN_X = 964;
        public const POS_BUBBLE_ZAUBERLADEN_Y = 343;
        public const POS_CHAR_MOUNT_X = 805;
        public const POS_CHAR_MOUNT_Y = 429;
        public const POS_CHAR_NAME_X = 410;
        public const POS_CHAR_NAME_Y = 345;
        public const POS_CHAR_PLAYERBTN_X1 = 830;
        public const POS_CHAR_PLAYERBTN_X2 = 1030;
        public const POS_CHAR_PLAYERBTN_Y = 715;
        public const POS_CHAR_PROP_COLUMN_1_X = 304;
        public const POS_CHAR_PROP_COLUMN_2_X = 405;
        public const POS_CHAR_PROP_COLUMN_3_X = 470;
        public const POS_CHAR_PROP_COLUMN_4_X = 520;
        public const POS_CHAR_PROP_COLUMN_5_X = 520;
        public const POS_CHAR_PROP_COLUMN_6_X = 650;
        public const POS_CHAR_PROP_Y = 517;
        public const POS_CHAR_SLOTS_LEFT_X = 304;
        public const POS_CHAR_SLOTS_R4C2_X = 441;
        public const POS_CHAR_SLOTS_R4C3_X = 543;
        public const POS_CHAR_SLOTS_R5C2_X = 398;
        public const POS_CHAR_SLOTS_R5C3_X = 493;
        public const POS_CHAR_SLOTS_R5C4_X = 588;
        public const POS_CHAR_SLOTS_RIGHT_X = 680;
        public const POS_CHAR_SLOTS_ROW2_Y = 217;
        public const POS_CHAR_SLOTS_ROW3_Y = 317;
        public const POS_CHAR_SLOTS_ROW4_Y = 417;
        public const POS_CHAR_SLOTS_ROW5_Y = 679;
        public const POS_CHAR_SLOTS_TOP_Y = 117;
        public const POS_CITY_ARENA_X = 280;
        public const POS_CITY_ARENA_Y = 100;
        public const POS_CITY_CA_ARENA_X = 280;
        public const POS_CITY_CA_ARENA_Y = 170;
        public const POS_CITY_CA_BUH_X = 1105;
        public const POS_CITY_CA_BUH_Y = 410;
        public const POS_CITY_CA_DEALER_X = 570;
        public const POS_CITY_CA_DEALER_Y = 580;
        public const POS_CITY_CA_ESEL_X = 280;
        public const POS_CITY_CA_ESEL_Y = 618;
        public const POS_CITY_CA_POST_X = 830;
        public const POS_CITY_CA_POST_Y = 500;
        public const POS_CITY_CA_RUHMESHALLE_X = 1150;
        public const POS_CITY_CA_RUHMESHALLE_Y = 400;
        public const POS_CITY_CA_SHAKES_X = 945;
        public const POS_CITY_CA_SHAKES_Y = 550;
        public const POS_CITY_CA_TAVERNE_X = 440;
        public const POS_CITY_CA_TAVERNE_Y = 530;
        public const POS_CITY_CA_WACHE_X = 670;
        public const POS_CITY_CA_WACHE_Y = 570;
        public const POS_CITY_CA_ZAUBERLADEN_X = 985;
        public const POS_CITY_CA_ZAUBERLADEN_Y = 410;
        public const POS_CITY_DEALER_X = 578;
        public const POS_CITY_DEALER_Y = 593;
        public const POS_CITY_ELF_X = 943;
        public const POS_CITY_ELF_Y = 405;
        public const POS_CITY_ESEL_X = 280;
        public const POS_CITY_ESEL_Y = 618;
        public const POS_CITY_MAGIER_X = 655;
        public const POS_CITY_MAGIER_Y = 630;
        public const POS_CITY_ORK_X = 850;
        public const POS_CITY_ORK_Y = 580;
        public const POS_CITY_POST_X = 872;
        public const POS_CITY_POST_Y = 546;
        public const POS_CITY_RUHMESHALLE_X = 1135;
        public const POS_CITY_RUHMESHALLE_Y = 340;
        public const POS_CITY_SANDWICH_X = 780;
        public const POS_CITY_SANDWICH_Y = 610;
        public const POS_CITY_SCHILD_X = 739;
        public const POS_CITY_SCHILD_Y = 623;
        public const POS_CITY_SHAKES_X = 1023;
        public const POS_CITY_SHAKES_Y = 585;
        public const POS_CITY_TAVERNE_X = 471;
        public const POS_CITY_TAVERNE_Y = 560;
        public const POS_CITY_WACHE_X = 670;
        public const POS_CITY_WACHE_Y = 582;
        public const POS_CITY_ZAUBERLADEN_X = 1014;
        public const POS_CITY_ZAUBERLADEN_Y = 446;
        public const POS_CITY_ZWERG_X = 480;
        public const POS_CITY_ZWERG_Y = 580;
        public const POS_CREATE_RACE_X = 640;
        public const POS_CREATE_RACE_Y = 520;
        public const POS_DATENSCHUTZ_X = 250;
        public const POS_DEALER_AKTION_X = 290;
        public const POS_DEALER_AKTION_Y = 235;
        public const POS_DEALER_ARM_X = 455;
        public const POS_DEALER_ARM_Y = 265;
        public const POS_DEALER_AUGEN_X = 605;
        public const POS_DEALER_AUGEN_Y = 265;
        public const POS_DEALER_MENU_X = 760;
        public const POS_DEALER_MENU_Y = 430;
        public const POS_DEALER_SPONSOR_X = 1080;
        public const POS_DEALER_SPONSOR_Y = 520;
        public const POS_DEMO_BTN_X = 1050;
        public const POS_DEMO_BTN_Y = 700;
        public const POS_DEMO_Y = 380;
        public const POS_DISCONNECTED_X = 780;
        public const POS_DISCONNECTED_Y = 360;
        public const POS_EMAIL_NAG_X = 580;
        public const POS_EMAIL_NAG_Y = 340;
        public const POS_EXPERIENCE_BAR_X = 409;
        public const POS_EXPERIENCE_BAR_Y = 381;
        public const POS_FIGHT_BTN_Y = 710;
        public const POS_FIGHT_CHAR_PROP_COLUMN_1_X = 324;
        public const POS_FIGHT_CHAR_PROP_COLUMN_2_X = 450;
        public const POS_FIGHT_CHAR_PROP_COLUMN_3_X = 1059;
        public const POS_FIGHT_CHAR_PROP_COLUMN_4_X = 1185;
        public const POS_FIGHT_CHAR_PROP_Y = 520;
        public const POS_FIGHT_CHARIMG_X = 315;
        public const POS_FIGHT_REWARDEXP_X = 535;
        public const POS_FIGHT_REWARDGOLD_X = 1000;
        public const POS_FIGHT_REWARDGOLD_Y = 640;
        public const POS_FIGHT_REWARDMUSH_Y = 610;
        public const POS_FIGHT_SLOT_Y = 580;
        public const POS_FIGHT_SUMMARY_Y = 520;
        public const POS_FIGHT_WEAPONS_Y = 350;
        public const POS_FORUM_X = 900;
        public const POS_FORUM_X_WITH_SHOP = 945;
        public const POS_GILDE_ATTACKBTN_X = 450;
        public const POS_GILDE_ATTACKLABEL_X = 570;
        public const POS_GILDE_CHAT_FIELD_Y = 743;
        public const POS_GILDE_CHAT_X = 305;
        public const POS_GILDE_CHAT_Y = 624;
        public const POS_GILDE_DEFENDBTN_X = 505;
        public const POS_GILDE_GEBAEUDE_X = 310;
        public const POS_GILDE_GEBAEUDE_Y = 162;
        public const POS_GILDE_GOLD_Y = 488;
        public const POS_GILDE_GOLDMUSH_X = 670;
        public const POS_GILDE_LIST_SCROLLBTN_X = 1205;
        public const POS_GILDE_LIST_SCROLLBTN_Y = 520;
        public const POS_GILDE_LIST_X = 997;
        public const POS_GILDE_LIST_Y = 160;
        public const POS_GILDE_RANG_X = 300;
        public const POS_GILDE_RANG_Y = 115;
        public const POS_GILDE_TEXT_X = 580;
        public const POS_GILDE_TOOLBTN_X = 989;
        public const POS_GILDE_TOOLBTN_Y = 564;
        public const POS_GILDEEHRE_X = 795;
        public const POS_GILDEEHRE_Y = 120;
        public const POS_HALL_LIST_X = 580;
        public const POS_HALL_LIST_Y = 235;
        public const POS_HALLE_BTN_GOTO_X = 875;
        public const POS_HALLE_BTN_GOTO_Y = 570;
        public const POS_HALLE_DOWN_Y = 565;
        public const POS_HALLE_GOTO_GILDEN_X = 870;
        public const POS_HALLE_GOTO_SPIELER_X = 670;
        public const POS_HALLE_GOTO_SPIELERGILDEN_Y = 145;
        public const POS_HALLE_INP_GOTO_X = 615;
        public const POS_HALLE_INP_GOTO_Y = 585;
        public const POS_HALLE_UP_Y = 195;
        public const POS_HALLE_UPDOWN_X = 980;
        public const POS_HUTMANN_BACK_X = 1140;
        public const POS_HUTMANN_BACK_Y = 620;
        public const POS_HUTMANN_GOLD_Y = 660;
        public const POS_HUTMANN_INSTR_X = 300;
        public const POS_HUTMANN_INSTR_Y = 115;
        public const POS_HUTMANN_KUGEL_X1 = 535;
        public const POS_HUTMANN_KUGEL_X2 = 762;
        public const POS_HUTMANN_KUGEL_X3 = 1004;
        public const POS_HUTMANN_OK_X = 960;
        public const POS_HUTMANN_OK_Y = 650;
        public const POS_HUTMANN_TEXT_Y = 635;
        public const POS_IF_BTN_X = 20;
        public const POS_IF_BTN_Y = 180;
        public const POS_IF_ERROR_X = 770;
        public const POS_IF_ERROR_Y = 670;
        public const POS_IF_EXIT_X = 1220;
        public const POS_IF_EXIT_Y = 120;
        public const POS_IF_HUTLINK_X = 35;
        public const POS_IF_HUTLINK_Y = 185;
        public const POS_IF_LBL_GOLD_Y = 115;
        public const POS_IF_LBL_GOLDPILZE_X = 230;
        public const POS_IF_LBL_PILZE_Y = 145;
        public const POS_IF_WIN_X = 540;
        public const POS_IF_WIN_Y = 250;
        public const POS_IMPRESSUM_X = 380;
        public const POS_LBL_ARBEITEN_TEXT2_Y = 475;
        public const POS_LBL_ARBEITEN_TEXT_X = 590;
        public const POS_LBL_ARBEITEN_TEXT_Y = 340;
        public const POS_LM_X = 370;
        public const POS_LM_Y = 600;
        public const POS_LOGOUT_X = 1100;
        public const POS_LOGOUT_X_WITH_SHOP = 1130;
        public const POS_LOGOUT_Y = 50;
        public const POS_MAINQUEST_ENEMY_X = 630;
        public const POS_MAINQUEST_ENEMY_Y = 330;
        public const POS_MODIFY_CHARACTER_BUTTONS_X = 1020;
        public const POS_MODIFY_CHARACTER_BUTTONS_Y = 160;
        public const POS_MQ_CS_X = 680;
        public const POS_MQ_CS_Y = 450;
        public const POS_MQ_ERROR_Y = 735;
        public const POS_MQ_SQUARE_X = 470;
        public const POS_MQ_SQUARE_Y = 80;
        public const POS_MQS_BUTTON_X = 380;
        public const POS_MQS_BUTTON_Y = 170;
        public const POS_MQS_TITLE_Y = 115;
        public const POS_NEW_WAREZ_X = 1025;
        public const POS_NEW_WAREZ_Y = 495;
        public const POS_OPPIMG_X = 930;
        public const POS_OPPIMG_Y = 130;
        public const POS_OPTION_X = 350;
        public const POS_OPTION_Y = 180;
        public const POS_POST_ADDRESS_Y = 190;
        public const POS_POST_BUTTONS_X = 330;
        public const POS_POST_BUTTONS_Y = 685;
        public const POS_POST_ERROR_Y = 740;
        public const POS_POST_INP_X = 330;
        public const POS_POST_LIST_X = 330;
        public const POS_POST_LIST_Y = 190;
        public const POS_POST_PROFILE_BTN_X = 1170;
        public const POS_POST_SCROLLBTN_X = 1190;
        public const POS_POST_SCROLLDOWN_Y = 695;
        public const POS_POST_SCROLLUP_Y = 190;
        public const POS_POST_SENDBUTTON_Y = 685;
        public const POS_POST_SQUARE_X = 320;
        public const POS_POST_SQUARE_Y = 100;
        public const POS_POST_SUBJECT_Y = 220;
        public const POS_POST_TEXT_Y = 250;
        public const POS_POTION_X = 1079;
        public const POS_POTION_Y = 590;
        public const POS_QO_BLACK_SQUARE_X = 410;
        public const POS_QO_BLACK_SQUARE_Y = 230;
        public const POS_QUEST_CANCEL_X = 780;
        public const POS_QUEST_CANCEL_Y = 700;
        public const POS_QUEST_ERROR_Y = 540;
        public const POS_QUESTBAR_LABEL_X = 778;
        public const POS_QUESTBAR_LABEL_Y = 625;
        public const POS_QUESTBAR_X = 390;
        public const POS_QUESTBAR_Y = 580;
        public const POS_SCR_BUILDCHAR_1_X = 312;
        public const POS_SCR_BUILDCHAR_1_Y = 134;
        public const POS_SCR_BUILDCHAR_CASTE_X = 332;
        public const POS_SCR_BUILDCHAR_CASTE_Y = 610;
        public const POS_SCR_BUILDCHAR_CREATE_X = 702;
        public const POS_SCR_BUILDCHAR_CREATE_Y = 715;
        public const POS_SCR_BUILDCHAR_GENDER_X = 372;
        public const POS_SCR_BUILDCHAR_GENDER_Y = 195;
        public const POS_SCR_BUILDCHAR_LOGIN_X = 1230;
        public const POS_SCR_BUILDCHAR_LOGIN_Y = 725;
        public const POS_SCR_BUILDCHAR_VOLK_X = 345;
        public const POS_SCR_BUILDCHAR_VOLK_Y = 300;
        public const POS_SCR_CHAR_ACH_X = 795;
        public const POS_SCR_CHAR_ACH_Y = 635;
        public const POS_SCR_CHAR_CHARIMG_X = 408;
        public const POS_SCR_CHAR_CHARIMG_Y = 119;
        public const POS_SCR_SHOP_BG_X = 780;
        public const POS_SCREEN_BACK_BUTTON_X = 1120;
        public const POS_SCREEN_BACK_BUTTON_Y = 650;
        public const POS_SCREEN_RANDOM_BUTTON_X = 1030;
        public const POS_SCREEN_RANDOM_BUTTON_Y = 620;
        public const POS_SCREEN_TITLE_X = 770;
        public const POS_SCREEN_TITLE_Y = 120;
        public const POS_SCREEN_TITLE_Y_GUILD = 110;
        public const POS_SCREEN_TITLE_Y_QUEST = 120;
        public const POS_SHOP_ERROR_X = 1030;
        public const POS_SHOP_ERROR_Y = 185;
        public const POS_SHOP_SLOTS_C1_X = 856;
        public const POS_SHOP_SLOTS_C2_X = 972;
        public const POS_SHOP_SLOTS_C3_X = 1088;
        public const POS_SHOP_SLOTS_R1_Y = 560;
        public const POS_SHOP_SLOTS_R2_Y = 680;
        public const POS_SHOP_X = 860;
        public const POS_SPONSOR_X = 1020;
        public const POS_SPONSOR_Y = 0;
        public const POS_STADT_BACKG_X = 280;
        public const POS_STADT_BACKG_Y = 101;
        public const POS_STADT_MAIN_X = 280;
        public const POS_STADT_MAIN_Y = 365;
        public const POS_STALL_ERROR_Y = 500;
        public const POS_STALL_SQUARE_Y = 560;
        public const POS_TAVERNE_BAR_X = 1030;
        public const POS_TAVERNE_BAR_Y = 320;
        public const POS_TAVERNE_BAROVL_X = 1093;
        public const POS_TAVERNE_BAROVL_Y = 320;
        public const POS_TIMEBAR_LABEL_X = 0x0300;
        public const POS_TIMEBAR_LABEL_Y = 705;
        public const POS_TIMEBAR_X = 380;
        public const POS_TIMEBAR_Y = 660;
        public const REL_AGB_LBL_X = 50;
        public const REL_AGB_LBL_Y = 8;
        public const REL_ARBEITEN_BAR_X = 55;
        public const REL_ARBEITEN_BAR_Y = 200;
        public const REL_ARBEITEN_BTN_Y = 270;
        public const REL_ARBEITEN_FILL_X = 110;
        public const REL_ARBEITEN_FILL_Y = 222;
        public const REL_ARENA_DELAY_X = 75;
        public const REL_ARENA_DELAY_Y = 292;
        public const REL_ARENA_INP_Y = 220;
        public const REL_ARENA_OK_Y = 280;
        public const REL_ARENA_TEXT_Y = 80;
        public const REL_BLACK_CHARDESC_Y = 15;
        public const REL_BUILDCHAR_LINES_Y = 10;
        public const REL_CHAR_DELAY_X = 335;
        public const REL_CHAR_DELAY_Y = 655;
        public const REL_CHAR_EHRE_X = 20;
        public const REL_CHAR_MOUNT_IMG_X = 274;
        public const REL_CHAR_MOUNT_LINE_Y = 25;
        public const REL_CHAR_PROP_Y = 32;
        public const REL_CHAR_RUESTUNG_TEXT_X = 45;
        public const REL_CHAR_RUESTUNG_TEXT_Y = 7;
        public const REL_CHAR_RUESTUNG_X = 15;
        public const REL_CHAR_RUESTUNG_Y = 495;
        public const REL_CHARIMG_X = 20;
        public const REL_CHARIMG_Y = 51;
        public const REL_COMPARE_TAB = 280;
        public const REL_DEALER_2BTN_Y = -15;
        public const REL_DEALER_3BTN_Y = -40;
        public const REL_DRAGON_X = 180;
        public const REL_DRAGON_Y = -10;
        public const REL_EMAIL_NAG_BTN_Y = 280;
        public const REL_EMAIL_RESEND_Y = 150;
        public const REL_FIDGET_AFFE_X = 425;
        public const REL_FIDGET_AFFE_Y = 128;
        public const REL_FIDGET_BLINZELN_X = 107;
        public const REL_FIDGET_BLINZELN_Y = 88;
        public const REL_FIDGET_NACHTKERZE_X = 63;
        public const REL_FIDGET_NACHTKERZE_Y = 236;
        public const REL_FIDGET_TAGKERZE_X = 212;
        public const REL_FIDGET_TAGKERZE_Y = 12;
        public const REL_FIDGET_X = 74;
        public const REL_FIDGET_Y = 168;
        public const REL_FIGHT_BOX1_X = -17;
        public const REL_FIGHT_BOX1_Y = -15;
        public const REL_FIGHT_BOX3_X = -17;
        public const REL_FIGHT_CHAR_PROP_Y = 32;
        public const REL_GILDE_BUILDING_Y = 100;
        public const REL_GILDE_CHAT_CAPTION_Y = 32;
        public const REL_GILDE_CHAT_DOWN_Y = 75;
        public const REL_GILDE_CHAT_UP_Y = 5;
        public const REL_GILDE_CHAT_Y = 22;
        public const REL_GILDE_DEFENSELABEL_Y = 24;
        public const REL_GILDE_GEBAEUDE_IMPROVE_X = 105;
        public const REL_GILDE_GEBAEUDE_IMPROVE_Y = 53;
        public const REL_GILDE_GEBAEUDE_LINE = 24;
        public const REL_GILDE_GEBAEUDE_Y = 133;
        public const REL_GILDE_GOLDMUSH_C1 = 10;
        public const REL_GILDE_GOLDMUSH_C2 = 205;
        public const REL_GILDE_GOLDMUSH_C3 = 0;
        public const REL_GILDE_GRUENDEN_INP_Y = 220;
        public const REL_GILDE_GRUENDEN_OK_Y = 280;
        public const REL_GILDE_GRUENDEN_TEXT_Y = 80;
        public const REL_GILDE_INP_Y = 220;
        public const REL_GILDE_LIST_C1 = 23;
        public const REL_GILDE_LIST_X = 200;
        public const REL_GILDE_LIST_Y = 26;
        public const REL_GILDE_MUSH_Y = 27;
        public const REL_GILDE_OK_Y = 280;
        public const REL_GILDE_TEXT_IMPROVE_X = 143;
        public const REL_GILDE_TEXT_X = 105;
        public const REL_GILDE_TEXT_Y = 80;
        public const REL_GILDE_TOOLBTN_X = 53;
        public const REL_GILDEEHRE_X = 10;
        public const REL_GILDEEHRE_Y = 10;
        public const REL_HALL_LIST_COLUMN_1_X = 0;
        public const REL_HALL_LIST_COLUMN_2_X = 60;
        public const REL_HALL_LIST_COLUMN_3_X = 80;
        public const REL_HALL_LIST_COLUMN_4_X = 200;
        public const REL_HALL_LIST_COLUMN_5_X = 320;
        public const REL_HALL_LIST_COLUMN_6_X = 370;
        public const REL_HALL_LIST_LINE_Y = 20;
        public const REL_HALL_LIST_LINES_Y = 0;
        public const REL_HUTKUGEL_Y = 500;
        public const REL_HUTMANN_BECHER1_X = 204;
        public const REL_HUTMANN_BECHER1_X2 = 0;
        public const REL_HUTMANN_BECHER1_X3 = 0;
        public const REL_HUTMANN_BECHER1_Y = 417;
        public const REL_HUTMANN_BECHER1_Y2 = -72;
        public const REL_HUTMANN_BECHER1_Y3 = -127;
        public const REL_HUTMANN_BECHER2_X = 430;
        public const REL_HUTMANN_BECHER2_X2 = -201;
        public const REL_HUTMANN_BECHER2_X3 = -203;
        public const REL_HUTMANN_BECHER2_Y = 417;
        public const REL_HUTMANN_BECHER2_Y2 = -54;
        public const REL_HUTMANN_BECHER2_Y3 = -120;
        public const REL_HUTMANN_BECHER3_X = 669;
        public const REL_HUTMANN_BECHER3_X2 = -16;
        public const REL_HUTMANN_BECHER3_X3 = -16;
        public const REL_HUTMANN_BECHER3_Y = 417;
        public const REL_HUTMANN_BECHER3_Y2 = -39;
        public const REL_HUTMANN_BECHER3_Y3 = -89;
        public const REL_HUTMANN_FACE_X = 389;
        public const REL_HUTMANN_FACE_Y = 115;
        public const REL_IF_BTN_1 = 44;
        public const REL_IF_BTN_2 = 20;
        public const REL_IF_GOTO_LOGIN_X = 450;
        public const REL_IF_WIN_BTN_2_Y = 35;
        public const REL_IF_WIN_BTN_X = -87;
        public const REL_IF_WIN_BTN_Y = 250;
        public const REL_IF_WIN_CB_X = 70;
        public const REL_IF_WIN_CB_Y = 245;
        public const REL_IF_WIN_INPUTS_DISTANCE_Y = 55;
        public const REL_IF_WIN_INPUTS_FIELD_X = 80;
        public const REL_IF_WIN_INPUTS_FIELD_Y = -15;
        public const REL_IF_WIN_INPUTS_X = 70;
        public const REL_IF_WIN_INPUTS_Y = 100;
        public const REL_IF_WIN_LNK_1_Y = -40;
        public const REL_IF_WIN_LNK_2_Y = 50;
        public const REL_IF_WIN_WELCOME_X = 250;
        public const REL_IF_WIN_WELCOME_Y = 45;
        public const REL_LBL_ARBEITEN_TIME_Y = 160;
        public const REL_LIFEBAR_Y = 15;
        public const REL_LM_X = 50;
        public const REL_LM_Y = 6;
        public const REL_MODIFY_CHARACTER_BUTTONS_1 = 45;
        public const REL_MODIFY_CHARACTER_BUTTONS_2 = 55;
        public const REL_MODIFY_CHARACTER_LABEL_X = 50;
        public const REL_MODIFY_CHARACTER_LABEL_Y = 6;
        public const REL_MQ_BORDER_X = 10;
        public const REL_MQ_BORDER_Y = 10;
        public const REL_MQ_BUTTON_Y = -20;
        public const REL_MQ_MUSHHINT_Y = -15;
        public const REL_MQ_TEXT_X = 20;
        public const REL_MQ_TEXT_Y = 130;
        public const REL_MQ_TITLE_Y = 90;
        public const REL_MQS_BUTTON_X = 280;
        public const REL_MQS_BUTTON_Y = 195;
        public const REL_OPTION_BOX1_X = -5;
        public const REL_OPTION_BOX1_Y = -5;
        public const REL_OPTION_BOX2_X = -5;
        public const REL_OPTION_BOX2_Y = -5;
        public const REL_OPTION_CHANGE_X = 230;
        public const REL_OPTION_DOCHANGE_BTN_X = 640;
        public const REL_OPTION_DOCHANGE_FIELD_X = 570;
        public const REL_OPTION_DOCHANGE_LABEL_X = 440;
        public const REL_OPTION_DOCHANGE_X = 430;
        public const REL_OPTION_IMAGE_X = 20;
        public const REL_OPTION_TEXT_Y = 13;
        public const REL_OPTION_VER_X = 825;
        public const REL_OPTION_VER_Y = 450;
        public const REL_OPTION_VOLUME_X = 287;
        public const REL_OPTION_Y0 = 15;
        public const REL_OPTION_Y1 = 65;
        public const REL_OPTION_Y2 = 105;
        public const REL_OPTION_Y3 = 170;
        public const REL_OPTION_Y4 = 235;
        public const REL_OPTION_Y5 = 300;
        public const REL_OPTION_Y6 = 380;
        public const REL_OPTION_Y7 = 430;
        public const REL_POPUP_TAB = 120;
        public const REL_POPUP_TAB1 = 35;
        public const REL_POPUP_TAB2 = 100;
        public const REL_POPUP_TAB3 = 130;
        public const REL_POPUP_TAB_ADD = 17;
        public const REL_POST_BUTTONS_X = 5;
        public const REL_POST_FENSTER_X = 479;
        public const REL_POST_FENSTER_Y = 14;
        public const REL_POST_LIMIT_X = -10;
        public const REL_POST_LIMIT_Y = -55;
        public const REL_POST_LIST_COLUMN_1_X = 0;
        public const REL_POST_LIST_COLUMN_2_X = 160;
        public const REL_POST_LIST_COLUMN_3_X = 660;
        public const REL_POST_LIST_LINE_Y = 30;
        public const REL_POST_LIST_LINES_Y = 0;
        public const REL_POST_SQUARE_X = 910;
        public const REL_POST_SQUARE_Y = 560;
        public const REL_POST_VOGEL_X = 234;
        public const REL_POST_VOGEL_Y = 100;
        public const REL_POTION_X = 50;
        public const REL_QO_CHOICES_Y = 40;
        public const REL_QO_CHOOSE_X = 20;
        public const REL_QO_CHOOSE_Y = 280;
        public const REL_QO_PORTRAIT_X = 20;
        public const REL_QO_PORTRAIT_Y = 20;
        public const REL_QO_QUESTNAME_X = 480;
        public const REL_QO_QUESTNAME_Y = 20;
        public const REL_QO_QUESTSTODAY_X = 500;
        public const REL_QO_QUESTSTODAY_Y = 20;
        public const REL_QO_QUESTTEXT_X = 250;
        public const REL_QO_QUESTTEXT_Y = 60;
        public const REL_QO_RETURN_Y = 325;
        public const REL_QO_REWARD_Y = 280;
        public const REL_QO_REWARDS_Y = 40;
        public const REL_QO_SLOT_X = 400;
        public const REL_QO_SLOT_Y = 335;
        public const REL_QO_START_X = 550;
        public const REL_QO_START_Y = 380;
        public const REL_SCR_BUILDCHAR_CASTE_X = 80;
        public const REL_SCR_BUILDCHAR_GENDER_X = 80;
        public const REL_SCR_BUILDCHAR_VOLK_X = 130;
        public const REL_SCR_BUILDCHAR_VOLK_Y = 70;
        public const REL_SCR_CHAR_ACH_X = 55;
        public const REL_SCR_CHAR_ACH_X_BUFFED = 65;
        public const REL_SHAKES_BLINZELN_X = 56;
        public const REL_SHAKES_BLINZELN_Y = 33;
        public const REL_SHAKES_IDLE2_X = 54;
        public const REL_SHAKES_IDLE2_Y = 115;
        public const REL_SHAKES_IDLE_X = 88;
        public const REL_SHAKES_IDLE_Y = 212;
        public const REL_SHAKES_X = 171;
        public const REL_SHAKES_Y = 112;
        public const REL_STADT_FOREG_Y = 96;
        public const REL_STALL_ARME_X = 373;
        public const REL_STALL_ARME_Y = 181;
        public const REL_STALL_BOX1_X = 0;
        public const REL_STALL_BOX1_Y = 50;
        public const REL_STALL_BOX2_X = 225;
        public const REL_STALL_BOX2_Y = 81;
        public const REL_STALL_BOX3_X = 585;
        public const REL_STALL_BOX3_Y = 78;
        public const REL_STALL_BOX4_X = 778;
        public const REL_STALL_BOX4_Y = 50;
        public const REL_STALL_GAIN_Y = 40;
        public const REL_STALL_OVL_BOESE1_X = 100;
        public const REL_STALL_OVL_BOESE1_Y = 305;
        public const REL_STALL_OVL_BOESE2_X = 254;
        public const REL_STALL_OVL_BOESE2_Y = 217;
        public const REL_STALL_OVL_BOESE3_X = 578;
        public const REL_STALL_OVL_BOESE3_Y = 310;
        public const REL_STALL_OVL_BOESE4_X = 756;
        public const REL_STALL_OVL_BOESE4_Y = 168;
        public const REL_STALL_OVL_GUT1_X = 80;
        public const REL_STALL_OVL_GUT1_Y = 265;
        public const REL_STALL_OVL_GUT2_X = 303;
        public const REL_STALL_OVL_GUT2_Y = 291;
        public const REL_STALL_OVL_GUT3_X = 580;
        public const REL_STALL_OVL_GUT3_Y = 145;
        public const REL_STALL_OVL_GUT4_X = 761;
        public const REL_STALL_OVL_GUT4_Y = 263;
        public const REL_STALL_TITEL_X = 10;
        public const REL_STALL_TITEL_Y = 10;
        public const REL_STALL_TUER_X = 428;
        public const REL_STALL_TUER_Y = 96;
        public const REL_STALL_ZEILEN_Y = 10;
        public const REL_TAVERNE_BARKEEPER_X = 796;
        public const REL_TAVERNE_BARKEEPER_Y = 322;
        public const REL_TAVERNE_HUT_X = 136;
        public const REL_TAVERNE_HUT_Y = 344;
        public const REL_TAVERNE_HUTAUGEN_X = 171;
        public const REL_TAVERNE_HUTAUGEN_Y = 377;
        public const REL_TAVERNE_KERZEN_X = 364;
        public const REL_TAVERNE_KERZEN_Y = 21;
        public const REL_TAVERNE_QUEST_X = 285;
        public const REL_TAVERNE_QUEST_Y = 281;
        public const REL_TAVERNE_QUESTOVL1_X = 182;
        public const REL_TAVERNE_QUESTOVL1_Y = 60;
        public const REL_TAVERNE_QUESTOVL2_X = 149;
        public const REL_TAVERNE_QUESTOVL2_Y = 116;
        public const REL_TAVERNE_QUESTOVL3_X = 180;
        public const REL_TAVERNE_QUESTOVL3_Y = 58;
        public const REL_TAVERNE_QUESTOVL4_X = 169;
        public const REL_TAVERNE_QUESTOVL4_Y = 44;
        public const REL_TAVERNE_QUESTOVL5_X = 30;
        public const REL_TAVERNE_QUESTOVL5_Y = 31;
        public const REPS_TOILET_DROPTWICE = 357;
        public const RES_X = 0x0500;
        public const RES_Y = 800;
        public const RESP_ACCOUNT_SUCCESS = 1;
        public const RESP_ALBUM = 192;
        public const RESP_ARBEIT_ERLEDIGT = 103;
        public const RESP_ARBEIT_START = 104;
        public const RESP_ARBEIT_STOP = 105;
        public const RESP_ATTACK_NOT_EXIST = 114;
        public const RESP_BET_LOST = 169;
        public const RESP_BET_WON = 168;
        public const RESP_CHANGE_FACE_OK = 115;
        public const RESP_CHANGE_MAIL_OK = 118;
        public const RESP_CHANGE_NAME_OK = 117;
        public const RESP_CHANGE_PASS_OK = 116;
        public const RESP_CHAT_HISTORY = 161;
        public const RESP_CHAT_LINE = 162;
        public const RESP_DEALER_AKTION = 174;
        public const RESP_DEALER_SPONSOR = 176;
        public const RESP_DELETE_ACCOUNT_OK = 119;
        public const RESP_DEMO_SCREEN = 113;
        public const RESP_EMAIL_RESENT = 164;
        public const RESP_FAME_LIST = 3;
        public const RESP_GUILD_CHANGE_DESC_SUCCESS = 153;
        public const RESP_GUILD_COMMENCE_ATTACK_OK = 181;
        public const RESP_GUILD_DATA = 101;
        public const RESP_GUILD_DELETE_SUCCESS = 151;
        public const RESP_GUILD_DONATE_SUCCESS = 160;
        public const RESP_GUILD_EXPEL_SUCCESS = 156;
        public const RESP_GUILD_FIGHT = 178;
        public const RESP_GUILD_FOUND_SUCCESS = 150;
        public const RESP_GUILD_IMPROVE_SUCCESS = 154;
        public const RESP_GUILD_INVITE_SUCCESS = 157;
        public const RESP_GUILD_JOIN_ATTACK_OK = 179;
        public const RESP_GUILD_JOIN_DEFENSE_OK = 180;
        public const RESP_GUILD_JOIN_SUCCESS = 158;
        public const RESP_GUILD_MASTER_SUCCESS = 159;
        public const RESP_GUILD_NAMES = 183;
        public const RESP_GUILD_OFFICER_SUCCESS = 155;
        public const RESP_GUILD_RENAME_SUCCESS = 152;
        public const RESP_INVITE_SUCCESS = 191;
        public const RESP_LOGIN_SUCCESS = 2;
        public const RESP_LOGIN_SUCCESS_BOUGHT = 184;
        public const RESP_LOGOUT_SUCCESS = 187;
        public const RESP_MAINQUEST = 122;
        public const RESP_MESSAGE_SENT = 202;
        public const RESP_MOVE_TOWER_ITEM = 319;
        public const RESP_NO_LOGIN = 120;
        public const RESP_OTHER_GUILD = 172;
        public const RESP_PASSWORD_SENT = 165;
        public const RESP_PLAYER_DESC_SUCCESS = 109;
        public const RESP_PLAYER_NOT_FOUND = 112;
        public const RESP_PLAYER_SCREEN = 111;
        public const RESP_QUEST_DONE = 106;
        public const RESP_QUEST_DONE_PIXEL = 188;
        public const RESP_QUEST_DONE_PIXEL_2 = 197;
        public const RESP_QUEST_SKIP_ALLOWED = 193;
        public const RESP_QUEST_SKIP_ALLOWED_START = 194;
        public const RESP_QUEST_START = 107;
        public const RESP_QUEST_STOP = 108;
        public const RESP_READ_MESSAGE = 201;
        public const RESP_REQUEST_GUILD = 121;
        public const RESP_REQUEST_GUILD_QUIET = 186;
        public const RESP_SAVEGAME_MIRROR = 317;
        public const RESP_SAVEGAME_SHARD = 316;
        public const RESP_SAVEGAME_STAY = 102;
        public const RESP_SAVEGAME_STAY_ERROR = 173;
        public const RESP_SCREEN_BUILDCHAR = 4;
        public const RESP_SCREEN_GILDENHALLE = 170;
        public const RESP_SCREEN_WITCH = 324;
        public const RESP_TOILET_DROPPED = 305;
        public const RESP_TOILET_FLUSHED = 308;
        public const RESP_TOILET_FULL = 306;
        public const RESP_TOILET_LOCKED = 304;
        public const RESP_TOILET_TANKFULL = 311;
        public const RESP_TOILET_UNLOCKED = 309;
        public const RESP_TOWER_FIGHT = 321;
        public const RESP_TOWER_SAVE = 315;
        public const RESP_TRANS_COUNT = 163;
        public const RESP_UPDATE_CHECK = 167;
        public const RESP_VALIDATE_OK = 166;
        public const RESP_WHISPER_SUCCESS = 190;
        public const SG_ACCOUNT_PROTECTION_DATE = 441;
        public const SG_ACHIEVEMENTS = 466;
        public const SG_ACTION_ENDTIME = 48;
        public const SG_ACTION_INDEX = 47;
        public const SG_ACTION_STATUS = 46;
        public const SG_ALBUM = 439;
        public const SG_ARMOR = 448;
        public const SG_ATTR_AUSDAUER = 33;
        public const SG_ATTR_AUSDAUER_BONUS = 38;
        public const SG_ATTR_AUSDAUER_GEKAUFT = 43;
        public const SG_ATTR_BEWEGLICHKEIT = 32;
        public const SG_ATTR_BEWEGLICHKEIT_BONUS = 37;
        public const SG_ATTR_BEWEGLICHKEIT_GEKAUFT = 42;
        public const SG_ATTR_INTELLIGENZ = 34;
        public const SG_ATTR_INTELLIGENZ_BONUS = 39;
        public const SG_ATTR_INTELLIGENZ_GEKAUFT = 44;
        public const SG_ATTR_STAERKE = 31;
        public const SG_ATTR_STAERKE_BONUS = 36;
        public const SG_ATTR_STAERKE_GEKAUFT = 41;
        public const SG_ATTR_WILLENSKRAFT = 35;
        public const SG_ATTR_WILLENSKRAFT_BONUS = 40;
        public const SG_ATTR_WILLENSKRAFT_GEKAUFT = 45;
        public const SG_BACKPACK_OFFS = 169;
        public const SG_BACKPACK_SIZE = 5;
        public const SG_BAR = 478;
        public const SG_BEERS = 458;
        public const SG_CLASS = 30;
        public const SG_CLASS_RANK = 13;
        public const SG_DAMAGE_MAX = 450;
        public const SG_DAMAGE_MIN = 449;
        public const SG_DUNGEON_13 = 491;
        public const SG_DUNGEON_LEVEL = 481;
        public const SG_EMAIL_DATE = 465;
        public const SG_EMAIL_VALID = 464;
        public const SG_EVASION = 454;
        public const SG_EVENT_TRIGGER_COUNT = 510;
        public const SG_EXP = 9;
        public const SG_EXP_BONUS = 462;
        public const SG_EXP_FOR_NEXTLEVEL = 10;
        public const SG_FACE_1 = 18;
        public const SG_FACE_10 = 27;
        public const SG_FACE_2 = 19;
        public const SG_FACE_3 = 20;
        public const SG_FACE_4 = 21;
        public const SG_FACE_5 = 22;
        public const SG_FACE_6 = 23;
        public const SG_FACE_7 = 24;
        public const SG_FACE_8 = 25;
        public const SG_FACE_9 = 26;
        public const SG_FIDGET_ITEM1 = 362;
        public const SG_FIDGET_REROLL_TIME = 361;
        public const SG_FIRST_PAYMENT = 480;
        public const SG_FOO = 477;
        public const SG_GENDER = 29;
        public const SG_GOLD = 14;
        public const SG_GOLD_BONUS = 463;
        public const SG_GUILD_FIGHT_STATUS = 509;
        public const SG_GUILD_INDEX = 436;
        public const SG_GUILD_JOIN_DATE = 444;
        public const SG_GUILD_RANK = 437;
        public const SG_HELLO = 479;
        public const SG_HONOR = 11;
        public const SG_INVENTORY_OFFS = 49;
        public const SG_INVENTORY_SIZE = 10;
        public const SG_ITM_ATTRIBTYP1 = 4;
        public const SG_ITM_ATTRIBTYP2 = 5;
        public const SG_ITM_ATTRIBTYP3 = 6;
        public const SG_ITM_ATTRIBVAL1 = 7;
        public const SG_ITM_ATTRIBVAL2 = 8;
        public const SG_ITM_ATTRIBVAL3 = 9;
        public const SG_ITM_EXT_ENCHANT = 601;
        public const SG_ITM_EXT_ENCHANT_POWER = 602;
        public const SG_ITM_EXT_SOCKET = 600;
        public const SG_ITM_EXT_SOCKET_POWER = 603;
        public const SG_ITM_GOLD = 10;
        public const SG_ITM_MUSH = 11;
        public const SG_ITM_PIC = 1;
        public const SG_ITM_SCHADEN_MAX = 3;
        public const SG_ITM_SCHADEN_MIN = 2;
        public const SG_ITM_SIZE = 12;
        public const SG_ITM_TYP = 0;
        public const SG_LAST_ACTION_DATE = 3;
        public const SG_LAST_GUILD_FIGHT_EXP = 440;
        public const SG_LAST_LOGIN_IP = 504;
        public const SG_LEVEL = 8;
        public const SG_LIFE = 451;
        public const SG_LOCKDURATION = 476;
        public const SG_MAGICRSISTANCE = 455;
        public const SG_MOUNT = 287;
        public const SG_MOUNT_DURATION = 452;
        public const SG_MQ_REROLL_TIME = 460;
        public const SG_MQ_STATE = 459;
        public const SG_MSG_COUNT = 6;
        public const SG_MUSH = 15;
        public const SG_MUSH_BOUGHT_SINCE_LAST_LOGIN = 446;
        public const SG_MUSH_GAINED = 16;
        public const SG_MUSH_SPENT = 17;
        public const SG_MUSHROOM_BOUGHT_AMOUNT = 507;
        public const SG_MUSHROOM_BOUGHT_DATE = 508;
        public const SG_MUSHROOMS_MAY_DONATE = 438;
        public const SG_NEW_DUNGEONS = 442;
        public const SG_NEW_FLAGS = 445;
        public const SG_NEXT_BATTLE_TIME = 434;
        public const SG_PAYMENT_ID = 1;
        public const SG_PHP_SESSION = 493;
        public const SG_PLAYER_ID = 2;
        public const SG_POTION_DURATION = 497;
        public const SG_POTION_GAIN = 500;
        public const SG_POTION_TYPE = 494;
        public const SG_POWER_LIFE_POTION = 503;
        public const SG_PVP_REROLL_TIME = 461;
        public const SG_QUEST_OFFER_DURATION1 = 242;
        public const SG_QUEST_OFFER_ENEMY1 = 236;
        public const SG_QUEST_OFFER_EXP1 = 281;
        public const SG_QUEST_OFFER_GOLD1 = 284;
        public const SG_QUEST_OFFER_LEVEL1 = 230;
        public const SG_QUEST_OFFER_LOCATION1 = 239;
        public const SG_QUEST_OFFER_REWARD_ITM1 = 245;
        public const SG_QUEST_OFFER_TYPE1 = 233;
        public const SG_QUEST_REROLL_TIME = 229;
        public const SG_RACE = 28;
        public const SG_RANK = 12;
        public const SG_REGISTRATION_DATE = 4;
        public const SG_REGISTRATION_IP = 5;
        public const SG_SERVER_TIME = 511;
        public const SG_SHAKES_ITEM1 = 289;
        public const SG_SHAKES_REROLL_TIME = 288;
        public const SG_TIMEBAR = 457;
        public const SG_TIMEBAR_REROLL_TIME = 456;
        public const SG_TOILET = 492;
        public const SG_TRANSACTION_COUNT = 453;
        public const SG_UNREAD_MESSAGES = 435;
        public const SG_VALIDATION_IP = 7;
        public const SG_WE_MISS_YOU = 447;
        public const SHP_BLACK_CHARDESC = 22958;
        public const SHP_BLACK_GILDEEHRE = 22951;
        public const SHP_DISCONNECTED = 24367;
        public const SHP_FIGHT_BLACK_SQUARE = 23831;
        public const SHP_FUCK_BLACK_SQUARE = 82;
        public const SHP_MAINQUEST = 24357;
        public const SHP_OPTION_BLACK = 24245;
        public const SHP_POST_BLACK_SQUARE = 23265;
        public const SHP_QO_BLACK_SQUARE = 23589;
        public const SHP_STALL_BLACK_SQUARE = 23343;
        public const SIZE_ARENA_TEXT_X = 400;
        public const SIZE_BLACK_CHARDESC_X = 440;
        public const SIZE_BLACK_CHARDESC_Y = 200;
        public const SIZE_BUILDCHAR_LINES_X = 300;
        public const SIZE_CITY_CA_ARENA_X = 360;
        public const SIZE_CITY_CA_ARENA_Y = 220;
        public const SIZE_CITY_CA_BUH_X = 45;
        public const SIZE_CITY_CA_BUH_Y = 55;
        public const SIZE_CITY_CA_DEALER_X = 60;
        public const SIZE_CITY_CA_DEALER_Y = 85;
        public const SIZE_CITY_CA_ESEL_X = 150;
        public const SIZE_CITY_CA_ESEL_Y = 150;
        public const SIZE_CITY_CA_POST_X = 120;
        public const SIZE_CITY_CA_POST_Y = 140;
        public const SIZE_CITY_CA_RUHMESHALLE_X = 150;
        public const SIZE_CITY_CA_RUHMESHALLE_Y = 380;
        public const SIZE_CITY_CA_SHAKES_X = 160;
        public const SIZE_CITY_CA_SHAKES_Y = 170;
        public const SIZE_CITY_CA_TAVERNE_X = 120;
        public const SIZE_CITY_CA_TAVERNE_Y = 150;
        public const SIZE_CITY_CA_WACHE_X = 115;
        public const SIZE_CITY_CA_WACHE_Y = 130;
        public const SIZE_CITY_CA_ZAUBERLADEN_X = 110;
        public const SIZE_CITY_CA_ZAUBERLADEN_Y = 120;
        public const SIZE_COPYCAT = 148;
        public const SIZE_DEALER_AKTION_X = 190;
        public const SIZE_DEALER_AKTION_Y = 170;
        public const SIZE_DEALER_SPONSOR_X = 190;
        public const SIZE_DEALER_SPONSOR_Y = 170;
        public const SIZE_DISCONNECTED_X = 500;
        public const SIZE_EMAIL_NAG_TEXT_X = 420;
        public const SIZE_FIGHT_RESULT_TEXT_X = 490;
        public const SIZE_GILDE_CHAT_EXT_X = 950;
        public const SIZE_GILDE_GRUENDEN_TEXT_X = 400;
        public const SIZE_GILDE_TEXT2_X = 400;
        public const SIZE_GILDE_TEXT_X = 900;
        public const SIZE_GILDEEHRE_X = 375;
        public const SIZE_GILDEEHRE_Y = 40;
        public const SIZE_HUTMANN_BECHER_X = 130;
        public const SIZE_HUTMANN_BECHER_Y = 130;
        public const SIZE_LBL_ARBEITEN_TEXT_X = 400;
        public const SIZE_LBL_QO_TEXT_X = 470;
        public const SIZE_MQ_SQUARE_X = 610;
        public const SIZE_MQ_SQUARE_Y = 570;
        public const SIZE_OPTION_X = 845;
        public const SIZE_OPTION_Y = 520;
        public const SIZE_QO_BLACK_SQUARE_X = 740;
        public const SIZE_QO_BLACK_SQUARE_Y = 440;
        public const SIZE_STALL_BOX1_X = 200;
        public const SIZE_STALL_BOX1_Y = 480;
        public const SIZE_STALL_BOX2_X = 183;
        public const SIZE_STALL_BOX2_Y = 382;
        public const SIZE_STALL_BOX3_X = 176;
        public const SIZE_STALL_BOX3_Y = 392;
        public const SIZE_STALL_BOX4_X = 218;
        public const SIZE_STALL_BOX4_Y = 476;
        public const SIZE_STALL_SQUARE_X = 700;
        public const SIZE_STALL_SQUARE_Y = 200;
        public const SIZE_TAVERNE_BAR_X = 200;
        public const SIZE_TAVERNE_BAR_Y = 200;
        public const SIZE_TAVERNE_HUT_X = 100;
        public const SIZE_TAVERNE_HUT_Y = 130;
        public const SIZE_TAVERNE_QUEST_X = 312;
        public const SIZE_TAVERNE_QUEST_Y = 307;
        public const SIZE_TSG = 477;
        public const SLDR_ARBEITEN = 298;
        public const SLDR_ARBEITEN_BAR = 299;
        public const SLDR_ARBEITEN_TICK1 = 300;
        public const SLDR_ARBEITEN_TICK10 = 309;
        public const SLDR_ARBEITEN_TICK2 = 301;
        public const SLDR_ARBEITEN_TICK3 = 302;
        public const SLDR_ARBEITEN_TICK4 = 303;
        public const SLDR_ARBEITEN_TICK5 = 304;
        public const SLDR_ARBEITEN_TICK6 = 305;
        public const SLDR_ARBEITEN_TICK7 = 306;
        public const SLDR_ARBEITEN_TICK8 = 307;
        public const SLDR_ARBEITEN_TICK9 = 308;
        public const SLDR_OPTION_BAR = 24270;
        public const SLDR_OPTION_TICK1 = 24271;
        public const SLDR_OPTION_VOLUME = 24269;
        public const SND_CATAPULT_HIT = 24533;
        public const SND_CATAPULT_LAUNCH = 24532;
        public const SND_CLICK = 2;
        public const SND_ERROR = 3;
        public const SND_HATCH = 24742;
        public const SND_JINGLE = 4;
        public const SND_MAINQUESTS_UNLOCK = 24310;
        public const SND_MIRROR = 24737;
        public const SND_MOUNT_1 = 23325;
        public const SND_SHARD = 24736;
        public const SND_TEST = 24244;
        public const SND_TOILET_DROP = 24623;
        public const SND_TOILET_FLUSH = 24622;
        public const SND_TOILET_FLUSHTRY = 24621;
        public const SND_WEAPON = 23631;
        public const SND_WITCH_DROP = 25636;
        public const TSG_COPYCATS = 3;
        public const TSG_FILEOFFSET = 1;
        public const TSG_FREE = 447;
        public const TSG_LOOT_SACK = 477;
        public const TSG_PLAYERID = 0;
        public const TSG_TOWER_LEVEL = 2;
        public const TXT_ABBRECHEN = 71;
        public const TXT_ACH_1 = 6300;
        public const TXT_ACH_2 = 6310;
        public const TXT_ACH_3 = 6320;
        public const TXT_ACH_4 = 6330;
        public const TXT_ACH_5 = 6340;
        public const TXT_AGB = 28;
        public const TXT_AGB_LINK = 272;
        public const TXT_ALBUM = 9111;
        public const TXT_ALERT_TEXT = 8810;
        public const TXT_ALERT_WORDS = 8809;
        public const TXT_ALREADY_VALID = 285;
        public const TXT_ANLEITUNG_LINK = 274;
        public const TXT_ARBEIT_TEXT = 41;
        public const TXT_ARBEIT_TEXT2 = 42;
        public const TXT_ARBEIT_TEXT3 = 43;
        public const TXT_ARBEIT_TEXT4 = 70;
        public const TXT_ARBEIT_TEXT5 = 72;
        public const TXT_ARBEIT_TEXT6 = 73;
        public const TXT_ARBEIT_TEXT7 = 74;
        public const TXT_ARBEITEN = 39;
        public const TXT_ARENA = 2;
        public const TXT_ARENA_1 = 113;
        public const TXT_ARENA_2 = 114;
        public const TXT_ARENA_3 = 211;
        public const TXT_ARENA_4 = 212;
        public const TXT_ARENA_TITLE = 115;
        public const TXT_ATTACK = 166;
        public const TXT_ATTACK_OK_STATUS = 8410;
        public const TXT_ATTACK_STATUS = 8401;
        public const TXT_ATTRIB_SUM = 9467;
        public const TXT_ATTRIBHELP = 4530;
        public const TXT_ATTRIBHELP_EXT = 4535;
        public const TXT_ATTRIBHELP_HUNTER = 4541;
        public const TXT_ATTRIBHELP_MAGE = 4542;
        public const TXT_ATTRIBHELP_WARRIOR = 4540;
        public const TXT_AUSDAUER = 193;
        public const TXT_AUSGEWICHEN = 106;
        public const TXT_BACK = 37;
        public const TXT_BAD_PASSWORDS = 8994;
        public const TXT_BASIS = 167;
        public const TXT_BEARD = 30;
        public const TXT_BEERFEST_TEXT_OK = 9203;
        public const TXT_BEERFEST_TEXT_TOOHEALTHY = 9202;
        public const TXT_BEERFEST_TITLE_OK = 9201;
        public const TXT_BEERFEST_TITLE_TOOHEALTHY = 9200;
        public const TXT_BETREFF = 92;
        public const TXT_BLOCKEN = 119;
        public const TXT_BO_BOUGHT = 190;
        public const TXT_BO_BUY = 184;
        public const TXT_BO_BUY_FREE = 9532;
        public const TXT_BO_TEXT_NO = 189;
        public const TXT_BO_TEXT_OK = 188;
        public const TXT_BO_TEXT_TOOHEALTHY = 192;
        public const TXT_BO_TIME = 185;
        public const TXT_BO_TITLE_NO = 187;
        public const TXT_BO_TITLE_OK = 186;
        public const TXT_BO_TITLE_TOOHEALTHY = 191;
        public const TXT_BODY_GUILD_DELETED = 4405;
        public const TXT_BODY_GUILD_DELETED_BY_ADMIN = 4406;
        public const TXT_BODY_GUILD_EXPELLED = 4407;
        public const TXT_BODY_GUILD_EXPELLED_BY_ADMIN = 4408;
        public const TXT_BODY_GUILD_INVITE = 4409;
        public const TXT_BODY_PVP = 4411;
        public const TXT_BONUS = 168;
        public const TXT_BOOST_COPYCAT = 9564;
        public const TXT_BROWS = 33;
        public const TXT_BTN_CREATE_CHARACTER = 36;
        public const TXT_BTN_GILDE_GOLD = 0x0100;
        public const TXT_BTN_GILDE_MUSH = 0x0101;
        public const TXT_BTN_MODIFY_CHARACTER = 155;
        public const TXT_BUILDING_1 = 258;
        public const TXT_BUILDING_2 = 259;
        public const TXT_BUILDING_COMPLETE = 306;
        public const TXT_BUILDINGS_GOTO_CREST = 9447;
        public const TXT_BUY_1_1 = 1100;
        public const TXT_BUY_1_1_AKTION = 1140;
        public const TXT_BUY_1_2 = 1101;
        public const TXT_BUY_1_2_AKTION = 1141;
        public const TXT_BUY_1_3 = 1102;
        public const TXT_BUY_1_3_AKTION = 1142;
        public const TXT_BUY_2_1 = 1103;
        public const TXT_BUY_2_1_AKTION = 1143;
        public const TXT_BUY_2_2 = 1104;
        public const TXT_BUY_2_2_AKTION = 1144;
        public const TXT_BUY_2_3 = 1105;
        public const TXT_BUY_2_3_AKTION = 1145;
        public const TXT_BUY_3_1 = 1106;
        public const TXT_BUY_3_1_AKTION = 1146;
        public const TXT_BUY_3_2 = 1107;
        public const TXT_BUY_3_2_AKTION = 1147;
        public const TXT_BUY_3_3 = 1108;
        public const TXT_BUY_3_3_AKTION = 1148;
        public const TXT_BUY_4_1 = 1109;
        public const TXT_BUY_4_1_AKTION = 1149;
        public const TXT_BUY_4_2 = 1110;
        public const TXT_BUY_4_2_AKTION = 1150;
        public const TXT_BUY_4_3 = 1111;
        public const TXT_BUY_4_3_AKTION = 1151;
        public const TXT_BUY_5_1 = 1112;
        public const TXT_BUY_5_1_AKTION = 1152;
        public const TXT_BUY_5_2 = 1113;
        public const TXT_BUY_5_2_AKTION = 1153;
        public const TXT_BUY_5_3 = 1114;
        public const TXT_BUY_5_3_AKTION = 1154;
        public const TXT_BUY_6_1 = 1115;
        public const TXT_BUY_6_1_AKTION = 1155;
        public const TXT_BUY_6_2 = 1116;
        public const TXT_BUY_6_2_AKTION = 1156;
        public const TXT_BUY_6_3 = 1117;
        public const TXT_BUY_6_3_AKTION = 1157;
        public const TXT_BUY_7_1 = 1118;
        public const TXT_BUY_7_1_AKTION = 1158;
        public const TXT_BUY_7_2 = 1119;
        public const TXT_BUY_7_2_AKTION = 1159;
        public const TXT_BUY_7_3 = 1120;
        public const TXT_BUY_7_3_AKTION = 1150;
        public const TXT_CATAPULT = 9246;
        public const TXT_CHANGE = 127;
        public const TXT_CHANGE_EMAIL = 129;
        public const TXT_CHANGE_NAME = 128;
        public const TXT_CHANGE_PASSWORD = 130;
        public const TXT_CHANGEIMG = 126;
        public const TXT_CHAR_AUSDAUER = 62;
        public const TXT_CHAR_BEWEGLICHKEIT = 61;
        public const TXT_CHAR_INTELLIGENZ = 63;
        public const TXT_CHAR_KAMPFWERT = 66;
        public const TXT_CHAR_LEBEN = 67;
        public const TXT_CHAR_RUESTUNG = 68;
        public const TXT_CHAR_SCHADEN = 65;
        public const TXT_CHAR_STAERKE = 60;
        public const TXT_CHAR_WIDERSTAND = 69;
        public const TXT_CHAR_WILLENSKRAFT = 64;
        public const TXT_CHARAKTER = 7;
        public const TXT_CHARIMG = 125;
        public const TXT_CHAT_CAPTION = 182;
        public const TXT_CLASSDESC = 2459;
        public const TXT_CLASSNAME = 2456;
        public const TXT_CMD_DONATE_GOLD = 254;
        public const TXT_CMD_DONATE_MUSH = 0xFF;
        public const TXT_COLLECTION = 9114;
        public const TXT_COLOR = 120;
        public const TXT_COMPARE = 9469;
        public const TXT_CONGRATS = 8804;
        public const TXT_COPYCAT_NAME = 9471;
        public const TXT_COUNTRY_NAMES = 9800;
        public const TXT_CREATE_ACCOUNT = 21;
        public const TXT_CREATE_CHARACTER = 18;
        public const TXT_CREATE_GOTO_LOGIN = 117;
        public const TXT_CREST_APPLY = 9417;
        public const TXT_CREST_ELEMENT = 9405;
        public const TXT_CREST_GOTO_BUILDINGS = 9446;
        public const TXT_CREST_INFO = 9445;
        public const TXT_CREST_SUGGEST = 9416;
        public const TXT_CREST_SUGGESTION = 9418;
        public const TXT_CREST_TINCTUREBOXES = 9440;
        public const TXT_CREST_TINCTURES = 9420;
        public const TXT_CS = 9204;
        public const TXT_DATENSCHUTZ = 275;
        public const TXT_DATENSCHUTZ_LINK = 273;
        public const TXT_DAY = 309;
        public const TXT_DAYS = 310;
        public const TXT_DEBUG_INFO = 286;
        public const TXT_DELETE_ACCOUNT = 131;
        public const TXT_DELETE_ACCOUNT_FIELD_1 = 146;
        public const TXT_DELETE_ACCOUNT_FIELD_2 = 147;
        public const TXT_DELETE_ACCOUNT_FIELD_3 = 148;
        public const TXT_DELETE_ACCOUNT_TITLE = 145;
        public const TXT_DISCONNECTED = 216;
        public const TXT_DOCHANGE = 132;
        public const TXT_DOCHANGE_EMAIL_FIELD_1 = 138;
        public const TXT_DOCHANGE_EMAIL_FIELD_2 = 139;
        public const TXT_DOCHANGE_EMAIL_FIELD_3 = 140;
        public const TXT_DOCHANGE_EMAIL_TITLE = 137;
        public const TXT_DOCHANGE_NAME_FIELD_1 = 134;
        public const TXT_DOCHANGE_NAME_FIELD_2 = 135;
        public const TXT_DOCHANGE_NAME_FIELD_3 = 136;
        public const TXT_DOCHANGE_NAME_TITLE = 133;
        public const TXT_DOCHANGE_PASSWORD_FIELD_1 = 142;
        public const TXT_DOCHANGE_PASSWORD_FIELD_2 = 143;
        public const TXT_DOCHANGE_PASSWORD_FIELD_3 = 144;
        public const TXT_DOCHANGE_PASSWORD_TITLE = 141;
        public const TXT_DOCHANGENAME = 156;
        public const TXT_DONATE_GOLD_1 = 250;
        public const TXT_DONATE_GOLD_2 = 251;
        public const TXT_DONATE_MUSH_1 = 252;
        public const TXT_DONATE_MUSH_2 = 253;
        public const TXT_DU_GEWONNEN = 239;
        public const TXT_DU_VERLOREN = 240;
        public const TXT_DU_WAS_GEWONNEN = 8807;
        public const TXT_DU_WAS_VERLOREN = 8808;
        public const TXT_DUNGEON_INFO = 8250;
        public const TXT_DUNGEON_NAME = 8200;
        public const TXT_DUNGEON_NAMES = 8840;
        public const TXT_DURATION = 103;
        public const TXT_EARS = 34;
        public const TXT_ECONOMIC_LOSS = 9528;
        public const TXT_ECONOMIC_LOSS_NEXT = 9529;
        public const TXT_ECONOMIC_LOSS_SUFFIX = 9530;
        public const TXT_EHRENHALLE = 10;
        public const TXT_EMAIL = 19;
        public const TXT_EMAIL_CHANGED = 154;
        public const TXT_EMAIL_NAG = 234;
        public const TXT_EMAIL_NAG_TITLE = 237;
        public const TXT_EMAIL_RESEND = 235;
        public const TXT_EMAIL_RESENT = 236;
        public const TXT_EMPFAENGER = 91;
        public const TXT_ENCHANT_HINT = 10121;
        public const TXT_ENCHANT_NAMES = 10200;
        public const TXT_ENCHANT_VALUES = 10400;
        public const TXT_ENEMY_SELF = 307;
        public const TXT_ENTERDESC = 116;
        public const TXT_ENTERGUILDDESC = 179;
        public const TXT_ERR_GUILD_DESCR_TOO_LONG = 9531;
        public const TXT_ERR_NO_SLOT_FOR_FLUSHING = 9455;
        public const TXT_ERR_TOILET_EMPTY = 9456;
        public const TXT_ERROR_AGB = 507;
        public const TXT_ERROR_ALREADY_IN_GUILD = 520;
        public const TXT_ERROR_ARBEITEN_ARENA = 604;
        public const TXT_ERROR_ARBEITEN_MAINQUEST = 606;
        public const TXT_ERROR_ARBEITEN_TAVERNE = 605;
        public const TXT_ERROR_ATTACK_AGAIN = 554;
        public const TXT_ERROR_BEER = 541;
        public const TXT_ERROR_COMPROMISED_ACCOUNT = 9103;
        public const TXT_ERROR_EMAIL_MISMATCH = 517;
        public const TXT_ERROR_EMAIL_REJECTED = 504;
        public const TXT_ERROR_EMAIL_WRONG = 515;
        public const TXT_ERROR_EMPTY_GUILD_NAME = 519;
        public const TXT_ERROR_FACE_DATA_INCORRECT = 0x0202;
        public const TXT_ERROR_FIGHT_SELF = 522;
        public const TXT_ERROR_GUILD_ALREADY_ATTACKING = 8603;
        public const TXT_ERROR_GUILD_ALREADY_MEMBER = 545;
        public const TXT_ERROR_GUILD_ALREADY_UNDER_ATTACK = 8601;
        public const TXT_ERROR_GUILD_ALREADY_YOU_OTHER = 532;
        public const TXT_ERROR_GUILD_ALREADY_YOU_THIS = 534;
        public const TXT_ERROR_GUILD_ATTACK_DELAY = 8602;
        public const TXT_ERROR_GUILD_ATTACK_STATUS = 8604;
        public const TXT_ERROR_GUILD_BUILDING_MAX = 528;
        public const TXT_ERROR_GUILD_BUILDING_NOT_FOUND = 527;
        public const TXT_ERROR_GUILD_CASH_FULL = 9468;
        public const TXT_ERROR_GUILD_CHAT_HISTORY = 539;
        public const TXT_ERROR_GUILD_CHAT_NOT_MEMBER = 538;
        public const TXT_ERROR_GUILD_CHAT_TEXT_ERROR = 540;
        public const TXT_ERROR_GUILD_DONATE_FRA = 558;
        public const TXT_ERROR_GUILD_DONATE_NEG = 557;
        public const TXT_ERROR_GUILD_EMAIL_VALIDATE = 552;
        public const TXT_ERROR_GUILD_FIGHT_TOO_EXPENSIVE = 8600;
        public const TXT_ERROR_GUILD_IS_FULL = 531;
        public const TXT_ERROR_GUILD_LACK_GOLD = 526;
        public const TXT_ERROR_GUILD_LACK_MUSH = 525;
        public const TXT_ERROR_GUILD_MASTER_CANT_BE_OFFICER = 530;
        public const TXT_ERROR_GUILD_MUSH_FREE = 553;
        public const TXT_ERROR_GUILD_NAME_CHARACTERS = 551;
        public const TXT_ERROR_GUILD_NAME_LENGTH = 550;
        public const TXT_ERROR_GUILD_NAME_REJECTED = 549;
        public const TXT_ERROR_GUILD_NOT_ALLOWED = 524;
        public const TXT_ERROR_GUILD_NOT_FOUND = 523;
        public const TXT_ERROR_GUILD_NOT_MEMBER = 529;
        public const TXT_ERROR_GUILD_NOT_REAL_MEMBER = 533;
        public const TXT_ERROR_GUILD_PLAYER_NOT_FOUND = 535;
        public const TXT_ERROR_GUILD_RANK_WRONG = 9400;
        public const TXT_ERROR_GUILD_TOO_EXPENSIVE = 537;
        public const TXT_ERROR_IMGSVR_DOWN = 607;
        public const TXT_ERROR_INBOX_FULL = 508;
        public const TXT_ERROR_INPUT_REQUIRED = 562;
        public const TXT_ERROR_INVENTORY_FULL = 609;
        public const TXT_ERROR_INVENTORY_FULL_ADV = 610;
        public const TXT_ERROR_INVITE_EMAIL_REJECTED = 565;
        public const TXT_ERROR_INVITE_NOT_VALIDATED = 563;
        public const TXT_ERROR_INVITE_TOO_MANY = 564;
        public const TXT_ERROR_LOGIN_FAILED = 506;
        public const TXT_ERROR_MAIL_EXISTS = 556;
        public const TXT_ERROR_MSG_LEVEL_TOO_LOW = 8811;
        public const TXT_ERROR_MSG_NOT_VALIDATED = 8812;
        public const TXT_ERROR_NAME_EXISTS = 501;
        public const TXT_ERROR_NAME_MISMATCH = 516;
        public const TXT_ERROR_NAME_REJECTED = 505;
        public const TXT_ERROR_NAME_TOO_SHORT = 502;
        public const TXT_ERROR_NO_ENDURANCE = 543;
        public const TXT_ERROR_NO_INDEX_FREE = 521;
        public const TXT_ERROR_NO_MUSH_BAR = 542;
        public const TXT_ERROR_NO_MUSH_MQ = 548;
        public const TXT_ERROR_NO_MUSH_PVP = 547;
        public const TXT_ERROR_NOT_INVITED = 546;
        public const TXT_ERROR_PASSWORD_MISMATCH = 511;
        public const TXT_ERROR_PASSWORD_TOO_SHORT = 503;
        public const TXT_ERROR_PLAYER_NOT_FOUND = 518;
        public const TXT_ERROR_RECIPIENT_NOT_FOUND = 509;
        public const TXT_ERROR_RECIPIENT_SELF = 510;
        public const TXT_ERROR_REQUEST_PW = 555;
        public const TXT_ERROR_SELECTCLASS = 600;
        public const TXT_ERROR_SELL_ITEM = 561;
        public const TXT_ERROR_SUBJECT_TOO_SHORT = 536;
        public const TXT_ERROR_TAVERNE_ARBEITEN = 602;
        public const TXT_ERROR_TAVERNE_ARENA = 601;
        public const TXT_ERROR_TAVERNE_MAINQUEST = 603;
        public const TXT_ERROR_TOO_EXPENSIVE = 0x0200;
        public const TXT_ERROR_TOO_SOON_SUGGESTION = 9419;
        public const TXT_ERROR_UNKNOWN = 999;
        public const TXT_ERROR_WORSE_MOUNT = 544;
        public const TXT_ERROR_WRONG_PASSWORD = 513;
        public const TXT_ERRROR_ACCOUNTS_PER_IP = 608;
        public const TXT_ERRROR_LOCKED_ADMIN = 560;
        public const TXT_ERRROR_LOCKED_PAYMENT = 559;
        public const TXT_EXP = 102;
        public const TXT_EXPBONUS_PREFIX = 230;
        public const TXT_EXPBONUS_SUFFIX = 231;
        public const TXT_EXPNEXTLEVEL = 108;
        public const TXT_EYES = 32;
        public const TXT_FIGHT_LOSE = 4320;
        public const TXT_FIGHT_WIN = 4300;
        public const TXT_FIGHTS_COUNTER = 9105;
        public const TXT_FONT_NAME = 8700;
        public const TXT_FORGOT_PASSWORD = 22;
        public const TXT_FORUM_LINK = 223;
        public const TXT_FRIEND_SUBJECT = 279;
        public const TXT_GAMETITLE = 222;
        public const TXT_GEBLOCKT = 164;
        public const TXT_GEGNERSTUFE = 229;
        public const TXT_GENDER_F = 249;
        public const TXT_GENDER_M = 248;
        public const TXT_GESAMT = 169;
        public const TXT_GILDE_AUSBAUEN = 228;
        public const TXT_GILDE_GEBAEUDE1_POPUP = 225;
        public const TXT_GILDE_GEBAEUDE1_POPUP_EX = 8993;
        public const TXT_GILDE_GEBAEUDE2_POPUP = 226;
        public const TXT_GILDE_GEBAEUDE3_POPUP = 227;
        public const TXT_GILDE_GEBAEUDE_NAME1 = 4500;
        public const TXT_GILDE_GEBAEUDE_STUFE = 181;
        public const TXT_GILDE_GEBAEUDE_WERT1 = 4510;
        public const TXT_GILDE_GRUENDEN = 157;
        public const TXT_GILDE_GRUENDEN_OK = 158;
        public const TXT_GILDE_GRUENDEN_TITLE = 159;
        public const TXT_GILDE_INVITE = 174;
        public const TXT_GILDE_INVITE_TITLE = 175;
        public const TXT_GILDE_KICK = 170;
        public const TXT_GILDE_KICK_TITLE = 171;
        public const TXT_GILDE_MASTER = 172;
        public const TXT_GILDE_MASTER_TITLE = 173;
        public const TXT_GILDE_QUIT = 176;
        public const TXT_GILDE_QUIT_TITLE = 177;
        public const TXT_GILDE_RAIDSTART = 9101;
        public const TXT_GILDE_RAIDSTART_TITLE = 9100;
        public const TXT_GILDEN = 9;
        public const TXT_GOLD = 75;
        public const TXT_GOLD_GAINED = 123;
        public const TXT_GOLD_LOST = 124;
        public const TXT_GOLD_SPENT = 203;
        public const TXT_GOLDBONUS_PREFIX = 232;
        public const TXT_GOLDBONUS_SUFFIX = 233;
        public const TXT_GOTO_GILDEN = 51;
        public const TXT_GOTO_LOGIN = 24;
        public const TXT_GOTO_SIGNUP = 25;
        public const TXT_GOTO_SPIELER = 50;
        public const TXT_GUILD_ATTACK_FAIL = 8656;
        public const TXT_GUILD_ATTACK_PLAYER = 8450;
        public const TXT_GUILD_ATTACK_SUCCESS = 8654;
        public const TXT_GUILD_BATTLE_LOST = 8505;
        public const TXT_GUILD_BATTLE_MSG = 8440;
        public const TXT_GUILD_BATTLE_POPUP = 8420;
        public const TXT_GUILD_BATTLE_SKIP = 8400;
        public const TXT_GUILD_BATTLE_WON = 8500;
        public const TXT_GUILD_DEFENSE_FAIL = 8658;
        public const TXT_GUILD_DEFENSE_SUCCESS = 8657;
        public const TXT_GUILD_DUNGEON_COMPLETED = 9449;
        public const TXT_GUILD_EPICITEM = 9450;
        public const TXT_GUILD_HONOR_GAINED = 8510;
        public const TXT_GUILD_HONOR_LOST = 8511;
        public const TXT_GUILD_JOINED = 270;
        public const TXT_GUILD_JOINED_TOO_RECENTLY = 8660;
        public const TXT_GUILD_LEVEL_UP = 9448;
        public const TXT_GUILD_QUIT = 271;
        public const TXT_GUILD_RAID_FAIL = 8991;
        public const TXT_GUILD_RAID_SUCCESS = 8990;
        public const TXT_GUILDHALL_LEADER = 304;
        public const TXT_GUILDHALL_MEMBERS = 305;
        public const TXT_GUILDNOTEXT = 180;
        public const TXT_HAIR = 35;
        public const TXT_HALL_LIST_COLUMN_1 = 52;
        public const TXT_HALL_LIST_COLUMN_2 = 53;
        public const TXT_HALL_LIST_COLUMN_3 = 54;
        public const TXT_HALL_LIST_COLUMN_3G = 57;
        public const TXT_HALL_LIST_COLUMN_4 = 55;
        public const TXT_HALL_LIST_COLUMN_4G = 58;
        public const TXT_HALL_LIST_COLUMN_5 = 56;
        public const TXT_HALLE_GOTO = 49;
        public const TXT_HALLE_SUCHFELD_TEXT = 59;
        public const TXT_HAPPY_HOUR = 9151;
        public const TXT_HERO_OF_THE_DAY = 8452;
        public const TXT_HERO_OF_THE_DAY_TITLE = 8451;
        public const TXT_HEROES_OF_THE_DAY_TITLE = 8453;
        public const TXT_HL_MAINQUESTS_NAME = 9534;
        public const TXT_HL_MAINQUESTS_TITLE = 9533;
        public const TXT_HONOR_GAINED = 121;
        public const TXT_HONOR_LOST = 122;
        public const TXT_HOUR = 311;
        public const TXT_HOURS = 312;
        public const TXT_HUTMANN_BACK = 303;
        public const TXT_HUTMANN_BETCOMMENT1 = 297;
        public const TXT_HUTMANN_BETCOMMENT2 = 298;
        public const TXT_HUTMANN_BETCOMMENT3 = 299;
        public const TXT_HUTMANN_BTN_DAMN = 302;
        public const TXT_HUTMANN_BTN_OK = 295;
        public const TXT_HUTMANN_BTN_START = 294;
        public const TXT_HUTMANN_BTN_YEAH = 301;
        public const TXT_HUTMANN_CANTAFFORD = 300;
        public const TXT_HUTMANN_CHOOSECUP = 292;
        public const TXT_HUTMANN_GOLDBET = 290;
        public const TXT_HUTMANN_INSTR = 293;
        public const TXT_HUTMANN_LOSE = 289;
        public const TXT_HUTMANN_MUSHBET = 291;
        public const TXT_HUTMANN_NEWGAME = 296;
        public const TXT_HUTMANN_OFFER = 287;
        public const TXT_HUTMANN_WIN = 288;
        public const TXT_IMPRESSUM_LINK = 161;
        public const TXT_IMPRESSUM_TEXT = 162;
        public const TXT_INV_ACC_TEXT = 8801;
        public const TXT_INV_ACC_TITLE = 8800;
        public const TXT_INV_VAL_TEXT = 8803;
        public const TXT_INV_VAL_TITLE = 8802;
        public const TXT_INVITEEMAIL = 9106;
        public const TXT_INVITEINSTR = 9109;
        public const TXT_INVITESUBJECT = 9108;
        public const TXT_INVITESUCCESS = 9110;
        public const TXT_INVITETITLE = 9107;
        public const TXT_ITEM_ATTRIB_CLASS_1 = 1031;
        public const TXT_ITEM_ATTRIB_CLASS_10 = 1040;
        public const TXT_ITEM_ATTRIB_CLASS_11 = 1041;
        public const TXT_ITEM_ATTRIB_CLASS_12 = 1042;
        public const TXT_ITEM_ATTRIB_CLASS_2 = 1032;
        public const TXT_ITEM_ATTRIB_CLASS_3 = 1033;
        public const TXT_ITEM_ATTRIB_CLASS_4 = 1034;
        public const TXT_ITEM_ATTRIB_CLASS_5 = 1035;
        public const TXT_ITEM_ATTRIB_CLASS_6 = 1036;
        public const TXT_ITEM_ATTRIB_CLASS_7 = 1037;
        public const TXT_ITEM_ATTRIB_CLASS_8 = 1038;
        public const TXT_ITEM_ATTRIB_CLASS_9 = 1039;
        public const TXT_ITEM_ATTRIB_CLASSES = 1030;
        public const TXT_ITEM_CLASS_1 = 1001;
        public const TXT_ITEM_CLASS_10 = 1010;
        public const TXT_ITEM_CLASS_2 = 1002;
        public const TXT_ITEM_CLASS_3 = 1003;
        public const TXT_ITEM_CLASS_4 = 1004;
        public const TXT_ITEM_CLASS_5 = 1005;
        public const TXT_ITEM_CLASS_6 = 1006;
        public const TXT_ITEM_CLASS_7 = 1007;
        public const TXT_ITEM_CLASS_8 = 1008;
        public const TXT_ITEM_CLASS_9 = 1009;
        public const TXT_ITEM_CLASSES = 1000;
        public const TXT_ITM_ILLEGAL_COPY = 9475;
        public const TXT_ITMNAME_10 = 3450;
        public const TXT_ITMNAME_10_EPIC = 7450;
        public const TXT_ITMNAME_11 = 8300;
        public const TXT_ITMNAME_12 = 8350;
        public const TXT_ITMNAME_13 = 9112;
        public const TXT_ITMNAME_14 = 10000;
        public const TXT_ITMNAME_1_1 = 3000;
        public const TXT_ITMNAME_1_1_EPIC = 7000;
        public const TXT_ITMNAME_1_2 = 3500;
        public const TXT_ITMNAME_1_2_EPIC = 7500;
        public const TXT_ITMNAME_1_3 = 3850;
        public const TXT_ITMNAME_1_3_EPIC = 7850;
        public const TXT_ITMNAME_2_1 = 3050;
        public const TXT_ITMNAME_2_1_EPIC = 7050;
        public const TXT_ITMNAME_3_1 = 3100;
        public const TXT_ITMNAME_3_1_EPIC = 7100;
        public const TXT_ITMNAME_3_2 = 3600;
        public const TXT_ITMNAME_3_2_EPIC = 7600;
        public const TXT_ITMNAME_3_3 = 3950;
        public const TXT_ITMNAME_3_3_EPIC = 7950;
        public const TXT_ITMNAME_4_1 = 3150;
        public const TXT_ITMNAME_4_1_EPIC = 7150;
        public const TXT_ITMNAME_4_2 = 3650;
        public const TXT_ITMNAME_4_2_EPIC = 7650;
        public const TXT_ITMNAME_4_3 = 4000;
        public const TXT_ITMNAME_4_3_EPIC = 8000;
        public const TXT_ITMNAME_5_1 = 3200;
        public const TXT_ITMNAME_5_1_EPIC = 7200;
        public const TXT_ITMNAME_5_2 = 3700;
        public const TXT_ITMNAME_5_2_EPIC = 7700;
        public const TXT_ITMNAME_5_3 = 4050;
        public const TXT_ITMNAME_5_3_EPIC = 8050;
        public const TXT_ITMNAME_6_1 = 3250;
        public const TXT_ITMNAME_6_1_EPIC = 7250;
        public const TXT_ITMNAME_6_2 = 3750;
        public const TXT_ITMNAME_6_2_EPIC = 7750;
        public const TXT_ITMNAME_6_3 = 4100;
        public const TXT_ITMNAME_6_3_EPIC = 8100;
        public const TXT_ITMNAME_7_1 = 3300;
        public const TXT_ITMNAME_7_1_EPIC = 7300;
        public const TXT_ITMNAME_7_2 = 3800;
        public const TXT_ITMNAME_7_2_EPIC = 7800;
        public const TXT_ITMNAME_7_3 = 4150;
        public const TXT_ITMNAME_7_3_EPIC = 8150;
        public const TXT_ITMNAME_8 = 3350;
        public const TXT_ITMNAME_8_EPIC = 7350;
        public const TXT_ITMNAME_9 = 3400;
        public const TXT_ITMNAME_9_EPIC = 7400;
        public const TXT_ITMNAME_EXT = 4600;
        public const TXT_KRITISCHMINMAX = 200;
        public const TXT_LEGALCHARS = 280;
        public const TXT_LM = 317;
        public const TXT_LOCK_REASON = 9236;
        public const TXT_LOGIN = 14;
        public const TXT_LOGIN_LEGAL_1 = 276;
        public const TXT_LOGIN_LEGAL_2 = 277;
        public const TXT_LOGOUT = 48;
        public const TXT_LUXURY_ALREADY = 9260;
        public const TXT_LUXURY_BTN = 9259;
        public const TXT_LUXURY_BTN2 = 9262;
        public const TXT_LUXURY_BTN3 = 9264;
        public const TXT_LUXURY_BUTTON = 9256;
        public const TXT_LUXURY_CONFIRM = 9261;
        public const TXT_LUXURY_CONFIRM2 = 9263;
        public const TXT_LUXURY_TEXT = 9258;
        public const TXT_LUXURY_TITLE = 9257;
        public const TXT_MAX = 215;
        public const TXT_MESSAGE = 165;
        public const TXT_MONSTER_NAME = 2200;
        public const TXT_MOUNT = 194;
        public const TXT_MOUNT_DURATION = 195;
        public const TXT_MOUNT_FOREVER = 9150;
        public const TXT_MOUNT_GAIN1 = 4520;
        public const TXT_MOUTH = 29;
        public const TXT_MQ_MUSHHINT = 210;
        public const TXT_MUSH_DONATE_OBSOLETE = 8998;
        public const TXT_MUSH_SPENT = 204;
        public const TXT_MUSHBET_BOUGHT = 308;
        public const TXT_MUSHROOMS_BOUGHT = 9102;
        public const TXT_MUTE = 150;
        public const TXT_NACHRICHT = 93;
        public const TXT_NAME = 16;
        public const TXT_NAME_CHANGED = 153;
        public const TXT_NECESSARY_CLASS = 9559;
        public const TXT_NEW_HONOR_ACH = 8655;
        public const TXT_NEW_HONOR_ACH2 = 8659;
        public const TXT_NEW_MONSTER_NAMES = 9010;
        public const TXT_NOCLASS = 218;
        public const TXT_NOCLASS_DESC = 219;
        public const TXT_NODESC = 118;
        public const TXT_NOGUILD = 107;
        public const TXT_NOMOUNT = 196;
        public const TXT_NOSE = 31;
        public const TXT_OK = 44;
        public const TXT_OLD_EMAIL = 9104;
        public const TXT_OPTION_TITLE = 151;
        public const TXT_OPTIONEN = 12;
        public const TXT_PASSWORD = 17;
        public const TXT_PASSWORD_CHANGED = 152;
        public const TXT_PASSWORD_SMILEY_HAPPY = 8997;
        public const TXT_PASSWORD_SMILEY_NEUTRAL = 8996;
        public const TXT_PASSWORD_SMILEY_SAD = 0x2323;
        public const TXT_PAYICON_1 = 1200;
        public const TXT_PAYICON_2 = 1201;
        public const TXT_PAYICON_3 = 1202;
        public const TXT_PAYICON_4 = 1203;
        public const TXT_PAYICON_5 = 1204;
        public const TXT_PAYICON_6 = 1205;
        public const TXT_PILZDEALER = 6;
        public const TXT_PILZE = 77;
        public const TXT_POPUP_INVITE = 205;
        public const TXT_POPUP_KICK = 207;
        public const TXT_POPUP_LEITER = 209;
        public const TXT_POPUP_OFFIZIER = 208;
        public const TXT_POPUP_PROFILE = 206;
        public const TXT_POPUP_REVOLT = 8650;
        public const TXT_POST = 8;
        public const TXT_POST_ACCEPT = 97;
        public const TXT_POST_CANCEL = 84;
        public const TXT_POST_DELETE = 81;
        public const TXT_POST_FLUSH_TEXT = 9451;
        public const TXT_POST_FORWARD = 9401;
        public const TXT_POST_FROM = 94;
        public const TXT_POST_LIST_COLUMN_1 = 85;
        public const TXT_POST_LIST_COLUMN_2 = 86;
        public const TXT_POST_LIST_COLUMN_3 = 87;
        public const TXT_POST_READ = 80;
        public const TXT_POST_REPLY = 178;
        public const TXT_POST_RETURN = 96;
        public const TXT_POST_SEND = 83;
        public const TXT_POST_TIME = 95;
        public const TXT_POST_TITLE_INBOX = 88;
        public const TXT_POST_TITLE_READ = 89;
        public const TXT_POST_TITLE_WRITE = 90;
        public const TXT_POST_VIEWFIGHT = 238;
        public const TXT_POST_WRITE = 82;
        public const TXT_POTION_KILL_INSTRUCTIONS = 316;
        public const TXT_PURCHASE_CANCELLED = 9901;
        public const TXT_PURCHASE_CHECKIN_ERROR = 9905;
        public const TXT_PURCHASE_ERROR = 9902;
        public const TXT_PURCHASE_PAYWAIT = 9904;
        public const TXT_PURCHASE_SUCCESS = 9906;
        public const TXT_PURCHASE_WAIT = 9903;
        public const TXT_PVP_LOSE = 4235;
        public const TXT_PVP_WIN = 4215;
        public const TXT_QO_CHOOSE = 98;
        public const TXT_QO_NO_THIRST = 9784;
        public const TXT_QO_RETURN = 101;
        public const TXT_QO_REWARD = 99;
        public const TXT_QO_START = 100;
        public const TXT_QUEST_CANCEL = 104;
        public const TXT_QUEST_CLOSER = 1450;
        public const TXT_QUEST_COLLECT_AMOUNT = 2050;
        public const TXT_QUEST_COLLECT_TITLE = 1330;
        public const TXT_QUEST_COLLECT_WHAT = 1650;
        public const TXT_QUEST_ESCORT_LOCATION = 6200;
        public const TXT_QUEST_ESCORT_PRECLOSER = 6250;
        public const TXT_QUEST_ESCORT_TITLE = 6100;
        public const TXT_QUEST_ESCORT_WHOM = 6150;
        public const TXT_QUEST_FETCH_FROM = 1800;
        public const TXT_QUEST_FETCH_PRECLOSER = 2100;
        public const TXT_QUEST_FETCH_TITLE = 1360;
        public const TXT_QUEST_FETCH_WHAT = 2000;
        public const TXT_QUEST_KILL_LOCATION = 1600;
        public const TXT_QUEST_KILL_PRECLOSER = 1700;
        public const TXT_QUEST_KILL_TITLE = 5500;
        public const TXT_QUEST_KILL_WHOM = 5700;
        public const TXT_QUEST_LOCATION = 1500;
        public const TXT_QUEST_OFFER_TEXT = 6405;
        public const TXT_QUEST_OFFER_TITLE = 0x1900;
        public const TXT_QUEST_OPENER = 1400;
        public const TXT_QUEST_SCOUT_TASK1 = 1550;
        public const TXT_QUEST_SCOUT_TASK2 = 1750;
        public const TXT_QUEST_SCOUT_TITLE = 1300;
        public const TXT_QUEST_TEXT = 5000;
        public const TXT_QUEST_TRANSPORT_LOCATION = 6000;
        public const TXT_QUEST_TRANSPORT_PRECLOSER = 6050;
        public const TXT_QUEST_TRANSPORT_TITLE = 5900;
        public const TXT_QUEST_TRANSPORT_WHAT = 5950;
        public const TXT_RACEDESC = 2448;
        public const TXT_RACENAME = 2440;
        public const TXT_RAID_LOST = 9005;
        public const TXT_RAID_TEXT = 8820;
        public const TXT_RAID_WON = 9000;
        public const TXT_RANDOM = 47;
        public const TXT_RANKMSG_1 = 260;
        public const TXT_RANKMSG_10 = 269;
        public const TXT_RANKMSG_2 = 261;
        public const TXT_RANKMSG_3 = 262;
        public const TXT_RANKMSG_4 = 263;
        public const TXT_RANKMSG_5 = 264;
        public const TXT_RANKMSG_6 = 265;
        public const TXT_RANKMSG_7 = 266;
        public const TXT_RANKMSG_8 = 267;
        public const TXT_RANKMSG_9 = 268;
        public const TXT_RANKNAME = 4543;
        public const TXT_RE = 221;
        public const TXT_RECONNECT = 217;
        public const TXT_REMAINING = 315;
        public const TXT_REQUEST_PASSWORD = 20;
        public const TXT_REQUEST_SIGNUP = 23;
        public const TXT_RESEND_BTN1 = 281;
        public const TXT_RESEND_BTN2 = 283;
        public const TXT_RESEND_TEXT = 282;
        public const TXT_RESEND_TITLE = 284;
        public const TXT_REVOLT_CHAT_MSG = 8653;
        public const TXT_REVOLT_WARNING = 8651;
        public const TXT_REVOLT_WARNING_TITLE = 8652;
        public const TXT_ROB = 9526;
        public const TXT_ROUNDS_PLURAL = 241;
        public const TXT_RUESTUNG = 163;
        public const TXT_RUESTUNG_SUM = 199;
        public const TXT_RUESTUNG_SUM_HINT = 202;
        public const TXT_SCHADEN = 160;
        public const TXT_SCHMIEDE = 3;
        public const TXT_SCROLL_BOUGHT = 10128;
        public const TXT_SCROLL_BUYHINT = 10123;
        public const TXT_SCROLL_BUYNOW = 10127;
        public const TXT_SCROLL_DATE = 10122;
        public const TXT_SCROLL_NAME = 10120;
        public const TXT_SELECT_WORLD = 9900;
        public const TXT_SERVER_STARTED = 8992;
        public const TXT_SHIELD_FORMULA = 9205;
        public const TXT_SHOP_LINK = 8805;
        public const TXT_SHOPS_NEWWAREZ = 79;
        public const TXT_SIGNUP = 13;
        public const TXT_SILBER = 76;
        public const TXT_SILVER_HINT = 220;
        public const TXT_SKIP_FIGHT = 105;
        public const TXT_SPECIAL = 45;
        public const TXT_SPECIAL2 = 46;
        public const TXT_SPECIAL_ACTION_TEXT_OK = 9226;
        public const TXT_SPECIAL_ACTION_TEXT_TOOHEALTHY = 0x2400;
        public const TXT_SPECIAL_ACTION_TITLE = 9206;
        public const TXT_STALL = 5;
        public const TXT_STALL_BUY = 112;
        public const TXT_STALL_LAUFZEIT = 111;
        public const TXT_STALL_MOUNTTEXT = 2430;
        public const TXT_STALL_MOUNTTITEL = 2420;
        public const TXT_STALL_PROLONG = 213;
        public const TXT_STALL_SCHATZ = 278;
        public const TXT_STALL_TEXT = 110;
        public const TXT_STALL_TITEL = 109;
        public const TXT_STALL_UPGRADE = 214;
        public const TXT_SUBJECT_GUILD_DELETED = 4400;
        public const TXT_SUBJECT_GUILD_DELETED_BY_ADMIN = 4401;
        public const TXT_SUBJECT_GUILD_EXPELLED = 4402;
        public const TXT_SUBJECT_GUILD_EXPELLED_BY_ADMIN = 4403;
        public const TXT_SUBJECT_GUILD_INVITE = 4404;
        public const TXT_SUBJECT_PVP = 4410;
        public const TXT_TAG = 197;
        public const TXT_TAGE = 198;
        public const TXT_TATTOO = 38;
        public const TXT_TAVERNE = 1;
        public const TXT_TEMPORARY = 313;
        public const TXT_TIMEBAR = 224;
        public const TXT_TITLE_FORGOT_PASSWORD = 27;
        public const TXT_TITLE_SIGNUP = 26;
        public const TXT_TITLE_WORK = 40;
        public const TXT_TOILET_DROPTWICE = 9786;
        public const TXT_TOILET_FULL = 9465;
        public const TXT_TOILET_HINT = 9457;
        public const TXT_TOILET_ITEM = 9785;
        public const TXT_TOILET_TANKFULL = 9466;
        public const TXT_TOWER = 9470;
        public const TXT_TOWER_BONUS = 9773;
        public const TXT_TOWER_ENEMY_NAMES = 9570;
        public const TXT_TOWER_GUYS = 9770;
        public const TXT_TOWER_INFO = 9772;
        public const TXT_TOWER_LEVEL = 9771;
        public const TXT_TOWER_LOST = 9779;
        public const TXT_TOWER_TRY = 9565;
        public const TXT_TOWER_WON = 9774;
        public const TXT_TV_DISABLE = 10125;
        public const TXT_TV_HINT = 10126;
        public const TXT_UND = 78;
        public const TXT_UNKNOWN = 9113;
        public const TXT_UNTIL = 314;
        public const TXT_VALIDATE_ERR = 246;
        public const TXT_VALIDATE_ERR_TITLE = 243;
        public const TXT_VALIDATE_OK = 245;
        public const TXT_VALIDATE_OK_TITLE = 242;
        public const TXT_VALIDATE_UNN = 247;
        public const TXT_VALIDATE_UNN_TITLE = 244;
        public const TXT_VOLUME = 149;
        public const TXT_WAFFENSCHADEN = 201;
        public const TXT_WELCOME = 15;
        public const TXT_WELTKARTE = 11;
        public const TXT_WHISPER = 8813;
        public const TXT_WITCH_BOOK = 10124;
        public const TXT_WITCH_HINT = 9907;
        public const TXT_WITCH_WRONGTYPE = 9915;
        public const TXT_WORK_FINISH = 8806;
        public const TXT_ZAUBERLADEN = 4;
        public const TXT_ZURGILDE = 183;

        public var paramObj:Object;
        public var so:SharedObject;
        public var mp_api_user_id:String;
        public var mp_api_user_token:String;
        public var ssoMode:Boolean;
        public var param_id:String;
        public var param_rec:String;
        public var param_adv:String;
        public var param_valid:String;
        public var param_hall:String;
        public var param_cid:String;
        public var param_cid_original:Boolean;
        public var param_imgsvr:int;
        public var param_forceport:int;
        public var view_player:String;
        public var admin_login:String;
        public var PayMethods:Array;
        public var ServerID:int;
        public var MPProject:String;
        public var image_timeout:int;
        public var response_timeout:int;
        public var param_sponsor;
        public var param_sponsor_url;
        public var param_reroll_img:int;
        public var param_reconnect:int;
        public var param_php_tunnel_url:String;
        public var param_poll_tunnel_url:String;
        public var trackPixels:Array;
        public var intervalMultiplierChat:Number;
        public var intervalMultiplierReconnect:Number;
        public var param_support_email:String;
        public var param_gamestaff_email:String;
        public var param_papaya_path:String;
        public var param_papaya_cfg_file:String;
        public var param_fail_tries:int;
        public var param_idle_polling:int;
        public var param_allow_skip_quest:Boolean;
        public var param_happy_hour:Boolean;
        public var param_censored:Boolean;
        public var param_internal_pixel:Boolean;
        public var param_reload_pixel:Boolean;
        public var noMush:Boolean;
        public var param_server_version_cfg:String;
        public var param_server_version_act:String;
        public var param_no_cid_save:Boolean;
        public var hadAccount:Boolean;
        public var param_languages:Array;
        public var param_language_names:Array;
        public var param_lowres_url:String;
        public var param_bullshit_text:String;
        public var param_bullshit_cid:String;
        public var param_social_buttons:Array;
        public var defined_pixel_calls:Array;
        public var beerFest:Boolean;
        public var towerLevelLabelPos:int;
        public var login_background_id:String;
        public var worlds:Array;
        public var preventTv:Boolean;
        public var buffed_reg:String;
        public var buffed_stuff:Array;
        public var buffed_id:String;
        public var buffed_name:String;
        public var buffed_email:String;
        public var buffedReq:Boolean;
        public var buffedMode:Boolean;
        public var buffedLinkText:String;
        public var buffedLinkURL:String;
        public var lang_code:String;
        public var original_lang_code:String;
        public var img_url:Array;
        public var snd_url:Array;
        public var img_url_index:int;
        public var snd_url_index:int;
        public var lang_url:String;
        public var forum_url:String;
        public var shop_url:String;
        public var imprint_url:String;
        public var legal_url:String;
        public var dataprot_url:String;
        public var instr_url:String;
        public var no_crossdomain:Boolean;
        public var FriendLink:String;
        public var sessionID:String;
        public var server:String;
        public var lastAct:int;
        public var sendLock:Boolean;
        public var fightLock:Boolean;
        public var pollLock:Boolean;
        public var txt:Array;
        public var pendingLanguageFile:Boolean;
        public var chosenLangFont:String;
        public var countryName:Array;
        public var pendingConfigurationFile:Boolean;
        public var actor:Array;
        public var actorURL:Array;
        public var actorLoaded:Array;
        public var actorPersistent:Array;
        public var actorBitmap:Array;
        public var actorSoundLoader:Array;
        public var actorPopupStamp:Array;
        public var actorName:Array;
        public var stObject:SoundTransform;
        public var pendingLoaders:int;
        public var dragDropActive:Boolean;
        public var dragDropProhibit:Boolean;
        public var dragNotYet:Boolean;
        public var WhenLoadedFn:Array;
        public var WhenLoadedActive:Boolean;
        public var WhenLoadedTimeout:Timer;
        public var toErrorCount:int;
        public var ioErrorCount:int;
        public var pendingDebugFile:Boolean;
        public var FontFormat_Error:TextFormat;
        public var FontFormat_Book:TextFormat;
        public var FontFormat_BookHint:TextFormat;
        public var FontFormat_BookLeft:TextFormat;
        public var FontFormat_Default:TextFormat;
        public var FontFormat_AttackLabel:TextFormat;
        public var FontFormat_Speech:TextFormat;
        public var FontFormat_Grayed:TextFormat;
        public var FontFormat_GrayedHighLight:TextFormat;
        public var FontFormat_ClassError:TextFormat;
        public var FontFormat_Chat:TextFormat;
        public var FontFormat_ChatWhisper:TextFormat;
        public var FontFormat_ChatError:TextFormat;
        public var FontFormat_GuildBuilding:TextFormat;
        public var FontFormat_GuildMoney:TextFormat;
        public var FontFormat_DefaultLeft:TextFormat;
        public var FontFormat_Highlight:TextFormat;
        public var FontFormat_HighlightWhisper:TextFormat;
        public var FontFormat_Heading:TextFormat;
        public var FontFormat_ScreenTitle:TextFormat;
        public var FontFormat_Popup:TextFormat;
        public var FontFormat_PopupCompare:TextFormat;
        public var FontFormat_PopupCompareSum:TextFormat;
        public var FontFormat_PopupCompareBetter:TextFormat;
        public var FontFormat_PopupCompareWorse:TextFormat;
        public var FontFormat_PopupCompareBetterHL:TextFormat;
        public var FontFormat_PopupCompareWorseHL:TextFormat;
        public var FontFormat_EpicItemQuote:TextFormat;
        public var FontFormat_ItemEnchantment:TextFormat;
        public var FontFormat_LogoutLink:TextFormat;
        public var FontFormat_LogoutLinkHighLight:TextFormat;
        public var FontFormat_HallListHeading:TextFormat;
        public var FontFormat_HallListText:TextFormat;
        public var FontFormat_GuildHallNoAttack:TextFormat;
        public var FontFormat_HallListHighLight:TextFormat;
        public var FontFormat_AttribBonus:TextFormat;
        public var FontFormat_AttribTemp:TextFormat;
        public var FontFormat_Attrib:TextFormat;
        public var FontFormat_PayIcon:TextFormat;
        public var FontFormat_PostListHeading:TextFormat;
        public var FontFormat_PostListText:TextFormat;
        public var FontFormat_PostListTextSys:TextFormat;
        public var FontFormat_GuildListText:TextFormat;
        public var FontFormat_GuildListTextOnline:TextFormat;
        public var FontFormat_GuildListTextAttackError:TextFormat;
        public var FontFormat_GuildListTextAttackErrorOnline:TextFormat;
        public var FontFormat_GuildListTextAttackErrorHalf:TextFormat;
        public var FontFormat_GuildListTextAttackErrorOnlineHalf:TextFormat;
        public var FontFormat_GuildListTextAttackErrorOnlinePopup:TextFormat;
        public var FontFormat_GuildListTextAttackOk:TextFormat;
        public var FontFormat_GuildListTextAttackOkPopup:TextFormat;
        public var FontFormat_PostListHighLight:TextFormat;
        public var FontFormat_PostListHighLightSys:TextFormat;
        public var FontFormat_PostListTextSysRed:TextFormat;
        public var FontFormat_PostListHighLightSysRed:TextFormat;
        public var FontFormat_PostListTextSysGreen:TextFormat;
        public var FontFormat_PostListHighLightSysGreen:TextFormat;
        public var FontFormat_QuestBar:TextFormat;
        public var FontFormat_TimeBar:TextFormat;
        public var FontFormat_LifeBar:TextFormat;
        public var FontFormat_Damage:TextFormat;
        public var FontFormat_CriticalDamage:TextFormat;
        public var FontFormat_Bullshit:TextFormat;
        public var FontFormat_CatapultDamage:TextFormat;
        public var FontFormat_HighStakes:TextFormat;
        public var FontFormat_HighStakesHighLight:TextFormat;
        public var FontFormat_HighStakesGrayed:TextFormat;
        public var FontFormat_HighStakesHighLightGrayed:TextFormat;
        public var FontFormat_ToiletAura:TextFormat;
        public var textDir:String;
        public var gameFont:String;
        public var fontEmbedded:Boolean;
        public var sizeMod:Number;
        public var Filter_Shadow:Array;
        public var Filter_HeavyShadow:Array;
        public var CharName:String;
        public var CharVolk:int;
        public var CharMann:Boolean;
        public var CharKaste:int;
        public var CharColor:int;
        public var CharMouth:int;
        public var CharBeard:int;
        public var CharNose:int;
        public var CharEyes:int;
        public var CharBrows:int;
        public var CharEars:int;
        public var CharHair:int;
        public var CharSpecial:int;
        public var CharSpecial2:int;
        public var revertCharVolk:int;
        public var revertCharMann:Boolean;
        public var slmCount:Number;
        public var ststep:int;
        public var revertCharColor:int;
        public var revertCharMouth:int;
        public var revertCharBeard:int;
        public var revertCharNose:int;
        public var revertCharEyes:int;
        public var revertCharBrows:int;
        public var revertCharEars:int;
        public var revertCharHair:int;
        public var revertCharSpecial:int;
        public var revertCharSpecial2:int;
        public var Savegame:Array;
        public var MirrorPieces:Array;
        public var hasMirror:Boolean;
        public var canRob:Boolean;
        public var towerLevel:int;
        public var ServerTime:Date;
        public var LocalTime:Date;
        public var GameTime:Date;
        public var Stundenlohn:Number;
        public var VerdientesGeld:int;
        public var Gilde:String;
        public var GildenID:int;
        public var PostScroll:int;
        public var PostMax:int;
        public var PostSel:int;
        public var PostScrollDown:Boolean;
        public var DealerMenuSelect:int;
        public var SelectedQuest:int;
        public var PlayerDesc:String;
        public var PreviousLogin:Boolean;
        public var DemoMode:Boolean;
        public var selName:String;
        public var selGilde:String;
        public var InviteGildenID:int;
        public var ReplyAddress:String;
        public var ReplySubject:String;
        public var optionNewData:String;
        public var ruhmesHalleSuchString:String;
        public var ruhmesHalleSuchName:Boolean;
        public var GoldKurve:Array;
        public var TrueAttPreis:Array;
        public var GildeBuildingGold:Array;
        public var GildeBuildingPilz:Array;
        public var GildeChatScroll:int;
        public var tmpBattleInfo:String;
        public var KlasseGewählt:Boolean;
        public var PostFightMode:Boolean;
        public var tmpAmount:int;
        public var PulseTaverne:Boolean;
        public var PulseArbeiten:Boolean;
        public var PulseGilde:Boolean;
        public var PulseGildeOnHistory:Boolean;
        public var PulsePost:Boolean;
        public var PulseChar:Boolean;
        public var PulseDealer:Boolean;
        public var notFirstVolChange:Boolean;
        public var notSecondVolChange:Boolean;
        public var LevelUp:Boolean;
        public var LastLevel:int;
        public var canBoost:Array;
        public var GuildHallMode:Boolean;
        public var DealerAktion:int;
        public var SelectedGuild:String;
        public var SelectedDungeon:int;
        public var lightMode:Boolean;
        public var chatSound:Boolean;
        public var compareItems:Boolean;
        public var light_mode_default:Boolean;
        public var disableTV:Boolean;
        public var tvTest:Boolean;
        public var tvFunctionName:String;
        public var tvPollNormal:int;
        public var tvPollLong:int;
        public var oldAch:Array;
        public var CupChosen:int;
        public var oldAlbum:int;
        public var PresetGold:int;
        public var PresetMush:int;
        public var MushBought:int;
        public var specialAction:int;
        public var nextPxl:int;
        public var BlockReroll:Boolean;
        public var FrenzyMode:Boolean;
        public var fightFlushMode:Boolean;
        public var RollFrenzy:Timer;
        public var forceAdventure:Boolean;
        public var lastAttacked:Array;
        public var forwardText:String;
        public var TimeCalc:Timer;
        public var albumCat:int;
        public var albumPage:int;
        public var AlbumContent:Array;
        public var contentMax:int;
        public var towerSG:Array;
        public var copyCatSel:int;
        public var towerScroll:Number;
        public var towerScrollDest:Number;
        public var towerScrollSpeed:Number;
        public var towerScrollTimer:Timer;
        public var towerScrollGrabPos:Number;
        public var alternateCharOppImg:Boolean;
        public var hasFoughtGuildBattle:Boolean;
        public var winners:Array;
        public var skipAllowed:Boolean;
        public var tvStatus:Number;
        public var tvStatusDest:Number;
        public var tvWobble:Number;
        public var tvAni:int;
        public var tvReturnValue:int;
        public var tvTimer:Timer;
        public var tvPollTimer:Timer;
        public var specialActionHint:Boolean;
        public var PvPDelayTimer:Timer;
        public var suggestNames:Array;
        public var crestElementPos;
        public var selecterCrestElement:int;
        public var crestSuggested:Boolean;
        public var crestColorSelection:int;
        public var crest:Array;
        public var heraldicColors:Array;
        public var crestColor:Array;
        public var crestMoveDest:Number;
        public var crestMoveTimer;
        public var Filter_CrestSelected:GradientGlowFilter;
        public var oldCrestStr:String;
        public var guildInstanceID:int;
        public var myOwnRank:int;
        public var myOwnAttackTarget:int;
        public var myOwnGuildMoney:int;
        public var lastGuildShown:String;
        public var lastGuildData:Array;
        public var lastRaidCost:int;
        public var lastGuildMembers:Array;
        public var lastHallMembers:Array;
        public var arrowHallMode:Boolean;
        public var offlineGuildMembers:Array;
        public var showActivityTime:Boolean;
        public var guildForumLink:String;
        public var showAlbumOffset:Boolean;
        public var lastGuildCrestId:int;
        public var avgLevel:int;
        public var DestroyGuildBtnTimer:Boolean;
        public var PostReturnToPlayer:String;
        public var oldSel:int;
        public var postInstance:int;
        public var mirrorFadeAmount:Number;
        public var mirrorAniTimer:Timer;
        public var lastPlayer:String;
        public var AlbumEffect:Boolean;
        public var mirrorAniStep:Number;
        public var indexInGuild:int;
        public var indexInHall:int;
        public var playerTowerLevel:int;
        public var MQSInstance:int;
        public var MQDelayTimer:Timer;
        public var LastDungeonNr:int;
        public var LastDungeonEnemy:int;
        public var hasLostMQ:Boolean;
        public var CorrectItemType:Array;
        public var crestSuggestion:Array;
        public var newCrestSuggested:String;
        public var ChatHist:Array;
        public var toiletTankAdjustTimer;
        public var toiletTankCurrent:Number;
        public var toiletTankDest:Number;
        public var witchAniStep:int;
        public var witchAniTimer:Timer;
        public var witchDesiredType:int;
        public var nextFightTimer:Timer;
        public var towerFightMode:Boolean;
        public var fights:Array;
        public var guildFightCount:uint;
        public var fightNumber:uint;
        public var skipGuildFights:int;
        public var lastRoundFighterName:String;
        public var lastWhisperTarget:String;
        public var lastMessageTarget:String;
        public var guildFightTimer:Timer;
        public var guildAttackTime:Number;
        public var guildDefenceTime:Number;
        public var guildAttacked:String;
        public var guildAttacking:String;
        public var lastChatHist:String;
        public var lastChatIndex:Number;
        public var guildBlinkReady:Boolean;
        public var firstChatFill:Boolean;
        public var SignupJumpRunning:Boolean;
        public var suggestionSlot:Array;
        public var popupStamp:int;
        public var GuildChatPoll:Timer;

        public function MainTimeline(){
            addFrameScript(0, this.frame1);
        }

        public function MD5(string){
            var x:* = undefined;
            var k:* = undefined;
            var AA:* = undefined;
            var BB:* = undefined;
            var CC:* = undefined;
            var DD:* = undefined;
            var a:* = undefined;
            var b:* = undefined;
            var c:* = undefined;
            var d:* = undefined;
            var S11:* = undefined;
            var S12:* = undefined;
            var S13:* = undefined;
            var S14:* = undefined;
            var S21:* = undefined;
            var S22:* = undefined;
            var S23:* = undefined;
            var S24:* = undefined;
            var S31:* = undefined;
            var S32:* = undefined;
            var S33:* = undefined;
            var S34:* = undefined;
            var S41:* = undefined;
            var S42:* = undefined;
            var S43:* = undefined;
            var S44:* = undefined;
            var temp:* = undefined;
            var string:* = string;


            var RotateLeft:* = function (lValue, iShiftBits){
                return (((lValue << iShiftBits) | (lValue >>> (32 - iShiftBits))));
            };

            var AddUnsigned:* = function (lX, lY){
                var lX4:*;
                var lY4:*;
                var lX8:*;
                var lY8:*;
                var lResult:*;
                lX8 = (lX & 0x80000000);
                lY8 = (lY & 0x80000000);
                lX4 = (lX & 0x40000000);
                lY4 = (lY & 0x40000000);
                lResult = ((lX & 1073741823) + (lY & 1073741823));
                if ((lX4 & lY4)){
                    return ((((lResult ^ 0x80000000) ^ lX8) ^ lY8));
                };
                if ((lX4 | lY4)){
                    if ((lResult & 0x40000000)){
                        return ((((lResult ^ 0xC0000000) ^ lX8) ^ lY8));
                    };
                    return ((((lResult ^ 0x40000000) ^ lX8) ^ lY8));
                };
                return (((lResult ^ lX8) ^ lY8));
            };

            var F:* = function (x, y, z){
                return (((x & y) | (~(x) & z)));
            };

            var G:* = function (x, y, z){
                return (((x & z) | (y & ~(z))));
            };

            var H:* = function (x, y, z){
                return (((x ^ y) ^ z));
            };

            var I:* = function (x, y, z){
                return ((y ^ (x | ~(z))));
            };

            var FF:* = function (a, b, c, d, x, s, ac){
                a = AddUnsigned(a, AddUnsigned(AddUnsigned(F(b, c, d), x), ac));
                return (AddUnsigned(RotateLeft(a, s), b));
            };

            var GG:* = function (a, b, c, d, x, s, ac){
                a = AddUnsigned(a, AddUnsigned(AddUnsigned(G(b, c, d), x), ac));
                return (AddUnsigned(RotateLeft(a, s), b));
            };

            var HH:* = function (a, b, c, d, x, s, ac){
                a = AddUnsigned(a, AddUnsigned(AddUnsigned(H(b, c, d), x), ac));
                return (AddUnsigned(RotateLeft(a, s), b));
            };

            var II:* = function (a, b, c, d, x, s, ac){
                a = AddUnsigned(a, AddUnsigned(AddUnsigned(I(b, c, d), x), ac));
                return (AddUnsigned(RotateLeft(a, s), b));
            };

            var ConvertToWordArray:* = function (string){
                var lWordCount:*;
                var lMessageLength:*;
                var lNumberOfWords_temp1:*;
                var lNumberOfWords_temp2:*;
                var lNumberOfWords:*;
                var lWordArray:*;
                var lBytePosition:*;
                var lByteCount:*;
                lMessageLength = string.length;
                lNumberOfWords_temp1 = (lMessageLength + 8);
                lNumberOfWords_temp2 = ((lNumberOfWords_temp1 - (lNumberOfWords_temp1 % 64)) / 64);
                lNumberOfWords = ((lNumberOfWords_temp2 + 1) * 16);
                lWordArray = Array((lNumberOfWords - 1));
                lBytePosition = 0;
                lByteCount = 0;
                while (lByteCount < lMessageLength) {
                    lWordCount = ((lByteCount - (lByteCount % 4)) / 4);
                    lBytePosition = ((lByteCount % 4) * 8);
                    lWordArray[lWordCount] = (lWordArray[lWordCount] | (string.charCodeAt(lByteCount) << lBytePosition));
                    lByteCount++;
                };
                lWordCount = ((lByteCount - (lByteCount % 4)) / 4);
                lBytePosition = ((lByteCount % 4) * 8);
                lWordArray[lWordCount] = (lWordArray[lWordCount] | (128 << lBytePosition));
                lWordArray[(lNumberOfWords - 2)] = (lMessageLength << 3);
                lWordArray[(lNumberOfWords - 1)] = (lMessageLength >>> 29);
                return (lWordArray);
            };

            var WordToHex:* = function (lValue){
                var WordToHexValue:*;
                var WordToHexValue_temp:*;
                var lByte:*;
                var lCount:*;
                WordToHexValue = "";
                WordToHexValue_temp = "";
                lCount = 0;
                while (lCount <= 3) {
                    lByte = ((lValue >>> (lCount * 8)) & 0xFF);
                    WordToHexValue_temp = ("0" + lByte.toString(16));
                    WordToHexValue = (WordToHexValue + WordToHexValue_temp.substr((WordToHexValue_temp.length - 2), 2));
                    lCount++;
                };
                return (WordToHexValue);
            };

            var Utf8Encode:* = function (string){
                var utftext:*;
                var n:*;
                var c:*;
                utftext = "";
                n = 0;
                while (n < string.length) {
                    c = string.charCodeAt(n);
                    if (c < 128){
                        utftext = (utftext + String.fromCharCode(c));
                    } else {
                        if ((((c > 127)) && ((c < 0x0800)))){
                            utftext = (utftext + String.fromCharCode(((c >> 6) | 192)));
                            utftext = (utftext + String.fromCharCode(((c & 63) | 128)));
                        } else {
                            utftext = (utftext + String.fromCharCode(((c >> 12) | 224)));
                            utftext = (utftext + String.fromCharCode((((c >> 6) & 63) | 128)));
                            utftext = (utftext + String.fromCharCode(((c & 63) | 128)));
                        };
                    };
                    n++;
                };
                return (utftext);
            };

            x = new Array();

            S11 = 7;
            S12 = 12;
            S13 = 17;
            S14 = 22;
            S21 = 5;
            S22 = 9;
            S23 = 14;
            S24 = 20;
            S31 = 4;
            S32 = 11;
            S33 = 16;
            S34 = 23;
            S41 = 6;
            S42 = 10;
            S43 = 15;
            S44 = 21;

            string = Utf8Encode(string);

            x = ConvertToWordArray(string);
            a = 1732584193;
            b = 4023233417;
            c = 2562383102;
            d = 271733878;
            k = 0;

            while (k < x.length) {
                AA = a;
                BB = b;
                CC = c;
                DD = d;
                a = FF(a, b, c, d, x[(k + 0)], S11, 3614090360);
                d = FF(d, a, b, c, x[(k + 1)], S12, 3905402710);
                c = FF(c, d, a, b, x[(k + 2)], S13, 606105819);
                b = FF(b, c, d, a, x[(k + 3)], S14, 3250441966);
                a = FF(a, b, c, d, x[(k + 4)], S11, 4118548399);
                d = FF(d, a, b, c, x[(k + 5)], S12, 1200080426);
                c = FF(c, d, a, b, x[(k + 6)], S13, 2821735955);
                b = FF(b, c, d, a, x[(k + 7)], S14, 4249261313);
                a = FF(a, b, c, d, x[(k + 8)], S11, 1770035416);
                d = FF(d, a, b, c, x[(k + 9)], S12, 2336552879);
                c = FF(c, d, a, b, x[(k + 10)], S13, 0xFFFF5BB1);
                b = FF(b, c, d, a, x[(k + 11)], S14, 2304563134);
                a = FF(a, b, c, d, x[(k + 12)], S11, 1804603682);
                d = FF(d, a, b, c, x[(k + 13)], S12, 4254626195);
                c = FF(c, d, a, b, x[(k + 14)], S13, 2792965006);
                b = FF(b, c, d, a, x[(k + 15)], S14, 1236535329);
                a = GG(a, b, c, d, x[(k + 1)], S21, 4129170786);
                d = GG(d, a, b, c, x[(k + 6)], S22, 3225465664);
                c = GG(c, d, a, b, x[(k + 11)], S23, 643717713);
                b = GG(b, c, d, a, x[(k + 0)], S24, 3921069994);
                a = GG(a, b, c, d, x[(k + 5)], S21, 3593408605);
                d = GG(d, a, b, c, x[(k + 10)], S22, 38016083);
                c = GG(c, d, a, b, x[(k + 15)], S23, 3634488961);
                b = GG(b, c, d, a, x[(k + 4)], S24, 3889429448);
                a = GG(a, b, c, d, x[(k + 9)], S21, 568446438);
                d = GG(d, a, b, c, x[(k + 14)], S22, 3275163606);
                c = GG(c, d, a, b, x[(k + 3)], S23, 4107603335);
                b = GG(b, c, d, a, x[(k + 8)], S24, 1163531501);
                a = GG(a, b, c, d, x[(k + 13)], S21, 2850285829);
                d = GG(d, a, b, c, x[(k + 2)], S22, 4243563512);
                c = GG(c, d, a, b, x[(k + 7)], S23, 1735328473);
                b = GG(b, c, d, a, x[(k + 12)], S24, 2368359562);
                a = HH(a, b, c, d, x[(k + 5)], S31, 4294588738);
                d = HH(d, a, b, c, x[(k + 8)], S32, 2272392833);
                c = HH(c, d, a, b, x[(k + 11)], S33, 1839030562);
                b = HH(b, c, d, a, x[(k + 14)], S34, 4259657740);
                a = HH(a, b, c, d, x[(k + 1)], S31, 2763975236);
                d = HH(d, a, b, c, x[(k + 4)], S32, 1272893353);
                c = HH(c, d, a, b, x[(k + 7)], S33, 4139469664);
                b = HH(b, c, d, a, x[(k + 10)], S34, 3200236656);
                a = HH(a, b, c, d, x[(k + 13)], S31, 681279174);
                d = HH(d, a, b, c, x[(k + 0)], S32, 3936430074);
                c = HH(c, d, a, b, x[(k + 3)], S33, 3572445317);
                b = HH(b, c, d, a, x[(k + 6)], S34, 76029189);
                a = HH(a, b, c, d, x[(k + 9)], S31, 3654602809);
                d = HH(d, a, b, c, x[(k + 12)], S32, 3873151461);
                c = HH(c, d, a, b, x[(k + 15)], S33, 530742520);
                b = HH(b, c, d, a, x[(k + 2)], S34, 3299628645);
                a = II(a, b, c, d, x[(k + 0)], S41, 4096336452);
                d = II(d, a, b, c, x[(k + 7)], S42, 1126891415);
                c = II(c, d, a, b, x[(k + 14)], S43, 2878612391);
                b = II(b, c, d, a, x[(k + 5)], S44, 4237533241);
                a = II(a, b, c, d, x[(k + 12)], S41, 1700485571);
                d = II(d, a, b, c, x[(k + 3)], S42, 2399980690);
                c = II(c, d, a, b, x[(k + 10)], S43, 4293915773);
                b = II(b, c, d, a, x[(k + 1)], S44, 2240044497);
                a = II(a, b, c, d, x[(k + 8)], S41, 1873313359);
                d = II(d, a, b, c, x[(k + 15)], S42, 4264355552);
                c = II(c, d, a, b, x[(k + 6)], S43, 2734768916);
                b = II(b, c, d, a, x[(k + 13)], S44, 1309151649);
                a = II(a, b, c, d, x[(k + 4)], S41, 4149444226);
                d = II(d, a, b, c, x[(k + 11)], S42, 3174756917);
                c = II(c, d, a, b, x[(k + 2)], S43, 718787259);
                b = II(b, c, d, a, x[(k + 9)], S44, 3951481745);
                a = AddUnsigned(a, AA);
                b = AddUnsigned(b, BB);
                c = AddUnsigned(c, CC);
                d = AddUnsigned(d, DD);
                k = (k + 16);
            };
            temp = (((WordToHex(a) + WordToHex(b)) + WordToHex(c)) + WordToHex(d));
            return (temp.toLowerCase());
        }

        public function IO_ErrorHandler(event:IOErrorEvent){
            this.trc(event);
        }

        public function GetFileVersion(){
            var tmpStr:String;
            var numStr:String;
            var result:String;
            var i:int;
            tmpStr = this.GetMyPath(1);
            numStr = "";
            result = "";
            tmpStr = tmpStr.split(".")[0];
            i = tmpStr.length;
            while (i >= 0) {
                numStr = tmpStr.substr(i, 1);
                if (numStr == String(int(numStr))){
                    result = (numStr + result);
                };
                i--;
            };
            return (int(result));
        }

        public function GetMyPath(mode:int=0):String{
            var fullPath:String;
            var sections:Array;
            var fileName:String;
            var folderName:String;
            fullPath = loaderInfo.url;
            sections = fullPath.split("/");
            fileName = sections[(sections.length - 1)];
            folderName = fullPath.substr(0, (fullPath.length - fileName.length));
            switch (mode){
                case 0:
                    return (folderName);
                case 1:
                    return (fileName);
                case 2:
                    return (fullPath);
            };
            return ("");
        }

        public function GetIP():String{
            return ("127.0.0.1");
        }

        public function SendAction(act:Number, ... _args){
            var dataStr:* = null;
            var php_tunnel:* = null;
            var failTry:* = 0;
            var reqStr:* = null;
            var uReq:* = null;
            var php_tunnel_success:* = null;
            var php_tunnel_failed:* = null;
            var act:* = act;
            var par:* = _args;
            php_tunnel_success = function (evt:Event){
                var data_evt:DataEvent;
                php_tunnel.removeEventListener(Event.COMPLETE, php_tunnel_success);
                php_tunnel.removeEventListener(IOErrorEvent.IO_ERROR, php_tunnel_failed);
                php_tunnel.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, php_tunnel_failed);
                if ((((act == ACT_GET_CHAT_HISTORY)) && (!((param_poll_tunnel_url == ""))))){
                    pollLock = false;
                } else {
                    sendLock = false;
                };
                data_evt = new DataEvent(DataEvent.DATA);
                data_evt.data = php_tunnel.data;
                trc("Antwort auf", act, ":", php_tunnel.data);
                if (String(php_tunnel.data) == ""){
                    trc("Fehler: Keine (leere) Antwort vom Tunnelskript.");
                    php_tunnel_failed();
                } else {
                    ActionHandler(data_evt);
                };
            };
            php_tunnel_failed = function (evt:Event=undefined){
                if (failTry < param_fail_tries){
                    trc((((("PHP-Request fehlgeschlagen (Versuch" + String(failTry)) + "/") + String(param_fail_tries)) + ")."), evt, "Erneutes Senden...");
                    php_tunnel.load(uReq);
                    trc("Erneut gesendet.");
                } else {
                    trc("PHP Tunneling fehlgeschlagen. Versuche, neu zu verbinden.");
                    sessionID = "";
                    if ((((act == ACT_GET_CHAT_HISTORY)) && (!((param_poll_tunnel_url == ""))))){
                        pollLock = false;
                    } else {
                        sendLock = false;
                    };
                    ShowDisconnectScreen();
                };
                failTry++;
            };
            if (act == this.ACT_GET_CHAT_HISTORY){
                if (!this.OnStage(this.CNT_IF_LOGOUT)){
                    return;
                };
                if (this.param_poll_tunnel_url != ""){
                    if (this.pollLock){
                        return;
                    };
                } else {
                    if (((((this.pollLock) || (this.sendLock))) || (this.fightLock))){
                        return;
                    };
                };
            } else {
                if (this.sendLock){
                    if (((((((((((!((act == this.ACT_VALIDATE))) && (!((act == this.ACT_SEND_CHAT))))) && (!((act == this.ACT_GUILD_DONATE))))) && (!((act == this.ACT_REQUEST_GUILD_NAMES))))) && (!((act == this.ACT_REQUEST_CHAR))))) && (!((act == this.ACT_POST_SEND))))){
                        this.trc("Aktionsbefehl wird ignoriert, weil noch auf eine Serverantwort gewartet wird:", act);
                        return;
                    };
                } else {
                    if (this.fightLock){
                        this.trc("Aktionsbefehl wird ignoriert, weil ein wichtiges Ereignis stattfindet:", act);
                        return;
                    };
                };
            };
            dataStr = String(act);
            this.lastAct = act;
            while (dataStr.length < 3) {
                dataStr = ("0" + dataStr);
            };
            dataStr = (dataStr + par.join(";"));
            php_tunnel = new URLLoader();
            failTry = 1;
            php_tunnel.addEventListener(Event.COMPLETE, php_tunnel_success);
            php_tunnel.addEventListener(IOErrorEvent.IO_ERROR, php_tunnel_failed);
            php_tunnel.addEventListener(SecurityErrorEvent.SECURITY_ERROR, php_tunnel_failed);
            if (this.sessionID == ""){
                this.sessionID = "00000000000000000000000000000000";
            };
            this.trc("SID:", this.sessionID);
            this.trc("Action:", act);
            this.trc("Action+Daten:", dataStr);
            if ((((act == this.ACT_GET_CHAT_HISTORY)) && (!((this.param_poll_tunnel_url == ""))))){
                reqStr = ((this.param_poll_tunnel_url.split("%1").join(escape((this.sessionID + dataStr)).split("+").join("%2B")) + "&rnd=") + String((Math.round((Math.random() * 0x77359400)) + String(this.GameTime.getTime()))));
                this.pollLock = true;
            } else {
                reqStr = ((this.param_php_tunnel_url.split("%1").join(escape((this.sessionID + dataStr)).split("+").join("%2B")) + "&rnd=") + String((Math.round((Math.random() * 0x77359400)) + String(this.GameTime.getTime()))));
                if (act != this.ACT_GET_CHAT_HISTORY){
                    this.sendLock = true;
                };
            };
            if (this.mp_api_user_id != "notset"){
                reqStr = ((reqStr + "&mp_api_user_id=") + this.mp_api_user_id);
            };
            if (this.mp_api_user_token != "notset"){
                reqStr = ((reqStr + "&mp_api_user_token=") + this.mp_api_user_token);
            };
            uReq = new URLRequest(reqStr);
            php_tunnel.load(uReq);
            this.trc("URL:", reqStr);
        }
        public function SetTitleBar(msg:String=""){
            msg = (msg + (((((((msg == "")) ? "" : " - ") + this.txt[this.TXT_GAMETITLE]) + " (") + this.server.split(".")[0]) + ")"));
            ExternalInterface.call("set_title", msg);
        }
        public function SwapWords(tmpStr:String):String{
            var w:int;
            var tmpArr:Array;
            var tmpStr2:String;
            var tmpChar:String;
            var ii:int;
            var punct1:String;
            var punct2:String;
            var oldStr:String = tmpStr;
            if (this.textDir == "right"){
                tmpArr = new Array();
                tmpStr2 = "";
                tmpChar = "";
                tmpArr = tmpStr.split(" ").reverse();
                w = 0;
                while (w < tmpArr.length) {
                    if (tmpArr[w].length >= 2){
                        punct1 = tmpArr[w].substr(-3, 3);
                        if (punct1 != "..."){
                            punct1 = tmpArr[w].substr(-1, 1);
                        };
                        punct2 = tmpArr[w].substr(0, 1);
                        if (((((((((((!((punct1 == "!"))) && (!((punct1 == "."))))) && (!((punct1 == ":"))))) && (!((punct1 == "،"))))) && (!((punct1 == "x؟"))))) && (((!((punct1 == "\""))) || ((tmpArr[w].split("\"").length > 2)))))){
                            punct1 = "";
                        };
                        if (((!((punct2 == "\""))) || ((tmpArr[w].split("\"").length > 2)))){
                            punct2 = "";
                        };
                        if (punct1 == "..."){
                            punct2 = (punct2 + "...");
                            punct1 = "";
                        };
                        tmpArr[w] = ((punct1 + tmpArr[w].substr(((punct2)!="") ? 1 : 0, (tmpArr[w].length - (punct1 + punct2).length))) + punct2);
                    };
                    w++;
                };
                tmpStr = tmpArr.join(" ");
                tmpStr = tmpStr.split("(").join("#PARENTHESIS#").split(")").join("(").split("#PARENTHESIS#").join(")");
                tmpStr = tmpStr.split("[").join("#SBRACKET#").split("]").join("[").split("#SBRACKET#").join("]");
            };
            return (tmpStr);
        }
        public function LoadLanguageFile():void{
            var loader:* = null;
            var LanguageFileError:* = function (evt:Event){
                trc((("Chosen language " + lang_code) + " not available!"));
                if (lang_code == original_lang_code){
                    lang_code = original_lang_code;
                };
                if (lang_code == "ar"){
                    textDir = "right";
                };
                loader.load(new URLRequest((((lang_url + "lang/sfgame_") + lang_code) + ".txt")));
            };
            var LanguageFileLoaded:* = function (evt:Event):void{
                var strData:String;
                var i:int;
                var c:int;
                var inValue:Boolean;
                var tmpStr:String;
                var lastIndex:int;
                strData = loader.data;
                inValue = false;
                tmpStr = "";
                lastIndex = 0;
                i = 0;
                while (i < (strData.length - 1)) {
                    c = strData.charCodeAt(i);
                    switch (c){
                        case 10:
                        case 13:
                            inValue = false;
                            if (tmpStr.length > 0){
                                txt[lastIndex] = SwapWords(tmpStr);
                                tmpStr = "";
                            } else {
                                if (!txt[lastIndex]){
                                    txt[lastIndex] = "";
                                };
                            };
                            break;
                        case 20:
                        case 9:
                            if (!inValue){
                                lastIndex = int(tmpStr);
                                tmpStr = "";
                                inValue = true;
                            } else {
                                tmpStr = (tmpStr + strData.charAt(i));
                            };
                            break;
                        case 136:
                            tmpStr = (tmpStr + (String.fromCharCode(13) + String.fromCharCode(10)));
                        default:
                            tmpStr = (tmpStr + strData.charAt(i));
                    };
                    i++;
                };
                pendingLanguageFile = false;
                if (lang_code == original_lang_code){
                    if (txt[TXT_FONT_NAME] != ""){
                        SetFont(txt[TXT_FONT_NAME]);
                    } else {
                        SetFont("Komika Text");
                    };
                } else {
                    chosenLangFont = ((txt[TXT_FONT_NAME]) ? txt[TXT_FONT_NAME] : "Komika Text");
                    LoadOriginalLanguageFile();
                };
                i = TXT_COUNTRY_NAMES;
                while (i < (TXT_COUNTRY_NAMES + 100)) {
                    if (txt[i]){
                        countryName[txt[i].split("=")[0]] = txt[i].split("=")[1];
                    } else {
                        break;
                    };
                    i++;
                };
                LoaderComplete(evt);
            };
            loader = new URLLoader();
            var _local2 = loader;
            with (_local2) {
                dataFormat = URLLoaderDataFormat.TEXT;
                addEventListener(Event.COMPLETE, LanguageFileLoaded);
                addEventListener(IOErrorEvent.IO_ERROR, LanguageFileError);
                addEventListener(SecurityErrorEvent.SECURITY_ERROR, LanguageFileError);
                if (lang_code == "ar"){
                    textDir = "right";
                };
                load(new URLRequest(((((lang_url + "lang/sfgame_") + lang_code) + ".txt?rnd=") + String(Math.random()))));
            };
            this.pendingLoaders = (this.pendingLoaders + 1);
            this.pendingLanguageFile = true;
        }
        public function LoadOriginalLanguageFile():void{
            var loader:* = null;
            var OriginalLanguageFileLoaded:* = function (evt:Event):void{
                var strData:String;
                var i:int;
                var c:int;
                var inValue:Boolean;
                var tmpStr:String;
                var lastIndex:int;
                var oldStr:String;
                var w:int;
                var originalFont:String;
                strData = loader.data;
                inValue = false;
                tmpStr = "";
                lastIndex = 0;
                originalFont = "Komika Text";
                i = 0;
                while (i < (strData.length - 1)) {
                    c = strData.charCodeAt(i);
                    switch (c){
                        case 10:
                        case 13:
                            inValue = false;
                            if (tmpStr.length > 0){
                                oldStr = tmpStr;
                                if (lastIndex == TXT_FONT_NAME){
                                    originalFont = tmpStr;
                                };
                                tmpStr = "";
                            };
                            break;
                        case 20:
                        case 9:
                            if (!inValue){
                                lastIndex = int(tmpStr);
                                tmpStr = "";
                                inValue = true;
                            } else {
                                tmpStr = (tmpStr + strData.charAt(i));
                            };
                            break;
                        case 136:
                            tmpStr = (tmpStr + (String.fromCharCode(13) + String.fromCharCode(10)));
                        default:
                            tmpStr = (tmpStr + strData.charAt(i));
                    };
                    i++;
                };
                pendingLanguageFile = false;
                SetFont(SuperiorFont(chosenLangFont, originalFont));
                LoaderComplete(evt);
            };
            loader = new URLLoader();
            var _local2 = loader;
            with (_local2) {
                dataFormat = URLLoaderDataFormat.TEXT;
                addEventListener(Event.COMPLETE, OriginalLanguageFileLoaded);
                load(new URLRequest((((lang_url + "lang/sfgame_") + original_lang_code) + ".txt")));
            };
            this.pendingLoaders = (this.pendingLoaders + 1);
            this.pendingLanguageFile = true;
        }
        public function SuperiorFont(Font1:String, Font2:String):String{
            var FontRanking:Array;
            var rank1:int;
            var rank2:int;
            FontRanking = ["Gorilla Milkshake", "Komika Text", "Verdana", "Arial Narrow"];
            rank1 = FontRanking.indexOf(Font1);
            rank2 = FontRanking.indexOf(Font2);
            if (rank1 < 0){
                this.trc((("Warning: Font " + Font1) + " was unknown and could not be ranked."));
                rank1 = FontRanking.length;
            };
            if (rank2 < 0){
                this.trc((("Warning: Font " + Font2) + " was unknown and could not be ranked."));
                rank2 = FontRanking.length;
            };
            return (((rank1)>rank2) ? Font1 : Font2);
        }
        public function LoadConfigurationFile():void{
            var loader:* = null;
            var loader2:* = null;
            var pendingConfigurationFiles:* = undefined;
            var ConfigurationFileLoaded:* = function (evt:Event):void{
                var strData:String;
                var i:int;
                var j:int;
                var c:int;
                var inValue:Boolean;
                var tmpStr:String;
                var lastIndex:int;
                var tmpWorlds:Array;
                var tmpWorld:Array;
                var forceReroll:Boolean;
                strData = evt.target.data;
                inValue = false;
                tmpStr = "";
                lastIndex = 0;
                i = 0;
                while (i < (strData.length - 1)) {
                    c = strData.charCodeAt(i);
                    switch (c){
                        case 10:
                        case 13:
                            inValue = false;
                            if (tmpStr.length > 0){
                                switch (lastIndex){
                                    case CFG_LANG_CODE:
                                        lang_code = tmpStr;
                                        original_lang_code = lang_code;
                                        break;
                                    case CFG_IMG_URL:
                                        img_url[img_url.length] = tmpStr;
                                        break;
                                    case CFG_SND_URL:
                                        snd_url[snd_url.length] = tmpStr;
                                        break;
                                    case CFG_LIGHT_MODE:
                                        light_mode_default = !((int(tmpStr) == 0));
                                        break;
                                    case CFG_SERVER:
                                        server = tmpStr;
                                        break;
                                    case CFG_LANG_URL:
                                        lang_url = tmpStr;
                                        break;
                                    case CFG_NO_CROSSDOMAIN:
                                        no_crossdomain = !((int(tmpStr) == 0));
                                        break;
                                    case CFG_FORUM_URL:
                                        forum_url = tmpStr;
                                        break;
                                    case CFG_SHOP_URL:
                                        shop_url = tmpStr;
                                        break;
                                    case CFG_IMPRINT_URL:
                                        imprint_url = tmpStr;
                                        break;
                                    case CFG_LEGAL_URL:
                                        legal_url = tmpStr;
                                        break;
                                    case CFG_DATAPROT_URL:
                                        dataprot_url = tmpStr;
                                        break;
                                    case CFG_INSTR_URL:
                                        instr_url = tmpStr;
                                        break;
                                    case CFG_BUFFEDMODE:
                                        buffedMode = !((tmpStr == ""));
                                        buffedLinkText = tmpStr;
                                        break;
                                    case CFG_PAYMETHODS:
                                        PayMethods = tmpStr.split("/");
                                        j = 0;
                                        while (j < PayMethods.length) {
                                            PayMethods[j] = int(PayMethods[j]);
                                            j++;
                                        };
                                        break;
                                    case CFG_SERVER_ID:
                                        ServerID = int(tmpStr);
                                        break;
                                    case CFG_MP_PROJECT:
                                        MPProject = tmpStr;
                                        break;
                                    case CFG_BUFFED_URL:
                                        buffedLinkURL = tmpStr;
                                        break;
                                    case CFG_RESPONSE_TIMEOUT:
                                        response_timeout = int(tmpStr);
                                        break;
                                    case CFG_IMAGE_TIMEOUT:
                                        image_timeout = int(tmpStr);
                                        break;
                                    case CFG_SPONSOR_IMG:
                                        param_sponsor = tmpStr;
                                        break;
                                    case CFG_REROLL_IMG:
                                        param_reroll_img = int(tmpStr);
                                        break;
                                    case CFG_RECONNECT:
                                        param_reconnect = int(tmpStr);
                                        break;
                                    case CFG_PHP_TUNNEL_URL:
                                        param_php_tunnel_url = tmpStr;
                                        break;
                                    case CFG_TRACKING_PIXEL:
                                        trackPixels.push(tmpStr.split(";"));
                                        trc(("Tracking pixel definition old " + tmpStr));
                                        break;
                                    case CFG_POLL_TUNNEL_URL:
                                        param_poll_tunnel_url = tmpStr;
                                        break;
                                    case CFG_SUPPORT_EMAIL:
                                        param_support_email = tmpStr;
                                        break;
                                    case CFG_GAMESTAFF_EMAIL:
                                        param_gamestaff_email = tmpStr;
                                        break;
                                    case CFG_PAPAYA_PATH:
                                        param_papaya_path = tmpStr;
                                        break;
                                    case CFG_PAPAYA_CFG_FILE:
                                        param_papaya_cfg_file = tmpStr;
                                        break;
                                    case CFG_RESEND_COUNT:
                                        param_fail_tries = int(tmpStr);
                                        break;
                                    case CFG_IDLE_POLLING:
                                        param_idle_polling = int(tmpStr);
                                        break;
                                    case CFG_ALLOW_SKIP_QUEST:
                                        param_allow_skip_quest = (int(tmpStr) == 1);
                                        param_happy_hour = (int(tmpStr) == 2);
                                        break;
                                    case CFG_CENSORED:
                                        param_censored = !((int(tmpStr) == 0));
                                        break;
                                    case CFG_INTERNAL_PIXEL:
                                        param_internal_pixel = !((int(tmpStr) == 0));
                                        break;
                                    case CFG_RELOAD_PIXEL:
                                        param_reload_pixel = !((int(tmpStr) == 0));
                                        break;
                                    case CFG_SERVER_VERSION:
                                        param_server_version_cfg = tmpStr;
                                        break;
                                    case CFG_DONT_SAVE_CID:
                                        param_no_cid_save = !((int(tmpStr) == 0));
                                        break;
                                    case CFG_FLAGS:
                                        param_languages = tmpStr.split("/");
                                        break;
                                    case CFG_FLAG_NAMES:
                                        param_language_names = tmpStr.split("/");
                                        break;
                                    case CFG_LOWRES_URL:
                                        break;
                                    case CFG_SPONSOR_URL:
                                        param_sponsor_url = tmpStr;
                                        break;
                                    case CFG_BULLSHIT_BOX:
                                        param_bullshit_text = tmpStr;
                                        break;
                                    case CFG_BULLSHIT_CID:
                                        param_bullshit_cid = tmpStr;
                                        break;
                                    case CFG_SOCIAL_BUTTONS:
                                        param_social_buttons = tmpStr.split("/");
                                        break;
                                    case CFG_PIXEL_CALL:
                                        defined_pixel_calls[tmpStr.split(":")[0]] = tmpStr.split(":")[1];
                                        break;
                                    case CFG_BACKGROUND_ID:
                                        login_background_id = tmpStr;
                                        break;
                                    case CFG_WORLDS:
                                        worlds = new Array();
                                        tmpWorlds = tmpStr.split(";");
                                        j = 0;
                                        while (j < tmpWorlds.length) {
                                            tmpWorld = new Array();
                                            tmpWorld[0] = tmpWorlds[j].split(":")[0];
                                            tmpWorld[1] = tmpWorlds[j].split(":")[1].split("/");
                                            worlds.push(tmpWorld);
                                            j++;
                                        };
                                        break;
                                    case CFG_TV_FUNCTION:
                                        tvFunctionName = tmpStr;
                                        break;
                                    case CFG_TV_POLL_INTERVAL_NORMAL:
                                        tvPollNormal = (int(tmpStr) * 1000);
                                        break;
                                    case CFG_TV_POLL_INTERVAL_LONG:
                                        tvPollLong = (int(tmpStr) * 1000);
                                        break;
                                };
                            };
                            tmpStr = "";
                            break;
                        case 20:
                        case 9:
                            if (!inValue){
                                lastIndex = int(tmpStr);
                                tmpStr = "";
                                inValue = true;
                            } else {
                                tmpStr = (tmpStr + strData.charAt(i));
                            };
                            break;
                        case 136:
                            tmpStr = (tmpStr + (String.fromCharCode(13) + String.fromCharCode(10)));
                        default:
                            tmpStr = (tmpStr + strData.charAt(i));
                    };
                    i++;
                };
                pendingConfigurationFiles--;
                if (pendingConfigurationFiles == 1){
                    loader2.load(new URLRequest("config_this.txt"));
                } else {
                    pendingConfigurationFile = false;
                    so = SharedObject.getLocal(("SFGame/" + server.split(".").join("/")), "/");
                    if (so.data.lang_code){
                        lang_code = so.data.lang_code;
                    };
                    lightMode = light_mode_default;
                    chatSound = false;
                    compareItems = false;
                    disableTV = false;
                    if (so.data.lightMode === false){
                        lightMode = false;
                    };
                    if (so.data.lightMode === true){
                        lightMode = true;
                    };
                    if (so.data.chatSound === false){
                        chatSound = false;
                    };
                    if (so.data.chatSound === true){
                        chatSound = true;
                    };
                    if (so.data.compareItems === false){
                        compareItems = false;
                    };
                    if (so.data.compareItems === true){
                        compareItems = true;
                    };
                    if (so.data.disableTV === false){
                        disableTV = false;
                    };
                    if (so.data.disableTV === true){
                        disableTV = true;
                    };
                    if (paramObj["lang"] != undefined){
                        lang_code = paramObj["lang"];
                    };
                    if (paramObj["id"] != undefined){
                        param_id = String(paramObj["id"]);
                    };
                    if (paramObj["rec"] != undefined){
                        param_rec = String(paramObj["rec"]);
                        if (so.data.hadAccount){
                            param_rec = "";
                        };
                    };
                    if (paramObj["viewplayer"] != undefined){
                        view_player = String(paramObj["viewplayer"]);
                    };
                    if (paramObj["adminlogin"] != undefined){
                        admin_login = String(paramObj["adminlogin"]);
                    };
                    if (paramObj["mp_api_user_id"] != undefined){
                        mp_api_user_id = String(paramObj["mp_api_user_id"]);
                    };
                    if (paramObj["mp_api_user_token"] != undefined){
                        mp_api_user_token = String(paramObj["mp_api_user_token"]);
                    };
                    if (((!((paramObj["mp_api_user_id"] == undefined))) && (!((paramObj["mp_api_user_token"] == undefined))))){
                        ssoMode = true;
                    };
                    if (paramObj["cid"] != undefined){
                        param_cid = String(paramObj["cid"]);
                        param_cid_original = true;
                        so.data.cid = param_cid;
                        so.flush();
                    } else {
                        if (paramObj["CID"] != undefined){
                            param_cid = String(paramObj["CID"]);
                            param_cid_original = true;
                            so.data.cid = param_cid;
                            so.flush();
                        } else {
                            if (paramObj["Cid"] != undefined){
                                param_cid = String(paramObj["Cid"]);
                                param_cid_original = true;
                                so.data.cid = param_cid;
                                so.flush();
                            } else {
                                if (so.data.cid){
                                    if ((((so.data.cid.indexOf("_") == -1)) && ((so.data.cid.length == 15)))){
                                        param_cid = (so.data.cid + "_r");
                                    } else {
                                        if (!param_no_cid_save){
                                            param_cid = so.data.cid;
                                        };
                                    };
                                };
                            };
                        };
                    };
                    hadAccount = so.data.hadAccount;
                    if (paramObj["adv"] != undefined){
                        param_adv = String(paramObj["adv"]);
                        so.data.adv = param_adv;
                        so.data.advpar = paramObj;
                        so.flush();
                    } else {
                        if (paramObj["cid"] != undefined){
                            so.data.advpar = paramObj;
                            so.flush();
                        } else {
                            if (so.data.adv){
                                param_adv = so.data.adv;
                            };
                        };
                    };
                    if (paramObj["valid"] != undefined){
                        param_valid = String(paramObj["valid"]);
                    };
                    if (paramObj["val"] != undefined){
                        param_valid = String(paramObj["val"]);
                    };
                    if (paramObj["hall"] != undefined){
                        param_hall = String(paramObj["hall"]);
                    };
                    if (paramObj["imgsvr"] != undefined){
                        param_imgsvr = int(paramObj["imgsvr"]);
                    };
                    if (paramObj["port"] != undefined){
                        param_forceport = int(paramObj["port"]);
                    };
                    forceReroll = (param_reroll_img > int(so.data.force_reroll));
                    if (forceReroll){
                        so.data.force_reroll = param_reroll_img;
                        so.flush();
                    };
                    if (img_url.length == 0){
                        img_url[0] = "";
                    };
                    if (snd_url.length == 0){
                        snd_url[0] = "";
                    };
                    if (so.data.img_url_index){
                        if (param_imgsvr > 0){
                            img_url_index = (param_imgsvr - 1);
                        } else {
                            if ((((so.data.img_url_index <= img_url.length)) && (!(forceReroll)))){
                                img_url_index = (so.data.img_url_index - 1);
                            } else {
                                img_url_index = int((Math.random() * img_url.length));
                            };
                        };
                    } else {
                        img_url_index = int((Math.random() * img_url.length));
                    };
                    if (so.data.snd_url_index){
                        if (param_imgsvr > 0){
                            snd_url_index = (param_imgsvr - 1);
                        } else {
                            if ((((so.data.snd_url_index <= snd_url.length)) && (!(forceReroll)))){
                                snd_url_index = (so.data.snd_url_index - 1);
                            } else {
                                snd_url_index = int((Math.random() * snd_url.length));
                            };
                        };
                    } else {
                        snd_url_index = int((Math.random() * snd_url.length));
                    };
                    if (img_url.length == snd_url.length){
                        snd_url_index = img_url_index;
                    };
                    so.data.img_url_index = (img_url_index + 1);
                    so.data.snd_url_index = (snd_url_index + 1);
                    so.flush();
                    if (lightMode){
                        if (param_lowres_url != ""){
                            img_url[img_url_index] = param_lowres_url;
                        };
                        if (param_lowres_url != ""){
                            snd_url[snd_url_index] = param_lowres_url;
                        };
                    };
                };
                LoaderComplete(evt);
            };
            loader = new URLLoader();
            loader2 = new URLLoader();
            var _local2 = loader;
            with (_local2) {
                dataFormat = URLLoaderDataFormat.TEXT;
                addEventListener(Event.COMPLETE, ConfigurationFileLoaded);
                load(new URLRequest("client_cfg.php"));
            };
            _local2 = loader2;
            with (_local2) {
                dataFormat = URLLoaderDataFormat.TEXT;
                addEventListener(Event.COMPLETE, ConfigurationFileLoaded);
            };
            this.pendingLoaders = (this.pendingLoaders + 2);
            pendingConfigurationFiles = 1;
            this.pendingConfigurationFile = true;
        }
        public function DefineBunch(bunchID:int, ... _args):void{
            var i:int;
            this.actor[bunchID] = new Array();
            i = 0;
            while (i < _args.length) {
                this.actor[bunchID][i] = _args[i];
                i++;
            };
        }
        public function AddBunch(bunchID:int, ... _args):void{
            var i:int;
            i = 0;
            while (i < _args.length) {
                this.actor[bunchID][this.actor[bunchID].length] = _args[i];
                i++;
            };
        }
        public function SetVolume(vol:Number):void{
            var vol:* = vol;
            var _local3 = this.stObject;
            with (_local3) {
                stObject.volume = vol;
            };
        }
        public function DefineSnd(actorID:int, url:String, PreLoad:Boolean=false){
            var full_url:String;
            if (url.toLowerCase().slice(0, 4) == "http:"){
                full_url = url;
            } else {
                full_url = (this.snd_url[this.snd_url_index] + url);
            };
            this.actor[actorID] = new Sound();
            this.actorSoundLoader[actorID] = new SoundLoaderContext();
            this.actorURL[actorID] = full_url;
            this.actorLoaded[actorID] = 0;
            if (PreLoad){
                this.Load(actorID);
            };
        }
        public function DefineBtn(actorID:int, caption:String, handler:Function, btnClass:Class, pos_x:int=0, pos_y:int=0, scale_x:Number=1, scale_y:Number=1, vis:Boolean=true):void{
            var i:* = 0;
            var actorID:* = actorID;
            var caption:* = caption;
            var handler:* = handler;
            var btnClass:* = btnClass;
            var pos_x:int = pos_x;
            var pos_y:int = pos_y;
            var scale_x:int = scale_x;
            var scale_y:int = scale_y;
            var vis:Boolean = vis;
            var playClickSound:* = function (evt:Event){
                Play(SND_CLICK);
            };
            i = actorID;
            this.actor[i] = new (btnClass)();
            var _local11 = this.actor[i];
            with (_local11) {
                addEventListener(MouseEvent.MOUSE_DOWN, playClickSound);
                if (btnClass == btnClassPlus){
                    addEventListener(MouseEvent.MOUSE_DOWN, handler);
                } else {
                    addEventListener(MouseEvent.CLICK, handler);
                };
                x = pos_x;
                y = pos_y;
                scaleX = scale_x;
                scaleY = scale_y;
                visible = Boolean(vis);
                tabEnabled = false;
                allowSmoothing = true;
                forceSmoothing = true;
                smoothing = true;
            };
            if (caption != ""){
                this.SetBtnText(actorID, caption);
            };
        }
        public function SetBtnText(actorID:int, caption:String){
            var i:* = 0;
            var offsy:* = 0;
            var actorID:* = actorID;
            var caption:* = caption;
            var CenterTextField:* = function (obj:Object, aoffsx:int=0, aoffsy:int=0):void{
                var btnText:* = null;
                var char:* = null;
                var i:* = 0;
                var imgActor:* = 0;
                var tmpImage:* = null;
                var obj:* = obj;
                var aoffsx:int = aoffsx;
                var aoffsy:int = aoffsy;
                var DoAddBtnImage:* = function (){
                    var _local2 = obj.getChildAt(1);
                    with (_local2) {
                        tmpImage = new Bitmap(actor[imgActor].content.bitmapData.clone());
                        tmpImage.x = ((getCharBoundaries(imgIndex).x + x) + 4);
                        tmpImage.y = (((getCharBoundaries(imgIndex).y + y) - 3) + (((textDir == "right")) ? 7 : 0));
                        obj.addChild(tmpImage);
                    };
                };
                btnText = "";
                var imgIndex:* = -1;
                while (obj.numChildren > 2) {
                    Sprite(obj).removeChildAt(2);
                };
                i = 0;
                while (i < caption.length) {
                    char = caption.charAt(i);
                    if (char == "~"){
                        imgIndex = i;
                        i = (i + 1);
                        if (caption.charAt(i) == "P"){
                            btnText = (btnText + "     ");
                            Load(IMG_IF_PILZE);
                            imgActor = IMG_IF_PILZE;
                        } else {
                            if (caption.charAt(i) == "G"){
                                btnText = (btnText + "     ");
                                Load(IMG_IF_GOLD);
                                imgActor = IMG_IF_GOLD;
                            } else {
                                if (caption.charAt(i) == "S"){
                                    btnText = (btnText + "     ");
                                    Load(IMG_IF_SILBER);
                                    imgActor = IMG_IF_SILBER;
                                };
                            };
                        };
                    } else {
                        btnText = (btnText + char);
                    };
                    i = (i + 1);
                };
                var _local5 = obj.getChildAt(1);
                with (_local5) {
                    autoSize = TextFieldAutoSize.LEFT;
                    embedFonts = fontEmbedded;
                    defaultTextFormat = new TextFormat(gameFont, (((specialFontSize == 0)) ? defaultTextFormat.size : specialFontSize), defaultTextFormat.color);
                    text = btnText;
                    x = int(((((obj.getChildAt(0).width / 2) - (textWidth / 2)) + offs) + aoffsx));
                    y = int(((((obj.getChildAt(0).height / 2) - (textHeight / 2)) + offsy) + aoffsy));
                    if (imgIndex != -1){
                        WhenLoaded(DoAddBtnImage);
                    };
                };
            };
            i = actorID;
            var offs:* = 0;
            offsy = 0;
            var specialFontSize:* = 0;
            if ((this.actor[i] is btnClassBasic)){
                offs = -2;
            };
            if ((this.actor[i] is btnClassBasic)){
                offsy = 1;
            };
            if ((this.actor[i] is btnClassInterface)){
                offs = 5;
            };
            if ((this.actor[i] is btnClassInterface)){
                offsy = 0;
            };
            if ((this.actor[i] is btnClassLogin)){
                offs = -2;
            };
            if ((this.actor[i] is btnClassLogin)){
                offsy = 1;
            };
            if ((this.actor[i] is btnClassBack)){
                offsy = 50;
            };
            if (this.gameFont == "Verdana"){
                offsy = (offsy - 6);
            };
            if (this.gameFont == "Arial Narrow"){
                specialFontSize = 16;
                offsy = (offsy - 4);
            };
            CenterTextField(this.actor[i].upState);
            CenterTextField(this.actor[i].downState, 1, 2);
            CenterTextField(this.actor[i].overState);
            CenterTextField(this.actor[i].hitTestState);
        }
        public function DefineLbl(actorID:int, caption:String, pos_x:int=0, pos_y:int=0, fmt:TextFormat=undefined, vis:Boolean=true):void{
            var i:* = 0;
            var fmtUL:* = null;
            var actorID:* = actorID;
            var caption:* = caption;
            var pos_x:int = pos_x;
            var pos_y:int = pos_y;
            var fmt:* = fmt;
            var vis:Boolean = vis;
            i = actorID;
            this.actor[i] = new TextField();
            if (!fmt){
                fmt = this.FontFormat_Default;
            };
            var _local8 = this.actor[i];
            with (_local8) {
                defaultTextFormat = fmt;
                autoSize = TextFieldAutoSize.LEFT;
                background = false;
                selectable = false;
                embedFonts = fontEmbedded;
                antiAliasType = AntiAliasType.ADVANCED;
                if (caption){
                    htmlText = caption;
                };
                x = pos_x;
                y = pos_y;
                visible = Boolean(vis);
            };
        }
        public function DefineImg(actorID:int, url:String, PreLoad:Boolean=true, pos_x:int=0, pos_y:int=0, scale_x:Number=1, scale_y:Number=1, vis:Boolean=true):void{
            var i:* = 0;
            var full_url:* = null;
            var LoaderCompleteLocal:* = null;
            var actorID:* = actorID;
            var url:* = url;
            var PreLoad:Boolean = PreLoad;
            var pos_x:int = pos_x;
            var pos_y:int = pos_y;
            var scale_x:int = scale_x;
            var scale_y:int = scale_y;
            var vis:Boolean = vis;
            LoaderCompleteLocal = function (evt:Event){
                actor[i].cacheAsBitmap = true;
            };
            i = actorID;
            if (url.toLowerCase().slice(0, 4) == "http:"){
                full_url = url;
            } else {
                full_url = (this.img_url[this.img_url_index] + url);
            };
            this.actor[i] = new Loader();
            this.actor[i].contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, this.LoaderError);
            this.actor[i].contentLoaderInfo.addEventListener(Event.COMPLETE, this.LoaderComplete);
            this.actor[i].contentLoaderInfo.addEventListener(Event.COMPLETE, LoaderCompleteLocal);
            this.actorLoaded[i] = 0;
            this.actorURL[i] = full_url;
            var _local10 = this.actor[i];
            with (_local10) {
                tabEnabled = false;
                x = pos_x;
                y = pos_y;
                forceSmoothing = true;
                allowSmoothing = true;
                smoothing = true;
                scaleX = scale_x;
                scaleY = scale_y;
                visible = Boolean(vis);
            };
            if (PreLoad){
                this.Load(i);
            };
        }
        public function DefineClickArea(actorID:int, imgActorID:int, fn:Function, pos_x:int, pos_y:int, size_x:int, size_y:int, ovlActorID:int=0, hoverFn:Function=undefined, outFn:Function=undefined, stayPut:Boolean=false):void{
            var actorID:* = actorID;
            var imgActorID:* = imgActorID;
            var fn:* = fn;
            var pos_x:* = pos_x;
            var pos_y:* = pos_y;
            var size_x:* = size_x;
            var size_y:* = size_y;
            var ovlActorID:int = ovlActorID;
            var hoverFn:* = hoverFn;
            var outFn:* = outFn;
            var stayPut:Boolean = stayPut;
            var ClickAreaHover:* = function (evt:MouseEvent):void{
                if (imgActorID != C_EMPTY){
                    Add(imgActorID);
                };
                if (ovlActorID != C_EMPTY){
                    VisibleToFront(ovlActorID);
                };
                if (!stayPut){
                    Add(actorID);
                };
                if ((hoverFn is Function)){
                    hoverFn();
                };
            };
            var ClickAreaOut:* = function (evt:MouseEvent):void{
                Remove(imgActorID);
                if ((outFn is Function)){
                    outFn();
                };
            };
            this.actor[actorID] = new MovieClip();
            var _local13 = this.actor[actorID];
            with (_local13) {
                tabEnabled = false;
                x = pos_x;
                y = pos_y;
                graphics.beginFill(0xFF0000);
                graphics.drawRect(0, 0, size_x, size_y);
                alpha = ((C_SHOW_CA) ? 0.3 : 0);
                mouseChildren = false;
                mouseEnabled = true;
                if ((fn is Function)){
                    addEventListener(MouseEvent.MOUSE_OVER, ClickAreaHover);
                    addEventListener(MouseEvent.MOUSE_OUT, ClickAreaOut);
                    addEventListener(MouseEvent.CLICK, fn);
                    useHandCursor = true;
                    buttonMode = true;
                };
            };
        }
        public function DefineFromClass(actorID:int, imgClass:Class, pos_x:int=0, pos_y:int=0, txtManip:int=0, txtType:String=""):void{
            var i:* = 0;
            var actorID:* = actorID;
            var imgClass:* = imgClass;
            var pos_x:int = pos_x;
            var pos_y:int = pos_y;
            var txtManip:int = txtManip;
            var txtType:String = txtType;
            var ManipTextField:* = function (field){
                var field:* = field;
                var _local3 = field;
                with (_local3) {
                    embedFonts = fontEmbedded;
                    defaultTextFormat = new TextFormat(gameFont, (defaultTextFormat.size + sizeMod), defaultTextFormat.color);
                };
            };
            i = actorID;
            this.actor[i] = new (imgClass)();
            this.actorLoaded[i] = 2;
            var _local8 = this.actor[i];
            with (_local8) {
                x = pos_x;
                y = pos_y;
                allowSmoothing = true;
                forceSmoothing = true;
                smoothing = true;
                visible = true;
            };
            if (txtManip == 1){
                ManipTextField(this.actor[i].getChildAt(0));
            } else {
                if (txtManip == 2){
                    ManipTextField(this.actor[i].getChildAt(1));
                };
            };
        }
        public function DefineCnt(actorID:int, pos_x:int=0, pos_y:int=0, vis:Boolean=true):void{
            var i:* = 0;
            var actorID:* = actorID;
            var pos_x:int = pos_x;
            var pos_y:int = pos_y;
            var vis:Boolean = vis;
            i = actorID;
            this.actor[i] = new MovieClip();
            var _local6 = this.actor[i];
            with (_local6) {
                tabEnabled = false;
                x = pos_x;
                y = pos_y;
                visible = Boolean(vis);
                forceSmoothing = true;
                allowSmoothing = true;
                smoothing = true;
            };
        }
        public function textLinkMakeClickable(obj:Sprite){
        }
        public function DefineSlider(actorID:int, Ticks:int, pos_x:int, pos_y:int, fn:Function){
            var i:* = 0;
            var oldSliderVal:* = 0;
            var actorID:* = actorID;
            var Ticks:* = Ticks;
            var pos_x:* = pos_x;
            var pos_y:* = pos_y;
            var fn:* = fn;
            var SliderMove:* = function (evt:MouseEvent):void{
                var tmpX:int;
                var sliderVal:int;
                if (evt.buttonDown){
                    if ((((evt.localX > 35)) && ((evt.localX < (45 + 198))))){
                        tmpX = evt.localX;
                        sliderVal = (int(((((tmpX - 40) / 198) * (Ticks - 1)) + 0.5)) + 1);
                        tmpX = (int((((sliderVal - 1) / (Ticks - 1)) * 198)) + 40);
                        evt.target.getChildAt(1).x = (tmpX - 7);
                        if (oldSliderVal != sliderVal){
                            fn(sliderVal);
                        };
                        oldSliderVal = sliderVal;
                    };
                };
            };
            var ClickTick:* = function (evt:MouseEvent):void{
                var tmpX:int;
                var sliderVal:int;
                tmpX = (evt.stageX - actor[(actorID + 1)].x);
                sliderVal = (int(((((tmpX - 40) / 198) * (Ticks - 1)) + 0.5)) + 1);
                tmpX = (int((((sliderVal - 1) / (Ticks - 1)) * 198)) + 40);
                actor[(actorID + 1)].getChildAt(1).x = (tmpX - 7);
                if (oldSliderVal != sliderVal){
                    fn(sliderVal);
                };
                oldSliderVal = sliderVal;
            };
            this.actorBitmap[actorID] = Ticks;
            this.actorBitmap[(actorID + 1)] = [fn];
            this.DefineFromClass((actorID + 1), DragonSlider, pos_x, pos_y);
            this.DefineBunch(actorID, (actorID + 1));
            var _local7 = this.actor[(actorID + 1)];
            with (_local7) {
                addEventListener(MouseEvent.MOUSE_DOWN, SliderMove);
                addEventListener(MouseEvent.MOUSE_MOVE, SliderMove);
                buttonMode = true;
                useHandCursor = true;
            };
            i = 1;
            while (i <= Ticks) {
                this.DefineFromClass(((actorID + 1) + i), SliderTick, (((pos_x + 40) + int((198 * ((i - 1) / (Ticks - 1))))) - 5), (pos_y - 10));
                _local7 = this.actor[((actorID + 1) + i)];
                with (_local7) {
                    addEventListener(MouseEvent.MOUSE_DOWN, ClickTick);
                    buttonMode = true;
                    useHandCursor = true;
                };
                this.AddBunch(actorID, ((actorID + 1) + i));
                i = (i + 1);
            };
            fn(this.GetSliderValue(actorID));
        }
        public function GetSliderValue(actorID:int):int{
            var tmpX:int;
            tmpX = (this.actor[(actorID + 1)].getChildAt(1).x + 5);
            return ((int(((((tmpX - 40) / 198) * (this.actorBitmap[actorID] - 1)) + 0.5)) + 1));
        }
        public function SetSliderValue(actorID:int, value:int):void{
            var tmpX:int;
            var oldVal:int;
            oldVal = this.GetSliderValue(actorID);
            tmpX = (int((((value - 1) / (this.actorBitmap[actorID] - 1)) * 198)) + 40);
            this.actor[(actorID + 1)].getChildAt(1).x = (tmpX - 7);
            if (oldVal != value){
                var _local5 = this.actorBitmap[(actorID + 1)];
                _local5[0](value);
            };
        }
        public function MakePersistent(... _args):void{
            var i:int;
            var iBunch:int;
            i = 0;
            while (i < _args.length) {
                if ((this.actor[_args[i]] is Array)){
                    iBunch = 0;
                    while (iBunch < this.actor[_args[i]].length) {
                        this.MakePersistent(this.actor[_args[i]][iBunch]);
                        iBunch++;
                    };
                    return;
                };
                this.actorPersistent[_args[i]] = true;
                i++;
            };
        }
        public function MakeTemporary(... _args):void{
            var i:int;
            var iBunch:int;
            i = 0;
            while (i < _args.length) {
                if ((this.actor[_args[i]] is Array)){
                    iBunch = 0;
                    while (iBunch < this.actor[_args[i]].length) {
                        this.MakeTemporary(this.actor[_args[i]][iBunch]);
                        iBunch++;
                    };
                    return;
                };
                this.actorPersistent[_args[i]] = false;
                i++;
            };
        }
        public function EnableDragDrop(actorID:int, handler:Function, ... _args):void{
            var old_x:* = 0;
            var old_y:* = 0;
            var i:* = 0;
            var iBunch:* = 0;
            var MouseBtnDown:* = null;
            var dragResetTimer:* = null;
            var dragReset:* = null;
            var MouseBtnUp:* = null;
            var actorID:* = actorID;
            var handler:* = handler;
            var Targets:* = _args;
            MouseBtnDown = function (evt:MouseEvent):void{
                var topPosition:int;
                if (((dragDropProhibit) || (dragNotYet))){
                    return;
                };
                topPosition = (evt.target.parent.numChildren - 1);
                evt.target.parent.setChildIndex(evt.target, topPosition);
                evt.target.startDrag();
                dragDropActive = true;
            };
            dragReset = function (evt:Event){
                dragNotYet = false;
                dragResetTimer.stop();
            };
            MouseBtnUp = function (evt:MouseEvent):void{
                var dropped:Boolean;
                var droppedOn:int;
                var iBunch:int;
                if (!dragDropActive){
                    return;
                };
                dropped = false;
                dragDropActive = false;
                dragNotYet = true;
                dragResetTimer.start();
                evt.target.stopDrag();
                if (evt.target.dropTarget != null){
                    i = 0;
                    while (i < Targets.length) {
                        if ((actor[Targets[i]] is Array)){
                            iBunch = 0;
                            while (iBunch < actor[Targets[i]].length) {
                                if (actor[actor[Targets[i]][iBunch]] == evt.target.dropTarget.parent){
                                    dropped = true;
                                    droppedOn = actor[Targets[i]][iBunch];
                                    break;
                                };
                                iBunch++;
                            };
                        } else {
                            if (actor[Targets[i]] == evt.target.dropTarget.parent){
                                dropped = true;
                                droppedOn = Targets[i];
                                break;
                            };
                        };
                        i++;
                    };
                    if (Targets.length == 0){
                        i = 0;
                        while (i < actor.length) {
                            if ((actor[i] is DisplayObject)){
                                if ((((actor[i] == evt.target.dropTarget.parent)) || ((actor[i] == evt.target.dropTarget)))){
                                    dropped = true;
                                    droppedOn = i;
                                    break;
                                };
                            };
                            i++;
                        };
                    };
                    if (dropped){
                        if (!handler(actorID, droppedOn)){
                            evt.target.x = old_x;
                            evt.target.y = old_y;
                        };
                    } else {
                        evt.target.x = old_x;
                        evt.target.y = old_y;
                    };
                } else {
                    evt.target.x = old_x;
                    evt.target.y = old_y;
                };
            };
            old_x = this.actor[actorID].x;
            old_y = this.actor[actorID].y;
            if ((this.actor[actorID] is Array)){
                iBunch = 0;
                while (iBunch < this.actor[actorID].length) {
                    if ((((this.actor[this.actor[actorID][iBunch]] is MovieClip)) || ((this.actor[this.actor[actorID][iBunch]] is Sprite)))){
                        this.actor[this.actor[actorID][iBunch]].addEventListener(MouseEvent.MOUSE_DOWN, MouseBtnDown);
                        this.actor[this.actor[actorID][iBunch]].addEventListener(MouseEvent.MOUSE_UP, MouseBtnUp);
                    } else {
                        this.trc(("Fehler: Drag & Drop nicht unterstützt für Actor " + this.actor[actorID][iBunch]));
                    };
                    iBunch = (iBunch + 1);
                };
                return;
            };
            if ((((this.actor[actorID] is MovieClip)) || ((this.actor[actorID] is Sprite)))){
                this.actor[actorID].addEventListener(MouseEvent.MOUSE_DOWN, MouseBtnDown);
                this.actor[actorID].addEventListener(MouseEvent.MOUSE_UP, MouseBtnUp);
            } else {
                this.trc(("Fehler: Drag & Drop nicht unterstützt für Actor " + actorID));
            };
            dragResetTimer = new Timer(500);
            dragResetTimer.addEventListener(TimerEvent.TIMER, dragReset);
        }
        public function Load(... _args):void{
            var i:* = 0;
            var req:* = null;
            var iBunch:* = 0;
            var actorIDs:* = _args;
            var _Load:* = function (actorID:int):void{
                if (actorLoaded[actorID] == 0){
                    if ((actor[actorID] is Sound)){
                        Security.allowDomain(actorURL[actorID]);
                        req = new URLRequest(actorURL[actorID]);
                        actor[actorID].load(req, actorSoundLoader[actorID]);
                        actorLoaded[actorID] = 2;
                    } else {
                        if (actorLoaded[actorID] != 0){
                        };
                        actor[actorID].contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, LoaderError);
                        actor[actorID].contentLoaderInfo.addEventListener(Event.COMPLETE, LoaderComplete);
                        Security.allowDomain(actorURL[actorID]);
                        req = new URLRequest(actorURL[actorID]);
                        if ((((actorURL[actorID].substr(-4) == ".png")) && (!(no_crossdomain)))){
                            actor[actorID].load(req, new LoaderContext(true, new ApplicationDomain(null), SecurityDomain.currentDomain));
                        } else {
                            actor[actorID].load(req);
                        };
                        actorLoaded[actorID] = 1;
                    };
                };
            };
            i = 0;
            while (i < actorIDs.length) {
                if ((this.actor[actorIDs[i]] is Array)){
                    iBunch = 0;
                    while (iBunch < this.actor[actorIDs[i]].length) {
                        this.Load(this.actor[actorIDs[i]][iBunch]);
                        iBunch = (iBunch + 1);
                    };
                    return;
                };
                _Load(actorIDs[i]);
                i = (i + 1);
            };
        }
        public function WhenLoaded(fn:Function=undefined):void{
            var i:int;
            var pending:Boolean;
            var tmpFn:Function;
            var WhenLoadedFnTemp:Array;
            pending = false;
            if ((fn is Function)){
                this.WhenLoadedFn[this.WhenLoadedFn.length] = fn;
                this.WhenLoadedActive = true;
                this.WhenLoadedTimeout.stop();
                this.WhenLoadedTimeout.start();
            };
            i = 0;
            while (i < this.actor.length) {
                if (this.actorLoaded[i] == 1){
                    pending = true;
                    break;
                };
                i++;
            };
            if (this.pendingLanguageFile){
                pending = true;
            };
            if (this.pendingDebugFile){
                pending = true;
            };
            if (this.pendingConfigurationFile){
                pending = true;
            };
            if (!pending){
                if (this.WhenLoadedActive){
                    this.WhenLoadedTimeout.stop();
                    this.WhenLoadedActive = false;
                    WhenLoadedFnTemp = this.WhenLoadedFn;
                    this.WhenLoadedFn = new Array();
                    i = 0;
                    while (i < WhenLoadedFnTemp.length) {
                        tmpFn = WhenLoadedFnTemp[i];
                        WhenLoadedFnTemp[i] = new Function();
                        tmpFn();
                        i++;
                    };
                };
            };
        }
        public function WhenLoadedTimeoutEvent(evt:TimerEvent){
            var i:int;
            var old_img_url_index:int;
            var old_snd_url_index:int;
            this.WhenLoadedTimeout.stop();
            i = 0;
            while (i < this.actor.length) {
                if ((this.actor[i] is Loader)){
                    if (this.actorLoaded[i] == 1){
                        this.trc("Fehler: Timeout beim Laden. Ladezustand wird zurückgesetzt für Aktor", i, this.actorURL[i]);
                        this.actorLoaded[i] = 0;
                    };
                };
                i++;
            };
            this.WhenLoaded();
            this.toErrorCount++;
            if (this.toErrorCount == 10){
                old_img_url_index = this.img_url_index;
                if (this.img_url.length > 1){
                    do  {
                        this.img_url_index = int((Math.random() * this.img_url.length));
                    } while (this.img_url_index == old_img_url_index);
                };
                old_snd_url_index = this.snd_url_index;
                if (this.snd_url.length > 1){
                    do  {
                        this.snd_url_index = int((Math.random() * this.snd_url.length));
                    } while (this.snd_url_index == old_snd_url_index);
                };
                if (this.img_url.length == this.snd_url.length){
                    this.snd_url_index = this.img_url_index;
                };
                this.so.data.img_url_index = (this.img_url_index + 1);
                this.so.data.snd_url_index = (this.snd_url_index + 1);
                this.so.flush();
            };
        }
        public function LoaderComplete(evt:Event=undefined):void{
            var evt:* = evt;
            if ((evt.target is LoaderInfo)){
                this.actorLoaded[this.GetActorID(evt.target.loader)] = 2;
                Security.allowDomain(evt.target.loaderURL);
                var _local3 = this.actor[this.GetActorID(evt.target.loader)].content;
                with (_local3) {
                    forceSmoothing = true;
                    allowSmoothing = true;
                    smoothing = true;
                };
            };
            this.WhenLoaded();
        }
        public function LoaderError(evt:ErrorEvent=undefined):void{
            var i:int;
            var old_img_url_index:int;
            var old_snd_url_index:int;
            if ((evt.target is LoaderInfo)){
                i = 0;
                while (i < this.actor.length) {
                    if ((this.actor[i] is Loader)){
                        if (this.actorLoaded[i] == 1){
                            this.trc("Fehler: IO-Fehler beim Laden. Ladezustand wird zurückgesetzt für Aktor", i, this.actorURL[i]);
                            this.actorLoaded[i] = 0;
                        };
                    };
                    i++;
                };
            };
            this.WhenLoaded();
            this.ioErrorCount++;
            if (this.ioErrorCount == 10){
                old_img_url_index = this.img_url_index;
                if (this.img_url.length > 1){
                    do  {
                        this.img_url_index = int((Math.random() * this.img_url.length));
                    } while (this.img_url_index == old_img_url_index);
                };
                old_snd_url_index = this.snd_url_index;
                if (this.snd_url.length > 1){
                    do  {
                        this.snd_url_index = int((Math.random() * this.snd_url.length));
                    } while (this.snd_url_index == old_snd_url_index);
                };
                if (this.img_url.length == this.snd_url.length){
                    this.snd_url_index = this.img_url_index;
                };
                this.so.data.img_url_index = (this.img_url_index + 1);
                this.so.data.snd_url_index = (this.snd_url_index + 1);
                this.so.flush();
            };
        }
        public function SetCnt(cntID:int, ImgID:int=0, pos_x:int=0, pos_y:int=0, center:Boolean=false):void{
            var iBunch:* = 0;
            var CntImgLoaded:* = null;
            var cntID:* = cntID;
            var ImgID:int = ImgID;
            var pos_x:int = pos_x;
            var pos_y:int = pos_y;
            var center:Boolean = center;
            if (!(this.actor[ImgID] is Loader)){
                if (this.actorBitmap[cntID]){
                    this.actor[cntID].removeChild(this.actorBitmap[cntID]);
                    this.actorBitmap[cntID] = undefined;
                };
                return;
            };
            if ((this.actor[cntID] is Array)){
                iBunch = 0;
                while (iBunch < this.actor[cntID].length) {
                    this.SetCnt(this.actor[cntID][iBunch], ImgID);
                    iBunch = (iBunch + 1);
                };
                return;
            };
            if (this.actorBitmap[cntID]){
                this.actor[cntID].removeChild(this.actorBitmap[cntID]);
                this.actorBitmap[cntID] = undefined;
            };
            if (ImgID != 0){
                if (this.actorLoaded[ImgID] == 2){
                    if ((((((ImgID == this.ITM_EMPTY)) || ((ImgID == this.ITM_OFFS)))) && ((this.actor[cntID].width == 0)))){
                        var _local7 = this.actor[cntID];
                        with (_local7) {
                            graphics.beginFill(0, 0);
                            graphics.drawRect(0, 0, 90, 90);
                        };
                    };
                    if ((this.actor[ImgID].content is Bitmap)){
                        this.actorBitmap[cntID] = new Bitmap();
                        this.actorBitmap[cntID].bitmapData = this.actor[ImgID].content.bitmapData;
                        _local7 = this.actorBitmap[cntID];
                        with (_local7) {
                            allowSmoothing = true;
                            forceSmoothing = true;
                            smoothing = true;
                            x = (pos_x - ((center) ? (width / 2) : 0));
                            y = (pos_y - ((center) ? (height / 2) : 0));
                        };
                        this.actor[cntID].addChild(this.actorBitmap[cntID]);
                    } else {
                        this.actorBitmap[cntID] = new Bitmap();
                        this.actorBitmap[cntID].bitmapData = new BitmapData(this.actor[ImgID].width, this.actor[ImgID].height, true, 0);
                        this.actorBitmap[cntID].bitmapData.draw((this.actor[ImgID] as IBitmapDrawable));
                        _local7 = this.actorBitmap[cntID];
                        with (_local7) {
                            allowSmoothing = true;
                            forceSmoothing = true;
                            smoothing = true;
                            x = (pos_x - ((center) ? (width / 2) : 0));
                            y = (pos_y - ((center) ? (height / 2) : 0));
                        };
                        this.actor[cntID].addChild(this.actorBitmap[cntID]);
                    };
                } else {
                    CntImgLoaded = function (evt:Event):void{
                        actorLoaded[ImgID] = 2;
                        SetCnt(cntID, ImgID, pos_x, pos_y, center);
                    };
                    this.actor[ImgID].contentLoaderInfo.addEventListener(Event.COMPLETE, CntImgLoaded);
                    if (this.actorLoaded[ImgID] == 0){
                        this.Load(ImgID);
                    };
                };
            };
        }
        public function Play(actorID:int, endless:Boolean=false):void{
            var SoundLoaded:* = null;
            var actorID:* = actorID;
            var endless:Boolean = endless;
            if (this.actorLoaded[actorID] == 2){
                this.actor[actorID].play(0, ((endless) ? 30000 : 0), this.stObject);
            } else {
                SoundLoaded = function (evt:Event){
                    trc((("Sound " + actorID) + " geladen."));
                    actor[actorID].play(0, ((endless) ? 30000 : 0), stObject);
                };
                this.trc((("Warnung: Sound " + actorID) + " nicht geladen! Wird geladen..."));
                this.actor[actorID].addEventListener(Event.COMPLETE, SoundLoaded);
                this.Load(actorID);
            };
        }
        public function Add(actorID:int, pos_x:int=undefined, pos_y:int=undefined, scale_x:Number=undefined, scale_y:Number=undefined, vis=undefined, containerID:int=-1):void{
            var i:* = 0;
            var req:* = null;
            var iBunch:* = 0;
            var actorID:* = actorID;
            var pos_x:* = pos_x;
            var pos_y:* = pos_y;
            var scale_x:* = scale_x;
            var scale_y:* = scale_y;
            var vis:* = vis;
            var containerID:int = containerID;
            i = actorID;
            if ((this.actor[actorID] is Sound)){
                return;
            };
            if ((this.actor[actorID] is Array)){
                iBunch = 0;
                while (iBunch < this.actor[actorID].length) {
                    if (this.actor[actorID][iBunch] == actorID){
                        return;
                    };
                    this.Add(this.actor[actorID][iBunch], pos_x, pos_y, scale_x, scale_y, vis, containerID);
                    iBunch = (iBunch + 1);
                };
                return;
            };
            if ((this.actor[i] is Loader)){
                if (this.actorLoaded[i] == 0){
                    this.Load(i);
                };
            };
            var _local9 = this.actor[i];
            with (_local9) {
                if (pos_x){
                    x = pos_x;
                };
                if (pos_y){
                    y = pos_y;
                };
                if (scale_x){
                    scaleX = size_x;
                };
                if (scale_y){
                    scaleY = size_y;
                };
                if (vis !== undefined){
                    visible = Boolean(vis);
                };
            };
            if (containerID == -1){
                addChild(this.actor[i]);
            } else {
                this.actor[containerID].addChild(this.actor[i]);
            };
        }
        public function AddBMO(bunchID:int, offset:int){
            var i:int;
            i = 0;
            while (i < this.actor[bunchID].length) {
                if ((this.actor[this.actor[bunchID][i]] is Array)){
                    this.AddBMO(this.actor[bunchID][i], offset);
                } else {
                    this.Add((this.actor[bunchID][i] + offset));
                };
                i++;
            };
        }
        public function VisibleToFront(... _args):void{
            var i:* = 0;
            var iBunch:* = 0;
            var actorIDs:* = _args;
            i = 0;
            while (i < actorIDs.length) {
                if (this.actor[actorIDs[i]]){
                    if ((this.actor[actorIDs[i]] is Array)){
                        iBunch = 0;
                        while (iBunch < this.actor[actorIDs[i]].length) {
                            this.VisibleToFront(this.actor[actorIDs[i]][iBunch]);
                            iBunch = (iBunch + 1);
                        };
                        return;
                    };
                    var _local3 = this.actor[actorIDs[i]];
                    with (_local3) {
                        if (OnStage(actorIDs[i])){
                            Add(actorIDs[i]);
                        };
                    };
                };
                i = (i + 1);
            };
        }
        public function Move(actorID:int, pos_x:int, pos_y:int):void{
            var i:* = 0;
            var actorID:* = actorID;
            var pos_x:* = pos_x;
            var pos_y:* = pos_y;
            if ((this.actor[actorID] is Array)){
                i = 0;
                while (i < this.actor[actorID].length) {
                    this.Move(this.actor[actorID][i], pos_x, pos_y);
                    i = (i + 1);
                };
            } else {
                var _local5 = this.actor[actorID];
                with (_local5) {
                    x = pos_x;
                    y = pos_y;
                };
            };
        }
        public function AddSome(... _args):void{
            var i:int;
            var iBunch:int;
            i = 0;
            while (i < _args.length) {
                if (this.actor[_args[i]]){
                    if ((this.actor[_args[i]] is Array)){
                        iBunch = 0;
                        while (iBunch < this.actor[_args[i]].length) {
                            this.Add(this.actor[_args[i]][iBunch]);
                            iBunch++;
                        };
                        return;
                    };
                    this.Add(_args[i]);
                };
                i++;
            };
        }
        public function Remove(... _args):void{
            var i:* = 0;
            var iBunch:* = 0;
            var actorIDs:* = _args;
            i = 0;
            while (i < actorIDs.length) {
                if (this.actor[actorIDs[i]]){
                    if ((this.actor[actorIDs[i]] is Array)){
                        iBunch = 0;
                        while (iBunch < this.actor[actorIDs[i]].length) {
                            this.Remove(this.actor[actorIDs[i]][iBunch]);
                            iBunch = (iBunch + 1);
                        };
                        return;
                    };
                    if ((this.actor[actorIDs[i]] is Sound)){
                        return;
                    };
                    var _local3 = this.actor[actorIDs[i]];
                    with (_local3) {
                        if (parent){
                            parent.removeChild(actor[actorIDs[i]]);
                        };
                    };
                };
                i = (i + 1);
            };
        }
        public function RemoveAll(alsoPersistent:Boolean=false):void{
            var i:int;
            i = 0;
            while (i < this.actor.length) {
                if (this.actor[i]){
                    if (!(this.actor[i] is Array)){
                        if (((!(this.actorPersistent[i])) || (alsoPersistent))){
                            this.Remove(i);
                        };
                    };
                };
                i++;
            };
            ExternalInterface.call("hideSocial");
        }
        public function GetActorID(actorObj:Object, iStart=0, iEnde=-1):int{
            var i:int;
            var res:int;
            res = this.C_EMPTY;
            i = iStart;
            while (i <= ((iEnde)==-1) ? (this.actor.length - 1) : iEnde) {
                if (actorObj == this.actor[i]){
                    res = i;
                    break;
                };
                i++;
            };
            return (res);
        }
        public function GetActorName(actorID:int=0):String{
            var loader:* = null;
            var actorID:int = actorID;
            loader = new URLLoader();
            if (!(this.actorName is Array)){
                var ConstFileLoaded:* = function (evt:Event):void{
                    var strData:String;
                    var constName:String;
                    var i:int;
                    var c:int;
                    var tmpStr:String;
                    strData = loader.data;
                    constName = "";
                    var equals:Boolean;
                    tmpStr = "";
                    var lastIndex:int;
                    i = 0;
                    while (i < (strData.length - 1)) {
                        c = strData.charCodeAt(i);
                        switch (c){
                            case 10:
                            case 13:
                                if (constName != ""){
                                    actorName[int(tmpStr.substr(1))] = constName;
                                };
                                constName = "";
                                tmpStr = "";
                                break;
                            case 61:
                                if (tmpStr.substr(0, 14).toLowerCase() == "_global const "){
                                    constName = tmpStr.substr(14, (tmpStr.length - 15));
                                    tmpStr = "";
                                };
                                break;
                            default:
                                tmpStr = (tmpStr + strData.charAt(i));
                        };
                        i++;
                    };
                    pendingDebugFile = false;
                    LoaderComplete(evt);
                };
                this.actorName = new Array();
                var _local3 = loader;
                with (_local3) {
                    dataFormat = URLLoaderDataFormat.TEXT;
                    addEventListener(Event.COMPLETE, ConstFileLoaded);
                    load(new URLRequest("constants.as"));
                };
                this.pendingLoaders = (this.pendingLoaders + 1);
                this.pendingDebugFile = true;
            };
            return (this.actorName[actorID]);
        }
        public function OnStage(actorID):Boolean{
            if ((this.actor[actorID] is DisplayObject)){
                return (Boolean(getChildByName(this.actor[actorID].name)));
            };
            return (false);
        }
        public function Visible(actorID):Boolean{
            if ((this.actor[actorID] is DisplayObject)){
                return (((Boolean(getChildByName(this.actor[actorID].name))) && (this.actor[actorID].visible)));
            };
            return (false);
        }
        public function Show(... _args):void{
            var i:* = 0;
            var iBunch:* = 0;
            var actorIDs:* = _args;
            i = 0;
            while (i < actorIDs.length) {
                if (this.actor[actorIDs[i]]){
                    if ((this.actor[actorIDs[i]] is Array)){
                        iBunch = 0;
                        while (iBunch < this.actor[actorIDs[i]].length) {
                            this.Show(this.actor[actorIDs[i]][iBunch]);
                            iBunch = (iBunch + 1);
                        };
                        return;
                    };
                    var _local3 = this.actor[actorIDs[i]];
                    with (_local3) {
                        visible = true;
                    };
                };
                i = (i + 1);
            };
        }
        public function Hide(... _args):void{
            var i:* = 0;
            var iBunch:* = 0;
            var actorIDs:* = _args;
            i = 0;
            while (i < actorIDs.length) {
                if (this.actor[actorIDs[i]]){
                    if ((this.actor[actorIDs[i]] is Array)){
                        iBunch = 0;
                        while (iBunch < this.actor[actorIDs[i]].length) {
                            this.Hide(this.actor[actorIDs[i]][iBunch]);
                            iBunch = (iBunch + 1);
                        };
                        return;
                    };
                    var _local3 = this.actor[actorIDs[i]];
                    with (_local3) {
                        visible = false;
                    };
                };
                i = (i + 1);
            };
        }
        public function SetAlpha(actorID:int, alphaValue:Number){
            var i:int;
            if ((this.actor[actorID] is Array)){
                i = 0;
                while (i < this.actor[actorID].length) {
                    this.SetAlpha(this.actor[actorID][i], alphaValue);
                    i++;
                };
            } else {
                if (this.actor[actorID].hasOwnProperty("alpha")){
                    this.actor[actorID].alpha = alphaValue;
                };
            };
        }
        public function GetAlpha(actorID:int):Number{
            var i:int;
            var tmpAlpha:Number;
            tmpAlpha = 0;
            if ((this.actor[actorID] is Array)){
                i = 0;
                while (i < this.actor[actorID].length) {
                    if (this.GetAlpha(this.actor[actorID][i]) > tmpAlpha){
                        tmpAlpha = this.GetAlpha(this.actor[actorID][i]);
                    };
                    i++;
                };
                return (tmpAlpha);
            };
            if (this.actor[actorID].hasOwnProperty("alpha")){
                return (this.actor[actorID].alpha);
            };
            return (0);
        }
        public function FadeIn(actorID:int, timerInterval:int=20, alphaStep:Number=0.05, alphaMax:Number=1){
            var fadeTimer:* = null;
            var currentAlpha:* = NaN;
            var FadeInEvent:* = null;
            var actorID:* = actorID;
            var timerInterval:int = timerInterval;
            var alphaStep:Number = alphaStep;
            var alphaMax:int = alphaMax;
            FadeInEvent = function (evt:TimerEvent){
                currentAlpha = (currentAlpha + alphaStep);
                if (currentAlpha >= alphaMax){
                    currentAlpha = alphaMax;
                    fadeTimer.stop();
                    fadeTimer.removeEventListener(TimerEvent.TIMER, FadeInEvent);
                };
                SetAlpha(actorID, currentAlpha);
            };
            fadeTimer = new Timer(timerInterval);
            currentAlpha = this.GetAlpha(actorID);
            if (alphaStep <= 0){
                return;
            };
            fadeTimer.addEventListener(TimerEvent.TIMER, FadeInEvent);
            fadeTimer.start();
            this.SetAlpha(actorID, currentAlpha);
        }
        public function FadeOut(actorID:int, timerInterval:int=20, alphaStep:Number=0.05, alphaMin:Number=0, HideThen:Boolean=false){
            var fadeTimer:* = null;
            var currentAlpha:* = NaN;
            var FadeOutEvent:* = null;
            var actorID:* = actorID;
            var timerInterval:int = timerInterval;
            var alphaStep:Number = alphaStep;
            var alphaMin:int = alphaMin;
            var HideThen:Boolean = HideThen;
            FadeOutEvent = function (evt:TimerEvent){
                currentAlpha = (currentAlpha - alphaStep);
                if (currentAlpha <= alphaMin){
                    currentAlpha = alphaMin;
                    fadeTimer.stop();
                    fadeTimer.removeEventListener(TimerEvent.TIMER, FadeOutEvent);
                    if (HideThen){
                        Hide(actorID);
                    };
                };
                SetAlpha(actorID, currentAlpha);
            };
            fadeTimer = new Timer(timerInterval);
            currentAlpha = this.GetAlpha(actorID);
            if (alphaStep <= 0){
                return;
            };
            fadeTimer.addEventListener(TimerEvent.TIMER, FadeOutEvent);
            fadeTimer.start();
            this.SetAlpha(actorID, currentAlpha);
        }
        public function AddFilter(actorID:int, filter:Array):void{
            this.actor[actorID].filters = filter;
        }
        public function SetFont(fontName:String){
            var fontName:* = fontName;
            this.gameFont = fontName;
            this.fontEmbedded = true;
            if ((((((fontName == "Verdana")) || ((fontName == "Arial Narrow")))) || ((fontName == "Geeza Pro")))){
                this.fontEmbedded = false;
                this.sizeMod = -6;
            };
            this.trc(("Font chosen: " + fontName));
            var _local3 = this.FontFormat_ToiletAura;
            with (_local3) {
                font = fontName;
                size = (sizeMod + 35);
                color = CLR_BLACK;
                align = "center";
                leftMargin = 0;
                kerning = true;
            };
            _local3 = this.FontFormat_GuildListTextAttackErrorHalf;
            with (_local3) {
                font = fontName;
                size = (sizeMod + 24);
                color = CLR_ATTACK_ERROR_OFFLINE_HALF;
                align = textDir;
                leftMargin = 0;
                kerning = true;
            };
            _local3 = this.FontFormat_GuildListTextAttackErrorOnlineHalf;
            with (_local3) {
                font = fontName;
                size = (sizeMod + 24);
                color = CLR_ATTACK_ERROR_ONLINE_HALF;
                align = textDir;
                leftMargin = 0;
                kerning = true;
            };
            _local3 = this.FontFormat_Error;
            with (_local3) {
                font = fontName;
                size = (sizeMod + 24);
                color = CLR_ERROR;
                align = textDir;
                leftMargin = 0;
                kerning = true;
            };
            _local3 = this.FontFormat_Default;
            with (_local3) {
                font = fontName;
                size = (sizeMod + 20);
                color = CLR_SFORANGE;
                align = "center";
                leftMargin = 0;
                kerning = true;
            };
            _local3 = this.FontFormat_HighStakes;
            with (_local3) {
                font = fontName;
                size = (sizeMod + 20);
                color = CLR_SYSMSG_RED;
                align = "center";
                leftMargin = 0;
                kerning = true;
            };
            _local3 = this.FontFormat_HighStakesHighLight;
            with (_local3) {
                font = fontName;
                size = (sizeMod + 20);
                color = CLR_SYSMSG_RED_HIGHLIGHT;
                align = "center";
                leftMargin = 0;
                kerning = true;
            };
            _local3 = this.FontFormat_HighStakesGrayed;
            with (_local3) {
                font = fontName;
                size = (sizeMod + 20);
                color = CLR_SYSMSG_RED_GRAYED;
                align = "center";
                leftMargin = 0;
                kerning = true;
            };
            _local3 = this.FontFormat_HighStakesHighLightGrayed;
            with (_local3) {
                font = fontName;
                size = (sizeMod + 20);
                color = CLR_SYSMSG_RED_HIGHLIGHT_GRAYED;
                align = "center";
                leftMargin = 0;
                kerning = true;
            };
            _local3 = this.FontFormat_Book;
            with (_local3) {
                font = fontName;
                size = (sizeMod + 20);
                color = 0;
                align = "center";
                leftMargin = 0;
                kerning = true;
            };
            _local3 = this.FontFormat_BookHint;
            with (_local3) {
                font = fontName;
                size = (sizeMod + 18);
                color = 136;
                align = "center";
                leftMargin = 0;
                kerning = true;
            };
            _local3 = this.FontFormat_BookLeft;
            with (_local3) {
                font = fontName;
                size = (sizeMod + 16);
                color = 0;
                align = "left";
                leftMargin = 0;
                kerning = true;
            };
            _local3 = this.FontFormat_Bullshit;
            with (_local3) {
                font = fontName;
                size = 14;
                color = CLR_SFORANGE;
                align = "left";
                leftMargin = 0;
                kerning = true;
            };
            _local3 = this.FontFormat_AttackLabel;
            with (_local3) {
                font = fontName;
                size = (sizeMod + 19);
                color = CLR_SFORANGE;
                align = textDir;
                leftMargin = 0;
                kerning = true;
            };
            _local3 = this.FontFormat_Speech;
            with (_local3) {
                font = fontName;
                size = (sizeMod + 20);
                color = CLR_WHITE;
                align = textDir;
                leftMargin = 0;
                kerning = true;
            };
            _local3 = this.FontFormat_Grayed;
            with (_local3) {
                font = fontName;
                size = (sizeMod + 20);
                color = CLR_GRAYED;
                align = textDir;
                leftMargin = 0;
                kerning = true;
            };
            _local3 = this.FontFormat_GrayedHighLight;
            with (_local3) {
                font = fontName;
                size = (sizeMod + 20);
                color = CLR_GRAYED_HL;
                align = textDir;
                leftMargin = 0;
                kerning = true;
            };
            _local3 = this.FontFormat_ClassError;
            with (_local3) {
                font = fontName;
                size = (sizeMod + 20);
                color = CLR_ERROR;
                align = textDir;
                leftMargin = 0;
                kerning = true;
            };
            _local3 = this.FontFormat_Chat;
            with (_local3) {
                font = fontName;
                size = (sizeMod + 20);
                color = CLR_SFORANGE;
                align = textDir;
                leftMargin = 0;
                kerning = true;
            };
            _local3 = this.FontFormat_ChatWhisper;
            with (_local3) {
                font = fontName;
                size = (sizeMod + 20);
                color = CLR_CHAT_WHISPER;
                align = textDir;
                leftMargin = 0;
                kerning = true;
            };
            _local3 = this.FontFormat_ChatError;
            with (_local3) {
                font = fontName;
                size = (sizeMod + 20);
                color = CLR_ERROR;
                align = textDir;
                leftMargin = 0;
                kerning = true;
            };
            _local3 = this.FontFormat_GuildBuilding;
            with (_local3) {
                font = fontName;
                size = (sizeMod + 20);
                color = CLR_SFORANGE;
                align = textDir;
                leftMargin = 0;
                kerning = true;
            };
            _local3 = this.FontFormat_GuildMoney;
            with (_local3) {
                font = fontName;
                size = (sizeMod + 20);
                color = CLR_SFORANGE;
                align = textDir;
                leftMargin = 0;
                kerning = true;
            };
            _local3 = this.FontFormat_DefaultLeft;
            with (_local3) {
                font = fontName;
                size = (sizeMod + 20);
                color = CLR_SFORANGE;
                align = textDir;
                leftMargin = 0;
                kerning = true;
            };
            _local3 = this.FontFormat_Highlight;
            with (_local3) {
                font = fontName;
                size = (sizeMod + 20);
                color = CLR_SFHIGHLIGHT;
                align = textDir;
                leftMargin = 0;
                kerning = true;
            };
            _local3 = this.FontFormat_HighlightWhisper;
            with (_local3) {
                font = fontName;
                size = (sizeMod + 20);
                color = CLR_SFHIGHLIGHT_WHISPER;
                align = textDir;
                leftMargin = 0;
                kerning = true;
            };
            _local3 = this.FontFormat_Heading;
            with (_local3) {
                font = fontName;
                size = (sizeMod + 30);
                color = CLR_SFORANGE;
                align = textDir;
                leftMargin = 0;
                kerning = true;
            };
            _local3 = this.FontFormat_ScreenTitle;
            with (_local3) {
                font = fontName;
                size = (sizeMod + 34);
                color = CLR_SFORANGE;
                align = textDir;
                leftMargin = 0;
                kerning = true;
            };
            _local3 = this.FontFormat_Popup;
            with (_local3) {
                font = fontName;
                size = (sizeMod + 20);
                color = CLR_SFORANGE;
                align = textDir;
                leftMargin = 0;
                kerning = true;
            };
            _local3 = this.FontFormat_PopupCompare;
            with (_local3) {
                font = fontName;
                size = (sizeMod + 20);
                color = CLR_OFFLINE;
                align = textDir;
                leftMargin = 0;
                kerning = true;
            };
            _local3 = this.FontFormat_PopupCompareSum;
            with (_local3) {
                font = fontName;
                size = (sizeMod + 20);
                color = CLR_ONLINE;
                align = textDir;
                leftMargin = 0;
                kerning = true;
            };
            _local3 = this.FontFormat_PopupCompareBetter;
            with (_local3) {
                font = fontName;
                size = (sizeMod + 20);
                color = CLR_SYSMSG_GREEN;
                align = textDir;
                leftMargin = 0;
                kerning = true;
            };
            _local3 = this.FontFormat_PopupCompareWorse;
            with (_local3) {
                font = fontName;
                size = (sizeMod + 20);
                color = CLR_SYSMSG_RED;
                align = textDir;
                leftMargin = 0;
                kerning = true;
            };
            _local3 = this.FontFormat_PopupCompareBetterHL;
            with (_local3) {
                font = fontName;
                size = (sizeMod + 20);
                color = CLR_SYSMSG_GREEN_HIGHLIGHT;
                align = textDir;
                leftMargin = 0;
                kerning = true;
            };
            _local3 = this.FontFormat_PopupCompareWorseHL;
            with (_local3) {
                font = fontName;
                size = (sizeMod + 20);
                color = CLR_SYSMSG_RED_HIGHLIGHT;
                align = textDir;
                leftMargin = 0;
                kerning = true;
            };
            _local3 = this.FontFormat_EpicItemQuote;
            with (_local3) {
                font = fontName;
                size = (sizeMod + 20);
                color = CLR_EPICITEMQUOTE;
                align = textDir;
                leftMargin = 0;
                kerning = true;
            };
            _local3 = this.FontFormat_ItemEnchantment;
            with (_local3) {
                font = fontName;
                size = (sizeMod + 20);
                color = CLR_ITEMENCHANTMENT;
                align = textDir;
                leftMargin = 0;
                kerning = true;
            };
            _local3 = this.FontFormat_LogoutLink;
            with (_local3) {
                font = fontName;
                size = (sizeMod + 22);
                color = CLR_SFORANGE;
                align = textDir;
                leftMargin = 0;
                kerning = true;
            };
            _local3 = this.FontFormat_LogoutLinkHighLight;
            with (_local3) {
                font = fontName;
                size = (sizeMod + 22);
                color = CLR_SFHIGHLIGHT;
                align = textDir;
                leftMargin = 0;
                kerning = true;
            };
            _local3 = this.FontFormat_HallListHeading;
            with (_local3) {
                font = fontName;
                size = (sizeMod + 19);
                color = CLR_SFORANGE;
                align = textDir;
                leftMargin = 0;
                kerning = true;
            };
            _local3 = this.FontFormat_HallListText;
            with (_local3) {
                font = fontName;
                size = (sizeMod + 19);
                color = CLR_SFORANGE;
                align = textDir;
                leftMargin = 0;
                kerning = true;
            };
            _local3 = this.FontFormat_GuildHallNoAttack;
            with (_local3) {
                font = fontName;
                size = (sizeMod + 19);
                color = CLR_NOATTACK;
                align = textDir;
                leftMargin = 0;
                kerning = true;
            };
            _local3 = this.FontFormat_HallListHighLight;
            with (_local3) {
                font = fontName;
                size = (sizeMod + 19);
                color = CLR_SFHIGHLIGHT;
                align = textDir;
                leftMargin = 0;
                kerning = true;
            };
            _local3 = this.FontFormat_AttribBonus;
            with (_local3) {
                font = fontName;
                size = (sizeMod + 19);
                color = CLR_ATTRIBBONUS;
                align = textDir;
                leftMargin = 0;
                kerning = true;
            };
            _local3 = this.FontFormat_AttribTemp;
            with (_local3) {
                font = fontName;
                size = (sizeMod + 19);
                color = CLR_SYSMSG_GREEN;
                align = textDir;
                leftMargin = 0;
                kerning = true;
            };
            _local3 = this.FontFormat_Attrib;
            with (_local3) {
                font = fontName;
                size = (sizeMod + 19);
                color = CLR_SFORANGE;
                align = textDir;
                leftMargin = 0;
                kerning = true;
            };
            _local3 = this.FontFormat_PayIcon;
            with (_local3) {
                font = fontName;
                size = (sizeMod + 19);
                color = CLR_WHITE;
                align = textDir;
                leftMargin = 0;
                kerning = true;
            };
            _local3 = this.FontFormat_PostListHeading;
            with (_local3) {
                font = fontName;
                size = (sizeMod + 26);
                color = CLR_SFORANGE;
                align = textDir;
                bold = true;
                leftMargin = 0;
                kerning = true;
            };
            _local3 = this.FontFormat_PostListText;
            with (_local3) {
                font = fontName;
                size = (sizeMod + 24);
                color = CLR_SFORANGE;
                align = textDir;
                leftMargin = 0;
                kerning = true;
            };
            _local3 = this.FontFormat_PostListTextSys;
            with (_local3) {
                font = fontName;
                size = (sizeMod + 24);
                color = CLR_SYSMSG;
                align = textDir;
                leftMargin = 0;
                kerning = true;
            };
            _local3 = this.FontFormat_GuildListText;
            with (_local3) {
                font = fontName;
                size = (sizeMod + 24);
                color = CLR_OFFLINE;
                align = textDir;
                leftMargin = 0;
                kerning = true;
            };
            _local3 = this.FontFormat_GuildListTextOnline;
            with (_local3) {
                font = fontName;
                size = (sizeMod + 24);
                color = CLR_ONLINE;
                align = textDir;
                leftMargin = 0;
                kerning = true;
            };
            _local3 = this.FontFormat_GuildListTextAttackError;
            with (_local3) {
                font = fontName;
                size = (sizeMod + 24);
                color = CLR_ATTACK_ERROR_OFFLINE;
                align = textDir;
                leftMargin = 0;
                kerning = true;
            };
            _local3 = this.FontFormat_GuildListTextAttackErrorOnline;
            with (_local3) {
                font = fontName;
                size = (sizeMod + 24);
                color = CLR_ATTACK_ERROR_ONLINE;
                align = textDir;
                leftMargin = 0;
                kerning = true;
            };
            _local3 = this.FontFormat_GuildListTextAttackErrorOnlinePopup;
            with (_local3) {
                font = fontName;
                size = (sizeMod + 20);
                color = CLR_ATTACK_ERROR_ONLINE;
                align = textDir;
                leftMargin = 0;
                kerning = true;
            };
            _local3 = this.FontFormat_GuildListTextAttackOk;
            with (_local3) {
                font = fontName;
                size = (sizeMod + 24);
                color = CLR_ATTACK_OK;
                align = textDir;
                leftMargin = 0;
                kerning = true;
            };
            _local3 = this.FontFormat_GuildListTextAttackOkPopup;
            with (_local3) {
                font = fontName;
                size = (sizeMod + 20);
                color = CLR_ATTACK_OK;
                align = textDir;
                leftMargin = 0;
                kerning = true;
            };
            _local3 = this.FontFormat_PostListHighLight;
            with (_local3) {
                font = fontName;
                size = (sizeMod + 24);
                color = CLR_SFHIGHLIGHT;
                align = textDir;
                leftMargin = 0;
                kerning = true;
            };
            _local3 = this.FontFormat_PostListHighLightSys;
            with (_local3) {
                font = fontName;
                size = (sizeMod + 24);
                color = CLR_SYSMSGHIGHLIGHT;
                align = textDir;
                leftMargin = 0;
                kerning = true;
            };
            _local3 = this.FontFormat_PostListTextSysRed;
            with (_local3) {
                font = fontName;
                size = (sizeMod + 24);
                color = CLR_SYSMSG_RED;
                align = textDir;
                leftMargin = 0;
                kerning = true;
            };
            _local3 = this.FontFormat_PostListHighLightSysRed;
            with (_local3) {
                font = fontName;
                size = (sizeMod + 24);
                color = CLR_SYSMSG_RED_HIGHLIGHT;
                align = textDir;
                leftMargin = 0;
                kerning = true;
            };
            _local3 = this.FontFormat_PostListTextSysGreen;
            with (_local3) {
                font = fontName;
                size = (sizeMod + 24);
                color = CLR_SYSMSG_GREEN;
                align = textDir;
                leftMargin = 0;
                kerning = true;
            };
            _local3 = this.FontFormat_PostListHighLightSysGreen;
            with (_local3) {
                font = fontName;
                size = (sizeMod + 24);
                color = CLR_SYSMSG_GREEN_HIGHLIGHT;
                align = textDir;
                leftMargin = 0;
                kerning = true;
            };
            _local3 = this.FontFormat_QuestBar;
            with (_local3) {
                font = fontName;
                size = (sizeMod + 24);
                color = CLR_WHITE;
                align = textDir;
                leftMargin = 0;
                kerning = true;
            };
            _local3 = this.FontFormat_TimeBar;
            with (_local3) {
                font = fontName;
                size = (sizeMod + 24);
                color = CLR_WHITE;
                align = textDir;
                leftMargin = 0;
                kerning = true;
            };
            _local3 = this.FontFormat_LifeBar;
            with (_local3) {
                font = fontName;
                size = (sizeMod + 20);
                color = CLR_WHITE;
                align = textDir;
                leftMargin = 0;
                kerning = true;
            };
            _local3 = this.FontFormat_Damage;
            with (_local3) {
                font = fontName;
                size = (sizeMod + 30);
                color = CLR_WHITE;
                align = textDir;
                leftMargin = 0;
                kerning = true;
            };
            _local3 = this.FontFormat_CriticalDamage;
            with (_local3) {
                font = fontName;
                size = (sizeMod + 34);
                color = CLR_RED;
                align = textDir;
                leftMargin = 0;
                kerning = true;
            };
            _local3 = this.FontFormat_CatapultDamage;
            with (_local3) {
                font = fontName;
                size = (sizeMod + 38);
                color = CLR_ATTACK_ERROR_ONLINE_HALF;
                align = textDir;
                leftMargin = 0;
                kerning = true;
            };
        }
        public function Start(){
            var DoLoadLanguageFile:* = null;
            var BuildInterface:* = null;
            DoLoadLanguageFile = function (){
                var i:* = 0;
                var StripSlashes:* = function (source:String):String{
                    return (source.split("http://").join("").split("/").join(""));
                };
                Security.loadPolicyFile((img_url[img_url_index] + "crossdomain.xml"));
                Security.loadPolicyFile((snd_url[snd_url_index] + "crossdomain.xml"));
                Security.loadPolicyFile((lang_url + "crossdomain.xml"));
                Security.loadPolicyFile((("http://" + server) + "/crossdomain.xml"));
                Security.allowDomain(StripSlashes(img_url[img_url_index]), StripSlashes(snd_url[snd_url_index]), StripSlashes(lang_url), server);
                LoadLanguageFile();
                WhenLoaded(BuildInterface);
            };
            BuildInterface = function (){
                var i:* = 0;
                var ii:* = 0;
                var iii:* = 0;
                var attPriceLimitation:* = false;
                var iPosi:* = undefined;
                var yOffs:* = undefined;
                var dungeonBtnUpdateDelayTimer:* = null;
                var dungeonBtnHover:* = null;
                var dungeonBtnLeave:* = null;
                var dungeonBtnUpdateDelay:* = null;
                var workBtnUpdateDelayTimer:* = null;
                var workBtnHover:* = null;
                var workBtnLeave:* = null;
                var workBtnUpdateDelay:* = null;
                var tavBtnUpdateDelayTimer:* = null;
                var tavBtnHover:* = null;
                var tavBtnLeave:* = null;
                var tavBtnUpdateDelay:* = null;
                var arenaBtnUpdateDelayTimer:* = null;
                var arenaBtnHover:* = null;
                var arenaBtnLeave:* = null;
                var arenaBtnUpdateDelay:* = null;
                var HutmannLinkTimer:* = null;
                var HutmannLinkVis:* = false;
                var HutmannLinkOver:* = false;
                var HutmannRelY:* = 0;
                var HutmannAniStep:* = 0;
                var HutmannCountdown:* = 0;
                var HutmannLinkAniEvent:* = null;
                var AIRRelMoveY:* = 0;
                var AIRRelMoveYButton:* = 0;
                var AIRRelMoveYButton2:* = 0;
                var gradePassword:* = null;
                var RequestPassword:* = null;
                var CheckAGB:* = null;
                var UncheckAGB:* = null;
                var CheckFuck:* = null;
                var UncheckFuck:* = null;
                var PulseTimer:* = null;
                var PulseLevel:* = 0;
                var CloneMarker:* = null;
                var pos_x:* = 0;
                var pos_y:* = 0;
                var volk:* = null;
                var SelectRace:* = null;
                var SelectGender:* = null;
                var SelectCaste:* = null;
                var MimickInterfaceButtonHover:* = null;
                var Buh:* = false;
                var BuhHover:* = null;
                var BuhOut:* = null;
                var BubbleTimer:* = null;
                var BubbleWait:* = 0;
                var Bubbles:* = null;
                var CityAniTimer:* = null;
                var CityAniFrame:* = 0;
                var SandwichPause:* = 0;
                var ZwergFussTapp:* = 0;
                var CityAni:* = null;
                var iFrame:* = 0;
                var SchildDir:* = 0;
                var SchildTimer:* = null;
                var WacheOver:* = null;
                var WacheOut:* = null;
                var SchildFrame:* = null;
                var EselOver:* = null;
                var EselOut:* = null;
                var DealerAniTimer:* = null;
                var DealerStepTimer:* = null;
                var DealerAniStep:* = 0;
                var ShowDealerEyes:* = null;
                var HideDealerEyes:* = null;
                var DealerStep:* = null;
                var OnoTimer:* = null;
                var LastOno:* = 0;
                var ThisOno:* = 0;
                var OnoPopupTimer:* = null;
                var PopupDir:* = false;
                var ShowArenaOno:* = null;
                var HideArenaOno:* = null;
                var PopupArenaOno:* = null;
                var StepArenaOno:* = null;
                var InterfaceButtonHover:* = null;
                var ExitScreen:* = null;
                var HalleSuchClick:* = null;
                var RuhmesHalleScroll:* = null;
                var RemoveInviteWindow:* = null;
                var SendPlayerInvite:* = null;
                var PrevPlayer:* = null;
                var NextPlayer:* = null;
                var RequestAlbum:* = null;
                var PlayerGuildInviteCancel:* = null;
                var PlayerGuildInviteOK:* = null;
                var PlayerGuildInvite:* = null;
                var ZurGilde:* = null;
                var PlayerSendMessage:* = null;
                var PlayerAttack:* = null;
                var PlayerInvite:* = null;
                var BoostBtnRepeatTimer:* = null;
                var DestroyBoostBtnTimer:* = false;
                var BoostAttribute:* = null;
                var inBoostBtn:* = false;
                var BoostBtnChange:* = 0;
                var BoostBtnTimer:* = null;
                var BoostBtnTimerFunction:* = null;
                var itmTyp:* = 0;
                var itmPic:* = 0;
                var itmColor:* = 0;
                var itmClass:* = 0;
                var InventoryItemMouseDown:* = null;
                var BackpackItemMouseDown:* = null;
                var InventoryItemMouseUp:* = null;
                var DropHandler:* = null;
                var PotionSingleClick:* = null;
                var PotionDoubleClick:* = null;
                var towerLevelLabelTimer:* = null;
                var towerBoostPriceFadeoutTimer:* = null;
                var towerBoostPriceFadeout:* = null;
                var towerLevelLabelMoveFn:* = null;
                var ShowTowerBoostPrices:* = null;
                var HideTowerBoostPrices:* = null;
                var BoostCopycat:* = null;
                var AffeBlinzeln:* = 0;
                var FidgetBlinzeln:* = 0;
                var ShakesBlinzeln:* = 0;
                var ShakesIdleStep:* = 0;
                var ShakesIdlePhase:* = 0;
                var WasIdleCount:* = 0;
                var ShopIdle:* = NaN;
                var PlayerIdle:* = false;
                var ShopAniTimer:* = null;
                var SaleRecoverTime:* = NaN;
                var ShopAniFrame:* = null;
                var ShopMouseDownEvent:* = null;
                var ShopMouseUpEvent:* = null;
                var RequestNewWarez:* = null;
                var RequestWitchScreen:* = null;
                var spellClicking:* = false;
                var CancelQuest:* = null;
                var SkipQuest:* = null;
                var AttackEnemy:* = null;
                var SelectedMount:* = 0;
                var OldMount:* = 0;
                var ClickMount:* = null;
                var BuyMount:* = null;
                var crestClaI:* = 0;
                var ShowExtendedHistory:* = null;
                var HideExtendedHistory:* = null;
                var lastChatLine:* = null;
                var AdvancedChatHandler:* = null;
                var SendChatMsg:* = null;
                var nextSuggestionTimer:* = null;
                var suggestionAllowed:* = false;
                var nextSuggestionAllow:* = null;
                var GildeBtnHandler:* = null;
                var GildeGruenden:* = null;
                var HutBtnRepeatTimer:* = null;
                var DestroyHutBtnTimer:* = false;
                var HutFaceResetTimer:* = null;
                var HutFaceReset:* = null;
                var HutBtnHandler:* = null;
                var ChooseCup:* = null;
                var cursedDescr:* = null;
                var RequestToilet:* = null;
                var ShowHutmann:* = null;
                var BuyBeer:* = null;
                var ShowBeerOffer:* = null;
                var TimeBarAniTimer:* = null;
                var timeBarAni:* = NaN;
                var TimeBarAniEvent:* = null;
                var ShowQuestOffer:* = null;
                var ReturnQuest:* = null;
                var RequestQuest:* = null;
                var toiletChainTimer:* = null;
                var toiletChainFrame:* = 0;
                var toiletChainAni:* = null;
                var ToiletHandler:* = null;
                var k:* = 0;
                var monsterChecksum:* = null;
                var SkipFight:* = null;
                var CheckLM:* = null;
                var UncheckLM:* = null;
                var CheckCS:* = null;
                var UncheckCS:* = null;
                var CheckCompare:* = null;
                var UncheckCompare:* = null;
                var CheckTV:* = null;
                var UncheckTV:* = null;
                var VolumeChange:* = null;
                var Filter_Glow:* = null;
                var ChooseLanguageIcon:* = null;
                var optionMenuSelect:* = 0;
                var OptionBtnHandler:* = null;
                var RequestMainQuest:* = null;
                var AdvancedPostHandler:* = null;
                var killFieldContent:* = null;
                var fillFieldContent:* = null;
                var ShowSocial:* = function (evt:MouseEvent){
                    var thisActor:int;
                    thisActor = GetActorID(evt.target);
                    ExternalInterface.call("showSocial", param_social_buttons[(thisActor - CNT_SOCIAL)].split(":")[0]);
                };
                var ShowDatenschutz:* = function (){
                    navigateToURLEx(new URLRequest(dataprot_url), "_blank");
                };
                var ShowAnleitung:* = function (){
                    navigateToURLEx(new URLRequest(instr_url), "_blank");
                };
                var ShowImpressum:* = function (){
                    navigateToURLEx(new URLRequest(imprint_url), "_blank");
                };
                var ShowForum:* = function (){
                    navigateToURLEx(new URLRequest(forum_url), "_blank");
                };
                var ShowShop:* = function (){
                    navigateToURLEx(new URLRequest(shop_url.split("<playerid>").join(Savegame[SG_PLAYER_ID]).split("<paymentid>").join(Savegame[SG_PAYMENT_ID]).split("<playername>").join(actor[INP_NAME].getChildAt(1).text).split("<face>").join((((((((((((((((((((((((CharVolk + "/") + String(((CharMann) ? 1 : 2))) + "/") + CharKaste) + "/") + CharMouth) + "/") + CharHair) + "/") + CharBrows) + "/") + CharEyes) + "/") + CharBeard) + "/") + CharNose) + "/") + CharEars) + "/") + CharSpecial) + "/") + CharSpecial2) + "/"))), "_blank");
                };
                var navigateToURLEx:* = function (req:URLRequest, frameName:String){
                    var req:* = req;
                    var frameName:* = frameName;
                    try {
                        ExternalInterface.call("openUrl", req.url);
                    } catch(e:Error) {
                        navigateToURL(req, frameName);
                    };
                };
                dungeonBtnHover = function (evt:MouseEvent){
                    dungeonBtnUpdateDelay();
                    dungeonBtnUpdateDelayTimer.start();
                };
                dungeonBtnLeave = function (evt:MouseEvent=undefined){
                    dungeonBtnUpdateDelayTimer.stop();
                    SetBtnText(BTN_IF_WELTKARTE, txt[TXT_WELTKARTE]);
                };
                dungeonBtnUpdateDelay = function (evt:TimerEvent=undefined){
                    if (WaitingFor(Savegame[SG_MQ_REROLL_TIME])){
                        SetBtnText(BTN_IF_WELTKARTE, WaitingTime(Savegame[SG_MQ_REROLL_TIME]));
                    } else {
                        dungeonBtnLeave();
                    };
                };
                workBtnHover = function (evt:MouseEvent){
                    workBtnUpdateDelay();
                    workBtnUpdateDelayTimer.start();
                };
                workBtnLeave = function (evt:MouseEvent=undefined){
                    workBtnUpdateDelayTimer.stop();
                    SetBtnText(BTN_IF_ARBEITEN, txt[TXT_ARBEITEN]);
                };
                workBtnUpdateDelay = function (evt:TimerEvent=undefined){
                    if (((WaitingFor(Savegame[SG_ACTION_ENDTIME])) && ((Savegame[SG_ACTION_STATUS] == 1)))){
                        SetBtnText(BTN_IF_ARBEITEN, WaitingTime(Savegame[SG_ACTION_ENDTIME]));
                    } else {
                        workBtnLeave();
                    };
                };
                tavBtnHover = function (evt:MouseEvent){
                    tavBtnUpdateDelay();
                    tavBtnUpdateDelayTimer.start();
                };
                tavBtnLeave = function (evt:MouseEvent=undefined){
                    tavBtnUpdateDelayTimer.stop();
                    SetBtnText(BTN_IF_TAVERNE, txt[TXT_TAVERNE]);
                };
                tavBtnUpdateDelay = function (evt:TimerEvent=undefined){
                    if (((WaitingFor(Savegame[SG_ACTION_ENDTIME])) && ((Savegame[SG_ACTION_STATUS] == 2)))){
                        SetBtnText(BTN_IF_TAVERNE, WaitingTime(Savegame[SG_ACTION_ENDTIME]));
                    } else {
                        tavBtnLeave();
                    };
                };
                arenaBtnHover = function (evt:MouseEvent){
                    arenaBtnUpdateDelay();
                    arenaBtnUpdateDelayTimer.start();
                };
                arenaBtnLeave = function (evt:MouseEvent=undefined){
                    arenaBtnUpdateDelayTimer.stop();
                    SetBtnText(BTN_IF_ARENA, txt[TXT_ARENA]);
                };
                arenaBtnUpdateDelay = function (evt:TimerEvent=undefined){
                    if (WaitingFor(Savegame[SG_PVP_REROLL_TIME])){
                        SetBtnText(BTN_IF_ARENA, WaitingTime(Savegame[SG_PVP_REROLL_TIME]));
                    } else {
                        arenaBtnLeave();
                    };
                };
                var TaverneBtnIn:* = function (evt:Event){
                    actor[CNT_IF_TOILET].visible = ((!((Savegame[SG_TOILET] == 0))) && (!(OnStage(CA_TOILET_BOWL))));
                    actor[CNT_IF_HUTMANN].visible = !(OnStage(IMG_HUTMANN_BG));
                    if (((!((int(Savegame[SG_ACTION_STATUS]) == 0))) && (!(PulseTaverne)))){
                        HutmannCountdown = 20;
                        HutmannLinkOver = true;
                    };
                };
                var TaverneBtnOut:* = function (evt:Event){
                    HutmannCountdown = 1;
                    HutmannLinkOver = false;
                };
                HutmannLinkAniEvent = function (evt:Event){
                    var i:* = 0;
                    var evt:* = evt;
                    if (HutmannCountdown > 0){
                        HutmannCountdown--;
                        if (HutmannCountdown == 0){
                            HutmannLinkVis = HutmannLinkOver;
                        };
                    };
                    if (HutmannLinkVis){
                        if (HutmannRelY > -(actor[IMG_IF_HUTMANN1].height)){
                            HutmannRelY = (HutmannRelY - 10);
                        } else {
                            if (HutmannAniStep < 100){
                                HutmannAniStep++;
                            };
                            switch (HutmannAniStep){
                                case 2:
                                case 8:
                                case 14:
                                case 20:
                                case 26:
                                    HutmannFrame = 1;
                                    break;
                                case 4:
                                case 10:
                                case 16:
                                case 22:
                                case 28:
                                    HutmannFrame = 0;
                                    break;
                            };
                        };
                    } else {
                        if (HutmannRelY < 0){
                            HutmannRelY = (HutmannRelY + 10);
                        };
                        HutmannAniStep = 0;
                        HutmannFrame = 0;
                    };
                    i = 0;
                    while (i < 2) {
                        var _local3 = actor[(IMG_IF_HUTMANN1 + i)];
                        with (_local3) {
                            visible = (i == HutmannFrame);
                        };
                        i = (i + 1);
                    };
                    _local3 = actor[CNT_IF_HUTMANN];
                    with (_local3) {
                        y = (POS_IF_HUTLINK_Y + HutmannRelY);
                    };
                    _local3 = actor[CNT_IF_TOILET];
                    with (_local3) {
                        y = ((POS_IF_HUTLINK_Y + HutmannRelY) + 40);
                    };
                };
                var DefiniereInterfaceButton:* = function (actorID:int, txtID:int){
                    var dragonID:* = 0;
                    var InterfaceButtonDown:* = null;
                    var InterfaceButtonUp:* = null;
                    var actorID:* = actorID;
                    var txtID:* = txtID;
                    InterfaceButtonDown = function (evt:MouseEvent):void{
                        var x:int;
                        var y:int;
                        var i:int;
                        i = dragonID;
                        x = actor[i].x;
                        y = actor[i].y;
                        removeChild(actor[i]);
                        delete actor[i];
                        actor[i] = new interface_dragon5_png();
                        actor[i].x = x;
                        actor[i].y = y;
                        addChild(actor[i]);
                    };
                    InterfaceButtonUp = function (evt:MouseEvent):void{
                        var x:int;
                        var y:int;
                        var i:int;
                        var d:int;
                        i = dragonID;
                        if (actor[i]){
                            x = actor[i].x;
                            y = actor[i].y;
                            removeChild(actor[i]);
                            delete actor[i];
                            d = actorBitmap[i];
                            switch (d){
                                case 0:
                                    actor[i] = new interface_dragon1_png();
                                    break;
                                case 1:
                                    actor[i] = new interface_dragon2_png();
                                    break;
                                case 2:
                                    actor[i] = new interface_dragon3_png();
                                    break;
                                case 3:
                                    actor[i] = new interface_dragon4_png();
                                    break;
                                case 4:
                                case 5:
                                    actor[i] = new interface_dragon6_png();
                                    break;
                            };
                            actor[i].x = x;
                            actor[i].y = y;
                            addChild(actor[i]);
                        };
                        Remove(BNC_CITY_OVERLAYS);
                        HideArenaOno();
                        WacheOut();
                        if (((((OnStage(IMG_SCR_CITY_BACKG_NIGHT)) || (OnStage(IMG_SCR_CITY_BACKG_DAWN)))) || (OnStage(IMG_SCR_CITY_BACKG_DAY)))){
                            Add(IMG_CITY_ESEL1);
                            Add(BNC_CITY_CA_OVL);
                        };
                        if (OnStage(CA_SCR_ARBEITEN_BLOCKCITY)){
                            if (OnStage(LBL_SCR_ARBEITEN_TIME)){
                                Add(BNC_SCREEN_ARBEITEN_WAIT);
                            } else {
                                if (OnStage(BTN_SCR_ARBEITEN_OK)){
                                    Add(BNC_SCREEN_ARBEITEN);
                                } else {
                                    Add(BNC_SCREEN_ARBEITEN_SUCCESS);
                                };
                            };
                        };
                        if (OnStage(CA_SCR_INVITE_BLOCKCITY)){
                            Add(BNC_SCREEN_INVITE);
                        };
                        if (OnStage(BLACK_SQUARE)){
                            Add(BLACK_SQUARE);
                        };
                    };
                    DefineBtn(actorID, txt[txtID], InterfaceBtnHandler, btnClassInterface, POS_IF_BTN_X, ((POS_IF_BTN_Y + (REL_IF_BTN_1 * iPosi++)) + yOffs));
                    DefineFromClass(((CNT_IF_DRAGON_1 + iPosi) - 1), interface_dragon1_png, (actor[actorID].x + REL_DRAGON_X), (actor[actorID].y + REL_DRAGON_Y));
                    dragonID = ((CNT_IF_DRAGON_1 + iPosi) - 1);
                    actor[actorID].addEventListener(MouseEvent.MOUSE_DOWN, InterfaceButtonDown);
                    actor[actorID].addEventListener(MouseEvent.MOUSE_UP, InterfaceButtonUp);
                    actor[actorID].addEventListener(MouseEvent.MOUSE_OUT, InterfaceButtonUp);
                    actor[actorID].addEventListener(MouseEvent.MOUSE_OVER, InterfaceButtonHover);
                    MakePersistent(((CNT_IF_DRAGON_1 + iPosi) - 1), actorID);
                };
                gradePassword = function (evt:Event=undefined, pwd_str:String=""){
                    var pwd:String;
                    var badWords:Array;
                    var newPwd:String;
                    var lastChar:String;
                    var pwdScore:int;
                    var i:int;
                    var ii:int;
                    var cmp:String;
                    var badSequences:*;
                    var hasBadSequence:Boolean;
                    var hasNumerals:Boolean;
                    var hasUpperCase:Boolean;
                    var hasLowerCase:Boolean;
                    var hasSpecial:Boolean;
                    pwd = pwd_str;
                    badWords = new Array();
                    if (txt[TXT_BAD_PASSWORDS]){
                        badWords = txt[TXT_BAD_PASSWORDS].split(" ");
                    };
                    if (actor[INP_NAME].getChildAt(1).text.length >= 3){
                        badWords.push(actor[INP_NAME].getChildAt(1).text);
                    };
                    if (evt){
                        if (GetActorID(evt.target.parent) == INP_PASSWORD){
                            pwd = actor[INP_PASSWORD].getChildAt(1).text;
                            Hide(IMG_PASSWORD_SMILEY_SAD);
                            Hide(IMG_PASSWORD_SMILEY_NEUTRAL);
                            Hide(IMG_PASSWORD_SMILEY_HAPPY);
                        } else {
                            if (optionMenuSelect == 3){
                                Hide(CNT_CHANGE_PASSWORD_SMILEY_SAD);
                                Hide(CNT_CHANGE_PASSWORD_SMILEY_NEUTRAL);
                                Hide(CNT_CHANGE_PASSWORD_SMILEY_HAPPY);
                                if (actor[INP_OPTION_FIELD2].getChildAt(1).text == actor[INP_OPTION_FIELD3].getChildAt(1).text){
                                    pwd = actor[INP_OPTION_FIELD2].getChildAt(1).text;
                                } else {
                                    return;
                                };
                            } else {
                                return;
                            };
                        };
                    };
                    newPwd = "";
                    lastChar = "";
                    pwdScore = 0;
                    cmp = "";
                    badSequences = ["01234567890", "abcdefghijklmnopqrstuvwxyz", "ABCDEFGHIJKLMNOPQRSTUVWXYZ", "qwertzuiopasdfghjklyxcvbnm", "qwertyuiopasdfghjklzxcvbnm", "09876543210", "mnbvcxylkjhgfdsapoiuztrewq", "mnbvcxzlkjhgfdsapoiuytrewq"];
                    i = 0;
                    while (i < badWords.length) {
                        if (pwd.toLowerCase().indexOf(badWords[i].toLowerCase()) != -1){
                            pwdScore = (pwdScore - 5);
                        };
                        i++;
                    };
                    i = 0;
                    while (i < pwd.length) {
                        if (pwd.substr(i, 1) != lastChar){
                            newPwd = (newPwd + pwd.substr(i, 1));
                        };
                        lastChar = pwd.substr(i, 1);
                        i++;
                    };
                    pwd = newPwd;
                    newPwd = "";
                    hasBadSequence = false;
                    i = 0;
                    while (i < pwd.length) {
                        if (i >= 2){
                            cmp = pwd.substr((i - 2), 3);
                        } else {
                            cmp = "";
                            newPwd = (newPwd + pwd.substr(i, 1));
                        };
                        hasBadSequence = false;
                        ii = 0;
                        while (ii < badSequences.length) {
                            if (badSequences[ii].indexOf(cmp) != -1){
                                hasBadSequence = true;
                                break;
                            };
                            ii++;
                        };
                        if (!hasBadSequence){
                            newPwd = (newPwd + pwd.substr(i, 1));
                        };
                        i++;
                    };
                    pwd = newPwd;
                    i = 3;
                    while (i < pwd.length) {
                        ii = 0;
                        while (ii < (pwd.length - i)) {
                            cmp = pwd.substr(ii, i);
                            if (pwd.lastIndexOf(cmp) != ii){
                                pwdScore--;
                            };
                            ii++;
                        };
                        i++;
                    };
                    if (pwd.length >= 12){
                        pwdScore = (pwdScore + 2);
                    } else {
                        if (pwd.length >= 8){
                            pwdScore = (pwdScore + 1);
                        } else {
                            if (pwd.length >= 5){
                                pwdScore = (pwdScore + 0);
                            } else {
                                pwdScore = (pwdScore - 10);
                            };
                        };
                    };
                    hasNumerals = false;
                    hasUpperCase = false;
                    hasLowerCase = false;
                    hasSpecial = false;
                    i = 0;
                    while (i < pwd.length) {
                        if (pwd.substr(i, 1) == String(int(pwd.substr(i, 1)))){
                            hasNumerals = true;
                        } else {
                            if (pwd.substr(i, 1) != pwd.substr(i, 1).toLowerCase()){
                                hasUpperCase = true;
                            } else {
                                if (pwd.substr(i, 1) != pwd.substr(i, 1).toUpperCase()){
                                    hasLowerCase = true;
                                } else {
                                    hasSpecial = true;
                                };
                            };
                        };
                        i++;
                    };
                    if (hasNumerals){
                        pwdScore = (pwdScore + 1);
                    };
                    if (hasUpperCase){
                        pwdScore = (pwdScore + 1);
                    };
                    if (hasLowerCase){
                        pwdScore = (pwdScore + 1);
                    };
                    if (hasSpecial){
                        pwdScore = (pwdScore + 1);
                    };
                    if (evt){
                        if (GetActorID(evt.target.parent) == INP_PASSWORD){
                            if (pwdScore >= 3){
                                Show(IMG_PASSWORD_SMILEY_HAPPY);
                            } else {
                                if (pwdScore >= 2){
                                    Show(IMG_PASSWORD_SMILEY_NEUTRAL);
                                } else {
                                    Show(IMG_PASSWORD_SMILEY_SAD);
                                };
                            };
                        } else {
                            if (pwdScore >= 3){
                                Show(CNT_CHANGE_PASSWORD_SMILEY_HAPPY);
                            } else {
                                if (pwdScore >= 2){
                                    Show(CNT_CHANGE_PASSWORD_SMILEY_NEUTRAL);
                                } else {
                                    Show(CNT_CHANGE_PASSWORD_SMILEY_SAD);
                                };
                            };
                        };
                    } else {
                        if (pwdScore >= 3){
                            ChatLine("Your password is secure.");
                        } else {
                            if (pwdScore >= 2){
                                ChatLine("Your password is ok, could be better.");
                            } else {
                                ChatLine("Your password is insecure.");
                            };
                        };
                    };
                };
                var DoGotoSignup:* = function (evt:Event){
                    if (buffedMode){
                        navigateToURL(new URLRequest(buffedLinkURL));
                    } else {
                        ShowBuildCharacterScreen(evt);
                    };
                };
                var ShowAGB:* = function (evt:Event=undefined){
                    navigateToURL(new URLRequest(legal_url), "_blank");
                };
                var ShowForgotPasswordScreen:* = function (evt:Event=undefined):void{
                    RemoveAll();
                    actor[LBL_WINDOW_TITLE].text = txt[TXT_TITLE_FORGOT_PASSWORD];
                    actor[LBL_WINDOW_TITLE].x = ((POS_IF_WIN_X + REL_IF_WIN_WELCOME_X) - int((actor[LBL_WINDOW_TITLE].textWidth / 2)));
                    actor[INP_NAME].addEventListener(KeyboardEvent.KEY_DOWN, RequestPassword);
                    actor[INP_EMAIL].addEventListener(KeyboardEvent.KEY_DOWN, RequestPassword);
                    LogonRTL();
                    Add(BNC_WINDOW_FORGOT_PASSWORD);
                };
                RequestPassword = function (evt:Event):void{
                    if ((evt is KeyboardEvent)){
                        if (((((!((KeyboardEvent(evt).keyCode == 13))) && (!((KeyboardEvent(evt).keyCode == 10))))) && (!((KeyboardEvent(evt).keyCode == 16777230))))){
                            return;
                        };
                    };
                    SendAction(ACT_FORGOT_PASSWORD, actor[INP_NAME].getChildAt(1).text, actor[INP_EMAIL].getChildAt(1).text);
                };
                CheckAGB = function (evt:MouseEvent):void{
                    Add(CB_AGB_CHECKED);
                };
                UncheckAGB = function (evt:MouseEvent):void{
                    Remove(CB_AGB_CHECKED);
                };
                CheckFuck = function (evt:MouseEvent):void{
                    Add(CB_FUCK_CHECKED);
                };
                UncheckFuck = function (evt:MouseEvent):void{
                    Remove(CB_FUCK_CHECKED);
                };
                var PulseEvent:* = function (evt:Event){
                    var evt:* = evt;
                    var ButtonPulse:* = function (doPulse:Boolean, btnID:int){
                        var doPulse:* = doPulse;
                        var btnID:* = btnID;
                        var LabelPulse:* = function (obj:DisplayObjectContainer){
                            var obj:* = obj;
                            var _local3 = obj.getChildAt(1);
                            with (_local3) {
                                alpha = ((doPulse) ? ((Math.sin((((PulseLevel / 200) * 2) * Math.PI)) * 0.4) + 0.8) : 1);
                            };
                        };
                        PulseLevel = (PulseLevel + 1);
                        if (PulseLevel > 200){
                            PulseLevel = 0;
                        };
                        var _local4 = actor[btnID];
                        with (_local4) {
                            LabelPulse(upState);
                            LabelPulse(overState);
                            LabelPulse(downState);
                            LabelPulse(hitTestState);
                        };
                    };
                    if (Savegame.length == 0){
                        return;
                    };
                    if (int(Savegame[SG_ACTION_STATUS]) == 1){
                        if (!WaitingFor(Savegame[SG_ACTION_ENDTIME])){
                            PulseArbeiten = true;
                        };
                    };
                    if (int(Savegame[SG_ACTION_STATUS]) == 2){
                        if (!WaitingFor(Savegame[SG_ACTION_ENDTIME])){
                            PulseTaverne = true;
                        };
                    };
                    if (((((OnStage(IMG_TAVERNE_BG)) || (OnStage(IMG_FIGHT_BOX1)))) || (OnStage(IMG_QUESTBAR_BG)))){
                        PulseTaverne = false;
                    };
                    if (OnStage(LBL_SCR_ARBEITEN_TEXT)){
                        PulseArbeiten = false;
                    };
                    if (OnStage(IMG_GILDEN_BG)){
                        PulseGilde = false;
                        PulseGildeOnHistory = false;
                    };
                    if (OnStage(IMG_SCR_DEALER_BG)){
                        PulseDealer = false;
                    };
                    if (OnStage(CNT_POST_LIST)){
                        PulsePost = false;
                    };
                    if (((((OnStage(IMG_SCR_CHAR_BG_RIGHT)) || (OnStage(IMG_SCR_SHAKES_BG)))) || (OnStage(IMG_SCR_FIDGET_BG)))){
                        PulseChar = false;
                    };
                    if (((((((((((PulseTaverne) || (PulseArbeiten))) || (PulseGilde))) || (PulsePost))) || (PulseChar))) || (PulseDealer))){
                        PulseTimer.delay = 20;
                    } else {
                        PulseTimer.delay = 500;
                    };
                    ButtonPulse(PulseTaverne, BTN_IF_TAVERNE);
                    ButtonPulse(PulseArbeiten, BTN_IF_ARBEITEN);
                    ButtonPulse(PulseGilde, BTN_IF_GILDEN);
                    ButtonPulse(PulsePost, BTN_IF_POST);
                    ButtonPulse(PulseChar, BTN_IF_CHARAKTER);
                    ButtonPulse(PulseDealer, BTN_IF_PILZDEALER);
                };
                CloneMarker = function ():void{
                    var i:int;
                    SetCnt(IMG_M_ACT, IMG_VOLK_MARKER);
                    SetCnt(IMG_F_ACT, IMG_VOLK_MARKER);
                    SetCnt(IMG_KASTE_1_ACT, IMG_VOLK_MARKER);
                    SetCnt(IMG_KASTE_2_ACT, IMG_VOLK_MARKER);
                    SetCnt(IMG_KASTE_3_ACT, IMG_VOLK_MARKER);
                    i = 0;
                    while (i <= 7) {
                        SetCnt((IMG_VOLK_1_M_ACT + i), IMG_VOLK_MARKER);
                        SetCnt((IMG_VOLK_1_F_ACT + i), IMG_VOLK_MARKER);
                        i++;
                    };
                };
                SelectRace = function (evt:MouseEvent):void{
                    var actorID:int;
                    actorID = GetActorID(evt.target);
                    if ((((actorID >= IMG_VOLK_1_M_IDLE)) && ((actorID <= IMG_VOLK_8_M_IDLE)))){
                        CharVolk = ((actorID - IMG_VOLK_1_M_IDLE) + 1);
                        CharMann = true;
                    };
                    if ((((actorID >= IMG_VOLK_1_F_IDLE)) && ((actorID <= IMG_VOLK_8_F_IDLE)))){
                        CharVolk = ((actorID - IMG_VOLK_1_F_IDLE) + 1);
                        CharMann = false;
                    };
                    RandomizeCharImage();
                    if (OnStage(POPUP_INFO)){
                        Add(POPUP_INFO);
                    };
                };
                SelectGender = function (evt:MouseEvent):void{
                    var actorID:int;
                    actorID = GetActorID(evt.target);
                    if (actorID == IMG_M_IDLE){
                        CharMann = true;
                    };
                    if (actorID == IMG_F_IDLE){
                        CharMann = false;
                    };
                    RandomizeCharImage();
                    if (OnStage(POPUP_INFO)){
                        Add(POPUP_INFO);
                    };
                };
                SelectCaste = function (evt:MouseEvent):void{
                    var actorID:int;
                    actorID = GetActorID(evt.target);
                    KlasseGewählt = true;
                    if (actorID == IMG_KASTE_1_IDLE){
                        CharKaste = 1;
                    };
                    if (actorID == IMG_KASTE_2_IDLE){
                        CharKaste = 2;
                    };
                    if (actorID == IMG_KASTE_3_IDLE){
                        CharKaste = 3;
                    };
                    LoadCharacterImage();
                    if (OnStage(POPUP_INFO)){
                        Add(POPUP_INFO);
                    };
                };
                var AddMimickInterfaceButtonHoverHandler:* = function (actorID:int){
                    actor[actorID].addEventListener(MouseEvent.MOUSE_OVER, MimickInterfaceButtonHover);
                };
                MimickInterfaceButtonHover = function (evt:MouseEvent):void{
                    var tmpContainer:* = null;
                    var EndMimickInterfaceButtonHover:* = null;
                    var evt:* = evt;
                    var MimickHover:* = function (actorID:int){
                        tmpContainer = new MovieClip();
                        tmpContainer.x = actor[actorID].x;
                        tmpContainer.y = actor[actorID].y;
                        tmpContainer.addChild(actor[actorID].overState);
                        addChild(tmpContainer);
                    };
                    EndMimickInterfaceButtonHover = function (evt:MouseEvent):void{
                        if (getChildByName(tmpContainer.name)){
                            removeChild(tmpContainer);
                        };
                    };
                    evt.target.addEventListener(MouseEvent.MOUSE_OUT, EndMimickInterfaceButtonHover);
                    switch (GetActorID(evt.target)){
                        case CA_CITY_SHAKES:
                            MimickHover(BTN_IF_SCHMIEDE);
                            break;
                        case CA_CITY_ZAUBERLADEN:
                            MimickHover(BTN_IF_ZAUBERLADEN);
                            break;
                        case CA_CITY_RUHMESHALLE:
                            MimickHover(BTN_IF_EHRENHALLE);
                            break;
                        case CA_CITY_ARENA:
                            MimickHover(BTN_IF_ARENA);
                            break;
                        case CA_CITY_DEALER:
                            MimickHover(BTN_IF_PILZDEALER);
                            break;
                        case CA_CITY_ESEL:
                            MimickHover(BTN_IF_STALL);
                            break;
                        case CA_CITY_TAVERNE:
                            MimickHover(BTN_IF_TAVERNE);
                            break;
                        case CA_CITY_POST:
                            MimickHover(BTN_IF_POST);
                            break;
                        case CA_CITY_WACHE:
                            MimickHover(BTN_IF_ARBEITEN);
                            break;
                    };
                };
                BuhHover = function ():void{
                    Buh = true;
                };
                BuhOut = function ():void{
                    Buh = false;
                };
                Bubbles = function (evt:Event):void{
                    var evt:* = evt;
                    var BubbleFade:* = function (inOut:Boolean, bubbleID:int):void{
                        if (inOut){
                            if (((((!(OnStage(bubbleID))) && (!(OnStage(CA_SCR_ARBEITEN_BLOCKCITY))))) && (!(OnStage(CA_SCR_INVITE_BLOCKCITY))))){
                                Add(bubbleID);
                                Add(BNC_CITY_CA_OVL);
                                actor[bubbleID].alpha = 0;
                                BubbleWait = 30;
                            } else {
                                if (actor[bubbleID].alpha < 1){
                                    if (((OnStage(CA_SCR_ARBEITEN_BLOCKCITY)) || (OnStage(CA_SCR_INVITE_BLOCKCITY)))){
                                        Remove(bubbleID);
                                        actor[bubbleID].alpha = 0;
                                        BubbleWait = 0;
                                    } else {
                                        if (BubbleWait > 0){
                                            BubbleWait--;
                                        } else {
                                            Add(bubbleID);
                                            Add(BNC_CITY_CA_OVL);
                                            if (lightMode){
                                                actor[bubbleID].alpha = 1;
                                            } else {
                                                actor[bubbleID].alpha = (actor[bubbleID].alpha + 0.1);
                                            };
                                        };
                                    };
                                } else {
                                    if (((OnStage(CA_SCR_ARBEITEN_BLOCKCITY)) || (OnStage(CA_SCR_INVITE_BLOCKCITY)))){
                                        Remove(bubbleID);
                                    };
                                };
                            };
                        } else {
                            if (OnStage(bubbleID)){
                                if (((OnStage(CA_SCR_ARBEITEN_BLOCKCITY)) || (OnStage(CA_SCR_INVITE_BLOCKCITY)))){
                                    Remove(bubbleID);
                                    actor[bubbleID].alpha = 0;
                                    BubbleWait = 0;
                                };
                                if (actor[bubbleID].alpha > 0){
                                    if (lightMode){
                                        actor[bubbleID].alpha = 0;
                                    } else {
                                        actor[bubbleID].alpha = (actor[bubbleID].alpha - 0.1);
                                    };
                                    Add(bubbleID);
                                    Add(BNC_CITY_CA_OVL);
                                    BubbleWait = 30;
                                };
                                if (actor[bubbleID].alpha == 0){
                                    Remove(bubbleID);
                                };
                            };
                        };
                    };
                    if (((((OnStage(IMG_SCR_CITY_MAIN_DAWN)) || (OnStage(IMG_SCR_CITY_MAIN_DAY)))) || (OnStage(IMG_SCR_CITY_MAIN_NIGHT)))){
                        BubbleTimer.delay = 20;
                    } else {
                        BubbleTimer.delay = 500;
                    };
                    BubbleFade(Buh, IMG_BUBBLE_STATUE);
                    BubbleFade(OnStage(IMG_CITY_ARENA), IMG_BUBBLE_ARENA);
                    BubbleFade(OnStage(IMG_CITY_ESEL2), IMG_BUBBLE_ESEL);
                    BubbleFade(OnStage(IMG_CITY_TAVERNE), IMG_BUBBLE_TAVERNE);
                    BubbleFade(OnStage(IMG_CITY_RUHMESHALLE), IMG_BUBBLE_RUHMESHALLE);
                    BubbleFade(OnStage(IMG_CITY_DEALER), IMG_BUBBLE_DEALER);
                    BubbleFade(OnStage(IMG_CITY_POST), IMG_BUBBLE_POST);
                    BubbleFade(((((((OnStage(IMG_CITY_SCHILD1)) || (OnStage(IMG_CITY_SCHILD2)))) || (OnStage(IMG_CITY_SCHILD3)))) || (OnStage(IMG_CITY_SCHILD4))), IMG_BUBBLE_WACHE);
                    BubbleFade(OnStage(IMG_CITY_SHAKES), IMG_BUBBLE_SHAKES);
                    BubbleFade(OnStage(IMG_CITY_ZAUBERLADEN), IMG_BUBBLE_ZAUBERLADEN);
                };
                CityAni = function (evt:Event):void{
                    if (!lightMode){
                        CityAniFrame++;
                        if ((((CityAniFrame == 5)) && (getChildByName(actor[IMG_CITY_ELF1].name)))){
                            Remove(IMG_CITY_ELF1);
                            Add(IMG_CITY_ELF2);
                            if (OnStage(IMG_BUBBLE_POST)){
                                Add(IMG_BUBBLE_POST);
                            };
                            Add(BNC_CITY_CA_OVL);
                        } else {
                            if (getChildByName(actor[IMG_CITY_ELF2].name)){
                                Remove(IMG_CITY_ELF2);
                                Add(IMG_CITY_ELF1);
                                if (OnStage(IMG_BUBBLE_POST)){
                                    Add(IMG_BUBBLE_POST);
                                };
                                Add(BNC_CITY_CA_OVL);
                            };
                        };
                        if ((((CityAniFrame == 3)) && ((int((Math.random() * 2)) == 0)))){
                            if (getChildByName(actor[IMG_CITY_ORK1].name)){
                                Remove(IMG_CITY_ORK1);
                                Add(IMG_CITY_ORK2);
                                DefineBunch(BNC_CITY_ORK, IMG_CITY_ORK2);
                                Add(BNC_CITY_CA_OVL);
                                if (OnStage(LBL_ERROR)){
                                    Add(LBL_ERROR);
                                };
                            } else {
                                if (getChildByName(actor[IMG_CITY_ORK2].name)){
                                    Remove(IMG_CITY_ORK2);
                                    Add(IMG_CITY_ORK1);
                                    DefineBunch(BNC_CITY_ORK, IMG_CITY_ORK1);
                                    Add(BNC_CITY_CA_OVL);
                                    if (OnStage(LBL_ERROR)){
                                        Add(LBL_ERROR);
                                    };
                                };
                            };
                        };
                        if ((((((CityAniFrame == 2)) && ((int((Math.random() * 2)) == 0)))) && (getChildByName(actor[IMG_CITY_ZWERG1].name)))){
                            Remove(IMG_CITY_ZWERG1);
                            Add(IMG_CITY_ZWERG2);
                            DefineBunch(BNC_CITY_ZWERG, IMG_CITY_ZWERG2);
                            Add(BNC_CITY_CA_OVL);
                        } else {
                            if ((((CityAniFrame == 3)) && (OnStage(IMG_CITY_ZWERG2)))){
                                Remove(IMG_CITY_ZWERG2);
                                Add(IMG_CITY_ZWERG1);
                                DefineBunch(BNC_CITY_ZWERG, IMG_CITY_ZWERG1);
                                Add(BNC_CITY_CA_OVL);
                            };
                        };
                        if (SandwichPause > 0){
                            SandwichPause--;
                        } else {
                            if (((((CityAniFrame % 2) == 0)) && (getChildByName(actor[IMG_CITY_SANDWICH1].name)))){
                                Remove(IMG_CITY_SANDWICH1);
                                Add(IMG_CITY_SANDWICH2);
                                if (OnStage(LBL_ERROR)){
                                    Add(LBL_ERROR);
                                };
                            };
                            if (((!(((CityAniFrame % 2) == 0))) && (getChildByName(actor[IMG_CITY_SANDWICH2].name)))){
                                Remove(IMG_CITY_SANDWICH2);
                                Add(IMG_CITY_SANDWICH1);
                                if (OnStage(LBL_ERROR)){
                                    Add(LBL_ERROR);
                                };
                                if (int((Math.random() * 8)) == 0){
                                    SandwichPause = 4;
                                };
                            };
                        };
                        if (ZwergFussTapp > 0){
                            if (((OnStage(IMG_CITY_MAGIER1)) || (OnStage(IMG_CITY_MAGIER2)))){
                                if ((ZwergFussTapp % 2) == 0){
                                    Remove(IMG_CITY_MAGIER1);
                                    Add(IMG_CITY_MAGIER2);
                                    if (OnStage(IMG_BUBBLE_WACHE)){
                                        Add(IMG_BUBBLE_WACHE);
                                    };
                                    if (OnStage(LBL_ERROR)){
                                        Add(LBL_ERROR);
                                    };
                                    Add(BNC_CITY_CA_OVL);
                                } else {
                                    Remove(IMG_CITY_MAGIER2);
                                    Add(IMG_CITY_MAGIER1);
                                    if (OnStage(IMG_BUBBLE_WACHE)){
                                        Add(IMG_BUBBLE_WACHE);
                                    };
                                    if (OnStage(LBL_ERROR)){
                                        Add(LBL_ERROR);
                                    };
                                    Add(BNC_CITY_CA_OVL);
                                };
                                ZwergFussTapp--;
                            };
                        } else {
                            if (((OnStage(IMG_CITY_MAGIER1)) && ((int((Math.random() * 15)) == 0)))){
                                ZwergFussTapp = 6;
                            };
                        };
                    };
                    if (CityAniFrame >= 10){
                        CityAniFrame = 0;
                    };
                    if (OnStage(CA_SCR_ARBEITEN_BLOCKCITY)){
                        if (OnStage(LBL_SCR_ARBEITEN_TIME)){
                            Add(BNC_SCREEN_ARBEITEN_WAIT);
                        } else {
                            if (OnStage(BTN_SCR_ARBEITEN_OK)){
                                Add(BNC_SCREEN_ARBEITEN);
                            } else {
                                Add(BNC_SCREEN_ARBEITEN_SUCCESS);
                            };
                        };
                    };
                    if (OnStage(CA_SCR_INVITE_BLOCKCITY)){
                        Add(BNC_SCREEN_INVITE);
                    };
                };
                WacheOver = function ():void{
                    SchildTimer.addEventListener(TimerEvent.TIMER, SchildFrame);
                    SchildTimer.start();
                    SchildDir = 1;
                };
                WacheOut = function ():void{
                    SchildTimer.addEventListener(TimerEvent.TIMER, SchildFrame);
                    SchildTimer.start();
                    SchildDir = -1;
                };
                SchildFrame = function (evt:Event):void{
                    if (((((!(((OnStage(IMG_CITY_WACHE_DAY)) || (OnStage(IMG_CITY_WACHE_NIGHT))))) || (OnStage(CA_SCR_ARBEITEN_BLOCKCITY)))) || (OnStage(CA_SCR_INVITE_BLOCKCITY)))){
                        SchildTimer.stop();
                        SchildTimer.removeEventListener(TimerEvent.TIMER, SchildFrame);
                        return;
                    };
                    Remove(IMG_CITY_SCHILD1, IMG_CITY_SCHILD2, IMG_CITY_SCHILD3, IMG_CITY_SCHILD4);
                    if (iFrame >= 0){
                        Add((IMG_CITY_SCHILD1 + iFrame));
                    };
                    Add(CA_CITY_WACHE);
                    if ((((iFrame < 0)) && ((SchildDir < 0)))){
                        iFrame = -1;
                        SchildTimer.stop();
                        SchildTimer.removeEventListener(TimerEvent.TIMER, SchildFrame);
                        return;
                    };
                    if ((((iFrame >= 3)) && ((SchildDir > 0)))){
                        iFrame = 3;
                        SchildTimer.stop();
                        SchildTimer.removeEventListener(TimerEvent.TIMER, SchildFrame);
                        return;
                    };
                    iFrame = (iFrame + SchildDir);
                };
                EselOver = function ():void{
                    Remove(IMG_CITY_ESEL1);
                };
                EselOut = function ():void{
                    if (((OnStage(IMG_STALL_BG_GUT)) || (OnStage(IMG_STALL_BG_BOESE)))){
                        return;
                    };
                    Add(IMG_CITY_ESEL1);
                    Add(BNC_CITY_CA_OVL);
                };
                ShowDealerEyes = function ():void{
                    if (((((OnStage(IMG_SCR_CITY_BACKG_NIGHT)) || (OnStage(IMG_SCR_CITY_BACKG_DAWN)))) || (OnStage(IMG_SCR_CITY_BACKG_DAY)))){
                        Add(IMG_CITY_DEALER_ANI5);
                        Add(CA_CITY_DEALER);
                        if (OnStage(CA_SCR_ARBEITEN_BLOCKCITY)){
                            if (OnStage(LBL_SCR_ARBEITEN_TIME)){
                                Add(BNC_SCREEN_ARBEITEN_WAIT);
                            } else {
                                if (OnStage(BTN_SCR_ARBEITEN_OK)){
                                    Add(BNC_SCREEN_ARBEITEN);
                                } else {
                                    Add(BNC_SCREEN_ARBEITEN_SUCCESS);
                                };
                            };
                        };
                        if (OnStage(CA_SCR_INVITE_BLOCKCITY)){
                            Add(BNC_SCREEN_INVITE);
                        };
                    };
                };
                HideDealerEyes = function ():void{
                    DealerStepTimer.stop();
                    DealerStepTimer.removeEventListener(TimerEvent.TIMER, DealerStep);
                };
                var DealerAni:* = function (evt:Event):void{
                    if (((((OnStage(IMG_SCR_CITY_BACKG_NIGHT)) || (OnStage(IMG_SCR_CITY_BACKG_DAWN)))) || (OnStage(IMG_SCR_CITY_BACKG_DAY)))){
                        if (!getChildByName(actor[IMG_CITY_DEALER].name)){
                            DealerStepTimer.addEventListener(TimerEvent.TIMER, DealerStep);
                            if (int((Math.random() * 5)) == 0){
                                DealerAniStep = 5;
                            } else {
                                DealerAniStep = 1;
                            };
                            DealerStepTimer.start();
                        };
                    } else {
                        DealerStepTimer.stop();
                        DealerStepTimer.removeEventListener(TimerEvent.TIMER, DealerStep);
                    };
                };
                DealerStep = function (evt:Event):void{
                    if (((((OnStage(IMG_SCR_CITY_BACKG_NIGHT)) || (OnStage(IMG_SCR_CITY_BACKG_DAWN)))) || (OnStage(IMG_SCR_CITY_BACKG_DAY)))){
                        switch (DealerAniStep){
                            case 1:
                                Add(IMG_CITY_DEALER_ANI2);
                                break;
                            case 2:
                                Add(IMG_CITY_DEALER_ANI1);
                                break;
                            case 3:
                                Add(IMG_CITY_DEALER_ANI2);
                                break;
                            case 4:
                                Add(IMG_CITY_DEALER_ANI5);
                                DealerAniStep = 0;
                                break;
                            case 5:
                            case 6:
                            case 7:
                                Add(IMG_CITY_DEALER_ANI3);
                                break;
                            case 8:
                                Add(IMG_CITY_DEALER_ANI5);
                                break;
                            case 9:
                            case 10:
                            case 11:
                                Add(IMG_CITY_DEALER_ANI4);
                                break;
                            case 12:
                                Add(IMG_CITY_DEALER_ANI5);
                                DealerAniStep = 0;
                                break;
                        };
                        Add(CA_CITY_DEALER);
                        if (OnStage(CA_SCR_ARBEITEN_BLOCKCITY)){
                            if (OnStage(LBL_SCR_ARBEITEN_TIME)){
                                Add(BNC_SCREEN_ARBEITEN_WAIT);
                            } else {
                                if (OnStage(BTN_SCR_ARBEITEN_OK)){
                                    Add(BNC_SCREEN_ARBEITEN);
                                } else {
                                    Add(BNC_SCREEN_ARBEITEN_SUCCESS);
                                };
                            };
                        };
                        if (OnStage(CA_SCR_INVITE_BLOCKCITY)){
                            Add(BNC_SCREEN_INVITE);
                        };
                        if (DealerAniStep == 0){
                            DealerStepTimer.stop();
                            DealerStepTimer.removeEventListener(TimerEvent.TIMER, DealerStep);
                            return;
                        };
                        DealerAniStep++;
                    };
                };
                ShowArenaOno = function ():void{
                    OnoTimer = new Timer(2000);
                    OnoTimer.addEventListener(TimerEvent.TIMER, PopupArenaOno);
                    OnoTimer.start();
                    PopupArenaOno();
                };
                HideArenaOno = function ():void{
                    if (OnoTimer){
                        OnoTimer.removeEventListener(TimerEvent.TIMER, PopupArenaOno);
                    };
                    OnoPopupTimer.removeEventListener(TimerEvent.TIMER, StepArenaOno);
                    Remove(ThisOno);
                };
                PopupArenaOno = function (evt:Event=undefined):void{
                    while (ThisOno == LastOno) {
                        ThisOno = (IMG_CITY_ARENA_ONO1 + int((Math.random() * 4)));
                    };
                    LastOno = ThisOno;
                    OnoPopupTimer.addEventListener(TimerEvent.TIMER, StepArenaOno);
                    OnoPopupTimer.start();
                    Add(ThisOno);
                    Add(CA_CITY_ARENA);
                    actor[ThisOno].alpha = 0;
                };
                StepArenaOno = function (evt:Event):void{
                    if (PopupDir){
                        actor[ThisOno].alpha = (actor[ThisOno].alpha - 0.1);
                        if (actor[ThisOno].alpha <= 0){
                            PopupDir = false;
                            Remove(ThisOno);
                            OnoPopupTimer.removeEventListener(TimerEvent.TIMER, StepArenaOno);
                        };
                    } else {
                        actor[ThisOno].alpha = (actor[ThisOno].alpha + 0.1);
                        if (actor[ThisOno].alpha >= 1){
                            PopupDir = true;
                        };
                    };
                };
                InterfaceButtonHover = function (evt:MouseEvent):void{
                    if (((((((((OnStage(IMG_SCR_CITY_BACKG_NIGHT)) || (OnStage(IMG_SCR_CITY_BACKG_DAWN)))) || (OnStage(IMG_SCR_CITY_BACKG_DAY)))) && (!(OnStage(CA_SCR_ARBEITEN_BLOCKCITY))))) && (!(OnStage(CA_SCR_INVITE_BLOCKCITY))))){
                        switch (GetActorID(evt.target)){
                            case BTN_IF_SCHMIEDE:
                                Add(IMG_CITY_SHAKES);
                                break;
                            case BTN_IF_ZAUBERLADEN:
                                Add(IMG_CITY_ZAUBERLADEN);
                                break;
                            case BTN_IF_EHRENHALLE:
                                Add(IMG_CITY_RUHMESHALLE);
                                Add(BNC_CITY_CA_OVL);
                                break;
                            case BTN_IF_ARENA:
                                Add(IMG_CITY_ARENA);
                                Add(BNC_CITY_CA_OVL);
                                ShowArenaOno();
                                break;
                            case BTN_IF_PILZDEALER:
                                Add(IMG_CITY_DEALER_ANI5);
                                Add(IMG_CITY_DEALER);
                                HideDealerEyes();
                                break;
                            case BTN_IF_STALL:
                                Add(IMG_CITY_ESEL2);
                                Remove(IMG_CITY_ESEL1);
                                Add(BNC_CITY_CA_OVL);
                                break;
                            case BTN_IF_TAVERNE:
                                Add(IMG_CITY_TAVERNE);
                                Add(BNC_CITY_ZWERG);
                                Add(BNC_CITY_CA_OVL);
                                break;
                            case BTN_IF_POST:
                                Add(IMG_CITY_POST);
                                Add(BNC_CITY_ORK);
                                Add(BNC_CITY_CA_OVL);
                                break;
                            case BTN_IF_ARBEITEN:
                                WacheOver();
                                break;
                        };
                        if (OnStage(CA_SCR_ARBEITEN_BLOCKCITY)){
                            Add(BNC_SCREEN_ARBEITEN);
                        };
                        if (OnStage(CA_SCR_INVITE_BLOCKCITY)){
                            Add(BNC_SCREEN_INVITE);
                        };
                    };
                };
                ExitScreen = function (evt:Event=undefined){
                    if (OnStage(IMG_TOILET)){
                        SendAction(ACT_SCREEN_TAVERNE);
                    } else {
                        if (OnStage(IMG_WITCH)){
                            SendAction(ACT_SCREEN_ZAUBERLADEN);
                        } else {
                            if (((OnStage(CNT_TOWER_SCROLLAREA)) || (OnStage(LBL_MAINQUEST_TITLE)))){
                                SendAction(ACT_SCREEN_WELTKARTE);
                            } else {
                                ShowCityScreen();
                            };
                        };
                    };
                };
                HalleSuchClick = function (evt:Event):void{
                    if (actor[INP_HALLE_GOTO].getChildAt(1).text == txt[TXT_HALLE_SUCHFELD_TEXT]){
                        actor[INP_HALLE_GOTO].getChildAt(1).text = "";
                    };
                };
                RuhmesHalleScroll = function (evt:Event):void{
                    var evt:* = evt;
                    if ((evt is KeyboardEvent)){
                        if (((((!((KeyboardEvent(evt).keyCode == 13))) && (!((KeyboardEvent(evt).keyCode == 10))))) && (!((KeyboardEvent(evt).keyCode == 16777230))))){
                            return;
                        };
                    };
                    switch (GetActorID(evt.target)){
                        case CNT_HALL_GOTO_SPIELER:
                            ruhmesHalleSuchName = true;
                            ruhmesHalleSuchString = actor[INP_NAME].getChildAt(1).text;
                            SendAction(ACT_SCREEN_EHRENHALLE, actor[INP_NAME].getChildAt(1).text, -1);
                            break;
                        case CNT_HALL_GOTO_GILDEN:
                            if (Savegame[SG_GUILD_INDEX] > 0){
                                ruhmesHalleSuchName = true;
                                ruhmesHalleSuchString = Gilde;
                                SendAction(ACT_SCREEN_GILDENHALLE, "", Savegame[SG_GUILD_INDEX], 0);
                            } else {
                                ruhmesHalleSuchName = false;
                                ruhmesHalleSuchString = "";
                                SendAction(ACT_SCREEN_GILDENHALLE, "", 0, 1);
                            };
                            break;
                        case BTN_HALLE_UP:
                            if (GuildHallMode){
                                SendAction(ACT_SCREEN_GILDENHALLE, "", "0", (Math.abs(int(actor[CNT_HALL_LIST].getChildAt(((6 * 7) + 5)).text)) - 15));
                            } else {
                                SendAction(ACT_SCREEN_EHRENHALLE, "", (Math.abs(int(actor[CNT_HALL_LIST].getChildAt(((6 * 7) + 5)).text)) - 15));
                            };
                            break;
                        case BTN_HALLE_DOWN:
                            if (GuildHallMode){
                                SendAction(ACT_SCREEN_GILDENHALLE, "", "0", (Math.abs(int(actor[CNT_HALL_LIST].getChildAt(((6 * 7) + 5)).text)) + 15));
                            } else {
                                SendAction(ACT_SCREEN_EHRENHALLE, "", (Math.abs(int(actor[CNT_HALL_LIST].getChildAt(((6 * 7) + 5)).text)) + 15));
                            };
                            break;
                        default:
                            ruhmesHalleSuchString = actor[INP_HALLE_GOTO].getChildAt(1).text;
                            if ((((((((ruhmesHalleSuchString.toLowerCase() == "/s [p: 332]")) || ((ruhmesHalleSuchString.toLowerCase() == "/s[p: 332]")))) || ((ruhmesHalleSuchString.toLowerCase() == "/s [p:332]")))) || ((ruhmesHalleSuchString.toLowerCase() == "/s[p:332]")))){
                                Play(SND_MOUNT_1);
                                SendAction(ACT_SEND_CHAT, EncodeChat("Moo!"), lastChatIndex);
                                if (textDir == "right"){
                                    var _local3 = actor[IMG_IF_GOLD];
                                    with (_local3) {
                                        x = POS_IF_LBL_GOLDPILZE_X;
                                    };
                                    _local3 = actor[LBL_IF_GOLD];
                                    with (_local3) {
                                        text = "0";
                                        x = ((POS_IF_LBL_GOLDPILZE_X - textWidth) - 10);
                                    };
                                    _local3 = actor[IMG_IF_SILBER];
                                    with (_local3) {
                                        x = ((actor[LBL_IF_GOLD].x - width) - 10);
                                    };
                                    _local3 = actor[LBL_IF_SILBER];
                                    with (_local3) {
                                        text = "00";
                                        x = ((actor[IMG_IF_SILBER].x - textWidth) - 10);
                                    };
                                    _local3 = actor[LBL_IF_PILZE];
                                    with (_local3) {
                                        text = "0";
                                        x = ((POS_IF_LBL_GOLDPILZE_X - textWidth) - 10);
                                    };
                                    EnablePopup(LBL_IF_PILZE);
                                } else {
                                    _local3 = actor[LBL_IF_SILBER];
                                    with (_local3) {
                                        text = "00";
                                        x = ((POS_IF_LBL_GOLDPILZE_X - textWidth) - 10);
                                    };
                                    _local3 = actor[IMG_IF_GOLD];
                                    with (_local3) {
                                        x = ((actor[LBL_IF_SILBER].x - 24) - 10);
                                    };
                                    _local3 = actor[LBL_IF_GOLD];
                                    with (_local3) {
                                        text = "0";
                                        x = ((actor[IMG_IF_GOLD].x - textWidth) - 10);
                                    };
                                    _local3 = actor[LBL_IF_PILZE];
                                    with (_local3) {
                                        text = "0";
                                        x = ((POS_IF_LBL_GOLDPILZE_X - textWidth) - 10);
                                    };
                                    EnablePopup(LBL_IF_PILZE);
                                };
                            };
                            if (int(actor[INP_HALLE_GOTO].getChildAt(1).text) > 0){
                                ruhmesHalleSuchName = false;
                                if (GuildHallMode){
                                    SendAction(ACT_SCREEN_GILDENHALLE, "", "0", int(actor[INP_HALLE_GOTO].getChildAt(1).text));
                                } else {
                                    SendAction(ACT_SCREEN_EHRENHALLE, "", int(actor[INP_HALLE_GOTO].getChildAt(1).text));
                                };
                            } else {
                                ruhmesHalleSuchName = true;
                                if (GuildHallMode){
                                    SendAction(ACT_SCREEN_GILDENHALLE, actor[INP_HALLE_GOTO].getChildAt(1).text, "0", "0");
                                } else {
                                    SendAction(ACT_SCREEN_EHRENHALLE, actor[INP_HALLE_GOTO].getChildAt(1).text, -1);
                                };
                            };
                    };
                };
                RemoveInviteWindow = function (evt:Event=undefined){
                    RemoveAll();
                    ShowCityScreen();
                };
                SendPlayerInvite = function (evt:Event=undefined){
                    if ((evt is KeyboardEvent)){
                        if (((((!((KeyboardEvent(evt).keyCode == 13))) && (!((KeyboardEvent(evt).keyCode == 10))))) && (!((KeyboardEvent(evt).keyCode == 16777230))))){
                            return;
                        };
                    };
                    if (((!((actor[INP_CHAR_INVITE].getChildAt(1).text == ""))) && (!((actor[INP_CHAR_INVITE2].getChildAt(1).text == ""))))){
                        SendAction(ACT_INVITE_PLAYER, actor[INP_CHAR_INVITE].getChildAt(1).text.split(";").join("AAASEMIAAA"), actor[INP_CHAR_INVITE2].getChildAt(1).text.split(";").join("AAASEMIAAA"));
                    } else {
                        ErrorMessage(txt[TXT_ERROR_INPUT_REQUIRED]);
                    };
                };
                var GotoPlayerGilde:* = function (evt:MouseEvent){
                    if (OnStage(CNT_TOWER_SCROLLAREA)){
                        return;
                    };
                    if (SelectedGuild != ""){
                        if (SelectedGuild == Gilde){
                            SendAction(ACT_SCREEN_GILDEN);
                        } else {
                            SendAction(ACT_SCREEN_FREMDGILDE, SelectedGuild);
                        };
                    };
                };
                PrevPlayer = function (evt:MouseEvent=undefined){
                    if (arrowHallMode){
                        selName = lastHallMembers[indexInHall];
                        SendAction(ACT_REQUEST_CHAR, lastHallMembers[indexInHall]);
                    } else {
                        selName = lastGuildMembers[indexInGuild];
                        SendAction(ACT_REQUEST_CHAR, lastGuildMembers[indexInGuild]);
                    };
                };
                NextPlayer = function (evt:MouseEvent=undefined){
                    if (arrowHallMode){
                        selName = lastHallMembers[(indexInHall + 2)];
                        SendAction(ACT_REQUEST_CHAR, lastHallMembers[(indexInHall + 2)]);
                    } else {
                        selName = lastGuildMembers[(indexInGuild + 2)];
                        SendAction(ACT_REQUEST_CHAR, lastGuildMembers[(indexInGuild + 2)]);
                    };
                };
                var JumpToPlayerHall:* = function (evt:Event=undefined){
                    ruhmesHalleSuchString = lastPlayer;
                    ruhmesHalleSuchName = true;
                    SendAction(ACT_SCREEN_EHRENHALLE, ruhmesHalleSuchString, -1);
                };
                var EnterPlayerDesc:* = function (evt:FocusEvent){
                    var evt:* = evt;
                    var _local3 = actor[INP_CHARDESC].getChildAt(0);
                    with (_local3) {
                        if (type == TextFieldType.INPUT){
                            if (text == txt[TXT_ENTERDESC]){
                                text = "";
                            };
                        };
                    };
                };
                var LeavePlayerDesc:* = function (evt:FocusEvent){
                    var evt:* = evt;
                    var _local3 = actor[INP_CHARDESC].getChildAt(0);
                    with (_local3) {
                        if (type == TextFieldType.INPUT){
                            if (text != PlayerDesc){
                                SendAction(ACT_SET_PLAYER_DESC, RemoveIllegalChars(SemiStrip(text)));
                            };
                            if (text == ""){
                                text = txt[TXT_ENTERDESC];
                            };
                        };
                    };
                };
                RequestAlbum = function (evt:Event=undefined){
                    SendAction(ACT_ALBUM);
                    ShowScreenAlbum();
                };
                PlayerGuildInviteCancel = function (evt:Event=undefined){
                    if (!OnStage(BTN_PLAYER_GUILD_INVITE)){
                        return;
                    };
                    Remove(BNC_GILDE_DIALOG_INVITE);
                };
                PlayerGuildInviteOK = function (evt:Event=undefined){
                    if (!OnStage(BTN_PLAYER_GUILD_INVITE)){
                        return;
                    };
                    SendAction(ACT_GUILD_INVITE, actor[INP_NAME].getChildAt(1).text, Gilde, actor[INP_GILDE_DIALOG_INVITE].getChildAt(1).text, MD5(actor[INP_LOGIN_PASSWORD].getChildAt(1).text), "");
                };
                PlayerGuildInvite = function (evt:Event=undefined){
                    var evt:* = evt;
                    Add(BNC_GILDE_DIALOG_INVITE);
                    actor[INP_GILDE_DIALOG_INVITE].getChildAt(1).text = lastPlayer;
                    var _local3 = actor[LBL_WINDOW_TITLE];
                    with (_local3) {
                        text = txt[TXT_GILDE_INVITE_TITLE];
                        x = ((POS_IF_WIN_X + REL_IF_WIN_WELCOME_X) - int((textWidth / 2)));
                    };
                };
                var RequestStableScreen:* = function (evt:Event){
                    SendAction(ACT_SCREEN_STALL);
                };
                ZurGilde = function (evt:Event=undefined){
                    SendAction(ACT_SCREEN_GILDEN);
                };
                PlayerSendMessage = function (){
                    ShowPostScreen();
                };
                PlayerAttack = function (){
                    if (WaitingFor(Savegame[SG_PVP_REROLL_TIME])){
                        var _local2 = actor[LBL_IF_PILZE];
                        with (_local2) {
                            if (int(Savegame[SG_MUSH]) > 0){
                                text = String((int(Savegame[SG_MUSH]) - 1));
                            };
                            x = ((POS_IF_LBL_GOLDPILZE_X - textWidth) - 10);
                        };
                        EnablePopup(LBL_IF_PILZE);
                    };
                    SendAction(ACT_START_FIGHT, selName);
                    if (lastAttacked.indexOf(selName.toLowerCase()) == -1){
                        lastAttacked.push(selName.toLowerCase());
                    };
                };
                PlayerInvite = function (){
                    var ShowInviteScreen:* = null;
                    ShowInviteScreen = function (){
                        RemoveAll();
                        ShowCityScreen();
                        Hide(BNC_INVITE_SUCCESS);
                        Show(BNC_INVITE_INPUTDIALOGUE);
                        actor[INP_CHAR_INVITE].getChildAt(1).text = "";
                        stage.focus = actor[INP_CHAR_INVITE].getChildAt(1);
                        actor[INP_CHAR_INVITE2].getChildAt(1).text = "";
                        actor[LBL_WINDOW_TITLE].text = txt[TXT_INVITETITLE];
                        actor[LBL_WINDOW_TITLE].x = ((POS_IF_WIN_X + REL_IF_WIN_WELCOME_X) - int((actor[LBL_WINDOW_TITLE].textWidth / 2)));
                        Add(BNC_SCREEN_INVITE);
                    };
                    Load(BNC_SCREEN_INVITE);
                    WhenLoaded(ShowInviteScreen);
                };
                var BoostBtnDownHandler:* = function (evt:Event){
                    var ClickCount:* = 0;
                    var evt:* = evt;
                    var DoPushBoostBtn:* = function (timerevt:Event){
                        var timerevt:* = timerevt;
                        if (DestroyBoostBtnTimer){
                            DestroyBoostBtnTimer = false;
                            var _local3 = BoostBtnRepeatTimer;
                            with (_local3) {
                                stop();
                                delay = 1000;
                                removeEventListener(TimerEvent.TIMER, DoPushBoostBtn);
                            };
                        } else {
                            ClickCount++;
                            switch (ClickCount){
                                case 1:
                                    BoostBtnRepeatTimer.delay = 500;
                                    break;
                                case 3:
                                    BoostBtnRepeatTimer.delay = 250;
                                    break;
                            };
                            if (BoostAttribute(evt)){
                                Play(SND_CLICK);
                            };
                        };
                    };
                    ClickCount = 0;
                    if (BoostBtnRepeatTimer.running){
                        return;
                    };
                    DestroyBoostBtnTimer = false;
                    var _local3 = BoostBtnRepeatTimer;
                    with (_local3) {
                        delay = 1000;
                        addEventListener(TimerEvent.TIMER, DoPushBoostBtn);
                        start();
                    };
                };
                var BoostBtnUpHandler:* = function (evt:Event){
                    if (BoostBtnRepeatTimer.running){
                        DestroyBoostBtnTimer = true;
                    };
                };
                BoostAttribute = function (evt:Event):Boolean{
                    if (canBoost[(GetActorID(evt.target) - BTN_SCR_CHAR_STEIGERN1)]){
                        SendAction(ACT_BUY_ATTRIB, ((GetActorID(evt.target) - BTN_SCR_CHAR_STEIGERN1) + 1));
                    };
                    return (canBoost[(GetActorID(evt.target) - BTN_SCR_CHAR_STEIGERN1)]);
                };
                BoostBtnTimerFunction = function (evt:TimerEvent){
                    if (BoostBtnChange > 1){
                        BoostBtnChange--;
                        return;
                    };
                    if (BoostBtnChange == 1){
                        BoostBtnChange = 0;
                        if (inBoostBtn){
                            if (lightMode){
                                SetAlpha(BNC_CHAR_PREISE, 1);
                                SetAlpha(BNC_CHAR_SECONDPROP, 0);
                            } else {
                                FadeIn(BNC_CHAR_PREISE, 20, 0.2);
                                FadeOut(BNC_CHAR_SECONDPROP, 20, 0.2);
                            };
                        } else {
                            if (OnStage(LBL_SCR_CHAR_PREIS1)){
                                if (lightMode){
                                    Add(BNC_CHAR_SECONDPROP);
                                    if (OnStage(POPUP_INFO)){
                                        Add(POPUP_INFO);
                                    };
                                    SetAlpha(BNC_CHAR_PREISE, 0);
                                    SetAlpha(BNC_CHAR_SECONDPROP, 1);
                                } else {
                                    FadeOut(BNC_CHAR_PREISE, 20, 0.2);
                                    Add(BNC_CHAR_SECONDPROP);
                                    if (OnStage(POPUP_INFO)){
                                        Add(POPUP_INFO);
                                    };
                                    FadeIn(BNC_CHAR_SECONDPROP, 20, 0.2);
                                };
                            };
                        };
                    };
                };
                var BoostBtnOver:* = function (evt:Event){
                    if (!inBoostBtn){
                        BoostBtnChange = 6;
                    };
                    inBoostBtn = true;
                };
                var BoostBtnOut:* = function (evt:Event){
                    if (inBoostBtn){
                        BoostBtnChange = 6;
                    };
                    inBoostBtn = false;
                };
                InventoryItemMouseDown = function (evt:MouseEvent){
                    if (((((OnStage(IMG_SCR_FIDGET_BG)) || (OnStage(IMG_SCR_SHAKES_BG)))) || (OnStage(CNT_TOWER_SCROLLAREA)))){
                        Add(CA_SELL_ITEM);
                    };
                };
                BackpackItemMouseDown = function (evt:MouseEvent){
                    Add(CA_USE_ITEM);
                };
                InventoryItemMouseUp = function (evt:MouseEvent){
                    Remove(CA_SELL_ITEM);
                    Remove(CA_USE_ITEM);
                };
                DropHandler = function (actorID:int, targetID:int):Boolean{
                    var towerMode:Boolean;
                    var sourceSlot:int;
                    var targetSlot:int;
                    towerMode = OnStage(BTN_PREV_COPYCAT);
                    trc("dragdrop", actorID, targetID, towerMode);
                    sourceSlot = 0;
                    targetSlot = 0;
                    if (targetID == CA_SELL_ITEM){
                        trc("sell item");
                        if ((((actorID >= CNT_CHAR_SLOT_1)) && ((actorID <= CNT_CHAR_SLOT_15)))){
                            trc("selling can be done");
                            sourceSlot = ((actorID - CNT_CHAR_SLOT_1) + 1);
                            if (towerMode){
                                trc("impossible here");
                                return (false);
                            };
                            SendAction(ACT_INVENTORY_CHANGE, (((sourceSlot <= 10)) ? 1 : (((sourceSlot <= 15)) ? 2 : (((sourceSlot <= 21)) ? 4 : 3))), (sourceSlot - (((sourceSlot <= 10)) ? 0 : (((sourceSlot <= 15)) ? 10 : (((sourceSlot <= 21)) ? 15 : 21)))), 0, 0);
                            return (true);
                        };
                        trc("wrong source");
                    } else {
                        if (targetID == CA_USE_ITEM){
                            trc("use item");
                            if ((((actorID >= CNT_CHAR_SLOT_10)) && ((actorID <= CNT_CHAR_SLOT_SHAKES_6)))){
                                trc("using can be done");
                                sourceSlot = ((actorID - CNT_CHAR_SLOT_1) + 1);
                                if (towerMode){
                                    SendAction(ACT_MOVE_COPYCAT_ITEM, 2, (sourceSlot - 10), (copyCatSel + 101), -1);
                                } else {
                                    SendAction(ACT_INVENTORY_CHANGE, (((sourceSlot <= 10)) ? 1 : (((sourceSlot <= 15)) ? 2 : (((sourceSlot <= 21)) ? 4 : 3))), (sourceSlot - (((sourceSlot <= 10)) ? 0 : (((sourceSlot <= 15)) ? 10 : (((sourceSlot <= 21)) ? 15 : 21)))), 1, -1);
                                };
                                return (true);
                            };
                            trc("wrong source");
                        } else {
                            if (targetID == CA_CHALDRON){
                                if ((((actorID >= CNT_CHAR_SLOT_1)) && ((actorID <= CNT_CHAR_SLOT_15)))){
                                    trc("donating to witch can be done");
                                    sourceSlot = ((actorID - CNT_CHAR_SLOT_1) + 1);
                                    if (towerMode){
                                        trc("impossible here");
                                        return (false);
                                    };
                                    SendAction(ACT_WITCH_DONATE, (((sourceSlot <= 10)) ? 1 : (((sourceSlot <= 15)) ? 2 : (((sourceSlot <= 21)) ? 4 : 3))), (sourceSlot - (((sourceSlot <= 10)) ? 0 : (((sourceSlot <= 15)) ? 10 : (((sourceSlot <= 21)) ? 15 : 21)))));
                                    return (true);
                                };
                                trc("wrong source");
                            } else {
                                trc("moving items around");
                                if ((((((actorID >= CNT_CHAR_SLOT_1)) && ((actorID <= CNT_CHAR_SLOT_SHAKES_6)))) && (!((targetID == CA_TOILET_BOWL))))){
                                    trc("source is ok");
                                    sourceSlot = ((actorID - CNT_CHAR_SLOT_1) + 1);
                                    if ((((targetID >= CNT_CHAR_SLOT_1)) && ((targetID <= CNT_CHAR_SLOT_SHAKES_6)))){
                                        trc("target is ok");
                                        targetSlot = ((targetID - CNT_CHAR_SLOT_1) + 1);
                                        if (towerMode){
                                            if (towerSG[(((((sourceSlot <= 10)) ? ((TSG_COPYCATS + (copyCatSel * SIZE_COPYCAT)) + CPC_ITEMS) : TSG_LOOT_SACK) + ((((sourceSlot <= 10)) ? (sourceSlot - 1) : (sourceSlot - 11)) * SG_ITM_SIZE)) + SG_ITM_TYP)] > 0){
                                                trc("do it");
                                                SendAction(ACT_MOVE_COPYCAT_ITEM, (((sourceSlot <= 10)) ? (copyCatSel + 101) : 2), (((sourceSlot <= 10)) ? sourceSlot : (sourceSlot - 10)), (((targetSlot <= 10)) ? (copyCatSel + 101) : 2), (((targetSlot <= 10)) ? targetSlot : (targetSlot - 10)));
                                                return (true);
                                            };
                                            trc("source slot empty");
                                        } else {
                                            if (Savegame[(((((sourceSlot <= 15)) ? SG_INVENTORY_OFFS : (((sourceSlot <= 21)) ? SG_FIDGET_ITEM1 : SG_SHAKES_ITEM1)) + ((sourceSlot - (((sourceSlot <= 15)) ? 1 : (((sourceSlot <= 21)) ? 16 : 22))) * SG_ITM_SIZE)) + SG_ITM_TYP)] > 0){
                                                trc("do it");
                                                SendAction(ACT_INVENTORY_CHANGE, (((sourceSlot <= 10)) ? 1 : (((sourceSlot <= 15)) ? 2 : (((sourceSlot <= 21)) ? 4 : 3))), (sourceSlot - (((sourceSlot <= 10)) ? 0 : (((sourceSlot <= 15)) ? 10 : (((sourceSlot <= 21)) ? 15 : 21)))), (((targetSlot <= 10)) ? 1 : (((targetSlot <= 15)) ? 2 : (((targetSlot <= 21)) ? 4 : 3))), (targetSlot - (((targetSlot <= 10)) ? 0 : (((targetSlot <= 15)) ? 10 : (((targetSlot <= 21)) ? 15 : 21)))));
                                                return (true);
                                            };
                                            trc("source slot empty");
                                        };
                                    } else {
                                        trc("target wrong");
                                    };
                                } else {
                                    if (targetID == CA_TOILET_BOWL){
                                        trc("drop in toilet");
                                        if ((((actorID >= CNT_CHAR_SLOT_10)) && ((actorID <= CNT_CHAR_SLOT_SHAKES_6)))){
                                            sourceSlot = ((actorID - CNT_CHAR_SLOT_1) + 1);
                                            SendAction(ACT_INVENTORY_CHANGE, (((sourceSlot <= 10)) ? 1 : (((sourceSlot <= 15)) ? 2 : (((sourceSlot <= 21)) ? 4 : 3))), (sourceSlot - (((sourceSlot <= 10)) ? 0 : (((sourceSlot <= 15)) ? 10 : (((sourceSlot <= 21)) ? 15 : 21)))), 10, 0);
                                            Show(IMG_TOILET_DROP);
                                            return (true);
                                        };
                                    } else {
                                        trc("source wrong");
                                    };
                                };
                            };
                        };
                    };
                    return (false);
                };
                PotionSingleClick = function (evt:Event=undefined){
                };
                PotionDoubleClick = function (evt:Event=undefined){
                    if (!OnStage(BTN_CHAR_MESSAGE)){
                        SendAction(ACT_KILL_POTION, ((GetActorID(evt.target) - CNT_CHAR_POTION) + 1));
                    };
                };
                var OpenFriendLink:* = function (evt:Event){
                    navigateToURL(new URLRequest(((("mailto:?subject=" + txt[TXT_FRIEND_SUBJECT].split(" ").join("%20").split("&").join("%26")) + "&body=") + FriendLink)));
                };
                var TowerScrollSingle:* = function (evt:Event){
                };
                towerBoostPriceFadeout = function (evt:TimerEvent){
                    FadeOut(BNC_TOWER_BOOSTPRICE);
                };
                towerLevelLabelMoveFn = function (evt:TimerEvent){
                    if (Math.abs((actor[LBL_TOWER_EXPLABEL].x - towerLevelLabelPos)) >= 1){
                        actor[LBL_TOWER_EXPLABEL].x = ((actor[LBL_TOWER_EXPLABEL].x + towerLevelLabelPos) / 2);
                    } else {
                        actor[LBL_TOWER_EXPLABEL].x = towerLevelLabelPos;
                        towerLevelLabelTimer.stop();
                    };
                };
                ShowTowerBoostPrices = function (evt:MouseEvent){
                    var i:int;
                    towerBoostPriceFadeoutTimer.stop();
                    FadeIn(BNC_TOWER_BOOSTPRICE);
                    towerLevelLabelPos = (POS_SCR_CHAR_CHARIMG_X + 3);
                    towerLevelLabelTimer.start();
                };
                HideTowerBoostPrices = function (evt:MouseEvent){
                    var i:int;
                    towerBoostPriceFadeoutTimer.start();
                    towerLevelLabelPos = ((POS_SCR_CHAR_CHARIMG_X + 127) - int((actor[LBL_TOWER_EXPLABEL].textWidth / 2)));
                    towerLevelLabelTimer.start();
                };
                BoostCopycat = function (){
                    SendAction(ACT_COPYCAT_BOOST, (copyCatSel + 1), ((towerSG[((TSG_COPYCATS + (SIZE_COPYCAT * copyCatSel)) + CPC_LEVEL)] * 1) + 1));
                };
                ShopAniFrame = function (evt:TimerEvent){
                    var pv:Boolean;
                    var AffeStep:int;
                    var FidgetAugenZu:Boolean;
                    var ShakesAugenZu:int;
                    var WasPassiert:Boolean;
                    pv = OnStage(POPUP_INFO);
                    WasPassiert = false;
                    if (dragDropActive){
                        PlayerIdle = false;
                        WasIdleCount = 0;
                        ShopIdle = 0;
                        Remove(IMG_FIDGET_DAY);
                        Remove(IMG_FIDGET_IDLE);
                        SaleRecoverTime = 10;
                        return;
                    };
                    if (ShopIdle == 400){
                        PlayerIdle = true;
                        WasPassiert = true;
                        if (OnStage(IMG_SCR_SHAKES_BG)){
                            if (WasIdleCount > 2){
                                ShakesIdlePhase = 4;
                                ShakesIdleStep = 0;
                            } else {
                                ShakesIdleStep++;
                                switch (int(ShakesIdleStep)){
                                    case 1:
                                    case 5:
                                    case 9:
                                    case 12:
                                    case 15:
                                    case 19:
                                    case 23:
                                    case 27:
                                    case 33:
                                        ShakesIdlePhase = 1;
                                        break;
                                    case 2:
                                    case 4:
                                    case 6:
                                    case 8:
                                    case 10:
                                    case 13:
                                    case 16:
                                    case 18:
                                    case 20:
                                    case 22:
                                    case 24:
                                    case 26:
                                    case 28:
                                    case 31:
                                        ShakesIdlePhase = 2;
                                        break;
                                    case 3:
                                    case 7:
                                    case 11:
                                    case 14:
                                    case 17:
                                    case 21:
                                    case 25:
                                    case 29:
                                        ShakesIdlePhase = 3;
                                        break;
                                    case 35:
                                        WasIdleCount++;
                                        PlayerIdle = false;
                                        ShakesIdlePhase = 0;
                                        ShopIdle = 0;
                                        ShakesIdleStep = 0;
                                        break;
                                    default:
                                        WasPassiert = false;
                                };
                            };
                        };
                    } else {
                        ShopIdle++;
                    };
                    if (SaleRecoverTime > 0){
                        SaleRecoverTime--;
                        if (SaleRecoverTime == 0){
                            WasPassiert = true;
                        };
                    };
                    if (OnStage(IMG_SCR_SHAKES_BG)){
                        ShakesBlinzeln++;
                        if (ShakesBlinzeln > 73){
                            ShakesBlinzeln = int((Math.random() * 30));
                            WasPassiert = true;
                            ShakesAugenZu = 0;
                        } else {
                            if (ShakesBlinzeln > 72){
                                WasPassiert = true;
                                ShakesAugenZu = 0;
                            } else {
                                if (ShakesBlinzeln > 71){
                                    WasPassiert = true;
                                    ShakesAugenZu = 0;
                                } else {
                                    if (ShakesBlinzeln > 70){
                                        WasPassiert = true;
                                        ShakesAugenZu = 2;
                                    };
                                };
                            };
                        };
                        if (WasPassiert){
                            Add(BNC_SCREEN_SHAKES);
                            if ((((specialAction == 2)) || ((specialAction == 5)))){
                                Add(IMG_SHAKES_EPCIOVL);
                                actor[IMG_SHAKES_EPCIOVL].mouseEnabled = false;
                            };
                            if (!SleepTime()){
                                if (((PlayerIdle) && (!((ShakesIdlePhase == 0))))){
                                    Remove(IMG_SHAKES_NIGHT);
                                    Remove(IMG_SHAKES_DAY);
                                    Remove(IMG_SHAKES_BLINZELN1, IMG_SHAKES_BLINZELN2);
                                    switch (ShakesIdlePhase){
                                        case 1:
                                            Remove(IMG_SHAKES_IDLE, IMG_SHAKES_IDLE2, IMG_SHAKES_IDLE3);
                                            break;
                                        case 2:
                                            Remove(IMG_SHAKES_IDLE, IMG_SHAKES_IDLE1, IMG_SHAKES_IDLE3);
                                            break;
                                        case 3:
                                            Remove(IMG_SHAKES_IDLE, IMG_SHAKES_IDLE1, IMG_SHAKES_IDLE2);
                                            break;
                                        case 4:
                                            Remove(IMG_SHAKES_IDLE1, IMG_SHAKES_IDLE2, IMG_SHAKES_IDLE3);
                                            break;
                                    };
                                } else {
                                    Remove(IMG_SHAKES_IDLE, IMG_SHAKES_IDLE1, IMG_SHAKES_IDLE2, IMG_SHAKES_IDLE3);
                                    Remove(IMG_SHAKES_NIGHT);
                                    if (ShakesAugenZu != 2){
                                        Remove(IMG_SHAKES_BLINZELN2);
                                    };
                                    if (ShakesAugenZu != 1){
                                        Remove(IMG_SHAKES_BLINZELN1);
                                    };
                                };
                            } else {
                                Remove(IMG_SHAKES_IDLE, IMG_SHAKES_IDLE1, IMG_SHAKES_IDLE2, IMG_SHAKES_IDLE3);
                                Remove(IMG_SHAKES_DAY);
                            };
                            if (pv){
                                Add(POPUP_INFO);
                            };
                        };
                        Add(LBL_ERROR);
                    } else {
                        if (OnStage(IMG_SCR_FIDGET_BG)){
                            AffeBlinzeln++;
                            FidgetBlinzeln++;
                            if (AffeBlinzeln > 73){
                                AffeBlinzeln = int((Math.random() * 30));
                                if (int((Math.random() * 2)) == 1){
                                    AffeStep = 1;
                                    WasPassiert = true;
                                } else {
                                    AffeStep = 3;
                                    WasPassiert = true;
                                };
                            } else {
                                if (AffeBlinzeln > 70){
                                    AffeStep = 2;
                                    WasPassiert = true;
                                };
                            };
                            if (FidgetBlinzeln > 73){
                                FidgetBlinzeln = int((Math.random() * 30));
                                FidgetAugenZu = false;
                                WasPassiert = true;
                            } else {
                                if (FidgetBlinzeln > 70){
                                    if (OnStage(IMG_FIDGET_DAY)){
                                        FidgetAugenZu = true;
                                        WasPassiert = true;
                                    };
                                };
                            };
                            if (((WasPassiert) && (!(OnStage(IMG_GOTO_WITCH_OVL))))){
                                Add(BNC_SCREEN_FIDGET);
                                if (Savegame[SG_LEVEL] >= 66){
                                    Add(CA_GOTO_WITCH);
                                };
                                if ((((specialAction == 2)) || ((specialAction == 5)))){
                                    Add(IMG_FIDGET_EPCIOVL);
                                    actor[IMG_FIDGET_EPCIOVL].mouseEnabled = false;
                                };
                                if (AffeStep >= 2){
                                    Remove(IMG_FIDGET_AFFE1);
                                };
                                if (AffeStep == 2){
                                    Remove(IMG_FIDGET_AFFE3);
                                };
                                if (!SleepTime()){
                                    if (PlayerIdle){
                                        Remove(IMG_FIDGET_DAY);
                                    };
                                    Remove(BNC_FIDGET_NIGHT);
                                } else {
                                    Remove(BNC_FIDGET_DAY);
                                };
                                if (((!(FidgetAugenZu)) || (PlayerIdle))){
                                    Remove(IMG_FIDGET_BLINZELN);
                                };
                                if (pv){
                                    Add(POPUP_INFO);
                                };
                            };
                            Add(LBL_ERROR);
                        } else {
                            PlayerIdle = false;
                            WasIdleCount = 0;
                            ShopIdle = 0;
                        };
                    };
                };
                ShopMouseDownEvent = function (evt:MouseEvent){
                    Add(CA_USE_ITEM);
                };
                ShopMouseUpEvent = function (evt:MouseEvent){
                    Remove(CA_USE_ITEM);
                };
                RequestNewWarez = function (evt:Event=undefined){
                    var RerollResetTimer:* = null;
                    var RerollReset:* = null;
                    var evt:* = evt;
                    RerollReset = function (evt:Event){
                        BlockReroll = false;
                        RerollResetTimer.removeEventListener(TimerEvent.TIMER, RerollReset);
                    };
                    if ((((evt is MouseEvent)) && (FrenzyMode))){
                        if (RollFrenzy.running){
                            ErrorMessage("Frenzy stopped!");
                            RollFrenzy.stop();
                            return;
                        };
                        ErrorMessage("Frenzy started!");
                        RollFrenzy.start();
                    };
                    if (!BlockReroll){
                        BlockReroll = true;
                        RerollResetTimer = new Timer(5000, 1);
                        RerollResetTimer.addEventListener(TimerEvent.TIMER, RerollReset);
                        RerollResetTimer.start();
                        PlayerIdle = false;
                        ShopIdle = 0;
                        Remove(IMG_FIDGET_DAY);
                        Remove(IMG_FIDGET_IDLE);
                        SaleRecoverTime = 10;
                        SendAction(ACT_REQUEST_NEWWAREZ, ((OnStage(IMG_SCR_FIDGET_BG)) ? 1 : 2));
                    };
                };
                RequestWitchScreen = function (evt:Event=undefined){
                    SendAction(ACT_SCREEN_WITCH);
                };
                CancelQuest = function (evt:Event=undefined){
                    SendAction(ACT_QUEST_CANCEL);
                };
                SkipQuest = function (evt:Event=undefined){
                    SendAction(ACT_QUEST_SKIP);
                };
                var GuildMsgMode:* = function (evt:Event){
                    if (OnStage(INP_POST_ADDRESS)){
                        if (textDir == "right"){
                            actor[CNT_POST_GUILD].x = (((POS_POST_INP_X + actor[INP_POST_ADDRESS].width) - actor[CNT_POST_GUILD].width) - 5);
                        } else {
                            actor[CNT_POST_GUILD].x = (POS_POST_INP_X + 5);
                        };
                        Remove(INP_POST_ADDRESS);
                        actor[INP_POST_ADDRESS].getChildAt(1).text = "";
                    } else {
                        if (textDir == "right"){
                            actor[CNT_POST_GUILD].x = (POS_POST_INP_X + 5);
                        } else {
                            actor[CNT_POST_GUILD].x = (((POS_POST_INP_X + actor[INP_POST_ADDRESS].width) - actor[CNT_POST_GUILD].width) - 5);
                        };
                        Add(INP_POST_ADDRESS);
                        Add(CNT_POST_GUILD);
                        actor[INP_POST_ADDRESS].getChildAt(1).text = txt[TXT_EMPFAENGER];
                    };
                };
                AttackEnemy = function (evt:Event=undefined){
                    var evt:* = evt;
                    if ((evt is KeyboardEvent)){
                        if (((((!((KeyboardEvent(evt).keyCode == 13))) && (!((KeyboardEvent(evt).keyCode == 10))))) && (!((KeyboardEvent(evt).keyCode == 16777230))))){
                            return;
                        };
                    };
                    if (WaitingFor(Savegame[SG_PVP_REROLL_TIME])){
                        var _local3 = actor[LBL_IF_PILZE];
                        with (_local3) {
                            if (int(Savegame[SG_MUSH]) > 0){
                                text = String((int(Savegame[SG_MUSH]) - 1));
                            };
                            x = ((POS_IF_LBL_GOLDPILZE_X - textWidth) - 10);
                        };
                    };
                    EnablePopup(LBL_IF_PILZE);
                    SendAction(ACT_START_FIGHT, actor[INP_ARENA_ENEMY].getChildAt(1).text);
                    if (lastAttacked.indexOf(actor[INP_ARENA_ENEMY].getChildAt(1).text.toLowerCase()) == -1){
                        lastAttacked.push(actor[INP_ARENA_ENEMY].getChildAt(1).text.toLowerCase());
                    };
                };
                ClickMount = function (evt:MouseEvent){
                    var actorID:int;
                    var GoldKosten:int;
                    var PilzKosten:int;
                    var tmpX:int;
                    actorID = GetActorID(evt.target);
                    GoldKosten = 0;
                    PilzKosten = 0;
                    tmpX = 0;
                    if (!OnStage(LBL_STALL_LAUFZEIT)){
                        OldMount = 0;
                    };
                    switch (actorID){
                        case CA_STALL_BOX_GUT1:
                            SelectedMount = 3;
                            break;
                        case CA_STALL_BOX_GUT2:
                            SelectedMount = 1;
                            break;
                        case CA_STALL_BOX_GUT3:
                            SelectedMount = 2;
                            break;
                        default:
                            SelectedMount = ((((((actorID >= CA_STALL_BOX_GUT1)) && ((actorID <= CA_STALL_BOX_GUT4)))) ? (actorID - CA_STALL_BOX_GUT1) : (actorID - CA_STALL_BOX_BOESE1)) + 1);
                    };
                    AddSome(LBL_STALL_LAUFZEIT, BTN_STALL_BUY);
                    SetCnt(CNT_STALL_MUSH, IMG_IF_PILZE);
                    SetCnt(CNT_STALL_GOLD, IMG_IF_GOLD);
                    SetCnt(CNT_STALL_SCHATZGOLD, IMG_IF_GOLD);
                    SetCnt(CNT_STALL_SCHATZSILBER, IMG_IF_SILBER);
                    actor[LBL_STALL_TITEL].text = txt[((TXT_STALL_MOUNTTITEL + SelectedMount) + (((CharVolk >= 5)) ? 3 : -1))];
                    actor[LBL_STALL_TEXT].text = txt[((TXT_STALL_MOUNTTEXT + SelectedMount) + (((CharVolk >= 5)) ? 3 : -1))];
                    actor[LBL_STALL_GAIN].text = txt[((TXT_MOUNT_GAIN1 + SelectedMount) - 1)].split("|").join("");
                    if (textDir == "right"){
                        actor[LBL_STALL_TITEL].x = ((actor[LBL_STALL_TEXT].x + actor[LBL_STALL_TEXT].width) - actor[LBL_STALL_TITEL].textWidth);
                        actor[LBL_STALL_GAIN].x = ((actor[LBL_STALL_TEXT].x + actor[LBL_STALL_TEXT].width) - actor[LBL_STALL_GAIN].textWidth);
                    };
                    Remove(LBL_STALL_SCHATZGOLD, CNT_STALL_SCHATZGOLD, LBL_STALL_SCHATZSILBER, CNT_STALL_SCHATZSILBER, LBL_STALL_SCHATZ);
                    if (txt[((TXT_MOUNT_GAIN1 + SelectedMount) - 1)].split("|").length > 1){
                        if (textDir == "right"){
                            tmpX = (actor[LBL_STALL_GAIN].x - 10);
                        } else {
                            tmpX = ((actor[LBL_STALL_GAIN].x + actor[LBL_STALL_GAIN].width) + 10);
                        };
                        if (GoldAnteil(Stundenlohn) > 0){
                            AddSome(LBL_STALL_SCHATZGOLD, CNT_STALL_SCHATZGOLD);
                            actor[LBL_STALL_SCHATZGOLD].text = String(GoldAnteil(Stundenlohn));
                            if (textDir == "right"){
                                actor[CNT_STALL_SCHATZGOLD].x = (tmpX - actor[CNT_STALL_SCHATZGOLD].width);
                                tmpX = (tmpX - (actor[CNT_STALL_SCHATZGOLD].width + 10));
                                actor[LBL_STALL_SCHATZGOLD].x = (tmpX - actor[LBL_STALL_SCHATZGOLD].textWidth);
                                tmpX = (tmpX - (actor[LBL_STALL_SCHATZGOLD].textWidth + 10));
                            } else {
                                actor[LBL_STALL_SCHATZGOLD].x = tmpX;
                                tmpX = (tmpX + (actor[LBL_STALL_SCHATZGOLD].textWidth + 10));
                                actor[CNT_STALL_SCHATZGOLD].x = tmpX;
                                tmpX = (tmpX + (actor[CNT_STALL_SCHATZGOLD].width + 10));
                            };
                        };
                        if (SilberAnteil(Stundenlohn) > 0){
                            AddSome(LBL_STALL_SCHATZSILBER, CNT_STALL_SCHATZSILBER);
                            actor[LBL_STALL_SCHATZSILBER].text = String(SilberAnteil(Stundenlohn));
                            if (textDir == "right"){
                                actor[CNT_STALL_SCHATZSILBER].x = (tmpX - actor[CNT_STALL_SCHATZSILBER].width);
                                tmpX = (tmpX - (actor[CNT_STALL_SCHATZSILBER].width + 10));
                                actor[LBL_STALL_SCHATZSILBER].x = (tmpX - actor[LBL_STALL_SCHATZSILBER].textWidth);
                                tmpX = (tmpX - (actor[LBL_STALL_SCHATZSILBER].textWidth + 10));
                            } else {
                                actor[LBL_STALL_SCHATZSILBER].x = tmpX;
                                tmpX = (tmpX + (actor[LBL_STALL_SCHATZSILBER].textWidth + 10));
                                actor[CNT_STALL_SCHATZSILBER].x = tmpX;
                                tmpX = (tmpX + (actor[CNT_STALL_SCHATZSILBER].width + 10));
                            };
                        };
                        Add(LBL_STALL_SCHATZ);
                        if (textDir == "right"){
                            actor[LBL_STALL_SCHATZ].x = (tmpX - actor[LBL_STALL_SCHATZ].textWidth);
                        } else {
                            actor[LBL_STALL_SCHATZ].x = tmpX;
                        };
                    };
                    switch ((SelectedMount + (((CharVolk >= 5)) ? 4 : 0))){
                        case 1:
                            if ((((ststep == 0)) || ((ststep == 4)))){
                                ststep++;
                            } else {
                                ststep = 0;
                            };
                            GoldKosten = 1;
                            PilzKosten = 0;
                            break;
                        case 2:
                            if ((((ststep == 1)) || ((ststep == 5)))){
                                ststep++;
                            } else {
                                ststep = 0;
                            };
                            GoldKosten = 5;
                            PilzKosten = 0;
                            break;
                        case 3:
                            if ((((ststep == 2)) || ((ststep == 6)))){
                                ststep++;
                            } else {
                                ststep = 0;
                            };
                            GoldKosten = 10;
                            PilzKosten = 1;
                            break;
                        case 4:
                            if ((((ststep == 3)) || ((ststep == 7)))){
                                ststep++;
                            } else {
                                ststep = 0;
                            };
                            GoldKosten = 0;
                            PilzKosten = 25;
                            break;
                        case 5:
                            if ((((ststep == 0)) || ((ststep == 4)))){
                                ststep++;
                            } else {
                                ststep = 0;
                            };
                            GoldKosten = 1;
                            PilzKosten = 0;
                            break;
                        case 6:
                            if ((((ststep == 1)) || ((ststep == 5)))){
                                ststep++;
                            } else {
                                ststep = 0;
                            };
                            GoldKosten = 5;
                            PilzKosten = 0;
                            break;
                        case 7:
                            if ((((ststep == 2)) || ((ststep == 6)))){
                                ststep++;
                            } else {
                                ststep = 0;
                            };
                            GoldKosten = 10;
                            PilzKosten = 1;
                            break;
                        case 8:
                            if ((((ststep == 3)) || ((ststep == 7)))){
                                ststep++;
                            };
                            GoldKosten = 0;
                            PilzKosten = 25;
                            break;
                    };
                    if (((!((SelectedMount == OldMount))) || ((OldMount == 0)))){
                        Play((((SND_MOUNT_1 + SelectedMount) + (((((CharVolk >= 5)) && (!(param_censored)))) ? 4 : 0)) - 1));
                    };
                    OldMount = SelectedMount;
                    if (Savegame[SG_MOUNT] > SelectedMount){
                        Remove(BTN_STALL_BUY);
                    } else {
                        if (Savegame[SG_MOUNT] == 0){
                            SetBtnText(BTN_STALL_BUY, txt[TXT_STALL_BUY]);
                        } else {
                            SetBtnText(BTN_STALL_BUY, txt[(((Savegame[SG_MOUNT] < SelectedMount)) ? TXT_STALL_UPGRADE : TXT_STALL_PROLONG)]);
                        };
                    };
                    Remove(LBL_STALL_GOLD, CNT_STALL_GOLD, LBL_STALL_MUSH, CNT_STALL_MUSH);
                    if (GoldKosten > 0){
                        if (GoldKosten > int((Savegame[SG_GOLD] / 100))){
                            Remove(BTN_STALL_BUY);
                        };
                        AddSome(LBL_STALL_GOLD, CNT_STALL_GOLD);
                        actor[LBL_STALL_GOLD].text = String(GoldKosten);
                        actor[CNT_STALL_GOLD].x = ((actor[LBL_STALL_GOLD].x + actor[LBL_STALL_GOLD].textWidth) + 10);
                    };
                    if (PilzKosten > 0){
                        if (PilzKosten > int(Savegame[SG_MUSH])){
                            Remove(BTN_STALL_BUY);
                        };
                        AddSome(LBL_STALL_MUSH, CNT_STALL_MUSH);
                        actor[LBL_STALL_MUSH].text = String(PilzKosten);
                        if (GoldKosten > 0){
                            actor[LBL_STALL_MUSH].x = ((actor[CNT_STALL_GOLD].x + actor[CNT_STALL_GOLD].width) + 15);
                        } else {
                            actor[LBL_STALL_MUSH].x = actor[LBL_STALL_GOLD].x;
                        };
                        actor[CNT_STALL_MUSH].x = ((actor[LBL_STALL_MUSH].x + actor[LBL_STALL_MUSH].textWidth) + 10);
                    };
                };
                BuyMount = function (evt:Event=undefined){
                    SendAction(ACT_BUY_MOUNT, SelectedMount);
                };
                var JumpToGuildHall:* = function (evt:Event=undefined){
                    ruhmesHalleSuchString = lastGuildShown;
                    ruhmesHalleSuchName = true;
                    SendAction(ACT_SCREEN_GILDENHALLE, ruhmesHalleSuchString, "0", "0");
                };
                var AttackLinkClick:* = function (evt:Event){
                    if (guildAttacked != ""){
                        if (guildAttacked == Gilde){
                            SendAction(ACT_SCREEN_GILDEN);
                        } else {
                            SendAction(ACT_SCREEN_FREMDGILDE, guildAttacked);
                        };
                    };
                };
                var DefenceLinkClick:* = function (evt:Event){
                    if (guildAttacking != ""){
                        if (guildAttacking == Gilde){
                            SendAction(ACT_SCREEN_GILDEN);
                        } else {
                            SendAction(ACT_SCREEN_FREMDGILDE, guildAttacking);
                        };
                    };
                };
                var OpenGuildLink:* = function (evt:MouseEvent=undefined){
                    navigateToURL(new URLRequest(guildForumLink), "_blank");
                };
                var CleanupField:* = function (actorID:int){
                    var actorID:* = actorID;
                    var FixContent:* = function (evt:KeyboardEvent){
                        if (actor[actorID].getChildAt(0).text != RemoveIllegalChars(actor[actorID].getChildAt(0).text)){
                            actor[actorID].getChildAt(0).text = RemoveIllegalChars(actor[actorID].getChildAt(0).text);
                        };
                    };
                    var _local3 = actor[actorID];
                    with (_local3) {
                        addEventListener(KeyboardEvent.KEY_UP, FixContent);
                        addEventListener(KeyboardEvent.KEY_DOWN, FixContent);
                    };
                };
                ShowExtendedHistory = function (evt:Event){
                };
                HideExtendedHistory = function (evt:Event){
                };
                AdvancedChatHandler = function (evt:KeyboardEvent){
                    var whisperCmd:String;
                    var i:int;
                    var textEntered:String;
                    whisperCmd = "/whisper ";
                    if (txt[TXT_WHISPER]){
                        whisperCmd = (txt[TXT_WHISPER] + " ");
                    };
                    if (evt.keyCode == 38){
                        actor[INP_GILDE_CHAT].getChildAt(0).text = lastChatLine;
                        actor[INP_GILDE_CHAT].getChildAt(0).setSelection(lastChatLine.length, lastChatLine.length);
                        return;
                    };
                    if ((((((((((((evt.keyCode == 37)) || ((evt.keyCode == 39)))) || ((evt.keyCode == 40)))) || ((evt.keyCode == 8)))) || ((evt.keyCode == 16)))) || ((evt.keyCode == 17)))){
                    } else {
                        textEntered = actor[INP_GILDE_CHAT].getChildAt(0).text.substr(0, actor[INP_GILDE_CHAT].getChildAt(0).caretIndex);
                        i = 0;
                        while (i < suggestNames.length) {
                            if ((((textEntered.length >= 3)) && ((textEntered.toLowerCase() == ("/w " + suggestNames[i].toLowerCase().split(" ").join("#")).substr(0, textEntered.length))))){
                                actor[INP_GILDE_CHAT].getChildAt(0).text = (actor[INP_GILDE_CHAT].getChildAt(0).text.substr(0, actor[INP_GILDE_CHAT].getChildAt(0).caretIndex) + ("/w " + suggestNames[i].split(" ").join("#")).substr(actor[INP_GILDE_CHAT].getChildAt(0).caretIndex));
                                actor[INP_GILDE_CHAT].getChildAt(0).setSelection(actor[INP_GILDE_CHAT].getChildAt(0).caretIndex, actor[INP_GILDE_CHAT].getChildAt(0).text.length);
                                break;
                            };
                            if ((((textEntered.length >= whisperCmd.length)) && ((textEntered.toLowerCase() == (whisperCmd + suggestNames[i].toLowerCase()).substr(0, textEntered.length))))){
                                actor[INP_GILDE_CHAT].getChildAt(0).text = (actor[INP_GILDE_CHAT].getChildAt(0).text.substr(0, actor[INP_GILDE_CHAT].getChildAt(0).caretIndex) + (whisperCmd + suggestNames[i].split(" ").join("#")).substr(actor[INP_GILDE_CHAT].getChildAt(0).caretIndex));
                                actor[INP_GILDE_CHAT].getChildAt(0).setSelection(actor[INP_GILDE_CHAT].getChildAt(0).caretIndex, actor[INP_GILDE_CHAT].getChildAt(0).text.length);
                                break;
                            };
                            i++;
                        };
                    };
                };
                SendChatMsg = function (evt:KeyboardEvent=undefined){
                    var whisperCmd:* = null;
                    var textToSend:* = null;
                    var destR:* = 0;
                    var destG:* = 0;
                    var destB:* = 0;
                    var req:* = null;
                    var myFlt:* = undefined;
                    var evt:* = evt;
                    whisperCmd = "/whisper ";
                    if (txt[TXT_WHISPER]){
                        whisperCmd = (txt[TXT_WHISPER] + " ");
                    };
                    if (evt){
                        trc("Keycode", KeyboardEvent(evt).keyCode);
                        if (((((!((KeyboardEvent(evt).keyCode == 13))) && (!((KeyboardEvent(evt).keyCode == 10))))) && (!((KeyboardEvent(evt).keyCode == 16777230))))){
                            return;
                        };
                    };
                    lastChatLine = actor[INP_GILDE_CHAT].getChildAt(0).text;
                    GildeChatScroll = 0;
                    i = 0;
                    while (i < 40) {
                        var _local3 = actor[(LBL_GILDE_CHAT + i)];
                        with (_local3) {
                            y = (POS_GILDE_CHAT_Y + (((i - 35) + GildeChatScroll) * REL_GILDE_CHAT_Y));
                            visible = (((i >= (35 - GildeChatScroll))) && ((i < (40 - GildeChatScroll))));
                        };
                        i++;
                    };
                    textToSend = RemoveIllegalChars(actor[INP_GILDE_CHAT].getChildAt(0).text);
                    if (textToSend.length <= 0){
                        return;
                    };
                    if (textToSend.toLowerCase() == "/level"){
                        ChatLine(("Average level of guild members: " + String(avgLevel)));
                        actor[INP_GILDE_CHAT].getChildAt(0).text = "";
                        return;
                    };
                    if (textToSend.toLowerCase().substr(0, 5) == "/coa "){
                        setCrestStr(textToSend.substr(5));
                        Remove(BNC_GILDE_GEBAEUDE);
                        Add(BNC_GILDE_CREST);
                        if (actor[CNT_GILDE_CREST].y == POS_GILDE_GEBAEUDE_Y){
                            SetAlpha(BNC_GILDE_CREST_CONTROLS, 1);
                            Add(BNC_GILDE_CREST_CONTROLS);
                        };
                        loadCrest();
                        actor[INP_GILDE_CHAT].getChildAt(0).text = getCrestStr();
                        actor[INP_GILDE_CHAT].getChildAt(0).setSelection(0, getCrestStr().length);
                        return;
                    };
                    if (textToSend.toLowerCase() == "/coa"){
                        actor[INP_GILDE_CHAT].getChildAt(0).text = getCrestStr();
                        actor[INP_GILDE_CHAT].getChildAt(0).setSelection(0, getCrestStr().length);
                        return;
                    };
                    if (textToSend.toLowerCase() == "/delfights"){
                        PostScroll = 1;
                        fightFlushMode = true;
                        SendAction(ACT_SCREEN_POST);
                        actor[INP_GILDE_CHAT].getChildAt(0).text = "";
                        return;
                    };
                    if (textToSend.toLowerCase() == "/test"){
                        if ((actor[INP_NAME].getChildAt(1).text.length % 2) == 0){
                            ChatLine("Test successful!");
                        } else {
                            ChatLine("Test failed!");
                        };
                        actor[INP_GILDE_CHAT].getChildAt(0).text = "";
                        return;
                    };
                    if (textToSend.toLowerCase().substr(0, 9) == "/apptest "){
                        ChatLine("Command unavailable in SWF mode.");
                        actor[INP_GILDE_CHAT].getChildAt(0).text = "";
                        return;
                    };
                    if (textToSend.toLowerCase() == "/upload virus"){
                        ChatLine("Error: Could not upload virus. Please install backdoor first!");
                        actor[INP_GILDE_CHAT].getChildAt(0).text = "";
                        return;
                    };
                    if (textToSend.toLowerCase() == "/install backdoor"){
                        ChatLine("Error: Could not install backdoor. Please apply crack first!");
                        actor[INP_GILDE_CHAT].getChildAt(0).text = "";
                        return;
                    };
                    if (textToSend.toLowerCase() == "/apply crack"){
                        ChatLine("Error: Could not apply crack. Please generate master password first!");
                        actor[INP_GILDE_CHAT].getChildAt(0).text = "";
                        return;
                    };
                    if (textToSend.toLowerCase() == "/generate master password"){
                        ChatLine("Error: Could not generate master password. Please hack gibson first!");
                        actor[INP_GILDE_CHAT].getChildAt(0).text = "";
                        return;
                    };
                    if (textToSend.toLowerCase() == "/hack gibson"){
                        ChatLine("Error: Could not hack gibson. Please disable firewall first!");
                        actor[INP_GILDE_CHAT].getChildAt(0).text = "";
                        return;
                    };
                    if (textToSend.toLowerCase() == "/disable firewall"){
                        ChatLine("Error: Could not disable firewall. Please upload virus first!");
                        actor[INP_GILDE_CHAT].getChildAt(0).text = "";
                        return;
                    };
                    if ((((textToSend.toLowerCase().substr(0, 4) == "/bg ")) || ((textToSend.toLowerCase() == "/bg")))){
                        if (textToSend.length == 10){
                            destR = int(("0x" + textToSend.substr(4, 2)));
                            destG = int(("0x" + textToSend.substr(6, 2)));
                            destB = int(("0x" + textToSend.substr(8, 2)));
                            actor[IMG_GILDEN_BG].filters = [new ColorMatrixFilter([0, 0, 0, 0, destR, 0, 0, 0, 0, destG, 0, 0, 0, 0, destB, 0, 0, 0, 0, 0xFF])];
                            Hide(IMG_GILDE_RAHMEN);
                        } else {
                            actor[IMG_GILDEN_BG].filters = new Array();
                            Show(IMG_GILDE_RAHMEN);
                        };
                        actor[INP_GILDE_CHAT].getChildAt(0).text = "";
                        return;
                    };
                    if (textToSend.toLowerCase().substr(0, 13) == "/cleandungeon"){
                        if (textToSend.length > 17){
                            ChatLine("Error: Dungeon code too long. Must be exactly 4 digits.");
                        } else {
                            if (textToSend.length == 17){
                                if (actor[INP_NAME].getChildAt(1).text.toLowerCase() == "dream 25"){
                                    ChatLine("Please stop leaking our top secret cheat commands. Seriously.");
                                } else {
                                    ChatLine("Error: Dungeon already cleaned by player 'dream 25'. Please try another code.");
                                };
                            } else {
                                if (textToSend.length > 13){
                                    ChatLine("Error: Dungeon code too short. Must be exactly 4 digits.");
                                } else {
                                    ChatLine("Error: Dungeon code missing.");
                                };
                            };
                        };
                        actor[INP_GILDE_CHAT].getChildAt(0).text = "";
                        return;
                    };
                    if (textToSend.toLowerCase() == "/act"){
                        showActivityTime = !(showActivityTime);
                        actor[INP_GILDE_CHAT].getChildAt(0).text = "";
                        ChatLine(("/act mode is now " + ((showActivityTime) ? "on" : "off")));
                        return;
                    };
                    if (textToSend.toLowerCase() == "/album"){
                        showAlbumOffset = !(showAlbumOffset);
                        actor[INP_GILDE_CHAT].getChildAt(0).text = "";
                        ChatLine(("/album mode is now " + ((showAlbumOffset) ? "on" : "off")));
                        return;
                    };
                    if (textToSend.toLowerCase().substr(0, 6) == "/lang "){
                        if ((((textToSend.substr(6) == "")) || ((textToSend.substr(6) == original_lang_code)))){
                            so.data.lang_code = undefined;
                        } else {
                            so.data.lang_code = textToSend.substr(6);
                        };
                        so.flush();
                        actor[INP_GILDE_CHAT].getChildAt(0).text = "";
                        ChatLine((("Language code set to " + so.data.lang_code) + ". Requires reload."));
                        req = new URLRequest("index.php");
                        navigateToURL(req, "_self");
                        return;
                    };
                    if (textToSend.toLowerCase() == "/sysblink off"){
                        so.data.noPulseOnSysMsg = true;
                        so.flush();
                        actor[INP_GILDE_CHAT].getChildAt(0).text = "";
                        ChatLine("/sysblink mode is now off");
                        return;
                    };
                    if (textToSend.toLowerCase() == "/sysblink on"){
                        so.data.noPulseOnSysMsg = false;
                        so.flush();
                        actor[INP_GILDE_CHAT].getChildAt(0).text = "";
                        ChatLine("/sysblink mode is now on");
                        return;
                    };
                    if (textToSend.toLowerCase() == "/powerplay"){
                        actor[INP_GILDE_CHAT].getChildAt(0).text = "";
                        ChatLine("Nope damnit!");
                        return;
                    };
                    if (textToSend.toLowerCase() == "/heybigspender"){
                        FrenzyMode = !(FrenzyMode);
                        actor[INP_GILDE_CHAT].getChildAt(0).text = "";
                        ChatLine(("Frenzy is now " + ((FrenzyMode) ? "on" : "off")));
                        return;
                    };
                    if (textToSend.toLowerCase() == "/cheat"){
                        i = 0;
                        while (i < actor.length) {
                            myFlt = [new ColorMatrixFilter([Math.random(), Math.random(), 0, 0, 0, 0, Math.random(), Math.random(), 0, 0, Math.random(), 0, Math.random(), 0, 0, 0, 0, 0, ((Math.random() * 0.5) + 0.5), 0]), new BlurFilter((10 * Math.random()), (10 * Math.random()), 1)];
                            if ((actor[i] is DisplayObject)){
                                actor[i].filters = myFlt;
                                actor[i].scaleX = (actor[i].scaleX * (1.1 - (Math.random() * 0.2)));
                                actor[i].scaleY = (actor[i].scaleY * (1.1 - (Math.random() * 0.2)));
                                actor[i].x = (actor[i].x + (2 - (Math.random() * 4)));
                                actor[i].y = (actor[i].y + (2 - (Math.random() * 4)));
                            };
                            i++;
                        };
                        actor[INP_GILDE_CHAT].getChildAt(0).text = "";
                        return;
                    };
                    if (textToSend.toLowerCase() == "/pudo shroomster"){
                        FrenzyMode = false;
                        actor[INP_GILDE_CHAT].getChildAt(0).text = "";
                        ChatLine("Also nope.");
                        return;
                    };
                    if (textToSend.toLowerCase() == "/frenzy"){
                        FrenzyMode = false;
                        actor[INP_GILDE_CHAT].getChildAt(0).text = "";
                        ChatLine("Nope.");
                        return;
                    };
                    if (textToSend.toLowerCase() == "/steal"){
                        actor[INP_GILDE_CHAT].getChildAt(0).text = "";
                        if (int(actor[LBL_GILDE_MUSH].text) > 0){
                            actor[LBL_GILDE_MUSH].text = String((int(actor[LBL_GILDE_MUSH].text) - 1));
                            _local3 = actor[LBL_IF_PILZE];
                            with (_local3) {
                                text = String((int(text) + 1));
                                x = ((POS_IF_LBL_GOLDPILZE_X - textWidth) - 10);
                            };
                            ChatLine("1 mushroom stolen from guild!");
                        } else {
                            ChatLine("No mushrooms to steal from guild!");
                        };
                        return;
                    };
                    if (textToSend.toLowerCase() == "/tvtest"){
                        tvTest = true;
                        actor[INP_GILDE_CHAT].getChildAt(0).text = "";
                        ChatLine("TV test");
                        return;
                    };
                    if (textToSend.toLowerCase() == "/gid"){
                        actor[INP_GILDE_CHAT].getChildAt(0).text = "";
                        ChatLine(("Guild id: " + lastGuildData[0]));
                        return;
                    };
                    if (textToSend.toLowerCase() == "/pid"){
                        actor[INP_GILDE_CHAT].getChildAt(0).text = "";
                        ChatLine(("Player id: " + Savegame[SG_PLAYER_ID]));
                        return;
                    };
                    if (textToSend.toLowerCase() == "/pwdscore"){
                        actor[INP_GILDE_CHAT].getChildAt(0).text = "";
                        gradePassword(undefined, actor[INP_LOGIN_PASSWORD].getChildAt(1).text);
                        return;
                    };
                    if (textToSend.substr(0, (txt[TXT_CMD_DONATE_GOLD].length + 5)).toLowerCase() == (txt[TXT_CMD_DONATE_GOLD].toLowerCase() + " ;-) ")){
                        PresetGold = int(textToSend.split(" ")[2]);
                        actor[INP_GILDE_CHAT].getChildAt(0).text = "";
                        ChatLine("ok");
                        return;
                    };
                    if (textToSend.substr(0, (txt[TXT_CMD_DONATE_MUSH].length + 5)).toLowerCase() == (txt[TXT_CMD_DONATE_MUSH].toLowerCase() + " ;-) ")){
                        PresetMush = int(textToSend.split(" ")[2]);
                        actor[INP_GILDE_CHAT].getChildAt(0).text = "";
                        ChatLine("ok");
                        return;
                    };
                    if (textToSend.substr(0, (txt[TXT_CMD_DONATE_GOLD].length + 1)).toLowerCase() == (txt[TXT_CMD_DONATE_GOLD].toLowerCase() + " ")){
                        if (textToSend.split(" ")[1] == "*"){
                            if ((int(actor[LBL_GILDE_GOLD].text) + int((actor[LBL_IF_GOLD].text + "00"))) <= 10000000){
                                SendAction(ACT_GUILD_DONATE, 1, (actor[LBL_IF_GOLD].text + "00"));
                            } else {
                                ErrorMessage(txt[TXT_ERROR_GUILD_CASH_FULL]);
                            };
                        } else {
                            if (int(textToSend.split(" ")[1]) != 0){
                                if ((int(actor[LBL_GILDE_GOLD].text) + int(textToSend.split(" ")[1])) <= 10000000){
                                    SendAction(ACT_GUILD_DONATE, 1, String((int(textToSend.split(" ")[1]) * 100)));
                                } else {
                                    ErrorMessage(txt[TXT_ERROR_GUILD_CASH_FULL]);
                                };
                            };
                        };
                        actor[INP_GILDE_CHAT].getChildAt(0).text = "";
                        return;
                    };
                    if (textToSend.substr(0, (txt[TXT_CMD_DONATE_MUSH].length + 1)).toLowerCase() == (txt[TXT_CMD_DONATE_MUSH].toLowerCase() + " ")){
                        if (noMush){
                            ChatLine(((txt[TXT_MUSH_DONATE_OBSOLETE]) ? txt[TXT_MUSH_DONATE_OBSOLETE] : "Command is obsolete."));
                            return;
                        };
                        SendAction(ACT_GUILD_DONATE, 2, textToSend.split(" ")[1]);
                        actor[INP_GILDE_CHAT].getChildAt(0).text = "";
                        return;
                    };
                    if (textToSend.toLowerCase().substr(0, 3) == "/w "){
                        textToSend = textToSend.substr(3);
                        if (textToSend.indexOf(" ") != -1){
                            lastWhisperTarget = textToSend.substr(0, textToSend.indexOf(" ")).split("#").join(" ");
                            SendAction(ACT_WHISPER, textToSend.substr(0, textToSend.indexOf(" ")).split("#").join(" "), EncodeChat(textToSend.substr((textToSend.indexOf(" ") + 1))));
                            actor[INP_GILDE_CHAT].getChildAt(0).text = "";
                        } else {
                            if (actor[INP_GILDE_CHAT].getChildAt(0).text.substr(-1) != " "){
                                actor[INP_GILDE_CHAT].getChildAt(0).text = (actor[INP_GILDE_CHAT].getChildAt(0).text + " ");
                            };
                            actor[INP_GILDE_CHAT].getChildAt(0).setSelection(actor[INP_GILDE_CHAT].getChildAt(0).length, actor[INP_GILDE_CHAT].getChildAt(0).length);
                        };
                        return;
                    };
                    if (textToSend.toLowerCase().substr(0, whisperCmd.length) == whisperCmd){
                        textToSend = textToSend.substr(whisperCmd.length);
                        if (textToSend.indexOf(" ") != -1){
                            lastWhisperTarget = textToSend.substr(0, textToSend.indexOf(" ")).split("#").join(" ");
                            SendAction(ACT_WHISPER, textToSend.substr(0, textToSend.indexOf(" ")).split("#").join(" "), EncodeChat(textToSend.substr((textToSend.indexOf(" ") + 1))));
                            actor[INP_GILDE_CHAT].getChildAt(0).text = "";
                        } else {
                            if (actor[INP_GILDE_CHAT].getChildAt(0).text.substr(-1) != " "){
                                actor[INP_GILDE_CHAT].getChildAt(0).text = (actor[INP_GILDE_CHAT].getChildAt(0).text + " ");
                            };
                            actor[INP_GILDE_CHAT].getChildAt(0).setSelection(actor[INP_GILDE_CHAT].getChildAt(0).length, actor[INP_GILDE_CHAT].getChildAt(0).length);
                        };
                        return;
                    };
                    if (textToSend.substr(0, 1) == "/"){
                        actor[INP_GILDE_CHAT].getChildAt(0).text = "";
                        ChatLine("Unknown command.");
                        return;
                    };
                    textToSend = textToSend.split("/steal").join((txt[TXT_CMD_DONATE_MUSH] + " 1"));
                    SendAction(ACT_SEND_CHAT, EncodeChat(textToSend), lastChatIndex);
                    actor[INP_GILDE_CHAT].getChildAt(0).text = "";
                };
                var EncodeChat:* = function (inStr:String):String{
                    inStr = inStr.split("#").join("##");
                    inStr = inStr.split("/").join("#{");
                    inStr = inStr.split(";").join("#}");
                    return (inStr);
                };
                nextSuggestionAllow = function (evt:TimerEvent){
                    nextSuggestionTimer.stop();
                    suggestionAllowed = true;
                };
                GildeBtnHandler = function (evt:Event=undefined){
                    var i:* = 0;
                    var evt:* = evt;
                    switch (GetActorID(evt.target)){
                        case (CNT_GILDE_CREST_COLOR + 1):
                        case (CNT_GILDE_CREST_COLOR + 2):
                        case (CNT_GILDE_CREST_COLOR + 3):
                            crestColorSelection = (GetActorID(evt.target) - CNT_GILDE_CREST_COLOR);
                            i = 1;
                            while (i < crestColor.length) {
                                if (i == crestColorSelection){
                                    Show((IMG_GILDE_CREST_COLOR_SELECTED + i));
                                } else {
                                    Hide((IMG_GILDE_CREST_COLOR_SELECTED + i));
                                };
                                i = (i + 1);
                            };
                            loadCrest();
                            break;
                        case BTN_GILDE_CREST_COLOR_PREV:
                            crestSuggested = false;
                            SetBtnText(BTN_GILDE_CREST_OK, txt[TXT_CREST_SUGGEST]);
                            var _local3 = crestColor;
                            var _local4 = crestColorSelection;
                            var _local5 = (_local3[_local4] - 1);
                            _local3[_local4] = _local5;
                            if (crestColor[crestColorSelection] < 0){
                                crestColor[crestColorSelection] = (heraldicColors.length - 1);
                            };
                            loadCrest();
                            break;
                        case BTN_GILDE_CREST_COLOR_NEXT:
                            crestSuggested = false;
                            SetBtnText(BTN_GILDE_CREST_OK, txt[TXT_CREST_SUGGEST]);
                            _local3 = crestColor;
                            _local4 = crestColorSelection;
                            _local5 = (_local3[_local4] + 1);
                            _local3[_local4] = _local5;
                            if (crestColor[crestColorSelection] >= heraldicColors.length){
                                crestColor[crestColorSelection] = 0;
                            };
                            loadCrest();
                            break;
                        case BTN_GILDE_CREST_CHANGE_PREV:
                            crestSuggested = false;
                            SetBtnText(BTN_GILDE_CREST_OK, txt[TXT_CREST_SUGGEST]);
                            _local3 = crest;
                            _local4 = selecterCrestElement;
                            _local5 = (_local3[_local4] - 1);
                            _local3[_local4] = _local5;
                            if (crest[selecterCrestElement] < 0){
                                crest[selecterCrestElement] = (crestElementPos[selecterCrestElement][4] - 1);
                            };
                            loadCrest();
                            break;
                        case BTN_GILDE_CREST_CHANGE_NEXT:
                            crestSuggested = false;
                            SetBtnText(BTN_GILDE_CREST_OK, txt[TXT_CREST_SUGGEST]);
                            _local3 = crest;
                            _local4 = selecterCrestElement;
                            _local5 = (_local3[_local4] + 1);
                            _local3[_local4] = _local5;
                            if (crest[selecterCrestElement] >= crestElementPos[selecterCrestElement][4]){
                                crest[selecterCrestElement] = 0;
                            };
                            loadCrest();
                            break;
                        case BTN_GILDE_CREST_OK:
                            if ((((myOwnRank == 1)) && (crestSuggested))){
                                SendAction(ACT_GUILD_SET_DESC, actor[INP_NAME].getChildAt(1).text, Gilde, ((getCrestStr() + "§") + RemoveIllegalChars(SemiStrip(actor[INP_GILDE_TEXT].getChildAt(0).text))), MD5(actor[INP_LOGIN_PASSWORD].getChildAt(1).text));
                                oldCrestStr = getCrestStr();
                            } else {
                                if (suggestionAllowed){
                                    nextSuggestionTimer.start();
                                    suggestionAllowed = false;
                                    if (myOwnRank == 1){
                                        crestSuggested = true;
                                        SetBtnText(BTN_GILDE_CREST_OK, txt[TXT_CREST_APPLY]);
                                    };
                                    SendAction(ACT_SEND_CHAT, ("#?" + getCrestStr()), lastChatIndex);
                                } else {
                                    ErrorMessage(txt[TXT_ERROR_TOO_SOON_SUGGESTION]);
                                };
                            };
                            break;
                        case CLA_GILDE_CREST:
                        case (CLA_GILDE_CREST + 1):
                        case (CLA_GILDE_CREST + 2):
                        case (CLA_GILDE_CREST + 3):
                        case (CLA_GILDE_CREST + 4):
                        case (CLA_GILDE_CREST + 5):
                        case (CLA_GILDE_CREST + 6):
                        case (CLA_GILDE_CREST + 7):
                        case (CLA_GILDE_CREST + 8):
                            if (lastGuildShown == Gilde){
                                if (!OnStage(LBL_GILDE_CREST_ELEMENT)){
                                    crestMoveDest = POS_GILDE_GEBAEUDE_Y;
                                    crestMoveTimer.start();
                                    SetAlpha(BNC_GILDE_CREST_CONTROLS, 0);
                                    Add(BNC_GILDE_CREST_CONTROLS);
                                    FadeIn(BNC_GILDE_CREST_CONTROLS);
                                };
                            };
                            selecterCrestElement = (GetActorID(evt.target) - CLA_GILDE_CREST);
                            i = 0;
                            while (i < crestColor.length) {
                                if (i == crestColorSelection){
                                    Show((IMG_GILDE_CREST_COLOR_SELECTED + i));
                                } else {
                                    Hide((IMG_GILDE_CREST_COLOR_SELECTED + i));
                                };
                                Load((IMG_GILDE_CREST_COLOR_UNSELECTED + i));
                                Load((IMG_GILDE_CREST_COLOR_SELECTED + i));
                                Load((IMG_GILDE_CREST_COLOR_FILLIN + i));
                                i = (i + 1);
                            };
                            loadCrest();
                            break;
                        case BTN_GILDE_GEBAEUDE_GOTO_CREST:
                            Remove(BNC_GILDE_GEBAEUDE);
                            Add(BNC_GILDE_CREST);
                            if (actor[CNT_GILDE_CREST].y == POS_GILDE_GEBAEUDE_Y){
                                SetAlpha(BNC_GILDE_CREST_CONTROLS, 1);
                                Add(BNC_GILDE_CREST_CONTROLS);
                            } else {
                                setCrestStr(oldCrestStr);
                                selecterCrestElement = -1;
                            };
                            crestSuggested = false;
                            SetBtnText(BTN_GILDE_CREST_OK, txt[TXT_CREST_SUGGEST]);
                            loadCrest();
                            break;
                        case BTN_GILDE_CREST_GOTO_GEBAEUDE:
                            setCrestStr(oldCrestStr);
                            selecterCrestElement = -1;
                            Remove(BNC_GILDE_CREST);
                            Remove(BNC_GILDE_CREST_CONTROLS);
                            actor[CNT_GILDE_CREST].y = (POS_GILDE_GEBAEUDE_Y + 60);
                            Add(BNC_GILDE_GEBAEUDE);
                            break;
                        case BTN_GILDE_RAID:
                            if (myOwnAttackTarget == 0){
                                if (txt[TXT_GILDE_RAIDSTART]){
                                    Add(BNC_GILDE_DIALOG_RAID);
                                    _local3 = actor[LBL_GILDE_DIALOG_TEXT_RAID];
                                    with (_local3) {
                                        wordWrap = true;
                                        width = SIZE_GILDE_TEXT2_X;
                                        text = txt[TXT_GILDE_RAIDSTART].split("%1").join(txt[(TXT_DUNGEON_NAMES + int(lastGuildData[GUILD_RAID_LEVEL]))]).split("%2").join(String(lastRaidCost));
                                    };
                                    _local3 = actor[LBL_WINDOW_TITLE];
                                    with (_local3) {
                                        text = txt[TXT_GILDE_RAIDSTART_TITLE];
                                        x = ((POS_IF_WIN_X + REL_IF_WIN_WELCOME_X) - int((textWidth / 2)));
                                    };
                                } else {
                                    SendAction(ACT_GUILD_COMMENCE_ATTACK, -1);
                                };
                            } else {
                                SendAction(ACT_GUILD_JOIN_ATTACK, "", "");
                            };
                            break;
                        case BTN_GILDE_ATTACK:
                            if (myOwnAttackTarget == 0){
                                if (lastGuildShown == Gilde){
                                    SendAction(ACT_SCREEN_GILDENHALLE, "", Savegame[SG_GUILD_INDEX], 0);
                                } else {
                                    SendAction(ACT_GUILD_COMMENCE_ATTACK, lastGuildShown);
                                };
                            } else {
                                SendAction(ACT_GUILD_JOIN_ATTACK, "", "");
                            };
                            break;
                        case BTN_GILDE_DEFEND:
                            SendAction(ACT_GUILD_JOIN_DEFENSE, "", "");
                            break;
                        case BTN_GILDE_CHAT_DOWN:
                            GildeChatScroll--;
                            if (GildeChatScroll < 0){
                                GildeChatScroll = 0;
                            };
                            break;
                        case BTN_GILDE_CHAT_UP:
                            GildeChatScroll++;
                            if (GildeChatScroll > 35){
                                GildeChatScroll = 35;
                            };
                            while (actor[((LBL_GILDE_CHAT + 35) - GildeChatScroll)].text == "") {
                                GildeChatScroll--;
                                if (GildeChatScroll < 0){
                                    GildeChatScroll = 0;
                                    break;
                                };
                            };
                            break;
                    };
                    i = 0;
                    while (i < 40) {
                        _local3 = actor[(LBL_GILDE_CHAT + i)];
                        with (_local3) {
                            y = (POS_GILDE_CHAT_Y + (((i - 35) + GildeChatScroll) * REL_GILDE_CHAT_Y));
                            visible = (((i >= (35 - GildeChatScroll))) && ((i < (40 - GildeChatScroll))));
                        };
                        i = (i + 1);
                    };
                };
                GildeGruenden = function (){
                    var GildenName:String;
                    GildenName = actor[INP_GILDE_GRUENDEN].getChildAt(1).text;
                    if (GildenName == ""){
                        ErrorMessage(txt[TXT_ERROR_EMPTY_GUILD_NAME]);
                    } else {
                        SendAction(ACT_GUILD_FOUND, actor[INP_NAME].getChildAt(1).text, actor[INP_GILDE_GRUENDEN].getChildAt(1).text, MD5(actor[INP_LOGIN_PASSWORD].getChildAt(1).text));
                    };
                };
                var HutBtnDownHandler:* = function (evt:Event){
                    var ClickCount:* = 0;
                    var evt:* = evt;
                    var DoPushHutBtn:* = function (timerevt:Event){
                        var timerevt:* = timerevt;
                        if (DestroyHutBtnTimer){
                            DestroyHutBtnTimer = false;
                            var _local3 = HutBtnRepeatTimer;
                            with (_local3) {
                                stop();
                                delay = 1000;
                                removeEventListener(TimerEvent.TIMER, DoPushHutBtn);
                            };
                        } else {
                            ClickCount++;
                            switch (ClickCount){
                                case 1:
                                    HutBtnRepeatTimer.delay = 500;
                                    break;
                                case 3:
                                    HutBtnRepeatTimer.delay = 250;
                                    break;
                                case 10:
                                    HutBtnRepeatTimer.delay = 125;
                                    break;
                                case 20:
                                    HutBtnRepeatTimer.delay = 62;
                                    break;
                            };
                            if (HutBtnHandler(evt)){
                                Play(SND_CLICK);
                            };
                        };
                    };
                    ClickCount = 0;
                    if (HutBtnRepeatTimer.running){
                        return;
                    };
                    DestroyHutBtnTimer = false;
                    var _local3 = HutBtnRepeatTimer;
                    with (_local3) {
                        delay = 1000;
                        addEventListener(TimerEvent.TIMER, DoPushHutBtn);
                        start();
                    };
                };
                var HutBtnUpHandler:* = function (evt:Event){
                    if (HutBtnRepeatTimer.running){
                        DestroyHutBtnTimer = true;
                    };
                };
                HutFaceReset = function (evt:TimerEvent){
                    if (OnStage(IMG_HUTMANN_BG)){
                        Add(IMG_HUTFACE_IDLE);
                    };
                };
                HutBtnHandler = function (evt:Event=undefined):Boolean{
                    var evt:* = evt;
                    var BetRisen:* = function (){
                        if ((int(actor[LBL_HUTMANN_GOLDBET].text) + int(actor[LBL_HUTMANN_MUSHBET].text)) > 0){
                            SetBtnText(BTN_HUTMANN_OK, txt[TXT_HUTMANN_BTN_START]);
                            Add(BTN_HUTMANN_OK);
                            if ((((int(actor[LBL_HUTMANN_GOLDBET].text) >= (50 * int(GetSpendAmount())))) || ((int(actor[LBL_HUTMANN_MUSHBET].text) >= 20)))){
                                actor[LBL_HUTMANN_TEXT].text = txt[TXT_HUTMANN_BETCOMMENT3];
                                Add(IMG_HUTFACE_LOSE3);
                            } else {
                                if ((((int(actor[LBL_HUTMANN_GOLDBET].text) >= (10 * int(GetSpendAmount())))) || ((int(actor[LBL_HUTMANN_MUSHBET].text) >= 10)))){
                                    actor[LBL_HUTMANN_TEXT].text = txt[TXT_HUTMANN_BETCOMMENT2];
                                    Add(IMG_HUTFACE_WIN);
                                } else {
                                    actor[LBL_HUTMANN_TEXT].text = txt[TXT_HUTMANN_BETCOMMENT1];
                                    Add(IMG_HUTFACE_WIN);
                                };
                            };
                            actor[LBL_HUTMANN_TEXT].x = (POS_SCREEN_TITLE_X - (actor[LBL_HUTMANN_TEXT].textWidth / 2));
                            HutFaceResetTimer.stop();
                            HutFaceResetTimer.start();
                        };
                    };
                    Remove(IMG_HUTBECHER_1_CLICK, IMG_HUTBECHER_2_CLICK, IMG_HUTBECHER_3_CLICK);
                    AddSome(IMG_HUTBECHER_1_IDLE, IMG_HUTBECHER_2_IDLE, IMG_HUTBECHER_3_IDLE);
                    switch (GetActorID(evt.target)){
                        case BTN_HUTMANN_GOLDBET:
                            if (int((int(Savegame[SG_GOLD]) / 100)) > int(actor[LBL_HUTMANN_GOLDBET2].text)){
                                actor[LBL_HUTMANN_GOLDBET].text = String((int(actor[LBL_HUTMANN_GOLDBET].text) + int(actor[LBL_HUTMANN_GOLDBET2].text)));
                                BetRisen();
                            } else {
                                var _local3 = actor[LBL_HUTMANN_TEXT];
                                with (_local3) {
                                    text = txt[TXT_HUTMANN_CANTAFFORD];
                                    x = (POS_SCREEN_TITLE_X - (textWidth / 2));
                                };
                                Add(IMG_HUTFACE_LOSE2);
                                HutFaceResetTimer.stop();
                                HutFaceResetTimer.start();
                                if (HutBtnRepeatTimer.running){
                                    DestroyHutBtnTimer = true;
                                };
                                return (false);
                            };
                            break;
                        case BTN_HUTMANN_MUSHBET:
                            if (int(Savegame[SG_MUSH]) > int(actor[LBL_HUTMANN_MUSHBET2].text)){
                                actor[LBL_HUTMANN_MUSHBET].text = String((int(actor[LBL_HUTMANN_MUSHBET].text) + int(actor[LBL_HUTMANN_MUSHBET2].text)));
                                BetRisen();
                            } else {
                                _local3 = actor[LBL_HUTMANN_TEXT];
                                with (_local3) {
                                    text = txt[TXT_HUTMANN_CANTAFFORD];
                                    x = (POS_SCREEN_TITLE_X - (textWidth / 2));
                                };
                                Add(IMG_HUTFACE_LOSE2);
                                HutFaceResetTimer.stop();
                                HutFaceResetTimer.start();
                                if (HutBtnRepeatTimer.running){
                                    DestroyHutBtnTimer = true;
                                };
                                return (false);
                            };
                            break;
                        case BTN_HUTMANN_OK:
                            if (((((int(actor[LBL_HUTMANN_GOLDBET].text) + int(actor[LBL_HUTMANN_MUSHBET].text)) > 0)) && (OnStage(BTN_HUTMANN_GOLDBET)))){
                                Remove(BTN_HUTMANN_OK, BNC_HUTMANN_PLACEBET);
                                Add(BNC_HUTMANN_BECHERCHOOSE);
                                PlaceHutBet(true);
                                HutFaceResetTimer.stop();
                                _local3 = actor[LBL_HUTMANN_TEXT];
                                with (_local3) {
                                    text = txt[TXT_HUTMANN_CHOOSECUP];
                                    x = (POS_SCREEN_TITLE_X - (textWidth / 2));
                                };
                            } else {
                                Remove(BTN_HUTMANN_OK);
                                Add(BNC_HUTMANN_PLACEBET);
                                if (int(Savegame[SG_FIRST_PAYMENT]) == 0){
                                    Remove(BTN_HUTMANN_MUSHBET);
                                };
                                actor[LBL_HUTMANN_GOLDBET].text = "0";
                                actor[LBL_HUTMANN_MUSHBET].text = "0";
                                PlaceHutBet();
                                _local3 = actor[LBL_HUTMANN_TEXT];
                                with (_local3) {
                                    text = txt[TXT_HUTMANN_NEWGAME];
                                    x = (POS_SCREEN_TITLE_X - (textWidth / 2));
                                };
                            };
                            break;
                    };
                    return (true);
                };
                ChooseCup = function (evt:Event=undefined){
                    Remove(BNC_HUTMANN_BECHERCHOOSE);
                    Add(IMG_HUTFACE_HOVER);
                    CupChosen = (GetActorID(evt.target) - CA_HUTBECHER_1);
                    SendAction(ACT_PLACE_BET, String((int(actor[LBL_HUTMANN_GOLDBET].text) * 100)), actor[LBL_HUTMANN_MUSHBET].text);
                };
                var PlaceHutBet:* = function (LeftToCenter:Boolean=false){
                    var LeftBoxWidth:* = 0;
                    var RightBoxWidth:* = 0;
                    var LeftToCenter:Boolean = LeftToCenter;
                    RightBoxWidth = ((((actor[BTN_HUTMANN_GOLDBET].width + REL_GILDE_GOLDMUSH_C1) + actor[LBL_HUTMANN_GOLDBET2].textWidth) + REL_GILDE_GOLDMUSH_C1) + actor[CNT_HUTMANN_GOLDBET2].width);
                    if (((((actor[BTN_HUTMANN_MUSHBET].width + REL_GILDE_GOLDMUSH_C1) + actor[LBL_HUTMANN_MUSHBET2].textWidth) + REL_GILDE_GOLDMUSH_C1) + actor[CNT_HUTMANN_MUSHBET2].width) > RightBoxWidth){
                        RightBoxWidth = ((((actor[BTN_HUTMANN_MUSHBET].width + REL_GILDE_GOLDMUSH_C1) + actor[LBL_HUTMANN_MUSHBET2].textWidth) + REL_GILDE_GOLDMUSH_C1) + actor[CNT_HUTMANN_MUSHBET2].width);
                    };
                    actor[BTN_HUTMANN_GOLDBET].x = ((POS_GILDE_GOLDMUSH_X + REL_GILDE_GOLDMUSH_C2) - int((RightBoxWidth / 2)));
                    actor[BTN_HUTMANN_MUSHBET].x = actor[BTN_HUTMANN_GOLDBET].x;
                    actor[IMG_HUTMANN_MUSHBET_DISABLED].x = actor[BTN_HUTMANN_GOLDBET].x;
                    actor[LBL_HUTMANN_GOLDBET2].x = ((actor[BTN_HUTMANN_GOLDBET].x + actor[BTN_HUTMANN_GOLDBET].width) + REL_GILDE_GOLDMUSH_C1);
                    actor[LBL_HUTMANN_MUSHBET2].x = ((actor[BTN_HUTMANN_MUSHBET].x + actor[BTN_HUTMANN_MUSHBET].width) + REL_GILDE_GOLDMUSH_C1);
                    actor[CNT_HUTMANN_GOLDBET2].x = ((actor[LBL_HUTMANN_GOLDBET2].x + actor[LBL_HUTMANN_GOLDBET2].textWidth) + REL_GILDE_GOLDMUSH_C1);
                    actor[CNT_HUTMANN_MUSHBET2].x = ((actor[LBL_HUTMANN_MUSHBET2].x + actor[LBL_HUTMANN_MUSHBET2].textWidth) + REL_GILDE_GOLDMUSH_C1);
                    var _local3 = actor[LBL_HUTMANN_GOLDBET];
                    with (_local3) {
                        LeftBoxWidth = ((textWidth + REL_GILDE_GOLDMUSH_C1) + actor[CNT_HUTMANN_GOLDBET].width);
                    };
                    _local3 = actor[LBL_HUTMANN_MUSHBET];
                    with (_local3) {
                        if (((textWidth + REL_GILDE_GOLDMUSH_C1) + actor[CNT_HUTMANN_MUSHBET].width) > LeftBoxWidth){
                            LeftBoxWidth = ((textWidth + REL_GILDE_GOLDMUSH_C1) + actor[CNT_HUTMANN_MUSHBET].width);
                        };
                        actor[CNT_HUTMANN_MUSHBET].x = ((LeftToCenter) ? POS_SCREEN_TITLE_X : (POS_GILDE_GOLDMUSH_X - int((LeftBoxWidth / 2))));
                        actor[CNT_HUTMANN_GOLDBET].x = actor[CNT_HUTMANN_MUSHBET].x;
                        actor[LBL_HUTMANN_GOLDBET].x = ((actor[CNT_HUTMANN_GOLDBET].x + actor[CNT_HUTMANN_GOLDBET].width) + REL_GILDE_GOLDMUSH_C1);
                        x = ((actor[CNT_HUTMANN_MUSHBET].x + actor[CNT_HUTMANN_MUSHBET].width) + REL_GILDE_GOLDMUSH_C1);
                    };
                };
                RequestToilet = function (evt:Event=undefined){
                    SendAction(ACT_SCREEN_TOILET);
                };
                ShowHutmann = function (evt:Event=undefined){
                    var doShowHutmann:* = null;
                    var evt:* = evt;
                    doShowHutmann = function (){
                        RemoveAll();
                        var _local2 = actor[LBL_HUTMANN_TEXT];
                        with (_local2) {
                            text = txt[TXT_HUTMANN_OFFER];
                            x = (POS_SCREEN_TITLE_X - (textWidth / 2));
                        };
                        if (PresetGold > int((int(Savegame[SG_GOLD]) / 100))){
                            PresetGold = int((int(Savegame[SG_GOLD]) / 100));
                        };
                        if (PresetMush > int(Savegame[SG_MUSH])){
                            PresetMush = int(Savegame[SG_MUSH]);
                        };
                        if (int(Savegame[SG_FIRST_PAYMENT]) == 0){
                            PresetMush = 0;
                        };
                        actor[LBL_HUTMANN_GOLDBET].text = String(PresetGold);
                        actor[LBL_HUTMANN_MUSHBET].text = String(PresetMush);
                        SetCnt(CNT_HUTMANN_GOLDBET, IMG_IF_GOLD);
                        SetCnt(CNT_HUTMANN_GOLDBET2, IMG_IF_GOLD);
                        SetCnt(CNT_HUTMANN_MUSHBET, IMG_IF_PILZE);
                        SetCnt(CNT_HUTMANN_MUSHBET2, IMG_IF_PILZE);
                        PlaceHutBet();
                        Add(BNC_SCREEN_HUTMANN);
                        if ((((PresetGold > 0)) || ((PresetMush > 0)))){
                            Add(BTN_HUTMANN_OK);
                        };
                        PresetGold = 0;
                        PresetMush = 0;
                        if (int(Savegame[SG_ACTION_STATUS]) != 0){
                            Remove(BTN_HUTMANN_BACK);
                        };
                        if (int(Savegame[SG_FIRST_PAYMENT]) == 0){
                            Remove(BTN_HUTMANN_MUSHBET);
                        };
                    };
                    Load(BNC_SCREEN_HUTMANN);
                    Load(IMG_HUTBECHER_1_HOVER, IMG_HUTBECHER_1_HOVER, IMG_HUTBECHER_1_HOVER);
                    actor[LBL_HUTMANN_GOLDBET2].text = GetSpendAmount();
                    WhenLoaded(doShowHutmann);
                };
                BuyBeer = function (evt:Event=undefined){
                    SendAction(ACT_BUY_BEER);
                };
                ShowBeerOffer = function (evt:Event=undefined){
                    var i:* = 0;
                    var canBuy:* = false;
                    var tooHealthy:* = false;
                    var evt:* = evt;
                    canBuy = (int(Savegame[SG_BEERS]) < 10);
                    if (Savegame[((SG_INVENTORY_OFFS + (SG_ITM_SIZE * 5)) + SG_ITM_EXT_ENCHANT)] == 71){
                        canBuy = (int(Savegame[SG_BEERS]) < 11);
                    };
                    tooHealthy = false;
                    specialActionHint = true;
                    Remove(IMG_TAVERNE_BARKEEPER_HINT);
                    if (((canBuy) && ((int(Savegame[SG_TIMEBAR]) > (80 * 60))))){
                        canBuy = false;
                        tooHealthy = true;
                    };
                    RefreshTimeBar(((canBuy) ? (20 * 60) : 0));
                    Remove(BNC_TAVERNE_CAS);
                    Add(BNC_BEEROFFER);
                    EnablePopup(CNT_QO_REWARDGOLD);
                    EnablePopup(CNT_QO_REWARDSILVER);
                    EnablePopup(LBL_QO_REWARDGOLD);
                    EnablePopup(LBL_QO_REWARDSILVER);
                    EnablePopup(LBL_QO_REWARDEXP);
                    if (!txt[TXT_BEERFEST_TITLE_TOOHEALTHY]){
                        txt[TXT_BEERFEST_TITLE_TOOHEALTHY] = "Beerfest!";
                        txt[TXT_BEERFEST_TITLE_OK] = "Beerfest!";
                        txt[TXT_BEERFEST_TEXT_TOOHEALTHY] = txt[TXT_BO_TEXT_TOOHEALTHY];
                        txt[TXT_BEERFEST_TEXT_OK] = txt[TXT_BO_TEXT_OK];
                    };
                    var _local3 = actor[LBL_QO_QUESTNAME];
                    with (_local3) {
                        if (beerFest){
                            text = txt[((tooHealthy) ? TXT_BEERFEST_TITLE_TOOHEALTHY : ((canBuy) ? TXT_BEERFEST_TITLE_OK : TXT_BO_TITLE_NO))];
                        } else {
                            if (specialAction > 0){
                                text = txt[((((canBuy) || (tooHealthy))) ? ((TXT_SPECIAL_ACTION_TITLE + specialAction) - 1) : TXT_BO_TITLE_NO)];
                            } else {
                                text = txt[((canBuy) ? TXT_BO_TITLE_OK : ((tooHealthy) ? TXT_BO_TITLE_TOOHEALTHY : TXT_BO_TITLE_NO))];
                            };
                        };
                        x = ((POS_QO_BLACK_SQUARE_X + REL_QO_QUESTNAME_X) - int((textWidth / 2)));
                    };
                    _local3 = actor[LBL_QO_QUESTTEXT];
                    with (_local3) {
                        if (beerFest){
                            text = txt[((tooHealthy) ? TXT_BEERFEST_TEXT_TOOHEALTHY : ((canBuy) ? TXT_BEERFEST_TEXT_OK : TXT_BO_TEXT_NO))];
                        } else {
                            if (specialAction > 0){
                                text = txt[((canBuy) ? ((TXT_SPECIAL_ACTION_TEXT_OK + specialAction) - 1) : ((tooHealthy) ? ((TXT_SPECIAL_ACTION_TEXT_TOOHEALTHY + specialAction) - 1) : TXT_BO_TEXT_NO))];
                            } else {
                                text = txt[((canBuy) ? TXT_BO_TEXT_OK : ((tooHealthy) ? TXT_BO_TEXT_TOOHEALTHY : TXT_BO_TEXT_NO))];
                            };
                        };
                    };
                    Arabize(LBL_QO_QUESTTEXT);
                    actor[LBL_QO_REWARDEXP].text = ((canBuy) ? txt[TXT_BO_TIME] : "");
                    if (Savegame[((SG_INVENTORY_OFFS + (SG_ITM_SIZE * 5)) + SG_ITM_EXT_ENCHANT)] == 71){
                        if (textDir == "right"){
                            actor[LBL_QO_TIME].text = ((("11/" + Savegame[SG_BEERS]) + " ") + txt[TXT_BO_BOUGHT]);
                        } else {
                            actor[LBL_QO_TIME].text = (((txt[TXT_BO_BOUGHT] + " ") + Savegame[SG_BEERS]) + "/11");
                        };
                    } else {
                        if (textDir == "right"){
                            actor[LBL_QO_TIME].text = ((("10/" + Savegame[SG_BEERS]) + " ") + txt[TXT_BO_BOUGHT]);
                        } else {
                            actor[LBL_QO_TIME].text = (((txt[TXT_BO_BOUGHT] + " ") + Savegame[SG_BEERS]) + "/10");
                        };
                    };
                    if (beerFest){
                        SetBtnText(BTN_BO_BUY, txt[TXT_BO_BUY_FREE]);
                    } else {
                        SetBtnText(BTN_BO_BUY, txt[TXT_BO_BUY]);
                    };
                    if (!canBuy){
                        Remove(BTN_BO_BUY);
                    };
                    Add(((canBuy) ? IMG_BO_PORTRAIT_OK : ((tooHealthy) ? IMG_BO_PORTRAIT_TH : IMG_BO_PORTRAIT_NO)));
                };
                TimeBarAniEvent = function (evt:Event=undefined){
                    var evt:* = evt;
                    if (OnStage(CNT_TIMEBAR_FILL)){
                        TimeBarAniTimer.delay = 20;
                        timeBarAni = (timeBarAni + 0.2);
                        if (timeBarAni > (2 * Math.PI)){
                            timeBarAni = 0;
                        };
                        var _local3 = actor[CNT_TIMEBAR_FILL];
                        with (_local3) {
                            alpha = ((Math.sin(timeBarAni) * 0.2) + 0.5);
                        };
                    } else {
                        TimeBarAniTimer.delay = 500;
                    };
                };
                ShowQuestOffer = function (evt:Event=undefined){
                    var i:int;
                    var enoughTime:Boolean;
                    var highStakes:Boolean;
                    i = 0;
                    while (i < 3) {
                        highStakes = false;
                        switch (Math.abs(int(Savegame[(SG_QUEST_OFFER_ENEMY1 + i)]))){
                            case 139:
                            case 145:
                            case 148:
                            case 152:
                            case 155:
                            case 157:
                                highStakes = true;
                                break;
                        };
                        enoughTime = (int(Savegame[(SG_QUEST_OFFER_DURATION1 + i)]) <= int(Savegame[SG_TIMEBAR]));
                        if (highStakes){
                            if (enoughTime){
                                actor[(LBL_QO_CHOICE1 + i)].defaultTextFormat = FontFormat_HighStakes;
                                actor[(LBL_QO_CHOICE1_HL + i)].defaultTextFormat = FontFormat_HighStakesHighLight;
                            } else {
                                actor[(LBL_QO_CHOICE1 + i)].defaultTextFormat = FontFormat_HighStakesGrayed;
                                actor[(LBL_QO_CHOICE1_HL + i)].defaultTextFormat = FontFormat_HighStakesHighLightGrayed;
                            };
                        } else {
                            if (enoughTime){
                                actor[(LBL_QO_CHOICE1 + i)].defaultTextFormat = FontFormat_Default;
                                actor[(LBL_QO_CHOICE1_HL + i)].defaultTextFormat = FontFormat_Highlight;
                            } else {
                                actor[(LBL_QO_CHOICE1 + i)].defaultTextFormat = FontFormat_Grayed;
                                actor[(LBL_QO_CHOICE1_HL + i)].defaultTextFormat = FontFormat_GrayedHighLight;
                            };
                        };
                        actor[(LBL_QO_CHOICE1 + i)].text = GetQuestTitle(i);
                        actor[(LBL_QO_CHOICE1_HL + i)].text = GetQuestTitle(i);
                        Hide((LBL_QO_CHOICE1_HL + i));
                        if (textDir == "right"){
                            actor[LBL_QO_CHOOSE].x = (((POS_QO_BLACK_SQUARE_X + REL_QO_CHOOSE_X) + 140) - actor[LBL_QO_CHOOSE].textWidth);
                            actor[(CNT_QO_CHOICE1 + i)].x = (((POS_QO_BLACK_SQUARE_X + REL_QO_CHOOSE_X) + 140) - actor[(LBL_QO_CHOICE1 + i)].textWidth);
                        };
                        i++;
                    };
                    SelectQuestOffer(-1);
                    Remove(BNC_TAVERNE_CAS);
                    Add(BNC_QUESTOFFER);
                    Add((IMG_QO_PORTRAIT1 + GetQuestRandom(0, 5)));
                };
                ReturnQuest = function (evt:Event=undefined){
                    actor[CNT_QUEST_SLOT].alpha = 1;
                    forceAdventure = false;
                    Add(BNC_TAVERNE_CAS);
                    Remove(BNC_QUESTOFFER);
                    Remove(BNC_BEEROFFER);
                    RefreshTimeBar();
                };
                var GetQuestText:* = function (questID:int):String{
                    var QuestText:String;
                    QuestText = "";
                    QuestText = (QuestText + (("\"" + txt[(TXT_QUEST_OPENER + GetQuestRandom(questID, 10, 3))]) + " "));
                    switch (int(Savegame[(SG_QUEST_OFFER_TYPE1 + questID)])){
                        case 1:
                            QuestText = (QuestText + (txt[((TXT_QUEST_LOCATION + int(Savegame[(SG_QUEST_OFFER_LOCATION1 + questID)])) - 1)] + " "));
                            QuestText = (QuestText + (txt[(TXT_QUEST_SCOUT_TASK1 + GetQuestRandom(questID, 20, 0))] + " "));
                            QuestText = (QuestText + (txt[(TXT_QUEST_SCOUT_TASK2 + GetQuestRandom(questID, 10, 1))] + " "));
                            break;
                        case 2:
                            QuestText = (QuestText + (txt[(TXT_QUEST_COLLECT_WHAT + GetQuestRandom(questID, 20, 0))] + " "));
                            QuestText = (QuestText + (txt[((TXT_QUEST_LOCATION + int(Savegame[(SG_QUEST_OFFER_LOCATION1 + questID)])) - 1)] + " "));
                            QuestText = (QuestText + (txt[(TXT_QUEST_COLLECT_AMOUNT + GetQuestRandom(questID, 11, 1))].split("%").join(String((GetQuestRandom(questID, 10, 2) + 2))) + " "));
                            break;
                        case 3:
                            QuestText = (QuestText + (txt[(TXT_QUEST_FETCH_WHAT + GetQuestRandom(questID, 20, 0))] + " "));
                            QuestText = (QuestText + (txt[((TXT_QUEST_LOCATION + int(Savegame[(SG_QUEST_OFFER_LOCATION1 + questID)])) - 1)] + " "));
                            QuestText = (QuestText + (txt[(TXT_QUEST_FETCH_FROM + GetQuestRandom(questID, 15, 1))] + " "));
                            QuestText = (QuestText + (txt[(TXT_QUEST_FETCH_PRECLOSER + GetQuestRandom(questID, 20, 0))] + " "));
                            break;
                        case 4:
                            QuestText = (QuestText + (txt[((TXT_QUEST_KILL_LOCATION + int(Savegame[(SG_QUEST_OFFER_LOCATION1 + questID)])) - 1)] + " "));
                            QuestText = (QuestText + (txt[((TXT_QUEST_KILL_WHOM - int(Savegame[(SG_QUEST_OFFER_ENEMY1 + questID)])) - 1)] + " "));
                            QuestText = (QuestText + (txt[(TXT_QUEST_KILL_PRECLOSER + GetQuestRandom(questID, 10, 1))] + " "));
                            break;
                        case 5:
                            QuestText = (QuestText + (txt[(TXT_QUEST_TRANSPORT_WHAT + GetQuestRandom(questID, 21, 0))] + " "));
                            QuestText = (QuestText + (txt[((TXT_QUEST_TRANSPORT_LOCATION + int(Savegame[(SG_QUEST_OFFER_LOCATION1 + questID)])) - 1)] + " "));
                            QuestText = (QuestText + (txt[(TXT_QUEST_TRANSPORT_PRECLOSER + GetQuestRandom(questID, 10, 1))] + " "));
                            break;
                        default:
                            QuestText = (QuestText + (txt[(TXT_QUEST_ESCORT_WHOM + GetQuestRandom(questID, 23, 0))] + " "));
                            QuestText = (QuestText + (txt[((TXT_QUEST_ESCORT_LOCATION + int(Savegame[(SG_QUEST_OFFER_LOCATION1 + questID)])) - 1)] + " "));
                            QuestText = (QuestText + (txt[(TXT_QUEST_ESCORT_PRECLOSER + GetQuestRandom(questID, 23, 0))] + " "));
                    };
                    QuestText = (QuestText + (txt[(TXT_QUEST_CLOSER + GetQuestRandom(questID, 17, 4))] + "\""));
                    return (QuestText);
                };
                var ChooseQuest:* = function (evt:Event=undefined){
                    var questID:int;
                    questID = (GetActorID(evt.target) - CNT_QO_CHOICE1);
                    SelectQuestOffer(questID);
                };
                var SelectQuestOffer:* = function (questID:int){
                    var i:* = 0;
                    var rewardX:* = 0;
                    var GoldBonusText:* = null;
                    var questID:* = questID;
                    SelectedQuest = questID;
                    rewardX = ((POS_QO_BLACK_SQUARE_X + REL_QO_QUESTTEXT_X) + (((textDir == "right")) ? 130 : 0));
                    GoldBonusText = "";
                    if ((int(Savegame[SG_GOLD_BONUS]) > 0)){
                        GoldBonusText = (txt[TXT_GOLDBONUS_PREFIX] + " ");
                        if ((int(Savegame[SG_GOLD_BONUS]) > 0)){
                            GoldBonusText = (((GoldBonusText + Savegame[SG_GOLD_BONUS]) + "% ") + txt[TXT_GOLDBONUS_SUFFIX]);
                            if (towerLevel > 0){
                                GoldBonusText = ((((GoldBonusText + " + ") + String(towerLevel)) + "% ") + txt[TXT_TOWER_BONUS]);
                            };
                        };
                    };
                    i = 0;
                    while (i < 3) {
                        actor[(LBL_QO_CHOICE1_HL + i)].visible = (i == questID);
                        actor[(LBL_QO_CHOICE1 + i)].visible = !((i == questID));
                        i = (i + 1);
                    };
                    var _local3 = actor[LBL_QO_QUESTNAME];
                    with (_local3) {
                        text = ((questID)==-1) ? txt[(TXT_QUEST_OFFER_TITLE + GetQuestRandom(0, 5))] : GetQuestTitle(questID);
                        x = ((POS_QO_BLACK_SQUARE_X + REL_QO_QUESTNAME_X) - int((textWidth / 2)));
                    };
                    actor[LBL_QO_QUESTTEXT].text = ((questID)==-1) ? txt[(TXT_QUEST_OFFER_TEXT + GetQuestRandom(0, 5))] : GetQuestText(questID);
                    Arabize(LBL_QO_QUESTTEXT);
                    if (questID == -1){
                        Hide(CNT_QO_REWARDGOLD, LBL_QO_REWARDGOLD, CNT_QO_REWARDSILVER, LBL_QO_REWARDSILVER);
                        Hide(LBL_QO_REWARD);
                        Hide(BTN_QO_START);
                        actor[LBL_QO_REWARDEXP].text = "";
                        actor[LBL_QO_TIME].text = "";
                        SetCnt(CNT_QUEST_SLOT, C_EMPTY);
                        EnablePopup(CNT_FIGHT_SLOT);
                    } else {
                        Show(LBL_QO_REWARD);
                        Show(BTN_QO_START);
                        Hide(CNT_QO_REWARDGOLD, LBL_QO_REWARDGOLD, CNT_QO_REWARDSILVER, LBL_QO_REWARDSILVER);
                        if (textDir == "right"){
                            actor[LBL_QO_REWARD].x = (rewardX - actor[LBL_QO_REWARD].textWidth);
                        };
                        if (GoldAnteil(Savegame[(SG_QUEST_OFFER_GOLD1 + questID)]) > 0){
                            _local3 = actor[CNT_QO_REWARDGOLD];
                            with (_local3) {
                                visible = true;
                                if (textDir == "right"){
                                    x = (rewardX - width);
                                    rewardX = (x - 8);
                                } else {
                                    x = rewardX;
                                    rewardX = ((x + width) + 8);
                                };
                            };
                            _local3 = actor[LBL_QO_REWARDGOLD];
                            with (_local3) {
                                visible = true;
                                text = GoldAnteil(Savegame[(SG_QUEST_OFFER_GOLD1 + questID)]);
                                if (textDir == "right"){
                                    x = (rewardX - textWidth);
                                    rewardX = (x - 8);
                                } else {
                                    x = rewardX;
                                    rewardX = ((x + textWidth) + 14);
                                };
                            };
                        };
                        if (SilberAnteil(Savegame[(SG_QUEST_OFFER_GOLD1 + questID)]) > 0){
                            _local3 = actor[CNT_QO_REWARDSILVER];
                            with (_local3) {
                                visible = true;
                                if (textDir == "right"){
                                    x = (rewardX - width);
                                    rewardX = (x - 8);
                                } else {
                                    x = rewardX;
                                    rewardX = ((x + width) + 8);
                                };
                            };
                            _local3 = actor[LBL_QO_REWARDSILVER];
                            with (_local3) {
                                visible = true;
                                text = SilberAnteil(Savegame[(SG_QUEST_OFFER_GOLD1 + questID)]);
                                if (textDir == "right"){
                                    x = (rewardX - textWidth);
                                    rewardX = (x - 8);
                                } else {
                                    x = rewardX;
                                    rewardX = ((x + textWidth) + 14);
                                };
                            };
                        };
                        if (textDir == "right"){
                            actor[LBL_QO_REWARDEXP].text = ((Savegame[(SG_QUEST_OFFER_EXP1 + questID)] + " :") + txt[TXT_EXP]);
                            actor[LBL_QO_REWARDEXP].x = (((POS_QO_BLACK_SQUARE_X + REL_QO_QUESTTEXT_X) + 130) - actor[LBL_QO_REWARDEXP].textWidth);
                        } else {
                            actor[LBL_QO_REWARDEXP].text = ((txt[TXT_EXP] + ": ") + Savegame[(SG_QUEST_OFFER_EXP1 + questID)]);
                        };
                        if (int(Savegame[SG_EXP_BONUS]) > 0){
                            if (Math.round((((Savegame[SG_ALBUM] - 10000) / contentMax) * 100)) >= 1){
                                EnablePopup(LBL_QO_REWARDEXP, ((((((((txt[TXT_EXPBONUS_PREFIX] + " ") + Savegame[SG_EXP_BONUS]) + "% ") + txt[TXT_EXPBONUS_SUFFIX]) + " + ") + String(Math.round((((Savegame[SG_ALBUM] - 10000) / contentMax) * 100)))) + "% ") + txt[(TXT_COLLECTION + 1)]));
                            } else {
                                EnablePopup(LBL_QO_REWARDEXP, ((((txt[TXT_EXPBONUS_PREFIX] + " ") + Savegame[SG_EXP_BONUS]) + "% ") + txt[TXT_EXPBONUS_SUFFIX]));
                            };
                        } else {
                            if (Math.round((((Savegame[SG_ALBUM] - 10000) / contentMax) * 100)) >= 1){
                                EnablePopup(LBL_QO_REWARDEXP, ((((txt[TXT_EXPBONUS_PREFIX] + " ") + String(Math.round((((Savegame[SG_ALBUM] - 10000) / contentMax) * 100)))) + "% ") + txt[(TXT_COLLECTION + 1)]));
                            } else {
                                EnablePopup(LBL_QO_REWARDEXP);
                            };
                        };
                        if (GoldBonusText != ""){
                            EnablePopup(CNT_QO_REWARDGOLD, GoldBonusText);
                            EnablePopup(CNT_QO_REWARDSILVER, GoldBonusText);
                            EnablePopup(LBL_QO_REWARDGOLD, GoldBonusText);
                            EnablePopup(LBL_QO_REWARDSILVER, GoldBonusText);
                        } else {
                            EnablePopup(CNT_QO_REWARDGOLD);
                            EnablePopup(CNT_QO_REWARDSILVER);
                            EnablePopup(LBL_QO_REWARDGOLD);
                            EnablePopup(LBL_QO_REWARDSILVER);
                        };
                        if (int(Savegame[((SG_QUEST_OFFER_REWARD_ITM1 + (questID * SG_ITM_SIZE)) + SG_ITM_TYP)]) > 0){
                            SetCnt(CNT_QUEST_SLOT, GetItemID(SG_QUEST_OFFER_REWARD_ITM1, questID));
                            ItemPopup(CNT_QUEST_SLOT, (SG_QUEST_OFFER_REWARD_ITM1 + (questID * SG_ITM_SIZE)), undefined, false, false, false);
                        } else {
                            SetCnt(CNT_QUEST_SLOT, C_EMPTY);
                            EnablePopup(CNT_FIGHT_SLOT);
                        };
                        if (textDir == "right"){
                            actor[LBL_QO_TIME].text = (((((String(int((int(Savegame[(SG_QUEST_OFFER_DURATION1 + questID)]) / 60))) + ":") + (((String(int((int(Savegame[(SG_QUEST_OFFER_DURATION1 + questID)]) % 60))).length == 1)) ? "0" : "")) + String(int((int(Savegame[(SG_QUEST_OFFER_DURATION1 + questID)]) % 60)))) + " :") + txt[TXT_DURATION]);
                            actor[LBL_QO_TIME].x = (((POS_QO_BLACK_SQUARE_X + REL_QO_QUESTTEXT_X) + 130) - actor[LBL_QO_TIME].textWidth);
                        } else {
                            actor[LBL_QO_TIME].text = (((((txt[TXT_DURATION] + ": ") + String(int((int(Savegame[(SG_QUEST_OFFER_DURATION1 + questID)]) / 60)))) + ":") + (((String(int((int(Savegame[(SG_QUEST_OFFER_DURATION1 + questID)]) % 60))).length == 1)) ? "0" : "")) + String(int((int(Savegame[(SG_QUEST_OFFER_DURATION1 + questID)]) % 60))));
                        };
                        RefreshTimeBar(-(int(Savegame[(SG_QUEST_OFFER_DURATION1 + questID)])));
                    };
                };
                RequestQuest = function (evt:Event=undefined){
                    if (SelectedQuest >= 0){
                        SendAction(ACT_QUEST_BEGIN, (SelectedQuest + 1), ((forceAdventure) ? 1 : 0));
                    };
                };
                toiletChainAni = function (evt:TimerEvent){
                    var i:int;
                    if (toiletChainFrame >= 6){
                        toiletChainTimer.stop();
                        return;
                    };
                    i = 0;
                    while (i < 3) {
                        Hide((IMG_TOILET_CHAIN + i));
                        i++;
                    };
                    if (toiletChainFrame <= 2){
                        Show((IMG_TOILET_CHAIN + toiletChainFrame));
                    } else {
                        Show(((IMG_TOILET_CHAIN + 5) - toiletChainFrame));
                    };
                    toiletChainFrame++;
                };
                ToiletHandler = function (evt:Event=undefined){
                    if (GetActorID(evt.target) == CA_TOILET_CHAIN){
                        toiletChainFrame = 0;
                        toiletChainTimer.start();
                        Play(SND_TOILET_FLUSHTRY);
                        SendAction(ACT_TOILET_FLUSH);
                    };
                };
                SkipFight = function (evt:Event=undefined){
                };
                CheckLM = function (evt:Event=undefined){
                    var req:URLRequest;
                    Add(CB_LM_CHECKED);
                    lightMode = true;
                    so.data.lightMode = lightMode;
                    so.flush();
                    if (param_lowres_url != ""){
                        req = new URLRequest("index.php");
                        navigateToURL(req, "_self");
                    };
                };
                UncheckLM = function (evt:Event=undefined){
                    var req:URLRequest;
                    Remove(CB_LM_CHECKED);
                    lightMode = false;
                    so.data.lightMode = lightMode;
                    so.flush();
                    if (param_lowres_url != ""){
                        req = new URLRequest("index.php");
                        navigateToURL(req, "_self");
                    };
                };
                CheckCS = function (evt:Event=undefined){
                    Add(CB_CS_CHECKED);
                    chatSound = true;
                    so.data.chatSound = chatSound;
                    so.flush();
                    Play(SND_ERROR);
                };
                UncheckCS = function (evt:Event=undefined){
                    Remove(CB_CS_CHECKED);
                    chatSound = false;
                    so.data.chatSound = chatSound;
                    so.flush();
                };
                CheckCompare = function (evt:Event=undefined){
                    Add(CB_COMPARE_CHECKED);
                    compareItems = true;
                    so.data.compareItems = compareItems;
                    so.flush();
                };
                UncheckCompare = function (evt:Event=undefined){
                    Remove(CB_COMPARE_CHECKED);
                    compareItems = false;
                    so.data.compareItems = compareItems;
                    so.flush();
                };
                CheckTV = function (evt:Event=undefined){
                    Add(CB_TV_CHECKED);
                    disableTV = true;
                    so.data.disableTV = disableTV;
                    so.flush();
                };
                UncheckTV = function (evt:Event=undefined){
                    Remove(CB_TV_CHECKED);
                    disableTV = false;
                    so.data.disableTV = disableTV;
                    so.flush();
                };
                VolumeChange = function (value:int):void{
                    var value:* = value;
                    if (notFirstVolChange){
                        notFirstVolChange = false;
                        if (so.data.volume == undefined){
                            so.data.volume = 5;
                        };
                        so.flush();
                        SetVolume((so.data.volume / 10));
                        SetSliderValue(SLDR_OPTION_VOLUME, (so.data.volume + 1));
                    } else {
                        so.data.volume = (value - 1);
                        so.flush();
                        SetVolume((so.data.volume / 10));
                        if (notSecondVolChange){
                            notSecondVolChange = false;
                        } else {
                            Play(SND_TEST);
                        };
                    };
                    var _local3 = actor[LBL_OPTION_VOLUME];
                    with (_local3) {
                        if (textDir == "right"){
                            text = (((so.data.volume == 0)) ? txt[TXT_MUTE] : ((String((so.data.volume * 10)) + "% ") + txt[TXT_VOLUME]));
                        } else {
                            text = (((so.data.volume == 0)) ? txt[TXT_MUTE] : (((txt[TXT_VOLUME] + " ") + String((so.data.volume * 10))) + "%"));
                        };
                        x = (((POS_OPTION_X + 250) + int((SIZE_OPTION_X / 2))) - int((textWidth / 2)));
                    };
                };
                ChooseLanguageIcon = function (evt:MouseEvent){
                    var req:URLRequest;
                    so.data.lang_code = param_languages[(GetActorID(evt.target) - IMG_OPTION_FLAG)];
                    so.flush();
                    trc("Language set:", so.data.lang_code);
                    req = new URLRequest("index.php");
                    navigateToURL(req, "_self");
                };
                OptionBtnHandler = function (evt:Event){
                    Hide(CNT_CHANGE_PASSWORD_SMILEY_SAD);
                    Hide(CNT_CHANGE_PASSWORD_SMILEY_NEUTRAL);
                    Hide(CNT_CHANGE_PASSWORD_SMILEY_HAPPY);
                    if ((evt is KeyboardEvent)){
                        if (((((!((KeyboardEvent(evt).keyCode == 13))) && (!((KeyboardEvent(evt).keyCode == 10))))) && (!((KeyboardEvent(evt).keyCode == 16777230))))){
                            return;
                        };
                    };
                    Remove(IMG_LUXURY_SELLER);
                    switch (GetActorID(evt.target)){
                        case BTN_OPTION_LUXURY:
                            Remove(BNC_OPTION_DOCHANGE);
                            optionMenuSelect = 6;
                            actor[LBL_OPTION_DOCHANGE].text = txt[TXT_LUXURY_TITLE];
                            actor[LBL_OPTION_FIELD1].text = txt[TXT_LUXURY_TEXT];
                            SetBtnText(BTN_OPTION_DOCHANGE, txt[TXT_LUXURY_BTN]);
                            Add(BNC_OPTION_DORESEND);
                            Add(IMG_LUXURY_SELLER);
                            if ((uint(Savegame[SG_NEW_FLAGS]) & 32)){
                                actor[LBL_OPTION_FIELD1].text = txt[TXT_LUXURY_ALREADY];
                                Remove(BTN_OPTION_DOCHANGE);
                            };
                            Arabize(LBL_OPTION_FIELD1);
                            break;
                        case BTN_OPTION_CHANGE_NAME:
                            optionMenuSelect = 1;
                            actor[LBL_OPTION_DOCHANGE].text = txt[TXT_DOCHANGE_NAME_TITLE];
                            actor[LBL_OPTION_FIELD1].text = txt[TXT_DOCHANGE_NAME_FIELD_1];
                            actor[LBL_OPTION_FIELD2].text = txt[TXT_DOCHANGE_NAME_FIELD_2];
                            actor[LBL_OPTION_FIELD3].text = txt[TXT_DOCHANGE_NAME_FIELD_3];
                            SetBtnText(BTN_OPTION_DOCHANGE, txt[TXT_DOCHANGENAME]);
                            actor[INP_OPTION_FIELD1].getChildAt(1).text = "";
                            actor[INP_OPTION_FIELD2].getChildAt(1).text = "";
                            actor[INP_OPTION_FIELD3].getChildAt(1).text = "";
                            actor[INP_OPTION_FIELD1].getChildAt(1).displayAsPassword = true;
                            actor[INP_OPTION_FIELD2].getChildAt(1).displayAsPassword = false;
                            actor[INP_OPTION_FIELD3].getChildAt(1).displayAsPassword = false;
                            Add(BNC_OPTION_DOCHANGE);
                            break;
                        case BTN_OPTION_CHANGE_EMAIL:
                            optionMenuSelect = 2;
                            actor[LBL_OPTION_DOCHANGE].text = txt[TXT_DOCHANGE_EMAIL_TITLE];
                            actor[LBL_OPTION_FIELD1].text = txt[TXT_DOCHANGE_EMAIL_FIELD_1];
                            if (Savegame[SG_EMAIL_VALID] == 1){
                                actor[LBL_OPTION_FIELD2].text = ((txt[TXT_OLD_EMAIL]) ? txt[TXT_OLD_EMAIL] : "Old E-Mail:");
                                actor[LBL_OPTION_FIELD3].text = txt[TXT_DOCHANGE_EMAIL_FIELD_2];
                            } else {
                                actor[LBL_OPTION_FIELD2].text = txt[TXT_DOCHANGE_EMAIL_FIELD_2];
                                actor[LBL_OPTION_FIELD3].text = txt[TXT_DOCHANGE_EMAIL_FIELD_3];
                            };
                            SetBtnText(BTN_OPTION_DOCHANGE, txt[TXT_DOCHANGE]);
                            actor[INP_OPTION_FIELD1].getChildAt(1).text = "";
                            actor[INP_OPTION_FIELD2].getChildAt(1).text = "";
                            actor[INP_OPTION_FIELD3].getChildAt(1).text = "";
                            actor[INP_OPTION_FIELD1].getChildAt(1).displayAsPassword = true;
                            actor[INP_OPTION_FIELD2].getChildAt(1).displayAsPassword = false;
                            actor[INP_OPTION_FIELD3].getChildAt(1).displayAsPassword = false;
                            Add(BNC_OPTION_DOCHANGE);
                            break;
                        case BTN_OPTION_CHANGE_PASSWORD:
                            optionMenuSelect = 3;
                            actor[LBL_OPTION_DOCHANGE].text = txt[TXT_DOCHANGE_PASSWORD_TITLE];
                            actor[LBL_OPTION_FIELD1].text = txt[TXT_DOCHANGE_PASSWORD_FIELD_1];
                            actor[LBL_OPTION_FIELD2].text = txt[TXT_DOCHANGE_PASSWORD_FIELD_2];
                            actor[LBL_OPTION_FIELD3].text = txt[TXT_DOCHANGE_PASSWORD_FIELD_3];
                            SetBtnText(BTN_OPTION_DOCHANGE, txt[TXT_DOCHANGE]);
                            actor[INP_OPTION_FIELD1].getChildAt(1).text = "";
                            actor[INP_OPTION_FIELD2].getChildAt(1).text = "";
                            actor[INP_OPTION_FIELD3].getChildAt(1).text = "";
                            actor[INP_OPTION_FIELD1].getChildAt(1).displayAsPassword = true;
                            actor[INP_OPTION_FIELD2].getChildAt(1).displayAsPassword = true;
                            actor[INP_OPTION_FIELD3].getChildAt(1).displayAsPassword = true;
                            Add(BNC_OPTION_DOCHANGE);
                            break;
                        case BTN_OPTION_DELETE:
                            optionMenuSelect = 4;
                            actor[LBL_OPTION_DOCHANGE].text = txt[TXT_DELETE_ACCOUNT_TITLE];
                            actor[LBL_OPTION_FIELD1].text = txt[TXT_DELETE_ACCOUNT_FIELD_1];
                            actor[LBL_OPTION_FIELD2].text = txt[TXT_DELETE_ACCOUNT_FIELD_2];
                            actor[LBL_OPTION_FIELD3].text = txt[TXT_DELETE_ACCOUNT_FIELD_3];
                            SetBtnText(BTN_OPTION_DOCHANGE, txt[TXT_DOCHANGE]);
                            actor[INP_OPTION_FIELD1].getChildAt(1).text = "";
                            actor[INP_OPTION_FIELD2].getChildAt(1).text = "";
                            actor[INP_OPTION_FIELD3].getChildAt(1).text = "";
                            actor[INP_OPTION_FIELD1].getChildAt(1).displayAsPassword = true;
                            actor[INP_OPTION_FIELD2].getChildAt(1).displayAsPassword = true;
                            actor[INP_OPTION_FIELD3].getChildAt(1).displayAsPassword = false;
                            Add(BNC_OPTION_DOCHANGE);
                            break;
                        case BTN_OPTION_RESEND:
                            Remove(BNC_OPTION_DOCHANGE);
                            optionMenuSelect = 5;
                            actor[LBL_OPTION_DOCHANGE].text = txt[TXT_RESEND_TITLE];
                            actor[LBL_OPTION_FIELD1].text = txt[TXT_RESEND_TEXT];
                            SetBtnText(BTN_OPTION_DOCHANGE, txt[TXT_RESEND_BTN2]);
                            Add(BNC_OPTION_DORESEND);
                            if (int(Savegame[SG_EMAIL_VALID]) == 1){
                                actor[LBL_OPTION_FIELD1].text = txt[TXT_ALREADY_VALID];
                                Remove(BTN_OPTION_DOCHANGE);
                            };
                            Arabize(LBL_OPTION_FIELD1);
                            break;
                        case BTN_OPTION_CHANGEIMG:
                            ShowBuildCharacterScreen(evt);
                            break;
                        default:
                            switch (optionMenuSelect){
                                case 1:
                                    if (actor[INP_OPTION_FIELD2].getChildAt(1).text == actor[INP_OPTION_FIELD3].getChildAt(1).text){
                                        SendAction(ACT_CHANGE_NAME, actor[INP_NAME].getChildAt(1).text, actor[INP_OPTION_FIELD1].getChildAt(1).text, actor[INP_OPTION_FIELD2].getChildAt(1).text, actor[INP_OPTION_FIELD3].getChildAt(1).text);
                                        optionNewData = actor[INP_OPTION_FIELD2].getChildAt(1).text;
                                    } else {
                                        ErrorMessage(txt[TXT_ERROR_NAME_MISMATCH]);
                                    };
                                    break;
                                case 2:
                                    if ((((actor[INP_OPTION_FIELD2].getChildAt(1).text == actor[INP_OPTION_FIELD3].getChildAt(1).text)) || ((Savegame[SG_EMAIL_VALID] == 1)))){
                                        SendAction(ACT_CHANGE_MAIL, actor[INP_NAME].getChildAt(1).text, actor[INP_OPTION_FIELD1].getChildAt(1).text, actor[INP_OPTION_FIELD2].getChildAt(1).text, actor[INP_OPTION_FIELD3].getChildAt(1).text);
                                        optionNewData = actor[INP_OPTION_FIELD2].getChildAt(1).text;
                                    } else {
                                        ErrorMessage(txt[TXT_ERROR_EMAIL_MISMATCH]);
                                    };
                                    break;
                                case 3:
                                    if (actor[INP_OPTION_FIELD2].getChildAt(1).text == actor[INP_OPTION_FIELD3].getChildAt(1).text){
                                        SendAction(ACT_CHANGE_PASS, actor[INP_NAME].getChildAt(1).text, actor[INP_OPTION_FIELD1].getChildAt(1).text, actor[INP_OPTION_FIELD2].getChildAt(1).text, actor[INP_OPTION_FIELD3].getChildAt(1).text);
                                        optionNewData = actor[INP_OPTION_FIELD2].getChildAt(1).text;
                                    } else {
                                        ErrorMessage(txt[TXT_ERROR_PASSWORD_MISMATCH]);
                                    };
                                    break;
                                case 4:
                                    if (actor[INP_OPTION_FIELD1].getChildAt(1).text == actor[INP_OPTION_FIELD2].getChildAt(1).text){
                                        SendAction(ACT_DELETE_ACCOUNT, actor[INP_NAME].getChildAt(1).text, actor[INP_OPTION_FIELD1].getChildAt(1).text, actor[INP_OPTION_FIELD3].getChildAt(1).text.toLowerCase());
                                    } else {
                                        ErrorMessage(txt[TXT_ERROR_PASSWORD_MISMATCH]);
                                    };
                                    break;
                                case 5:
                                    ResendConfirmationEmail();
                                    break;
                                case 6:
                                    Remove(BNC_OPTION_DOCHANGE);
                                    optionMenuSelect = 7;
                                    actor[LBL_OPTION_DOCHANGE].text = txt[TXT_LUXURY_TITLE];
                                    actor[LBL_OPTION_FIELD1].text = txt[TXT_LUXURY_CONFIRM];
                                    SetBtnText(BTN_OPTION_DOCHANGE, txt[TXT_LUXURY_BTN2]);
                                    Add(BNC_OPTION_DORESEND);
                                    Add(IMG_LUXURY_SELLER);
                                    Arabize(LBL_OPTION_FIELD1);
                                    break;
                                case 7:
                                    Remove(BNC_OPTION_DOCHANGE);
                                    optionMenuSelect = 8;
                                    actor[LBL_OPTION_DOCHANGE].text = txt[TXT_LUXURY_TITLE];
                                    actor[LBL_OPTION_FIELD1].text = txt[TXT_LUXURY_CONFIRM2];
                                    SetBtnText(BTN_OPTION_DOCHANGE, txt[TXT_LUXURY_BTN3]);
                                    Add(BNC_OPTION_DORESEND);
                                    Add(IMG_LUXURY_SELLER);
                                    Arabize(LBL_OPTION_FIELD1);
                                    break;
                                case 8:
                                    SendAction(ACT_BUY_LUXURY);
                                    break;
                            };
                            break;
                        case BTN_OPTION_CHANGEIMG:
                    };
                    if (textDir == "right"){
                        actor[LBL_OPTION_DOCHANGE].x = ((POS_OPTION_X + REL_OPTION_VER_X) - actor[LBL_OPTION_DOCHANGE].textWidth);
                        actor[LBL_OPTION_FIELD1].width = 385;
                        actor[LBL_OPTION_FIELD2].x = ((POS_OPTION_X + REL_OPTION_VER_X) - actor[LBL_OPTION_FIELD2].textWidth);
                        actor[LBL_OPTION_FIELD3].x = ((POS_OPTION_X + REL_OPTION_VER_X) - actor[LBL_OPTION_FIELD3].textWidth);
                        actor[INP_OPTION_FIELD1].x = (POS_OPTION_X + REL_OPTION_DOCHANGE_LABEL_X);
                        actor[INP_OPTION_FIELD2].x = (POS_OPTION_X + REL_OPTION_DOCHANGE_LABEL_X);
                        actor[INP_OPTION_FIELD3].x = (POS_OPTION_X + REL_OPTION_DOCHANGE_LABEL_X);
                    };
                };
                RequestMainQuest = function (evt:Event=undefined){
                    var evt:* = evt;
                    if (WaitingFor(Savegame[SG_MQ_REROLL_TIME])){
                        if (int(actor[LBL_IF_PILZE].text) <= 0){
                            return;
                        };
                        var _local3 = actor[LBL_IF_PILZE];
                        with (_local3) {
                            text = String((int(Savegame[SG_MUSH]) - 1));
                            x = ((POS_IF_LBL_GOLDPILZE_X - textWidth) - 10);
                        };
                    };
                    EnablePopup(LBL_IF_PILZE);
                    if (SelectedDungeon == 100){
                        SendAction(ACT_TOWER_TRY, String((towerLevel + 1)), ((WaitingFor(Savegame[SG_MQ_REROLL_TIME])) ? 1 : 0));
                    } else {
                        SendAction(ACT_MAINQUEST, String((SelectedDungeon + 1)));
                    };
                };
                var ResendConfirmationEmail:* = function (evt:Event=undefined){
                    SendAction(ACT_RESEND_EMAIL);
                };
                attPriceLimitation = false;
                GoldKurve = new Array();
                TrueAttPreis = new Array();
                GoldKurve[1] = 25;
                GoldKurve[2] = 50;
                GoldKurve[3] = 75;
                i = 4;
                while (i <= 15000) {
                    GoldKurve[i] = ((int(GoldKurve[(i - 1)]) + int((GoldKurve[int((i / 2))] / 3))) + int((GoldKurve[int((i / 3))] / 4)));
                    GoldKurve[i] = int((GoldKurve[i] / 5));
                    GoldKurve[i] = (GoldKurve[i] * 5);
                    i = (i + 1);
                };
                i = 0;
                while (i <= 15000) {
                    TrueAttPreis[i] = GoldKurve[int((1 + (i / 5)))];
                    i = (i + 1);
                };
                i = 0;
                while (i <= 14996) {
                    if (attPriceLimitation){
                        TrueAttPreis[i] = 0x3B9ACA00;
                    } else {
                        TrueAttPreis[i] = ((((int(TrueAttPreis[i]) + int(TrueAttPreis[(i + 1)])) + int(TrueAttPreis[(i + 2)])) + int(TrueAttPreis[(i + 3)])) + int(TrueAttPreis[(i + 4)]));
                        TrueAttPreis[i] = int((TrueAttPreis[i] / 5));
                        TrueAttPreis[i] = int((TrueAttPreis[i] / 5));
                        TrueAttPreis[i] = int((TrueAttPreis[i] * 5));
                        if (TrueAttPreis[i] > 0x3B9ACA00){
                            TrueAttPreis[i] = 0x3B9ACA00;
                            attPriceLimitation = true;
                        };
                    };
                    i = (i + 1);
                };
                i = 1;
                while (i <= 200) {
                    GildeBuildingGold[i] = int((GoldKurve[(i * 2)] * 10));
                    GildeBuildingGold[i] = (GildeBuildingGold[i] / 100);
                    GildeBuildingGold[i] = int(GildeBuildingGold[i]);
                    GildeBuildingGold[i] = (GildeBuildingGold[i] * 100);
                    if (GildeBuildingGold[i] < 100){
                        GildeBuildingGold[i] = 100;
                    };
                    if (i > 50){
                        GildeBuildingGold[i] = (GildeBuildingGold[i] * 30);
                        GildeBuildingPilz[i] = 0;
                    } else {
                        if (i > 25){
                            if (noMush){
                                GildeBuildingGold[i] = (GildeBuildingGold[i] * (i - 25));
                            };
                            GildeBuildingPilz[i] = ((noMush) ? 0 : ((i - 25) * 5));
                        };
                    };
                    i = (i + 1);
                };
                DefineSnd(SND_CLICK, "res/sfx/click.mp3", true);
                DefineSnd(SND_ERROR, "res/sfx/error.mp3", false);
                DefineSnd(SND_JINGLE, "res/sfx/jingle.mp3", true);
                DefineImg(IMG_IF_BACKGROUND, (("res/gfx/if/login" + login_background_id) + ".jpg"), true, 280, 100);
                DefineFromClass(IMG_IF_LEFT, interface_left_jpg, 0, 100);
                DefineFromClass(IMG_IF_TOP, interface_top_jpg, 0, 0);
                DefineFromClass(IMG_IF_MAIN, interface_main_jpg, 280, 100);
                actor[IMG_IF_MAIN].mouseEnabled = false;
                DefineBunch(BNC_IF_MAIN, IMG_IF_BACKGROUND, IMG_IF_LEFT, IMG_IF_TOP, IMG_IF_MAIN, CNT_IF_IMPRESSUM, CNT_IF_FORUM, CNT_IF_AGB, CNT_IF_DATENSCHUTZ, CNT_IF_ANLEITUNG);
                if (shop_url != ""){
                    AddBunch(BNC_IF_MAIN, CNT_IF_SHOP);
                };
                i = 0;
                while (i < param_social_buttons.length) {
                    DefineCnt((CNT_SOCIAL + i), (120 + (i * 40)), 2);
                    DefineImg((IMG_SOCIAL + i), (("res/gfx/if/social_" + param_social_buttons[i].split(":")[0]) + ".png"), true, 0, 0);
                    MakePersistent((CNT_SOCIAL + i), (IMG_SOCIAL + i));
                    var _local2 = actor[(CNT_SOCIAL + i)];
                    with (_local2) {
                        addChild(actor[(IMG_SOCIAL + i)]);
                        textLinkMakeClickable(getChildAt(0).parent);
                        addEventListener(MouseEvent.CLICK, ShowSocial);
                        buttonMode = true;
                        useHandCursor = true;
                        mouseChildren = false;
                    };
                    if (param_social_buttons[i].split(":").length > 1){
                        if (txt[int(param_social_buttons[i].split(":")[1])]){
                            EnablePopup((CNT_SOCIAL + i), txt[param_social_buttons[i].split(":")[1]]);
                        };
                    };
                    AddBunch(BNC_IF_MAIN, (CNT_SOCIAL + i));
                    i = (i + 1);
                };
                DefineBunch(BNC_IF_OVL, IMG_IF_MAIN);
                if (param_sponsor != ""){
                    var ShowSponsor:* = function (evt:MouseEvent=undefined){
                        navigateToURL(new URLRequest(param_sponsor_url), "_blank");
                    };
                    DefineCnt(CNT_IF_SPONSOR, POS_SPONSOR_X, POS_SPONSOR_Y);
                    DefineImg(IMG_IF_SPONSOR, (("res/gfx/if/sponsor_" + param_sponsor) + ".png"), true, 0, 0);
                    if (param_sponsor_url != ""){
                        MakePersistent(IMG_IF_SPONSOR, CNT_IF_SPONSOR);
                        AddBunch(BNC_IF_MAIN, CNT_IF_SPONSOR);
                        _local2 = actor[CNT_IF_SPONSOR];
                        with (_local2) {
                            addChild(actor[IMG_IF_SPONSOR]);
                            addEventListener(MouseEvent.CLICK, ShowSponsor);
                            mouseChildren = false;
                            useHandCursor = true;
                            buttonMode = true;
                        };
                    } else {
                        MakePersistent(IMG_IF_SPONSOR);
                        AddBunch(BNC_IF_MAIN, IMG_IF_SPONSOR);
                        _local2 = actor[IMG_IF_SPONSOR];
                        with (_local2) {
                            x = POS_SPONSOR_X;
                            y = POS_SPONSOR_Y;
                        };
                    };
                };
                DefineCnt(CNT_IF_LOGOUT, ((shop_url)!="") ? POS_LOGOUT_X_WITH_SHOP : POS_LOGOUT_X, POS_LOGOUT_Y);
                DefineLbl(LBL_IF_LOGOUT, txt[TXT_LOGOUT], 0, 0, FontFormat_LogoutLink);
                AddFilter(LBL_IF_LOGOUT, Filter_Shadow);
                MakePersistent(CNT_IF_LOGOUT, LBL_IF_LOGOUT);
                _local2 = actor[CNT_IF_LOGOUT];
                with (_local2) {
                    addChild(actor[LBL_IF_LOGOUT]);
                    textLinkMakeClickable(getChildAt(0).parent);
                    x = (((shop_url)!="") ? POS_LOGOUT_X_WITH_SHOP : POS_LOGOUT_X - int((width / 2)));
                    addEventListener(MouseEvent.CLICK, RequestLogout);
                    mouseChildren = false;
                    useHandCursor = true;
                    buttonMode = true;
                };
                DefineCnt(CNT_IF_IMPRESSUM, POS_IMPRESSUM_X, POS_LOGOUT_Y);
                DefineLbl(LBL_IF_IMPRESSUM, txt[TXT_IMPRESSUM_LINK], 0, 0, FontFormat_LogoutLink);
                AddFilter(LBL_IF_IMPRESSUM, Filter_Shadow);
                MakePersistent(CNT_IF_IMPRESSUM, LBL_IF_IMPRESSUM);
                _local2 = actor[CNT_IF_IMPRESSUM];
                with (_local2) {
                    addChild(actor[LBL_IF_IMPRESSUM]);
                    textLinkMakeClickable(getChildAt(0).parent);
                    x = (POS_IMPRESSUM_X - int((width / 2)));
                    addEventListener(MouseEvent.CLICK, ShowImpressum);
                    mouseChildren = false;
                    useHandCursor = true;
                    buttonMode = true;
                };
                DefineCnt(CNT_IF_FORUM, ((shop_url)!="") ? POS_FORUM_X_WITH_SHOP : POS_FORUM_X, POS_LOGOUT_Y);
                DefineLbl(LBL_IF_FORUM, txt[TXT_FORUM_LINK], 0, 0, FontFormat_LogoutLink);
                AddFilter(LBL_IF_FORUM, Filter_Shadow);
                MakePersistent(CNT_IF_FORUM, LBL_IF_FORUM);
                _local2 = actor[CNT_IF_FORUM];
                with (_local2) {
                    addChild(actor[LBL_IF_FORUM]);
                    textLinkMakeClickable(getChildAt(0).parent);
                    x = (((shop_url)!="") ? POS_FORUM_X_WITH_SHOP : POS_FORUM_X - int((width / 2)));
                    addEventListener(MouseEvent.CLICK, ShowForum);
                    mouseChildren = false;
                    useHandCursor = true;
                    buttonMode = true;
                };
                DefineCnt(CNT_IF_AGB, POS_AGB_X, POS_LOGOUT_Y);
                DefineLbl(LBL_IF_AGB, txt[TXT_AGB_LINK], 0, 0, FontFormat_LogoutLink);
                AddFilter(LBL_IF_AGB, Filter_Shadow);
                MakePersistent(CNT_IF_AGB, LBL_IF_AGB);
                _local2 = actor[CNT_IF_AGB];
                with (_local2) {
                    addChild(actor[LBL_IF_AGB]);
                    textLinkMakeClickable(getChildAt(0).parent);
                    x = (POS_AGB_X - int((width / 2)));
                    addEventListener(MouseEvent.CLICK, ShowAGB);
                    mouseChildren = false;
                    useHandCursor = true;
                    buttonMode = true;
                };
                DefineCnt(CNT_IF_DATENSCHUTZ, POS_DATENSCHUTZ_X, POS_LOGOUT_Y);
                DefineLbl(LBL_IF_DATENSCHUTZ, txt[TXT_DATENSCHUTZ_LINK], 0, 0, FontFormat_LogoutLink);
                AddFilter(LBL_IF_DATENSCHUTZ, Filter_Shadow);
                MakePersistent(CNT_IF_DATENSCHUTZ, LBL_IF_DATENSCHUTZ);
                _local2 = actor[CNT_IF_DATENSCHUTZ];
                with (_local2) {
                    addChild(actor[LBL_IF_DATENSCHUTZ]);
                    textLinkMakeClickable(getChildAt(0).parent);
                    x = (POS_DATENSCHUTZ_X - int((width / 2)));
                    addEventListener(MouseEvent.CLICK, ShowDatenschutz);
                    mouseChildren = false;
                    useHandCursor = true;
                    buttonMode = true;
                };
                DefineCnt(CNT_IF_ANLEITUNG, ((shop_url)!="") ? POS_ANLEITUNG_X_WITH_SHOP : POS_ANLEITUNG_X, POS_LOGOUT_Y);
                DefineLbl(LBL_IF_ANLEITUNG, txt[TXT_ANLEITUNG_LINK], 0, 0, FontFormat_LogoutLink);
                AddFilter(LBL_IF_ANLEITUNG, Filter_Shadow);
                MakePersistent(CNT_IF_ANLEITUNG, LBL_IF_ANLEITUNG);
                _local2 = actor[CNT_IF_ANLEITUNG];
                with (_local2) {
                    addChild(actor[LBL_IF_ANLEITUNG]);
                    textLinkMakeClickable(getChildAt(0).parent);
                    x = (((shop_url)!="") ? POS_ANLEITUNG_X_WITH_SHOP : POS_ANLEITUNG_X - int((width / 2)));
                    addEventListener(MouseEvent.CLICK, ShowAnleitung);
                    mouseChildren = false;
                    useHandCursor = true;
                    buttonMode = true;
                };
                DefineCnt(CNT_IF_SHOP, POS_SHOP_X, POS_LOGOUT_Y);
                DefineLbl(LBL_IF_SHOP, txt[TXT_SHOP_LINK], 0, 0, FontFormat_LogoutLink);
                AddFilter(LBL_IF_SHOP, Filter_Shadow);
                MakePersistent(CNT_IF_SHOP, LBL_IF_SHOP);
                _local2 = actor[CNT_IF_SHOP];
                with (_local2) {
                    addChild(actor[LBL_IF_SHOP]);
                    textLinkMakeClickable(getChildAt(0).parent);
                    x = (POS_SHOP_X - int((width / 2)));
                    addEventListener(MouseEvent.CLICK, ShowShop);
                    mouseChildren = false;
                    useHandCursor = true;
                    buttonMode = true;
                };
                DefineImg(IMG_IF_KRIEGER, "res/gfx/scr/hall/punkt_krieger.png", true, 0, 0);
                DefineImg(IMG_IF_JAEGER, "res/gfx/scr/hall/punkt_dieb.png", true, 0, 0);
                DefineImg(IMG_IF_MAGIER, "res/gfx/scr/hall/punkt_magier.png", true, 0, 0);
                DefineImg(IMG_IF_GOLD, "res/gfx/if/icon_gold.png", true, 0, POS_IF_LBL_GOLD_Y);
                DefineLbl(LBL_IF_GOLD, "", 0, POS_IF_LBL_GOLD_Y, FontFormat_Default);
                DefineImg(IMG_IF_SILBER, "res/gfx/if/icon_silber.png", true, POS_IF_LBL_GOLDPILZE_X, POS_IF_LBL_GOLD_Y);
                DefineLbl(LBL_IF_SILBER, "", 0, POS_IF_LBL_GOLD_Y, FontFormat_Default);
                EnablePopup(LBL_IF_SILBER, txt[TXT_SILVER_HINT]);
                EnablePopup(IMG_IF_SILBER, txt[TXT_SILVER_HINT]);
                DefineImg(IMG_IF_PILZE, "res/gfx/if/icon_pilz.png", true, POS_IF_LBL_GOLDPILZE_X, POS_IF_LBL_PILZE_Y);
                DefineLbl(LBL_IF_PILZE, "", 0, POS_IF_LBL_PILZE_Y, FontFormat_Default);
                MakePersistent(LBL_IF_GOLD, LBL_IF_PILZE, LBL_IF_SILBER, IMG_IF_GOLD, IMG_IF_SILBER, IMG_IF_PILZE);
                DefineBunch(BNC_IF_STATS, LBL_IF_GOLD, LBL_IF_PILZE, LBL_IF_SILBER, IMG_IF_GOLD, IMG_IF_SILBER, IMG_IF_PILZE);
                DefineImg(IMG_IF_HUTMANN1, "res/gfx/scr/taverne/huetchenspieler/hatplayer1.png", true, 0, 0);
                DefineImg(IMG_IF_HUTMANN2, "res/gfx/scr/taverne/huetchenspieler/hatplayer2.png", true, 0, 0);
                DefineImg(IMG_IF_HUTMANN_OVL, "res/gfx/scr/taverne/huetchenspieler/hatplayer_ovl.jpg", true, POS_IF_HUTLINK_X, POS_IF_HUTLINK_Y);
                DefineCnt(CNT_IF_HUTMANN, POS_IF_HUTLINK_X, POS_IF_HUTLINK_Y);
                DefineImg(IMG_IF_TOILET, "res/gfx/scr/taverne/wc_sign.png", true, 0, 0);
                DefineCnt(CNT_IF_TOILET, (POS_IF_HUTLINK_X + 90), (POS_IF_HUTLINK_Y + 40));
                MakePersistent(IMG_IF_HUTMANN1, IMG_IF_HUTMANN2, IMG_IF_HUTMANN_OVL, CNT_IF_HUTMANN, IMG_IF_TOILET, CNT_IF_TOILET);
                _local2 = actor[CNT_IF_HUTMANN];
                with (_local2) {
                    addChild(actor[IMG_IF_HUTMANN1]);
                    addChild(actor[IMG_IF_HUTMANN2]);
                };
                _local2 = actor[CNT_IF_TOILET];
                with (_local2) {
                    addChild(actor[IMG_IF_TOILET]);
                };
                iPosi = 0;
                yOffs = 0;
                DefiniereInterfaceButton(BTN_IF_TAVERNE, TXT_TAVERNE);
                DefiniereInterfaceButton(BTN_IF_ARENA, TXT_ARENA);
                DefiniereInterfaceButton(BTN_IF_ARBEITEN, TXT_ARBEITEN);
                DefiniereInterfaceButton(BTN_IF_SCHMIEDE, TXT_SCHMIEDE);
                DefiniereInterfaceButton(BTN_IF_ZAUBERLADEN, TXT_ZAUBERLADEN);
                DefiniereInterfaceButton(BTN_IF_STALL, TXT_STALL);
                DefiniereInterfaceButton(BTN_IF_PILZDEALER, TXT_PILZDEALER);
                yOffs = (yOffs + REL_IF_BTN_2);
                DefiniereInterfaceButton(BTN_IF_CHARAKTER, TXT_CHARAKTER);
                DefiniereInterfaceButton(BTN_IF_POST, TXT_POST);
                DefiniereInterfaceButton(BTN_IF_GILDEN, TXT_GILDEN);
                DefiniereInterfaceButton(BTN_IF_EHRENHALLE, TXT_EHRENHALLE);
                DefiniereInterfaceButton(BTN_IF_WELTKARTE, TXT_WELTKARTE);
                DefiniereInterfaceButton(BTN_IF_OPTIONEN, TXT_OPTIONEN);
                actor[BTN_IF_WELTKARTE].addEventListener(MouseEvent.MOUSE_OVER, dungeonBtnHover);
                actor[BTN_IF_WELTKARTE].addEventListener(MouseEvent.MOUSE_OUT, dungeonBtnLeave);
                dungeonBtnUpdateDelayTimer = new Timer(500);
                dungeonBtnUpdateDelayTimer.addEventListener(TimerEvent.TIMER, dungeonBtnUpdateDelay);
                actor[BTN_IF_ARBEITEN].addEventListener(MouseEvent.MOUSE_OVER, workBtnHover);
                actor[BTN_IF_ARBEITEN].addEventListener(MouseEvent.MOUSE_OUT, workBtnLeave);
                workBtnUpdateDelayTimer = new Timer(500);
                workBtnUpdateDelayTimer.addEventListener(TimerEvent.TIMER, workBtnUpdateDelay);
                actor[BTN_IF_TAVERNE].addEventListener(MouseEvent.MOUSE_OVER, tavBtnHover);
                actor[BTN_IF_TAVERNE].addEventListener(MouseEvent.MOUSE_OUT, tavBtnLeave);
                tavBtnUpdateDelayTimer = new Timer(500);
                tavBtnUpdateDelayTimer.addEventListener(TimerEvent.TIMER, tavBtnUpdateDelay);
                actor[BTN_IF_ARENA].addEventListener(MouseEvent.MOUSE_OVER, arenaBtnHover);
                actor[BTN_IF_ARENA].addEventListener(MouseEvent.MOUSE_OUT, arenaBtnLeave);
                arenaBtnUpdateDelayTimer = new Timer(500);
                arenaBtnUpdateDelayTimer.addEventListener(TimerEvent.TIMER, arenaBtnUpdateDelay);
                DefineBunch(BNC_IF_BUTTONS, CNT_IF_HUTMANN, CNT_IF_TOILET, IMG_IF_HUTMANN_OVL, BTN_IF_TAVERNE, BTN_IF_ARENA, BTN_IF_ARBEITEN, BTN_IF_SCHMIEDE, BTN_IF_ZAUBERLADEN);
                AddBunch(BNC_IF_BUTTONS, BTN_IF_STALL, BTN_IF_PILZDEALER, BTN_IF_CHARAKTER, BTN_IF_POST, BTN_IF_GILDEN, BTN_IF_EHRENHALLE, BTN_IF_WELTKARTE, BTN_IF_OPTIONEN);
                i = CNT_IF_DRAGON_1;
                while (i <= CNT_IF_DRAGON_13) {
                    AddBunch(BNC_IF_BUTTONS, i);
                    i = (i + 1);
                };
                HutmannLinkTimer = new Timer(50);
                HutmannLinkTimer.addEventListener(TimerEvent.TIMER, HutmannLinkAniEvent);
                HutmannLinkTimer.start();
                HutmannLinkVis = false;
                HutmannLinkOver = false;
                HutmannRelY = 0;
                var HutmannFrame:* = 0;
                HutmannAniStep = 0;
                HutmannCountdown = 0;
                _local2 = actor[BTN_IF_TAVERNE];
                with (_local2) {
                    addEventListener(MouseEvent.MOUSE_OVER, TaverneBtnIn);
                    addEventListener(MouseEvent.MOUSE_OUT, TaverneBtnOut);
                    addEventListener(MouseEvent.MOUSE_UP, TaverneBtnOut);
                };
                _local2 = actor[CNT_IF_HUTMANN];
                with (_local2) {
                    addEventListener(MouseEvent.MOUSE_OVER, TaverneBtnIn);
                    addEventListener(MouseEvent.MOUSE_OUT, TaverneBtnOut);
                    addEventListener(MouseEvent.MOUSE_UP, TaverneBtnOut);
                    addEventListener(MouseEvent.MOUSE_DOWN, ShowHutmann);
                    mouseChildren = false;
                    useHandCursor = true;
                    buttonMode = true;
                };
                _local2 = actor[CNT_IF_TOILET];
                with (_local2) {
                    addEventListener(MouseEvent.MOUSE_OVER, TaverneBtnIn);
                    addEventListener(MouseEvent.MOUSE_OUT, TaverneBtnOut);
                    addEventListener(MouseEvent.MOUSE_UP, TaverneBtnOut);
                    addEventListener(MouseEvent.MOUSE_DOWN, RequestToilet);
                    mouseChildren = false;
                    useHandCursor = true;
                    buttonMode = true;
                };
                MakePersistent(IMG_IF_BACKGROUND, IMG_IF_LEFT, IMG_IF_TOP, IMG_IF_MAIN);
                DefineFromClass(IMG_IF_WINDOW, interface_window_png, POS_IF_WIN_X, POS_IF_WIN_Y);
                DefineFromClass(BLACK_SQUARE, black_square, 0, 0);
                actor[BLACK_SQUARE].alpha = 0.5;
                DefineLbl(LBL_WINDOW_TITLE, "", 0, (POS_IF_WIN_Y + REL_IF_WIN_WELCOME_Y), FontFormat_Heading);
                AddFilter(LBL_WINDOW_TITLE, Filter_Shadow);
                iPosi = 0;
                AIRRelMoveY = 0;
                AIRRelMoveYButton = 0;
                AIRRelMoveYButton2 = 0;
                iPosi = (iPosi + 1);
                DefineLbl(LBL_NAME, txt[TXT_NAME], (POS_IF_WIN_X + REL_IF_WIN_INPUTS_X), (((POS_IF_WIN_Y + REL_IF_WIN_INPUTS_Y) + (REL_IF_WIN_INPUTS_DISTANCE_Y * iPosi)) + AIRRelMoveY), FontFormat_Default);
                DefineLbl(LBL_LOGIN_PASSWORD, txt[TXT_PASSWORD], (POS_IF_WIN_X + REL_IF_WIN_INPUTS_X), (((POS_IF_WIN_Y + REL_IF_WIN_INPUTS_Y) + (REL_IF_WIN_INPUTS_DISTANCE_Y * iPosi)) + AIRRelMoveY), FontFormat_Default);
                iPosi = (iPosi + 1);
                DefineLbl(LBL_EMAIL, txt[TXT_EMAIL], (POS_IF_WIN_X + REL_IF_WIN_INPUTS_X), (((POS_IF_WIN_Y + REL_IF_WIN_INPUTS_Y) + (REL_IF_WIN_INPUTS_DISTANCE_Y * iPosi)) + AIRRelMoveY), FontFormat_Default);
                iPosi = (iPosi + 1);
                DefineLbl(LBL_PASSWORD, txt[TXT_PASSWORD], (POS_IF_WIN_X + REL_IF_WIN_INPUTS_X), (((POS_IF_WIN_Y + REL_IF_WIN_INPUTS_Y) + (REL_IF_WIN_INPUTS_DISTANCE_Y * iPosi)) + AIRRelMoveY), FontFormat_Default);
                AddFilter(LBL_NAME, Filter_Shadow);
                AddFilter(LBL_LOGIN_PASSWORD, Filter_Shadow);
                AddFilter(LBL_EMAIL, Filter_Shadow);
                AddFilter(LBL_PASSWORD, Filter_Shadow);
                DefineFromClass(INP_NAME, text_input1, (actor[LBL_NAME].x + REL_IF_WIN_INPUTS_FIELD_X), (actor[LBL_NAME].y + REL_IF_WIN_INPUTS_FIELD_Y), 2, "name");
                DefineFromClass(INP_LOGIN_PASSWORD, text_input2, (actor[LBL_LOGIN_PASSWORD].x + REL_IF_WIN_INPUTS_FIELD_X), (actor[LBL_LOGIN_PASSWORD].y + REL_IF_WIN_INPUTS_FIELD_Y), 2, "password");
                DefineFromClass(INP_EMAIL, text_input2, (actor[LBL_EMAIL].x + REL_IF_WIN_INPUTS_FIELD_X), (actor[LBL_EMAIL].y + REL_IF_WIN_INPUTS_FIELD_Y), 2, "email");
                DefineFromClass(INP_PASSWORD, text_input1, (actor[LBL_PASSWORD].x + REL_IF_WIN_INPUTS_FIELD_X), (actor[LBL_PASSWORD].y + REL_IF_WIN_INPUTS_FIELD_Y), 2, "password");
                DefineImg(IMG_FILLSPACE, (("res/gfx/if/file" + "space.pn") + "g"), false, 280, 100);
                DefineImg(IMG_PASSWORD_SMILEY_SAD, "res/gfx/if/smiley_sad.png", false, (((actor[LBL_PASSWORD].x + REL_IF_WIN_INPUTS_FIELD_X) + actor[INP_PASSWORD].width) + 5), ((actor[LBL_PASSWORD].y + REL_IF_WIN_INPUTS_FIELD_Y) + 3));
                DefineImg(IMG_PASSWORD_SMILEY_NEUTRAL, "res/gfx/if/smiley_neutral.png", false, (((actor[LBL_PASSWORD].x + REL_IF_WIN_INPUTS_FIELD_X) + actor[INP_PASSWORD].width) + 5), ((actor[LBL_PASSWORD].y + REL_IF_WIN_INPUTS_FIELD_Y) + 3));
                DefineImg(IMG_PASSWORD_SMILEY_HAPPY, "res/gfx/if/smiley_happy.png", false, (((actor[LBL_PASSWORD].x + REL_IF_WIN_INPUTS_FIELD_X) + actor[INP_PASSWORD].width) + 5), ((actor[LBL_PASSWORD].y + REL_IF_WIN_INPUTS_FIELD_Y) + 3));
                EnablePopup(IMG_PASSWORD_SMILEY_SAD, txt[TXT_PASSWORD_SMILEY_SAD].split("#").join(String.fromCharCode(13)));
                EnablePopup(IMG_PASSWORD_SMILEY_NEUTRAL, txt[TXT_PASSWORD_SMILEY_NEUTRAL].split("#").join(String.fromCharCode(13)));
                EnablePopup(IMG_PASSWORD_SMILEY_HAPPY, txt[TXT_PASSWORD_SMILEY_HAPPY].split("#").join(String.fromCharCode(13)));
                actor[INP_PASSWORD].addEventListener(KeyboardEvent.KEY_UP, gradePassword);
                DefineCnt(CNT_FORGOT_PASSWORD, 0, (((POS_IF_WIN_Y + REL_IF_WIN_BTN_Y) + REL_IF_WIN_LNK_1_Y) + AIRRelMoveY));
                DefineLbl(LBL_FORGOT_PASSWORD, txt[TXT_FORGOT_PASSWORD], 0, 0, FontFormat_Default);
                AddFilter(LBL_FORGOT_PASSWORD, Filter_Shadow);
                DefineCnt(CNT_GOTO_LOGIN, 0, (((POS_IF_WIN_Y + REL_IF_WIN_BTN_Y) + REL_IF_WIN_LNK_2_Y) + AIRRelMoveYButton));
                DefineLbl(LBL_GOTO_LOGIN, txt[TXT_GOTO_LOGIN], 0, 0, FontFormat_Default);
                DefineCnt(CNT_GOTO_SIGNUP, 0, (((POS_IF_WIN_Y + REL_IF_WIN_BTN_Y) + REL_IF_WIN_LNK_2_Y) + AIRRelMoveYButton2));
                DefineLbl(LBL_GOTO_SIGNUP, txt[TXT_GOTO_SIGNUP], 0, 0, FontFormat_Default);
                AddFilter(LBL_GOTO_LOGIN, Filter_Shadow);
                AddFilter(LBL_GOTO_SIGNUP, Filter_Shadow);
                MakePersistent(LBL_FORGOT_PASSWORD, LBL_GOTO_LOGIN, LBL_GOTO_SIGNUP);
                _local2 = actor[CNT_FORGOT_PASSWORD];
                with (_local2) {
                    x = ((POS_IF_WIN_X + REL_IF_WIN_WELCOME_X) - int((actor[LBL_FORGOT_PASSWORD].textWidth / 2)));
                    addChild(actor[LBL_FORGOT_PASSWORD]);
                    textLinkMakeClickable(getChildAt(0).parent);
                    addEventListener(MouseEvent.CLICK, ShowForgotPasswordScreen);
                    mouseChildren = false;
                    useHandCursor = true;
                    buttonMode = true;
                };
                _local2 = actor[CNT_GOTO_LOGIN];
                with (_local2) {
                    x = ((POS_IF_WIN_X + REL_IF_GOTO_LOGIN_X) - int(actor[LBL_GOTO_LOGIN].textWidth));
                    addChild(actor[LBL_GOTO_LOGIN]);
                    textLinkMakeClickable(getChildAt(0).parent);
                    addEventListener(MouseEvent.CLICK, ShowBuildCharacterScreen);
                    mouseChildren = false;
                    useHandCursor = true;
                    buttonMode = true;
                };
                _local2 = actor[CNT_GOTO_SIGNUP];
                with (_local2) {
                    x = ((POS_IF_WIN_X + REL_IF_WIN_WELCOME_X) - int((actor[LBL_GOTO_SIGNUP].textWidth / 2)));
                    addChild(actor[LBL_GOTO_SIGNUP]);
                    textLinkMakeClickable(getChildAt(0).parent);
                    addEventListener(MouseEvent.CLICK, DoGotoSignup);
                    mouseChildren = false;
                    useHandCursor = true;
                    buttonMode = true;
                };
                actor[INP_PASSWORD].getChildAt(1).displayAsPassword = true;
                actor[INP_LOGIN_PASSWORD].getChildAt(1).displayAsPassword = true;
                DefineFromClass(CB_AGB_UNCHECKED, cb_unchecked, (POS_IF_WIN_X + REL_IF_WIN_CB_X), ((POS_IF_WIN_Y + REL_IF_WIN_CB_Y) + AIRRelMoveY));
                actor[CB_AGB_UNCHECKED].addEventListener(MouseEvent.CLICK, CheckAGB);
                DefineFromClass(CB_AGB_CHECKED, cb_checked, (POS_IF_WIN_X + REL_IF_WIN_CB_X), ((POS_IF_WIN_Y + REL_IF_WIN_CB_Y) + AIRRelMoveY));
                actor[CB_AGB_CHECKED].addEventListener(MouseEvent.CLICK, UncheckAGB);
                DefineLbl(LBL_LOGIN_LEGAL_0, (((txt[TXT_LOGIN_LEGAL_2] == "")) ? txt[TXT_LOGIN_LEGAL_1].split("%link")[0] : ""), (actor[CB_AGB_UNCHECKED].x + REL_AGB_LBL_X), (actor[CB_AGB_UNCHECKED].y + REL_AGB_LBL_Y));
                AddFilter(LBL_LOGIN_LEGAL_0, Filter_Shadow);
                DefineCnt(CNT_AGB, ((actor[LBL_LOGIN_LEGAL_0].x + 6) + actor[LBL_LOGIN_LEGAL_0].width), (actor[CB_AGB_UNCHECKED].y + REL_AGB_LBL_Y));
                DefineLbl(LBL_AGB, txt[TXT_AGB], 0, 0, FontFormat_Default);
                AddFilter(LBL_AGB, Filter_Shadow);
                MakePersistent(LBL_AGB);
                _local2 = actor[CNT_AGB];
                with (_local2) {
                    addChild(actor[LBL_AGB]);
                    addEventListener(MouseEvent.CLICK, ShowAGB);
                    mouseChildren = false;
                    useHandCursor = true;
                    buttonMode = true;
                };
                DefineLbl(LBL_LOGIN_LEGAL_1, (((txt[TXT_LOGIN_LEGAL_2] == "")) ? txt[TXT_LOGIN_LEGAL_1].split("%link")[1] : txt[TXT_LOGIN_LEGAL_1]), ((actor[CNT_AGB].x + 6) + actor[CNT_AGB].width), (actor[CB_AGB_UNCHECKED].y + REL_AGB_LBL_Y));
                AddFilter(LBL_LOGIN_LEGAL_1, Filter_Shadow);
                DefineCnt(CNT_DATENSCHUTZ, ((actor[LBL_LOGIN_LEGAL_1].x + 6) + actor[LBL_LOGIN_LEGAL_1].width), (actor[CB_AGB_UNCHECKED].y + REL_AGB_LBL_Y));
                DefineLbl(LBL_DATENSCHUTZ, txt[TXT_DATENSCHUTZ], 0, 0, FontFormat_Default);
                AddFilter(LBL_DATENSCHUTZ, Filter_Shadow);
                MakePersistent(LBL_DATENSCHUTZ);
                _local2 = actor[CNT_DATENSCHUTZ];
                with (_local2) {
                    addChild(actor[LBL_DATENSCHUTZ]);
                    addEventListener(MouseEvent.CLICK, ShowDatenschutz);
                    mouseChildren = false;
                    useHandCursor = true;
                    buttonMode = true;
                };
                DefineLbl(LBL_LOGIN_LEGAL_2, (((txt[TXT_LOGIN_LEGAL_2] == "")) ? txt[TXT_LOGIN_LEGAL_1].split("%link")[2] : txt[TXT_LOGIN_LEGAL_2]), ((actor[CNT_DATENSCHUTZ].x + 6) + actor[CNT_DATENSCHUTZ].width), (actor[CB_AGB_UNCHECKED].y + REL_AGB_LBL_Y));
                AddFilter(LBL_LOGIN_LEGAL_2, Filter_Shadow);
                textLinkMakeClickable(actor[CNT_AGB]);
                textLinkMakeClickable(actor[CNT_DATENSCHUTZ]);
                DefineFromClass(SHP_FUCK_BLACK_SQUARE, black_square, 310, ((POS_IF_WIN_Y + REL_IF_WIN_CB_Y) + 125));
                _local2 = actor[SHP_FUCK_BLACK_SQUARE];
                with (_local2) {
                    width = 930;
                    height = 90;
                    alpha = 0.6;
                };
                DefineFromClass(CB_FUCK_UNCHECKED, cb_unchecked, 320, ((POS_IF_WIN_Y + REL_IF_WIN_CB_Y) + 150));
                actor[CB_FUCK_UNCHECKED].addEventListener(MouseEvent.CLICK, CheckFuck);
                DefineFromClass(CB_FUCK_CHECKED, cb_checked, 320, ((POS_IF_WIN_Y + REL_IF_WIN_CB_Y) + 150));
                actor[CB_FUCK_CHECKED].addEventListener(MouseEvent.CLICK, UncheckFuck);
                DefineLbl(LBL_FUCK, param_bullshit_text, 380, ((POS_IF_WIN_Y + REL_IF_WIN_CB_Y) + 150), FontFormat_Bullshit);
                AddFilter(LBL_FUCK, Filter_Shadow);
                _local2 = actor[LBL_FUCK];
                with (_local2) {
                    width = 840;
                    wordWrap = true;
                };
                DefineBunch(BNC_FUCK, SHP_FUCK_BLACK_SQUARE, CB_FUCK_UNCHECKED, LBL_FUCK);
                DefineBtn(BTN_IF_LOGIN, txt[TXT_LOGIN], RequestLogin, btnClassBasic, ((POS_IF_WIN_X + REL_IF_WIN_WELCOME_X) + REL_IF_WIN_BTN_X), ((POS_IF_WIN_Y + REL_IF_WIN_BTN_Y) + AIRRelMoveYButton2));
                DefineBtn(BTN_IF_SIGNUP, txt[TXT_SIGNUP], RequestSignup, btnClassBasic, ((POS_IF_WIN_X + REL_IF_WIN_WELCOME_X) + REL_IF_WIN_BTN_X), (((POS_IF_WIN_Y + REL_IF_WIN_BTN_Y) + REL_IF_WIN_BTN_2_Y) + AIRRelMoveYButton));
                DefineBtn(BTN_IF_REQUEST_PASSWORD, txt[TXT_REQUEST_PASSWORD], RequestPassword, btnClassBasic, ((POS_IF_WIN_X + REL_IF_WIN_WELCOME_X) + REL_IF_WIN_BTN_X), ((POS_IF_WIN_Y + REL_IF_WIN_BTN_Y) + AIRRelMoveY));
                DefineLbl(LBL_ERROR, "", POS_IF_ERROR_X, POS_IF_ERROR_Y, FontFormat_Error);
                AddFilter(LBL_ERROR, Filter_Shadow);
                DefineBunch(BNC_WINDOW_LOGIN, BLACK_SQUARE, IMG_IF_WINDOW, LBL_WINDOW_TITLE, BTN_IF_LOGIN, LBL_NAME, INP_NAME);
                AddBunch(BNC_WINDOW_LOGIN, LBL_LOGIN_PASSWORD, INP_LOGIN_PASSWORD, CNT_GOTO_SIGNUP, CNT_FORGOT_PASSWORD);
                DefineBunch(BNC_WINDOW_SIGNUP, BLACK_SQUARE, IMG_IF_WINDOW, LBL_WINDOW_TITLE, BTN_IF_SIGNUP, LBL_NAME, INP_NAME);
                AddBunch(BNC_WINDOW_SIGNUP, LBL_EMAIL, INP_EMAIL, LBL_PASSWORD, INP_PASSWORD, CNT_GOTO_LOGIN, CB_AGB_UNCHECKED, CNT_AGB, LBL_LOGIN_LEGAL_0, LBL_LOGIN_LEGAL_1, LBL_LOGIN_LEGAL_2, CNT_DATENSCHUTZ);
                AddBunch(BNC_WINDOW_SIGNUP, IMG_PASSWORD_SMILEY_SAD, IMG_PASSWORD_SMILEY_NEUTRAL, IMG_PASSWORD_SMILEY_HAPPY);
                DefineBunch(BNC_WINDOW_FORGOT_PASSWORD, BLACK_SQUARE, IMG_IF_WINDOW, LBL_WINDOW_TITLE, BTN_IF_REQUEST_PASSWORD, LBL_NAME, INP_NAME);
                AddBunch(BNC_WINDOW_FORGOT_PASSWORD, LBL_EMAIL, INP_EMAIL, CNT_GOTO_LOGIN);
                DrachenSetzen();
                PulseTimer = new Timer(20);
                PulseLevel = 0;
                _local2 = PulseTimer;
                with (_local2) {
                    addEventListener(TimerEvent.TIMER, PulseEvent);
                    start();
                };
                DefineImg(IMG_SCR_BUILDCHAR_BACKGROUND, "res/gfx/scr/buildchar/char_erstellung.png", false, POS_SCR_BUILDCHAR_1_X, POS_SCR_BUILDCHAR_1_Y);
                DefineBunch(BNC_SCR_BUILDCHAR, IMG_SCR_BUILDCHAR_BACKGROUND, IMG_IF_MAIN);
                DefineLbl(LBL_SCREEN_TITLE, txt[TXT_CREATE_CHARACTER], POS_SCREEN_TITLE_X, POS_SCREEN_TITLE_Y, FontFormat_ScreenTitle);
                AddFilter(LBL_SCREEN_TITLE, Filter_Shadow);
                actor[LBL_SCREEN_TITLE].x = (POS_SCREEN_TITLE_X - int((actor[LBL_SCREEN_TITLE].textWidth / 2)));
                DefineBtn(BTN_RANDOM, txt[TXT_RANDOM], RandomizeCharImage, btnClassLogin, POS_SCREEN_RANDOM_BUTTON_X, POS_SCREEN_RANDOM_BUTTON_Y);
                DefineBtn(BTN_CREATE_CHARACTER, txt[TXT_BTN_CREATE_CHARACTER], ShowSignupScreen, btnClassBasic, POS_SCR_BUILDCHAR_CREATE_X, POS_SCR_BUILDCHAR_CREATE_Y);
                DefineBtn(BTN_MODIFY_CHARACTER, txt[TXT_BTN_MODIFY_CHARACTER], RequestChangeFace, btnClassBasic, POS_SCR_BUILDCHAR_CREATE_X, POS_SCR_BUILDCHAR_CREATE_Y);
                DefineLbl(LBL_CREATE_RACE, "", POS_CREATE_RACE_X, POS_CREATE_RACE_Y, FontFormat_Default);
                DefineLbl(LBL_CREATE_RACE_DESC, "", POS_CREATE_RACE_X, 0, FontFormat_DefaultLeft);
                _local2 = actor[LBL_CREATE_RACE_DESC];
                with (_local2) {
                    width = SIZE_BUILDCHAR_LINES_X;
                    wordWrap = true;
                };
                DefineLbl(LBL_CREATE_CLASS, "", POS_CREATE_RACE_X, 0, FontFormat_Default);
                DefineLbl(LBL_CREATE_CLASS_DESC, "", POS_CREATE_RACE_X, 0, FontFormat_DefaultLeft);
                _local2 = actor[LBL_CREATE_CLASS_DESC];
                with (_local2) {
                    width = SIZE_BUILDCHAR_LINES_X;
                    wordWrap = true;
                };
                AddFilter(LBL_CREATE_RACE, Filter_Shadow);
                AddFilter(LBL_CREATE_RACE_DESC, Filter_Shadow);
                AddFilter(LBL_CREATE_CLASS, Filter_Shadow);
                AddFilter(LBL_CREATE_CLASS_DESC, Filter_Shadow);
                DefineLbl(LBL_CREATE_GOTO_LOGIN, txt[TXT_CREATE_GOTO_LOGIN], 0, 0, FontFormat_Default);
                AddFilter(LBL_CREATE_GOTO_LOGIN, Filter_Shadow);
                MakePersistent(LBL_CREATE_GOTO_LOGIN);
                DefineCnt(CNT_CREATE_GOTO_LOGIN, 0, POS_SCR_BUILDCHAR_LOGIN_Y);
                _local2 = actor[CNT_CREATE_GOTO_LOGIN];
                with (_local2) {
                    addChild(actor[LBL_CREATE_GOTO_LOGIN]);
                    textLinkMakeClickable(getChildAt(0).parent);
                    mouseChildren = false;
                    mouseEnabled = true;
                    buttonMode = true;
                    useHandCursor = true;
                    addEventListener(MouseEvent.CLICK, ShowLoginScreen);
                    x = (POS_SCR_BUILDCHAR_LOGIN_X - actor[LBL_CREATE_GOTO_LOGIN].textWidth);
                };
                DefineImg(IMG_M_IDLE, "res/gfx/scr/buildchar/button_male_idle.jpg", false, POS_SCR_BUILDCHAR_GENDER_X, POS_SCR_BUILDCHAR_GENDER_Y);
                DefineCnt(IMG_M_ACT, POS_SCR_BUILDCHAR_GENDER_X, POS_SCR_BUILDCHAR_GENDER_Y);
                DefineImg(IMG_F_IDLE, "res/gfx/scr/buildchar/button_female_idle.jpg", false, (POS_SCR_BUILDCHAR_GENDER_X + REL_SCR_BUILDCHAR_GENDER_X), POS_SCR_BUILDCHAR_GENDER_Y);
                DefineCnt(IMG_F_ACT, (POS_SCR_BUILDCHAR_GENDER_X + REL_SCR_BUILDCHAR_GENDER_X), POS_SCR_BUILDCHAR_GENDER_Y);
                actor[IMG_M_IDLE].addEventListener(MouseEvent.CLICK, SelectGender);
                actor[IMG_F_IDLE].addEventListener(MouseEvent.CLICK, SelectGender);
                i = 0;
                while (i < 2) {
                    EnablePopup((IMG_M_IDLE + (i * 2)), txt[(TXT_GENDER_M + i)]);
                    EnablePopup((IMG_M_ACT + (i * 2)), txt[(TXT_GENDER_M + i)]);
                    i = (i + 1);
                };
                DefineImg(IMG_KASTE_1_IDLE, "res/gfx/scr/buildchar/button_warrior_idle.jpg", false, POS_SCR_BUILDCHAR_CASTE_X, POS_SCR_BUILDCHAR_CASTE_Y);
                DefineCnt(IMG_KASTE_1_ACT, POS_SCR_BUILDCHAR_CASTE_X, POS_SCR_BUILDCHAR_CASTE_Y);
                DefineImg(IMG_KASTE_2_IDLE, "res/gfx/scr/buildchar/button_mage_idle.jpg", false, (POS_SCR_BUILDCHAR_CASTE_X + REL_SCR_BUILDCHAR_CASTE_X), POS_SCR_BUILDCHAR_CASTE_Y);
                DefineCnt(IMG_KASTE_2_ACT, (POS_SCR_BUILDCHAR_CASTE_X + REL_SCR_BUILDCHAR_CASTE_X), POS_SCR_BUILDCHAR_CASTE_Y);
                DefineImg(IMG_KASTE_3_IDLE, "res/gfx/scr/buildchar/button_hunter_idle.jpg", false, (POS_SCR_BUILDCHAR_CASTE_X + (REL_SCR_BUILDCHAR_CASTE_X * 2)), POS_SCR_BUILDCHAR_CASTE_Y);
                DefineCnt(IMG_KASTE_3_ACT, (POS_SCR_BUILDCHAR_CASTE_X + (REL_SCR_BUILDCHAR_CASTE_X * 2)), POS_SCR_BUILDCHAR_CASTE_Y);
                actor[IMG_KASTE_1_IDLE].addEventListener(MouseEvent.CLICK, SelectCaste);
                actor[IMG_KASTE_2_IDLE].addEventListener(MouseEvent.CLICK, SelectCaste);
                actor[IMG_KASTE_3_IDLE].addEventListener(MouseEvent.CLICK, SelectCaste);
                i = 0;
                while (i < 3) {
                    EnablePopup((IMG_KASTE_1_IDLE + (i * 2)), txt[(TXT_CLASSNAME + i)]);
                    EnablePopup((IMG_KASTE_1_ACT + (i * 2)), txt[(TXT_CLASSNAME + i)]);
                    i = (i + 1);
                };
                DefineBunch(BNC_VOLK_BTNS_M);
                DefineBunch(BNC_VOLK_BTNS_F);
                DefineBunch(BNC_VOLK_BTNS_ALL);
                DefineImg(IMG_VOLK_MARKER, "res/gfx/scr/buildchar/button_marked.png", true);
                WhenLoaded(CloneMarker);
                i = 0;
                while (i <= 7) {
                    pos_x = (POS_SCR_BUILDCHAR_VOLK_X + ((i)<4) ? 0 : REL_SCR_BUILDCHAR_VOLK_X);
                    pos_y = (POS_SCR_BUILDCHAR_VOLK_Y + (((i)<4) ? i : (i - 4) * REL_SCR_BUILDCHAR_VOLK_Y));
                    switch ((i + 1)){
                        case 1:
                            volk = "human";
                            break;
                        case 2:
                            volk = "elf";
                            break;
                        case 3:
                            volk = "dwarf";
                            break;
                        case 4:
                            volk = "gnome";
                            break;
                        case 5:
                            volk = "orc";
                            break;
                        case 6:
                            volk = "darkelf";
                            break;
                        case 7:
                            volk = "goblin";
                            break;
                        case 8:
                            volk = "demon";
                            break;
                    };
                    DefineImg((IMG_VOLK_1_M_IDLE + i), (("res/gfx/scr/buildchar/button_" + volk) + "_male_idle.jpg"), false, pos_x, pos_y);
                    DefineCnt((IMG_VOLK_1_M_ACT + i), pos_x, pos_y);
                    DefineImg((IMG_VOLK_1_F_IDLE + i), (("res/gfx/scr/buildchar/button_" + volk) + "_female_idle.jpg"), false, pos_x, pos_y);
                    DefineCnt((IMG_VOLK_1_F_ACT + i), pos_x, pos_y);
                    AddBunch(BNC_VOLK_BTNS_M, (IMG_VOLK_1_M_IDLE + i));
                    AddBunch(BNC_VOLK_BTNS_F, (IMG_VOLK_1_F_IDLE + i));
                    AddBunch(BNC_VOLK_BTNS_ALL, (IMG_VOLK_1_M_IDLE + i), (IMG_VOLK_1_M_ACT + i), (IMG_VOLK_1_F_IDLE + i), (IMG_VOLK_1_F_ACT + i));
                    actor[(IMG_VOLK_1_M_IDLE + i)].addEventListener(MouseEvent.CLICK, SelectRace);
                    actor[(IMG_VOLK_1_F_IDLE + i)].addEventListener(MouseEvent.CLICK, SelectRace);
                    EnablePopup((IMG_VOLK_1_M_IDLE + i), txt[(TXT_RACENAME + i)]);
                    EnablePopup((IMG_VOLK_1_M_ACT + i), txt[(TXT_RACENAME + i)]);
                    EnablePopup((IMG_VOLK_1_F_IDLE + i), txt[(TXT_RACENAME + i)]);
                    EnablePopup((IMG_VOLK_1_F_ACT + i), txt[(TXT_RACENAME + i)]);
                    i = (i + 1);
                };
                i = 0;
                while (i < 10) {
                    DefineImg((IMG_CHARIMG_BACKGROUND + i), "", false, ((POS_SCREEN_TITLE_X - 150) + REL_CHARIMG_X), (POS_SCREEN_TITLE_Y + REL_CHARIMG_Y));
                    DefineImg((IMG_CHARIMG_BACKGROUND2 + i), "", false, ((POS_SCREEN_TITLE_X - 150) + REL_CHARIMG_X), (POS_SCREEN_TITLE_Y + REL_CHARIMG_Y));
                    i = (i + 1);
                };
                DefineBtn(BTN_MOUTH_MINUS, "", ModifyCharacter, btnClassArrowLeft);
                DefineBtn(BTN_MOUTH_PLUS, "", ModifyCharacter, btnClassArrowRight);
                DefineBtn(BTN_HAIR_MINUS, "", ModifyCharacter, btnClassArrowLeft);
                DefineBtn(BTN_HAIR_PLUS, "", ModifyCharacter, btnClassArrowRight);
                DefineBtn(BTN_BROWS_MINUS, "", ModifyCharacter, btnClassArrowLeft);
                DefineBtn(BTN_BROWS_PLUS, "", ModifyCharacter, btnClassArrowRight);
                DefineBtn(BTN_EYES_MINUS, "", ModifyCharacter, btnClassArrowLeft);
                DefineBtn(BTN_EYES_PLUS, "", ModifyCharacter, btnClassArrowRight);
                DefineBtn(BTN_NOSE_MINUS, "", ModifyCharacter, btnClassArrowLeft);
                DefineBtn(BTN_NOSE_PLUS, "", ModifyCharacter, btnClassArrowRight);
                DefineBtn(BTN_EARS_MINUS, "", ModifyCharacter, btnClassArrowLeft);
                DefineBtn(BTN_EARS_PLUS, "", ModifyCharacter, btnClassArrowRight);
                DefineBtn(BTN_BEARD_MINUS, "", ModifyCharacter, btnClassArrowLeft);
                DefineBtn(BTN_BEARD_PLUS, "", ModifyCharacter, btnClassArrowRight);
                DefineBtn(BTN_SPECIAL_MINUS, "", ModifyCharacter, btnClassArrowLeft);
                DefineBtn(BTN_SPECIAL_PLUS, "", ModifyCharacter, btnClassArrowRight);
                DefineBtn(BTN_SPECIAL2_MINUS, "", ModifyCharacter, btnClassArrowLeft);
                DefineBtn(BTN_SPECIAL2_PLUS, "", ModifyCharacter, btnClassArrowRight);
                DefineBtn(BTN_COLOR_MINUS, "", ModifyCharacter, btnClassArrowLeft);
                DefineBtn(BTN_COLOR_PLUS, "", ModifyCharacter, btnClassArrowRight);
                i = 0;
                while (i < 10) {
                    DefineLbl((LBL_MOUTH + i), (((i == 9)) ? txt[TXT_COLOR] : ((i)<7) ? txt[(TXT_MOUTH + i)] : txt[((TXT_SPECIAL + i) - 7)]), 0, 0, FontFormat_Default);
                    AddFilter((LBL_MOUTH + i), Filter_Shadow);
                    i = (i + 1);
                };
                DefineBunch(BNC_CHARIMG, IMG_CHARIMG_BACKGROUND, IMG_CHARIMG_MOUTH, IMG_CHARIMG_EARS, IMG_CHARIMG_BEARD, IMG_CHARIMG_NOSE, IMG_CHARIMG_EYES, IMG_CHARIMG_BROWS, IMG_CHARIMG_SPECIAL, IMG_CHARIMG_SPECIAL2, IMG_CHARIMG_HAIR);
                DefineBunch(BNC_CHARIMG2, IMG_CHARIMG_BACKGROUND2, IMG_CHARIMG_MOUTH2, IMG_CHARIMG_EARS2, IMG_CHARIMG_BEARD2, IMG_CHARIMG_NOSE2, IMG_CHARIMG_EYES2, IMG_CHARIMG_BROWS2, IMG_CHARIMG_SPECIAL12, IMG_CHARIMG_SPECIAL22, IMG_CHARIMG_HAIR2);
                DefineBunch(BNC_CHARIMG_SPECIALOVL_ELF_M, IMG_CHARIMG_BROWS);
                DefineBunch(BNC_CHARIMG_SPECIALOVL_GOBLIN_M, IMG_CHARIMG_BROWS, IMG_CHARIMG_EARS, IMG_CHARIMG_BEARD, IMG_CHARIMG_MOUTH, IMG_CHARIMG_NOSE);
                DefineBunch(BNC_CHARIMG_SPECIALOVL_DWARF_M, IMG_CHARIMG_EYES, IMG_CHARIMG_SPECIAL, IMG_CHARIMG_HAIR);
                DefineBunch(BNC_CHARIMG_SPECIALOVL_HUMAN_M, IMG_CHARIMG_BEARD);
                DefineBunch(BNC_CHARIMG_SPECIALOVL_GOBLIN_F, IMG_CHARIMG_MOUTH, IMG_CHARIMG_HAIR, IMG_CHARIMG_NOSE);
                DefineBunch(BNC_CHARIMG_SPECIALOVL_ORC_F, IMG_CHARIMG_MOUTH, IMG_CHARIMG_HAIR);
                DefineBunch(BNC_CHARIMG_SPECIALOVL_ELF_F, IMG_CHARIMG_NOSE, IMG_CHARIMG_EYES, IMG_CHARIMG_BROWS, IMG_CHARIMG_HAIR, IMG_CHARIMG_EARS, IMG_CHARIMG_MOUTH);
                DefineBunch(BNC_CHARIMG_SPECIALOVL_HUMAN_F, IMG_CHARIMG_BROWS, IMG_CHARIMG_EYES, IMG_CHARIMG_HAIR, IMG_CHARIMG_EARS);
                DefineBunch(BNC_CHARIMG_SPECIALOVL_DWARF_F, IMG_CHARIMG_BROWS, IMG_CHARIMG_EYES, IMG_CHARIMG_HAIR);
                DefineBunch(BNC_CHARIMG_SPECIALOVL_GNOM_M, IMG_CHARIMG_BEARD, IMG_CHARIMG_HAIR);
                DefineBunch(BNC_CHARIMG_SPECIALOVL_DARKELF_M, IMG_CHARIMG_EARS);
                DefineBunch(BNC_SCREEN_BUILDCHAR, BNC_SCR_BUILDCHAR, BLACK_SQUARE, LBL_SCREEN_TITLE, BNC_CHARIMG, BTN_RANDOM, BTN_CREATE_CHARACTER);
                AddBunch(BNC_SCREEN_BUILDCHAR, LBL_CREATE_RACE, LBL_CREATE_RACE_DESC, LBL_CREATE_CLASS, LBL_CREATE_CLASS_DESC, CNT_CREATE_GOTO_LOGIN);
                AddBunch(BNC_SCREEN_BUILDCHAR, BTN_MOUTH_MINUS, BTN_MOUTH_PLUS);
                AddBunch(BNC_SCREEN_BUILDCHAR, BTN_HAIR_MINUS, BTN_HAIR_PLUS);
                AddBunch(BNC_SCREEN_BUILDCHAR, BTN_COLOR_MINUS, BTN_COLOR_PLUS);
                AddBunch(BNC_SCREEN_BUILDCHAR, BTN_BROWS_MINUS, BTN_BROWS_PLUS);
                AddBunch(BNC_SCREEN_BUILDCHAR, BTN_EYES_MINUS, BTN_EYES_PLUS);
                AddBunch(BNC_SCREEN_BUILDCHAR, BTN_BEARD_MINUS, BTN_BEARD_PLUS);
                AddBunch(BNC_SCREEN_BUILDCHAR, BTN_NOSE_MINUS, BTN_NOSE_PLUS);
                AddBunch(BNC_SCREEN_BUILDCHAR, BTN_EARS_MINUS, BTN_EARS_PLUS);
                AddBunch(BNC_SCREEN_BUILDCHAR, BTN_SPECIAL_MINUS, BTN_SPECIAL_PLUS);
                AddBunch(BNC_SCREEN_BUILDCHAR, BTN_SPECIAL2_MINUS, BTN_SPECIAL2_PLUS);
                i = 0;
                while (i < 9) {
                    AddBunch(BNC_SCREEN_BUILDCHAR, (LBL_MOUTH + i));
                    i = (i + 1);
                };
                DefineImg(IMG_SCR_CITY_BACKG_NIGHT, "res/gfx/scr/stadt/stadt_nacht_background.jpg", false, POS_STADT_BACKG_X, POS_STADT_BACKG_Y);
                DefineImg(IMG_SCR_CITY_BACKG_DAWN, "res/gfx/scr/stadt/stadt_abend_background.jpg", false, POS_STADT_BACKG_X, POS_STADT_BACKG_Y);
                DefineImg(IMG_SCR_CITY_BACKG_DAY, "res/gfx/scr/stadt/stadt_tag_background.jpg", false, POS_STADT_BACKG_X, POS_STADT_BACKG_Y);
                DefineImg(IMG_SCR_CITY_MAIN_NIGHT, "res/gfx/scr/stadt/stadt_nacht_unten.jpg", false, POS_STADT_MAIN_X, POS_STADT_MAIN_Y);
                DefineImg(IMG_SCR_CITY_MAIN_DAWN, "res/gfx/scr/stadt/stadt_abend_unten.jpg", false, POS_STADT_MAIN_X, POS_STADT_MAIN_Y);
                DefineImg(IMG_SCR_CITY_MAIN_DAY, "res/gfx/scr/stadt/stadt_tag_unten.jpg", false, POS_STADT_MAIN_X, POS_STADT_MAIN_Y);
                DefineImg(IMG_SCR_CITY_FOREG_NIGHT, "res/gfx/scr/stadt/stadt_nacht_vordergrund.png", false, POS_STADT_BACKG_X, (POS_STADT_BACKG_Y + REL_STADT_FOREG_Y));
                DefineImg(IMG_SCR_CITY_FOREG_DAWN, "res/gfx/scr/stadt/stadt_abend_vordergrund.png", false, POS_STADT_BACKG_X, (POS_STADT_BACKG_Y + REL_STADT_FOREG_Y));
                DefineImg(IMG_SCR_CITY_FOREG_DAY, "res/gfx/scr/stadt/stadt_tag_vordergrund.png", false, POS_STADT_BACKG_X, (POS_STADT_BACKG_Y + REL_STADT_FOREG_Y));
                if (Capabilities.version.substr(0, 3) == "IOS"){
                    DefineBunch(BNC_SCREEN_CITY_NIGHT, IMG_SCR_CITY_BACKG_NIGHT, IMG_SCR_CITY_MAIN_NIGHT, IMG_SCR_CITY_FOREG_NIGHT, IMG_CITY_WACHE_NIGHT);
                    DefineBunch(BNC_SCREEN_CITY_DAWN, IMG_SCR_CITY_BACKG_DAWN, IMG_SCR_CITY_MAIN_DAWN, IMG_SCR_CITY_FOREG_DAWN, IMG_CITY_WACHE_NIGHT);
                    DefineBunch(BNC_SCREEN_CITY_DAY, IMG_SCR_CITY_BACKG_DAY, IMG_SCR_CITY_MAIN_DAY, IMG_SCR_CITY_FOREG_DAY, IMG_CITY_WACHE_DAY);
                } else {
                    DefineImg(IMG_SCR_CITY_CLOUDS_NIGHT, "res/gfx/scr/stadt/wolken_nacht.swf", false, POS_STADT_BACKG_X, POS_STADT_BACKG_Y);
                    DefineImg(IMG_SCR_CITY_CLOUDS_DAWN, "res/gfx/scr/stadt/wolken_abend.swf", false, POS_STADT_BACKG_X, POS_STADT_BACKG_Y);
                    DefineImg(IMG_SCR_CITY_CLOUDS_DAY, "res/gfx/scr/stadt/wolken_tag.swf", false, POS_STADT_BACKG_X, POS_STADT_BACKG_Y);
                    DefineBunch(BNC_SCREEN_CITY_NIGHT, IMG_SCR_CITY_BACKG_NIGHT, IMG_SCR_CITY_MAIN_NIGHT, IMG_SCR_CITY_CLOUDS_NIGHT, IMG_SCR_CITY_FOREG_NIGHT, IMG_CITY_WACHE_NIGHT);
                    DefineBunch(BNC_SCREEN_CITY_DAWN, IMG_SCR_CITY_BACKG_DAWN, IMG_SCR_CITY_MAIN_DAWN, IMG_SCR_CITY_CLOUDS_DAWN, IMG_SCR_CITY_FOREG_DAWN, IMG_CITY_WACHE_NIGHT);
                    DefineBunch(BNC_SCREEN_CITY_DAY, IMG_SCR_CITY_BACKG_DAY, IMG_SCR_CITY_MAIN_DAY, IMG_SCR_CITY_CLOUDS_DAY, IMG_SCR_CITY_FOREG_DAY, IMG_CITY_WACHE_DAY);
                };
                DefineImg(IMG_CITY_SHAKES, "res/gfx/scr/stadt/overlay_waffenladen.png", false, POS_CITY_SHAKES_X, POS_CITY_SHAKES_Y);
                DefineImg(IMG_CITY_ZAUBERLADEN, "res/gfx/scr/stadt/overlay_zauberladen.png", false, POS_CITY_ZAUBERLADEN_X, POS_CITY_ZAUBERLADEN_Y);
                DefineImg(IMG_CITY_RUHMESHALLE, "res/gfx/scr/stadt/overlay_ruhmeshalle.png", false, POS_CITY_RUHMESHALLE_X, POS_CITY_RUHMESHALLE_Y);
                DefineImg(IMG_CITY_ARENA, "res/gfx/scr/stadt/arena_glow.png", false, POS_CITY_ARENA_X, POS_CITY_ARENA_Y);
                DefineImg(IMG_CITY_ARENA_ONO1, "res/gfx/scr/stadt/arena2.png", false, POS_CITY_ARENA_X, POS_CITY_ARENA_Y);
                DefineImg(IMG_CITY_ARENA_ONO2, "res/gfx/scr/stadt/arena3.png", false, POS_CITY_ARENA_X, POS_CITY_ARENA_Y);
                DefineImg(IMG_CITY_ARENA_ONO3, "res/gfx/scr/stadt/arena4.png", false, POS_CITY_ARENA_X, POS_CITY_ARENA_Y);
                DefineImg(IMG_CITY_ARENA_ONO4, "res/gfx/scr/stadt/arena5.png", false, POS_CITY_ARENA_X, POS_CITY_ARENA_Y);
                DefineImg(IMG_CITY_DEALER, "res/gfx/scr/stadt/dealer_mouseover.png", false, POS_CITY_DEALER_X, POS_CITY_DEALER_Y);
                DefineImg(IMG_CITY_DEALER_ANI1, "res/gfx/scr/stadt/dealer1.png", false, POS_CITY_DEALER_X, POS_CITY_DEALER_Y);
                DefineImg(IMG_CITY_DEALER_ANI2, "res/gfx/scr/stadt/dealer2.png", false, POS_CITY_DEALER_X, POS_CITY_DEALER_Y);
                DefineImg(IMG_CITY_DEALER_ANI3, "res/gfx/scr/stadt/dealer3.png", false, POS_CITY_DEALER_X, POS_CITY_DEALER_Y);
                DefineImg(IMG_CITY_DEALER_ANI4, "res/gfx/scr/stadt/dealer4.png", false, POS_CITY_DEALER_X, POS_CITY_DEALER_Y);
                DefineImg(IMG_CITY_DEALER_ANI5, "res/gfx/scr/stadt/dealer5.png", false, POS_CITY_DEALER_X, POS_CITY_DEALER_Y);
                DefineImg(IMG_CITY_ESEL1, "res/gfx/scr/stadt/esel1.png", false, POS_CITY_ESEL_X, POS_CITY_ESEL_Y);
                DefineImg(IMG_CITY_ESEL2, "res/gfx/scr/stadt/esel2.png", true, POS_CITY_ESEL_X, POS_CITY_ESEL_Y);
                DefineImg(IMG_CITY_TAVERNE, "res/gfx/scr/stadt/kneipe.png", false, POS_CITY_TAVERNE_X, POS_CITY_TAVERNE_Y);
                DefineImg(IMG_CITY_POST, "res/gfx/scr/stadt/post.png", false, POS_CITY_POST_X, POS_CITY_POST_Y);
                DefineImg(IMG_CITY_WACHE_DAY, "res/gfx/scr/stadt/stadtwache_tag.png", false, POS_CITY_WACHE_X, POS_CITY_WACHE_Y);
                DefineImg(IMG_CITY_WACHE_NIGHT, "res/gfx/scr/stadt/stadtwache_abend_nacht.png", false, POS_CITY_WACHE_X, POS_CITY_WACHE_Y);
                DefineImg(IMG_CITY_SCHILD1, "res/gfx/scr/stadt/schild1.png", true, POS_CITY_SCHILD_X, POS_CITY_SCHILD_Y);
                DefineImg(IMG_CITY_SCHILD2, "res/gfx/scr/stadt/schild2.png", true, POS_CITY_SCHILD_X, POS_CITY_SCHILD_Y);
                DefineImg(IMG_CITY_SCHILD3, "res/gfx/scr/stadt/schild3.png", true, POS_CITY_SCHILD_X, POS_CITY_SCHILD_Y);
                DefineImg(IMG_CITY_SCHILD4, "res/gfx/scr/stadt/schild4.png", true, POS_CITY_SCHILD_X, POS_CITY_SCHILD_Y);
                DefineImg(IMG_CITY_MAGIER1, "res/gfx/scr/stadt/magier1.png", false, POS_CITY_MAGIER_X, POS_CITY_MAGIER_Y);
                DefineImg(IMG_CITY_MAGIER2, "res/gfx/scr/stadt/magier2.png", true, POS_CITY_MAGIER_X, POS_CITY_MAGIER_Y);
                DefineImg(IMG_CITY_ORK1, "res/gfx/scr/stadt/ork1.png", false, POS_CITY_ORK_X, POS_CITY_ORK_Y);
                DefineImg(IMG_CITY_ORK2, "res/gfx/scr/stadt/ork2.png", true, POS_CITY_ORK_X, POS_CITY_ORK_Y);
                DefineImg(IMG_CITY_SANDWICH1, "res/gfx/scr/stadt/sandwichtyp1.png", false, POS_CITY_SANDWICH_X, POS_CITY_SANDWICH_Y);
                DefineImg(IMG_CITY_SANDWICH2, "res/gfx/scr/stadt/sandwichtyp2.png", true, POS_CITY_SANDWICH_X, POS_CITY_SANDWICH_Y);
                DefineImg(IMG_CITY_ZWERG1, "res/gfx/scr/stadt/zwerg2.png", false, POS_CITY_ZWERG_X, POS_CITY_ZWERG_Y);
                DefineImg(IMG_CITY_ZWERG2, "res/gfx/scr/stadt/zwerg1.png", true, POS_CITY_ZWERG_X, POS_CITY_ZWERG_Y);
                DefineImg(IMG_CITY_ELF1, "res/gfx/scr/stadt/elf1.png", false, POS_CITY_ELF_X, POS_CITY_ELF_Y);
                DefineImg(IMG_CITY_ELF2, "res/gfx/scr/stadt/elf2.png", true, POS_CITY_ELF_X, POS_CITY_ELF_Y);
                DefineBunch(BNC_CITY_STATISTEN, IMG_CITY_MAGIER1, IMG_CITY_MAGIER2, IMG_CITY_ORK1, IMG_CITY_ORK2, IMG_CITY_SANDWICH1, IMG_CITY_SANDWICH2);
                AddBunch(BNC_CITY_STATISTEN, IMG_CITY_ZWERG1, IMG_CITY_ZWERG2, IMG_CITY_ELF1, IMG_CITY_ELF2, BNC_CITY_ZWERG, BNC_CITY_ORK);
                AddBunch(BNC_CITY_STATISTEN, IMG_CITY_SCHILD1, IMG_CITY_SCHILD2, IMG_CITY_SCHILD3, IMG_CITY_SCHILD4);
                DefineBunch(BNC_CITY_CA_OVL, BNC_IF_OVL, CA_CITY_SHAKES, CA_CITY_ZAUBERLADEN, CA_CITY_RUHMESHALLE, CA_CITY_ARENA, CA_CITY_DEALER, CA_CITY_ESEL, CA_CITY_TAVERNE, CA_CITY_POST, CA_CITY_WACHE, CA_CITY_BUH);
                DefineClickArea(CA_CITY_SHAKES, IMG_CITY_SHAKES, InterfaceBtnHandler, POS_CITY_CA_SHAKES_X, POS_CITY_CA_SHAKES_Y, SIZE_CITY_CA_SHAKES_X, SIZE_CITY_CA_SHAKES_Y, BNC_CITY_CA_OVL);
                DefineClickArea(CA_CITY_ZAUBERLADEN, IMG_CITY_ZAUBERLADEN, InterfaceBtnHandler, POS_CITY_CA_ZAUBERLADEN_X, POS_CITY_CA_ZAUBERLADEN_Y, SIZE_CITY_CA_ZAUBERLADEN_X, SIZE_CITY_CA_ZAUBERLADEN_Y, BNC_CITY_CA_OVL);
                DefineClickArea(CA_CITY_RUHMESHALLE, IMG_CITY_RUHMESHALLE, InterfaceBtnHandler, POS_CITY_CA_RUHMESHALLE_X, POS_CITY_CA_RUHMESHALLE_Y, (SIZE_CITY_CA_RUHMESHALLE_X - 45), SIZE_CITY_CA_RUHMESHALLE_Y, BNC_CITY_CA_OVL);
                DefineClickArea(CA_CITY_ARENA, IMG_CITY_ARENA, InterfaceBtnHandler, POS_CITY_CA_ARENA_X, POS_CITY_CA_ARENA_Y, SIZE_CITY_CA_ARENA_X, SIZE_CITY_CA_ARENA_Y, BNC_CITY_CA_OVL, ShowArenaOno, HideArenaOno);
                DefineClickArea(CA_CITY_DEALER, IMG_CITY_DEALER, InterfaceBtnHandler, POS_CITY_CA_DEALER_X, POS_CITY_CA_DEALER_Y, SIZE_CITY_CA_DEALER_X, SIZE_CITY_CA_DEALER_Y, BNC_CITY_CA_OVL, HideDealerEyes, ShowDealerEyes);
                DefineClickArea(CA_CITY_ESEL, IMG_CITY_ESEL2, InterfaceBtnHandler, POS_CITY_CA_ESEL_X, POS_CITY_CA_ESEL_Y, SIZE_CITY_CA_ESEL_X, SIZE_CITY_CA_ESEL_Y, BNC_CITY_CA_OVL, EselOver, EselOut);
                DefineClickArea(CA_CITY_TAVERNE, IMG_CITY_TAVERNE, InterfaceBtnHandler, POS_CITY_CA_TAVERNE_X, POS_CITY_CA_TAVERNE_Y, SIZE_CITY_CA_TAVERNE_X, SIZE_CITY_CA_TAVERNE_Y, BNC_CITY_ZWERG);
                DefineClickArea(CA_CITY_POST, IMG_CITY_POST, InterfaceBtnHandler, POS_CITY_CA_POST_X, POS_CITY_CA_POST_Y, SIZE_CITY_CA_POST_X, SIZE_CITY_CA_POST_Y, BNC_CITY_ORK);
                DefineClickArea(CA_CITY_WACHE, C_EMPTY, InterfaceBtnHandler, POS_CITY_CA_WACHE_X, POS_CITY_CA_WACHE_Y, SIZE_CITY_CA_WACHE_X, SIZE_CITY_CA_WACHE_Y, BNC_CITY_CA_OVL, WacheOver, WacheOut);
                DefineClickArea(CA_CITY_BUH, C_EMPTY, InterfaceBtnHandler, POS_CITY_CA_BUH_X, POS_CITY_CA_BUH_Y, SIZE_CITY_CA_BUH_X, SIZE_CITY_CA_BUH_Y, BNC_CITY_CA_OVL, BuhHover, BuhOut);
                AddMimickInterfaceButtonHoverHandler(CA_CITY_SHAKES);
                AddMimickInterfaceButtonHoverHandler(CA_CITY_ZAUBERLADEN);
                AddMimickInterfaceButtonHoverHandler(CA_CITY_RUHMESHALLE);
                AddMimickInterfaceButtonHoverHandler(CA_CITY_ARENA);
                AddMimickInterfaceButtonHoverHandler(CA_CITY_DEALER);
                AddMimickInterfaceButtonHoverHandler(CA_CITY_ESEL);
                AddMimickInterfaceButtonHoverHandler(CA_CITY_TAVERNE);
                AddMimickInterfaceButtonHoverHandler(CA_CITY_POST);
                AddMimickInterfaceButtonHoverHandler(CA_CITY_WACHE);
                DefineBunch(BNC_CITY_OVERLAYS, IMG_CITY_SHAKES, IMG_CITY_ZAUBERLADEN, IMG_CITY_RUHMESHALLE, IMG_CITY_ARENA, IMG_CITY_DEALER, IMG_CITY_ESEL2, IMG_CITY_TAVERNE, IMG_CITY_POST);
                DefineBunch(BNC_SCREEN_CITY, IMG_IF_MAIN, CA_CITY_SHAKES, CA_CITY_ZAUBERLADEN, CA_CITY_RUHMESHALLE, CA_CITY_ARENA, IMG_CITY_DEALER_ANI5, CA_CITY_DEALER, IMG_CITY_ESEL1, CA_CITY_ESEL, BNC_CITY_CA_OVL, CA_CITY_TAVERNE, CA_CITY_POST, CA_CITY_BUH);
                DefineBunch(BNC_CITY_ZWERG);
                DefineBunch(BNC_CITY_ORK);
                Buh = false;
                if (lang_code == "de"){
                    DefineImg(IMG_BUBBLE_ARENA, (("res/gfx/scr/stadt/" + lang_code) + "/bubble_arena.png"), false, POS_BUBBLE_ARENA_X, POS_BUBBLE_ARENA_Y);
                    DefineImg(IMG_BUBBLE_ESEL, (("res/gfx/scr/stadt/" + lang_code) + "/bubble_esel.png"), false, POS_BUBBLE_ESEL_X, POS_BUBBLE_ESEL_Y);
                    DefineImg(IMG_BUBBLE_TAVERNE, (("res/gfx/scr/stadt/" + lang_code) + "/bubble_gasthaus.png"), false, POS_BUBBLE_TAVERNE_X, POS_BUBBLE_TAVERNE_Y);
                    DefineImg(IMG_BUBBLE_RUHMESHALLE, (("res/gfx/scr/stadt/" + lang_code) + "/bubble_heldenhalle.png"), false, POS_BUBBLE_RUHMESHALLE_X, POS_BUBBLE_RUHMESHALLE_Y);
                    DefineImg(IMG_BUBBLE_KRISTALL, (("res/gfx/scr/stadt/" + lang_code) + "/bubble_kristall.png"), false, POS_BUBBLE_KRISTALL_X, POS_BUBBLE_KRISTALL_Y);
                    DefineImg(IMG_BUBBLE_ORAKEL, (("res/gfx/scr/stadt/" + lang_code) + "/bubble_orakel.png"), false, POS_BUBBLE_ORAKEL_X, POS_BUBBLE_ORAKEL_Y);
                    DefineImg(IMG_BUBBLE_DEALER, (("res/gfx/scr/stadt/" + lang_code) + "/bubble_pilzdealer.png"), false, POS_BUBBLE_DEALER_X, POS_BUBBLE_DEALER_Y);
                    DefineImg(IMG_BUBBLE_POST, (("res/gfx/scr/stadt/" + lang_code) + "/bubble_post.png"), false, POS_BUBBLE_POST_X, POS_BUBBLE_POST_Y);
                    DefineImg(IMG_BUBBLE_WACHE, (("res/gfx/scr/stadt/" + lang_code) + "/bubble_stadtwache.png"), false, POS_BUBBLE_WACHE_X, POS_BUBBLE_WACHE_Y);
                    DefineImg(IMG_BUBBLE_STATUE, (("res/gfx/scr/stadt/" + lang_code) + "/bubble_statue.png"), false, POS_BUBBLE_STATUE_X, POS_BUBBLE_STATUE_Y);
                    DefineImg(IMG_BUBBLE_SHAKES, (("res/gfx/scr/stadt/" + lang_code) + "/bubble_waffenladen.png"), false, POS_BUBBLE_SHAKES_X, POS_BUBBLE_SHAKES_Y);
                    DefineImg(IMG_BUBBLE_ZAUBERLADEN, (("res/gfx/scr/stadt/" + lang_code) + "/bubble_zauberladen.png"), false, POS_BUBBLE_ZAUBERLADEN_X, POS_BUBBLE_ZAUBERLADEN_Y);
                } else {
                    DefineImg(IMG_BUBBLE_ARENA, "res/gfx/empty.png", false, POS_BUBBLE_ARENA_X, POS_BUBBLE_ARENA_Y);
                    DefineImg(IMG_BUBBLE_ESEL, "res/gfx/empty.png", false, POS_BUBBLE_ESEL_X, POS_BUBBLE_ESEL_Y);
                    DefineImg(IMG_BUBBLE_TAVERNE, "res/gfx/empty.png", false, POS_BUBBLE_TAVERNE_X, POS_BUBBLE_TAVERNE_Y);
                    DefineImg(IMG_BUBBLE_RUHMESHALLE, "res/gfx/empty.png", false, POS_BUBBLE_RUHMESHALLE_X, POS_BUBBLE_RUHMESHALLE_Y);
                    DefineImg(IMG_BUBBLE_KRISTALL, "res/gfx/empty.png", false, POS_BUBBLE_KRISTALL_X, POS_BUBBLE_KRISTALL_Y);
                    DefineImg(IMG_BUBBLE_ORAKEL, "res/gfx/empty.png", false, POS_BUBBLE_ORAKEL_X, POS_BUBBLE_ORAKEL_Y);
                    DefineImg(IMG_BUBBLE_DEALER, "res/gfx/empty.png", false, POS_BUBBLE_DEALER_X, POS_BUBBLE_DEALER_Y);
                    DefineImg(IMG_BUBBLE_POST, "res/gfx/empty.png", false, POS_BUBBLE_POST_X, POS_BUBBLE_POST_Y);
                    DefineImg(IMG_BUBBLE_WACHE, "res/gfx/empty.png", false, POS_BUBBLE_WACHE_X, POS_BUBBLE_WACHE_Y);
                    DefineImg(IMG_BUBBLE_STATUE, "res/gfx/empty.png", false, POS_BUBBLE_STATUE_X, POS_BUBBLE_STATUE_Y);
                    DefineImg(IMG_BUBBLE_SHAKES, "res/gfx/empty.png", false, POS_BUBBLE_SHAKES_X, POS_BUBBLE_SHAKES_Y);
                    DefineImg(IMG_BUBBLE_ZAUBERLADEN, "res/gfx/empty.png", false, POS_BUBBLE_ZAUBERLADEN_X, POS_BUBBLE_ZAUBERLADEN_Y);
                };
                DefineBunch(BNC_BUBBLES, IMG_BUBBLE_ARENA, IMG_BUBBLE_ESEL, IMG_BUBBLE_TAVERNE, IMG_BUBBLE_RUHMESHALLE, IMG_BUBBLE_KRISTALL, IMG_BUBBLE_ORAKEL);
                AddBunch(BNC_BUBBLES, IMG_BUBBLE_DEALER, IMG_BUBBLE_POST, IMG_BUBBLE_WACHE, IMG_BUBBLE_STATUE, IMG_BUBBLE_SHAKES, IMG_BUBBLE_ZAUBERLADEN);
                BubbleTimer = new Timer(20);
                BubbleWait = 0;
                BubbleTimer.addEventListener(TimerEvent.TIMER, Bubbles);
                BubbleTimer.start();
                CityAniTimer = new Timer(400);
                CityAniFrame = 0;
                SandwichPause = 0;
                ZwergFussTapp = 0;
                CityAniTimer.addEventListener(TimerEvent.TIMER, CityAni);
                CityAniTimer.start();
                iFrame = -1;
                SchildDir = 1;
                SchildTimer = new Timer(100);
                DealerAniTimer = new Timer(4000);
                DealerStepTimer = new Timer(100);
                DealerAniStep = 0;
                _local2 = DealerAniTimer;
                with (_local2) {
                    addEventListener(TimerEvent.TIMER, DealerAni);
                    if (!lightMode){
                        start();
                    } else {
                        stop();
                    };
                };
                LastOno = 0;
                ThisOno = LastOno;
                OnoPopupTimer = new Timer(50);
                PopupDir = false;
                DefineBtn(BTN_IF_EXIT, "", ExitScreen, btnClassExitScreen, POS_IF_EXIT_X, POS_IF_EXIT_Y);
                DefineImg(IMG_SCR_HALLE_BG, "res/gfx/scr/hall/heldenhalle.jpg", false, 280, 100);
                DefineBtn(BTN_HALLE_UP, "", RuhmesHalleScroll, btnClassArrowUp, POS_HALLE_UPDOWN_X, POS_HALLE_UP_Y);
                DefineBtn(BTN_HALLE_DOWN, "", RuhmesHalleScroll, btnClassArrowDown, POS_HALLE_UPDOWN_X, POS_HALLE_DOWN_Y);
                DefineBtn(BTN_HALLE_GOTO, txt[TXT_HALLE_GOTO], RuhmesHalleScroll, btnClassLogin, POS_HALLE_BTN_GOTO_X, POS_HALLE_BTN_GOTO_Y);
                DefineFromClass(INP_HALLE_GOTO, text_input1, POS_HALLE_INP_GOTO_X, POS_HALLE_INP_GOTO_Y, 2, "name");
                actor[INP_HALLE_GOTO].addEventListener(KeyboardEvent.KEY_DOWN, RuhmesHalleScroll);
                actor[INP_HALLE_GOTO].addEventListener(MouseEvent.CLICK, HalleSuchClick);
                DefineCnt(CNT_HALL_GOTO_SPIELER, 0, POS_HALLE_GOTO_SPIELERGILDEN_Y);
                DefineCnt(CNT_HALL_GOTO_GILDEN, POS_HALLE_GOTO_GILDEN_X, POS_HALLE_GOTO_SPIELERGILDEN_Y);
                DefineLbl(LBL_HALL_GOTO_SPIELER, txt[TXT_GOTO_SPIELER], 0, 0, FontFormat_LogoutLink);
                AddFilter(LBL_HALL_GOTO_SPIELER, Filter_Shadow);
                DefineLbl(LBL_HALL_GOTO_GILDEN, txt[TXT_GOTO_GILDEN], 0, 0, FontFormat_LogoutLink);
                AddFilter(LBL_HALL_GOTO_GILDEN, Filter_Shadow);
                DefineLbl(LBL_HALL_GOTO_SPIELER_HL, txt[TXT_GOTO_SPIELER], 0, 0, FontFormat_LogoutLinkHighLight);
                AddFilter(LBL_HALL_GOTO_SPIELER_HL, Filter_Shadow);
                DefineLbl(LBL_HALL_GOTO_GILDEN_HL, txt[TXT_GOTO_GILDEN], 0, 0, FontFormat_LogoutLinkHighLight);
                AddFilter(LBL_HALL_GOTO_GILDEN_HL, Filter_Shadow);
                MakePersistent(LBL_HALL_GOTO_SPIELER, LBL_HALL_GOTO_GILDEN);
                MakePersistent(LBL_HALL_GOTO_SPIELER_HL, LBL_HALL_GOTO_GILDEN_HL);
                _local2 = actor[CNT_HALL_GOTO_SPIELER];
                with (_local2) {
                    addChild(actor[LBL_HALL_GOTO_SPIELER]);
                    addChild(actor[LBL_HALL_GOTO_SPIELER_HL]);
                    textLinkMakeClickable(getChildAt(0).parent);
                    addEventListener(MouseEvent.CLICK, RuhmesHalleScroll);
                    x = (POS_HALLE_GOTO_SPIELER_X - actor[LBL_HALL_GOTO_SPIELER].textWidth);
                    mouseChildren = false;
                    useHandCursor = true;
                    buttonMode = true;
                };
                _local2 = actor[CNT_HALL_GOTO_GILDEN];
                with (_local2) {
                    addChild(actor[LBL_HALL_GOTO_GILDEN]);
                    addChild(actor[LBL_HALL_GOTO_GILDEN_HL]);
                    textLinkMakeClickable(getChildAt(0).parent);
                    addEventListener(MouseEvent.CLICK, RuhmesHalleScroll);
                    mouseChildren = false;
                    useHandCursor = true;
                    buttonMode = true;
                };
                DefineCnt(CNT_HALL_LIST, POS_HALL_LIST_X, POS_HALL_LIST_Y);
                DefineBunch(BNC_SCREEN_HALLE, IMG_SCR_HALLE_BG, BNC_IF_OVL, BTN_IF_EXIT, BTN_HALLE_UP, BTN_HALLE_DOWN, BTN_HALLE_GOTO, INP_HALLE_GOTO, CNT_HALL_LIST, CNT_HALL_GOTO_SPIELER, CNT_HALL_GOTO_GILDEN);
                DefineClickArea(CA_SCR_ARBEITEN_BLOCKCITY, C_EMPTY, InterfaceBtnHandler, 280, 100, (RES_X - 280), (RES_Y - 100));
                _local2 = actor[CA_SCR_ARBEITEN_BLOCKCITY];
                with (_local2) {
                    useHandCursor = false;
                    buttonMode = false;
                };
                DefineLbl(LBL_SCR_ARBEITEN_TEXT, txt[TXT_ARBEIT_TEXT], POS_LBL_ARBEITEN_TEXT_X, POS_LBL_ARBEITEN_TEXT_Y, FontFormat_Default);
                DefineLbl(LBL_SCR_ARBEITEN_TEXT2, "", POS_LBL_ARBEITEN_TEXT_X, POS_LBL_ARBEITEN_TEXT2_Y, FontFormat_Default);
                actor[LBL_SCR_ARBEITEN_TEXT].width = SIZE_LBL_ARBEITEN_TEXT_X;
                actor[LBL_SCR_ARBEITEN_TEXT].wordWrap = true;
                actor[LBL_SCR_ARBEITEN_TEXT2].width = SIZE_LBL_ARBEITEN_TEXT_X;
                actor[LBL_SCR_ARBEITEN_TEXT2].wordWrap = true;
                AddFilter(LBL_SCR_ARBEITEN_TEXT, Filter_Shadow);
                AddFilter(LBL_SCR_ARBEITEN_TEXT2, Filter_Shadow);
                DefineLbl(LBL_SCR_ARBEITEN_TIME, "", 0, (POS_IF_WIN_Y + REL_LBL_ARBEITEN_TIME_Y), FontFormat_Default);
                AddFilter(LBL_SCR_ARBEITEN_TIME, Filter_Shadow);
                DefineCnt(CNT_SCR_ARBEITEN_BAR, (POS_IF_WIN_X + REL_ARBEITEN_BAR_X), (POS_IF_WIN_Y + REL_ARBEITEN_BAR_Y));
                DefineCnt(CNT_SCR_ARBEITEN_FILL, (POS_IF_WIN_X + REL_ARBEITEN_FILL_X), (POS_IF_WIN_Y + REL_ARBEITEN_FILL_Y));
                DefineSlider(SLDR_ARBEITEN, 10, POS_ARBEITEN_SLIDER_X, POS_ARBEITEN_SLIDER_Y, ArbeitenSliderChange);
                DefineBtn(BTN_SCR_ARBEITEN_OK, txt[TXT_OK], RequestArbeiten, btnClassBasic, ((POS_IF_WIN_X + REL_IF_WIN_WELCOME_X) + REL_IF_WIN_BTN_X), (POS_IF_WIN_Y + REL_ARBEITEN_BTN_Y));
                DefineBtn(BTN_SCR_ARBEITEN_CLOSE, txt[TXT_OK], ShowCityScreen, btnClassBasic, ((POS_IF_WIN_X + REL_IF_WIN_WELCOME_X) + REL_IF_WIN_BTN_X), (POS_IF_WIN_Y + REL_ARBEITEN_BTN_Y));
                DefineBtn(BTN_SCR_ARBEITEN_CANCEL, txt[TXT_ABBRECHEN], RequestCancelArbeiten, btnClassBasic, ((POS_IF_WIN_X + REL_IF_WIN_WELCOME_X) + REL_IF_WIN_BTN_X), (POS_IF_WIN_Y + REL_ARBEITEN_BTN_Y));
                DefineBunch(BNC_SCREEN_ARBEITEN, CA_SCR_ARBEITEN_BLOCKCITY, IMG_IF_WINDOW, LBL_WINDOW_TITLE, LBL_SCR_ARBEITEN_TEXT, SLDR_ARBEITEN, LBL_SCR_ARBEITEN_TEXT2, BTN_SCR_ARBEITEN_OK, BTN_IF_EXIT);
                DefineBunch(BNC_SCREEN_ARBEITEN_WAIT, CA_SCR_ARBEITEN_BLOCKCITY, IMG_IF_WINDOW, LBL_WINDOW_TITLE, LBL_SCR_ARBEITEN_TEXT, CNT_SCR_ARBEITEN_BAR, CNT_SCR_ARBEITEN_FILL, LBL_SCR_ARBEITEN_TIME, BTN_SCR_ARBEITEN_CANCEL, BTN_IF_EXIT);
                DefineBunch(BNC_SCREEN_ARBEITEN_SUCCESS, CA_SCR_ARBEITEN_BLOCKCITY, IMG_IF_WINDOW, LBL_WINDOW_TITLE, LBL_SCR_ARBEITEN_TEXT, LBL_SCR_ARBEITEN_TEXT2, BTN_SCR_ARBEITEN_CLOSE, BTN_IF_EXIT);
                DefineClickArea(CA_SCR_INVITE_BLOCKCITY, C_EMPTY, InterfaceBtnHandler, 280, 100, (RES_X - 280), (RES_Y - 100));
                _local2 = actor[CA_SCR_INVITE_BLOCKCITY];
                with (_local2) {
                    useHandCursor = false;
                    buttonMode = false;
                };
                DefineLbl(LBL_INVITE_SUCCESS, "", ((POS_IF_WIN_X + REL_IF_WIN_WELCOME_X) - (420 / 2)), ((POS_IF_WIN_Y + REL_ARENA_TEXT_Y) + AIRRelMoveY), FontFormat_Default);
                AddFilter(LBL_INVITE_SUCCESS, Filter_Shadow);
                _local2 = actor[LBL_INVITE_SUCCESS];
                with (_local2) {
                    wordWrap = true;
                    width = 420;
                    text = txt[TXT_INVITESUCCESS];
                };
                DefineLbl(LBL_INVITE_TEXT, "", ((POS_IF_WIN_X + REL_IF_WIN_WELCOME_X) - (420 / 2)), ((POS_IF_WIN_Y + REL_ARENA_TEXT_Y) + AIRRelMoveY), FontFormat_Default);
                AddFilter(LBL_INVITE_TEXT, Filter_Shadow);
                _local2 = actor[LBL_INVITE_TEXT];
                with (_local2) {
                    wordWrap = true;
                    width = 420;
                    text = txt[TXT_INVITEINSTR];
                };
                DefineFromClass(INP_CHAR_INVITE, text_input1, 0, (((POS_IF_WIN_Y + REL_ARENA_INP_Y) - 40) + AIRRelMoveY), 2, "email");
                _local2 = actor[INP_CHAR_INVITE];
                with (_local2) {
                    getChildAt(1).text = "";
                    x = (((POS_IF_WIN_X + REL_IF_WIN_WELCOME_X) - int((width / 2))) + 40);
                    addEventListener(KeyboardEvent.KEY_DOWN, SendPlayerInvite);
                };
                DefineLbl(LBL_INVITE_TEXT2, txt[TXT_INVITEEMAIL], 0, ((actor[INP_CHAR_INVITE].y + 10) + AIRRelMoveY), FontFormat_Default);
                AddFilter(LBL_INVITE_TEXT2, Filter_Shadow);
                actor[LBL_INVITE_TEXT2].x = ((actor[INP_CHAR_INVITE].x - actor[LBL_INVITE_TEXT2].width) - 5);
                DefineFromClass(INP_CHAR_INVITE2, text_input1, 0, (((POS_IF_WIN_Y + REL_ARENA_INP_Y) + 10) + AIRRelMoveY), 2, "text");
                _local2 = actor[INP_CHAR_INVITE2];
                with (_local2) {
                    getChildAt(1).text = "";
                    x = (((POS_IF_WIN_X + REL_IF_WIN_WELCOME_X) - int((width / 2))) + 40);
                    addEventListener(KeyboardEvent.KEY_DOWN, SendPlayerInvite);
                };
                DefineLbl(LBL_INVITE_TEXT3, txt[TXT_INVITESUBJECT], 0, ((actor[INP_CHAR_INVITE2].y + 10) + AIRRelMoveY), FontFormat_Default);
                AddFilter(LBL_INVITE_TEXT3, Filter_Shadow);
                actor[LBL_INVITE_TEXT3].x = ((actor[INP_CHAR_INVITE2].x - actor[LBL_INVITE_TEXT3].width) - 5);
                DefineBtn(BTN_SCR_INVITE_OK, txt[TXT_OK], SendPlayerInvite, btnClassBasic, ((POS_IF_WIN_X + REL_IF_WIN_WELCOME_X) + REL_IF_WIN_BTN_X), (((POS_IF_WIN_Y + REL_ARBEITEN_BTN_Y) + 15) + AIRRelMoveY));
                DefineBtn(BTN_INVITE_SUCCESS_OK, txt[TXT_OK], RemoveInviteWindow, btnClassBasic, ((POS_IF_WIN_X + REL_IF_WIN_WELCOME_X) + REL_IF_WIN_BTN_X), (((POS_IF_WIN_Y + REL_ARBEITEN_BTN_Y) + 15) + AIRRelMoveY));
                DefineBunch(BNC_SCREEN_INVITE, CA_SCR_INVITE_BLOCKCITY, IMG_IF_WINDOW, LBL_WINDOW_TITLE, LBL_INVITE_TEXT, INP_CHAR_INVITE, LBL_INVITE_TEXT2, INP_CHAR_INVITE2, LBL_INVITE_TEXT3, BTN_SCR_INVITE_OK, BTN_IF_EXIT, LBL_INVITE_SUCCESS, BTN_INVITE_SUCCESS_OK);
                DefineBunch(BNC_INVITE_INPUTDIALOGUE, LBL_INVITE_TEXT, INP_CHAR_INVITE, LBL_INVITE_TEXT2, INP_CHAR_INVITE2, LBL_INVITE_TEXT3, BTN_SCR_INVITE_OK);
                DefineBunch(BNC_INVITE_SUCCESS, LBL_INVITE_SUCCESS, BTN_INVITE_SUCCESS_OK);
                DefineImg(IMG_ALBUM_BG, "res/gfx/scr/album/album.jpg", false, 280, 100);
                DefineLbl(LBL_ALBUM_PAGENUMBER_LEFT, "", 340, 690, FontFormat_Book);
                DefineLbl(LBL_ALBUM_PAGENUMBER_RIGHT, "", 0, 690, FontFormat_Book);
                DefineLbl(LBL_ALBUM_COLLECTION, "", 330, 135, FontFormat_BookLeft);
                DefineBunch(BNC_SCREEN_ALBUM, IMG_ALBUM_BG, BNC_IF_OVL, BTN_IF_EXIT, LBL_ALBUM_PAGENUMBER_LEFT, LBL_ALBUM_PAGENUMBER_RIGHT, LBL_ALBUM_COLLECTION);
                DefineImg(IMG_UNKNOWN_ENEMY, "res/gfx/scr/fight/monster/unknown.jpg", false, 0, 0);
                i = 0;
                while (i < 4) {
                    DefineLbl((LBL_ALBUM_HEADING + i), "", 0, (((i % 2))==0) ? 135 : 440, FontFormat_Book);
                    DefineLbl((LBL_ALBUM_HINT + i), "", 0, (((i % 2))==0) ? 165 : 470, FontFormat_BookHint);
                    DefineCnt((CNT_ALBUM_MONSTER + i), ((i)<=1) ? 420 : 890, (((i % 2))==0) ? 170 : 475);
                    DefineCnt((CNT_ALBUM_MONSTER_FRAME + i), (actor[(CNT_ALBUM_MONSTER + i)].x - 8), (actor[(CNT_ALBUM_MONSTER + i)].y - 8));
                    actor[(CNT_ALBUM_MONSTER + i)].scaleX = 0.8;
                    actor[(CNT_ALBUM_MONSTER + i)].scaleY = 0.8;
                    actor[(CNT_ALBUM_MONSTER_FRAME + i)].scaleX = 0.8;
                    actor[(CNT_ALBUM_MONSTER_FRAME + i)].scaleY = 0.8;
                    DefineCnt((CNT_ALBUM_WEAPON_1 + i), (actor[(CNT_ALBUM_MONSTER + i)].x + 25), (actor[(CNT_ALBUM_MONSTER + i)].y + (((i % 2))==0) ? 10 : 130));
                    DefineCnt((CNT_ALBUM_WEAPON_2 + i), (actor[(CNT_ALBUM_MONSTER + i)].x + 135), (actor[(CNT_ALBUM_MONSTER + i)].y + (((i % 2))==0) ? 10 : 130));
                    DefineCnt((CNT_ALBUM_WEAPON_3 + i), (actor[(CNT_ALBUM_MONSTER + i)].x - 30), (actor[(CNT_ALBUM_MONSTER + i)].y + (((i % 2))==0) ? 130 : 10));
                    DefineCnt((CNT_ALBUM_WEAPON_4 + i), (actor[(CNT_ALBUM_MONSTER + i)].x + 75), (actor[(CNT_ALBUM_MONSTER + i)].y + (((i % 2))==0) ? 130 : 10));
                    DefineCnt((CNT_ALBUM_WEAPON_5 + i), (actor[(CNT_ALBUM_MONSTER + i)].x + 180), (actor[(CNT_ALBUM_MONSTER + i)].y + (((i % 2))==0) ? 130 : 10));
                    DefineCnt((CNT_ALBUM_WEAPON_EPIC + i), (actor[(CNT_ALBUM_MONSTER + i)].x + 75), (actor[(CNT_ALBUM_MONSTER + i)].y + 70));
                    AddBunch(BNC_SCREEN_ALBUM, (LBL_ALBUM_HEADING + i), (LBL_ALBUM_HINT + i), (CNT_ALBUM_MONSTER + i), (CNT_ALBUM_MONSTER_FRAME + i));
                    AddBunch(BNC_SCREEN_ALBUM, (CNT_ALBUM_WEAPON_1 + i), (CNT_ALBUM_WEAPON_2 + i), (CNT_ALBUM_WEAPON_3 + i));
                    AddBunch(BNC_SCREEN_ALBUM, (CNT_ALBUM_WEAPON_4 + i), (CNT_ALBUM_WEAPON_5 + i), (CNT_ALBUM_WEAPON_EPIC + i));
                    i = (i + 1);
                };
                DefineBunch(BNC_ALBUM_CAT_IN);
                i = 0;
                while (i < 5) {
                    DefineImg((IMG_ALBUM_CAT_OUT + i), (("res/gfx/scr/album/tab_" + String(i)) + "_out.jpg"), false, 0, 0);
                    DefineImg((IMG_ALBUM_CAT_IN + i), (("res/gfx/scr/album/tab_" + String(i)) + "_in.jpg"), false, 290, (300 + (i * 80)));
                    DefineCnt((CNT_ALBUM_CAT_OUT + i), 290, (300 + (i * 80)));
                    MakePersistent((IMG_ALBUM_CAT_OUT + i));
                    _local2 = actor[(CNT_ALBUM_CAT_OUT + i)];
                    with (_local2) {
                        addChild(actor[(IMG_ALBUM_CAT_OUT + i)]);
                        addEventListener(MouseEvent.CLICK, ShowAlbumContent);
                        mouseChildren = false;
                        buttonMode = true;
                        useHandCursor = true;
                    };
                    EnablePopup((IMG_ALBUM_CAT_IN + i), txt[((TXT_COLLECTION + 2) + i)]);
                    EnablePopup((CNT_ALBUM_CAT_OUT + i), txt[((TXT_COLLECTION + 2) + i)]);
                    AddBunch(BNC_ALBUM_CAT_IN, (IMG_ALBUM_CAT_IN + i));
                    AddBunch(BNC_SCREEN_ALBUM, (CNT_ALBUM_CAT_OUT + i), (IMG_ALBUM_CAT_IN + i));
                    i = (i + 1);
                };
                DefineBtn(BTN_ALBUM_PREV, "", ShowAlbumContent, btnClassArrowLeft, 340, 715);
                DefineBtn(BTN_ALBUM_NEXT, "", ShowAlbumContent, btnClassArrowRight, 1180, 715);
                AddBunch(BNC_SCREEN_ALBUM, BTN_ALBUM_PREV, BTN_ALBUM_NEXT);
                DefineImg(IMG_SCR_CHAR_BG, "res/gfx/scr/char/charbg.jpg", false, 280, 100);
                DefineImg(IMG_SCR_CHAR_BG_GOLDEN, "res/gfx/scr/char/gold_bg.jpg", false, 280, 100);
                DefineImg(IMG_SCR_CHAR_BG_RIGHT, "res/gfx/scr/char/character_right_new.jpg", false, (280 + 500), 100);
                i = 0;
                while (i < 13) {
                    DefineImg((IMG_MIRROR_PIECE + i), (("res/gfx/scr/char/mirror/mirror" + String((i + 1))) + ".png"), false, POS_SCR_CHAR_CHARIMG_X, POS_SCR_CHAR_CHARIMG_Y);
                    actor[(IMG_MIRROR_PIECE + i)].alpha = 0.3;
                    actor[(IMG_MIRROR_PIECE + i)].mouseEnabled = false;
                    i = (i + 1);
                };
                DefineImg(IMG_GOLDEN_FRAME, "res/gfx/scr/char/gold_frame.png", false, (POS_SCR_CHAR_CHARIMG_X - 3), (POS_SCR_CHAR_CHARIMG_Y - 5));
                DefineClickArea(CA_SELL_ITEM, C_EMPTY, undefined, (280 + 550), 100, 450, 700);
                DefineClickArea(CA_USE_ITEM, C_EMPTY, undefined, 280, 100, 500, 415);
                DefineCnt(CNT_SCR_CHAR_NAME, POS_CHAR_NAME_X, POS_CHAR_NAME_Y);
                DefineLbl(LBL_SCR_CHAR_NAME, "", 0, 0, FontFormat_Default);
                MakePersistent(LBL_SCR_CHAR_NAME);
                _local2 = actor[CNT_SCR_CHAR_NAME];
                with (_local2) {
                    addChild(actor[LBL_SCR_CHAR_NAME]);
                    textLinkMakeClickable(getChildAt(0).parent);
                    addEventListener(MouseEvent.CLICK, GotoPlayerGilde);
                    mouseChildren = false;
                    useHandCursor = true;
                    buttonMode = true;
                };
                DefineBtn(BTN_PREV_PLAYER, "", PrevPlayer, btnClassArrowLeft, (POS_SCR_CHAR_CHARIMG_X + 10), (POS_SCR_CHAR_CHARIMG_Y + 10));
                DefineBtn(BTN_NEXT_PLAYER, "", NextPlayer, btnClassArrowRight, (POS_SCR_CHAR_CHARIMG_X + 215), (POS_SCR_CHAR_CHARIMG_Y + 10));
                DefineFromClass(SHP_BLACK_GILDEEHRE, black_square_neutral, POS_GILDEEHRE_X, POS_GILDEEHRE_Y);
                _local2 = actor[SHP_BLACK_GILDEEHRE];
                with (_local2) {
                    width = SIZE_GILDEEHRE_X;
                    height = SIZE_GILDEEHRE_Y;
                    alpha = 0.65;
                };
                DefineCnt(CNT_SCR_CHAR_GILDE, ((POS_GILDEEHRE_X + REL_GILDEEHRE_X) + 40), (POS_GILDEEHRE_Y + REL_GILDEEHRE_Y));
                DefineLbl(LBL_SCR_CHAR_GILDE, "", 0, 0, FontFormat_Default);
                MakePersistent(LBL_SCR_CHAR_GILDE);
                _local2 = actor[CNT_SCR_CHAR_GILDE];
                with (_local2) {
                    addChild(actor[LBL_SCR_CHAR_GILDE]);
                    textLinkMakeClickable(getChildAt(0).parent);
                    addEventListener(MouseEvent.CLICK, JumpToPlayerHall);
                    mouseEnabled = true;
                    buttonMode = true;
                    useHandCursor = true;
                    mouseChildren = false;
                };
                DefineImg(IMG_SLOT_SUGGESTION, "res/gfx/scr/char/slot_suggestion.png", false, 0, 0);
                actor[IMG_SLOT_SUGGESTION].mouseEnabled = false;
                DefineLbl(LBL_SCR_CHAR_EHRE, "", 0, (POS_GILDEEHRE_Y + REL_GILDEEHRE_Y), FontFormat_Default);
                DefineImg(IMG_SCR_CHAR_KLASSE_1, "res/gfx/scr/char/char_krieger.jpg", false, ((POS_GILDEEHRE_X + REL_GILDEEHRE_X) - 10), ((POS_GILDEEHRE_Y + REL_GILDEEHRE_Y) - 10));
                DefineImg(IMG_SCR_CHAR_KLASSE_2, "res/gfx/scr/char/char_magier.jpg", false, ((POS_GILDEEHRE_X + REL_GILDEEHRE_X) - 10), ((POS_GILDEEHRE_Y + REL_GILDEEHRE_Y) - 10));
                DefineImg(IMG_SCR_CHAR_KLASSE_3, "res/gfx/scr/char/char_dieb.jpg", false, ((POS_GILDEEHRE_X + REL_GILDEEHRE_X) - 10), ((POS_GILDEEHRE_Y + REL_GILDEEHRE_Y) - 10));
                EnablePopup(IMG_SCR_CHAR_KLASSE_1, txt[TXT_CLASSNAME]);
                EnablePopup(IMG_SCR_CHAR_KLASSE_2, txt[(TXT_CLASSNAME + 1)]);
                EnablePopup(IMG_SCR_CHAR_KLASSE_3, txt[(TXT_CLASSNAME + 2)]);
                DefineFromClass(SHP_BLACK_CHARDESC, black_square_neutral, POS_GILDEEHRE_X, ((POS_GILDEEHRE_Y + SIZE_GILDEEHRE_Y) + REL_BLACK_CHARDESC_Y));
                _local2 = actor[SHP_BLACK_CHARDESC];
                with (_local2) {
                    width = SIZE_BLACK_CHARDESC_X;
                    height = SIZE_BLACK_CHARDESC_Y;
                    alpha = 0.65;
                };
                DefineFromClass(INP_CHARDESC, SimpleTextAreaSmall, (POS_GILDEEHRE_X + REL_GILDEEHRE_X), (((POS_GILDEEHRE_Y + SIZE_GILDEEHRE_Y) + REL_BLACK_CHARDESC_Y) + REL_GILDEEHRE_Y), 1, "text");
                CleanupField(INP_CHARDESC);
                AddFilter(INP_CHARDESC, Filter_Shadow);
                _local2 = actor[INP_CHARDESC];
                with (_local2) {
                    mouseEnabled = true;
                    addEventListener(FocusEvent.FOCUS_IN, EnterPlayerDesc);
                    addEventListener(FocusEvent.FOCUS_OUT, LeavePlayerDesc);
                };
                DefineLbl(LBL_CHAR_DELAY, "", 0, (100 + REL_CHAR_DELAY_Y), FontFormat_Default);
                AddFilter(LBL_CHAR_DELAY, Filter_Shadow);
                DefineBunch(BNC_CHAR_RIGHTPANE, IMG_SCR_CHAR_BG_RIGHT, BNC_IF_OVL, IMG_SCR_CHAR_KLASSE_1, IMG_SCR_CHAR_KLASSE_2, IMG_SCR_CHAR_KLASSE_3, CNT_SCR_CHAR_GILDE, LBL_SCR_CHAR_EHRE, INP_CHARDESC);
                AddFilter(LBL_SCR_CHAR_NAME, Filter_Shadow);
                AddFilter(LBL_SCR_CHAR_GILDE, Filter_Shadow);
                AddFilter(LBL_SCR_CHAR_EHRE, Filter_Shadow);
                DefineImg(IMG_SCR_CHAR_EXPBAR, "res/gfx/scr/char/experience.jpg", false, POS_EXPERIENCE_BAR_X, POS_EXPERIENCE_BAR_Y);
                DefineLbl(LBL_SCR_CHAR_EXPLABEL, "", 0, (POS_EXPERIENCE_BAR_Y + 2), FontFormat_LifeBar);
                AddFilter(LBL_SCR_CHAR_EXPLABEL, Filter_Shadow);
                DefineClickArea(CA_SCR_CHAR_EXPBAR, C_EMPTY, undefined, POS_EXPERIENCE_BAR_X, POS_EXPERIENCE_BAR_Y, 254, 24);
                DefineBtn(BTN_CHAR_MESSAGE, txt[TXT_MESSAGE], PlayerSendMessage, btnClassBasic, POS_CHAR_PLAYERBTN_X1, POS_CHAR_PLAYERBTN_Y);
                DefineBtn(BTN_CHAR_ATTACK, txt[TXT_ATTACK], PlayerAttack, btnClassBasic, POS_CHAR_PLAYERBTN_X2, POS_CHAR_PLAYERBTN_Y);
                DefineBtn(BTN_CHAR_GILDE, txt[TXT_ZURGILDE], ZurGilde, btnClassBasic, POS_CHAR_PLAYERBTN_X2, POS_CHAR_PLAYERBTN_Y);
                DefineBtn(BTN_CHAR_ALBUM, txt[TXT_ALBUM], RequestAlbum, btnClassBasic, POS_CHAR_PLAYERBTN_X1, POS_CHAR_PLAYERBTN_Y);
                DefineBtn(BTN_PLAYER_GUILD_INVITE, "", PlayerGuildInvite, btnClassInvite, (((280 + 500) + REL_CHAR_RUESTUNG_X) + 223), ((100 + REL_CHAR_RUESTUNG_Y) - 7));
                EnablePopup(BTN_PLAYER_GUILD_INVITE, txt[TXT_SUBJECT_GUILD_INVITE]);
                DefineBtn(BTN_CHAR_INVITE, txt[(TXT_ACH_4 + 4)], PlayerInvite, btnClassBasic, POS_CHAR_PLAYERBTN_X2, POS_CHAR_PLAYERBTN_Y);
                EnablePopup(BTN_CHAR_INVITE, txt[(TXT_ACH_4 + 5)]);
                i = 0;
                while (i < 8) {
                    DefineImg((IMG_CHAR_MOUNT_1 + i), (("res/gfx/scr/char/mount_portrait_" + String((i + 1))) + ".jpg"), false, (POS_CHAR_MOUNT_X + REL_CHAR_MOUNT_IMG_X), POS_CHAR_MOUNT_Y);
                    _local2 = actor[(IMG_CHAR_MOUNT_1 + i)];
                    with (_local2) {
                        addEventListener(MouseEvent.CLICK, RequestStableScreen);
                    };
                    AddBunch(BNC_CHAR_RIGHTPANE, (IMG_CHAR_MOUNT_1 + i));
                    i = (i + 1);
                };
                DefineLbl(LBL_CHAR_MOUNT_NAME, "", POS_CHAR_MOUNT_X, POS_CHAR_MOUNT_Y, FontFormat_Default);
                AddFilter(LBL_CHAR_MOUNT_NAME, Filter_Shadow);
                DefineLbl(LBL_CHAR_MOUNT_DESCR, "", POS_CHAR_MOUNT_X, (POS_CHAR_MOUNT_Y + REL_CHAR_MOUNT_LINE_Y), FontFormat_DefaultLeft);
                _local2 = actor[LBL_CHAR_MOUNT_DESCR];
                with (_local2) {
                    wordWrap = true;
                    width = (REL_CHAR_MOUNT_IMG_X - 5);
                };
                AddFilter(LBL_CHAR_MOUNT_DESCR, Filter_Shadow);
                DefineLbl(LBL_CHAR_MOUNT_RUNTIME, "", POS_CHAR_MOUNT_X, (POS_CHAR_MOUNT_Y + (REL_CHAR_MOUNT_LINE_Y * 5)), FontFormat_Default);
                AddFilter(LBL_CHAR_MOUNT_RUNTIME, Filter_Shadow);
                DefineLbl(LBL_CHAR_MOUNT_GAIN, "", POS_CHAR_MOUNT_X, (POS_CHAR_MOUNT_Y + (REL_CHAR_MOUNT_LINE_Y * 4)), FontFormat_Default);
                AddFilter(LBL_CHAR_MOUNT_GAIN, Filter_Shadow);
                DefineImg(IMG_CHAR_RUESTUNG, "res/gfx/scr/char/icon_schild.jpg", false, ((280 + 500) + REL_CHAR_RUESTUNG_X), (100 + REL_CHAR_RUESTUNG_Y));
                DefineLbl(LBL_CHAR_RUESTUNG, "", (((280 + 500) + REL_CHAR_RUESTUNG_X) + REL_CHAR_RUESTUNG_TEXT_X), ((100 + REL_CHAR_RUESTUNG_Y) + REL_CHAR_RUESTUNG_TEXT_Y), FontFormat_Default);
                AddFilter(LBL_CHAR_RUESTUNG, Filter_Shadow);
                DefineImg(IMG_CHAR_ALBUM, "res/gfx/scr/char/icon_foliant.png", false, ((280 + 500) + 350), (100 + 20));
                AddBunch(BNC_CHAR_RIGHTPANE, LBL_CHAR_MOUNT_NAME, LBL_CHAR_MOUNT_RUNTIME, LBL_CHAR_MOUNT_GAIN, LBL_CHAR_MOUNT_DESCR, IMG_CHAR_RUESTUNG, LBL_CHAR_RUESTUNG);
                DefineBunch(BNC_SCREEN_CHAR, IMG_SCR_CHAR_BG, IMG_SCR_CHAR_EXPBAR, BNC_IF_OVL, BNC_CHAR_RIGHTPANE, LBL_SCR_CHAR_EXPLABEL, CA_SCR_CHAR_EXPBAR, CNT_SCR_CHAR_NAME, BTN_IF_EXIT);
                DefineBunch(BNC_SCREEN_CHAR_GOLDEN, IMG_SCR_CHAR_BG, IMG_SCR_CHAR_BG_GOLDEN, IMG_SCR_CHAR_EXPBAR, BNC_IF_OVL, BNC_CHAR_RIGHTPANE, LBL_SCR_CHAR_EXPLABEL, CA_SCR_CHAR_EXPBAR, CNT_SCR_CHAR_NAME, BTN_IF_EXIT);
                DefineBunch(BNC_CHAR_SECONDPROP);
                DefineBunch(BNC_CHAR_PREISE);
                BoostBtnRepeatTimer = new Timer(1000);
                DestroyBoostBtnTimer = false;
                i = 0;
                while (i < 5) {
                    DefineLbl((LBL_SCR_CHAR_STAERKE_CAPTION + i), txt[(TXT_CHAR_STAERKE + i)], POS_CHAR_PROP_COLUMN_1_X, (POS_CHAR_PROP_Y + (i * REL_CHAR_PROP_Y)), FontFormat_Default);
                    DefineLbl((LBL_SCR_CHAR_STAERKE + i), "", POS_CHAR_PROP_COLUMN_2_X, (POS_CHAR_PROP_Y + (i * REL_CHAR_PROP_Y)), FontFormat_Attrib);
                    DefineBtn((BTN_SCR_CHAR_STEIGERN1 + i), "", BoostAttribute, btnClassPlus, POS_CHAR_PROP_COLUMN_3_X, ((POS_CHAR_PROP_Y + (i * REL_CHAR_PROP_Y)) - 3));
                    _local2 = actor[(BTN_SCR_CHAR_STEIGERN1 + i)];
                    with (_local2) {
                        addEventListener(MouseEvent.MOUSE_DOWN, BoostBtnDownHandler);
                        addEventListener(MouseEvent.MOUSE_UP, BoostBtnUpHandler);
                        addEventListener(MouseEvent.MOUSE_OUT, BoostBtnUpHandler);
                        addEventListener(MouseEvent.MOUSE_OVER, BoostBtnOver);
                        addEventListener(MouseEvent.MOUSE_OUT, BoostBtnOut);
                    };
                    DefineLbl((LBL_SCR_CHAR_PREIS1 + i), "", 0, (POS_CHAR_PROP_Y + (i * REL_CHAR_PROP_Y)), FontFormat_Default);
                    DefineCnt((CNT_SCR_CHAR_GOLD1 + i), 0, (POS_CHAR_PROP_Y + (i * REL_CHAR_PROP_Y)));
                    DefineLbl((LBL_SCR_CHAR_SILBER1 + i), "", 0, (POS_CHAR_PROP_Y + (i * REL_CHAR_PROP_Y)), FontFormat_Default);
                    DefineCnt((CNT_SCR_CHAR_SILBER1 + i), 0, (POS_CHAR_PROP_Y + (i * REL_CHAR_PROP_Y)));
                    DefineLbl((LBL_SCR_CHAR_SCHADEN_CAPTION + i), txt[(TXT_CHAR_SCHADEN + i)], POS_CHAR_PROP_COLUMN_5_X, (POS_CHAR_PROP_Y + (i * REL_CHAR_PROP_Y)), FontFormat_Default);
                    DefineLbl((LBL_SCR_CHAR_SCHADEN + i), "", POS_CHAR_PROP_COLUMN_6_X, (POS_CHAR_PROP_Y + (i * REL_CHAR_PROP_Y)), FontFormat_Attrib);
                    AddBunch(BNC_CHAR_SECONDPROP, (LBL_SCR_CHAR_SCHADEN_CAPTION + i));
                    AddBunch(BNC_SCREEN_CHAR, (BTN_SCR_CHAR_STEIGERN1 + i), (LBL_SCR_CHAR_PREIS1 + i), (CNT_SCR_CHAR_GOLD1 + i), (LBL_SCR_CHAR_SILBER1 + i), (CNT_SCR_CHAR_SILBER1 + i));
                    AddBunch(BNC_SCREEN_CHAR, (LBL_SCR_CHAR_STAERKE + i), (LBL_SCR_CHAR_STAERKE_CAPTION + i), (LBL_SCR_CHAR_SCHADEN + i), (LBL_SCR_CHAR_SCHADEN_CAPTION + i));
                    AddBunch(BNC_SCREEN_CHAR_GOLDEN, (BTN_SCR_CHAR_STEIGERN1 + i), (LBL_SCR_CHAR_PREIS1 + i), (CNT_SCR_CHAR_GOLD1 + i), (LBL_SCR_CHAR_SILBER1 + i), (CNT_SCR_CHAR_SILBER1 + i));
                    AddBunch(BNC_SCREEN_CHAR_GOLDEN, (LBL_SCR_CHAR_STAERKE + i), (LBL_SCR_CHAR_STAERKE_CAPTION + i), (LBL_SCR_CHAR_SCHADEN + i), (LBL_SCR_CHAR_SCHADEN_CAPTION + i));
                    AddBunch(BNC_CHAR_PREISE, (LBL_SCR_CHAR_PREIS1 + i), (CNT_SCR_CHAR_GOLD1 + i), (LBL_SCR_CHAR_SILBER1 + i), (CNT_SCR_CHAR_SILBER1 + i));
                    AddBunch(BNC_CHAR_RIGHTPANE, (BTN_SCR_CHAR_STEIGERN1 + i));
                    i = (i + 1);
                };
                BoostBtnChange = 0;
                BoostBtnTimer = new Timer(40);
                BoostBtnTimer.addEventListener(TimerEvent.TIMER, BoostBtnTimerFunction);
                BoostBtnTimer.start();
                DefineCnt(CNT_CHAR_SLOT_1, POS_CHAR_SLOTS_LEFT_X, POS_CHAR_SLOTS_TOP_Y);
                DefineCnt(CNT_CHAR_SLOT_2, POS_CHAR_SLOTS_LEFT_X, POS_CHAR_SLOTS_ROW2_Y);
                DefineCnt(CNT_CHAR_SLOT_3, POS_CHAR_SLOTS_LEFT_X, POS_CHAR_SLOTS_ROW3_Y);
                DefineCnt(CNT_CHAR_SLOT_4, POS_CHAR_SLOTS_LEFT_X, POS_CHAR_SLOTS_ROW4_Y);
                DefineCnt(CNT_CHAR_SLOT_5, POS_CHAR_SLOTS_RIGHT_X, POS_CHAR_SLOTS_TOP_Y);
                DefineCnt(CNT_CHAR_SLOT_6, POS_CHAR_SLOTS_RIGHT_X, POS_CHAR_SLOTS_ROW2_Y);
                DefineCnt(CNT_CHAR_SLOT_7, POS_CHAR_SLOTS_RIGHT_X, POS_CHAR_SLOTS_ROW3_Y);
                DefineCnt(CNT_CHAR_SLOT_8, POS_CHAR_SLOTS_RIGHT_X, POS_CHAR_SLOTS_ROW4_Y);
                DefineCnt(CNT_CHAR_SLOT_9, POS_CHAR_SLOTS_R4C2_X, POS_CHAR_SLOTS_ROW4_Y);
                DefineCnt(CNT_CHAR_SLOT_10, POS_CHAR_SLOTS_R4C3_X, POS_CHAR_SLOTS_ROW4_Y);
                DefineCnt(CNT_CHAR_SLOT_11, POS_CHAR_SLOTS_LEFT_X, POS_CHAR_SLOTS_ROW5_Y);
                DefineCnt(CNT_CHAR_SLOT_12, POS_CHAR_SLOTS_R5C2_X, POS_CHAR_SLOTS_ROW5_Y);
                DefineCnt(CNT_CHAR_SLOT_13, POS_CHAR_SLOTS_R5C3_X, POS_CHAR_SLOTS_ROW5_Y);
                DefineCnt(CNT_CHAR_SLOT_14, POS_CHAR_SLOTS_R5C4_X, POS_CHAR_SLOTS_ROW5_Y);
                DefineCnt(CNT_CHAR_SLOT_15, POS_CHAR_SLOTS_RIGHT_X, POS_CHAR_SLOTS_ROW5_Y);
                i = 0;
                while (i < 8) {
                    DefineImg((IMG_EMPTY_SLOT_1 + i), (("res/gfx/scr/char/slot" + String((i + 1))) + ".png"), false, 0, 0);
                    i = (i + 1);
                };
                DefineImg(IMG_EMPTY_SLOT_9_1, "res/gfx/scr/char/slot9_1.png", false, 0, 0);
                DefineImg(IMG_EMPTY_SLOT_9_2, "res/gfx/scr/char/slot9_2.png", false, 0, 0);
                DefineImg(IMG_EMPTY_SLOT_9_3, "res/gfx/scr/char/slot9_3.png", false, 0, 0);
                DefineImg(IMG_EMPTY_SLOT_10, "res/gfx/scr/char/slot10.png", false, 0, 0);
                DefineImg(IMG_NO_SHIELD, "res/gfx/itm/no_shield.png", false, 0, 0);
                itmTyp = 0;
                while (itmTyp <= 14) {
                    itmPic = 0;
                    while (itmPic < C_ITEMS_PER_TYPE) {
                        itmColor = 0;
                        while (itmColor < 5) {
                            switch (itmTyp){
                                case 1:
                                case 2:
                                case 3:
                                case 4:
                                case 5:
                                case 6:
                                case 7:
                                    itmClass = 0;
                                    while (itmClass < 3) {
                                        DefineImg(GetItemID(itmTyp, itmPic, itmColor, itmClass), GetItemFile(itmTyp, itmPic, itmColor, itmClass), false, 0, 0);
                                        itmClass = (itmClass + 1);
                                    };
                                    break;
                                default:
                                    DefineImg(GetItemID(itmTyp, itmPic, itmColor, 0), GetItemFile(itmTyp, itmPic, itmColor, 0), false, 0, 0);
                            };
                            itmColor = (itmColor + 1);
                        };
                        itmPic = (itmPic + 1);
                    };
                    itmTyp = (itmTyp + 1);
                };
                itmTyp = 0;
                while (itmTyp <= 1) {
                    itmPic = 0;
                    while (itmPic < C_ITEMS_PER_TYPE) {
                        itmColor = 0;
                        while (itmColor < 5) {
                            DefineImg(GetArrowID(itmTyp, itmPic, itmColor), (((((((("res/gfx/itm/1-" + String((itmTyp + 2))) + "/shot") + (((itmTyp == 0)) ? 2 : 1)) + "-") + String(itmPic)) + "-") + String(((((itmPic >= 50)) ? (((itmTyp == 0)) ? (((itmColor == 3)) ? 3 : 0) : 0) : itmColor) + 1))) + ".png"), false, 0, 0);
                            itmColor = (itmColor + 1);
                        };
                        itmPic = (itmPic + 1);
                    };
                    itmTyp = (itmTyp + 1);
                };
                i = 0;
                while (i < 15) {
                    SetCnt((CNT_CHAR_SLOT_1 + i), ITM_OFFS);
                    actor[(CNT_CHAR_SLOT_1 + i)].addEventListener(MouseEvent.MOUSE_DOWN, InventoryItemMouseDown);
                    if (i >= 10){
                        actor[(CNT_CHAR_SLOT_1 + i)].addEventListener(MouseEvent.MOUSE_DOWN, BackpackItemMouseDown);
                    };
                    AddBunch(BNC_SCREEN_CHAR, (CNT_CHAR_SLOT_1 + i));
                    AddBunch(BNC_SCREEN_CHAR_GOLDEN, (CNT_CHAR_SLOT_1 + i));
                    EnableDragDrop((CNT_CHAR_SLOT_1 + i), DropHandler);
                    actor[(CNT_CHAR_SLOT_1 + i)].addEventListener(MouseEvent.MOUSE_UP, InventoryItemMouseUp);
                    i = (i + 1);
                };
                DefineBunch(BNC_CHAR_ACH);
                i = 0;
                while (i < 40) {
                    DefineCnt((CNT_CHAR_ACH + i), (POS_SCR_CHAR_ACH_X + (((buffedMode) ? REL_SCR_CHAR_ACH_X_BUFFED : REL_SCR_CHAR_ACH_X) * (i % 8))), POS_SCR_CHAR_ACH_Y);
                    DefineImg((IMG_CHAR_ACH + i), (((("res/gfx/scr/char/ach/ach-" + String(((i % 8) + 1))) + "-") + String(int((i / 8)))) + ".png"), false, 0, 0);
                    SetCnt((CNT_CHAR_ACH + i), (IMG_CHAR_ACH + i));
                    MakePersistent((IMG_CHAR_ACH + i));
                    if (!txt[(TXT_ACH_4 + 4)]){
                        if ((i % 8) == 7){
                            _local2 = actor[(CNT_CHAR_ACH + i)];
                            with (_local2) {
                                addEventListener(MouseEvent.CLICK, OpenFriendLink);
                                buttonMode = true;
                                useHandCursor = true;
                                mouseChildren = false;
                            };
                        };
                    };
                    AddBunch(BNC_CHAR_ACH, (CNT_CHAR_ACH + i));
                    i = (i + 1);
                };
                i = 0;
                while (i < 3) {
                    DefineCnt((CNT_CHAR_POTION + i), (POS_POTION_X + (REL_POTION_X * i)), POS_POTION_Y);
                    _local2 = actor[(CNT_CHAR_POTION + i)];
                    with (_local2) {
                        scaleX = 0.5;
                        scaleY = 0.5;
                    };
                    AddBunch(BNC_SCREEN_CHAR, (CNT_CHAR_POTION + i));
                    AddBunch(BNC_SCREEN_CHAR_GOLDEN, (CNT_CHAR_POTION + i));
                    AddBunch(BNC_CHAR_RIGHTPANE, (CNT_CHAR_POTION + i));
                    DoubleClickHandler(actor[(CNT_CHAR_POTION + i)], PotionSingleClick, PotionDoubleClick);
                    i = (i + 1);
                };
                DefineSnd(SND_SHARD, "res/sfx/tower/shard.mp3");
                DefineSnd(SND_MIRROR, "res/sfx/tower/mirror.mp3");
                DefineSnd(SND_HATCH, "res/sfx/tower/hatch.mp3");
                DefineCnt(CNT_TOWER_SCROLLAREA, (280 + 500), 100);
                _local2 = actor[CNT_TOWER_SCROLLAREA];
                with (_local2) {
                    scrollRect = new Rectangle(0, 0, 500, 700);
                    mouseChildren = false;
                    tabEnabled = false;
                    tabChildren = false;
                    focuseRect = false;
                };
                DefineBtn(BTN_TOWER_TRY, txt[TXT_TOWER_TRY], TowerBtnHandler, btnClassBasic, 940, 700);
                DefineImg(IMG_SCR_TOWER_BG, "res/gfx/scr/quest/locations/location_tower.jpg", false, 280, 100);
                DefineBunch(BNC_SCREEN_TOWER, IMG_SCR_CHAR_BG, CNT_TOWER_SCROLLAREA, BTN_TOWER_TRY, BNC_IF_OVL, BTN_IF_EXIT);
                towerLevelLabelTimer = new Timer(25);
                towerLevelLabelTimer.addEventListener(TimerEvent.TIMER, towerLevelLabelMoveFn);
                towerBoostPriceFadeoutTimer = new Timer(250, 1);
                towerBoostPriceFadeoutTimer.addEventListener(TimerEvent.TIMER, towerBoostPriceFadeout);
                i = 0;
                while (i < 3) {
                    DefineImg((IMG_TOWER_PORTRAIT + i), (("res/gfx/npc/copycat_" + String((i + 1))) + ".jpg"), false, POS_SCR_CHAR_CHARIMG_X, (POS_SCR_CHAR_CHARIMG_Y - 1));
                    DefineImg((IMG_TOWER_NO_PORTRAIT + i), (("res/gfx/npc/copycat_" + String((i + 1))) + "_empty.jpg"), false, POS_SCR_CHAR_CHARIMG_X, (POS_SCR_CHAR_CHARIMG_Y - 1));
                    DefineBtn((BTN_TOWER_STEIGERN1 + i), "", BoostCopycat, btnClassPlus, (POS_SCR_CHAR_CHARIMG_X + 232), (POS_SCR_CHAR_CHARIMG_Y + 260));
                    actor[(BTN_TOWER_STEIGERN1 + i)].scaleX = 0.8;
                    actor[(BTN_TOWER_STEIGERN1 + i)].scaleY = 0.8;
                    actor[(BTN_TOWER_STEIGERN1 + i)].addEventListener(MouseEvent.MOUSE_OVER, ShowTowerBoostPrices);
                    actor[(BTN_TOWER_STEIGERN1 + i)].addEventListener(MouseEvent.MOUSE_OUT, HideTowerBoostPrices);
                    EnablePopup((BTN_TOWER_STEIGERN1 + i), txt[TXT_BOOST_COPYCAT]);
                    DefineLbl((LBL_TOWER_BOOSTPRICELABEL + i), "", 0, (POS_EXPERIENCE_BAR_Y + 2), FontFormat_Default);
                    AddFilter((LBL_TOWER_BOOSTPRICELABEL + i), Filter_Shadow);
                    actor[(LBL_TOWER_BOOSTPRICELABEL + i)].alpha = 0;
                    AddBunch(BNC_SCREEN_TOWER, (IMG_TOWER_PORTRAIT + i), (IMG_TOWER_NO_PORTRAIT + i), (BTN_TOWER_STEIGERN1 + i), (LBL_TOWER_BOOSTPRICELABEL + i));
                    i = (i + 1);
                };
                i = 0;
                while (i < 15) {
                    AddBunch(BNC_SCREEN_TOWER, (CNT_CHAR_SLOT_1 + i));
                    i = (i + 1);
                };
                DefineBtn(BTN_PREV_COPYCAT, "", TowerBtnHandler, btnClassArrowLeft, (POS_SCR_CHAR_CHARIMG_X + 10), (POS_SCR_CHAR_CHARIMG_Y + 10));
                DefineBtn(BTN_NEXT_COPYCAT, "", TowerBtnHandler, btnClassArrowRight, (POS_SCR_CHAR_CHARIMG_X + 215), (POS_SCR_CHAR_CHARIMG_Y + 10));
                DefineCnt(CNT_TOWER_BOOSTCOIN, (POS_SCR_CHAR_CHARIMG_X + 205), POS_EXPERIENCE_BAR_Y);
                actor[CNT_TOWER_BOOSTCOIN].alpha = 0;
                DefineBunch(BNC_TOWER_BOOSTPRICE, LBL_TOWER_BOOSTPRICELABEL, (LBL_TOWER_BOOSTPRICELABEL + 1), (LBL_TOWER_BOOSTPRICELABEL + 2), CNT_TOWER_BOOSTCOIN);
                DefineLbl(LBL_TOWER_EXPLABEL, "", (POS_SCR_CHAR_CHARIMG_X + 3), (POS_EXPERIENCE_BAR_Y + 2), FontFormat_LifeBar);
                AddFilter(LBL_TOWER_EXPLABEL, Filter_Shadow);
                AddBunch(BNC_SCREEN_TOWER, BTN_PREV_COPYCAT, BTN_NEXT_COPYCAT);
                AddBunch(BNC_SCREEN_TOWER, LBL_TOWER_EXPLABEL, CNT_TOWER_BOOSTCOIN, CNT_SCR_CHAR_NAME);
                i = 0;
                while (i < 5) {
                    AddBunch(BNC_SCREEN_TOWER, (LBL_SCR_CHAR_STAERKE + i), (LBL_SCR_CHAR_STAERKE_CAPTION + i), (LBL_SCR_CHAR_SCHADEN + i), (LBL_SCR_CHAR_SCHADEN_CAPTION + i));
                    i = (i + 1);
                };
                DefineImg(IMG_TOWER_BG, "res/gfx/scr/tower/tower_back.jpg", false, 0, 0);
                DefineImg(IMG_TOWER_BASE, "res/gfx/scr/tower/tower_base.png", false, 0, 0);
                DefineImg(IMG_TOWER_LEVEL, "res/gfx/scr/tower/tower_level.png", false, 0, 0);
                DefineImg((IMG_TOWER_LEVEL + 1), "res/gfx/scr/tower/tower_level.png", false, 0, 0);
                DefineImg((IMG_TOWER_LEVEL + 2), "res/gfx/scr/tower/tower_level.png", false, 0, 0);
                DefineImg(IMG_TOWER_ROOF, "res/gfx/scr/tower/tower_roof.png", false, 0, 0);
                DefineImg(IMG_TOWER_WINDOW_OPEN, "res/gfx/scr/tower/tower_window_open.png", false, 0, 0);
                DefineImg(IMG_TOWER_WINDOW_CLOSED, "res/gfx/scr/tower/tower_window_closed.png", false, 0, 0);
                DefineImg(IMG_TOWER_WINDOW_BURNT, "res/gfx/scr/tower/tower_window_destroyed.png", false, 0, 0);
                DefineCnt(CNT_TOWER_WINDOW, 0, 0);
                DefineCnt((CNT_TOWER_WINDOW + 1), 0, 0);
                DefineCnt((CNT_TOWER_WINDOW + 2), 0, 0);
                i = 0;
                while (i < 3) {
                    DefineCnt((CNT_TOWER_FACE + i), 175, 0);
                    actor[(CNT_TOWER_FACE + i)].scaleX = 0.5;
                    actor[(CNT_TOWER_FACE + i)].scaleY = 0.5;
                    i = (i + 1);
                };
                DefineBunch(BNC_TOWER_PIECES, IMG_TOWER_BG, IMG_TOWER_BASE, IMG_TOWER_LEVEL, (IMG_TOWER_LEVEL + 1), (IMG_TOWER_LEVEL + 2), IMG_TOWER_ROOF);
                AddBunch(BNC_TOWER_PIECES, CNT_TOWER_FACE, (CNT_TOWER_FACE + 1), (CNT_TOWER_FACE + 2), IMG_TOWER_WINDOW_OPEN, IMG_TOWER_WINDOW_CLOSED, IMG_TOWER_WINDOW_BURNT);
                MakePersistent(IMG_TOWER_BG, IMG_TOWER_BASE, IMG_TOWER_LEVEL, (IMG_TOWER_LEVEL + 1), (IMG_TOWER_LEVEL + 2), IMG_TOWER_ROOF);
                MakePersistent(CNT_TOWER_WINDOW, (CNT_TOWER_WINDOW + 1), (CNT_TOWER_WINDOW + 2), CNT_TOWER_FACE, (CNT_TOWER_FACE + 1), (CNT_TOWER_FACE + 2));
                DefineImg(IMG_SCR_FIDGET_BG, "res/gfx/scr/shops/fidget.jpg", false, POS_SCR_SHOP_BG_X, 100);
                DefineImg(IMG_FIDGET_AFFE1, "res/gfx/scr/shops/fidget_affe1.jpg", false, (POS_SCR_SHOP_BG_X + REL_FIDGET_AFFE_X), (100 + REL_FIDGET_AFFE_Y));
                DefineImg(IMG_FIDGET_AFFE2, "res/gfx/scr/shops/fidget_affe2.jpg", false, (POS_SCR_SHOP_BG_X + REL_FIDGET_AFFE_X), (100 + REL_FIDGET_AFFE_Y));
                DefineImg(IMG_FIDGET_AFFE3, "res/gfx/scr/shops/fidget_affe3.jpg", false, (POS_SCR_SHOP_BG_X + REL_FIDGET_AFFE_X), (100 + REL_FIDGET_AFFE_Y));
                actor[IMG_FIDGET_AFFE1].mouseEnabled = false;
                actor[IMG_FIDGET_AFFE2].mouseEnabled = false;
                actor[IMG_FIDGET_AFFE3].mouseEnabled = false;
                if (Capabilities.version.substr(0, 3) != "IOS"){
                    DefineImg(IMG_FIDGET_TAGKERZE, "res/gfx/scr/shops/tagkerze.swf", false, (POS_SCR_SHOP_BG_X + REL_FIDGET_TAGKERZE_X), (100 + REL_FIDGET_TAGKERZE_Y));
                    DefineImg(IMG_FIDGET_NACHTKERZE, "res/gfx/scr/shops/nachtkerze.swf", false, (POS_SCR_SHOP_BG_X + REL_FIDGET_NACHTKERZE_X), (100 + REL_FIDGET_NACHTKERZE_Y));
                    actor[IMG_FIDGET_TAGKERZE].mouseEnabled = false;
                    actor[IMG_FIDGET_NACHTKERZE].mouseEnabled = false;
                };
                DefineImg(IMG_FIDGET_DAY, "res/gfx/scr/shops/fidget_normal.jpg", false, (POS_SCR_SHOP_BG_X + REL_FIDGET_X), (100 + REL_FIDGET_Y));
                DefineImg(IMG_FIDGET_IDLE, "res/gfx/scr/shops/fidget_langeweile.jpg", false, (POS_SCR_SHOP_BG_X + REL_FIDGET_X), (100 + REL_FIDGET_Y));
                DefineImg(IMG_FIDGET_SALE, "res/gfx/scr/shops/fidget_wasverkauft.jpg", false, (POS_SCR_SHOP_BG_X + REL_FIDGET_X), (100 + REL_FIDGET_Y));
                DefineImg(IMG_FIDGET_NIGHT, "res/gfx/scr/shops/fidget_nachts.jpg", false, (POS_SCR_SHOP_BG_X + REL_FIDGET_X), (100 + REL_FIDGET_Y));
                actor[IMG_FIDGET_DAY].mouseEnabled = false;
                actor[IMG_FIDGET_IDLE].mouseEnabled = false;
                actor[IMG_FIDGET_SALE].mouseEnabled = false;
                actor[IMG_FIDGET_NIGHT].mouseEnabled = false;
                DefineImg(IMG_FIDGET_BLINZELN, "res/gfx/scr/shops/fidget_normal_blinzeln.jpg", false, ((POS_SCR_SHOP_BG_X + REL_FIDGET_X) + REL_FIDGET_BLINZELN_X), ((100 + REL_FIDGET_Y) + REL_FIDGET_BLINZELN_Y));
                actor[IMG_FIDGET_BLINZELN].mouseEnabled = false;
                DefineImg(IMG_SHAKES_DAY, "res/gfx/scr/shops/shakes_normal.jpg", false, (POS_SCR_SHOP_BG_X + REL_SHAKES_X), (100 + REL_SHAKES_Y));
                DefineImg(IMG_SHAKES_NIGHT, "res/gfx/scr/shops/shakes_nacht.jpg", false, (POS_SCR_SHOP_BG_X + REL_SHAKES_X), (100 + REL_SHAKES_Y));
                DefineImg(IMG_SHAKES_IDLE, "res/gfx/scr/shops/shakes_gelangweilt.jpg", false, (POS_SCR_SHOP_BG_X + REL_SHAKES_IDLE_X), (100 + REL_SHAKES_IDLE_Y));
                DefineImg(IMG_SHAKES_IDLE1, "res/gfx/scr/shops/shakes_spielt1.jpg", false, (POS_SCR_SHOP_BG_X + REL_SHAKES_IDLE2_X), (100 + REL_SHAKES_IDLE2_Y));
                DefineImg(IMG_SHAKES_IDLE2, "res/gfx/scr/shops/shakes_spielt2.jpg", false, (POS_SCR_SHOP_BG_X + REL_SHAKES_IDLE2_X), (100 + REL_SHAKES_IDLE2_Y));
                DefineImg(IMG_SHAKES_IDLE3, "res/gfx/scr/shops/shakes_spielt3.jpg", false, (POS_SCR_SHOP_BG_X + REL_SHAKES_IDLE2_X), (100 + REL_SHAKES_IDLE2_Y));
                DefineImg(IMG_SHAKES_BLINZELN1, "res/gfx/scr/shops/shakes_augen1.jpg", false, ((POS_SCR_SHOP_BG_X + REL_SHAKES_X) + REL_SHAKES_BLINZELN_X), ((100 + REL_SHAKES_Y) + REL_SHAKES_BLINZELN_Y));
                DefineImg(IMG_SHAKES_BLINZELN2, "res/gfx/scr/shops/shakes_augen2.jpg", false, ((POS_SCR_SHOP_BG_X + REL_SHAKES_X) + REL_SHAKES_BLINZELN_X), ((100 + REL_SHAKES_Y) + REL_SHAKES_BLINZELN_Y));
                if (Capabilities.version.substr(0, 3) == "IOS"){
                    DefineBunch(BNC_FIDGET_DAY, IMG_FIDGET_DAY);
                    DefineBunch(BNC_FIDGET_NIGHT, IMG_FIDGET_NIGHT);
                } else {
                    DefineBunch(BNC_FIDGET_DAY, IMG_FIDGET_DAY, IMG_FIDGET_TAGKERZE);
                    DefineBunch(BNC_FIDGET_NIGHT, IMG_FIDGET_NIGHT, IMG_FIDGET_NACHTKERZE);
                };
                DefineImg(IMG_SCR_SHAKES_BG, "res/gfx/scr/shops/shakes.jpg", false, POS_SCR_SHOP_BG_X, 100);
                DefineBtn(BTN_SHOPS_NEWWAREZ, txt[TXT_SHOPS_NEWWAREZ], RequestNewWarez, btnClassBasic, 0, POS_NEW_WAREZ_Y);
                actor[BTN_SHOPS_NEWWAREZ].x = (POS_NEW_WAREZ_X - int((actor[BTN_SHOPS_NEWWAREZ].width / 2)));
                DefineCnt(CNT_CHAR_SLOT_FIDGET_1, POS_SHOP_SLOTS_C1_X, POS_SHOP_SLOTS_R1_Y);
                DefineCnt(CNT_CHAR_SLOT_FIDGET_2, POS_SHOP_SLOTS_C2_X, POS_SHOP_SLOTS_R1_Y);
                DefineCnt(CNT_CHAR_SLOT_FIDGET_3, POS_SHOP_SLOTS_C3_X, POS_SHOP_SLOTS_R1_Y);
                DefineCnt(CNT_CHAR_SLOT_FIDGET_4, POS_SHOP_SLOTS_C1_X, POS_SHOP_SLOTS_R2_Y);
                DefineCnt(CNT_CHAR_SLOT_FIDGET_5, POS_SHOP_SLOTS_C2_X, POS_SHOP_SLOTS_R2_Y);
                DefineCnt(CNT_CHAR_SLOT_FIDGET_6, POS_SHOP_SLOTS_C3_X, POS_SHOP_SLOTS_R2_Y);
                DefineCnt(CNT_CHAR_SLOT_SHAKES_1, POS_SHOP_SLOTS_C1_X, POS_SHOP_SLOTS_R1_Y);
                DefineCnt(CNT_CHAR_SLOT_SHAKES_2, POS_SHOP_SLOTS_C2_X, POS_SHOP_SLOTS_R1_Y);
                DefineCnt(CNT_CHAR_SLOT_SHAKES_3, POS_SHOP_SLOTS_C3_X, POS_SHOP_SLOTS_R1_Y);
                DefineCnt(CNT_CHAR_SLOT_SHAKES_4, POS_SHOP_SLOTS_C1_X, POS_SHOP_SLOTS_R2_Y);
                DefineCnt(CNT_CHAR_SLOT_SHAKES_5, POS_SHOP_SLOTS_C2_X, POS_SHOP_SLOTS_R2_Y);
                DefineCnt(CNT_CHAR_SLOT_SHAKES_6, POS_SHOP_SLOTS_C3_X, POS_SHOP_SLOTS_R2_Y);
                DefineBunch(BNC_SCREEN_FIDGET, IMG_SCR_FIDGET_BG, IMG_FIDGET_AFFE2, IMG_FIDGET_AFFE3, IMG_FIDGET_AFFE1, IMG_FIDGET_SALE, IMG_FIDGET_IDLE, BNC_FIDGET_DAY, IMG_FIDGET_BLINZELN, BNC_FIDGET_NIGHT, BNC_IF_OVL, BTN_SHOPS_NEWWAREZ, CA_SCR_CHAR_EXPBAR, BTN_IF_EXIT);
                DefineBunch(BNC_SCREEN_SHAKES, IMG_SCR_SHAKES_BG, IMG_SHAKES_IDLE, IMG_SHAKES_IDLE1, IMG_SHAKES_IDLE2, IMG_SHAKES_IDLE3, IMG_SHAKES_DAY, IMG_SHAKES_BLINZELN1, IMG_SHAKES_BLINZELN2, IMG_SHAKES_NIGHT, BNC_IF_OVL, BTN_SHOPS_NEWWAREZ, CA_SCR_CHAR_EXPBAR, BTN_IF_EXIT);
                DefineImg(IMG_FIDGET_EPCIOVL, "res/gfx/scr/shops/epics_overlay_fidget.png", false, (POS_SCR_SHOP_BG_X - 65), (100 + 210));
                DefineImg(IMG_SHAKES_EPCIOVL, "res/gfx/scr/shops/epics_overlay_shakes.png", false, (POS_SCR_SHOP_BG_X + 200), (100 + 250));
                AffeBlinzeln = int((Math.random() * 30));
                FidgetBlinzeln = int((Math.random() * 30));
                ShakesBlinzeln = int((Math.random() * 30));
                ShakesIdleStep = 0;
                ShakesIdlePhase = 0;
                WasIdleCount = 0;
                ShopIdle = 0;
                PlayerIdle = false;
                ShopAniTimer = new Timer(100);
                SaleRecoverTime = 0;
                ShopAniTimer.addEventListener(TimerEvent.TIMER, ShopAniFrame);
                if (!lightMode){
                    ShopAniTimer.start();
                } else {
                    ShopAniTimer.stop();
                };
                i = 0;
                while (i < 5) {
                    AddBunch(BNC_SCREEN_FIDGET, (LBL_SCR_CHAR_STAERKE + i), (LBL_SCR_CHAR_STAERKE_CAPTION + i), (LBL_SCR_CHAR_SCHADEN + i), (LBL_SCR_CHAR_SCHADEN_CAPTION + i));
                    AddBunch(BNC_SCREEN_SHAKES, (LBL_SCR_CHAR_STAERKE + i), (LBL_SCR_CHAR_STAERKE_CAPTION + i), (LBL_SCR_CHAR_SCHADEN + i), (LBL_SCR_CHAR_SCHADEN_CAPTION + i));
                    i = (i + 1);
                };
                i = 0;
                while (i < 6) {
                    SetCnt((CNT_CHAR_SLOT_FIDGET_1 + i), ITM_OFFS);
                    SetCnt((CNT_CHAR_SLOT_SHAKES_1 + i), ITM_OFFS);
                    AddBunch(BNC_SCREEN_FIDGET, (CNT_CHAR_SLOT_FIDGET_1 + i));
                    AddBunch(BNC_SCREEN_SHAKES, (CNT_CHAR_SLOT_SHAKES_1 + i));
                    actor[(CNT_CHAR_SLOT_FIDGET_1 + i)].addEventListener(MouseEvent.MOUSE_DOWN, ShopMouseDownEvent);
                    actor[(CNT_CHAR_SLOT_SHAKES_1 + i)].addEventListener(MouseEvent.MOUSE_DOWN, ShopMouseDownEvent);
                    EnableDragDrop((CNT_CHAR_SLOT_FIDGET_1 + i), DropHandler);
                    EnableDragDrop((CNT_CHAR_SLOT_SHAKES_1 + i), DropHandler);
                    actor[(CNT_CHAR_SLOT_FIDGET_1 + i)].addEventListener(MouseEvent.MOUSE_UP, ShopMouseUpEvent);
                    actor[(CNT_CHAR_SLOT_SHAKES_1 + i)].addEventListener(MouseEvent.MOUSE_UP, ShopMouseUpEvent);
                    i = (i + 1);
                };
                i = 0;
                while (i < 15) {
                    AddBunch(BNC_SCREEN_FIDGET, (CNT_CHAR_SLOT_1 + i));
                    AddBunch(BNC_SCREEN_SHAKES, (CNT_CHAR_SLOT_1 + i));
                    i = (i + 1);
                };
                RollFrenzy.addEventListener(TimerEvent.TIMER, RequestNewWarez);
                DefineImg(IMG_GOTO_WITCH_OVL, "res/gfx/scr/shops/book_down.jpg", false, ((280 + 500) + 360), (100 + 220));
                actor[IMG_GOTO_WITCH_OVL].mouseEnabled = false;
                DefineClickArea(CA_GOTO_WITCH, IMG_GOTO_WITCH_OVL, RequestWitchScreen, ((280 + 500) + 359), (100 + 215), 45, 65);
                EnablePopup(CA_GOTO_WITCH, txt[TXT_WITCH_BOOK]);
                DefineBunch(BNC_SCREEN_WITCH);
                DefineSnd(SND_WITCH_DROP, "res/sfx/toilet/drop.mp3", false);
                AddBunch(BNC_SCREEN_WITCH, SND_WITCH_DROP);
                DefineImg(IMG_WITCH, "res/gfx/scr/shops/witch.jpg", false, POS_SCR_SHOP_BG_X, 100);
                AddBunch(BNC_SCREEN_WITCH, IMG_WITCH);
                i = 0;
                while (i < 15) {
                    AddBunch(BNC_SCREEN_WITCH, (CNT_CHAR_SLOT_1 + i));
                    i = (i + 1);
                };
                i = 0;
                while (i < 15) {
                    DefineImg((IMG_WITCH_ANI + i), (("res/gfx/scr/shops/witch_animation/witch" + String(((i * 2) + 1))) + ".jpg"), false, (280 + 500), (100 + 380));
                    Hide((IMG_WITCH_ANI + i));
                    AddBunch(BNC_SCREEN_WITCH, (IMG_WITCH_ANI + i));
                    i = (i + 1);
                };
                spellClicking = false;
                i = 0;
                while (i < 10) {
                    DefineCnt((CNT_WITCH_SCROLL + i), (((280 + 500) + 37) + ((i % 5) * 83)), ((100 + 11) + (Math.floor((i / 5)) * 95)));
                    actor[(CNT_WITCH_SCROLL + i)].useHandCursor = true;
                    actor[(CNT_WITCH_SCROLL + i)].buttonMode = true;
                    actor[(CNT_WITCH_SCROLL + i)].addEventListener(MouseEvent.CLICK, function (evt:MouseEvent){
                        var id:int;
                        id = ((GetActorID(evt.target) - CNT_WITCH_SCROLL) + 1);
                        if (spellClicking){
                            SendAction(ACT_WITCH_ENCHANT, id);
                        };
                        spellClicking = false;
                    });
                    actor[(CNT_WITCH_SCROLL + i)].addEventListener(MouseEvent.MOUSE_DOWN, function (evt:MouseEvent){
                        var actorId:int;
                        var i:int;
                        actorId = GetActorID(evt.target);
                        i = (actorId - CNT_WITCH_SCROLL);
                        actor[actorId].x = ((((280 + 500) + 37) + ((i % 5) * 83)) + 1);
                        actor[actorId].y = (((100 + 11) + (Math.floor((i / 5)) * 95)) + 2);
                        spellClicking = true;
                    });
                    actor[(CNT_WITCH_SCROLL + i)].addEventListener(MouseEvent.MOUSE_UP, function (evt:MouseEvent){
                        var actorId:int;
                        var i:int;
                        actorId = GetActorID(evt.target);
                        i = (actorId - CNT_WITCH_SCROLL);
                        actor[actorId].x = (((280 + 500) + 37) + ((i % 5) * 83));
                        actor[actorId].y = ((100 + 11) + (Math.floor((i / 5)) * 95));
                    });
                    actor[(CNT_WITCH_SCROLL + i)].addEventListener(MouseEvent.MOUSE_OUT, function (evt:MouseEvent){
                        var actorId:int;
                        var i:int;
                        actorId = GetActorID(evt.target);
                        i = (actorId - CNT_WITCH_SCROLL);
                        actor[actorId].x = (((280 + 500) + 37) + ((i % 5) * 83));
                        actor[actorId].y = ((100 + 11) + (Math.floor((i / 5)) * 95));
                        spellClicking = false;
                    });
                    i = (i + 1);
                };
                DefineClickArea(CA_WITCH, C_EMPTY, undefined, (POS_SCR_SHOP_BG_X + 180), 400, 135, 155);
                DefineClickArea(CA_CHALDRON, C_EMPTY, undefined, (POS_SCR_SHOP_BG_X + 120), 585, 260, 160);
                EnablePopup(CA_WITCH, txt[TXT_WITCH_HINT]);
                EnablePopup(CA_CHALDRON, txt[(TXT_WITCH_HINT + 1)]);
                actor[CA_WITCH].useHandCursor = false;
                actor[CA_CHALDRON].useHandCursor = false;
                AddBunch(BNC_SCREEN_WITCH, BNC_IF_OVL, CA_WITCH, CA_CHALDRON, BTN_IF_EXIT);
                DefineImg(IMG_SCR_DEALER_BG, "", false, 280, 100);
                DefineBunch(BNC_SCREEN_DEALER, IMG_SCR_DEALER_BG, BNC_IF_OVL, BTN_IF_EXIT);
                DefineImg(IMG_SCR_WORLDMAP_BG, "res/gfx/scr/map/worldmap.jpg", false, 280, 100);
                DefineBunch(BNC_SCREEN_WORLDMAP, IMG_SCR_WORLDMAP_BG, BNC_IF_OVL, BTN_IF_EXIT);
                i = 0;
                while (i < 100) {
                    DefineImg((IMG_SCR_QUEST_BG_1 + i), (("res/gfx/scr/quest/locations/location" + String((i + 1))) + ".jpg"), false, 280, 100);
                    i = (i + 1);
                };
                DefineImg(IMG_QUESTBAR_BG, "res/gfx/if/adventurebar.png", false, POS_QUESTBAR_X, POS_QUESTBAR_Y);
                DefineImg(IMG_QUESTBAR_FILL, "res/gfx/if/adventurebar_inside.jpg", false, (POS_QUESTBAR_X + 110), (POS_QUESTBAR_Y + 44));
                DefineImg(IMG_QUESTBAR_LIGHT, "res/gfx/if/laden_effekt.png", false, ((POS_QUESTBAR_X + 110) - 5), (POS_QUESTBAR_Y + 44));
                DefineLbl(LBL_QUESTBAR_TEXT, "", 0, POS_QUESTBAR_LABEL_Y, FontFormat_QuestBar);
                DefineBtn(BTN_QUEST_CANCEL, txt[TXT_QUEST_CANCEL], CancelQuest, btnClassBasic, 0, POS_QUEST_CANCEL_Y);
                DefineBtn(BTN_QUEST_SKIP, (txt[TXT_SKIP_FIGHT] + " ~P"), SkipQuest, btnClassBasic, 0, POS_QUEST_CANCEL_Y);
                DefineBunch(BNC_SCREEN_QUEST, IMG_QUESTBAR_BG, IMG_QUESTBAR_FILL, IMG_QUESTBAR_LIGHT, LBL_QUESTBAR_TEXT, BNC_IF_OVL, LBL_SCREEN_TITLE, BTN_QUEST_CANCEL, BTN_QUEST_SKIP, BTN_IF_EXIT);
                i = 0;
                while (i < 4) {
                    AddBunch(BNC_SCREEN_QUEST, (IMG_TV + i));
                    i = (i + 1);
                };
                AddBunch(BNC_SCREEN_QUEST, CA_TV);
                actor[BTN_QUEST_SKIP].x = int(((POS_QUEST_CANCEL_X - actor[BTN_QUEST_SKIP].width) - 5));
                actor[IMG_QUESTBAR_FILL].scaleX = 0;
                DefineImg(IMG_POST_BG, "res/gfx/scr/post/postamt.jpg", false, 280, 100);
                DefineImg(IMG_POST_DAWN1, "res/gfx/scr/post/postamt_abend1.jpg", false, (280 + REL_POST_VOGEL_X), (100 + REL_POST_VOGEL_Y));
                DefineImg(IMG_POST_DAWN2, "res/gfx/scr/post/postamt_abend2.jpg", false, (280 + REL_POST_FENSTER_X), (100 + REL_POST_FENSTER_Y));
                DefineImg(IMG_POST_NIGHT1, "res/gfx/scr/post/postamt_nacht1.jpg", false, (280 + REL_POST_VOGEL_X), (100 + REL_POST_VOGEL_Y));
                DefineImg(IMG_POST_NIGHT2, "res/gfx/scr/post/postamt_nacht2.jpg", false, (280 + REL_POST_FENSTER_X), (100 + REL_POST_FENSTER_Y));
                DefineBunch(BNC_POST_DAWN, IMG_POST_DAWN1, IMG_POST_DAWN2);
                DefineBunch(BNC_POST_NIGHT, IMG_POST_NIGHT1, IMG_POST_NIGHT2);
                DefineFromClass(SHP_POST_BLACK_SQUARE, black_square, POS_POST_SQUARE_X, POS_POST_SQUARE_Y);
                _local2 = actor[SHP_POST_BLACK_SQUARE];
                with (_local2) {
                    width = REL_POST_SQUARE_X;
                    height = REL_POST_SQUARE_Y;
                    alpha = 0.6;
                };
                DefineLbl(LBL_POST_TITLE_INBOX, txt[TXT_POST_TITLE_INBOX], POS_SCREEN_TITLE_X, POS_SCREEN_TITLE_Y, FontFormat_ScreenTitle);
                actor[LBL_POST_TITLE_INBOX].x = (POS_SCREEN_TITLE_X - int((actor[LBL_POST_TITLE_INBOX].textWidth / 2)));
                DefineLbl(LBL_POST_TITLE_READ, txt[TXT_POST_TITLE_READ], POS_SCREEN_TITLE_X, POS_SCREEN_TITLE_Y, FontFormat_ScreenTitle);
                actor[LBL_POST_TITLE_READ].x = (POS_SCREEN_TITLE_X - int((actor[LBL_POST_TITLE_READ].textWidth / 2)));
                DefineLbl(LBL_POST_TITLE_WRITE, txt[TXT_POST_TITLE_WRITE], POS_SCREEN_TITLE_X, POS_SCREEN_TITLE_Y, FontFormat_ScreenTitle);
                actor[LBL_POST_TITLE_WRITE].x = (POS_SCREEN_TITLE_X - int((actor[LBL_POST_TITLE_WRITE].textWidth / 2)));
                AddFilter(LBL_POST_TITLE_INBOX, Filter_Shadow);
                AddFilter(LBL_POST_TITLE_READ, Filter_Shadow);
                AddFilter(LBL_POST_TITLE_WRITE, Filter_Shadow);
                DefineCnt(CNT_POST_LIST, POS_POST_LIST_X, POS_POST_LIST_Y);
                DefineBtn(BTN_POST_READ, txt[TXT_POST_READ], PostBtnHandler, btnClassBasic, POS_POST_BUTTONS_X, POS_POST_BUTTONS_Y);
                DefineBtn(BTN_POST_DELETE, txt[TXT_POST_DELETE], PostBtnHandler, btnClassBasic, (POS_POST_BUTTONS_X + ((actor[BTN_POST_READ].width + REL_POST_BUTTONS_X) * 2)), POS_POST_BUTTONS_Y);
                DefineBtn(BTN_POST_WRITE, txt[TXT_POST_WRITE], PostBtnHandler, btnClassBasic, (POS_POST_BUTTONS_X + ((actor[BTN_POST_READ].width + REL_POST_BUTTONS_X) * 1)), POS_POST_BUTTONS_Y);
                DefineBtn(BTN_POST_FLUSH, txt[(TXT_POST_FLUSH_TEXT + 2)], PostBtnHandler, btnClassBasic, (POS_POST_BUTTONS_X + ((actor[BTN_POST_READ].width + REL_POST_BUTTONS_X) * 3)), POS_POST_BUTTONS_Y);
                DefineBtn(BTN_POST_DELETEREAD, txt[TXT_POST_DELETE], PostBtnHandler, btnClassBasic, (POS_POST_BUTTONS_X + ((actor[BTN_POST_READ].width + REL_POST_BUTTONS_X) * 2)), POS_POST_BUTTONS_Y);
                DefineBtn(BTN_POST_FORWARD, txt[TXT_POST_FORWARD], PostBtnHandler, btnClassBasic, (POS_POST_BUTTONS_X + ((actor[BTN_POST_READ].width + REL_POST_BUTTONS_X) * 3)), POS_POST_BUTTONS_Y);
                DefineBtn(BTN_POST_PROFILE, "", PostBtnHandler, btnClassView, POS_POST_PROFILE_BTN_X, POS_POST_BUTTONS_Y);
                DefineBtn(BTN_POST_UP, "", PostBtnHandler, btnClassArrowUp, POS_POST_SCROLLBTN_X, POS_POST_SCROLLUP_Y);
                DefineBtn(BTN_POST_DOWN, "", PostBtnHandler, btnClassArrowDown, POS_POST_SCROLLBTN_X, POS_POST_SCROLLDOWN_Y);
                DefineBtn(BTN_POST_READ_NEXT, "", PostBtnHandler, btnClassArrowRight, ((POS_POST_BUTTONS_X + ((actor[BTN_POST_READ].width + REL_POST_BUTTONS_X) * 4)) + 50), (POS_POST_BUTTONS_Y + 3));
                DefineBtn(BTN_POST_READ_PREV, "", PostBtnHandler, btnClassArrowLeft, ((POS_POST_BUTTONS_X + ((actor[BTN_POST_READ].width + REL_POST_BUTTONS_X) * 4)) + 5), (POS_POST_BUTTONS_Y + 3));
                EnablePopup(BTN_POST_PROFILE, txt[TXT_POPUP_PROFILE]);
                DefineLbl(LBL_POST_FLUSH_TEXT, txt[(TXT_POST_FLUSH_TEXT + 1)].split("#").join(String.fromCharCode(13)), ((POS_IF_WIN_X + REL_IF_WIN_WELCOME_X) - (SIZE_ARENA_TEXT_X / 2)), (POS_IF_WIN_Y + REL_ARENA_TEXT_Y), FontFormat_DefaultLeft);
                AddFilter(LBL_POST_FLUSH_TEXT, Filter_Shadow);
                DefineBtn(BTN_POST_FLUSH_CANCEL, txt[TXT_ABBRECHEN], PostBtnHandler, btnClassBasic, 0, (POS_IF_WIN_Y + REL_GILDE_OK_Y));
                DefineBtn(BTN_POST_FLUSH_OK, txt[TXT_OK], PostBtnHandler, btnClassBasic, 0, (POS_IF_WIN_Y + REL_GILDE_OK_Y));
                _local2 = actor[BTN_POST_FLUSH_CANCEL];
                with (_local2) {
                    x = ((POS_IF_WIN_X + REL_IF_WIN_WELCOME_X) + 10);
                };
                _local2 = actor[BTN_POST_FLUSH_OK];
                with (_local2) {
                    x = (((POS_IF_WIN_X + REL_IF_WIN_WELCOME_X) - int(width)) - 10);
                };
                DefineBunch(BNC_POST_FLUSHMSG);
                AddBunch(BNC_POST_FLUSHMSG, CA_POST_BLOCK, IMG_IF_WINDOW, LBL_WINDOW_TITLE, LBL_POST_FLUSH_TEXT, BTN_POST_FLUSH_OK, BTN_POST_FLUSH_CANCEL, BTN_IF_EXIT);
                DefineClickArea(CA_POST_BLOCK, C_EMPTY, undefined, 280, 100, (RES_X - 280), (RES_Y - 100));
                _local2 = actor[CA_POST_BLOCK];
                with (_local2) {
                    useHandCursor = false;
                    buttonMode = false;
                };
                DefineFromClass(INP_POST_SUBJECT, SimpleTextField, POS_POST_INP_X, POS_POST_SUBJECT_Y, 2, "text");
                DefineFromClass(INP_POST_ADDRESS, SimpleTextField, POS_POST_INP_X, POS_POST_ADDRESS_Y, 2, "name");
                DefineFromClass(INP_POST_TEXT, SimpleTextArea, POS_POST_INP_X, POS_POST_TEXT_Y, 2, "text");
                CleanupField(INP_POST_SUBJECT);
                CleanupField(INP_POST_ADDRESS);
                CleanupField(INP_POST_TEXT);
                AdvancedPostHandler = function (evt:TextEvent){
                    var i:int;
                    var textEntered:String;
                    if (evt.text.length == 1){
                        textEntered = (actor[INP_POST_ADDRESS].getChildAt(1).text.substr(0, actor[INP_POST_ADDRESS].getChildAt(1).selectionBeginIndex) + evt.text);
                        i = 0;
                        while (i < suggestNames.length) {
                            if ((((textEntered.length > 0)) && ((textEntered.toLowerCase() == suggestNames[i].toLowerCase().substr(0, textEntered.length))))){
                                actor[INP_POST_ADDRESS].getChildAt(1).text = (textEntered + suggestNames[i].substr(textEntered.length));
                                actor[INP_POST_ADDRESS].getChildAt(1).setSelection(textEntered.length, actor[INP_POST_ADDRESS].getChildAt(1).text.length);
                                evt.preventDefault();
                                break;
                            };
                            i++;
                        };
                    };
                };
                killFieldContent = function (evt:Event){
                    var actorID:int;
                    actorID = GetActorID(evt.target.parent);
                    if (actor[actorID].getChildAt(1).type == TextFieldType.DYNAMIC){
                        return;
                    };
                    switch (actorID){
                        case INP_POST_ADDRESS:
                            if (actor[actorID].getChildAt(1).text == txt[TXT_EMPFAENGER]){
                                actor[actorID].getChildAt(1).text = "";
                            };
                            break;
                        case INP_POST_SUBJECT:
                            if (actor[actorID].getChildAt(1).text == txt[TXT_BETREFF]){
                                actor[actorID].getChildAt(1).text = "";
                            };
                            break;
                        case INP_POST_TEXT:
                            if (actor[actorID].getChildAt(1).text == txt[TXT_NACHRICHT]){
                                actor[actorID].getChildAt(1).text = "";
                            };
                            break;
                    };
                };
                fillFieldContent = function (evt:Event){
                    var actorID:int;
                    actorID = GetActorID(evt.target.parent);
                    switch (actorID){
                        case INP_POST_ADDRESS:
                            if (actor[actorID].getChildAt(1).text == ""){
                                actor[actorID].getChildAt(1).text = txt[TXT_EMPFAENGER];
                            };
                            break;
                        case INP_POST_SUBJECT:
                            if (actor[actorID].getChildAt(1).text == ""){
                                actor[actorID].getChildAt(1).text = txt[TXT_BETREFF];
                            };
                            break;
                        case INP_POST_TEXT:
                            if (actor[actorID].getChildAt(1).text == ""){
                                actor[actorID].getChildAt(1).text = txt[TXT_NACHRICHT];
                            };
                            break;
                    };
                };
                actor[INP_POST_ADDRESS].getChildAt(1).addEventListener(TextEvent.TEXT_INPUT, AdvancedPostHandler);
                actor[INP_POST_SUBJECT].addEventListener(MouseEvent.MOUSE_DOWN, killFieldContent);
                actor[INP_POST_ADDRESS].addEventListener(MouseEvent.MOUSE_DOWN, killFieldContent);
                actor[INP_POST_TEXT].addEventListener(MouseEvent.MOUSE_DOWN, killFieldContent);
                actor[INP_POST_SUBJECT].addEventListener(FocusEvent.FOCUS_OUT, fillFieldContent);
                actor[INP_POST_ADDRESS].addEventListener(FocusEvent.FOCUS_OUT, fillFieldContent);
                actor[INP_POST_TEXT].addEventListener(FocusEvent.FOCUS_OUT, fillFieldContent);
                DefineBtn(BTN_POST_SEND, txt[TXT_POST_SEND], PostBtnHandler, btnClassBasic, POS_POST_BUTTONS_X, POS_POST_SENDBUTTON_Y);
                DefineBtn(BTN_POST_CANCEL, txt[TXT_POST_CANCEL], PostBtnHandler, btnClassBasic, ((POS_POST_BUTTONS_X + actor[BTN_POST_SEND].width) + REL_POST_BUTTONS_X), POS_POST_SENDBUTTON_Y);
                DefineBtn(BTN_POST_RETURN, txt[TXT_POST_RETURN], PostBtnHandler, btnClassBasic, POS_POST_BUTTONS_X, POS_POST_SENDBUTTON_Y);
                DefineBtn(BTN_POST_ACCEPT, txt[TXT_POST_ACCEPT], PostBtnHandler, btnClassBasic, ((POS_POST_BUTTONS_X + actor[BTN_POST_SEND].width) + REL_POST_BUTTONS_X), POS_POST_SENDBUTTON_Y);
                DefineBtn(BTN_POST_REPLY, txt[TXT_POST_REPLY], PostBtnHandler, btnClassBasic, ((POS_POST_BUTTONS_X + actor[BTN_POST_SEND].width) + REL_POST_BUTTONS_X), POS_POST_SENDBUTTON_Y);
                DefineBtn(BTN_POST_VIEWFIGHT, txt[TXT_POST_VIEWFIGHT], PostBtnHandler, btnClassBasic, ((POS_POST_BUTTONS_X + actor[BTN_POST_SEND].width) + REL_POST_BUTTONS_X), POS_POST_SENDBUTTON_Y);
                DefineLbl(LBL_POST_LIMIT, "", POS_POST_SQUARE_X, (POS_POST_SQUARE_Y - REL_POST_LIMIT_Y), FontFormat_Default);
                AddFilter(LBL_POST_LIMIT, Filter_Shadow);
                DefineCnt(CNT_POST_GUILD, 0, (POS_POST_ADDRESS_Y + 2));
                DefineLbl(LBL_POST_GUILD, txt[TXT_GILDEN], 0, 0, FontFormat_Default);
                AddFilter(LBL_POST_GUILD, Filter_Shadow);
                MakePersistent(LBL_POST_GUILD);
                _local2 = actor[CNT_POST_GUILD];
                with (_local2) {
                    addChild(actor[LBL_POST_GUILD]);
                    textLinkMakeClickable(getChildAt(0).parent);
                    x = (((POS_POST_INP_X + actor[INP_POST_ADDRESS].width) - width) - 5);
                    addEventListener(MouseEvent.CLICK, GuildMsgMode);
                    mouseChildren = false;
                    useHandCursor = true;
                    buttonMode = true;
                };
                DefineBunch(BNC_POST_LIST, LBL_POST_TITLE_INBOX, CNT_POST_LIST, BTN_POST_READ, BTN_POST_DELETE, BTN_POST_FLUSH, BTN_POST_WRITE, BTN_POST_UP, BTN_POST_DOWN, LBL_POST_LIMIT);
                DefineBunch(BNC_POST_WRITE, LBL_POST_TITLE_WRITE, INP_POST_SUBJECT, INP_POST_ADDRESS, CNT_POST_GUILD, INP_POST_TEXT, BTN_POST_SEND, BTN_POST_CANCEL);
                DefineBunch(BNC_POST_READ, LBL_POST_TITLE_READ, INP_POST_SUBJECT, INP_POST_ADDRESS, INP_POST_TEXT, BTN_POST_RETURN, BTN_POST_DELETEREAD, BTN_POST_READ_NEXT, BTN_POST_READ_PREV, BTN_POST_PROFILE, BTN_POST_FORWARD);
                DefineBunch(BNC_SCREEN_POST, IMG_POST_BG, BNC_IF_OVL, BNC_POST_NIGHT, BNC_POST_DAWN, SHP_POST_BLACK_SQUARE, BNC_POST_LIST, BTN_IF_EXIT);
                DefineImg(IMG_ARENA_BG_DAY, "res/gfx/scr/arena/arena_tag.jpg", false, 280, 100);
                DefineImg(IMG_ARENA_BG_DAWN, "res/gfx/scr/arena/arena_abend.jpg", false, 280, 100);
                DefineImg(IMG_ARENA_BG_NIGHT, "res/gfx/scr/arena/arena_nacht.jpg", false, 280, 100);
                if (Capabilities.version.substr(0, 3) != "IOS"){
                    DefineImg(IMG_ARENA_FEUER, "res/gfx/scr/arena/arenafeuer.swf", false, POS_ARENA_FEUER_X, POS_ARENA_FEUER_Y);
                };
                DefineLbl(LBL_ARENA_TEXT, "", ((POS_IF_WIN_X + REL_IF_WIN_WELCOME_X) - (SIZE_ARENA_TEXT_X / 2)), ((POS_IF_WIN_Y + REL_ARENA_TEXT_Y) + AIRRelMoveY), FontFormat_Default);
                DefineLbl(LBL_ARENA_DELAY, "", (POS_IF_WIN_X + REL_ARENA_DELAY_X), ((POS_IF_WIN_Y + REL_ARENA_DELAY_Y) + AIRRelMoveY), FontFormat_Default);
                AddFilter(LBL_ARENA_TEXT, Filter_Shadow);
                AddFilter(LBL_ARENA_DELAY, Filter_Shadow);
                _local2 = actor[LBL_ARENA_TEXT];
                with (_local2) {
                    wordWrap = true;
                    width = SIZE_ARENA_TEXT_X;
                    text = txt[TXT_ARENA_1];
                };
                DefineFromClass(INP_ARENA_ENEMY, text_input1, 0, ((POS_IF_WIN_Y + REL_ARENA_INP_Y) + AIRRelMoveY), 2, "name");
                _local2 = actor[INP_ARENA_ENEMY];
                with (_local2) {
                    getChildAt(1).text = "";
                    x = ((POS_IF_WIN_X + REL_IF_WIN_WELCOME_X) - int((width / 2)));
                    addEventListener(KeyboardEvent.KEY_DOWN, AttackEnemy);
                };
                DefineBtn(BTN_ARENA_OK, txt[TXT_OK], AttackEnemy, btnClassBasic, 0, ((POS_IF_WIN_Y + REL_ARENA_OK_Y) + AIRRelMoveY));
                _local2 = actor[BTN_ARENA_OK];
                with (_local2) {
                    x = ((POS_IF_WIN_X + REL_IF_WIN_WELCOME_X) - int((width / 2)));
                };
                DefineBunch(BNC_WINDOW_ARENA, IMG_IF_WINDOW, LBL_WINDOW_TITLE, LBL_ARENA_TEXT, INP_ARENA_ENEMY, LBL_ARENA_DELAY, BTN_ARENA_OK);
                DefineBunch(BNC_SCREEN_ARENA_DAY, IMG_ARENA_BG_DAY);
                DefineBunch(BNC_SCREEN_ARENA_DAWN, IMG_ARENA_BG_DAWN);
                DefineBunch(BNC_SCREEN_ARENA_NIGHT, IMG_ARENA_BG_NIGHT);
                if (Capabilities.version.substr(0, 3) == "IOS"){
                    DefineBunch(BNC_SCREEN_ARENA, BNC_IF_OVL, BNC_WINDOW_ARENA, BTN_IF_EXIT);
                } else {
                    DefineBunch(BNC_SCREEN_ARENA, IMG_ARENA_FEUER, BNC_IF_OVL, BNC_WINDOW_ARENA, BTN_IF_EXIT);
                };
                DefineImg(IMG_STALL_BG_GUT, "res/gfx/scr/stall/stall_gut.jpg", false, 280, 100);
                DefineImg(IMG_STALL_BG_BOESE, "res/gfx/scr/stall/stall_boese.jpg", false, 280, 100);
                DefineImg(IMG_STALL_DAWN, "res/gfx/scr/stall/stall_abend.jpg", false, (280 + REL_STALL_TUER_X), (100 + REL_STALL_TUER_Y));
                DefineImg(IMG_STALL_NIGHT, "res/gfx/scr/stall/stall_nacht.jpg", false, (280 + REL_STALL_TUER_X), (100 + REL_STALL_TUER_Y));
                DefineImg(IMG_STALL_ARME1, "res/gfx/scr/stall/stall_arme1.png", false, (280 + REL_STALL_ARME_X), (100 + REL_STALL_ARME_Y));
                DefineImg(IMG_STALL_ARME2, "res/gfx/scr/stall/stall_arme2.png", false, (280 + REL_STALL_ARME_X), (100 + REL_STALL_ARME_Y));
                DefineImg(IMG_STALL_ARME3, "res/gfx/scr/stall/stall_arme3.png", false, (280 + REL_STALL_ARME_X), (100 + REL_STALL_ARME_Y));
                DefineImg(IMG_STALL_ARME4, "res/gfx/scr/stall/stall_arme4.png", false, (280 + REL_STALL_ARME_X), (100 + REL_STALL_ARME_Y));
                DefineImg(IMG_STALL_ARME5, "res/gfx/scr/stall/stall_arme5.png", false, (280 + REL_STALL_ARME_X), (100 + REL_STALL_ARME_Y));
                DefineImg(IMG_STALL_OVL_GUT1, "res/gfx/scr/stall/tiger2_mouseover.jpg", false, (280 + REL_STALL_OVL_GUT1_X), (100 + REL_STALL_OVL_GUT1_Y));
                DefineImg(IMG_STALL_OVL_GUT2, "res/gfx/scr/stall/kuh_mouseover.jpg", false, (280 + REL_STALL_OVL_GUT2_X), (100 + REL_STALL_OVL_GUT2_Y));
                DefineImg(IMG_STALL_OVL_GUT3, "res/gfx/scr/stall/horse_mouseover.jpg", false, (280 + REL_STALL_OVL_GUT3_X), (100 + REL_STALL_OVL_GUT3_Y));
                DefineImg(IMG_STALL_OVL_GUT4, "res/gfx/scr/stall/greif_mouseover.jpg", false, (280 + REL_STALL_OVL_GUT4_X), (100 + REL_STALL_OVL_GUT4_Y));
                DefineImg(IMG_STALL_OVL_BOESE1, "res/gfx/scr/stall/pig_mouseover.jpg", false, (280 + REL_STALL_OVL_BOESE1_X), (100 + REL_STALL_OVL_BOESE1_Y));
                DefineImg(IMG_STALL_OVL_BOESE2, "res/gfx/scr/stall/wolf_mouseover.jpg", false, (280 + REL_STALL_OVL_BOESE2_X), (100 + REL_STALL_OVL_BOESE2_Y));
                DefineImg(IMG_STALL_OVL_BOESE3, "res/gfx/scr/stall/raptor_mouseover.jpg", false, (280 + REL_STALL_OVL_BOESE3_X), (100 + REL_STALL_OVL_BOESE3_Y));
                DefineImg(IMG_STALL_OVL_BOESE4, "res/gfx/scr/stall/dragon_mouseover.jpg", false, (280 + REL_STALL_OVL_BOESE4_X), (100 + REL_STALL_OVL_BOESE4_Y));
                DefineClickArea(CA_STALL_BOX_GUT1, IMG_STALL_OVL_GUT1, ClickMount, (REL_STALL_BOX1_X + 280), (REL_STALL_BOX1_Y + 100), SIZE_STALL_BOX1_X, SIZE_STALL_BOX1_Y);
                DefineClickArea(CA_STALL_BOX_GUT2, IMG_STALL_OVL_GUT2, ClickMount, (REL_STALL_BOX2_X + 280), (REL_STALL_BOX2_Y + 100), SIZE_STALL_BOX2_X, SIZE_STALL_BOX2_Y);
                DefineClickArea(CA_STALL_BOX_GUT3, IMG_STALL_OVL_GUT3, ClickMount, (REL_STALL_BOX3_X + 280), (REL_STALL_BOX3_Y + 100), SIZE_STALL_BOX3_X, SIZE_STALL_BOX3_Y);
                DefineClickArea(CA_STALL_BOX_GUT4, IMG_STALL_OVL_GUT4, ClickMount, (REL_STALL_BOX4_X + 280), (REL_STALL_BOX4_Y + 100), SIZE_STALL_BOX4_X, SIZE_STALL_BOX4_Y);
                DefineClickArea(CA_STALL_BOX_BOESE1, IMG_STALL_OVL_BOESE1, ClickMount, (REL_STALL_BOX1_X + 280), (REL_STALL_BOX1_Y + 100), SIZE_STALL_BOX1_X, SIZE_STALL_BOX1_Y);
                DefineClickArea(CA_STALL_BOX_BOESE2, IMG_STALL_OVL_BOESE2, ClickMount, (REL_STALL_BOX2_X + 280), (REL_STALL_BOX2_Y + 100), SIZE_STALL_BOX2_X, SIZE_STALL_BOX2_Y);
                DefineClickArea(CA_STALL_BOX_BOESE3, IMG_STALL_OVL_BOESE3, ClickMount, (REL_STALL_BOX3_X + 280), (REL_STALL_BOX3_Y + 100), SIZE_STALL_BOX3_X, SIZE_STALL_BOX3_Y);
                DefineClickArea(CA_STALL_BOX_BOESE4, IMG_STALL_OVL_BOESE4, ClickMount, (REL_STALL_BOX4_X + 280), (REL_STALL_BOX4_Y + 100), SIZE_STALL_BOX4_X, SIZE_STALL_BOX4_Y);
                i = 0;
                while (i < 8) {
                    DefineSnd((SND_MOUNT_1 + i), (("res/sfx/mounts/mount" + String((i + 1))) + ".mp3"));
                    i = (i + 1);
                };
                DefineBunch(BNC_STALL_GUT, IMG_STALL_BG_GUT, BNC_IF_OVL, CA_STALL_BOX_GUT1, CA_STALL_BOX_GUT2, CA_STALL_BOX_GUT3, CA_STALL_BOX_GUT4);
                DefineBunch(BNC_STALL_BOESE, IMG_STALL_BG_BOESE, BNC_IF_OVL, CA_STALL_BOX_BOESE1, CA_STALL_BOX_BOESE2, CA_STALL_BOX_BOESE3, CA_STALL_BOX_BOESE4);
                DefineBunch(BNC_SCREEN_STALL, IMG_STALL_DAWN, IMG_STALL_NIGHT, IMG_STALL_ARME1, IMG_STALL_ARME2, IMG_STALL_ARME3, IMG_STALL_ARME4, IMG_STALL_ARME5, BTN_IF_EXIT);
                DefineFromClass(SHP_STALL_BLACK_SQUARE, black_square_neutral, (POS_SCREEN_TITLE_X - int((SIZE_STALL_SQUARE_X / 2))), POS_STALL_SQUARE_Y);
                _local2 = actor[SHP_STALL_BLACK_SQUARE];
                with (_local2) {
                    width = SIZE_STALL_SQUARE_X;
                    height = SIZE_STALL_SQUARE_Y;
                    alpha = 0.65;
                };
                DefineLbl(LBL_STALL_TITEL, txt[TXT_STALL_TITEL], (actor[SHP_STALL_BLACK_SQUARE].x + REL_STALL_TITEL_X), (actor[SHP_STALL_BLACK_SQUARE].y + REL_STALL_TITEL_Y), FontFormat_Heading);
                DefineLbl(LBL_STALL_TEXT, txt[TXT_STALL_TEXT], (actor[SHP_STALL_BLACK_SQUARE].x + REL_STALL_TITEL_X), ((actor[LBL_STALL_TITEL].y + actor[LBL_STALL_TITEL].textHeight) + REL_STALL_ZEILEN_Y), FontFormat_DefaultLeft);
                _local2 = actor[LBL_STALL_TEXT];
                with (_local2) {
                    wordWrap = true;
                    width = (SIZE_STALL_SQUARE_X - (REL_STALL_TITEL_X * 2));
                };
                DefineLbl(LBL_STALL_GAIN, "", (actor[SHP_STALL_BLACK_SQUARE].x + REL_STALL_TITEL_X), (((actor[LBL_STALL_TITEL].y + actor[LBL_STALL_TITEL].textHeight) + REL_STALL_ZEILEN_Y) + REL_STALL_GAIN_Y), FontFormat_DefaultLeft);
                DefineLbl(LBL_STALL_SCHATZ, txt[TXT_STALL_SCHATZ], 0, actor[LBL_STALL_GAIN].y, FontFormat_DefaultLeft);
                DefineLbl(LBL_STALL_SCHATZGOLD, "", 0, actor[LBL_STALL_GAIN].y, FontFormat_DefaultLeft);
                DefineLbl(LBL_STALL_SCHATZSILBER, "", 0, actor[LBL_STALL_GAIN].y, FontFormat_DefaultLeft);
                DefineCnt(CNT_STALL_SCHATZGOLD, 0, actor[LBL_STALL_GAIN].y);
                DefineCnt(CNT_STALL_SCHATZSILBER, 0, actor[LBL_STALL_GAIN].y);
                DefineLbl(LBL_STALL_GOLD, "0", (actor[SHP_STALL_BLACK_SQUARE].x + REL_STALL_TITEL_X), 0, FontFormat_Default);
                _local2 = actor[LBL_STALL_GOLD];
                with (_local2) {
                    y = (((POS_STALL_SQUARE_Y + SIZE_STALL_SQUARE_Y) - REL_STALL_TITEL_Y) - textHeight);
                    DefineCnt(CNT_STALL_GOLD, (actor[SHP_STALL_BLACK_SQUARE].x + REL_STALL_TITEL_X), y);
                    DefineLbl(LBL_STALL_MUSH, "0", 0, y, FontFormat_Default);
                    DefineCnt(CNT_STALL_MUSH, 0, y);
                    DefineLbl(LBL_STALL_LAUFZEIT, txt[TXT_STALL_LAUFZEIT], (actor[SHP_STALL_BLACK_SQUARE].x + REL_STALL_TITEL_X), ((y - textHeight) - REL_STALL_ZEILEN_Y), FontFormat_Default);
                };
                DefineBtn(BTN_STALL_BUY, txt[TXT_STALL_BUY], BuyMount, btnClassBasic, 0, 0);
                _local2 = actor[BTN_STALL_BUY];
                with (_local2) {
                    x = (((POS_SCREEN_TITLE_X + int((SIZE_STALL_SQUARE_X / 2))) - width) - REL_STALL_TITEL_X);
                    y = (((POS_STALL_SQUARE_Y + SIZE_STALL_SQUARE_Y) - REL_STALL_TITEL_Y) - height);
                };
                AddBunch(BNC_SCREEN_STALL, SHP_STALL_BLACK_SQUARE, LBL_STALL_TITEL, LBL_STALL_TEXT, LBL_STALL_GAIN);
                SelectedMount = 0;
                OldMount = 0;
                DefineImg(IMG_GILDEN_BG, "res/gfx/scr/gilde/gilde.jpg", false, 280, 100);
                DefineImg(IMG_GILDE_RAHMEN, "res/gfx/scr/gilde/gilde_interface.png", false, 280, 100);
                DefineLbl(LBL_GILDE_GRUENDEN_TEXT, "", ((POS_IF_WIN_X + REL_IF_WIN_WELCOME_X) - (SIZE_GILDE_GRUENDEN_TEXT_X / 2)), ((POS_IF_WIN_Y + REL_GILDE_GRUENDEN_TEXT_Y) + AIRRelMoveY), FontFormat_Default);
                AddFilter(LBL_GILDE_GRUENDEN_TEXT, Filter_Shadow);
                _local2 = actor[LBL_GILDE_GRUENDEN_TEXT];
                with (_local2) {
                    wordWrap = true;
                    width = SIZE_GILDE_GRUENDEN_TEXT_X;
                    text = txt[TXT_GILDE_GRUENDEN];
                };
                Arabize(LBL_GILDE_GRUENDEN_TEXT);
                DefineFromClass(INP_GILDE_GRUENDEN, text_input1, 0, ((POS_IF_WIN_Y + REL_GILDE_GRUENDEN_INP_Y) + AIRRelMoveY), 2, "name");
                _local2 = actor[INP_GILDE_GRUENDEN];
                with (_local2) {
                    getChildAt(1).text = "";
                    x = ((POS_IF_WIN_X + REL_IF_WIN_WELCOME_X) - int((width / 2)));
                };
                DefineBtn(BTN_GILDE_GRUENDEN, txt[TXT_GILDE_GRUENDEN_OK], GildeGruenden, btnClassBasic, 0, ((POS_IF_WIN_Y + REL_GILDE_GRUENDEN_OK_Y) + AIRRelMoveY));
                _local2 = actor[BTN_GILDE_GRUENDEN];
                with (_local2) {
                    x = ((POS_IF_WIN_X + REL_IF_WIN_WELCOME_X) - int((width / 2)));
                };
                DefineBunch(BNC_GILDE_GEBAEUDE);
                i = 0;
                while (i < 3) {
                    DefineImg((IMG_GILDE_GEBAEUDE + i), (("res/gfx/scr/gilde/building" + String((i + 1))) + ".png"), false, POS_GILDE_GEBAEUDE_X, (POS_GILDE_GEBAEUDE_Y + (REL_GILDE_GEBAEUDE_Y * i)));
                    DefineLbl((LBL_GILDE_GEBAEUDE_NAME + i), txt[(TXT_GILDE_GEBAEUDE_NAME1 + i)], (POS_GILDE_GEBAEUDE_X + REL_GILDE_TEXT_X), (POS_GILDE_GEBAEUDE_Y + (REL_GILDE_GEBAEUDE_Y * i)), FontFormat_GuildBuilding);
                    DefineLbl((LBL_GILDE_GEBAEUDE_WERT_CAPTION + i), txt[(TXT_GILDE_GEBAEUDE_WERT1 + i)], (POS_GILDE_GEBAEUDE_X + REL_GILDE_TEXT_X), ((POS_GILDE_GEBAEUDE_Y + (REL_GILDE_GEBAEUDE_Y * i)) + (REL_GILDE_GEBAEUDE_LINE * 1)), FontFormat_GuildBuilding);
                    DefineLbl((LBL_GILDE_GEBAEUDE_WERT + i), "", (POS_GILDE_GEBAEUDE_X + REL_GILDE_TEXT_IMPROVE_X), ((POS_GILDE_GEBAEUDE_Y + (REL_GILDE_GEBAEUDE_Y * i)) + (REL_GILDE_GEBAEUDE_LINE * 2)), FontFormat_GuildBuilding);
                    DefineLbl((LBL_GILDE_GEBAEUDE_STUFE_CAPTION + i), txt[TXT_GILDE_GEBAEUDE_STUFE], (POS_GILDE_GEBAEUDE_X + REL_GILDE_TEXT_IMPROVE_X), ((POS_GILDE_GEBAEUDE_Y + (REL_GILDE_GEBAEUDE_Y * i)) + (REL_GILDE_GEBAEUDE_LINE * 3)), FontFormat_GuildBuilding);
                    DefineLbl((LBL_GILDE_GEBAEUDE_STUFE + i), "", ((actor[(LBL_GILDE_GEBAEUDE_STUFE_CAPTION + i)].x + actor[(LBL_GILDE_GEBAEUDE_STUFE_CAPTION + i)].textWidth) + 10), actor[(LBL_GILDE_GEBAEUDE_STUFE_CAPTION + i)].y, FontFormat_GuildBuilding);
                    DefineLbl((LBL_GILDE_GEBAEUDE_KOSTEN_GOLD + i), "", 0, ((POS_GILDE_GEBAEUDE_Y + (REL_GILDE_GEBAEUDE_Y * i)) + (REL_GILDE_GEBAEUDE_LINE * 4)), FontFormat_GuildBuilding);
                    DefineLbl((LBL_GILDE_GEBAEUDE_KOSTEN_MUSH + i), "", 0, ((POS_GILDE_GEBAEUDE_Y + (REL_GILDE_GEBAEUDE_Y * i)) + (REL_GILDE_GEBAEUDE_LINE * 4)), FontFormat_GuildBuilding);
                    DefineCnt((CNT_GILDE_GEBAEUDE_GOLD + i), 0, ((POS_GILDE_GEBAEUDE_Y + (REL_GILDE_GEBAEUDE_Y * i)) + (REL_GILDE_GEBAEUDE_LINE * 4)));
                    DefineCnt((CNT_GILDE_GEBAEUDE_MUSH + i), 0, ((POS_GILDE_GEBAEUDE_Y + (REL_GILDE_GEBAEUDE_Y * i)) + (REL_GILDE_GEBAEUDE_LINE * 4)));
                    DefineBtn((BTN_GILDE_GEBAEUDE_IMPROVE + i), "", GildeBtnHandler, btnClassPlus, (POS_GILDE_GEBAEUDE_X + REL_GILDE_GEBAEUDE_IMPROVE_X), ((POS_GILDE_GEBAEUDE_Y + (REL_GILDE_GEBAEUDE_Y * i)) + REL_GILDE_GEBAEUDE_IMPROVE_Y));
                    DefineImg((IMG_GILDE_GEBAEUDE_IMPROVE_GRAY + i), "res/gfx/scr/gilde/plus_disabled.png", false, (POS_GILDE_GEBAEUDE_X + REL_GILDE_GEBAEUDE_IMPROVE_X), ((POS_GILDE_GEBAEUDE_Y + (REL_GILDE_GEBAEUDE_Y * i)) + REL_GILDE_GEBAEUDE_IMPROVE_Y));
                    AddFilter((LBL_GILDE_GEBAEUDE_NAME + i), Filter_Shadow);
                    AddFilter((LBL_GILDE_GEBAEUDE_WERT_CAPTION + i), Filter_Shadow);
                    AddFilter((LBL_GILDE_GEBAEUDE_WERT + i), Filter_Shadow);
                    AddFilter((LBL_GILDE_GEBAEUDE_STUFE_CAPTION + i), Filter_Shadow);
                    AddFilter((LBL_GILDE_GEBAEUDE_STUFE + i), Filter_Shadow);
                    AddFilter((LBL_GILDE_GEBAEUDE_KOSTEN_GOLD + i), Filter_Shadow);
                    AddFilter((LBL_GILDE_GEBAEUDE_KOSTEN_MUSH + i), Filter_Shadow);
                    EnablePopup((IMG_GILDE_GEBAEUDE + i), txt[(TXT_GILDE_GEBAEUDE1_POPUP + i)]);
                    EnablePopup((LBL_GILDE_GEBAEUDE_NAME + i), txt[(TXT_GILDE_GEBAEUDE1_POPUP + i)]);
                    EnablePopup((LBL_GILDE_GEBAEUDE_WERT_CAPTION + i), txt[(TXT_GILDE_GEBAEUDE1_POPUP + i)]);
                    EnablePopup((LBL_GILDE_GEBAEUDE_WERT + i), txt[(TXT_GILDE_GEBAEUDE1_POPUP + i)]);
                    EnablePopup((LBL_GILDE_GEBAEUDE_STUFE_CAPTION + i), txt[(TXT_GILDE_GEBAEUDE1_POPUP + i)]);
                    EnablePopup((LBL_GILDE_GEBAEUDE_STUFE + i), txt[(TXT_GILDE_GEBAEUDE1_POPUP + i)]);
                    EnablePopup((BTN_GILDE_GEBAEUDE_IMPROVE + i), txt[TXT_GILDE_AUSBAUEN]);
                    AddBunch(BNC_GILDE_GEBAEUDE, (IMG_GILDE_GEBAEUDE + i), (LBL_GILDE_GEBAEUDE_NAME + i), (LBL_GILDE_GEBAEUDE_WERT_CAPTION + i), (LBL_GILDE_GEBAEUDE_WERT + i), (LBL_GILDE_GEBAEUDE_STUFE_CAPTION + i));
                    AddBunch(BNC_GILDE_GEBAEUDE, (LBL_GILDE_GEBAEUDE_STUFE + i), (LBL_GILDE_GEBAEUDE_KOSTEN_GOLD + i), (LBL_GILDE_GEBAEUDE_KOSTEN_MUSH + i), (CNT_GILDE_GEBAEUDE_GOLD + i), (CNT_GILDE_GEBAEUDE_MUSH + i), (IMG_GILDE_GEBAEUDE_IMPROVE_GRAY + i), (BTN_GILDE_GEBAEUDE_IMPROVE + i));
                    i = (i + 1);
                };
                DefineBtn(BTN_GILDE_GEBAEUDE_GOTO_CREST, " ", GildeBtnHandler, btnClassBack, (POS_GILDE_GEBAEUDE_X + 211), (POS_GILDE_GEBAEUDE_Y - 5));
                _local2 = actor[BTN_GILDE_GEBAEUDE_GOTO_CREST];
                with (_local2) {
                    scaleX = 0.4;
                    scaleY = 0.4;
                };
                EnablePopup(BTN_GILDE_GEBAEUDE_GOTO_CREST, txt[TXT_BUILDINGS_GOTO_CREST]);
                AddBunch(BNC_GILDE_GEBAEUDE, BTN_GILDE_GEBAEUDE_GOTO_CREST);
                DefineBunch(BNC_GILDE_CREST);
                DefineCnt(CNT_GILDE_CREST, (POS_GILDE_GEBAEUDE_X - 2), (POS_GILDE_GEBAEUDE_Y + 60));
                i = 0;
                while (i < crestElementPos.length) {
                    DefineImg((IMG_GILDE_CREST + i), "", false, 0, 0);
                    actor[(IMG_GILDE_CREST + i)].mouseEnabled = false;
                    MakePersistent((IMG_GILDE_CREST + i));
                    crestClaI = i;
                    if (crestClaI == 1){
                        crestClaI = 0;
                    } else {
                        if (crestClaI == 0){
                            crestClaI = 1;
                        };
                    };
                    DefineClickArea((CLA_GILDE_CREST + crestClaI), C_EMPTY, GildeBtnHandler, crestElementPos[crestClaI][0], crestElementPos[crestClaI][1], crestElementPos[crestClaI][2], crestElementPos[crestClaI][3], 0, undefined, undefined, true);
                    MakePersistent((CLA_GILDE_CREST + crestClaI));
                    _local2 = actor[CNT_GILDE_CREST];
                    with (_local2) {
                        addChild(actor[(IMG_GILDE_CREST + i)]);
                        addChild(actor[(CLA_GILDE_CREST + crestClaI)]);
                        if (i == 2){
                            DefineImg(IMG_GILDE_CREST_SHIELDCOLOR, "", false, 0, 0);
                            actor[IMG_GILDE_CREST_SHIELDCOLOR].mouseEnabled = false;
                            MakePersistent(IMG_GILDE_CREST_SHIELDCOLOR);
                            addChild(actor[IMG_GILDE_CREST_SHIELDCOLOR]);
                        };
                        if (i == 3){
                            DefineLbl(LBL_GILDE_CREST_INSCRIPTION, "Gildenname", 15, 210, FontFormat_Book);
                            actor[LBL_GILDE_CREST_INSCRIPTION].mouseEnabled = false;
                            MakePersistent(LBL_GILDE_CREST_INSCRIPTION);
                            addChild(actor[LBL_GILDE_CREST_INSCRIPTION]);
                        };
                    };
                    i = (i + 1);
                };
                DefineBtn(BTN_GILDE_CREST_GOTO_GEBAEUDE, " ", GildeBtnHandler, btnClassBack, (POS_GILDE_GEBAEUDE_X + 211), (POS_GILDE_GEBAEUDE_Y - 5));
                _local2 = actor[BTN_GILDE_CREST_GOTO_GEBAEUDE];
                with (_local2) {
                    scaleX = 0.4;
                    scaleY = 0.4;
                };
                EnablePopup(BTN_GILDE_CREST_GOTO_GEBAEUDE, txt[TXT_CREST_GOTO_BUILDINGS]);
                DefineBunch(BNC_GILDE_CREST_CONTROLS);
                DefineBtn(BTN_GILDE_CREST_CHANGE_PREV, "", GildeBtnHandler, btnClassArrowLeft, (POS_GILDE_GEBAEUDE_X + 10), (POS_GILDE_GEBAEUDE_Y + 250));
                DefineBtn(BTN_GILDE_CREST_CHANGE_NEXT, "", GildeBtnHandler, btnClassArrowRight, (POS_GILDE_GEBAEUDE_X + 193), (POS_GILDE_GEBAEUDE_Y + 250));
                DefineLbl(LBL_GILDE_CREST_ELEMENT, "Element", (POS_GILDE_GEBAEUDE_X + 120), (POS_GILDE_GEBAEUDE_Y + 0xFF), FontFormat_Default);
                AddFilter(LBL_GILDE_CREST_ELEMENT, Filter_Shadow);
                DefineBtn(BTN_GILDE_CREST_COLOR_PREV, "", GildeBtnHandler, btnClassArrowLeft, (POS_GILDE_GEBAEUDE_X + 10), (POS_GILDE_GEBAEUDE_Y + 295));
                DefineBtn(BTN_GILDE_CREST_COLOR_NEXT, "", GildeBtnHandler, btnClassArrowRight, (POS_GILDE_GEBAEUDE_X + 193), (POS_GILDE_GEBAEUDE_Y + 295));
                DefineBtn(BTN_GILDE_CREST_OK, txt[TXT_CREST_SUGGEST], GildeBtnHandler, btnClassBasic, (POS_GILDE_GEBAEUDE_X + 30), (POS_GILDE_GEBAEUDE_Y + 340));
                EnablePopup(BTN_GILDE_CREST_OK, txt[TXT_CREST_INFO].split("#").join(String.fromCharCode(13)));
                i = 1;
                while (i < 4) {
                    DefineCnt((CNT_GILDE_CREST_COLOR + i), ((POS_GILDE_GEBAEUDE_X + 23) + (i * 40)), (POS_GILDE_GEBAEUDE_Y + 296));
                    DefineImg((IMG_GILDE_CREST_COLOR_UNSELECTED + i), "res/gfx/scr/gilde/crest/color_idle.jpg", false, 0, 0);
                    DefineImg((IMG_GILDE_CREST_COLOR_SELECTED + i), "res/gfx/scr/gilde/crest/color_hover.jpg", false, 0, 0);
                    DefineImg((IMG_GILDE_CREST_COLOR_FILLIN + i), "res/gfx/scr/gilde/crest/color_field.jpg", false, 2, 2);
                    MakePersistent((IMG_GILDE_CREST_COLOR_UNSELECTED + i));
                    MakePersistent((IMG_GILDE_CREST_COLOR_SELECTED + i));
                    MakePersistent((IMG_GILDE_CREST_COLOR_FILLIN + i));
                    _local2 = actor[(CNT_GILDE_CREST_COLOR + i)];
                    with (_local2) {
                        addChild(actor[(IMG_GILDE_CREST_COLOR_UNSELECTED + i)]);
                        addChild(actor[(IMG_GILDE_CREST_COLOR_SELECTED + i)]);
                        addChild(actor[(IMG_GILDE_CREST_COLOR_FILLIN + i)]);
                    };
                    actor[(CNT_GILDE_CREST_COLOR + i)].addEventListener(MouseEvent.CLICK, GildeBtnHandler);
                    actor[(CNT_GILDE_CREST_COLOR + i)].buttonMode = true;
                    actor[(CNT_GILDE_CREST_COLOR + i)].useHandCursor = true;
                    actor[(CNT_GILDE_CREST_COLOR + i)].mouseChildren = false;
                    AddBunch(BNC_GILDE_CREST_CONTROLS, (CNT_GILDE_CREST_COLOR + i));
                    i = (i + 1);
                };
                AddBunch(BNC_GILDE_CREST_CONTROLS, BTN_GILDE_CREST_CHANGE_PREV, BTN_GILDE_CREST_CHANGE_NEXT, LBL_GILDE_CREST_ELEMENT, BTN_GILDE_CREST_COLOR_PREV, BTN_GILDE_CREST_COLOR_NEXT, BTN_GILDE_CREST_OK);
                AddBunch(BNC_GILDE_CREST, CNT_GILDE_CREST, BTN_GILDE_CREST_GOTO_GEBAEUDE);
                DefineLbl(LBL_GILDE_GOLD, "", 0, (POS_GILDE_GOLD_Y + ((noMush) ? 15 : 0)), FontFormat_GuildMoney);
                AddFilter(LBL_GILDE_GOLD, Filter_Shadow);
                DefineLbl(LBL_GILDE_MUSH, "", 0, (POS_GILDE_GOLD_Y + REL_GILDE_MUSH_Y), FontFormat_GuildMoney);
                AddFilter(LBL_GILDE_MUSH, Filter_Shadow);
                DefineCnt(CNT_GILDE_GOLD, POS_GILDE_GOLDMUSH_X, (POS_GILDE_GOLD_Y + ((noMush) ? 15 : 0)));
                DefineCnt(CNT_GILDE_MUSH, POS_GILDE_GOLDMUSH_X, (POS_GILDE_GOLD_Y + REL_GILDE_MUSH_Y));
                DefineBtn(BTN_GILDE_GOLD, "", GildeBtnHandler, btnClassPlus, (POS_GILDE_GOLDMUSH_X + REL_GILDE_GOLDMUSH_C2), (POS_GILDE_GOLD_Y + ((noMush) ? 15 : 0)));
                _local2 = actor[BTN_GILDE_GOLD];
                with (_local2) {
                    scaleX = 0.8;
                    scaleY = 0.8;
                };
                EnablePopup(BTN_GILDE_GOLD, txt[TXT_BTN_GILDE_GOLD]);
                DefineBtn(BTN_GILDE_MUSH, "", GildeBtnHandler, btnClassPlus, (POS_GILDE_GOLDMUSH_X + REL_GILDE_GOLDMUSH_C2), (POS_GILDE_GOLD_Y + REL_GILDE_MUSH_Y));
                _local2 = actor[BTN_GILDE_MUSH];
                with (_local2) {
                    scaleX = 0.8;
                    scaleY = 0.8;
                };
                EnablePopup(BTN_GILDE_MUSH, txt[TXT_BTN_GILDE_MUSH]);
                DefineLbl(LBL_GILDE_GOLD2, "1", (POS_GILDE_GOLDMUSH_X + REL_GILDE_GOLDMUSH_C3), (POS_GILDE_GOLD_Y + ((noMush) ? 15 : 0)), FontFormat_GuildMoney);
                AddFilter(LBL_GILDE_GOLD2, Filter_Shadow);
                EnablePopup(LBL_GILDE_GOLD2, txt[TXT_BTN_GILDE_GOLD]);
                DefineLbl(LBL_GILDE_MUSH2, "1", 0, (POS_GILDE_GOLD_Y + REL_GILDE_MUSH_Y), FontFormat_GuildMoney);
                AddFilter(LBL_GILDE_MUSH2, Filter_Shadow);
                EnablePopup(LBL_GILDE_MUSH2, txt[TXT_BTN_GILDE_MUSH]);
                actor[LBL_GILDE_MUSH2].x = ((actor[LBL_GILDE_GOLD2].x + actor[LBL_GILDE_GOLD2].textWidth) - actor[LBL_GILDE_MUSH2].textWidth);
                DefineCnt(CNT_GILDE_GOLD2, ((actor[LBL_GILDE_GOLD2].x + actor[LBL_GILDE_GOLD2].textWidth) + 15), (POS_GILDE_GOLD_Y + ((noMush) ? 15 : 0)));
                DefineCnt(CNT_GILDE_MUSH2, ((actor[LBL_GILDE_GOLD2].x + actor[LBL_GILDE_GOLD2].textWidth) + 15), (POS_GILDE_GOLD_Y + REL_GILDE_MUSH_Y));
                if (noMush){
                    DefineBunch(BNC_GILDE_SCHATZ, LBL_GILDE_GOLD, CNT_GILDE_GOLD, BTN_GILDE_GOLD, LBL_GILDE_GOLD2, CNT_GILDE_GOLD2);
                } else {
                    DefineBunch(BNC_GILDE_SCHATZ, LBL_GILDE_GOLD, LBL_GILDE_MUSH, CNT_GILDE_GOLD, CNT_GILDE_MUSH, BTN_GILDE_GOLD, BTN_GILDE_MUSH, LBL_GILDE_GOLD2, LBL_GILDE_MUSH2, CNT_GILDE_GOLD2, CNT_GILDE_MUSH2);
                };
                DefineBunch(BNC_SCREEN_GILDE_GRUENDEN, IMG_GILDEN_BG, IMG_IF_WINDOW, LBL_WINDOW_TITLE, BNC_IF_OVL, LBL_GILDE_GRUENDEN_TEXT, INP_GILDE_GRUENDEN, BTN_GILDE_GRUENDEN, BTN_IF_EXIT);
                DefineBunch(BNC_SCREEN_GILDEN, IMG_GILDEN_BG, BNC_IF_OVL, IMG_GILDE_RAHMEN, BTN_IF_EXIT, LBL_SCREEN_TITLE, BNC_GILDE_GEBAEUDE, BNC_GILDE_CREST, BNC_GILDE_SCHATZ);
                DefineCnt(CNT_GILDE_RANG, POS_GILDE_RANG_X, POS_GILDE_RANG_Y);
                DefineLbl(LBL_GILDE_RANG, "", 0, 0, FontFormat_Default);
                AddFilter(LBL_GILDE_RANG, Filter_Shadow);
                _local2 = actor[CNT_GILDE_RANG];
                with (_local2) {
                    addChild(actor[LBL_GILDE_RANG]);
                    textLinkMakeClickable(getChildAt(0).parent);
                    mouseChildren = false;
                    mouseEnabled = true;
                    buttonMode = true;
                    useHandCursor = true;
                    addEventListener(MouseEvent.CLICK, JumpToGuildHall);
                };
                MakePersistent(LBL_GILDE_RANG);
                DefineFromClass(INP_GILDE_TEXT, SimpleTextAreaGuild, POS_GILDE_TEXT_X, POS_GILDE_LIST_Y, 1, "text");
                CleanupField(INP_GILDE_TEXT);
                AddFilter(INP_GILDE_TEXT, Filter_Shadow);
                DefineCnt(CNT_GILDE_LIST, POS_GILDE_LIST_X, POS_GILDE_LIST_Y);
                DefineImg(IMG_GILDE_RANK, "res/gfx/scr/gilde/punkt_krone.png", false, 0, 0);
                DefineImg((IMG_GILDE_RANK + 1), "res/gfx/scr/gilde/punkt_orden.png", false, 0, 0);
                DefineImg((IMG_GILDE_RANK + 2), "res/gfx/scr/gilde/punkt_normalo.png", false, 0, 0);
                DefineBtn(BTN_GILDE_SCROLL_UP, "", GildeBtnHandler, btnClassArrowUp, POS_GILDE_LIST_SCROLLBTN_X, POS_GILDE_LIST_Y);
                DefineBtn(BTN_GILDE_SCROLL_DOWN, "", GildeBtnHandler, btnClassArrowDown, POS_GILDE_LIST_SCROLLBTN_X, POS_GILDE_LIST_SCROLLBTN_Y);
                i = 0;
                DefineImg(IMG_GILDE_INVITE_GRAY, "res/gfx/scr/gilde/button_gilde_einladen_grau.jpg", false, (POS_GILDE_TOOLBTN_X + (i * REL_GILDE_TOOLBTN_X)), POS_GILDE_TOOLBTN_Y);
                i = (i + 1);
                DefineBtn(BTN_GILDE_INVITE, "", GildeBtnHandler, btnClassInvite, (POS_GILDE_TOOLBTN_X + (i * REL_GILDE_TOOLBTN_X)), POS_GILDE_TOOLBTN_Y);
                i = (i + 1);
                DefineBtn(BTN_GILDE_PROFILE, "", GildeBtnHandler, btnClassView, (POS_GILDE_TOOLBTN_X + (i * REL_GILDE_TOOLBTN_X)), POS_GILDE_TOOLBTN_Y);
                DefineImg(IMG_GILDE_KICK_GRAY, "res/gfx/scr/gilde/button_gilde_rauswerfen_grau.jpg", false, (POS_GILDE_TOOLBTN_X + (i * REL_GILDE_TOOLBTN_X)), POS_GILDE_TOOLBTN_Y);
                i = (i + 1);
                DefineBtn(BTN_GILDE_KICK, "", GildeBtnHandler, btnClassKick, (POS_GILDE_TOOLBTN_X + (i * REL_GILDE_TOOLBTN_X)), POS_GILDE_TOOLBTN_Y);
                DefineImg(IMG_GILDE_PROMOTE_GRAY, "res/gfx/scr/gilde/button_gilde_orden_grau.jpg", false, (POS_GILDE_TOOLBTN_X + (i * REL_GILDE_TOOLBTN_X)), POS_GILDE_TOOLBTN_Y);
                DefineBtn(BTN_GILDE_PROMOTE, "", GildeBtnHandler, btnClassPromote, (POS_GILDE_TOOLBTN_X + (i * REL_GILDE_TOOLBTN_X)), POS_GILDE_TOOLBTN_Y);
                i = (i + 1);
                DefineBtn(BTN_GILDE_DEMOTE, "", GildeBtnHandler, btnClassDemote, (POS_GILDE_TOOLBTN_X + (i * REL_GILDE_TOOLBTN_X)), POS_GILDE_TOOLBTN_Y);
                DefineImg(IMG_GILDE_MASTER_GRAY, "res/gfx/scr/gilde/button_gilde_gildenleiter_grau.jpg", false, (POS_GILDE_TOOLBTN_X + (i * REL_GILDE_TOOLBTN_X)), POS_GILDE_TOOLBTN_Y);
                DefineBtn(BTN_GILDE_MASTER, "", GildeBtnHandler, btnClassMaster, (POS_GILDE_TOOLBTN_X + (i * REL_GILDE_TOOLBTN_X)), POS_GILDE_TOOLBTN_Y);
                i = (i + 1);
                DefineBtn(BTN_GILDE_REVOLT, "", GildeBtnHandler, btnClassRevolt, (POS_GILDE_TOOLBTN_X + (i * REL_GILDE_TOOLBTN_X)), POS_GILDE_TOOLBTN_Y);
                DefineBtn(BTN_GILDE_RAID, "", GildeBtnHandler, btnClassRaid, (POS_GILDE_ATTACKBTN_X - 50), POS_GILDE_TOOLBTN_Y);
                DefineImg(IMG_GILDE_RAID_GRAY, "res/gfx/scr/gilde/button_gilde_raid_grey.jpg", false, (POS_GILDE_ATTACKBTN_X - 50), POS_GILDE_TOOLBTN_Y);
                DefineImg(IMG_GILDE_RAID_OK, "res/gfx/scr/gilde/button_gilde_raid_check.jpg", false, (POS_GILDE_ATTACKBTN_X - 50), POS_GILDE_TOOLBTN_Y);
                DefineBtn(BTN_GILDE_ATTACK, "", GildeBtnHandler, btnClassAttack, (POS_GILDE_ATTACKBTN_X + 5), POS_GILDE_TOOLBTN_Y);
                DefineBtn(BTN_GILDE_DEFEND, "", GildeBtnHandler, btnClassDefend, (POS_GILDE_DEFENDBTN_X + 5), POS_GILDE_TOOLBTN_Y);
                DefineImg(IMG_GILDE_ATTACK_GRAY, "res/gfx/scr/gilde/button_gilde_attack_grau.jpg", false, (POS_GILDE_ATTACKBTN_X + 5), POS_GILDE_TOOLBTN_Y);
                DefineImg(IMG_GILDE_ATTACK_OK, "res/gfx/scr/gilde/button_gilde_attack_check.jpg", false, (POS_GILDE_ATTACKBTN_X + 5), POS_GILDE_TOOLBTN_Y);
                DefineImg(IMG_GILDE_DEFEND_GRAY, "res/gfx/scr/gilde/button_gilde_defend_grau.jpg", false, (POS_GILDE_DEFENDBTN_X + 5), POS_GILDE_TOOLBTN_Y);
                DefineImg(IMG_GILDE_DEFEND_OK, "res/gfx/scr/gilde/button_gilde_defend_check.jpg", false, (POS_GILDE_DEFENDBTN_X + 5), POS_GILDE_TOOLBTN_Y);
                DefineBtn(BTN_GILDE_KATAPULT, "", GildeBtnHandler, btnClassCatapult0, (POS_GILDE_ATTACKBTN_X - 105), POS_GILDE_TOOLBTN_Y);
                DefineBtn((BTN_GILDE_KATAPULT + 1), "", GildeBtnHandler, btnClassCatapult1, actor[BTN_GILDE_KATAPULT].x, actor[BTN_GILDE_KATAPULT].y);
                DefineBtn((BTN_GILDE_KATAPULT + 2), "", GildeBtnHandler, btnClassCatapult2, actor[BTN_GILDE_KATAPULT].x, actor[BTN_GILDE_KATAPULT].y);
                DefineImg(IMG_GILDE_KATAPULT_GRAY, "res/gfx/scr/gilde/button_gilde_catapult0_grau.png", false, actor[BTN_GILDE_KATAPULT].x, actor[BTN_GILDE_KATAPULT].y);
                DefineImg(IMG_GILDE_KATAPULT_OK, "res/gfx/scr/gilde/button_gilde_catapult1_idle.png", false, actor[BTN_GILDE_KATAPULT].x, actor[BTN_GILDE_KATAPULT].y);
                DefineImg((IMG_GILDE_KATAPULT_OK + 1), "res/gfx/scr/gilde/button_gilde_catapult2_idle.png", false, actor[BTN_GILDE_KATAPULT].x, actor[BTN_GILDE_KATAPULT].y);
                DefineImg((IMG_GILDE_KATAPULT_OK + 2), "res/gfx/scr/gilde/button_gilde_catapult3_idle.png", false, actor[BTN_GILDE_KATAPULT].x, actor[BTN_GILDE_KATAPULT].y);
                DefineBunch(BNC_GILDE_KATAPULT, BTN_GILDE_KATAPULT, (BTN_GILDE_KATAPULT + 1), (BTN_GILDE_KATAPULT + 2), IMG_GILDE_KATAPULT_GRAY, IMG_GILDE_KATAPULT_OK, (IMG_GILDE_KATAPULT_OK + 1), (IMG_GILDE_KATAPULT_OK + 2));
                DefineCnt(CNT_GILDE_ATTACK, POS_GILDE_ATTACKLABEL_X, POS_GILDE_TOOLBTN_Y);
                DefineCnt(CNT_GILDE_DEFENCE, POS_GILDE_ATTACKLABEL_X, (POS_GILDE_TOOLBTN_Y + REL_GILDE_DEFENSELABEL_Y));
                DefineLbl(LBL_GILDE_ATTACK, "", 0, 0, FontFormat_AttackLabel);
                DefineLbl(LBL_GILDE_DEFENCE, "", 0, 0, FontFormat_AttackLabel);
                AddFilter(LBL_GILDE_ATTACK, Filter_Shadow);
                AddFilter(LBL_GILDE_DEFENCE, Filter_Shadow);
                MakePersistent(LBL_GILDE_ATTACK, LBL_GILDE_DEFENCE);
                _local2 = actor[CNT_GILDE_ATTACK];
                with (_local2) {
                    addChild(actor[LBL_GILDE_ATTACK]);
                    textLinkMakeClickable(getChildAt(0).parent);
                    mouseChildren = false;
                    useHandCursor = true;
                    buttonMode = true;
                    addEventListener(MouseEvent.CLICK, AttackLinkClick);
                };
                _local2 = actor[CNT_GILDE_DEFENCE];
                with (_local2) {
                    addChild(actor[LBL_GILDE_DEFENCE]);
                    textLinkMakeClickable(getChildAt(0).parent);
                    mouseChildren = false;
                    useHandCursor = true;
                    buttonMode = true;
                    addEventListener(MouseEvent.CLICK, DefenceLinkClick);
                };
                EnablePopup(BTN_GILDE_INVITE, txt[TXT_POPUP_INVITE]);
                EnablePopup(IMG_GILDE_INVITE_GRAY, txt[TXT_POPUP_INVITE]);
                EnablePopup(BTN_GILDE_PROFILE, txt[TXT_POPUP_PROFILE]);
                EnablePopup(BTN_GILDE_KICK, txt[TXT_POPUP_KICK]);
                EnablePopup(IMG_GILDE_KICK_GRAY, txt[TXT_POPUP_KICK]);
                EnablePopup(BTN_GILDE_PROMOTE, txt[TXT_POPUP_OFFIZIER]);
                EnablePopup(IMG_GILDE_PROMOTE_GRAY, txt[TXT_POPUP_OFFIZIER]);
                EnablePopup(BTN_GILDE_DEMOTE, txt[TXT_POPUP_OFFIZIER]);
                EnablePopup(BTN_GILDE_MASTER, txt[TXT_POPUP_LEITER]);
                EnablePopup(IMG_GILDE_MASTER_GRAY, txt[TXT_POPUP_LEITER]);
                EnablePopup(BTN_GILDE_REVOLT, txt[TXT_POPUP_REVOLT]);
                DefineBunch(BNC_GILDE_SET_MEMBER, IMG_GILDE_INVITE_GRAY, BTN_GILDE_PROFILE, IMG_GILDE_KICK_GRAY, IMG_GILDE_PROMOTE_GRAY, IMG_GILDE_MASTER_GRAY);
                DefineBunch(BNC_GILDE_SET_OFFICER, BTN_GILDE_INVITE, BTN_GILDE_PROFILE, BTN_GILDE_KICK, IMG_GILDE_PROMOTE_GRAY, IMG_GILDE_MASTER_GRAY);
                DefineBunch(BNC_GILDE_SET_MASTER, BTN_GILDE_INVITE, BTN_GILDE_PROFILE, BTN_GILDE_KICK, BTN_GILDE_PROMOTE, BTN_GILDE_MASTER);
                DefineBunch(BNC_GILDE_LISTBUTTONS, BNC_GILDE_SET_MEMBER, BNC_GILDE_SET_OFFICER, BNC_GILDE_SET_MASTER);
                AddBunch(BNC_SCREEN_GILDEN, INP_GILDE_TEXT, CNT_GILDE_LIST, LBL_GILDE_CHAT_CAPTION, BTN_GILDE_CHAT_UP, BTN_GILDE_CHAT_DOWN);
                AddBunch(BNC_SCREEN_GILDEN, INP_GILDE_CHAT, BTN_GILDE_SCROLL_UP, BTN_GILDE_SCROLL_DOWN, CNT_GILDE_RANG, CNT_GILDE_ATTACK, CNT_GILDE_DEFENCE);
                DefineLbl(LBL_GILDE_CHAT_CAPTION, txt[TXT_CHAT_CAPTION], POS_GILDE_CHAT_X, (POS_GILDE_CHAT_Y - REL_GILDE_CHAT_CAPTION_Y));
                AddFilter(LBL_GILDE_CHAT_CAPTION, Filter_Shadow);
                Hide(LBL_GILDE_CHAT_CAPTION);
                DefineCnt(CNT_GILDE_LINK, 0, POS_GILDE_RANG_Y);
                DefineLbl(LBL_GILDE_LINK, txt[TXT_FORUM_LINK], 0, 0);
                AddFilter(LBL_GILDE_LINK, Filter_HeavyShadow);
                MakePersistent(LBL_GILDE_LINK);
                _local2 = actor[CNT_GILDE_LINK];
                with (_local2) {
                    addChild(actor[LBL_GILDE_LINK]);
                    textLinkMakeClickable(getChildAt(0).parent);
                    addEventListener(MouseEvent.CLICK, OpenGuildLink);
                    x = ((POS_GILDE_LIST_SCROLLBTN_X - 30) - actor[LBL_GILDE_LINK].textWidth);
                    mouseChildren = false;
                    useHandCursor = true;
                    buttonMode = true;
                };
                DefineBtn(BTN_GILDE_CHAT_UP, "", GildeBtnHandler, btnClassArrowUp, POS_GILDE_LIST_SCROLLBTN_X, (POS_GILDE_CHAT_Y + REL_GILDE_CHAT_UP_Y));
                DefineBtn(BTN_GILDE_CHAT_DOWN, "", GildeBtnHandler, btnClassArrowDown, POS_GILDE_LIST_SCROLLBTN_X, (POS_GILDE_CHAT_Y + REL_GILDE_CHAT_DOWN_Y));
                DefineBunch(BNC_GILDE_CHAT, LBL_GILDE_CHAT_CAPTION, BTN_GILDE_CHAT_UP, BTN_GILDE_CHAT_DOWN, INP_GILDE_CHAT);
                i = 0;
                while (i < 40) {
                    DefineLbl((LBL_GILDE_CHAT + i), "", POS_GILDE_CHAT_X, (POS_GILDE_CHAT_Y + ((i - 35) * REL_GILDE_CHAT_Y)));
                    actor[(LBL_GILDE_CHAT + i)].visible = (i >= 35);
                    actor[(LBL_GILDE_CHAT + i)].addEventListener(MouseEvent.CLICK, clickChatLine);
                    AddFilter((LBL_GILDE_CHAT + i), Filter_Shadow);
                    AddBunch(BNC_SCREEN_GILDEN, (LBL_GILDE_CHAT + i));
                    AddBunch(BNC_GILDE_CHAT, (LBL_GILDE_CHAT + i));
                    i = (i + 1);
                };
                DefineFromClass(INP_GILDE_CHAT, ChatInputField, POS_GILDE_CHAT_X, POS_GILDE_CHAT_FIELD_Y, 1, "chat");
                actor[INP_GILDE_CHAT].getChildAt(0).text = "";
                AddFilter(INP_GILDE_CHAT, Filter_Shadow);
                actor[INP_GILDE_CHAT].addEventListener(KeyboardEvent.KEY_DOWN, SendChatMsg);
                actor[INP_GILDE_CHAT].addEventListener(KeyboardEvent.KEY_UP, AdvancedChatHandler);
                actor[INP_GILDE_CHAT].addEventListener(FocusEvent.FOCUS_IN, ShowExtendedHistory);
                actor[INP_GILDE_CHAT].addEventListener(FocusEvent.FOCUS_OUT, HideExtendedHistory);
                CleanupField(INP_GILDE_CHAT);
                lastChatLine = "";
                nextSuggestionTimer = new Timer((62 * 1000));
                suggestionAllowed = true;
                nextSuggestionTimer.addEventListener(TimerEvent.TIMER, nextSuggestionAllow);
                DefineClickArea(CA_GILDE_DIALOG_BLOCK, C_EMPTY, undefined, 280, 100, (RES_X - 280), (RES_Y - 100));
                _local2 = actor[CA_GILDE_DIALOG_BLOCK];
                with (_local2) {
                    useHandCursor = false;
                    buttonMode = false;
                };
                DefineLbl(LBL_GILDE_DIALOG_TEXT_KICK, "", ((POS_IF_WIN_X + REL_IF_WIN_WELCOME_X) - (SIZE_GILDE_TEXT2_X / 2)), (POS_IF_WIN_Y + REL_GILDE_TEXT_Y), FontFormat_Default);
                DefineLbl(LBL_GILDE_DIALOG_TEXT_QUIT, "", ((POS_IF_WIN_X + REL_IF_WIN_WELCOME_X) - (SIZE_GILDE_TEXT2_X / 2)), (POS_IF_WIN_Y + REL_GILDE_TEXT_Y), FontFormat_Default);
                DefineLbl(LBL_GILDE_DIALOG_TEXT_MASTER, "", ((POS_IF_WIN_X + REL_IF_WIN_WELCOME_X) - (SIZE_GILDE_TEXT2_X / 2)), (POS_IF_WIN_Y + REL_GILDE_TEXT_Y), FontFormat_Default);
                DefineLbl(LBL_GILDE_DIALOG_TEXT_INVITE, "", ((POS_IF_WIN_X + REL_IF_WIN_WELCOME_X) - (SIZE_GILDE_TEXT2_X / 2)), (POS_IF_WIN_Y + REL_GILDE_TEXT_Y), FontFormat_Default);
                DefineLbl(LBL_GILDE_DIALOG_TEXT_REVOLT, "", ((POS_IF_WIN_X + REL_IF_WIN_WELCOME_X) - (SIZE_GILDE_TEXT2_X / 2)), (POS_IF_WIN_Y + REL_GILDE_TEXT_Y), FontFormat_Default);
                DefineLbl(LBL_GILDE_DIALOG_TEXT_RAID, "", ((POS_IF_WIN_X + REL_IF_WIN_WELCOME_X) - (SIZE_GILDE_TEXT2_X / 2)), (POS_IF_WIN_Y + REL_GILDE_TEXT_Y), FontFormat_Default);
                _local2 = actor[LBL_GILDE_DIALOG_TEXT_KICK];
                with (_local2) {
                    wordWrap = true;
                    width = SIZE_GILDE_TEXT2_X;
                    text = txt[TXT_GILDE_KICK];
                };
                _local2 = actor[LBL_GILDE_DIALOG_TEXT_QUIT];
                with (_local2) {
                    wordWrap = true;
                    width = SIZE_GILDE_TEXT2_X;
                    text = txt[TXT_GILDE_QUIT];
                };
                _local2 = actor[LBL_GILDE_DIALOG_TEXT_MASTER];
                with (_local2) {
                    wordWrap = true;
                    width = SIZE_GILDE_TEXT2_X;
                    text = txt[TXT_GILDE_MASTER];
                };
                _local2 = actor[LBL_GILDE_DIALOG_TEXT_INVITE];
                with (_local2) {
                    wordWrap = true;
                    width = SIZE_GILDE_TEXT2_X;
                    text = txt[TXT_GILDE_INVITE];
                };
                _local2 = actor[LBL_GILDE_DIALOG_TEXT_REVOLT];
                with (_local2) {
                    wordWrap = true;
                    width = SIZE_GILDE_TEXT2_X;
                    text = txt[TXT_REVOLT_WARNING];
                };
                DefineFromClass(INP_GILDE_DIALOG_INVITE, text_input1, 0, (POS_IF_WIN_Y + REL_GILDE_INP_Y), 2, "name");
                _local2 = actor[INP_GILDE_DIALOG_INVITE];
                with (_local2) {
                    getChildAt(1).text = "";
                    x = ((POS_IF_WIN_X + REL_IF_WIN_WELCOME_X) - int((width / 2)));
                };
                DefineBtn(BTN_GILDE_DIALOG_CANCEL, txt[TXT_ABBRECHEN], GildeBtnHandler, btnClassBasic, 0, (POS_IF_WIN_Y + REL_GILDE_OK_Y));
                DefineBtn(BTN_GILDE_DIALOG_OK_KICK, txt[TXT_OK], GildeBtnHandler, btnClassBasic, 0, (POS_IF_WIN_Y + REL_GILDE_OK_Y));
                DefineBtn(BTN_GILDE_DIALOG_OK_MASTER, txt[TXT_OK], GildeBtnHandler, btnClassBasic, 0, (POS_IF_WIN_Y + REL_GILDE_OK_Y));
                DefineBtn(BTN_GILDE_DIALOG_OK_INVITE, txt[TXT_OK], GildeBtnHandler, btnClassBasic, 0, (POS_IF_WIN_Y + REL_GILDE_OK_Y));
                DefineBtn(BTN_GILDE_DIALOG_OK_REVOLT, txt[TXT_OK], GildeBtnHandler, btnClassBasic, 0, (POS_IF_WIN_Y + REL_GILDE_OK_Y));
                DefineBtn(BTN_GILDE_DIALOG_OK_RAID, txt[TXT_OK], GildeBtnHandler, btnClassBasic, 0, (POS_IF_WIN_Y + REL_GILDE_OK_Y));
                _local2 = actor[BTN_GILDE_DIALOG_CANCEL];
                with (_local2) {
                    x = ((POS_IF_WIN_X + REL_IF_WIN_WELCOME_X) + 10);
                };
                _local2 = actor[BTN_GILDE_DIALOG_OK_KICK];
                with (_local2) {
                    x = (((POS_IF_WIN_X + REL_IF_WIN_WELCOME_X) - int(width)) - 10);
                };
                _local2 = actor[BTN_GILDE_DIALOG_OK_MASTER];
                with (_local2) {
                    x = (((POS_IF_WIN_X + REL_IF_WIN_WELCOME_X) - int(width)) - 10);
                };
                _local2 = actor[BTN_GILDE_DIALOG_OK_INVITE];
                with (_local2) {
                    x = (((POS_IF_WIN_X + REL_IF_WIN_WELCOME_X) - int(width)) - 10);
                };
                _local2 = actor[BTN_GILDE_DIALOG_OK_REVOLT];
                with (_local2) {
                    x = (((POS_IF_WIN_X + REL_IF_WIN_WELCOME_X) - int(width)) - 10);
                };
                _local2 = actor[BTN_GILDE_DIALOG_OK_RAID];
                with (_local2) {
                    x = (((POS_IF_WIN_X + REL_IF_WIN_WELCOME_X) - int(width)) - 10);
                };
                DefineBunch(BNC_GILDE_DIALOG_KICK, CA_GILDE_DIALOG_BLOCK, IMG_IF_WINDOW, LBL_WINDOW_TITLE, LBL_GILDE_DIALOG_TEXT_KICK, BTN_GILDE_DIALOG_OK_KICK, BTN_GILDE_DIALOG_CANCEL);
                DefineBunch(BNC_GILDE_DIALOG_MASTER, CA_GILDE_DIALOG_BLOCK, IMG_IF_WINDOW, LBL_WINDOW_TITLE, LBL_GILDE_DIALOG_TEXT_MASTER, BTN_GILDE_DIALOG_OK_MASTER, BTN_GILDE_DIALOG_CANCEL);
                DefineBunch(BNC_GILDE_DIALOG_INVITE, CA_GILDE_DIALOG_BLOCK, IMG_IF_WINDOW, LBL_WINDOW_TITLE, LBL_GILDE_DIALOG_TEXT_INVITE, INP_GILDE_DIALOG_INVITE, BTN_GILDE_DIALOG_OK_INVITE, BTN_GILDE_DIALOG_CANCEL);
                DefineBunch(BNC_GILDE_DIALOG_REVOLT, CA_GILDE_DIALOG_BLOCK, IMG_IF_WINDOW, LBL_WINDOW_TITLE, LBL_GILDE_DIALOG_TEXT_REVOLT, BTN_GILDE_DIALOG_OK_REVOLT, BTN_GILDE_DIALOG_CANCEL);
                DefineBunch(BNC_GILDE_DIALOG_RAID, CA_GILDE_DIALOG_BLOCK, IMG_IF_WINDOW, LBL_WINDOW_TITLE, LBL_GILDE_DIALOG_TEXT_RAID, BTN_GILDE_DIALOG_OK_RAID, BTN_GILDE_DIALOG_CANCEL);
                actor[BTN_GILDE_DIALOG_CANCEL].addEventListener(MouseEvent.CLICK, PlayerGuildInviteCancel);
                actor[BTN_GILDE_DIALOG_OK_INVITE].addEventListener(MouseEvent.CLICK, PlayerGuildInviteOK);
                DefineImg(IMG_HUTMANN_BG, "res/gfx/scr/taverne/huetchenspieler/huetchenspieler.jpg", false, 280, 100);
                DefineImg(IMG_HUTFACE_IDLE, "res/gfx/scr/taverne/huetchenspieler/huetchenspieler_neutral.jpg", false, (280 + REL_HUTMANN_FACE_X), (100 + REL_HUTMANN_FACE_Y));
                DefineImg(IMG_HUTFACE_HOVER, "res/gfx/scr/taverne/huetchenspieler/huetchenspieler_keinelust.jpg", false, (280 + REL_HUTMANN_FACE_X), (100 + REL_HUTMANN_FACE_Y));
                DefineImg(IMG_HUTFACE_WIN, "res/gfx/scr/taverne/huetchenspieler/huetchenspieler_gewonnen.jpg", false, (280 + REL_HUTMANN_FACE_X), (100 + REL_HUTMANN_FACE_Y));
                DefineImg(IMG_HUTFACE_LOSE1, "res/gfx/scr/taverne/huetchenspieler/huetchenspieler_verloren.jpg", false, (280 + REL_HUTMANN_FACE_X), (100 + REL_HUTMANN_FACE_Y));
                DefineImg(IMG_HUTFACE_LOSE2, "res/gfx/scr/taverne/huetchenspieler/huetchenspieler_verloren2.jpg", false, (280 + REL_HUTMANN_FACE_X), (100 + REL_HUTMANN_FACE_Y));
                DefineImg(IMG_HUTFACE_LOSE3, "res/gfx/scr/taverne/huetchenspieler/huetchenspieler_verloren3.jpg", false, (280 + REL_HUTMANN_FACE_X), (100 + REL_HUTMANN_FACE_Y));
                DefineImg(IMG_HUTBECHER_1_IDLE, "res/gfx/scr/taverne/huetchenspieler/huetchenspieler_becher1_1.jpg", false, (280 + REL_HUTMANN_BECHER1_X), (100 + REL_HUTMANN_BECHER1_Y));
                DefineImg(IMG_HUTBECHER_1_HOVER, "res/gfx/scr/taverne/huetchenspieler/huetchenspieler_becher1_2.jpg", false, ((280 + REL_HUTMANN_BECHER1_X) + REL_HUTMANN_BECHER1_X2), ((100 + REL_HUTMANN_BECHER1_Y) + REL_HUTMANN_BECHER1_Y2));
                DefineImg(IMG_HUTBECHER_1_CLICK, "res/gfx/scr/taverne/huetchenspieler/huetchenspieler_becher1_3.jpg", false, ((280 + REL_HUTMANN_BECHER1_X) + REL_HUTMANN_BECHER1_X3), ((100 + REL_HUTMANN_BECHER1_Y) + REL_HUTMANN_BECHER1_Y3));
                DefineBunch(BNC_HUTBECHER_1_HOVER, IMG_HUTBECHER_1_HOVER, IMG_HUTFACE_HOVER);
                DefineClickArea(CA_HUTBECHER_1, BNC_HUTBECHER_1_HOVER, ChooseCup, (280 + REL_HUTMANN_BECHER1_X), (100 + REL_HUTMANN_BECHER1_Y), SIZE_HUTMANN_BECHER_X, SIZE_HUTMANN_BECHER_Y);
                DefineImg(IMG_HUTBECHER_2_IDLE, "res/gfx/scr/taverne/huetchenspieler/huetchenspieler_becher2_1.jpg", false, (280 + REL_HUTMANN_BECHER2_X), (100 + REL_HUTMANN_BECHER2_Y));
                DefineImg(IMG_HUTBECHER_2_HOVER, "res/gfx/scr/taverne/huetchenspieler/huetchenspieler_becher2_2.jpg", false, ((280 + REL_HUTMANN_BECHER2_X) + REL_HUTMANN_BECHER2_X2), ((100 + REL_HUTMANN_BECHER2_Y) + REL_HUTMANN_BECHER2_Y2));
                DefineImg(IMG_HUTBECHER_2_CLICK, "res/gfx/scr/taverne/huetchenspieler/huetchenspieler_becher2_3.jpg", false, ((280 + REL_HUTMANN_BECHER2_X) + REL_HUTMANN_BECHER2_X3), ((100 + REL_HUTMANN_BECHER2_Y) + REL_HUTMANN_BECHER2_Y3));
                DefineBunch(BNC_HUTBECHER_2_HOVER, IMG_HUTBECHER_2_HOVER, IMG_HUTFACE_HOVER);
                DefineClickArea(CA_HUTBECHER_2, BNC_HUTBECHER_2_HOVER, ChooseCup, (280 + REL_HUTMANN_BECHER2_X), (100 + REL_HUTMANN_BECHER2_Y), SIZE_HUTMANN_BECHER_X, SIZE_HUTMANN_BECHER_Y);
                DefineImg(IMG_HUTBECHER_3_IDLE, "res/gfx/scr/taverne/huetchenspieler/huetchenspieler_becher3_1.jpg", false, (280 + REL_HUTMANN_BECHER3_X), (100 + REL_HUTMANN_BECHER3_Y));
                DefineImg(IMG_HUTBECHER_3_HOVER, "res/gfx/scr/taverne/huetchenspieler/huetchenspieler_becher3_2.jpg", false, ((280 + REL_HUTMANN_BECHER3_X) + REL_HUTMANN_BECHER3_X2), ((100 + REL_HUTMANN_BECHER3_Y) + REL_HUTMANN_BECHER3_Y2));
                DefineImg(IMG_HUTBECHER_3_CLICK, "res/gfx/scr/taverne/huetchenspieler/huetchenspieler_becher3_3.jpg", false, ((280 + REL_HUTMANN_BECHER3_X) + REL_HUTMANN_BECHER3_X3), ((100 + REL_HUTMANN_BECHER3_Y) + REL_HUTMANN_BECHER3_Y3));
                DefineBunch(BNC_HUTBECHER_3_HOVER, IMG_HUTBECHER_3_HOVER, IMG_HUTFACE_HOVER);
                DefineClickArea(CA_HUTBECHER_3, BNC_HUTBECHER_3_HOVER, ChooseCup, (280 + REL_HUTMANN_BECHER3_X), (100 + REL_HUTMANN_BECHER3_Y), SIZE_HUTMANN_BECHER_X, SIZE_HUTMANN_BECHER_Y);
                DefineBunch(BNC_HUTMANN_BECHERCHOOSE, CA_HUTBECHER_1, CA_HUTBECHER_2, CA_HUTBECHER_3, IMG_HUTFACE_IDLE);
                DefineImg(IMG_HUTKUGEL, "res/gfx/scr/taverne/huetchenspieler/huetchenspieler_ball.png", false, 0, (100 + REL_HUTKUGEL_Y));
                DefineLbl(LBL_HUTMANN_TEXT, txt[TXT_HUTMANN_OFFER], 0, (100 + POS_HUTMANN_TEXT_Y), FontFormat_Default);
                actor[LBL_HUTMANN_TEXT].x = (POS_SCREEN_TITLE_X - (actor[LBL_HUTMANN_TEXT].textWidth / 2));
                AddFilter(LBL_HUTMANN_TEXT, Filter_Shadow);
                DefineLbl(LBL_HUTMANN_GOLDBET, "", 0, POS_HUTMANN_GOLD_Y, FontFormat_GuildMoney);
                AddFilter(LBL_HUTMANN_GOLDBET, Filter_Shadow);
                DefineLbl(LBL_HUTMANN_MUSHBET, "", 0, (POS_HUTMANN_GOLD_Y + REL_GILDE_MUSH_Y), FontFormat_GuildMoney);
                AddFilter(LBL_HUTMANN_MUSHBET, Filter_Shadow);
                DefineCnt(CNT_HUTMANN_GOLDBET, 0, POS_HUTMANN_GOLD_Y);
                DefineCnt(CNT_HUTMANN_MUSHBET, 0, (POS_HUTMANN_GOLD_Y + REL_GILDE_MUSH_Y));
                DefineBtn(BTN_HUTMANN_GOLDBET, "", HutBtnHandler, btnClassPlus, 0, POS_HUTMANN_GOLD_Y);
                _local2 = actor[BTN_HUTMANN_GOLDBET];
                with (_local2) {
                    scaleX = 0.8;
                    scaleY = 0.8;
                };
                EnablePopup(BTN_HUTMANN_GOLDBET, txt[TXT_HUTMANN_GOLDBET]);
                DefineImg(IMG_HUTMANN_MUSHBET_DISABLED, "res/gfx/scr/gilde/plus_disabled.png", false, 0, (POS_HUTMANN_GOLD_Y + REL_GILDE_MUSH_Y));
                EnablePopup(IMG_HUTMANN_MUSHBET_DISABLED, txt[TXT_MUSHBET_BOUGHT]);
                DefineBtn(BTN_HUTMANN_MUSHBET, "", HutBtnHandler, btnClassPlus, 0, (POS_HUTMANN_GOLD_Y + REL_GILDE_MUSH_Y));
                _local2 = actor[BTN_HUTMANN_MUSHBET];
                with (_local2) {
                    scaleX = 0.8;
                    scaleY = 0.8;
                };
                _local2 = actor[IMG_HUTMANN_MUSHBET_DISABLED];
                with (_local2) {
                    scaleX = 0.8;
                    scaleY = 0.8;
                };
                EnablePopup(BTN_HUTMANN_MUSHBET, txt[TXT_HUTMANN_MUSHBET]);
                DefineLbl(LBL_HUTMANN_GOLDBET2, "1", 0, POS_HUTMANN_GOLD_Y, FontFormat_GuildMoney);
                AddFilter(LBL_HUTMANN_GOLDBET2, Filter_Shadow);
                EnablePopup(LBL_HUTMANN_GOLDBET2, txt[TXT_HUTMANN_GOLDBET]);
                DefineLbl(LBL_HUTMANN_MUSHBET2, "1", 0, (POS_HUTMANN_GOLD_Y + REL_GILDE_MUSH_Y), FontFormat_GuildMoney);
                AddFilter(LBL_HUTMANN_MUSHBET2, Filter_Shadow);
                EnablePopup(LBL_HUTMANN_MUSHBET2, txt[TXT_HUTMANN_MUSHBET]);
                DefineCnt(CNT_HUTMANN_GOLDBET2, 0, POS_HUTMANN_GOLD_Y);
                DefineCnt(CNT_HUTMANN_MUSHBET2, 0, (POS_HUTMANN_GOLD_Y + REL_GILDE_MUSH_Y));
                DefineBunch(BNC_HUTMANN_PLACEBET, IMG_HUTMANN_MUSHBET_DISABLED, BTN_HUTMANN_MUSHBET, LBL_HUTMANN_MUSHBET2, CNT_HUTMANN_MUSHBET2, BTN_HUTMANN_GOLDBET, LBL_HUTMANN_GOLDBET2, CNT_HUTMANN_GOLDBET2, IMG_HUTFACE_IDLE);
                DefineLbl(LBL_HUTMANN_INSTR, txt[TXT_HUTMANN_INSTR].split("#").join(((textDir)=="right") ? "" : String.fromCharCode(13)), POS_HUTMANN_INSTR_X, POS_HUTMANN_INSTR_Y, FontFormat_DefaultLeft);
                AddFilter(LBL_HUTMANN_INSTR, Filter_Shadow);
                DefineBunch(BNC_SCREEN_HUTMANN, IMG_HUTMANN_BG, BNC_IF_OVL, BTN_IF_EXIT, IMG_HUTFACE_HOVER, IMG_HUTFACE_WIN, IMG_HUTFACE_LOSE1, IMG_HUTFACE_LOSE2, IMG_HUTFACE_LOSE3, IMG_HUTFACE_IDLE);
                DefineBtn(BTN_HUTMANN_OK, txt[TXT_HUTMANN_BTN_START], HutBtnHandler, btnClassLogin, POS_HUTMANN_OK_X, POS_HUTMANN_OK_Y);
                DefineBtn(BTN_HUTMANN_BACK, txt[TXT_HUTMANN_BACK], InterfaceBtnHandler, btnClassBack, POS_HUTMANN_BACK_X, POS_HUTMANN_BACK_Y);
                HutBtnRepeatTimer = new Timer(1000);
                DestroyHutBtnTimer = false;
                _local2 = actor[BTN_HUTMANN_GOLDBET];
                with (_local2) {
                    addEventListener(MouseEvent.MOUSE_DOWN, HutBtnDownHandler);
                    addEventListener(MouseEvent.MOUSE_UP, HutBtnUpHandler);
                    addEventListener(MouseEvent.MOUSE_OUT, HutBtnUpHandler);
                };
                _local2 = actor[BTN_HUTMANN_MUSHBET];
                with (_local2) {
                    addEventListener(MouseEvent.MOUSE_DOWN, HutBtnDownHandler);
                    addEventListener(MouseEvent.MOUSE_UP, HutBtnUpHandler);
                    addEventListener(MouseEvent.MOUSE_OUT, HutBtnUpHandler);
                };
                DefineBunch(BNC_HUTMANN_WON, IMG_HUTFACE_WIN);
                DefineBunch(BNC_HUTMANN_LOST, IMG_HUTFACE_LOSE1);
                AddBunch(BNC_SCREEN_HUTMANN, IMG_HUTBECHER_1_IDLE);
                AddBunch(BNC_SCREEN_HUTMANN, IMG_HUTBECHER_2_IDLE);
                AddBunch(BNC_SCREEN_HUTMANN, IMG_HUTBECHER_3_IDLE);
                AddBunch(BNC_SCREEN_HUTMANN, LBL_HUTMANN_TEXT, LBL_HUTMANN_GOLDBET, LBL_HUTMANN_MUSHBET, LBL_HUTMANN_GOLDBET2, LBL_HUTMANN_MUSHBET2, LBL_HUTMANN_INSTR, BTN_HUTMANN_BACK);
                AddBunch(BNC_SCREEN_HUTMANN, CNT_HUTMANN_GOLDBET, CNT_HUTMANN_MUSHBET, CNT_HUTMANN_GOLDBET2, CNT_HUTMANN_MUSHBET2, BTN_HUTMANN_GOLDBET, IMG_HUTMANN_MUSHBET_DISABLED, BTN_HUTMANN_MUSHBET);
                HutFaceResetTimer = new Timer(2000, 1);
                HutFaceResetTimer.addEventListener(TimerEvent.TIMER, HutFaceReset);
                DefineImg(IMG_TAVERNE_BG, "res/gfx/scr/taverne/taverne.jpg", false, 280, 100);
                DefineImg(IMG_TAVERNE_BARKEEPER1, "res/gfx/scr/taverne/taverne_barkeeper1.jpg", false, (280 + REL_TAVERNE_BARKEEPER_X), (100 + REL_TAVERNE_BARKEEPER_Y));
                DefineImg(IMG_TAVERNE_BARKEEPER2, "res/gfx/scr/taverne/taverne_barkeeper2.jpg", false, (280 + REL_TAVERNE_BARKEEPER_X), (100 + REL_TAVERNE_BARKEEPER_Y));
                DefineImg(IMG_TAVERNE_BARKEEPER_HINT, "res/gfx/scr/taverne/exclamation.png", false, ((280 + REL_TAVERNE_BARKEEPER_X) + 50), ((100 + REL_TAVERNE_BARKEEPER_Y) - 215));
                DefineImg(IMG_TAVERNE_HUTMANN_BLINZELN, "res/gfx/scr/taverne/huetchenspieler_blink.jpg", false, (280 + REL_TAVERNE_HUTAUGEN_X), (100 + REL_TAVERNE_HUTAUGEN_Y));
                DefineImg(IMG_TAVERNE_HUTMANN_OVL, "res/gfx/scr/taverne/huetchenspieler_mouseover.jpg", false, (280 + REL_TAVERNE_HUTAUGEN_X), (100 + REL_TAVERNE_HUTAUGEN_Y));
                DefineClickArea(CA_TAVERNE_HUTMANN, IMG_TAVERNE_HUTMANN_OVL, ShowHutmann, (REL_TAVERNE_HUT_X + 280), (REL_TAVERNE_HUT_Y + 100), SIZE_TAVERNE_HUT_X, SIZE_TAVERNE_HUT_Y);
                DefineClickArea(CA_TAVERNE_QUESTOFFER, BNC_TAVERNE_QUESTOVL, ShowQuestOffer, (REL_TAVERNE_QUEST_X + 280), (REL_TAVERNE_QUEST_Y + 100), SIZE_TAVERNE_QUEST_X, SIZE_TAVERNE_QUEST_Y);
                DefineClickArea(CA_TAVERNE_TOILETTE, C_EMPTY, RequestToilet, (280 + 470), (100 + 195), 36, 30);
                DefineImg(IMG_TAVERNE_KERZEN, "res/gfx/scr/taverne/taverne_kerzen.jpg", false, (280 + REL_TAVERNE_KERZEN_X), (100 + REL_TAVERNE_KERZEN_Y));
                DefineImg(IMG_TAVERNE_QUESTOVL1, "res/gfx/scr/taverne/taverne_orc_mouseover.jpg", false, ((REL_TAVERNE_QUEST_X + 280) + REL_TAVERNE_QUESTOVL1_X), ((REL_TAVERNE_QUEST_Y + 100) + REL_TAVERNE_QUESTOVL1_Y));
                DefineImg(IMG_TAVERNE_QUESTOVL2, "res/gfx/scr/taverne/taverne_bauer_mouseover.jpg", false, ((REL_TAVERNE_QUEST_X + 280) + REL_TAVERNE_QUESTOVL2_X), ((REL_TAVERNE_QUEST_Y + 100) + REL_TAVERNE_QUESTOVL2_Y));
                DefineImg(IMG_TAVERNE_QUESTOVL3, "res/gfx/scr/taverne/taverne_zauberin_mouseover.jpg", false, ((REL_TAVERNE_QUEST_X + 280) + REL_TAVERNE_QUESTOVL3_X), ((REL_TAVERNE_QUEST_Y + 100) + REL_TAVERNE_QUESTOVL3_Y));
                DefineImg(IMG_TAVERNE_QUESTOVL4, "res/gfx/scr/taverne/taverne_questgeber_mouseover.jpg", false, ((REL_TAVERNE_QUEST_X + 280) + REL_TAVERNE_QUESTOVL4_X), ((REL_TAVERNE_QUEST_Y + 100) + REL_TAVERNE_QUESTOVL4_Y));
                DefineImg(IMG_TAVERNE_QUESTOVL5, "res/gfx/scr/taverne/taverne_tourist_mouseover.jpg", false, ((REL_TAVERNE_QUEST_X + 280) + REL_TAVERNE_QUESTOVL5_X), ((REL_TAVERNE_QUEST_Y + 100) + REL_TAVERNE_QUESTOVL5_Y));
                DefineImg(IMG_TAVERNE_BAROVL, "res/gfx/scr/taverne/barkeeper_mouseover.jpg", false, POS_TAVERNE_BAROVL_X, POS_TAVERNE_BAROVL_Y);
                DefineClickArea(CA_TAVERNE_BAR, IMG_TAVERNE_BAROVL, ShowBeerOffer, POS_TAVERNE_BAR_X, POS_TAVERNE_BAR_Y, SIZE_TAVERNE_BAR_X, SIZE_TAVERNE_BAR_Y);
                DefineImg(IMG_TIMEBAR_BG, "res/gfx/if/adventurebar.png", false, POS_TIMEBAR_X, POS_TIMEBAR_Y);
                DefineImg(IMG_TIMEBAR_FILL, "res/gfx/scr/taverne/ausdauer.jpg", false, (POS_TIMEBAR_X + 110), (POS_TIMEBAR_Y + 44));
                DefineCnt(CNT_TIMEBAR_FILL, 0, (POS_TIMEBAR_Y + 44));
                DefineLbl(LBL_TIMEBAR_TEXT, "", 0, POS_TIMEBAR_LABEL_Y, FontFormat_TimeBar);
                AddFilter(LBL_TIMEBAR_TEXT, Filter_Shadow);
                EnablePopup(IMG_TIMEBAR_BG, txt[TXT_TIMEBAR]);
                EnablePopup(IMG_TIMEBAR_FILL, txt[TXT_TIMEBAR]);
                EnablePopup(CNT_TIMEBAR_FILL, txt[TXT_TIMEBAR]);
                EnablePopup(LBL_TIMEBAR_TEXT, txt[TXT_TIMEBAR]);
                DefineBunch(BNC_SCREEN_TAVERNE, IMG_TAVERNE_BG, BNC_IF_OVL, IMG_TAVERNE_BARKEEPER1, IMG_TAVERNE_BARKEEPER2, IMG_TAVERNE_HUTMANN_BLINZELN, CA_TAVERNE_BAR);
                DefineBunch(BNC_TAVERNE_CAS, CA_TAVERNE_QUESTOFFER, CA_TAVERNE_HUTMANN, CA_TAVERNE_TOILETTE, CA_TAVERNE_BAR);
                DefineImg(IMG_BEERFEST, "res/gfx/scr/taverne/beerfest.png", false, 280, 100);
                actor[IMG_BEERFEST].mouseEnabled = false;
                DefineBunch(BNC_BEERFEST, IMG_BEERFEST, IMG_TIMEBAR_BG, IMG_TIMEBAR_FILL, CNT_TIMEBAR_FILL, LBL_TIMEBAR_TEXT, BNC_IF_OVL, BTN_IF_EXIT);
                i = 0;
                while (i < 4) {
                    DefineImg((IMG_TV + i), (("res/gfx/scr/taverne/tv_animation/tv" + String((i + 1))) + ".png"), false, (280 + 20), (100 + 20));
                    Hide((IMG_TV + i));
                    AddBunch(BNC_SCREEN_TAVERNE, (IMG_TV + i));
                    i = (i + 1);
                };
                DefineClickArea(CA_TV, C_EMPTY, RequestTV, (280 + 20), (100 + 20), 280, 160);
                Hide(CA_TV);
                AddBunch(BNC_SCREEN_TAVERNE, CA_TV);
                cursedDescr = "Fliegende";
                if (int((Math.random() * 100)) == 0){
                    cursedDescr = "Verfluchte";
                };
                EnablePopup(CA_TV, POPUP_BEGIN_LINE, txt[TXT_TV_HINT].split("|")[0].split("Fliegende").join(cursedDescr), POPUP_END_LINE, POPUP_BEGIN_LINE, FontFormat_EpicItemQuote, txt[TXT_TV_HINT].split("|")[1].split("#").join(String.fromCharCode(13)), POPUP_END_LINE);
                i = 0;
                while (i < 4) {
                    DefineImg((IMG_TAVERN_ADVENT + i), (("res/gfx/scr/taverne/advent_wreath_" + String((i + 1))) + ".jpg"), false, (280 + 337), 100);
                    actor[(IMG_TAVERN_ADVENT + i)].mouseEnabled = false;
                    i = (i + 1);
                };
                i = 0;
                while (i < 5) {
                    DefineImg((IMG_SPECIAL_ACTION + i), (("res/gfx/scr/taverne/event_ovl_" + String((i + 1))) + ".png"), false, 280, 100);
                    DefineBunch((BNC_SPECIAL_ACTION + i), (IMG_SPECIAL_ACTION + i), IMG_TIMEBAR_BG, IMG_TIMEBAR_FILL, CNT_TIMEBAR_FILL, LBL_TIMEBAR_TEXT, BNC_IF_OVL, BTN_IF_EXIT);
                    i = (i + 1);
                };
                i = 0;
                while (i < 5) {
                    DefineImg((IMG_TAVERNE_QUEST1 + i), (("res/gfx/scr/taverne/taverne_quest" + String((i + 1))) + ".jpg"), false, (280 + REL_TAVERNE_QUEST_X), (100 + REL_TAVERNE_QUEST_Y));
                    AddBunch(BNC_SCREEN_TAVERNE, (IMG_TAVERNE_QUEST1 + i));
                    i = (i + 1);
                };
                AddBunch(BNC_SCREEN_TAVERNE, IMG_TAVERNE_KERZEN, BTN_IF_EXIT, IMG_TIMEBAR_BG, IMG_TIMEBAR_FILL, CNT_TIMEBAR_FILL, LBL_TIMEBAR_TEXT);
                AddBunch(BNC_SCREEN_TAVERNE, CA_TAVERNE_QUESTOFFER, CA_TAVERNE_HUTMANN, CA_TAVERNE_TOILETTE);
                DefineFromClass(SHP_QO_BLACK_SQUARE, black_square_neutral, POS_QO_BLACK_SQUARE_X, POS_QO_BLACK_SQUARE_Y);
                _local2 = actor[SHP_QO_BLACK_SQUARE];
                with (_local2) {
                    width = SIZE_QO_BLACK_SQUARE_X;
                    height = SIZE_QO_BLACK_SQUARE_Y;
                    alpha = 0.6;
                };
                DefineLbl(LBL_QO_CHOOSE, txt[TXT_QO_CHOOSE], (POS_QO_BLACK_SQUARE_X + REL_QO_CHOOSE_X), (POS_QO_BLACK_SQUARE_Y + REL_QO_CHOOSE_Y), FontFormat_Default);
                i = 0;
                while (i < 3) {
                    DefineLbl((LBL_QO_CHOICE1 + i), "TEST", 0, 0, FontFormat_Default);
                    DefineLbl((LBL_QO_CHOICE1_HL + i), "TEST", 0, 0, FontFormat_Highlight);
                    MakePersistent((LBL_QO_CHOICE1 + i), (LBL_QO_CHOICE1_HL + i));
                    DefineCnt((CNT_QO_CHOICE1 + i), (POS_QO_BLACK_SQUARE_X + REL_QO_CHOOSE_X), ((POS_QO_BLACK_SQUARE_Y + REL_QO_CHOOSE_Y) + ((i + 1) * REL_QO_CHOICES_Y)));
                    _local2 = actor[(CNT_QO_CHOICE1 + i)];
                    with (_local2) {
                        addChild(actor[(LBL_QO_CHOICE1 + i)]);
                        addChild(actor[(LBL_QO_CHOICE1_HL + i)]);
                        addEventListener(MouseEvent.CLICK, ChooseQuest);
                        mouseChildren = false;
                        useHandCursor = true;
                        buttonMode = true;
                    };
                    i = (i + 1);
                };
                DefineBunch(BNC_QUESTOFFER);
                DefineLbl(LBL_QO_QUESTNAME, "QuestName", 0, (POS_QO_BLACK_SQUARE_Y + REL_QO_QUESTNAME_Y), FontFormat_Heading);
                DefineLbl(LBL_QO_QUESTTEXT, "QuestText", (POS_QO_BLACK_SQUARE_X + REL_QO_QUESTTEXT_X), (POS_QO_BLACK_SQUARE_Y + REL_QO_QUESTTEXT_Y), FontFormat_DefaultLeft);
                actor[LBL_QO_QUESTTEXT].width = SIZE_LBL_QO_TEXT_X;
                actor[LBL_QO_QUESTTEXT].wordWrap = true;
                actor[LBL_QO_QUESTTEXT].defaultTextFormat.align = "right";
                DefineLbl(LBL_QO_REWARD, txt[TXT_QO_REWARD], (POS_QO_BLACK_SQUARE_X + REL_QO_QUESTTEXT_X), (POS_QO_BLACK_SQUARE_Y + REL_QO_REWARD_Y), FontFormat_Default);
                DefineCnt(CNT_QO_REWARDGOLD, 0, ((POS_QO_BLACK_SQUARE_Y + REL_QO_REWARD_Y) + REL_QO_REWARDS_Y));
                DefineCnt(CNT_QO_REWARDSILVER, 0, ((POS_QO_BLACK_SQUARE_Y + REL_QO_REWARD_Y) + REL_QO_REWARDS_Y));
                DefineLbl(LBL_QO_REWARDGOLD, "", 0, ((POS_QO_BLACK_SQUARE_Y + REL_QO_REWARD_Y) + REL_QO_REWARDS_Y), FontFormat_Default);
                DefineLbl(LBL_QO_REWARDSILVER, "", 0, ((POS_QO_BLACK_SQUARE_Y + REL_QO_REWARD_Y) + REL_QO_REWARDS_Y), FontFormat_Default);
                DefineLbl(LBL_QO_REWARDEXP, "", (POS_QO_BLACK_SQUARE_X + REL_QO_QUESTTEXT_X), ((POS_QO_BLACK_SQUARE_Y + REL_QO_REWARD_Y) + (REL_QO_REWARDS_Y * 2)), FontFormat_Default);
                DefineLbl(LBL_QO_TIME, "", (POS_QO_BLACK_SQUARE_X + REL_QO_QUESTTEXT_X), ((POS_QO_BLACK_SQUARE_Y + REL_QO_REWARD_Y) + (REL_QO_REWARDS_Y * 3)), FontFormat_Default);
                DefineBtn(BTN_QO_START, txt[TXT_QO_START], RequestQuest, btnClassBasic, (POS_QO_BLACK_SQUARE_X + REL_QO_START_X), (POS_QO_BLACK_SQUARE_Y + REL_QO_RETURN_Y));
                DefineBtn(BTN_BO_BUY, txt[TXT_BO_BUY], BuyBeer, btnClassBasic, (POS_QO_BLACK_SQUARE_X + REL_QO_START_X), (POS_QO_BLACK_SQUARE_Y + REL_QO_RETURN_Y));
                DefineBtn(BTN_QO_RETURN, txt[TXT_QO_RETURN], ReturnQuest, btnClassBasic, (POS_QO_BLACK_SQUARE_X + REL_QO_START_X), (POS_QO_BLACK_SQUARE_Y + REL_QO_START_Y));
                DefineLbl(LBL_QO_QUESTSTODAY, "", 0, (POS_QO_BLACK_SQUARE_Y + REL_QO_QUESTSTODAY_Y), FontFormat_Default);
                DefineCnt(CNT_QUEST_SLOT, ((POS_QO_BLACK_SQUARE_X + REL_QO_SLOT_X) + 20), (POS_QO_BLACK_SQUARE_Y + REL_QO_SLOT_Y));
                AddBunch(BNC_QUESTOFFER, SHP_QO_BLACK_SQUARE, LBL_QO_CHOOSE, CNT_QO_CHOICE1, CNT_QO_CHOICE2, CNT_QO_CHOICE3, LBL_QO_QUESTNAME, LBL_QO_QUESTTEXT);
                AddBunch(BNC_QUESTOFFER, LBL_QO_REWARD, LBL_QO_REWARDGOLD, LBL_QO_REWARDSILVER, CNT_QO_REWARDGOLD, CNT_QO_REWARDSILVER, LBL_QO_REWARDEXP, LBL_QO_TIME, CNT_QUEST_SLOT, BTN_QO_START, BTN_QO_RETURN, LBL_QO_QUESTSTODAY);
                i = 0;
                while (i < 5) {
                    DefineImg((IMG_QO_PORTRAIT1 + i), (("res/gfx/scr/taverne/portrait_questgeber_" + String((i + 1))) + ".png"), false, (POS_QO_BLACK_SQUARE_X + REL_QO_PORTRAIT_X), (POS_QO_BLACK_SQUARE_Y + REL_QO_PORTRAIT_Y));
                    AddBunch(BNC_QUESTOFFER, (IMG_QO_PORTRAIT1 + i));
                    i = (i + 1);
                };
                DefineImg(IMG_BO_PORTRAIT_OK, "res/gfx/scr/taverne/portrait_barkeeper_2.png", false, (POS_QO_BLACK_SQUARE_X + REL_QO_PORTRAIT_X), (POS_QO_BLACK_SQUARE_Y + REL_QO_PORTRAIT_Y));
                DefineImg(IMG_BO_PORTRAIT_NO, "res/gfx/scr/taverne/portrait_barkeeper_3.png", false, (POS_QO_BLACK_SQUARE_X + REL_QO_PORTRAIT_X), (POS_QO_BLACK_SQUARE_Y + REL_QO_PORTRAIT_Y));
                DefineImg(IMG_BO_PORTRAIT_TH, "res/gfx/scr/taverne/portrait_barkeeper_1.png", false, (POS_QO_BLACK_SQUARE_X + REL_QO_PORTRAIT_X), (POS_QO_BLACK_SQUARE_Y + REL_QO_PORTRAIT_Y));
                DefineBunch(BNC_BEEROFFER, SHP_QO_BLACK_SQUARE, LBL_QO_QUESTNAME, LBL_QO_QUESTTEXT, LBL_QO_TIME, LBL_QO_REWARDEXP, BTN_BO_BUY, BTN_BO_BUY, BTN_QO_RETURN, IMG_BO_PORTRAIT_OK, IMG_BO_PORTRAIT_NO, IMG_BO_PORTRAIT_TH);
                TimeBarAniTimer = new Timer(20);
                TimeBarAniTimer.addEventListener(TimerEvent.TIMER, TimeBarAniEvent);
                TimeBarAniTimer.start();
                timeBarAni = 0;
                DefineBunch(BNC_SCREEN_TOILET);
                DefineSnd(SND_TOILET_FLUSHTRY, "res/sfx/toilet/flush_try.mp3", false);
                DefineSnd(SND_TOILET_FLUSH, "res/sfx/toilet/flush.mp3", false);
                DefineSnd(SND_TOILET_DROP, "res/sfx/toilet/drop.mp3", false);
                AddBunch(BNC_SCREEN_TOILET, SND_TOILET_FLUSHTRY, SND_TOILET_FLUSH, SND_TOILET_DROP);
                DefineImg(IMG_TOILET, "res/gfx/scr/taverne/toilet/toilet_bg.png", false, POS_SCR_SHOP_BG_X, 100);
                DefineImg((IMG_TOILET + 1), "res/gfx/scr/taverne/toilet/tank_content.png", false, (POS_SCR_SHOP_BG_X + 170), 190);
                DefineImg((IMG_TOILET + 2), "res/gfx/scr/taverne/toilet/toilet_ovl.png", false, POS_SCR_SHOP_BG_X, 100);
                i = 0;
                while (i < 3) {
                    AddBunch(BNC_SCREEN_TOILET, (IMG_TOILET + i));
                    i = (i + 1);
                };
                DefineImg(IMG_TOILET_IDLE, "res/gfx/scr/taverne/toilet/bowl_idle.png", false, POS_SCR_SHOP_BG_X, 100);
                DefineImg(IMG_TOILET_DROP, "res/gfx/scr/taverne/toilet/bowl_dropitem.png", false, POS_SCR_SHOP_BG_X, 100);
                AddBunch(BNC_SCREEN_TOILET, IMG_TOILET_IDLE, IMG_TOILET_DROP);
                DefineBunch(BNC_TOILET_OVERLAYS, IMG_TOILET_IDLE, IMG_TOILET_DROP);
                DefineLbl(LBL_TOILET_AURA, "0", (POS_SCR_SHOP_BG_X + 240), 430, FontFormat_ToiletAura);
                AddBunch(BNC_SCREEN_TOILET, LBL_TOILET_AURA);
                i = 0;
                while (i < 7) {
                    DefineImg((IMG_TOILET_FLUSH + i), (("res/gfx/scr/taverne/toilet/bowl_flush_" + String((i + 1))) + ".png"), false, POS_SCR_SHOP_BG_X, 100);
                    Hide((IMG_TOILET_FLUSH + i));
                    AddBunch(BNC_SCREEN_TOILET, (IMG_TOILET_FLUSH + i));
                    AddBunch(BNC_TOILET_OVERLAYS, (IMG_TOILET_FLUSH + i));
                    i = (i + 1);
                };
                i = 0;
                while (i < 3) {
                    DefineImg((IMG_TOILET_CHAIN + i), (("res/gfx/scr/taverne/toilet/chain_" + String((i + 1))) + ".png"), false, POS_SCR_SHOP_BG_X, 100);
                    Hide((IMG_TOILET_CHAIN + i));
                    AddBunch(BNC_SCREEN_TOILET, (IMG_TOILET_CHAIN + i));
                    AddBunch(BNC_TOILET_OVERLAYS, (IMG_TOILET_CHAIN + i));
                    i = (i + 1);
                };
                i = 0;
                while (i < 15) {
                    AddBunch(BNC_SCREEN_TOILET, (CNT_CHAR_SLOT_1 + i));
                    i = (i + 1);
                };
                DefineClickArea(CA_TOILET_TANK, C_EMPTY, undefined, (POS_SCR_SHOP_BG_X + 170), 190, 156, 120);
                DefineClickArea(CA_TOILET_CHAIN, C_EMPTY, ToiletHandler, (POS_SCR_SHOP_BG_X + 320), 210, 36, 206);
                DefineClickArea(CA_TOILET_BOWL, C_EMPTY, undefined, (POS_SCR_SHOP_BG_X + 120), 540, 260, 120);
                DefineClickArea(CA_TOILET_LID, C_EMPTY, undefined, (POS_SCR_SHOP_BG_X + 180), 380, 135, 155);
                EnablePopup(CA_TOILET_CHAIN, txt[(TXT_TOILET_HINT + 1)]);
                EnablePopup(CA_TOILET_BOWL, txt[(TXT_TOILET_HINT + 2)]);
                EnablePopup(CA_TOILET_LID, txt[(TXT_TOILET_HINT + 3)]);
                actor[CA_TOILET_TANK].useHandCursor = false;
                actor[CA_TOILET_BOWL].useHandCursor = false;
                AddBunch(BNC_SCREEN_TOILET, BNC_IF_OVL, CA_TOILET_LID, CA_TOILET_TANK, CA_TOILET_CHAIN, CA_TOILET_BOWL, BTN_IF_EXIT);
                toiletChainTimer = new Timer(50);
                toiletChainFrame = 0;
                toiletChainTimer.addEventListener(TimerEvent.TIMER, toiletChainAni);
                i = 0;
                while (i < 6) {
                    DefineImg((IMG_FIGHT_ONO + i), (("res/gfx/scr/fight/smash" + String((i + 1))) + ".png"), false, 0, 0);
                    i = (i + 1);
                };
                DefineImg(IMG_FIGHT_ARROW_SMASH, "res/gfx/scr/fight/arrowsmash.png", false, 0, 0);
                DefineCnt(CNT_FIGHT_ONO, 0, 0);
                DefineLbl(LBL_FIGHT_PLAYERGUILD, "", 0, (POS_OPPIMG_Y + 5), FontFormat_ScreenTitle);
                DefineLbl(LBL_FIGHT_OPPGUILD, "", 0, (POS_OPPIMG_Y + 5), FontFormat_ScreenTitle);
                AddFilter(LBL_FIGHT_PLAYERGUILD, Filter_Shadow);
                AddFilter(LBL_FIGHT_OPPGUILD, Filter_Shadow);
                DefineBunch(BNC_OPPIMG);
                DefineBunch(BNC_OPPIMG2);
                i = 0;
                while (i < 10) {
                    DefineImg((IMG_OPPIMG_BACKGROUND + i), "", false, POS_OPPIMG_X, POS_OPPIMG_Y);
                    AddBunch(BNC_OPPIMG, (IMG_OPPIMG_BACKGROUND + i));
                    DefineImg((IMG_OPPIMG_BACKGROUND2 + i), "", false, POS_OPPIMG_X, POS_OPPIMG_Y);
                    AddBunch(BNC_OPPIMG2, (IMG_OPPIMG_BACKGROUND2 + i));
                    i = (i + 1);
                };
                k = 0;
                k = 0;
                while (k < 500) {
                    i = k;
                    if (param_censored){
                        if ((((i >= 66)) && ((i <= 68)))){
                            i = 69;
                        };
                        if (i == 73){
                            i = 128;
                        };
                        if ((((i >= 117)) && ((i <= 118)))){
                            i = 69;
                        };
                    };
                    if (i >= 399){
                        monsterChecksum = MD5((String(i) + "ScriptKiddieLovesToPeek"));
                        DefineImg((IMG_OPPIMG_MONSTER + k), (("res/gfx/scr/fight/monster/monster" + monsterChecksum) + ".jpg"), false, POS_OPPIMG_X, POS_OPPIMG_Y);
                    } else {
                        DefineImg((IMG_OPPIMG_MONSTER + k), (("res/gfx/scr/fight/monster/monster" + String((i + 1))) + ".jpg"), false, POS_OPPIMG_X, POS_OPPIMG_Y);
                    };
                    k = (k + 1);
                };
                i = 0;
                while (i < 3) {
                    ii = -7;
                    while (ii < 100) {
                        iii = 0;
                        while (iii < 4) {
                            DefineSnd(GetWeaponSound((i + 1), (ii + 1), iii), GetWeaponSoundFile((i + 1), (ii + 1), iii));
                            iii = (iii + 1);
                        };
                        ii = (ii + 1);
                    };
                    i = (i + 1);
                };
                DefineLbl(LBL_NAMERANK_CHAR, "", (POS_FIGHT_CHARIMG_X + 310), POS_OPPIMG_Y, FontFormat_Default);
                AddFilter(LBL_NAMERANK_CHAR, Filter_Shadow);
                DefineLbl(LBL_NAMERANK_OPP, "", 0, POS_OPPIMG_Y, FontFormat_Default);
                AddFilter(LBL_NAMERANK_OPP, Filter_Shadow);
                DefineImg(IMG_LIFEBAR_CHAR, "res/gfx/scr/fight/lifebar.png", false, POS_FIGHT_CHARIMG_X, ((POS_OPPIMG_Y + 300) + REL_LIFEBAR_Y));
                DefineImg(IMG_LIFEBAR_FILL_CHAR, "res/gfx/scr/fight/lifebar_red.png", false, (POS_FIGHT_CHARIMG_X + 10), (((POS_OPPIMG_Y + 300) + 8) + REL_LIFEBAR_Y));
                DefineCnt(CNT_LIFEBAR_OPP, POS_OPPIMG_X, ((POS_OPPIMG_Y + 300) + REL_LIFEBAR_Y));
                DefineCnt(CNT_LIFEBAR_FILL_OPP, (POS_OPPIMG_X + 10), (((POS_OPPIMG_Y + 300) + 8) + REL_LIFEBAR_Y));
                DefineLbl(LBL_LIFEBAR_CHAR, "", 0, (((POS_OPPIMG_Y + 300) + 13) + REL_LIFEBAR_Y), FontFormat_LifeBar);
                DefineLbl(LBL_LIFEBAR_OPP, "", 0, (((POS_OPPIMG_Y + 300) + 13) + REL_LIFEBAR_Y), FontFormat_LifeBar);
                DefineImg(IMG_FIGHT_CHAR_BORDER, "res/gfx/scr/fight/character_border.png", false, (POS_FIGHT_CHARIMG_X - 10), (POS_OPPIMG_Y - 10));
                DefineCnt(CNT_FIGHT_OPP_BORDER, (POS_OPPIMG_X - 10), (POS_OPPIMG_Y - 10));
                DefineCnt(CNT_BULLET_CHAR, 0, 0);
                SetCnt(CNT_BULLET_CHAR, ITM_OFFS);
                DefineCnt(CNT_BULLET_OPP, 0, 0);
                SetCnt(CNT_BULLET_OPP, ITM_OFFS);
                DefineCnt(CNT_WEAPON_CHAR, 0, 0);
                SetCnt(CNT_WEAPON_CHAR, ITM_OFFS);
                DefineCnt(CNT_SHIELD_CHAR, 0, 0);
                SetCnt(CNT_SHIELD_CHAR, ITM_OFFS);
                DefineCnt(CNT_WEAPON_OPP, 0, 0);
                SetCnt(CNT_WEAPON_OPP, ITM_OFFS);
                DefineCnt(CNT_SHIELD_OPP, 0, 0);
                SetCnt(CNT_SHIELD_OPP, ITM_OFFS);
                DefineImg(IMG_WEAPON_FIST, "res/gfx/itm/kampf_faust.png", false, 0, 0);
                DefineImg(IMG_WEAPON_STONEFIST, "res/gfx/itm/kampf_steinfaust.png", false, 0, 0);
                DefineImg(IMG_WEAPON_BONE, "res/gfx/itm/kampf_knochen.png", false, 0, 0);
                DefineImg(IMG_WEAPON_STICK, "res/gfx/itm/kampf_stock.png", false, 0, 0);
                DefineImg(IMG_WEAPON_CLAW, "res/gfx/itm/kampf_kralle1.png", false, 0, 0);
                DefineImg(IMG_WEAPON_CLAW2, "res/gfx/itm/kampf_kralle2.png", false, 0, 0);
                DefineImg(IMG_WEAPON_CLAW3, "res/gfx/itm/kampf_kralle3.png", false, 0, 0);
                DefineImg(IMG_WEAPON_CLAW4, "res/gfx/itm/kampf_kralle4.png", false, 0, 0);
                DefineImg(IMG_WEAPON_SWOOSH, "res/gfx/itm/kampf_swoosh1.png", false, 0, 0);
                DefineImg(IMG_WEAPON_SWOOSH2, "res/gfx/itm/kampf_swoosh2.png", false, 0, 0);
                DefineImg(IMG_WEAPON_SWOOSH3, "res/gfx/itm/kampf_swoosh3.png", false, 0, 0);
                DefineImg(IMG_WEAPON_SPLAT, "res/gfx/itm/kampf_splat1.png", false, 0, 0);
                DefineImg(IMG_WEAPON_SPLAT2, "res/gfx/itm/kampf_splat2.png", false, 0, 0);
                DefineImg(IMG_WEAPON_SPLAT3, "res/gfx/itm/kampf_splat3.png", false, 0, 0);
                DefineImg(IMG_WEAPON_FIRE, "res/gfx/itm/kampf_feuer1.png", false, 0, 0);
                DefineImg(IMG_WEAPON_FIRE2, "res/gfx/itm/kampf_feuer2.png", false, 0, 0);
                DefineImg(IMG_WEAPON_FIRE3, "res/gfx/itm/kampf_feuer3.png", false, 0, 0);
                DefineLbl(LBL_DAMAGE_INDICATOR, "", 0, 0, FontFormat_Damage);
                AddFilter(LBL_DAMAGE_INDICATOR, Filter_Shadow);
                DefineBtn(BTN_FIGHT_SKIP, txt[TXT_SKIP_FIGHT], SkipFight, btnClassBasic, 0, 0);
                DefineBtn(BTN_FIGHT_OK, txt[TXT_OK], InterfaceBtnHandler, btnClassBasic, 0, 0);
                _local2 = actor[BTN_FIGHT_OK];
                with (_local2) {
                    y = POS_FIGHT_BTN_Y;
                    x = (POS_SCREEN_TITLE_X - int((width / 2)));
                };
                _local2 = actor[BTN_FIGHT_SKIP];
                with (_local2) {
                    y = POS_FIGHT_BTN_Y;
                    x = (POS_SCREEN_TITLE_X - int((width / 2)));
                };
                DefineBtn(BTN_BATTLE_SKIP, txt[TXT_SKIP_FIGHT], SkipFight, btnClassBasic, 0, 0);
                DefineBtn(BTN_BATTLE_SKIPONE, txt[TXT_GUILD_BATTLE_SKIP], SkipFight, btnClassBasic, 0, 0);
                _local2 = actor[BTN_BATTLE_SKIPONE];
                with (_local2) {
                    y = POS_FIGHT_BTN_Y;
                    x = ((POS_SCREEN_TITLE_X - width) - 5);
                };
                _local2 = actor[BTN_BATTLE_SKIP];
                with (_local2) {
                    y = POS_FIGHT_BTN_Y;
                    x = (POS_SCREEN_TITLE_X + 5);
                };
                DefineLbl(LBL_FIGHT_SUMMARY, "", 0, POS_FIGHT_SUMMARY_Y, FontFormat_Default);
                AddFilter(LBL_FIGHT_SUMMARY, Filter_Shadow);
                DefineImg(IMG_GUILD_BATTLE_BG, "res/gfx/scr/fight/schlachtfeld.jpg", false, 280, 100);
                DefineImg(IMG_GUILD_RAID_BG, "res/gfx/scr/fight/raid.jpg", false, 280, 100);
                DefineBunch(BNC_SCREEN_FIGHT, BLACK_SQUARE, LBL_NAMERANK_CHAR, IMG_LIFEBAR_CHAR, IMG_LIFEBAR_FILL_CHAR, LBL_LIFEBAR_CHAR, LBL_NAMERANK_OPP, BTN_IF_EXIT);
                AddBunch(BNC_SCREEN_FIGHT, CNT_LIFEBAR_OPP, CNT_LIFEBAR_FILL_OPP, LBL_LIFEBAR_OPP, BNC_IF_OVL, BTN_FIGHT_SKIP, IMG_FIGHT_CHAR_BORDER, CNT_FIGHT_OPP_BORDER);
                DefineImg(IMG_FIGHT_BOX1, "res/gfx/scr/fight/box1.png", false, (POS_FIGHT_CHAR_PROP_COLUMN_1_X + REL_FIGHT_BOX1_X), (POS_FIGHT_CHAR_PROP_Y + REL_FIGHT_BOX1_Y));
                DefineImg(IMG_FIGHT_BOX2, "res/gfx/scr/fight/box2.png", false, (POS_SCREEN_TITLE_X - 254), (POS_FIGHT_CHAR_PROP_Y + REL_FIGHT_BOX1_Y));
                DefineCnt(CNT_FIGHT_BOX3, (POS_FIGHT_CHAR_PROP_COLUMN_3_X + REL_FIGHT_BOX3_X), (POS_FIGHT_CHAR_PROP_Y + REL_FIGHT_BOX1_Y));
                DefineCnt(CNT_FIGHT_SLOT, (POS_SCREEN_TITLE_X - 45), POS_FIGHT_SLOT_Y);
                DefineCnt(CNT_FIGHT_REWARDGOLD, POS_FIGHT_REWARDGOLD_X, POS_FIGHT_REWARDGOLD_Y);
                DefineCnt(CNT_FIGHT_REWARDSILVER, POS_FIGHT_REWARDGOLD_X, POS_FIGHT_REWARDGOLD_Y);
                DefineCnt(CNT_FIGHT_REWARDMUSH, POS_FIGHT_REWARDGOLD_X, POS_FIGHT_REWARDMUSH_Y);
                DefineLbl(LBL_FIGHT_REWARDGOLD, "", 0, POS_FIGHT_REWARDGOLD_Y, FontFormat_Default);
                AddFilter(LBL_FIGHT_REWARDGOLD, Filter_Shadow);
                DefineLbl(LBL_FIGHT_REWARDSILVER, "", 0, POS_FIGHT_REWARDGOLD_Y, FontFormat_Default);
                AddFilter(LBL_FIGHT_REWARDSILVER, Filter_Shadow);
                DefineLbl(LBL_FIGHT_REWARDMUSH, "", 0, POS_FIGHT_REWARDMUSH_Y, FontFormat_Default);
                AddFilter(LBL_FIGHT_REWARDMUSH, Filter_Shadow);
                DefineLbl(LBL_FIGHT_REWARDEXP, "", POS_FIGHT_REWARDEXP_X, POS_FIGHT_REWARDGOLD_Y, FontFormat_Default);
                AddFilter(LBL_FIGHT_REWARDEXP, Filter_Shadow);
                AddBunch(BNC_SCREEN_FIGHT, IMG_FIGHT_BOX1, IMG_FIGHT_BOX2, CNT_FIGHT_BOX3);
                DefineBunch(BNC_FIGHT_REWARDS, CNT_FIGHT_SLOT, CNT_FIGHT_REWARDGOLD, LBL_FIGHT_REWARDGOLD, CNT_FIGHT_REWARDSILVER, LBL_FIGHT_REWARDSILVER, CNT_FIGHT_REWARDMUSH, LBL_FIGHT_REWARDMUSH, LBL_FIGHT_REWARDEXP);
                DefineLbl(LBL_HERO_OF_THE_DAY_TITLE, ((txt[TXT_HERO_OF_THE_DAY_TITLE]) ? txt[TXT_HERO_OF_THE_DAY_TITLE] : ""), 0, 120, FontFormat_Heading);
                actor[LBL_HERO_OF_THE_DAY_TITLE].x = (POS_SCREEN_TITLE_X - (actor[LBL_HERO_OF_THE_DAY_TITLE].width / 2));
                DefineLbl(LBL_HERO_OF_THE_DAY, "", 0, 160, FontFormat_Default);
                actor[LBL_HERO_OF_THE_DAY].defaultTextFormat.align = "center";
                AddFilter(LBL_HERO_OF_THE_DAY_TITLE, Filter_Shadow);
                AddFilter(LBL_HERO_OF_THE_DAY, Filter_Shadow);
                DefineBunch(BNC_HERO_OF_THE_DAY, LBL_HERO_OF_THE_DAY_TITLE, LBL_HERO_OF_THE_DAY);
                i = 0;
                while (i < 5) {
                    DefineLbl((LBL_FIGHT_CHAR_STAERKE_CAPTION + i), txt[(TXT_CHAR_STAERKE + i)], POS_FIGHT_CHAR_PROP_COLUMN_1_X, (POS_FIGHT_CHAR_PROP_Y + (i * REL_FIGHT_CHAR_PROP_Y)), FontFormat_Default);
                    DefineLbl((LBL_FIGHT_CHAR_STAERKE + i), "", POS_FIGHT_CHAR_PROP_COLUMN_2_X, (POS_FIGHT_CHAR_PROP_Y + (i * REL_FIGHT_CHAR_PROP_Y)), FontFormat_Attrib);
                    DefineLbl((LBL_FIGHT_OPP_STAERKE_CAPTION + i), txt[(TXT_CHAR_STAERKE + i)], POS_FIGHT_CHAR_PROP_COLUMN_3_X, (POS_FIGHT_CHAR_PROP_Y + (i * REL_FIGHT_CHAR_PROP_Y)), FontFormat_Default);
                    DefineLbl((LBL_FIGHT_OPP_STAERKE + i), "", POS_FIGHT_CHAR_PROP_COLUMN_4_X, (POS_FIGHT_CHAR_PROP_Y + (i * REL_FIGHT_CHAR_PROP_Y)), FontFormat_Attrib);
                    AddFilter((LBL_FIGHT_CHAR_STAERKE_CAPTION + i), Filter_Shadow);
                    AddFilter((LBL_FIGHT_CHAR_STAERKE + i), Filter_Shadow);
                    AddFilter((LBL_FIGHT_OPP_STAERKE_CAPTION + i), Filter_Shadow);
                    AddFilter((LBL_FIGHT_OPP_STAERKE + i), Filter_Shadow);
                    AddBunch(BNC_SCREEN_FIGHT, (LBL_FIGHT_CHAR_STAERKE + i), (LBL_FIGHT_CHAR_STAERKE_CAPTION + i), (LBL_FIGHT_OPP_STAERKE + i), (LBL_FIGHT_OPP_STAERKE_CAPTION + i));
                    i = (i + 1);
                };
                DefineImg(IMG_FIGHT_MUSH, "res/gfx/scr/fight/bigmush.png", false, 0, 0);
                DefineSnd(SND_CATAPULT_LAUNCH, "res/sfx/catapult_launch.mp3");
                DefineSnd(SND_CATAPULT_HIT, "res/sfx/catapult_hit.mp3");
                i = 0;
                while (i < 3) {
                    DefineImg((IMG_FIGHT_COPYCAT + i), (("res/gfx/npc/copycat_" + String((i + 1))) + ".jpg"), false, POS_FIGHT_CHARIMG_X, POS_OPPIMG_Y);
                    i = (i + 1);
                };
                DefineImg(IMG_BG_DEMO, "res/gfx/scr/demo/demo.png", false, 0, POS_DEMO_Y);
                DefineBtn(BTN_DEMO_LOGOFF, txt[TXT_OK], RequestLogout, btnClassBasic, POS_DEMO_BTN_X, POS_DEMO_BTN_Y);
                DefineBunch(BNC_SCREEN_DEMO, IMG_BG_DEMO, BNC_IF_OVL, BTN_DEMO_LOGOFF, BLACK_SQUARE);
                DefineFromClass(SHP_OPTION_BLACK, black_square_neutral, POS_OPTION_X, POS_OPTION_Y);
                _local2 = actor[SHP_OPTION_BLACK];
                with (_local2) {
                    width = SIZE_OPTION_X;
                    height = SIZE_OPTION_Y;
                    alpha = 0.65;
                };
                DefineLbl(LBL_OPTION_TITLE, txt[TXT_OPTION_TITLE], 0, (POS_OPTION_Y + REL_OPTION_Y0), FontFormat_ScreenTitle);
                AddFilter(LBL_OPTION_TITLE, Filter_Shadow);
                DefineLbl(LBL_OPTION_IMAGE, txt[TXT_CHARIMG], (POS_OPTION_X + REL_OPTION_IMAGE_X), (POS_OPTION_Y + REL_OPTION_Y1), FontFormat_Heading);
                AddFilter(LBL_OPTION_IMAGE, Filter_Shadow);
                DefineImg(IMG_OPTION_IMAGEBORDER, "res/gfx/scr/option/character_border_small.png", false, (POS_OPTION_X + REL_OPTION_IMAGE_X), (POS_OPTION_Y + REL_OPTION_Y2));
                DefineBtn(BTN_OPTION_CHANGEIMG, txt[TXT_CHANGEIMG], OptionBtnHandler, btnClassBasic, (POS_OPTION_X + REL_OPTION_IMAGE_X), ((POS_OPTION_Y + REL_OPTION_Y5) - 2));
                DefineLbl(LBL_OPTION_CHANGE, txt[TXT_CHANGE], (POS_OPTION_X + REL_OPTION_CHANGE_X), (POS_OPTION_Y + REL_OPTION_Y1), FontFormat_Heading);
                AddFilter(LBL_OPTION_CHANGE, Filter_Shadow);
                DefineBtn(BTN_OPTION_CHANGE_NAME, txt[TXT_CHANGE_NAME], OptionBtnHandler, btnClassBasic, (POS_OPTION_X + REL_OPTION_CHANGE_X), (POS_OPTION_Y + REL_OPTION_Y2));
                DefineBtn(BTN_OPTION_RESEND, txt[TXT_RESEND_BTN1], OptionBtnHandler, btnClassBasic, (POS_OPTION_X + REL_OPTION_CHANGE_X), (POS_OPTION_Y + REL_OPTION_Y4));
                DefineBtn(BTN_OPTION_CHANGE_EMAIL, txt[TXT_CHANGE_EMAIL], OptionBtnHandler, btnClassBasic, (POS_OPTION_X + REL_OPTION_CHANGE_X), (POS_OPTION_Y + REL_OPTION_Y2));
                DefineBtn(BTN_OPTION_CHANGE_PASSWORD, txt[TXT_CHANGE_PASSWORD], OptionBtnHandler, btnClassBasic, (POS_OPTION_X + REL_OPTION_CHANGE_X), (POS_OPTION_Y + REL_OPTION_Y3));
                DefineBtn(BTN_OPTION_DELETE, txt[TXT_DELETE_ACCOUNT], OptionBtnHandler, btnClassBasic, (POS_OPTION_X + REL_OPTION_CHANGE_X), (POS_OPTION_Y + REL_OPTION_Y5));
                DefineBtn(BTN_OPTION_LUXURY, txt[TXT_LUXURY_BUTTON], OptionBtnHandler, btnClassBasic, (POS_OPTION_X + REL_OPTION_CHANGE_X), ((POS_OPTION_Y + REL_OPTION_Y5) - 2));
                DefineImg(IMG_LUXURY_SELLER, "res/gfx/scr/option/seller.jpg", false, 1100, 190);
                DefineFromClass(CB_LM_UNCHECKED, cb_unchecked, POS_LM_X, POS_LM_Y);
                actor[CB_LM_UNCHECKED].addEventListener(MouseEvent.CLICK, CheckLM);
                DefineFromClass(CB_LM_CHECKED, cb_checked, POS_LM_X, POS_LM_Y);
                actor[CB_LM_CHECKED].addEventListener(MouseEvent.CLICK, UncheckLM);
                DefineLbl(LBL_LM, txt[TXT_LM], (POS_LM_X + REL_LM_X), (POS_LM_Y + REL_LM_Y), FontFormat_Default);
                AddFilter(LBL_LM, Filter_Shadow);
                DefineFromClass(CB_CS_UNCHECKED, cb_unchecked, POS_LM_X, (POS_LM_Y - 50));
                actor[CB_CS_UNCHECKED].addEventListener(MouseEvent.CLICK, CheckCS);
                DefineFromClass(CB_CS_CHECKED, cb_checked, POS_LM_X, (POS_LM_Y - 50));
                actor[CB_CS_CHECKED].addEventListener(MouseEvent.CLICK, UncheckCS);
                DefineLbl(LBL_CS, ((txt[TXT_CS]) ? txt[TXT_CS] : "Chat Sound"), (POS_LM_X + REL_LM_X), ((POS_LM_Y + REL_LM_Y) - 50), FontFormat_Default);
                AddFilter(LBL_CS, Filter_Shadow);
                DefineFromClass(CB_COMPARE_UNCHECKED, cb_unchecked, (POS_LM_X + 250), (POS_LM_Y - 50));
                actor[CB_COMPARE_UNCHECKED].addEventListener(MouseEvent.CLICK, CheckCompare);
                DefineFromClass(CB_COMPARE_CHECKED, cb_checked, (POS_LM_X + 250), (POS_LM_Y - 50));
                actor[CB_COMPARE_CHECKED].addEventListener(MouseEvent.CLICK, UncheckCompare);
                DefineLbl(LBL_COMPARE, txt[TXT_COMPARE], ((POS_LM_X + REL_LM_X) + 250), ((POS_LM_Y + REL_LM_Y) - 50), FontFormat_Default);
                AddFilter(LBL_COMPARE, Filter_Shadow);
                DefineFromClass(CB_TV_UNCHECKED, cb_unchecked, (POS_LM_X + 250), POS_LM_Y);
                actor[CB_TV_UNCHECKED].addEventListener(MouseEvent.CLICK, CheckTV);
                DefineFromClass(CB_TV_CHECKED, cb_checked, (POS_LM_X + 250), POS_LM_Y);
                actor[CB_TV_CHECKED].addEventListener(MouseEvent.CLICK, UncheckTV);
                DefineLbl(LBL_TV_CHECKBOX, txt[TXT_TV_DISABLE], ((POS_LM_X + REL_LM_X) + 250), (POS_LM_Y + REL_LM_Y), FontFormat_Default);
                AddFilter(LBL_TV_CHECKBOX, Filter_Shadow);
                DefineLbl(LBL_OPTION_DOCHANGE, "", (POS_OPTION_X + REL_OPTION_DOCHANGE_X), (POS_OPTION_Y + REL_OPTION_Y1), FontFormat_Heading);
                AddFilter(LBL_OPTION_DOCHANGE, Filter_Shadow);
                DefineLbl(LBL_OPTION_FIELD1, "", (POS_OPTION_X + REL_OPTION_DOCHANGE_LABEL_X), ((POS_OPTION_Y + REL_OPTION_Y2) + REL_OPTION_TEXT_Y), FontFormat_DefaultLeft);
                _local2 = actor[LBL_OPTION_FIELD1];
                with (_local2) {
                    wordWrap = true;
                    width = 300;
                };
                DefineLbl(LBL_OPTION_FIELD2, "", (POS_OPTION_X + REL_OPTION_DOCHANGE_LABEL_X), ((POS_OPTION_Y + REL_OPTION_Y3) + REL_OPTION_TEXT_Y), FontFormat_Default);
                DefineLbl(LBL_OPTION_FIELD3, "", (POS_OPTION_X + REL_OPTION_DOCHANGE_LABEL_X), ((POS_OPTION_Y + REL_OPTION_Y4) + REL_OPTION_TEXT_Y), FontFormat_Default);
                AddFilter(LBL_OPTION_FIELD1, Filter_Shadow);
                AddFilter(LBL_OPTION_FIELD2, Filter_Shadow);
                AddFilter(LBL_OPTION_FIELD3, Filter_Shadow);
                DefineFromClass(INP_OPTION_FIELD1, text_input1, (POS_OPTION_X + REL_OPTION_DOCHANGE_FIELD_X), (POS_OPTION_Y + REL_OPTION_Y2), 2, "name");
                DefineFromClass(INP_OPTION_FIELD2, text_input2, (POS_OPTION_X + REL_OPTION_DOCHANGE_FIELD_X), (POS_OPTION_Y + REL_OPTION_Y3), 2, "name");
                DefineFromClass(INP_OPTION_FIELD3, text_input1, (POS_OPTION_X + REL_OPTION_DOCHANGE_FIELD_X), (POS_OPTION_Y + REL_OPTION_Y4), 2, "name");
                actor[INP_OPTION_FIELD1].addEventListener(KeyboardEvent.KEY_DOWN, OptionBtnHandler);
                actor[INP_OPTION_FIELD2].addEventListener(KeyboardEvent.KEY_DOWN, OptionBtnHandler);
                actor[INP_OPTION_FIELD3].addEventListener(KeyboardEvent.KEY_DOWN, OptionBtnHandler);
                actor[INP_OPTION_FIELD2].addEventListener(KeyboardEvent.KEY_UP, gradePassword);
                actor[INP_OPTION_FIELD3].addEventListener(KeyboardEvent.KEY_UP, gradePassword);
                DefineCnt(CNT_CHANGE_PASSWORD_SMILEY_SAD, ((POS_OPTION_X + REL_OPTION_DOCHANGE_BTN_X) - 50), (POS_OPTION_Y + REL_OPTION_Y5));
                DefineCnt(CNT_CHANGE_PASSWORD_SMILEY_NEUTRAL, ((POS_OPTION_X + REL_OPTION_DOCHANGE_BTN_X) - 50), (POS_OPTION_Y + REL_OPTION_Y5));
                DefineCnt(CNT_CHANGE_PASSWORD_SMILEY_HAPPY, ((POS_OPTION_X + REL_OPTION_DOCHANGE_BTN_X) - 50), (POS_OPTION_Y + REL_OPTION_Y5));
                EnablePopup(CNT_CHANGE_PASSWORD_SMILEY_SAD, txt[TXT_PASSWORD_SMILEY_SAD].split("#").join(String.fromCharCode(13)));
                EnablePopup(CNT_CHANGE_PASSWORD_SMILEY_NEUTRAL, txt[TXT_PASSWORD_SMILEY_NEUTRAL].split("#").join(String.fromCharCode(13)));
                EnablePopup(CNT_CHANGE_PASSWORD_SMILEY_HAPPY, txt[TXT_PASSWORD_SMILEY_HAPPY].split("#").join(String.fromCharCode(13)));
                DefineBtn(BTN_OPTION_DOCHANGE, txt[TXT_DOCHANGE], OptionBtnHandler, btnClassBasic, (POS_OPTION_X + REL_OPTION_DOCHANGE_BTN_X), (POS_OPTION_Y + REL_OPTION_Y5));
                DefineLbl(LBL_OPTION_VOLUME, "", 0, (POS_OPTION_Y + REL_OPTION_Y6), FontFormat_Default);
                AddFilter(LBL_OPTION_VOLUME, Filter_Shadow);
                DefineSlider(SLDR_OPTION_VOLUME, 11, ((POS_OPTION_X + REL_OPTION_VOLUME_X) + 250), (POS_OPTION_Y + REL_OPTION_Y7), VolumeChange);
                DefineSnd(SND_TEST, "res/sfx/click.mp3");
                DefineBunch(BNC_OPTION_DOCHANGE, LBL_OPTION_DOCHANGE, LBL_OPTION_FIELD1, LBL_OPTION_FIELD2, LBL_OPTION_FIELD3, INP_OPTION_FIELD1, INP_OPTION_FIELD2, INP_OPTION_FIELD3, BTN_OPTION_DOCHANGE);
                DefineBunch(BNC_OPTION_DORESEND, LBL_OPTION_DOCHANGE, LBL_OPTION_FIELD1, BTN_OPTION_DOCHANGE);
                DefineLbl(LBL_OPTION_VER, ("v1.70" + (((GetFileVersion() == 0)) ? "" : ("." + String(GetFileVersion())))), 0, ((POS_OPTION_Y + REL_OPTION_VER_Y) + 110), FontFormat_Default);
                actor[LBL_OPTION_VER].x = (((POS_OPTION_X + REL_OPTION_VER_X) + 60) - actor[LBL_OPTION_VER].textWidth);
                AddFilter(LBL_OPTION_VER, Filter_Shadow);
                DefineBunch(BNC_SCREEN_OPTION, SHP_OPTION_BLACK, IMG_OPTION_IMAGEBORDER, LBL_OPTION_TITLE, LBL_OPTION_IMAGE, BTN_OPTION_CHANGEIMG, LBL_OPTION_CHANGE, BTN_OPTION_RESEND);
                AddBunch(BNC_SCREEN_OPTION, BTN_OPTION_CHANGE_EMAIL, BTN_OPTION_CHANGE_PASSWORD, BTN_OPTION_DELETE, LBL_OPTION_VOLUME, SLDR_OPTION_VOLUME, BTN_IF_EXIT, SND_TEST, LBL_OPTION_VER, CB_LM_UNCHECKED, LBL_LM);
                AddBunch(BNC_SCREEN_OPTION, CNT_CHANGE_PASSWORD_SMILEY_SAD, CNT_CHANGE_PASSWORD_SMILEY_NEUTRAL, CNT_CHANGE_PASSWORD_SMILEY_HAPPY, CB_CS_UNCHECKED, LBL_CS, CB_COMPARE_UNCHECKED, LBL_COMPARE, CB_TV_UNCHECKED, LBL_TV_CHECKBOX);
                Filter_Glow = [new GradientGlowFilter(0, 45, [16777026, 16777026], [0, 0.4], [0, 127], 16, 16, 1, 1, "outer")];
                i = 0;
                while (i < param_languages.length) {
                    DefineImg((IMG_OPTION_FLAG + i), (("res/gfx/if/flags/flag_" + param_languages[i]) + ".png"), false, ((POS_LM_X + (35 * i)) - ((lang_code)==param_languages[i]) ? 8 : 0), (POS_LM_Y + ((lang_code)==param_languages[i]) ? 53 : 60), ((lang_code)==param_languages[i]) ? 0.9 : 0.6, ((lang_code)==param_languages[i]) ? 0.9 : 0.6);
                    if (lang_code == param_languages[i]){
                        AddFilter((IMG_OPTION_FLAG + i), Filter_Glow);
                    };
                    actor[(IMG_OPTION_FLAG + i)].addEventListener(MouseEvent.CLICK, ChooseLanguageIcon);
                    AddBunch(BNC_SCREEN_OPTION, (IMG_OPTION_FLAG + i));
                    EnablePopup((IMG_OPTION_FLAG + i), param_language_names[i]);
                    i = (i + 1);
                };
                optionMenuSelect = 0;
                DefineLbl(LBL_HLMAINQUESTS_TITLE, txt[TXT_HL_MAINQUESTS_TITLE], 0, POS_MQS_TITLE_Y, FontFormat_ScreenTitle);
                AddFilter(LBL_HLMAINQUESTS_TITLE, Filter_Shadow);
                DefineImg(IMG_HLMQS_DISABLED, "res/gfx/scr/dungeons/unknown.png", false, 0, 0);
                DefineImg(IMG_HLMQS_COMPLETED, "res/gfx/scr/dungeons/done.png", false, 0, 0);
                DefineImg(IMG_HLMQS_TOWER_DISABLED, "res/gfx/scr/dungeons/unknown.png", false, 0, 0);
                DefineImg(IMG_HLMQS_TOWER_COMPLETED, "res/gfx/scr/dungeons/done_tower.png", false, 0, 0);
                DefineBunch(BNC_SCREEN_HLMAINQUESTS, BNC_IF_OVL, BTN_IF_EXIT, LBL_HLMAINQUESTS_TITLE, SND_MAINQUESTS_UNLOCK);
                i = 0;
                while (i < 5) {
                    if (i == 4){
                        DefineCnt((CNT_HLMQS_BUTTON + 4), ((POS_MQS_BUTTON_X + REL_MQS_BUTTON_X) + 0), ((POS_MQS_BUTTON_Y + REL_MQS_BUTTON_Y) - 170));
                        DefineImg((IMG_HLMQS_BUTTON + 4), "res/gfx/scr/dungeons/button_tower.jpg", false, ((POS_MQS_BUTTON_X + REL_MQS_BUTTON_X) + 0), ((POS_MQS_BUTTON_Y + REL_MQS_BUTTON_Y) - 170));
                        DefineCnt((CNT_HLMQS_DISABLED + 4), ((POS_MQS_BUTTON_X + REL_MQS_BUTTON_X) + 0), ((POS_MQS_BUTTON_Y + REL_MQS_BUTTON_Y) - 170));
                        DefineCnt((CNT_HLMQS_COMPLETED + 4), ((POS_MQS_BUTTON_X + REL_MQS_BUTTON_X) + 0), ((POS_MQS_BUTTON_Y + REL_MQS_BUTTON_Y) - 170));
                    } else {
                        DefineCnt((CNT_HLMQS_BUTTON + i), (POS_MQS_BUTTON_X + ((REL_MQS_BUTTON_X * 2) * int((i % 2)))), ((POS_MQS_BUTTON_Y + 100) + (200 * int((i / 2)))));
                        DefineImg((IMG_HLMQS_BUTTON + i), (("res/gfx/scr/dungeons/button" + String((60 + i))) + ".jpg"), false, (POS_MQS_BUTTON_X + ((REL_MQS_BUTTON_X * 2) * int((i % 2)))), ((POS_MQS_BUTTON_Y + 100) + (200 * int((i / 2)))));
                        DefineCnt((CNT_HLMQS_DISABLED + i), (POS_MQS_BUTTON_X + ((REL_MQS_BUTTON_X * 2) * int((i % 2)))), ((POS_MQS_BUTTON_Y + 100) + (200 * int((i / 2)))));
                        DefineCnt((CNT_HLMQS_COMPLETED + i), (POS_MQS_BUTTON_X + ((REL_MQS_BUTTON_X * 2) * int((i % 2)))), ((POS_MQS_BUTTON_Y + 100) + (200 * int((i / 2)))));
                    };
                    AddBunch(BNC_SCREEN_HLMAINQUESTS, (CNT_HLMQS_BUTTON + i), (CNT_HLMQS_DISABLED + i), (CNT_HLMQS_COMPLETED + i));
                    EnablePopup((CNT_HLMQS_DISABLED + i), POPUP_BEGIN_LINE, txt[(TXT_HL_MAINQUESTS_NAME + i)].split("|")[0], POPUP_END_LINE, POPUP_BEGIN_LINE, FontFormat_EpicItemQuote, txt[(TXT_HL_MAINQUESTS_NAME + i)].split("|")[1], FontFormat_Popup, POPUP_END_LINE, POPUP_BEGIN_LINE, txt[(TXT_DUNGEON_INFO + 1)], POPUP_END_LINE);
                    EnablePopup((CNT_HLMQS_COMPLETED + i), POPUP_BEGIN_LINE, txt[(TXT_HL_MAINQUESTS_NAME + i)].split("|")[0], POPUP_END_LINE, POPUP_BEGIN_LINE, FontFormat_EpicItemQuote, txt[(TXT_HL_MAINQUESTS_NAME + i)].split("|")[1], FontFormat_Popup, POPUP_END_LINE, POPUP_BEGIN_LINE, txt[(TXT_DUNGEON_INFO + 2)], POPUP_END_LINE);
                    i = (i + 1);
                };
                DefineLbl(LBL_MAINQUESTS_TITLE, txt[(TXT_DUNGEON_INFO + 4)], 0, POS_MQS_TITLE_Y, FontFormat_ScreenTitle);
                AddFilter(LBL_MAINQUESTS_TITLE, Filter_Shadow);
                DefineSnd(SND_MAINQUESTS_UNLOCK, "res/sfx/unlock.mp3", false);
                DefineImg(IMG_MQS_DISABLED, "res/gfx/scr/dungeons/unknown.png", false, 0, 0);
                DefineImg(IMG_MQS_COMPLETED, "res/gfx/scr/dungeons/done.png", false, 0, 0);
                DefineBunch(BNC_SCREEN_MAINQUESTS, BNC_IF_OVL, BTN_IF_EXIT, LBL_MAINQUESTS_TITLE, SND_MAINQUESTS_UNLOCK);
                i = 0;
                while (i < 9) {
                    DefineCnt((CNT_MQS_BUTTON + i), (POS_MQS_BUTTON_X + (REL_MQS_BUTTON_X * int((i % 3)))), (POS_MQS_BUTTON_Y + (REL_MQS_BUTTON_Y * int((i / 3)))));
                    DefineImg((IMG_MQS_BUTTON + i), (("res/gfx/scr/dungeons/button" + String((51 + i))) + ".jpg"), false, (POS_MQS_BUTTON_X + (REL_MQS_BUTTON_X * int((i % 3)))), (POS_MQS_BUTTON_Y + (REL_MQS_BUTTON_Y * int((i / 3)))));
                    DefineCnt((CNT_MQS_DISABLED + i), (POS_MQS_BUTTON_X + (REL_MQS_BUTTON_X * int((i % 3)))), (POS_MQS_BUTTON_Y + (REL_MQS_BUTTON_Y * int((i / 3)))));
                    DefineCnt((CNT_MQS_COMPLETED + i), (POS_MQS_BUTTON_X + (REL_MQS_BUTTON_X * int((i % 3)))), (POS_MQS_BUTTON_Y + (REL_MQS_BUTTON_Y * int((i / 3)))));
                    AddBunch(BNC_SCREEN_MAINQUESTS, (CNT_MQS_BUTTON + i), (CNT_MQS_DISABLED + i), (CNT_MQS_COMPLETED + i));
                    EnablePopup((CNT_MQS_DISABLED + i), POPUP_BEGIN_LINE, txt[(TXT_DUNGEON_NAME + i)].split("|")[0], POPUP_END_LINE, POPUP_BEGIN_LINE, FontFormat_EpicItemQuote, txt[(TXT_DUNGEON_NAME + i)].split("|")[1], FontFormat_Popup, POPUP_END_LINE, POPUP_BEGIN_LINE, txt[(TXT_DUNGEON_INFO + 1)], POPUP_END_LINE);
                    EnablePopup((CNT_MQS_COMPLETED + i), POPUP_BEGIN_LINE, txt[(TXT_DUNGEON_NAME + i)].split("|")[0], POPUP_END_LINE, POPUP_BEGIN_LINE, FontFormat_EpicItemQuote, txt[(TXT_DUNGEON_NAME + i)].split("|")[1], FontFormat_Popup, POPUP_END_LINE, POPUP_BEGIN_LINE, txt[(TXT_DUNGEON_INFO + 2)], POPUP_END_LINE);
                    i = (i + 1);
                };
                DefineImg(IMG_DUNGEON_CONGRATS, "res/gfx/scr/dungeons/congrats.jpg", false, 280, 100);
                DefineLbl(LBL_DUNGEON_CONGRATS, ((txt[TXT_CONGRATS]) ? txt[TXT_CONGRATS].split("#").join(String.fromCharCode(13)) : ""), 1000, 600, FontFormat_Default);
                actor[LBL_DUNGEON_CONGRATS].wordWrap = true;
                actor[LBL_DUNGEON_CONGRATS].defaultTextFormat.align = "right";
                AddFilter(LBL_DUNGEON_CONGRATS, Filter_Shadow);
                DefineBunch(BNC_DUNGEON_CONGRATS, IMG_DUNGEON_CONGRATS, LBL_DUNGEON_CONGRATS, BNC_IF_OVL, BTN_IF_EXIT);
                DefineFromClass(SHP_MAINQUEST, black_square, POS_MQ_SQUARE_X, POS_MQ_SQUARE_Y);
                _local2 = actor[SHP_MAINQUEST];
                with (_local2) {
                    width = SIZE_MQ_SQUARE_X;
                    height = SIZE_MQ_SQUARE_Y;
                    alpha = 0.6;
                };
                DefineLbl(LBL_MAINQUEST_TITLE, "", 0, (POS_MQ_SQUARE_Y + REL_MQ_TITLE_Y), FontFormat_ScreenTitle);
                AddFilter(LBL_MAINQUEST_TITLE, Filter_Shadow);
                DefineLbl(LBL_MAINQUEST_TEXT, "", (POS_MQ_SQUARE_X + REL_MQ_TEXT_X), (POS_MQ_SQUARE_Y + REL_MQ_TEXT_Y), FontFormat_DefaultLeft);
                _local2 = actor[LBL_MAINQUEST_TEXT];
                with (_local2) {
                    width = (SIZE_MQ_SQUARE_X - (REL_MQ_TEXT_X * 2));
                    wordWrap = true;
                };
                AddFilter(LBL_MAINQUEST_TEXT, Filter_Shadow);
                DefineBtn(BTN_MAINQUEST_START, "", RequestMainQuest, btnClassBasic, 0, ((POS_MQ_SQUARE_Y + SIZE_MQ_SQUARE_Y) - REL_MQ_BUTTON_Y));
                _local2 = actor[BTN_MAINQUEST_START];
                with (_local2) {
                    x = (((POS_MQ_SQUARE_X + SIZE_MQ_SQUARE_X) - REL_MQ_TEXT_X) - width);
                };
                DefineLbl(LBL_MAINQUEST_MUSHHINT, txt[TXT_MQ_MUSHHINT], (POS_MQ_SQUARE_X + REL_MQ_TEXT_X), ((POS_MQ_SQUARE_Y + SIZE_MQ_SQUARE_Y) - REL_MQ_MUSHHINT_Y), FontFormat_DefaultLeft);
                _local2 = actor[LBL_MAINQUEST_MUSHHINT];
                with (_local2) {
                    width = ((SIZE_MQ_SQUARE_X - (REL_MQ_TEXT_X * 3)) - actor[BTN_MAINQUEST_START].width);
                    wordWrap = true;
                };
                AddFilter(LBL_MAINQUEST_MUSHHINT, Filter_Shadow);
                DefineCnt(CNT_MAINQUEST_ENEMY, POS_MAINQUEST_ENEMY_X, POS_MAINQUEST_ENEMY_Y);
                DefineCnt(CNT_MAINQUEST_ENEMY_BORDER, (POS_MAINQUEST_ENEMY_X - REL_MQ_BORDER_X), (POS_MAINQUEST_ENEMY_Y - REL_MQ_BORDER_Y));
                DefineBunch(BNC_SCREEN_MAINQUEST, SHP_MAINQUEST, BNC_IF_OVL, LBL_MAINQUEST_TITLE, LBL_MAINQUEST_TEXT, CNT_MAINQUEST_ENEMY_BORDER, CNT_MAINQUEST_ENEMY, LBL_MAINQUEST_MUSHHINT, BTN_MAINQUEST_START, BTN_IF_EXIT);
                DefineLbl(LBL_DISCONNECTED, txt[TXT_DISCONNECTED], ((POS_DISCONNECTED_X - (SIZE_DISCONNECTED_X / 2)) + 10), (POS_DISCONNECTED_Y + 10), FontFormat_Error);
                _local2 = actor[LBL_DISCONNECTED];
                with (_local2) {
                    wordWrap = true;
                    width = (SIZE_DISCONNECTED_X - 20);
                };
                AddFilter(LBL_DISCONNECTED, Filter_Shadow);
                DefineFromClass(SHP_DISCONNECTED, black_square_neutral, (POS_DISCONNECTED_X - (SIZE_DISCONNECTED_X / 2)), POS_DISCONNECTED_Y);
                _local2 = actor[SHP_DISCONNECTED];
                with (_local2) {
                    width = SIZE_DISCONNECTED_X;
                    height = (actor[LBL_DISCONNECTED].textHeight + 20);
                    alpha = 0.8;
                };
                DefineBunch(BNC_SCREEN_DISCONNECTED, BLACK_SQUARE, SHP_DISCONNECTED, LBL_DISCONNECTED);
                DefineLbl(LBL_EMAIL_NAG, txt[TXT_EMAIL_NAG], POS_EMAIL_NAG_X, POS_EMAIL_NAG_Y, FontFormat_DefaultLeft);
                actor[LBL_EMAIL_NAG].width = SIZE_EMAIL_NAG_TEXT_X;
                actor[LBL_EMAIL_NAG].wordWrap = true;
                AddFilter(LBL_EMAIL_NAG, Filter_Shadow);
                DefineLbl(LBL_EMAIL_RESEND, txt[TXT_EMAIL_RESEND], 0, 0, FontFormat_Default);
                AddFilter(LBL_EMAIL_RESEND, Filter_Shadow);
                MakePersistent(LBL_EMAIL_RESEND);
                DefineCnt(CNT_EMAIL_RESEND, POS_EMAIL_NAG_X, (POS_EMAIL_NAG_Y + REL_EMAIL_RESEND_Y));
                _local2 = actor[CNT_EMAIL_RESEND];
                with (_local2) {
                    addChild(actor[LBL_EMAIL_RESEND]);
                    textLinkMakeClickable(getChildAt(0).parent);
                    mouseChildren = false;
                    mouseEnabled = true;
                    buttonMode = true;
                    useHandCursor = true;
                    addEventListener(MouseEvent.CLICK, ResendConfirmationEmail);
                };
                DefineBtn(BTN_EMAIL_NAG, txt[TXT_OK], ShowCityScreen, btnClassBasic, ((POS_IF_WIN_X + REL_IF_WIN_WELCOME_X) + REL_IF_WIN_BTN_X), (POS_IF_WIN_Y + REL_EMAIL_NAG_BTN_Y));
                DefineBunch(BNC_SCREEN_EMAIL_NAG, IMG_IF_WINDOW, LBL_WINDOW_TITLE, LBL_EMAIL_NAG, BTN_EMAIL_NAG, BTN_IF_EXIT);
                DefineCnt(POPUP_INFO);
                _local2 = actor[POPUP_INFO];
                with (_local2) {
                };
                Add(POPUP_INFO);
                Add(BNC_IF_MAIN);
                Add(BNC_IF_BUTTONS);
                if (paramObj["login"]){
                    ShowLoginScreen(undefined, true);
                } else {
                    ShowBuildCharacterScreen();
                };
            };
            this.LoadConfigurationFile();
            this.WhenLoaded(DoLoadLanguageFile);
        }
        public function ShowEmailNagScreen(valMode:int=-1){
            var doShowEmailNagScreen:* = null;
            var valMode:int = valMode;
            doShowEmailNagScreen = function (){
                RemoveAll();
                actor[LBL_EMAIL_RESEND].htmlText = txt[TXT_EMAIL_RESEND];
                Arabize(LBL_EMAIL_RESEND);
                var _local2 = actor[LBL_WINDOW_TITLE];
                with (_local2) {
                    text = txt[(((valMode == 1)) ? TXT_VALIDATE_OK_TITLE : (((valMode == 2)) ? TXT_VALIDATE_ERR_TITLE : (((valMode == 3)) ? TXT_VALIDATE_UNN_TITLE : TXT_EMAIL_NAG_TITLE)))];
                    x = ((POS_IF_WIN_X + REL_IF_WIN_WELCOME_X) - int((textWidth / 2)));
                };
                _local2 = actor[LBL_EMAIL_NAG];
                with (_local2) {
                    htmlText = txt[(((valMode == 1)) ? TXT_VALIDATE_OK : (((valMode == 2)) ? TXT_VALIDATE_ERR : (((valMode == 3)) ? TXT_VALIDATE_UNN : TXT_EMAIL_NAG)))];
                };
                Arabize(LBL_EMAIL_NAG);
                Add(BNC_SCREEN_EMAIL_NAG);
                if (valMode == -1){
                    Add(CNT_EMAIL_RESEND);
                };
            };
            this.Load(this.BNC_SCREEN_EMAIL_NAG);
            this.WhenLoaded(doShowEmailNagScreen);
        }
        public function GetWeaponSoundFile(wpnClass:int, wpnPic:int, useCase:int):String{
            var useCaseStr:String;
            useCaseStr = "";
            switch (useCase){
                case 0:
                    useCaseStr = "s";
                    break;
                case 1:
                    useCaseStr = "n";
                    break;
                case 2:
                    useCaseStr = "b";
                    break;
                case 3:
                    useCaseStr = "k";
                    break;
            };
            return ((((((("res/sfx/wpn/wpn" + String((((wpnPic < 1)) ? 1 : wpnClass))) + "-") + String((this.GetWeaponLevel(wpnClass, wpnPic) + 1))) + "-") + useCaseStr) + ".mp3"));
        }
        public function GetWeaponSound(wpnClass:int, wpnPic:int, useCase:int):int{
            var sndActor:int;
            sndActor = this.SND_WEAPON;
            sndActor = (sndActor + (((wpnClass - 1) * 4) * 14));
            sndActor = (sndActor + (this.GetWeaponLevel(wpnClass, wpnPic) * 4));
            sndActor = (sndActor + useCase);
            return (sndActor);
        }
        public function GetWeaponLevel(wpnClass:int, wpnPic:int):int{
            switch (wpnClass){
                case 1:
                    switch (wpnPic){
                        case -7:
                            return (7);
                        case -3:
                            return (6);
                        case -2:
                        case -1:
                        case 54:
                            return (4);
                        case 0:
                            return (5);
                        case -5:
                        case -4:
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                            return (0);
                        case 5:
                        case 6:
                        case 8:
                        case 11:
                        case 15:
                        case 17:
                        case 19:
                        case 21:
                        case 22:
                        case 24:
                        case 26:
                        case 27:
                        case 29:
                        case 30:
                        case 50:
                        case 51:
                        case 60:
                            return (1);
                        case -6:
                        case 7:
                        case 10:
                        case 13:
                        case 16:
                        case 20:
                        case 23:
                        case 25:
                        case 28:
                        case 52:
                            return (2);
                        case 9:
                        case 12:
                        case 14:
                        case 18:
                            return (3);
                        case 53:
                            return (8);
                        case 55:
                            return (9);
                        case 56:
                            return (10);
                        case 57:
                            return (11);
                        case 58:
                            return (12);
                        case 59:
                            return (13);
                    };
                    break;
                case 2:
                    switch (wpnPic){
                        case -5:
                        case -4:
                        case -3:
                        case -2:
                        case -1:
                            return (4);
                        case 0:
                            return (5);
                        case 1:
                        case 60:
                            return (0);
                        case 2:
                        case 9:
                            return (1);
                        case 6:
                        case 7:
                        case 10:
                        case 52:
                        case 54:
                            return (2);
                        case 3:
                        case 4:
                        case 5:
                        case 8:
                        case 50:
                        case 51:
                            return (3);
                        case 53:
                            return (4);
                        case 55:
                            return (9);
                        case 56:
                            return (10);
                        case 57:
                            return (11);
                        case 58:
                            return (12);
                        case 59:
                            return (13);
                    };
                    break;
                case 3:
                    switch (wpnPic){
                        case -5:
                        case -4:
                        case -3:
                        case -2:
                        case -1:
                            return (4);
                        case 0:
                            return (5);
                        case 1:
                        case 2:
                            return (0);
                        case 3:
                        case 5:
                        case 6:
                        case 7:
                        case 50:
                        case 52:
                        case 53:
                        case 54:
                            return (1);
                        case 4:
                        case 8:
                        case 9:
                        case 10:
                        case 59:
                            return (2);
                        case 51:
                            return (3);
                        case 55:
                            return (9);
                        case 56:
                            return (10);
                        case 57:
                            return (11);
                        case 58:
                            return (12);
                        case 60:
                            return (13);
                    };
                    break;
            };
            return (0);
        }
        public function ShowDisconnectScreen(){
            var ReconnectTimer:* = null;
            var TryReconnect:* = null;
            TryReconnect = function (evt:TimerEvent){
                ReconnectTimer.delay = (param_reconnect * intervalMultiplierReconnect);
                if (OnStage(LBL_DISCONNECTED)){
                    RequestLogin();
                } else {
                    ReconnectTimer.removeEventListener(TimerEvent.TIMER, TryReconnect);
                };
            };
            if (this.OnStage(this.LBL_DISCONNECTED)){
                return;
            };
            this.RemoveAll();
            this.Remove(this.CNT_IF_LOGOUT);
            this.Add(this.BNC_SCREEN_DISCONNECTED);
            this.sessionID = "";
            ReconnectTimer = new Timer(this.param_reconnect);
            ReconnectTimer.addEventListener(TimerEvent.TIMER, TryReconnect);
            ReconnectTimer.start();
        }
        public function RemoveIllegalChars(inpStr:String):String{
            var LegalChars:String;
            var i:int;
            var j:int;
            var thisChar:String;
            var outStr:String;
            var pass:Boolean;
            if (this.txt[this.TXT_LEGALCHARS] == ""){
                return (inpStr);
            };
            LegalChars = this.txt[this.TXT_LEGALCHARS];
            thisChar = "";
            outStr = "";
            pass = false;
            i = 0;
            while (i < inpStr.length) {
                thisChar = inpStr.substr(i, 1);
                pass = false;
                j = 0;
                while (j < LegalChars.length) {
                    if ((((thisChar.charCodeAt() == 13)) || ((thisChar.charCodeAt() == 10)))){
                        pass = true;
                        break;
                    };
                    if (thisChar == LegalChars.substr(j, 1)){
                        pass = true;
                        break;
                    };
                    j++;
                };
                if (pass){
                    outStr = (outStr + thisChar);
                };
                i++;
            };
            return (outStr);
        }
        public function SemiStrip(inpStr:String):String{
            var i:int;
            var outStr:String;
            outStr = "";
            i = 0;
            while (i < inpStr.length) {
                if (inpStr.charAt(i) == String.fromCharCode(13)){
                    outStr = (outStr + "#");
                } else {
                    if (inpStr.charAt(i) == ";"){
                        outStr = (outStr + ",");
                    } else {
                        if (inpStr.charAt(i) == "§"){
                            outStr = (outStr + "$");
                        } else {
                            outStr = (outStr + inpStr.charAt(i));
                        };
                    };
                };
                i++;
            };
            return (outStr);
        }
        public function resolveBreaks(inpStr:String):String{
            var i:int;
            var outStr:String;
            outStr = "";
            i = 0;
            while (i < inpStr.length) {
                if (inpStr.charAt(i) == "#"){
                    outStr = (outStr + String.fromCharCode(13));
                } else {
                    outStr = (outStr + inpStr.charAt(i));
                };
                i++;
            };
            return (outStr);
        }
        public function PostBtnHandler(evt:MouseEvent=undefined, actorID:int=0){
            var par:* = null;
            var GuildMsg:* = false;
            var thisRecipient:* = null;
            var recipients:* = null;
            var evt:* = evt;
            var actorID:int = actorID;
            this.Remove(this.LBL_ERROR);
            GuildMsg = false;
            if (evt){
                actorID = this.GetActorID(evt.target);
            };
            thisRecipient = "";
            recipients = new Array();
            switch (actorID){
                case this.BTN_POST_SEND:
                    this.lastMessageTarget = "";
                    if (!this.OnStage(this.INP_POST_ADDRESS)){
                        GuildMsg = true;
                    } else {
                        this.lastMessageTarget = this.actor[this.INP_POST_ADDRESS].getChildAt(1).text;
                    };
                    if (this.actor[this.INP_POST_TEXT].getChildAt(1).text.indexOf(this.actor[this.INP_LOGIN_PASSWORD].getChildAt(1).text) != -1){
                        this.ErrorMessage(((this.txt[this.TXT_ERROR_COMPROMISED_ACCOUNT]) ? this.txt[this.TXT_ERROR_COMPROMISED_ACCOUNT] : "You should never give your password away."));
                    } else {
                        if (this.actor[this.INP_POST_ADDRESS].getChildAt(1).text == this.txt[this.TXT_EMPFAENGER]){
                            this.ErrorMessage(this.txt[this.TXT_ERROR_RECIPIENT_NOT_FOUND]);
                        } else {
                            thisRecipient = this.actor[this.INP_POST_ADDRESS].getChildAt(1).text;
                            if (thisRecipient.indexOf(",") != -1){
                                recipients = thisRecipient.split(",");
                            } else {
                                recipients = [thisRecipient];
                            };
                            while (recipients.length > 0) {
                                thisRecipient = recipients.shift();
                                while (thisRecipient.substr(0, 1) == " ") {
                                    thisRecipient = thisRecipient.substr(1);
                                };
                                while (thisRecipient.substr((thisRecipient.length - 1), 1) == " ") {
                                    thisRecipient = thisRecipient.substr(0, (thisRecipient.length - 1));
                                };
                                this.SendAction(((GuildMsg) ? this.ACT_POST_SEND_GUILD : this.ACT_POST_SEND), this.RemoveIllegalChars(this.SemiStrip(thisRecipient)), this.RemoveIllegalChars(this.SemiStrip(this.actor[this.INP_POST_SUBJECT].getChildAt(1).text.split("/").join(""))), this.RemoveIllegalChars(this.SemiStrip(this.actor[this.INP_POST_TEXT].getChildAt(1).text)));
                            };
                        };
                    };
                    break;
                case this.BTN_POST_UP:
                    if (this.PostScroll > 1){
                        this.oldSel = -1;
                        this.PostScroll = (this.PostScroll - 15);
                        if (this.PostScroll < 1){
                            this.PostScroll = 1;
                        };
                        this.SendAction(this.ACT_SCREEN_POST, this.PostScroll);
                    };
                    break;
                case this.BTN_POST_DOWN:
                    if (this.PostScrollDown){
                        this.PostScroll = (this.PostScroll + 15);
                        this.PostScrollDown = false;
                        if (this.PostScroll > 86){
                            this.PostScroll = 86;
                        };
                        if (this.PostScroll < 1){
                            this.PostScroll = 1;
                        };
                        this.SendAction(this.ACT_SCREEN_POST, this.PostScroll);
                    };
                    break;
                case this.BTN_POST_READ:
                    if (this.textDir == "right"){
                        this.MakeRightTextArea(this.INP_POST_ADDRESS, 1);
                        this.MakeRightTextArea(this.INP_POST_SUBJECT, 1);
                        this.MakeRightTextArea(this.INP_POST_TEXT, 1);
                    };
                    if (this.PostSel > 0){
                        this.SendAction(this.ACT_POST_READ, ((this.PostSel + this.PostScroll) - 1));
                    };
                    break;
                case this.BTN_POST_READ_NEXT:
                    this.PostSel++;
                    if (this.PostSel > 15){
                        this.PostScroll = (this.PostScroll + 1);
                        this.PostSel = 15;
                    };
                    this.SendAction(this.ACT_POST_READ, ((this.PostSel + this.PostScroll) - 1));
                    break;
                case this.BTN_POST_READ_PREV:
                    this.PostSel--;
                    if (this.PostSel < 1){
                        this.PostScroll = (this.PostScroll - 1);
                        this.PostSel = 1;
                    };
                    this.SendAction(this.ACT_POST_READ, ((this.PostSel + this.PostScroll) - 1));
                    break;
                case this.BTN_POST_DELETE:
                case this.BTN_POST_DELETEREAD:
                    if (this.PostSel > 0){
                        this.SendAction(this.ACT_POST_DELETE, ((this.PostSel + this.PostScroll) - 1));
                        if (int(this.Savegame[this.SG_MSG_COUNT]) > 0){
                            this.Savegame[this.SG_MSG_COUNT] = String((int(this.Savegame[this.SG_MSG_COUNT]) - 1));
                        };
                    };
                    break;
                case this.BTN_POST_FLUSH:
                    var _local4 = this.actor[this.LBL_WINDOW_TITLE];
                    with (_local4) {
                        text = txt[TXT_POST_FLUSH_TEXT];
                        x = ((POS_IF_WIN_X + REL_IF_WIN_WELCOME_X) - int((textWidth / 2)));
                    };
                    this.Add(this.BNC_POST_FLUSHMSG);
                    break;
                case this.BTN_POST_FLUSH_CANCEL:
                    this.Remove(this.BNC_POST_FLUSHMSG);
                    this.Add(this.BTN_IF_EXIT);
                    break;
                case this.BTN_POST_FLUSH_OK:
                    this.Remove(this.BNC_POST_FLUSHMSG);
                    this.SendAction(this.ACT_POST_DELETE, -1);
                    break;
                case this.BTN_POST_PROFILE:
                    if (this.ReplyAddress != ""){
                        this.selName = this.ReplyAddress;
                        this.SendAction(this.ACT_REQUEST_CHAR, this.ReplyAddress);
                    };
                    break;
                case this.BTN_POST_WRITE:
                    this.actor[this.INP_POST_ADDRESS].getChildAt(1).type = TextFieldType.INPUT;
                    this.actor[this.INP_POST_SUBJECT].getChildAt(1).type = TextFieldType.INPUT;
                    this.actor[this.INP_POST_TEXT].getChildAt(1).type = TextFieldType.INPUT;
                    this.Remove(this.BNC_POST_LIST);
                    this.Add(this.BNC_POST_WRITE);
                    if (this.Gilde != ""){
                        if (this.textDir == "right"){
                            this.actor[this.CNT_POST_GUILD].x = (this.POS_POST_INP_X + 5);
                        } else {
                            this.actor[this.CNT_POST_GUILD].x = (((this.POS_POST_INP_X + this.actor[this.INP_POST_ADDRESS].width) - this.actor[this.CNT_POST_GUILD].width) - 5);
                        };
                        this.Show(this.CNT_POST_GUILD);
                    } else {
                        this.Hide(this.CNT_POST_GUILD);
                    };
                    this.actor[this.INP_POST_ADDRESS].getChildAt(1).text = this.txt[this.TXT_EMPFAENGER];
                    this.actor[this.INP_POST_SUBJECT].getChildAt(1).text = this.txt[this.TXT_BETREFF];
                    this.actor[this.INP_POST_TEXT].getChildAt(1).text = this.txt[this.TXT_NACHRICHT];
                    if (this.textDir == "right"){
                        this.MakeRightTextArea(this.INP_POST_ADDRESS, 1);
                        this.MakeRightTextArea(this.INP_POST_SUBJECT, 1);
                        this.MakeRightTextArea(this.INP_POST_TEXT, 1);
                    };
                    break;
                case this.BTN_POST_CANCEL:
                case this.BTN_POST_RETURN:
                    if (this.PostReturnToPlayer != ""){
                        this.SendAction(this.ACT_REQUEST_CHAR, this.PostReturnToPlayer);
                    } else {
                        this.Remove(this.BNC_POST_WRITE);
                        this.Remove(this.BNC_POST_READ);
                        this.Remove(this.BTN_POST_ACCEPT);
                        this.Remove(this.BTN_POST_REPLY);
                        this.Add(this.BNC_POST_LIST);
                    };
                    break;
                case this.BTN_POST_ACCEPT:
                    if (this.InviteGildenID > 0){
                        this.SendAction(this.ACT_GUILD_JOIN, this.actor[this.INP_NAME].getChildAt(1).text, this.InviteGildenID, this.MD5(this.actor[this.INP_LOGIN_PASSWORD].getChildAt(1).text));
                    };
                    break;
                case this.BTN_POST_REPLY:
                    if (this.ReplyAddress != ""){
                        this.actor[this.INP_POST_ADDRESS].getChildAt(1).type = TextFieldType.INPUT;
                        this.actor[this.INP_POST_SUBJECT].getChildAt(1).type = TextFieldType.INPUT;
                        this.actor[this.INP_POST_TEXT].getChildAt(1).type = TextFieldType.INPUT;
                        this.Remove(this.BNC_POST_READ);
                        this.Remove(this.BTN_POST_REPLY);
                        this.Remove(this.BTN_POST_FORWARD);
                        if (this.Gilde != ""){
                            if (this.textDir == "right"){
                                this.actor[this.CNT_POST_GUILD].x = (this.POS_POST_INP_X + 5);
                            } else {
                                this.actor[this.CNT_POST_GUILD].x = (((this.POS_POST_INP_X + this.actor[this.INP_POST_ADDRESS].width) - this.actor[this.CNT_POST_GUILD].width) - 5);
                            };
                            this.Show(this.CNT_POST_GUILD);
                        } else {
                            this.Hide(this.CNT_POST_GUILD);
                        };
                        this.Add(this.BNC_POST_WRITE);
                        this.Show(this.CNT_POST_GUILD);
                        this.actor[this.INP_POST_ADDRESS].getChildAt(1).text = this.ReplyAddress;
                        this.actor[this.INP_POST_TEXT].getChildAt(1).text = this.txt[this.TXT_NACHRICHT];
                        if (this.textDir == "right"){
                            if (this.actor[this.INP_POST_SUBJECT].getChildAt(1).text.indexOf(this.txt[this.TXT_RE]) == -1){
                                this.actor[this.INP_POST_SUBJECT].getChildAt(1).text = ((this.ReplySubject + " ") + this.txt[this.TXT_RE]);
                            };
                            this.MakeRightTextArea(this.INP_POST_ADDRESS, 1);
                            this.MakeRightTextArea(this.INP_POST_SUBJECT, 1);
                            this.MakeRightTextArea(this.INP_POST_TEXT, 1);
                        } else {
                            if (this.actor[this.INP_POST_SUBJECT].getChildAt(1).text.indexOf(this.txt[this.TXT_RE]) == -1){
                                this.actor[this.INP_POST_SUBJECT].getChildAt(1).text = ((this.txt[this.TXT_RE] + " ") + this.ReplySubject);
                            };
                        };
                    };
                    break;
                case this.BTN_POST_FORWARD:
                    if (this.forwardText != ""){
                        this.actor[this.INP_POST_ADDRESS].getChildAt(1).type = TextFieldType.INPUT;
                        this.actor[this.INP_POST_SUBJECT].getChildAt(1).type = TextFieldType.INPUT;
                        this.actor[this.INP_POST_TEXT].getChildAt(1).type = TextFieldType.INPUT;
                        this.Remove(this.BNC_POST_READ);
                        this.Remove(this.BTN_POST_REPLY);
                        this.Remove(this.BTN_POST_FORWARD);
                        if (this.Gilde != ""){
                            if (this.textDir == "right"){
                                this.actor[this.CNT_POST_GUILD].x = (this.POS_POST_INP_X + 5);
                            } else {
                                this.actor[this.CNT_POST_GUILD].x = (((this.POS_POST_INP_X + this.actor[this.INP_POST_ADDRESS].width) - this.actor[this.CNT_POST_GUILD].width) - 5);
                            };
                            this.Show(this.CNT_POST_GUILD);
                        } else {
                            this.Hide(this.CNT_POST_GUILD);
                        };
                        this.Add(this.BNC_POST_WRITE);
                        this.Show(this.CNT_POST_GUILD);
                        stage.focus = this.actor[this.INP_POST_ADDRESS].getChildAt(1);
                        this.actor[this.INP_POST_ADDRESS].getChildAt(1).text = "";
                        this.actor[this.INP_POST_TEXT].getChildAt(1).text = this.txt[(this.TXT_POST_FORWARD + 2)].split("%1").join(this.ReplyAddress).split("%2").join(this.forwardText).split("#").join(String.fromCharCode(13));
                        if (this.textDir == "right"){
                            if (this.actor[this.INP_POST_SUBJECT].getChildAt(1).text.indexOf(this.txt[(this.TXT_POST_FORWARD + 1)]) == -1){
                                this.actor[this.INP_POST_SUBJECT].getChildAt(1).text = ((this.ReplySubject + " ") + this.txt[(this.TXT_POST_FORWARD + 1)]);
                            };
                            this.MakeRightTextArea(this.INP_POST_ADDRESS, 1);
                            this.MakeRightTextArea(this.INP_POST_SUBJECT, 1);
                            this.MakeRightTextArea(this.INP_POST_TEXT, 1);
                        } else {
                            if (this.actor[this.INP_POST_SUBJECT].getChildAt(1).text.indexOf(this.txt[(this.TXT_POST_FORWARD + 1)]) == -1){
                                this.actor[this.INP_POST_SUBJECT].getChildAt(1).text = ((this.txt[(this.TXT_POST_FORWARD + 1)] + " ") + this.ReplySubject);
                            };
                        };
                    };
                    break;
                case this.BTN_POST_VIEWFIGHT:
                    par = this.tmpBattleInfo.split("#");
                    this.PostFightMode = true;
                    this.ShowFightScreen(par[0].split("/"), par[1].split("/"), (par[6] == "1"), par[2].split("/"), (par[5] == "2"), ((par[3] + "/") + par[4]).split("/"), int(par[7]), int(par[8]), (par[5] == "3"), true);
                    break;
                default:
                    if (this.PostSel > 0){
                        this.SendAction(this.ACT_POST_READ, ((this.PostSel + this.PostScroll) - 1));
                    };
            };
        }
        public function ShowAlbumContent(evt:Event=undefined){
            var i:* = 0;
            var entryText:* = null;
            var hintText:* = null;
            var hunterOffs:* = 0;
            var actorID:* = 0;
            var contentCount:* = 0;
            var catMax:* = null;
            var catCount:* = null;
            var evt:* = evt;
            var SetAlbumItems:* = function (aOffs:int, itmTyp:int, itmPic:int, itmClass:int){
                var itemSet:Array;
                var anyItem:Boolean;
                var j:int;
                itemSet = new Array();
                anyItem = false;
                j = 0;
                while (j < 5) {
                    itemSet[j] = AlbumContent[(aOffs + j)];
                    if (itemSet[j] == 1){
                        anyItem = true;
                    };
                    j++;
                };
                if (anyItem){
                    entryText = GetItemName(itmTyp, itmPic, itmClass);
                    if (itmClass > 0){
                        itmClass--;
                    };
                    SetCnt((CNT_ALBUM_WEAPON_1 + i), GetItemID(itmTyp, itmPic, 0, itmClass));
                    SetCnt((CNT_ALBUM_WEAPON_2 + i), GetItemID(itmTyp, itmPic, 1, itmClass));
                    SetCnt((CNT_ALBUM_WEAPON_3 + i), GetItemID(itmTyp, itmPic, 2, itmClass));
                    SetCnt((CNT_ALBUM_WEAPON_4 + i), GetItemID(itmTyp, itmPic, 3, itmClass));
                    SetCnt((CNT_ALBUM_WEAPON_5 + i), GetItemID(itmTyp, itmPic, 4, itmClass));
                    actor[(CNT_ALBUM_WEAPON_1 + i)].alpha = ((itemSet[0]) ? 1 : 0.3);
                    actor[(CNT_ALBUM_WEAPON_2 + i)].alpha = ((itemSet[1]) ? 1 : 0.3);
                    actor[(CNT_ALBUM_WEAPON_3 + i)].alpha = ((itemSet[2]) ? 1 : 0.3);
                    actor[(CNT_ALBUM_WEAPON_4 + i)].alpha = ((itemSet[3]) ? 1 : 0.3);
                    actor[(CNT_ALBUM_WEAPON_5 + i)].alpha = ((itemSet[4]) ? 1 : 0.3);
                    if (showAlbumOffset){
                        EnablePopup((CNT_ALBUM_WEAPON_1 + i), String((aOffs + 0)));
                        EnablePopup((CNT_ALBUM_WEAPON_2 + i), String((aOffs + 1)));
                        EnablePopup((CNT_ALBUM_WEAPON_3 + i), String((aOffs + 2)));
                        EnablePopup((CNT_ALBUM_WEAPON_4 + i), String((aOffs + 3)));
                        EnablePopup((CNT_ALBUM_WEAPON_5 + i), String((aOffs + 4)));
                    } else {
                        EnablePopup((CNT_ALBUM_WEAPON_1 + i));
                        EnablePopup((CNT_ALBUM_WEAPON_2 + i));
                        EnablePopup((CNT_ALBUM_WEAPON_3 + i));
                        EnablePopup((CNT_ALBUM_WEAPON_4 + i));
                        EnablePopup((CNT_ALBUM_WEAPON_5 + i));
                        if ((((itmTyp == 1)) && ((itmClass > 1)))){
                        };
                    };
                };
                if (showAlbumOffset){
                    EnablePopup((LBL_ALBUM_HEADING + i), ((String(aOffs) + " - ") + String((aOffs + 4))));
                };
            };
            var SetAlbumEpic:* = function (aOffs:int, itmTyp:int, itmPic:int, itmClass:int){
                if (AlbumContent[aOffs] == 1){
                    entryText = GetItemName(itmTyp, itmPic, itmClass);
                    if (entryText.indexOf("|") != -1){
                        hintText = entryText.split("|")[1].split("#").join(String.fromCharCode(13));
                        entryText = entryText.split("|")[0];
                    };
                    if (itmClass > 0){
                        itmClass--;
                    };
                    SetCnt((CNT_ALBUM_WEAPON_EPIC + i), GetItemID(itmTyp, itmPic, 0, itmClass));
                    if (showAlbumOffset){
                        EnablePopup((CNT_ALBUM_WEAPON_EPIC + i), String(aOffs));
                    } else {
                        EnablePopup((CNT_ALBUM_WEAPON_EPIC + i));
                    };
                };
                if (showAlbumOffset){
                    EnablePopup((LBL_ALBUM_HEADING + i), String(aOffs));
                };
            };
            entryText = "";
            hintText = "";
            hunterOffs = 0;
            this.AlbumClear();
            actorID = 0;
            if (evt){
                actorID = this.GetActorID(evt.target);
            };
            if (actorID == this.BTN_ALBUM_PREV){
                this.albumPage--;
            };
            if (actorID == this.BTN_ALBUM_NEXT){
                this.albumPage++;
            };
            if ((((actorID >= this.CNT_ALBUM_CAT_OUT)) && ((actorID <= (this.CNT_ALBUM_CAT_OUT + 4))))){
                this.albumCat = (actorID - this.CNT_ALBUM_CAT_OUT);
                this.albumPage = 0;
            };
            this.Hide(this.BNC_ALBUM_CAT_IN);
            this.Show((this.IMG_ALBUM_CAT_IN + this.albumCat));
            contentCount = 0;
            catMax = [252, 246, 506, 348, 348];
            catCount = [0, 0, 0, 0, 0];
            i = 0;
            while (i < this.AlbumContent.length) {
                if (this.AlbumContent[i] == 1){
                    if (i < 300){
                        var _local3 = catCount;
                        var _local4:int;
                        var _local5 = (_local3[_local4] + 1);
                        _local3[_local4] = _local5;
                    } else {
                        if (i < 792){
                            _local3 = catCount;
                            _local4 = 1;
                            _local5 = (_local3[_local4] + 1);
                            _local3[_local4] = _local5;
                        } else {
                            if (i < 1804){
                                _local3 = catCount;
                                _local4 = 2;
                                _local5 = (_local3[_local4] + 1);
                                _local3[_local4] = _local5;
                            } else {
                                if (i < 2500){
                                    _local3 = catCount;
                                    _local4 = 3;
                                    _local5 = (_local3[_local4] + 1);
                                    _local3[_local4] = _local5;
                                } else {
                                    _local3 = catCount;
                                    _local4 = 4;
                                    _local5 = (_local3[_local4] + 1);
                                    _local3[_local4] = _local5;
                                };
                            };
                        };
                    };
                    contentCount = (contentCount + 1);
                };
                i = (i + 1);
            };
            if (contentCount > this.contentMax){
                contentCount = this.contentMax;
            };
            i = 0;
            while (i < 5) {
                if (catCount[i] > catMax[i]){
                    catCount[i] = catMax[i];
                };
                i = (i + 1);
            };
            this.actor[this.LBL_ALBUM_COLLECTION].text = this.txt[this.TXT_COLLECTION].split("%1").join(String(contentCount)).split("%2").join(String(this.contentMax)).split("%3").join(String((Math.round(((contentCount / this.contentMax) * 10000)) / 100))).split("#").join(String.fromCharCode(13));
            i = 0;
            while (i < 5) {
                this.EnablePopup((this.IMG_ALBUM_CAT_IN + i), (((((((this.txt[((this.TXT_COLLECTION + 2) + i)] + String.fromCharCode(13)) + catCount[i]) + " / ") + catMax[i]) + " = ") + String((Math.round(((catCount[i] / catMax[i]) * 10000)) / 100))) + "%"));
                this.EnablePopup((this.CNT_ALBUM_CAT_OUT + i), (((((((this.txt[((this.TXT_COLLECTION + 2) + i)] + String.fromCharCode(13)) + catCount[i]) + " / ") + catMax[i]) + " = ") + String((Math.round(((catCount[i] / catMax[i]) * 10000)) / 100))) + "%"));
                i = (i + 1);
            };
            this.EnablePopup(this.LBL_ALBUM_COLLECTION, this.txt[(this.TXT_COLLECTION + 7)]);
            i = 0;
            while (i < 4) {
                hintText = "";
                this.EnablePopup((this.LBL_ALBUM_HEADING + i));
                this.EnablePopup((this.CNT_ALBUM_MONSTER_FRAME + i));
                if (this.albumCat == 0){
                    this.Show((this.CNT_ALBUM_MONSTER_FRAME + i));
                    if (this.albumPage > 62){
                        this.albumPage = 0;
                    };
                    if (this.albumPage < 0){
                        this.albumPage = 62;
                    };
                    if (this.AlbumContent[((this.albumPage * 4) + i)] == 1){
                        this.SetCnt((this.CNT_ALBUM_MONSTER + i), ((this.IMG_OPPIMG_MONSTER + (this.albumPage * 4)) + i));
                        if (((this.albumPage * 4) + i) >= 220){
                            entryText = this.txt[(((this.TXT_NEW_MONSTER_NAMES + (this.albumPage * 4)) + i) - 220)];
                        } else {
                            entryText = this.txt[((this.TXT_MONSTER_NAME + (this.albumPage * 4)) + i)];
                        };
                    } else {
                        this.SetCnt((this.CNT_ALBUM_MONSTER + i), this.IMG_UNKNOWN_ENEMY);
                        entryText = this.txt[this.TXT_UNKNOWN];
                    };
                    if (this.showAlbumOffset){
                        this.EnablePopup((this.CNT_ALBUM_MONSTER_FRAME + i), String(((this.albumPage * 4) + i)));
                    };
                    if (this.showAlbumOffset){
                        this.EnablePopup((this.LBL_ALBUM_HEADING + i), String(((this.albumPage * 4) + i)));
                    };
                } else {
                    if (this.albumCat == 1){
                        entryText = this.txt[this.TXT_UNKNOWN];
                        if (this.albumPage > 25){
                            this.albumPage = 0;
                        };
                        if (this.albumPage < 0){
                            this.albumPage = 25;
                        };
                        if (this.albumPage <= 5){
                            if ((((this.albumPage < 5)) || ((i <= 0)))){
                                SetAlbumItems(((300 + (this.albumPage * 20)) + (i * 5)), 8, ((1 + (this.albumPage * 4)) + i), 0);
                            } else {
                                entryText = "";
                            };
                        } else {
                            if (this.albumPage <= 7){
                                SetAlbumEpic(((510 + ((this.albumPage - 6) * 4)) + i), 8, ((50 + ((this.albumPage - 6) * 4)) + i), 0);
                            } else {
                                if (this.albumPage <= 11){
                                    SetAlbumItems(((526 + ((this.albumPage - 8) * 20)) + (i * 5)), 9, ((1 + ((this.albumPage - 8) * 4)) + i), 0);
                                } else {
                                    if (this.albumPage <= 13){
                                        SetAlbumEpic(((686 + ((this.albumPage - 12) * 4)) + i), 9, ((50 + ((this.albumPage - 12) * 4)) + i), 0);
                                    } else {
                                        if (this.albumPage <= 23){
                                            if ((((this.albumPage < 23)) || ((i <= 0)))){
                                                SetAlbumEpic(((702 + ((this.albumPage - 14) * 4)) + i), 10, ((1 + ((this.albumPage - 14) * 4)) + i), 0);
                                            } else {
                                                entryText = "";
                                            };
                                        } else {
                                            if (this.albumPage <= 25){
                                                SetAlbumEpic((((760 + 16) + ((this.albumPage - 24) * 4)) + i), 10, ((50 + ((this.albumPage - 24) * 4)) + i), 0);
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    } else {
                        if (this.albumCat == 2){
                            entryText = this.txt[this.TXT_UNKNOWN];
                            if (this.albumPage > 39){
                                this.albumPage = 0;
                            };
                            if (this.albumPage < 0){
                                this.albumPage = 39;
                            };
                            if (this.albumPage <= 7){
                                if ((((this.albumPage < 7)) || ((i <= 1)))){
                                    SetAlbumItems((((776 + 16) + (this.albumPage * 20)) + (i * 5)), 1, ((1 + (this.albumPage * 4)) + i), 1);
                                } else {
                                    entryText = "";
                                };
                            } else {
                                if (this.albumPage <= 9){
                                    SetAlbumEpic((((1076 + 16) + ((this.albumPage - 8) * 4)) + i), 1, ((50 + ((this.albumPage - 8) * 4)) + i), 1);
                                } else {
                                    if (this.albumPage <= 12){
                                        if ((((this.albumPage < 12)) || ((i <= 1)))){
                                            SetAlbumItems((((1092 + 16) + ((this.albumPage - 10) * 20)) + (i * 5)), 2, ((1 + ((this.albumPage - 10) * 4)) + i), 1);
                                        } else {
                                            entryText = "";
                                        };
                                    } else {
                                        if (this.albumPage <= 14){
                                            SetAlbumEpic((((1192 + 16) + ((this.albumPage - 13) * 4)) + i), 2, ((50 + ((this.albumPage - 13) * 4)) + i), 1);
                                        } else {
                                            if (this.albumPage <= 17){
                                                if ((((this.albumPage < 17)) || ((i <= 1)))){
                                                    SetAlbumItems((((1208 + 16) + ((this.albumPage - 15) * 20)) + (i * 5)), 3, ((1 + ((this.albumPage - 15) * 4)) + i), 1);
                                                } else {
                                                    entryText = "";
                                                };
                                            } else {
                                                if (this.albumPage <= 19){
                                                    SetAlbumEpic((((1308 + 16) + ((this.albumPage - 18) * 4)) + i), 3, ((50 + ((this.albumPage - 18) * 4)) + i), 1);
                                                } else {
                                                    if (this.albumPage <= 22){
                                                        if ((((this.albumPage < 22)) || ((i <= 1)))){
                                                            SetAlbumItems((((1324 + 16) + ((this.albumPage - 20) * 20)) + (i * 5)), 4, ((1 + ((this.albumPage - 20) * 4)) + i), 1);
                                                        } else {
                                                            entryText = "";
                                                        };
                                                    } else {
                                                        if (this.albumPage <= 24){
                                                            SetAlbumEpic((((1424 + 16) + ((this.albumPage - 23) * 4)) + i), 4, ((50 + ((this.albumPage - 23) * 4)) + i), 1);
                                                        } else {
                                                            if (this.albumPage <= 27){
                                                                if ((((this.albumPage < 27)) || ((i <= 1)))){
                                                                    SetAlbumItems((((1440 + 16) + ((this.albumPage - 25) * 20)) + (i * 5)), 5, ((1 + ((this.albumPage - 25) * 4)) + i), 1);
                                                                } else {
                                                                    entryText = "";
                                                                };
                                                            } else {
                                                                if (this.albumPage <= 29){
                                                                    SetAlbumEpic((((1540 + 16) + ((this.albumPage - 28) * 4)) + i), 5, ((50 + ((this.albumPage - 28) * 4)) + i), 1);
                                                                } else {
                                                                    if (this.albumPage <= 32){
                                                                        if ((((this.albumPage < 32)) || ((i <= 1)))){
                                                                            SetAlbumItems((((1556 + 16) + ((this.albumPage - 30) * 20)) + (i * 5)), 6, ((1 + ((this.albumPage - 30) * 4)) + i), 1);
                                                                        } else {
                                                                            entryText = "";
                                                                        };
                                                                    } else {
                                                                        if (this.albumPage <= 34){
                                                                            SetAlbumEpic((((1656 + 16) + ((this.albumPage - 33) * 4)) + i), 6, ((50 + ((this.albumPage - 33) * 4)) + i), 1);
                                                                        } else {
                                                                            if (this.albumPage <= 37){
                                                                                if ((((this.albumPage < 37)) || ((i <= 1)))){
                                                                                    SetAlbumItems((((1672 + 16) + ((this.albumPage - 35) * 20)) + (i * 5)), 7, ((1 + ((this.albumPage - 35) * 4)) + i), 1);
                                                                                } else {
                                                                                    entryText = "";
                                                                                };
                                                                            } else {
                                                                                if (this.albumPage <= 39){
                                                                                    SetAlbumEpic((((1772 + 16) + ((this.albumPage - 38) * 4)) + i), 7, ((50 + ((this.albumPage - 38) * 4)) + i), 1);
                                                                                };
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        } else {
                            if ((((this.albumCat == 3)) || ((this.albumCat == 4)))){
                                entryText = this.txt[this.TXT_UNKNOWN];
                                if (this.albumPage > 29){
                                    this.albumPage = 0;
                                };
                                if (this.albumPage < 0){
                                    this.albumPage = 29;
                                };
                                hunterOffs = (((this.albumCat)==3) ? 0 : 696 + 16);
                                if (this.albumPage <= 2){
                                    if ((((this.albumPage < 2)) || ((i <= 1)))){
                                        SetAlbumItems((((1788 + hunterOffs) + (this.albumPage * 20)) + (i * 5)), 1, ((1 + (this.albumPage * 4)) + i), (this.albumCat - 1));
                                    } else {
                                        entryText = "";
                                    };
                                } else {
                                    if (this.albumPage <= 4){
                                        SetAlbumEpic((((1888 + hunterOffs) + ((this.albumPage - 3) * 4)) + i), 1, ((50 + ((this.albumPage - 3) * 4)) + i), (this.albumCat - 1));
                                    } else {
                                        if (this.albumPage <= 7){
                                            if ((((this.albumPage < 7)) || ((i <= 1)))){
                                                SetAlbumItems((((1904 + hunterOffs) + ((this.albumPage - 5) * 20)) + (i * 5)), 3, ((1 + ((this.albumPage - 5) * 4)) + i), (this.albumCat - 1));
                                            } else {
                                                entryText = "";
                                            };
                                        } else {
                                            if (this.albumPage <= 9){
                                                SetAlbumEpic((((2004 + hunterOffs) + ((this.albumPage - 8) * 4)) + i), 3, ((50 + ((this.albumPage - 8) * 4)) + i), (this.albumCat - 1));
                                            } else {
                                                if (this.albumPage <= 12){
                                                    if ((((this.albumPage < 12)) || ((i <= 1)))){
                                                        SetAlbumItems((((2020 + hunterOffs) + ((this.albumPage - 10) * 20)) + (i * 5)), 4, ((1 + ((this.albumPage - 10) * 4)) + i), (this.albumCat - 1));
                                                    } else {
                                                        entryText = "";
                                                    };
                                                } else {
                                                    if (this.albumPage <= 14){
                                                        SetAlbumEpic((((2120 + hunterOffs) + ((this.albumPage - 13) * 4)) + i), 4, ((50 + ((this.albumPage - 13) * 4)) + i), (this.albumCat - 1));
                                                    } else {
                                                        if (this.albumPage <= 17){
                                                            if ((((this.albumPage < 17)) || ((i <= 1)))){
                                                                SetAlbumItems((((2136 + hunterOffs) + ((this.albumPage - 15) * 20)) + (i * 5)), 5, ((1 + ((this.albumPage - 15) * 4)) + i), (this.albumCat - 1));
                                                            } else {
                                                                entryText = "";
                                                            };
                                                        } else {
                                                            if (this.albumPage <= 19){
                                                                SetAlbumEpic((((2236 + hunterOffs) + ((this.albumPage - 18) * 4)) + i), 5, ((50 + ((this.albumPage - 18) * 4)) + i), (this.albumCat - 1));
                                                            } else {
                                                                if (this.albumPage <= 22){
                                                                    if ((((this.albumPage < 22)) || ((i <= 1)))){
                                                                        SetAlbumItems((((2252 + hunterOffs) + ((this.albumPage - 20) * 20)) + (i * 5)), 6, ((1 + ((this.albumPage - 20) * 4)) + i), (this.albumCat - 1));
                                                                    } else {
                                                                        entryText = "";
                                                                    };
                                                                } else {
                                                                    if (this.albumPage <= 24){
                                                                        SetAlbumEpic((((2352 + hunterOffs) + ((this.albumPage - 23) * 4)) + i), 6, ((50 + ((this.albumPage - 23) * 4)) + i), (this.albumCat - 1));
                                                                    } else {
                                                                        if (this.albumPage <= 27){
                                                                            if ((((this.albumPage < 27)) || ((i <= 1)))){
                                                                                SetAlbumItems((((2368 + hunterOffs) + ((this.albumPage - 25) * 20)) + (i * 5)), 7, ((1 + ((this.albumPage - 25) * 4)) + i), (this.albumCat - 1));
                                                                            } else {
                                                                                entryText = "";
                                                                            };
                                                                        } else {
                                                                            if (this.albumPage <= 29){
                                                                                SetAlbumEpic((((2468 + hunterOffs) + ((this.albumPage - 28) * 4)) + i), 7, ((50 + ((this.albumPage - 28) * 4)) + i), (this.albumCat - 1));
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
                this.actor[this.LBL_ALBUM_PAGENUMBER_LEFT].text = String(((this.albumPage * 2) + 1));
                this.actor[this.LBL_ALBUM_PAGENUMBER_RIGHT].text = String(((this.albumPage * 2) + 2));
                this.actor[this.LBL_ALBUM_PAGENUMBER_RIGHT].x = (1205 - this.actor[this.LBL_ALBUM_PAGENUMBER_RIGHT].textWidth);
                this.actor[(this.LBL_ALBUM_HEADING + i)].text = entryText;
                this.actor[(this.LBL_ALBUM_HEADING + i)].x = (((i)<=1) ? 535 : 1005 - (this.actor[(this.LBL_ALBUM_HEADING + i)].textWidth / 2));
                this.actor[(this.LBL_ALBUM_HINT + i)].text = hintText;
                this.actor[(this.LBL_ALBUM_HINT + i)].x = (((i)<=1) ? 535 : 1005 - (this.actor[(this.LBL_ALBUM_HINT + i)].textWidth / 2));
                i = (i + 1);
            };
            if (((!((hintText == ""))) && (((this.actor[this.LBL_ALBUM_COLLECTION].x + this.actor[this.LBL_ALBUM_COLLECTION].textWidth) > (this.actor[this.LBL_ALBUM_HINT].x - 5))))){
                this.actor[this.LBL_ALBUM_COLLECTION].y = ((this.actor[this.LBL_ALBUM_HINT].y + this.actor[this.LBL_ALBUM_HINT].textHeight) + 5);
            } else {
                if ((this.actor[this.LBL_ALBUM_COLLECTION].x + this.actor[this.LBL_ALBUM_COLLECTION].textWidth) > (this.actor[this.LBL_ALBUM_HEADING].x - 5)){
                    this.actor[this.LBL_ALBUM_COLLECTION].y = ((this.actor[this.LBL_ALBUM_HEADING].y + this.actor[this.LBL_ALBUM_HEADING].textHeight) + 5);
                } else {
                    this.actor[this.LBL_ALBUM_COLLECTION].y = 135;
                };
            };
        }
        public function AlbumClear(){
            var i:int;
            i = 0;
            while (i < 4) {
                this.Hide((this.CNT_ALBUM_MONSTER_FRAME + i));
                this.SetCnt((this.CNT_ALBUM_MONSTER + i), this.C_EMPTY);
                this.SetCnt((this.CNT_ALBUM_WEAPON_1 + i), this.C_EMPTY);
                this.SetCnt((this.CNT_ALBUM_WEAPON_2 + i), this.C_EMPTY);
                this.SetCnt((this.CNT_ALBUM_WEAPON_3 + i), this.C_EMPTY);
                this.SetCnt((this.CNT_ALBUM_WEAPON_4 + i), this.C_EMPTY);
                this.SetCnt((this.CNT_ALBUM_WEAPON_5 + i), this.C_EMPTY);
                this.actor[(this.CNT_ALBUM_WEAPON_1 + i)].alpha = 1;
                this.actor[(this.CNT_ALBUM_WEAPON_2 + i)].alpha = 1;
                this.actor[(this.CNT_ALBUM_WEAPON_3 + i)].alpha = 1;
                this.actor[(this.CNT_ALBUM_WEAPON_4 + i)].alpha = 1;
                this.actor[(this.CNT_ALBUM_WEAPON_5 + i)].alpha = 1;
                this.SetCnt((this.CNT_ALBUM_WEAPON_EPIC + i), this.C_EMPTY);
                this.actor[(this.LBL_ALBUM_HEADING + i)].text = "";
                this.actor[(this.LBL_ALBUM_HINT + i)].text = "";
                i++;
            };
        }
        public function ShowScreenAlbum(){
            var i:* = 0;
            var DoShowScreenAlbum:* = null;
            DoShowScreenAlbum = function (){
                var i:int;
                i = 0;
                while (i < 4) {
                    SetCnt((CNT_ALBUM_MONSTER_FRAME + i), IMG_FIGHT_CHAR_BORDER);
                    i++;
                };
                ShowAlbumContent();
                RemoveAll();
                Add(BNC_SCREEN_ALBUM);
            };
            this.Load(this.IMG_FIGHT_CHAR_BORDER);
            this.Load(this.IMG_UNKNOWN_ENEMY);
            i = 0;
            while (i < 5) {
                this.Load((this.IMG_ALBUM_CAT_OUT + i));
                i = (i + 1);
            };
            this.WhenLoaded(DoShowScreenAlbum);
        }
        public function TowerBtnHandler(evt:Event){
            var i:int;
            switch (this.GetActorID(evt.target)){
                case this.BTN_PREV_COPYCAT:
                    this.copyCatSel--;
                    if (this.copyCatSel < 0){
                        this.copyCatSel = 2;
                    };
                    this.DisplayInventory(this.towerSG, true, true, this.copyCatSel);
                    break;
                case this.BTN_NEXT_COPYCAT:
                    this.copyCatSel++;
                    if (this.copyCatSel > 2){
                        this.copyCatSel = 0;
                    };
                    this.DisplayInventory(this.towerSG, true, true, this.copyCatSel);
                    break;
                case this.BTN_TOWER_TRY:
                    this.ShowMainQuestScreen(100, (399 + this.towerLevel));
                    break;
            };
        }
        public function TowerScrollGrab(evt:MouseEvent){
            this.towerScrollGrabPos = evt.localY;
            this.towerScrollSpeed = 0;
        }
        public function TowerScrollMove(evt:MouseEvent){
            if (this.towerScrollGrabPos != -1){
                this.towerScrollSpeed = (evt.localY - this.towerScrollGrabPos);
                this.towerScroll = (this.towerScroll + (this.towerScrollSpeed / 375));
                this.towerScrollDest = this.towerScroll;
                this.towerScrollTimer.start();
                this.towerScrollGrabPos = evt.localY;
            };
        }
        public function TowerScrollRelease(evt:MouseEvent){
            if (this.towerScrollGrabPos != -1){
                this.towerScrollDest = (this.towerScrollDest + (this.towerScrollSpeed / 40));
                this.towerScrollTimer.start();
                this.towerScrollGrabPos = -1;
            };
        }
        public function TowerScrollOut(evt:MouseEvent){
            if (this.towerScrollGrabPos != -1){
            };
        }
        public function TowerScrollCurrent(evt:MouseEvent){
            this.towerScrollDest = (this.towerSG[this.TSG_TOWER_LEVEL] + 1);
            this.towerScrollTimer.start();
            this.towerScrollGrabPos = -1;
        }
        public function TowerScrollWheel(evt:MouseEvent){
            this.towerScrollSpeed = (evt.delta * 10);
            this.towerScroll = (this.towerScroll + (this.towerScrollSpeed / 375));
            this.towerScrollDest = this.towerScroll;
            this.towerScrollTimer.start();
        }
        public function TowerKeyEvent(evt:KeyboardEvent){
            var evt:* = evt;
            if (this.OnStage(this.CNT_TOWER_SCROLLAREA)){
                if (evt.keyCode == Keyboard.ENTER){
                    this.towerScrollDest = this.towerSG[this.TSG_TOWER_LEVEL];
                    this.towerScrollTimer.start();
                } else {
                    if (evt.keyCode == Keyboard.UP){
                        this.towerScrollDest = (Math.round(this.towerScrollDest) + 1);
                        this.towerScrollTimer.start();
                    } else {
                        if (evt.keyCode == Keyboard.DOWN){
                            this.towerScrollDest = (Math.round(this.towerScrollDest) - 1);
                            this.towerScrollTimer.start();
                        };
                    };
                };
            } else {
                var _local3 = this.actor[this.CNT_TOWER_SCROLLAREA];
                with (_local3) {
                    removeEventListener(KeyboardEvent.KEY_DOWN, TowerKeyEvent);
                    removeEventListener(FocusEvent.FOCUS_OUT, TowerScrollSetFocus);
                };
            };
        }
        public function TowerScrollSetFocus(evt:Event){
            var evt:* = evt;
            if (this.OnStage(this.CNT_TOWER_SCROLLAREA)){
                stage.focus = this.actor[this.CNT_TOWER_SCROLLAREA];
            } else {
                var _local3 = this.actor[this.CNT_TOWER_SCROLLAREA];
                with (_local3) {
                    removeEventListener(KeyboardEvent.KEY_DOWN, TowerKeyEvent);
                    removeEventListener(FocusEvent.FOCUS_OUT, TowerScrollSetFocus);
                };
            };
        }
        public function TowerTimerFn(evt:Event=undefined){
            var i:int;
            var towerScrollMax = "";
            var towerScrollLvl:Array;
            var thisFloor:*;
            towerScrollMax = 100;
            if (!this.OnStage(this.CNT_TOWER_SCROLLAREA)){
                this.towerScrollTimer.stop();
            };
            if (this.towerScrollDest > towerScrollMax){
                this.towerScrollDest = towerScrollMax;
            };
            if (this.towerScrollDest < 0){
                this.towerScrollDest = 0;
            };
            if (Math.abs((this.towerScroll - this.towerScrollDest)) > 0.01){
                this.towerScroll = (((this.towerScroll * 9) + this.towerScrollDest) / 10);
            } else {
                this.towerScroll = this.towerScrollDest;
                this.towerScrollTimer.stop();
            };
            if (this.towerScroll > towerScrollMax){
                this.towerScroll = towerScrollMax;
            };
            if (this.towerScroll < 0){
                this.towerScroll = 0;
            };
            this.actor[this.IMG_TOWER_BG].y = (-700 + ((this.towerScroll / towerScrollMax) * 700));
            this.actor[this.IMG_TOWER_BASE].y = (this.towerScroll * 375);
            towerScrollLvl = new Array();
            i = 0;
            while (i < 3) {
                towerScrollLvl[i] = (this.towerScroll - 0.7);
                while (towerScrollLvl[i] > (3 - i)) {
                    towerScrollLvl[i] = (towerScrollLvl[i] - 3);
                };
                i++;
            };
            towerScrollLvl[2] = (((575 - 350) + 35) + (towerScrollLvl[2] * 375));
            towerScrollLvl[1] = (((575 - 700) + 10) + (towerScrollLvl[1] * 375));
            towerScrollLvl[0] = ((575 - 1065) + (towerScrollLvl[0] * 375));
            towerScrollLvl.sort(Array.NUMERIC);
            thisFloor = 0;
            i = 0;
            while (i < 3) {
                thisFloor = Math.floor((this.towerScroll - 0.7));
                if (thisFloor < 0){
                    thisFloor = 0;
                };
                thisFloor = (thisFloor + i);
                this.SetCnt((this.CNT_TOWER_WINDOW + i), (((thisFloor < (int(this.towerSG[this.TSG_TOWER_LEVEL]) + 1))) ? this.IMG_TOWER_WINDOW_BURNT : (((thisFloor == (int(this.towerSG[this.TSG_TOWER_LEVEL]) + 1))) ? this.IMG_TOWER_WINDOW_OPEN : this.IMG_TOWER_WINDOW_CLOSED)));
                this.SetCnt((this.CNT_TOWER_FACE + i), ((this.IMG_OPPIMG_MONSTER + int(this.towerSG[this.TSG_TOWER_LEVEL])) + 399));
                this.actor[(this.IMG_TOWER_LEVEL + i)].y = towerScrollLvl[(2 - i)];
                this.actor[(this.CNT_TOWER_WINDOW + i)].y = towerScrollLvl[(2 - i)];
                this.actor[(this.CNT_TOWER_FACE + i)].y = (towerScrollLvl[(2 - i)] + 277);
                i++;
            };
        }
        public function ShowTowerScreen(towerData:Array){
            var thisCpc:* = 0;
            var DoShowTowerScreen:* = null;
            var thisSlot:* = 0;
            var towerData:* = towerData;
            DoShowTowerScreen = function (){
                var i:* = 0;
                var _local2 = actor[CNT_TOWER_SCROLLAREA];
                with (_local2) {
                    addChild(actor[IMG_TOWER_BG]);
                    addChild(actor[(IMG_TOWER_LEVEL + 2)]);
                    addChild(actor[(IMG_TOWER_LEVEL + 1)]);
                    addChild(actor[IMG_TOWER_LEVEL]);
                    addChild(actor[CNT_TOWER_FACE]);
                    addChild(actor[(CNT_TOWER_FACE + 1)]);
                    addChild(actor[(CNT_TOWER_FACE + 2)]);
                    addChild(actor[CNT_TOWER_WINDOW]);
                    addChild(actor[(CNT_TOWER_WINDOW + 1)]);
                    addChild(actor[(CNT_TOWER_WINDOW + 2)]);
                    addChild(actor[IMG_TOWER_BASE]);
                    addEventListener(KeyboardEvent.KEY_DOWN, TowerKeyEvent);
                };
                stage.focus = actor[CNT_TOWER_SCROLLAREA];
                if (!OnStage(CNT_TOWER_SCROLLAREA)){
                    towerScrollDest = (int(towerSG[TSG_TOWER_LEVEL]) + 1);
                    if (lightMode){
                        towerScroll = towerScrollDest;
                    } else {
                        towerScroll = 0;
                    };
                    towerScrollTimer.start();
                    SetAlpha(BNC_CHAR_SECONDPROP, 1);
                    SetAlpha(BNC_CHAR_PREISE, 0);
                };
                RemoveAll();
                Add(BNC_SCREEN_TOWER);
                if (towerLevel >= 100){
                    Remove(BTN_TOWER_TRY);
                };
                i = 0;
                while (i < 3) {
                    actor[(LBL_TOWER_BOOSTPRICELABEL + i)].text = String(int((towerSG[((TSG_COPYCATS + (i * SIZE_COPYCAT)) + CPC_PRICE_NEXT_LEVEL)] / 100)));
                    i = (i + 1);
                };
                DisplayInventory(towerSG, true, true, copyCatSel);
            };
            this.towerSG = towerData[1].split("/");
            thisCpc = 0;
            while (thisCpc < 3) {
                thisSlot = 0;
                while (thisSlot < 10) {
                    this.ExpandItemStructure(this.towerSG, (((this.TSG_COPYCATS + (thisCpc * this.SIZE_COPYCAT)) + this.CPC_ITEMS) + (thisSlot * this.SG_ITM_SIZE)));
                    thisSlot = (thisSlot + 1);
                };
                thisCpc = (thisCpc + 1);
            };
            this.Load(this.BNC_SCREEN_TOWER);
            this.Load(this.BNC_TOWER_PIECES);
            if (this.towerSG[this.TSG_TOWER_LEVEL] < 100){
                this.Load(((this.IMG_OPPIMG_MONSTER + int(this.towerSG[this.TSG_TOWER_LEVEL])) + 399));
            };
            this.WhenLoaded(DoShowTowerScreen);
        }
        public function Geld(amount:int):String{
            var gold:int;
            var silber:int;
            var GeldStr:String;
            gold = int((amount / 100));
            silber = int((amount % 100));
            GeldStr = "";
            if (gold > 0){
                GeldStr = (GeldStr + ((String(gold) + " ") + this.txt[this.TXT_GOLD]));
                if (silber > 0){
                    GeldStr = (GeldStr + ((" " + this.txt[this.TXT_UND]) + " "));
                };
            };
            if (silber > 0){
                GeldStr = (GeldStr + ((String(silber) + " ") + this.txt[this.TXT_SILBER]));
            };
            return (GeldStr);
        }
        public function GoldAnteil(amount:int):int{
            var gold:int;
            gold = int((amount / 100));
            var silber:int = int((amount % 100));
            return (gold);
        }
        public function SilberAnteil(amount:int):int{
            var silber:int;
            var gold:int = int((amount / 100));
            silber = int((amount % 100));
            return (silber);
        }
        public function Tageszeit():int{
            var now:Date;
            now = new Date();
            if (this.C_TIMEOFDAY >= 0){
                return (this.C_TIMEOFDAY);
            };
            if (now.hours < 4){
                return (0);
            };
            if (now.hours < 8){
                return (1);
            };
            if (now.hours < 18){
                return (2);
            };
            if (now.hours < 21){
                return (1);
            };
            return (0);
        }
        public function SleepTime():Boolean{
            var now:Date;
            now = new Date();
            if (this.C_TIMEOFDAY >= 0){
                return (this.C_TIMEOFDAY);
            };
            if (now.hours < 7){
                return (true);
            };
            if (now.hours < 23){
                return (false);
            };
            return (true);
        }
        public function ShowDemoScreen(){
            var DoShowDemoScreen:* = null;
            DoShowDemoScreen = function (){
                RemoveAll();
                DemoMode = true;
                Add(BNC_SCREEN_DEMO);
                var _local2 = actor[IMG_BG_DEMO];
                with (_local2) {
                    x = (POS_SCREEN_TITLE_X - int((width / 2)));
                };
                Remove(BNC_IF_STATS, CNT_IF_LOGOUT);
            };
            this.Load(this.BNC_SCREEN_DEMO);
            this.WhenLoaded(DoShowDemoScreen);
        }
        public function GetQuestTitle(questID:int):String{
            var questTitleOffset:int;
            questTitleOffset = this.TXT_QUEST_SCOUT_TITLE;
            switch (int(this.Savegame[(this.SG_QUEST_OFFER_TYPE1 + questID)])){
                case 1:
                    questTitleOffset = (this.TXT_QUEST_SCOUT_TITLE + this.GetQuestRandom(questID, 20, 0));
                    break;
                case 2:
                    questTitleOffset = (this.TXT_QUEST_COLLECT_TITLE + this.GetQuestRandom(questID, 20, 0));
                    break;
                case 3:
                    questTitleOffset = (this.TXT_QUEST_FETCH_TITLE + this.GetQuestRandom(questID, 20, 0));
                    break;
                case 4:
                    questTitleOffset = ((this.TXT_QUEST_KILL_TITLE + -(int(this.Savegame[(this.SG_QUEST_OFFER_ENEMY1 + questID)]))) - 1);
                    break;
                case 5:
                    questTitleOffset = (this.TXT_QUEST_TRANSPORT_TITLE + this.GetQuestRandom(questID, 21, 0));
                    break;
                case 6:
                    questTitleOffset = (this.TXT_QUEST_ESCORT_TITLE + this.GetQuestRandom(questID, 23, 0));
                    break;
            };
            if (this.txt[questTitleOffset]){
                return (this.txt[questTitleOffset]);
            };
            return (((((("ERR QID=" + String(questID)) + " QT=") + this.Savegame[(this.SG_QUEST_OFFER_TYPE1 + questID)]) + " OFS=") + String(questTitleOffset)));
        }
        public function GetQuestRandom(questID:int, randomRange:int, randomMod:int=0):int{
            var CheckSum:Number;
            CheckSum = 0;
            if (randomMod != 1){
                CheckSum = (CheckSum + Math.abs(Number(this.Savegame[(this.SG_QUEST_OFFER_LEVEL1 + questID)])));
            };
            if (randomMod != 2){
                CheckSum = (CheckSum + Math.abs(Number(this.Savegame[(this.SG_QUEST_OFFER_TYPE1 + questID)])));
            };
            if (randomMod != 3){
                CheckSum = (CheckSum + Math.abs(-(Number(this.Savegame[(this.SG_QUEST_OFFER_ENEMY1 + questID)]))));
            };
            CheckSum = (CheckSum + Math.abs(Number(this.Savegame[(this.SG_QUEST_OFFER_LOCATION1 + questID)])));
            CheckSum = (CheckSum + Math.abs(Number(this.Savegame[(this.SG_QUEST_OFFER_DURATION1 + questID)])));
            CheckSum = (CheckSum + Math.abs(Number(this.Savegame[(this.SG_QUEST_OFFER_EXP1 + questID)])));
            CheckSum = (CheckSum + Math.abs(Number(this.Savegame[(this.SG_QUEST_OFFER_GOLD1 + questID)])));
            CheckSum = (CheckSum + Math.abs(Number(this.Savegame[((this.SG_QUEST_OFFER_REWARD_ITM1 + this.SG_ITM_TYP) + (questID * this.SG_ITM_SIZE))])));
            CheckSum = (CheckSum + Math.abs(Number(this.Savegame[((this.SG_QUEST_OFFER_REWARD_ITM1 + this.SG_ITM_PIC) + (questID * this.SG_ITM_SIZE))])));
            return ((CheckSum % randomRange));
        }
        public function GetItemName(SGIndex:int, SG, albumMode:int=-1):String{
            var itmPic:int;
            var itmTyp:int;
            var itmClass:int;
            var txtBase:int;
            var i:int;
            var txtSuffix:String;
            var domAttrTyp:int;
            var domAttrVal:int;
            var attrValCode:int;
            var attrValOffs:int;
            var attribIn:Array;
            var itmOffs:int;
            itmPic = 0;
            itmTyp = 0;
            itmClass = 1;
            if ((SG is Array)){
                itmPic = int(SG[(SGIndex + this.SG_ITM_PIC)]);
                itmTyp = int(SG[(SGIndex + this.SG_ITM_TYP)]);
            };
            txtBase = 0;
            txtSuffix = "";
            if (albumMode >= 0){
                itmTyp = SGIndex;
                itmPic = SG;
                itmClass = albumMode;
            } else {
                domAttrTyp = -1;
                domAttrVal = 0;
                attrValCode = 0;
                attrValOffs = 0;
                attribIn = new Array();
                i = 0;
                while (i < 10) {
                    attribIn[i] = false;
                    i++;
                };
                i = 0;
                while (i < 3) {
                    if (int(SG[((SGIndex + this.SG_ITM_ATTRIBVAL1) + i)]) > domAttrVal){
                        domAttrTyp = int(SG[((SGIndex + this.SG_ITM_ATTRIBTYP1) + i)]);
                        domAttrVal = int(SG[((SGIndex + this.SG_ITM_ATTRIBVAL1) + i)]);
                    };
                    if ((((int(SG[((SGIndex + this.SG_ITM_ATTRIBTYP1) + i)]) > 0)) && ((int(SG[((SGIndex + this.SG_ITM_ATTRIBVAL1) + i)]) > 0)))){
                        attribIn[(int(SG[((SGIndex + this.SG_ITM_ATTRIBTYP1) + i)]) - 1)] = true;
                    };
                    i++;
                };
                attrValCode = Math.pow(2, (domAttrTyp - 1));
                if (domAttrVal >= 25){
                    attrValOffs = 250;
                } else {
                    if (domAttrVal >= 16){
                        attrValOffs = 200;
                    } else {
                        if (domAttrVal >= 11){
                            attrValOffs = 150;
                        } else {
                            if (domAttrVal >= 6){
                                attrValOffs = 100;
                            } else {
                                if (domAttrVal >= 3){
                                    attrValOffs = 50;
                                };
                            };
                        };
                    };
                };
                if (attrValCode > 0){
                    txtSuffix = this.txt[((this.TXT_ITMNAME_EXT + attrValCode) + attrValOffs)];
                };
                while (itmPic >= 1000) {
                    itmPic = (itmPic - 1000);
                    itmClass++;
                };
            };
            if (itmTyp >= 8){
                switch (itmTyp){
                    case 8:
                        txtBase = this.TXT_ITMNAME_8;
                        break;
                    case 9:
                        txtBase = this.TXT_ITMNAME_9;
                        break;
                    case 10:
                        txtBase = this.TXT_ITMNAME_10;
                        break;
                    case 11:
                        txtBase = this.TXT_ITMNAME_11;
                        txtSuffix = "";
                        break;
                    case 12:
                        txtBase = this.TXT_ITMNAME_12;
                        txtSuffix = "";
                        break;
                    case 13:
                        txtBase = this.TXT_ITMNAME_13;
                        txtSuffix = "";
                        break;
                    case 14:
                        txtBase = this.TXT_ITMNAME_14;
                        txtSuffix = "";
                        break;
                };
            } else {
                itmOffs = 0;
                switch (itmTyp){
                    case 1:
                        itmOffs = this.TXT_ITMNAME_1_1;
                        break;
                    case 2:
                        itmOffs = this.TXT_ITMNAME_2_1;
                        break;
                    case 3:
                        itmOffs = this.TXT_ITMNAME_3_1;
                        break;
                    case 4:
                        itmOffs = this.TXT_ITMNAME_4_1;
                        break;
                    case 5:
                        itmOffs = this.TXT_ITMNAME_5_1;
                        break;
                    case 6:
                        itmOffs = this.TXT_ITMNAME_6_1;
                        break;
                    case 7:
                        itmOffs = this.TXT_ITMNAME_7_1;
                        break;
                };
                if (itmOffs > 0){
                    itmOffs = (itmOffs - this.TXT_ITMNAME_1_1);
                    switch (itmClass){
                        case 1:
                            txtBase = (this.TXT_ITMNAME_1_1 + itmOffs);
                            break;
                        case 2:
                            txtBase = (this.TXT_ITMNAME_1_2 + itmOffs);
                            break;
                        case 3:
                            txtBase = (this.TXT_ITMNAME_1_3 + itmOffs);
                            break;
                    };
                };
            };
            if ((((itmPic >= 50)) && (!((itmTyp == 14))))){
                txtBase = (txtBase + (this.TXT_ITMNAME_1_1_EPIC - this.TXT_ITMNAME_1_1));
                itmPic = (itmPic - 49);
                txtSuffix = "";
            };
            if (this.txt[((txtBase + itmPic) - 1)] == undefined){
                return ((((("Unknown Item (base=" + String(txtBase)) + ", entry=") + String(((txtBase + itmPic) - 1))) + ")"));
            };
            if (this.txt[this.TXT_ITMNAME_EXT] == "1"){
                return (((((txtSuffix == "")) ? "" : (txtSuffix + " ")) + this.txt[((txtBase + itmPic) - 1)]));
            };
            if (this.txt[this.TXT_ITMNAME_EXT] == "2"){
                return (((txtSuffix)=="") ? this.txt[((txtBase + itmPic) - 1)] : txtSuffix.split("%1").join(this.txt[((txtBase + itmPic) - 1)]));
            };
            return ((this.txt[((txtBase + itmPic) - 1)] + (((txtSuffix == "")) ? "" : (" " + txtSuffix))));
        }
        public function GetArrowID(itmClass:int, itmPic:int, someObj:Object=undefined, slotMode:Boolean=false, colorOverride:int=-1):int{
            var arrowID:int;
            var slotID:int;
            var itmColor:Number;
            var i:int;
            arrowID = this.ARROW_OFFS;
            if (slotMode){
                if (!(someObj is Array)){
                    someObj = this.Savegame;
                };
                slotID = (itmClass + (itmPic * this.SG_ITM_SIZE));
                itmPic = someObj[(slotID + this.SG_ITM_PIC)];
                itmColor = 0;
                i = 0;
                while (i < 8) {
                    itmColor = (itmColor + Number(someObj[((slotID + this.SG_ITM_SCHADEN_MIN) + i)]));
                    i++;
                };
                itmColor = (itmColor % 5);
                itmClass = 0;
                while (itmPic >= 1000) {
                    itmPic = (itmPic - 1000);
                    itmClass++;
                };
                itmClass--;
            } else {
                itmColor = Number(someObj);
            };
            if (colorOverride >= 0){
                itmColor = colorOverride;
            };
            arrowID = (arrowID + ((itmClass * 5) * 100));
            arrowID = (arrowID + (itmPic * 5));
            arrowID = (arrowID + itmColor);
            if (arrowID >= this.ARROW_MAX){
                this.trc("Fehler: Zu wenige Indizes für Pfeile:", arrowID, ">=", this.ARROW_MAX, "Pic:", itmPic, "Color:", itmColor, "Class:", itmClass);
                return (0);
            };
            return (arrowID);
        }
        public function GetItemID(itmTyp:int, itmPic:int, someObj:Object=undefined, itmClass:int=-1):int{
            var itemID:int;
            var slotID:int;
            var slotNum:int;
            var itmColor:Number;
            var ownerClass:int;
            var isSG:Boolean;
            var i:int;
            var noShieldFlag:Boolean;
            itemID = this.ITM_OFFS;
            slotNum = 0;
            ownerClass = 0;
            isSG = false;
            noShieldFlag = false;
            if (itmClass < 0){
                if (!(someObj is Array)){
                    someObj = this.Savegame;
                };
                slotID = (itmTyp + (itmPic * this.SG_ITM_SIZE));
                slotNum = (itmPic + 1);
                itmTyp = someObj[(slotID + this.SG_ITM_TYP)];
                itmPic = someObj[(slotID + this.SG_ITM_PIC)];
                if (itmClass == -2){
                    isSG = true;
                    ownerClass = someObj[this.SG_CLASS];
                } else {
                    if (itmClass <= -3){
                        ownerClass = (-(itmClass) - 2);
                        noShieldFlag = true;
                        isSG = true;
                    };
                };
                itmColor = 0;
                i = 0;
                while (i < 8) {
                    itmColor = (itmColor + Number(someObj[((slotID + this.SG_ITM_SCHADEN_MIN) + i)]));
                    i++;
                };
                itmColor = (itmColor % 5);
                itmClass = 0;
                while (itmPic >= 1000) {
                    itmPic = (itmPic - 1000);
                    itmClass++;
                };
            } else {
                itmColor = Number(someObj);
            };
            itemID = (itemID + (((itmTyp * this.C_ITEMS_PER_TYPE) * 5) * 3));
            itemID = (itemID + ((itmPic * 5) * 3));
            itemID = (itemID + (itmColor * 3));
            itemID = (itemID + itmClass);
            if (itemID >= this.ITM_MAX){
                this.trc("Fehler: Zu wenige Indizes für Items:", itemID, ">=", this.ITM_MAX, "Typ:", itmTyp, "Pic:", itmPic, "Color:", itmColor, "Class:", itmClass);
                return (0);
            };
            if (((((((isSG) && ((itmTyp == 0)))) && ((slotNum > 0)))) && ((slotNum <= 10)))){
                if (slotNum <= 8){
                    itemID = ((this.IMG_EMPTY_SLOT_1 + slotNum) - 1);
                } else {
                    if (ownerClass == 1){
                        if (slotNum == 9){
                            itemID = this.IMG_EMPTY_SLOT_9_1;
                        } else {
                            if (noShieldFlag){
                                itemID = this.IMG_NO_SHIELD;
                            } else {
                                itemID = this.IMG_EMPTY_SLOT_10;
                            };
                        };
                    } else {
                        if (ownerClass == 2){
                            if (slotNum == 9){
                                itemID = this.IMG_EMPTY_SLOT_9_2;
                            };
                        } else {
                            if (ownerClass == 3){
                                if (slotNum == 9){
                                    itemID = this.IMG_EMPTY_SLOT_9_3;
                                };
                            };
                        };
                    };
                };
            };
            return (itemID);
        }
        public function GetItemFile(itmTyp:int, itmPic:int, itmColor:int, itmClass:int):String{
            var itemFile:String;
            itemFile = "itm";
            if ((((itmPic >= 50)) && (!((itmTyp == 14))))){
                itmColor = 0;
            };
            itemFile = (itemFile + (String(itmTyp) + "-"));
            itemFile = (itemFile + (String(itmPic) + ""));
            if ((((((((itmTyp >= 3)) && ((itmTyp <= 7)))) || ((itmTyp == 1)))) || ((itmTyp == 2)))){
                itemFile = (((((String(itmTyp) + "-") + String((itmClass + 1))) + "/") + itemFile) + "-");
                itemFile = (itemFile + String((itmColor + 1)));
                itemFile = (itemFile + ("-" + String((itmClass + 1))));
            } else {
                if ((((((((((((((itmTyp == 8)) || ((itmTyp == 9)))) || ((itmTyp == 10)))) || ((itmTyp == 11)))) || ((itmTyp == 12)))) || ((itmTyp == 13)))) || ((itmTyp == 14)))){
                    itemFile = (((String(itmTyp) + "-1/") + itemFile) + "-");
                    if (itmTyp < 10){
                        itemFile = (itemFile + (String((itmColor + 1)) + "-"));
                    };
                    itemFile = (itemFile + "1");
                };
            };
            return ((("res/gfx/itm/" + itemFile) + (((itmTyp == 0)) ? ".png" : ".png")));
        }
        public function ShowOptionScreen(evt:Event=undefined){
            var DoShowOptionScreen:* = null;
            var evt:* = evt;
            DoShowOptionScreen = function (){
                var i:* = 0;
                RemoveAll();
                SetCnt(CNT_CHANGE_PASSWORD_SMILEY_SAD, IMG_PASSWORD_SMILEY_SAD);
                SetCnt(CNT_CHANGE_PASSWORD_SMILEY_NEUTRAL, IMG_PASSWORD_SMILEY_NEUTRAL);
                SetCnt(CNT_CHANGE_PASSWORD_SMILEY_HAPPY, IMG_PASSWORD_SMILEY_HAPPY);
                Hide(CNT_CHANGE_PASSWORD_SMILEY_SAD);
                Hide(CNT_CHANGE_PASSWORD_SMILEY_NEUTRAL);
                Hide(CNT_CHANGE_PASSWORD_SMILEY_HAPPY);
                Add(BNC_SCREEN_OPTION);
                if (((txt[TXT_LUXURY_BUTTON]) && ((Savegame[SG_MUSH] >= 1000)))){
                    actor[BTN_OPTION_RESEND].y = ((POS_OPTION_Y + REL_OPTION_Y4) - 34);
                    actor[BTN_OPTION_CHANGE_PASSWORD].y = ((POS_OPTION_Y + REL_OPTION_Y3) - 17);
                    actor[BTN_OPTION_DELETE].y = ((POS_OPTION_Y + REL_OPTION_Y5) - 51);
                    Add(BTN_OPTION_LUXURY);
                };
                if (textDir == "right"){
                    actor[LBL_OPTION_CHANGE].x = ((actor[BTN_OPTION_CHANGE_NAME].x + actor[BTN_OPTION_CHANGE_NAME].width) - actor[LBL_OPTION_CHANGE].textWidth);
                    actor[LBL_OPTION_IMAGE].x = ((actor[IMG_OPTION_IMAGEBORDER].x + actor[IMG_OPTION_IMAGEBORDER].width) - actor[LBL_OPTION_IMAGE].textWidth);
                };
                EnablePopup(LBL_OPTION_VER, POPUP_BEGIN_LINE, "Player ID", 140, Savegame[SG_PLAYER_ID], POPUP_END_LINE, POPUP_BEGIN_LINE, "Server Ver.Cfg.", 140, param_server_version_cfg, POPUP_END_LINE, POPUP_BEGIN_LINE, "Server Ver.Act.", 140, param_server_version_act, POPUP_END_LINE);
                i = 0;
                while (i < 10) {
                    var _local2 = actor[(IMG_CHARIMG_BACKGROUND + i)];
                    with (_local2) {
                        x = ((POS_OPTION_X + REL_OPTION_IMAGE_X) + 4);
                        y = ((POS_OPTION_Y + REL_OPTION_Y2) + 4);
                        scaleX = 0.56;
                        scaleY = 0.56;
                    };
                    i = (i + 1);
                };
                _local2 = actor[LBL_OPTION_TITLE];
                with (_local2) {
                    x = ((POS_OPTION_X + int((SIZE_OPTION_X / 2))) - int((textWidth / 2)));
                };
                LoadCharacterImage();
                SetSliderValue(SLDR_OPTION_VOLUME, (so.data.volume + 1));
                if (lightMode){
                    Add(CB_LM_CHECKED);
                };
                if (chatSound){
                    Add(CB_CS_CHECKED);
                };
                if (compareItems){
                    Add(CB_COMPARE_CHECKED);
                };
                if (tvFunctionName != ""){
                    if (disableTV){
                        Add(CB_TV_CHECKED);
                    };
                } else {
                    Remove(CB_TV_CHECKED);
                    Remove(CB_TV_UNCHECKED);
                    Remove(LBL_TV_CHECKBOX);
                };
            };
            this.Load(this.BNC_SCREEN_OPTION);
            this.Load(this.IMG_PASSWORD_SMILEY_SAD);
            this.Load(this.IMG_PASSWORD_SMILEY_NEUTRAL);
            this.Load(this.IMG_PASSWORD_SMILEY_HAPPY);
            this.WhenLoaded(DoShowOptionScreen);
        }
        public function ShowFightScreen(fighterData:Array, fightData:Array, getPilz:Boolean, faceData:Array, isPvP:Boolean, weaponData:Array, HonorGain:int, GoldGain:int, isMQ:Boolean, isReplay:Boolean=false, BackPackSlot:int=-1, GuildBattleData:Array=undefined, lastFight:Boolean=false, guildFightExp:int=0, guildFightHonor:int=0, ownGuild:String="", oppGuild:String="", raidLevel:int=0){
            var isGuildBattle:* = false;
            var charWeapon:* = 0;
            var oppWeapon:* = 0;
            var charHasWeapon:* = false;
            var oppHasWeapon:* = false;
            var charWeaponType:* = 0;
            var oppWeaponType:* = 0;
            var tz:* = 0;
            var charShield:* = 0;
            var oppShield:* = 0;
            var i:* = 0;
            var oppVolk:* = 0;
            var oppMann:* = false;
            var oppKaste:* = 0;
            var thisCharVolk:* = 0;
            var thisCharMann:* = false;
            var thisCharKaste:* = 0;
            var thisCharMouth:* = undefined;
            var thisCharBeard:* = undefined;
            var thisCharNose:* = undefined;
            var thisCharEyes:* = undefined;
            var thisCharBrows:* = undefined;
            var thisCharEars:* = undefined;
            var thisCharHair:* = undefined;
            var thisCharSpecial:* = undefined;
            var thisCharSpecial2:* = undefined;
            var thisCharMonster:* = 0;
            var oppMouth:* = 0;
            var oppBeard:* = 0;
            var oppNose:* = 0;
            var oppEyes:* = 0;
            var oppBrows:* = 0;
            var oppEars:* = 0;
            var oppHair:* = 0;
            var oppSpecial:* = 0;
            var oppSpecial2:* = 0;
            var oppMonster:* = 0;
            var oppName:* = null;
            var thisCharName:* = null;
            var charFullLife:* = 0;
            var oppFullLife:* = 0;
            var charLife:* = 0;
            var charDamage:* = 0;
            var oppLife:* = 0;
            var charFlag:* = 0;
            var oppFlag:* = 0;
            var fightRound:* = 0;
            var oppStrike:* = false;
            var isRaid:* = false;
            var DoShowFightScreen:* = null;
            var fighterData:* = fighterData;
            var fightData:* = fightData;
            var getPilz:* = getPilz;
            var faceData:* = faceData;
            var isPvP:* = isPvP;
            var weaponData:* = weaponData;
            var HonorGain:* = HonorGain;
            var GoldGain:* = GoldGain;
            var isMQ:* = isMQ;
            var isReplay:Boolean = isReplay;
            var BackPackSlot:int = BackPackSlot;
            var GuildBattleData:* = GuildBattleData;
            var lastFight:Boolean = lastFight;
            var guildFightExp:int = guildFightExp;
            var guildFightHonor:int = guildFightHonor;
            var ownGuild:String = ownGuild;
            var oppGuild:String = oppGuild;
            var raidLevel:int = raidLevel;
            DoShowFightScreen = function (evt:Event=undefined){
                var i:* = 0;
                var DoStrikeTimer:* = null;
                var DoSkipFight:* = null;
                var strikeBreak:* = false;
                var DoStrikeEvent:* = null;
                var evt:* = evt;
                DoSkipFight = function (evt:MouseEvent=undefined, fightDone:Boolean=false){
                    var questID:* = 0;
                    var PilzBekommen:* = false;
                    var i:* = 0;
                    var charWin:* = false;
                    var lastHero:* = null;
                    var lastHeroWins:* = 0;
                    var heroCount:* = 0;
                    var thisWinner:* = undefined;
                    var evt:* = evt;
                    var fightDone:Boolean = fightDone;
                    questID = (Savegame[SG_ACTION_INDEX] - 1);
                    var rewardX:* = POS_FIGHT_REWARDGOLD_X;
                    PilzBekommen = getPilz;
                    var pilzX:* = POS_FIGHT_REWARDGOLD_X;
                    var rewardGoldText:* = "";
                    var fightStyle:* = 5;
                    fightLock = false;
                    DoStrikeTimer.stop();
                    DoStrikeTimer.removeEventListener(TimerEvent.TIMER, DoStrikeEvent);
                    actor[BTN_FIGHT_SKIP].removeEventListener(MouseEvent.CLICK, DoSkipFight);
                    actor[BTN_BATTLE_SKIP].removeEventListener(MouseEvent.CLICK, DoSkipFight);
                    actor[BTN_BATTLE_SKIPONE].removeEventListener(MouseEvent.CLICK, DoSkipFight);
                    fightRound = (int((fightData.length / 6)) - 1);
                    charLife = fightData[(fightRound * 6)];
                    charDamage = fightData[((fightRound * 6) + 1)];
                    charFlag = fightData[((fightRound * 6) + 2)];
                    oppLife = fightData[((fightRound * 6) + 3)];
                    oppDamage = fightData[((fightRound * 6) + 4)];
                    oppFlag = fightData[((fightRound * 6) + 5)];
                    charWin = (charLife > 0);
                    SetLifeBars();
                    if (((!(isGuildBattle)) || (lastFight))){
                        Remove(BTN_FIGHT_SKIP);
                        Remove(BTN_BATTLE_SKIP);
                        Remove(BTN_BATTLE_SKIPONE);
                        Add(LBL_FIGHT_SUMMARY);
                    };
                    if (isGuildBattle){
                        if (((charWin) && (lastFight))){
                            Play(SND_JINGLE);
                        };
                    } else {
                        Show(BNC_IF_STATS);
                        Add(BTN_FIGHT_OK);
                        if (charWin){
                            Play(SND_JINGLE);
                        };
                    };
                    if (isGuildBattle){
                        lastRoundFighterName = thisCharName;
                        if (charWin){
                            if (winners[("name_" + thisCharName)]){
                                var _local4 = winners;
                                var _local5 = ("name_" + thisCharName);
                                var _local6 = (_local4[_local5] + 1);
                                _local4[_local5] = _local6;
                            } else {
                                winners[("name_" + thisCharName)] = 1;
                            };
                        };
                        if (((towerFightMode) && ((guildFightHonor >= 0)))){
                            SetCnt(CNT_FIGHT_SLOT, GetItemID(SG_INVENTORY_OFFS, (guildFightHonor + 10), Savegame));
                            ItemPopup(CNT_FIGHT_SLOT, (SG_INVENTORY_OFFS + ((guildFightHonor + 10) * SG_ITM_SIZE)), undefined, false, true, false);
                            guildFightHonor = 0;
                        } else {
                            SetCnt(CNT_FIGHT_SLOT, C_EMPTY);
                            EnablePopup(CNT_FIGHT_SLOT);
                        };
                        if (lastFight){
                            lastHero = "";
                            lastHeroWins = 0;
                            heroCount = 0;
                            if (txt[TXT_HERO_OF_THE_DAY]){
                                for (thisWinner in winners) {
                                    if (winners[thisWinner] > lastHeroWins){
                                        lastHeroWins = winners[thisWinner];
                                        lastHero = txt[TXT_HERO_OF_THE_DAY].split("%1").join(thisWinner.substr(5)).split("%2").join(String(lastHeroWins));
                                        heroCount = 1;
                                    } else {
                                        if (winners[thisWinner] == lastHeroWins){
                                            lastHeroWins = winners[thisWinner];
                                            lastHero = (lastHero + (String.fromCharCode(13) + txt[TXT_HERO_OF_THE_DAY].split("%1").join(thisWinner.substr(5)).split("%2").join(String(lastHeroWins))));
                                            heroCount = (heroCount + 1);
                                        };
                                    };
                                };
                                if ((((((lastHeroWins >= 5)) && (charWin))) && (!(isRaid)))){
                                    Add(BNC_HERO_OF_THE_DAY);
                                    if (heroCount == 1){
                                        actor[LBL_HERO_OF_THE_DAY_TITLE].text = ((txt[TXT_HERO_OF_THE_DAY_TITLE]) ? txt[TXT_HERO_OF_THE_DAY_TITLE] : "");
                                    } else {
                                        actor[LBL_HERO_OF_THE_DAY_TITLE].text = ((txt[TXT_HEROES_OF_THE_DAY_TITLE]) ? txt[TXT_HEROES_OF_THE_DAY_TITLE] : "");
                                    };
                                    actor[LBL_HERO_OF_THE_DAY_TITLE].x = (POS_SCREEN_TITLE_X - (actor[LBL_HERO_OF_THE_DAY_TITLE].width / 2));
                                    actor[LBL_HERO_OF_THE_DAY].text = lastHero;
                                    actor[LBL_HERO_OF_THE_DAY].x = (POS_SCREEN_TITLE_X - (actor[LBL_HERO_OF_THE_DAY].width / 2));
                                };
                            };
                            Add(BTN_FIGHT_OK);
                            Add(BNC_FIGHT_REWARDS);
                            Hide(CNT_FIGHT_REWARDGOLD, LBL_FIGHT_REWARDGOLD, CNT_FIGHT_REWARDSILVER, LBL_FIGHT_REWARDSILVER, CNT_FIGHT_REWARDMUSH, LBL_FIGHT_REWARDMUSH, LBL_FIGHT_REWARDEXP);
                            if ((((guildFightExp > 0)) && (charWin))){
                                if (towerFightMode){
                                    _local4 = actor[LBL_FIGHT_REWARDGOLD];
                                    with (_local4) {
                                        visible = true;
                                        text = String(guildFightExp);
                                        x = (rewardX - textWidth);
                                    };
                                    _local4 = actor[CNT_FIGHT_REWARDGOLD];
                                    with (_local4) {
                                        visible = true;
                                        x = ((actor[LBL_FIGHT_REWARDGOLD].x - width) - 8);
                                    };
                                } else {
                                    _local4 = actor[LBL_FIGHT_REWARDEXP];
                                    with (_local4) {
                                        visible = true;
                                        if (textDir == "right"){
                                            text = ((String(Math.abs(guildFightExp)) + " :") + txt[TXT_EXP]);
                                        } else {
                                            text = ((txt[TXT_EXP] + ": ") + String(Math.abs(guildFightExp)));
                                        };
                                    };
                                };
                            };
                            if (!isRaid){
                                _local4 = actor[LBL_FIGHT_REWARDGOLD];
                                with (_local4) {
                                    visible = true;
                                    if (textDir == "right"){
                                        text = ((String(Math.abs(guildFightHonor)) + " ") + txt[(((guildFightHonor > 0)) ? TXT_GUILD_HONOR_GAINED : TXT_GUILD_HONOR_LOST)]);
                                    } else {
                                        text = ((txt[(((guildFightHonor > 0)) ? TXT_GUILD_HONOR_GAINED : TXT_GUILD_HONOR_LOST)] + " ") + String(Math.abs(guildFightHonor)));
                                    };
                                    x = (rewardX - textWidth);
                                };
                            };
                        } else {
                            if ((evt is MouseEvent)){
                                if (GetActorID(evt.target) == BTN_BATTLE_SKIP){
                                    skipGuildFights = (Math.abs(skipGuildFights) + 1);
                                };
                            };
                        };
                    } else {
                        if (isPvP){
                            Add(BNC_FIGHT_REWARDS);
                            Hide(CNT_FIGHT_REWARDGOLD, LBL_FIGHT_REWARDGOLD, CNT_FIGHT_REWARDSILVER, LBL_FIGHT_REWARDSILVER, CNT_FIGHT_REWARDMUSH, LBL_FIGHT_REWARDMUSH, LBL_FIGHT_REWARDEXP);
                            if (HonorGain != 0){
                                _local4 = actor[LBL_FIGHT_REWARDEXP];
                                with (_local4) {
                                    visible = true;
                                    if (textDir == "right"){
                                        text = ((String(Math.abs(HonorGain)) + " ") + txt[(((HonorGain > 0)) ? TXT_HONOR_GAINED : TXT_HONOR_LOST)]);
                                    } else {
                                        text = ((txt[(((HonorGain > 0)) ? TXT_HONOR_GAINED : TXT_HONOR_LOST)] + " ") + String(Math.abs(HonorGain)));
                                    };
                                };
                            };
                            if (GoldGain > 0){
                                if (textDir == "right"){
                                    rewardGoldText = (" " + txt[TXT_GOLD_GAINED]);
                                } else {
                                    rewardGoldText = (txt[TXT_GOLD_GAINED] + " ");
                                };
                            } else {
                                if (GoldGain < 0){
                                    if (textDir == "right"){
                                        rewardGoldText = (" " + txt[TXT_GOLD_LOST]);
                                    } else {
                                        rewardGoldText = (txt[TXT_GOLD_LOST] + " ");
                                    };
                                };
                            };
                            if (SilberAnteil(Math.abs(GoldGain)) > 0){
                                if (textDir != "right"){
                                    _local4 = actor[CNT_FIGHT_REWARDSILVER];
                                    with (_local4) {
                                        visible = true;
                                        x = (rewardX - width);
                                        rewardX = (x - 8);
                                    };
                                };
                                _local4 = actor[LBL_FIGHT_REWARDSILVER];
                                with (_local4) {
                                    visible = true;
                                    if (textDir == "right"){
                                        text = (SilberAnteil(Math.abs(GoldGain)) + rewardGoldText);
                                    } else {
                                        text = ((((GoldAnteil(Math.abs(GoldGain)) > 0)) ? "" : rewardGoldText) + SilberAnteil(Math.abs(GoldGain)));
                                    };
                                    x = (rewardX - textWidth);
                                    rewardX = (x - (((textDir == "right")) ? 8 : 14));
                                };
                                if (textDir == "right"){
                                    _local4 = actor[CNT_FIGHT_REWARDSILVER];
                                    with (_local4) {
                                        visible = true;
                                        x = (rewardX - width);
                                        rewardX = (x - 14);
                                    };
                                };
                            };
                            if (GoldAnteil(Math.abs(GoldGain)) > 0){
                                if (textDir != "right"){
                                    _local4 = actor[CNT_FIGHT_REWARDGOLD];
                                    with (_local4) {
                                        visible = true;
                                        x = (rewardX - width);
                                        rewardX = (x - 8);
                                    };
                                };
                                _local4 = actor[LBL_FIGHT_REWARDGOLD];
                                with (_local4) {
                                    visible = true;
                                    if (textDir == "right"){
                                        text = (GoldAnteil(Math.abs(GoldGain)) + (((SilberAnteil(Math.abs(GoldGain)) > 0)) ? "" : rewardGoldText));
                                    } else {
                                        text = (rewardGoldText + GoldAnteil(Math.abs(GoldGain)));
                                    };
                                    x = (rewardX - textWidth);
                                    rewardX = (x - (((textDir == "right")) ? 8 : 14));
                                };
                                if (textDir == "right"){
                                    _local4 = actor[CNT_FIGHT_REWARDGOLD];
                                    with (_local4) {
                                        visible = true;
                                        x = (rewardX - width);
                                        rewardX = (x - 14);
                                    };
                                };
                            };
                            SetCnt(CNT_FIGHT_SLOT, C_EMPTY);
                            EnablePopup(CNT_FIGHT_SLOT);
                        } else {
                            if (((isMQ) && (charWin))){
                                Add(BNC_FIGHT_REWARDS);
                                Hide(CNT_FIGHT_REWARDGOLD, LBL_FIGHT_REWARDGOLD, CNT_FIGHT_REWARDSILVER, LBL_FIGHT_REWARDSILVER, CNT_FIGHT_REWARDMUSH, LBL_FIGHT_REWARDMUSH, LBL_FIGHT_REWARDEXP);
                                if (HonorGain > 0){
                                    _local4 = actor[LBL_FIGHT_REWARDEXP];
                                    with (_local4) {
                                        visible = true;
                                        if (textDir == "right"){
                                            text = ((String(HonorGain) + " :") + txt[TXT_EXP]);
                                        } else {
                                            text = ((txt[TXT_EXP] + ": ") + String(HonorGain));
                                        };
                                    };
                                };
                                if (PilzBekommen){
                                    _local4 = actor[CNT_FIGHT_REWARDMUSH];
                                    with (_local4) {
                                        visible = true;
                                        x = (pilzX - width);
                                        pilzX = (x - 8);
                                    };
                                    _local4 = actor[LBL_FIGHT_REWARDMUSH];
                                    with (_local4) {
                                        visible = true;
                                        text = "1";
                                        x = (pilzX - textWidth);
                                        pilzX = (x - 14);
                                    };
                                    AnimateAch(CNT_FIGHT_REWARDMUSH, actor[CNT_FIGHT_REWARDMUSH].y);
                                };
                                if (SilberAnteil(GoldGain) > 0){
                                    _local4 = actor[CNT_FIGHT_REWARDSILVER];
                                    with (_local4) {
                                        visible = true;
                                        x = (rewardX - width);
                                        rewardX = (x - 8);
                                    };
                                    _local4 = actor[LBL_FIGHT_REWARDSILVER];
                                    with (_local4) {
                                        visible = true;
                                        text = SilberAnteil(GoldGain);
                                        x = (rewardX - textWidth);
                                        rewardX = (x - 14);
                                    };
                                };
                                if (GoldAnteil(GoldGain) > 0){
                                    _local4 = actor[CNT_FIGHT_REWARDGOLD];
                                    with (_local4) {
                                        visible = true;
                                        x = (rewardX - width);
                                        rewardX = (x - 8);
                                    };
                                    _local4 = actor[LBL_FIGHT_REWARDGOLD];
                                    with (_local4) {
                                        visible = true;
                                        text = GoldAnteil(GoldGain);
                                        x = (rewardX - textWidth);
                                        rewardX = (x - 14);
                                    };
                                };
                                if (BackPackSlot >= 0){
                                    SetCnt(CNT_FIGHT_SLOT, GetItemID(SG_INVENTORY_OFFS, (BackPackSlot + 10), Savegame));
                                    ItemPopup(CNT_FIGHT_SLOT, (SG_INVENTORY_OFFS + ((BackPackSlot + 10) * SG_ITM_SIZE)), undefined, false, true, false);
                                } else {
                                    SetCnt(CNT_FIGHT_SLOT, C_EMPTY);
                                    EnablePopup(CNT_FIGHT_SLOT);
                                };
                            } else {
                                if (isMQ){
                                    hasLostMQ = true;
                                } else {
                                    if (((charWin) && ((Savegame[SG_ACTION_STATUS] == 2)))){
                                        Add(BNC_FIGHT_REWARDS);
                                        Hide(CNT_FIGHT_REWARDGOLD, LBL_FIGHT_REWARDGOLD, CNT_FIGHT_REWARDSILVER, LBL_FIGHT_REWARDSILVER, CNT_FIGHT_REWARDMUSH, LBL_FIGHT_REWARDMUSH, LBL_FIGHT_REWARDEXP);
                                        if (int(Savegame[(SG_QUEST_OFFER_EXP1 + questID)]) > 0){
                                            _local4 = actor[LBL_FIGHT_REWARDEXP];
                                            with (_local4) {
                                                visible = true;
                                                if (textDir == "right"){
                                                    text = ((Savegame[(SG_QUEST_OFFER_EXP1 + questID)] + " :") + txt[TXT_EXP]);
                                                } else {
                                                    text = ((txt[TXT_EXP] + ": ") + Savegame[(SG_QUEST_OFFER_EXP1 + questID)]);
                                                };
                                            };
                                        };
                                        if (PilzBekommen){
                                            _local4 = actor[CNT_FIGHT_REWARDMUSH];
                                            with (_local4) {
                                                visible = true;
                                                x = (pilzX - width);
                                                pilzX = (x - 8);
                                            };
                                            _local4 = actor[LBL_FIGHT_REWARDMUSH];
                                            with (_local4) {
                                                visible = true;
                                                text = "1";
                                                x = (pilzX - textWidth);
                                                pilzX = (x - 14);
                                            };
                                            AnimateAch(CNT_FIGHT_REWARDMUSH, actor[CNT_FIGHT_REWARDMUSH].y);
                                        };
                                        if (SilberAnteil(Savegame[(SG_QUEST_OFFER_GOLD1 + questID)]) > 0){
                                            _local4 = actor[CNT_FIGHT_REWARDSILVER];
                                            with (_local4) {
                                                visible = true;
                                                x = (rewardX - width);
                                                rewardX = (x - 8);
                                            };
                                            _local4 = actor[LBL_FIGHT_REWARDSILVER];
                                            with (_local4) {
                                                visible = true;
                                                text = SilberAnteil(Savegame[(SG_QUEST_OFFER_GOLD1 + questID)]);
                                                x = (rewardX - textWidth);
                                                rewardX = (x - 14);
                                            };
                                        };
                                        if (GoldAnteil(Savegame[(SG_QUEST_OFFER_GOLD1 + questID)]) > 0){
                                            _local4 = actor[CNT_FIGHT_REWARDGOLD];
                                            with (_local4) {
                                                visible = true;
                                                x = (rewardX - width);
                                                rewardX = (x - 8);
                                            };
                                            _local4 = actor[LBL_FIGHT_REWARDGOLD];
                                            with (_local4) {
                                                visible = true;
                                                text = GoldAnteil(Savegame[(SG_QUEST_OFFER_GOLD1 + questID)]);
                                                x = (rewardX - textWidth);
                                                rewardX = (x - 14);
                                            };
                                        };
                                        if (int(Savegame[((SG_QUEST_OFFER_REWARD_ITM1 + (questID * SG_ITM_SIZE)) + SG_ITM_TYP)]) > 0){
                                            SetCnt(CNT_FIGHT_SLOT, GetItemID(SG_QUEST_OFFER_REWARD_ITM1, questID));
                                            ItemPopup(CNT_FIGHT_SLOT, (SG_QUEST_OFFER_REWARD_ITM1 + (questID * SG_ITM_SIZE)), undefined, false, true, false);
                                        } else {
                                            SetCnt(CNT_FIGHT_SLOT, C_EMPTY);
                                            EnablePopup(CNT_FIGHT_SLOT);
                                        };
                                    };
                                };
                            };
                        };
                    };
                    if (charWin){
                        if ((charLife / charFullLife) > 0.8){
                            fightStyle = 0;
                        } else {
                            if ((charLife / charFullLife) > 0.4){
                                fightStyle = 5;
                            } else {
                                if ((charLife / charFullLife) > 0.2){
                                    fightStyle = 10;
                                } else {
                                    fightStyle = 15;
                                };
                            };
                        };
                    } else {
                        if ((oppLife / oppFullLife) > 0.8){
                            fightStyle = 0;
                        } else {
                            if ((oppLife / oppFullLife) > 0.4){
                                fightStyle = 5;
                            } else {
                                if ((oppLife / oppFullLife) > 0.2){
                                    fightStyle = 10;
                                } else {
                                    fightStyle = 15;
                                };
                            };
                        };
                    };
                    _local4 = actor[LBL_FIGHT_SUMMARY];
                    with (_local4) {
                        width = SIZE_FIGHT_RESULT_TEXT_X;
                        wordWrap = true;
                        if (isGuildBattle){
                            if (lastFight){
                                if (towerFightMode){
                                    if (charWin){
                                        text = txt[(TXT_TOWER_WON + int((Math.random() * 5)))];
                                    } else {
                                        text = txt[(TXT_TOWER_LOST + int((Math.random() * 5)))];
                                    };
                                } else {
                                    if (isRaid){
                                        if (charWin){
                                            text = txt[(TXT_RAID_WON + int((Math.random() * 5)))];
                                        } else {
                                            text = txt[(TXT_RAID_LOST + int((Math.random() * 5)))];
                                        };
                                    } else {
                                        if (charWin){
                                            text = txt[(TXT_GUILD_BATTLE_WON + int((Math.random() * 5)))];
                                        } else {
                                            text = txt[(TXT_GUILD_BATTLE_LOST + int((Math.random() * 5)))];
                                        };
                                    };
                                };
                            } else {
                                if (!inStrikeAni){
                                    nextFightTimer.start();
                                } else {
                                    strikeBreak = true;
                                };
                                return;
                            };
                        } else {
                            if (isPvP){
                                text = txt[((int((Math.random() * 5)) + fightStyle) + ((charWin) ? TXT_PVP_WIN : TXT_PVP_LOSE))];
                            } else {
                                text = txt[((int((Math.random() * 5)) + fightStyle) + ((charWin) ? TXT_FIGHT_WIN : TXT_FIGHT_LOSE))];
                            };
                        };
                        x = (POS_SCREEN_TITLE_X - int((width / 2)));
                    };
                    Arabize(LBL_FIGHT_SUMMARY);
                };
                var SetLifeBars:* = function (whichOne:int=0){
                    var barWidth:* = 0;
                    var whichOne:int = whichOne;
                    if ((((whichOne == 0)) || ((whichOne == 1)))){
                        var _local3 = actor[LBL_LIFEBAR_CHAR];
                        with (_local3) {
                            if (textDir == "right"){
                                text = ((String(charFullLife) + " / ") + String(charLife));
                            } else {
                                text = ((String(charLife) + " / ") + String(charFullLife));
                            };
                            x = ((POS_FIGHT_CHARIMG_X + 150) - int((textWidth / 2)));
                        };
                        _local3 = actor[IMG_LIFEBAR_FILL_CHAR];
                        with (_local3) {
                            barWidth = ((Number(charLife) / Number(charFullLife)) * 279);
                            if (barWidth < 0){
                                barWidth = 0;
                            };
                            width = barWidth;
                            scaleY = 1;
                        };
                    };
                    if ((((whichOne == 0)) || ((whichOne == 2)))){
                        _local3 = actor[LBL_LIFEBAR_OPP];
                        with (_local3) {
                            if (textDir == "right"){
                                text = ((String(oppFullLife) + " / ") + String(oppLife));
                            } else {
                                text = ((String(oppLife) + " / ") + String(oppFullLife));
                            };
                            x = ((POS_OPPIMG_X + 150) - int((textWidth / 2)));
                        };
                        _local3 = actor[CNT_LIFEBAR_FILL_OPP];
                        with (_local3) {
                            barWidth = ((Number(oppLife) / Number(oppFullLife)) * 279);
                            if (barWidth < 0){
                                barWidth = 0;
                            };
                            width = barWidth;
                            scaleY = 1;
                        };
                    };
                };
                DoStrikeEvent = function (evt:TimerEvent){
                    if (((!(OnStage(IMG_FIGHT_BOX1))) || (strikeBreak))){
                        DoStrikeTimer.stop();
                        DoStrikeTimer.removeEventListener(TimerEvent.TIMER, DoStrikeEvent);
                        return;
                    };
                    if ((((skipGuildFights > 0)) && (isGuildBattle))){
                        DoSkipFight();
                        DoStrikeTimer.stop();
                        DoStrikeTimer.removeEventListener(TimerEvent.TIMER, DoStrikeEvent);
                        return;
                    };
                    if (fightRound > (int((fightData.length / 6)) - 1)){
                        DoSkipFight(undefined, true);
                        return;
                    };
                    charLife = fightData[(fightRound * 6)];
                    charDamage = fightData[((fightRound * 6) + 1)];
                    charFlag = fightData[((fightRound * 6) + 2)];
                    oppLife = fightData[((fightRound * 6) + 3)];
                    oppDamage = fightData[((fightRound * 6) + 4)];
                    oppFlag = fightData[((fightRound * 6) + 5)];
                    if ((((((((fightRound == 0)) && (!(oppStrike)))) && ((charDamage == 0)))) && ((charFlag == 0)))){
                        oppStrike = true;
                    };
                    DoStrikeTimer.stop();
                    WeaponStrike(oppStrike);
                    if (((((oppStrike) && ((charLife <= 0)))) || (((!(oppStrike)) && ((oppLife <= 0)))))){
                        return;
                    };
                    oppStrike = !(oppStrike);
                    if (!oppStrike){
                        fightRound++;
                    };
                };
                var WeaponStrike:* = function (opponent:Boolean=false){
                    var StrikeAniTimer:* = null;
                    var StrikeAlpha:* = NaN;
                    var BulletAlpha:* = NaN;
                    var ShieldAlpha:* = NaN;
                    var DamageAlpha:* = NaN;
                    var OnoAlpha:* = NaN;
                    var strikeVal:* = NaN;
                    var strikePhase:* = 0;
                    var damageIndicatorActive:* = false;
                    var weaponType:* = 0;
                    var onoID:* = 0;
                    var DoSkip:* = false;
                    var catapultStrike:* = false;
                    var StrikeAniTimerEvent:* = null;
                    var opponent:Boolean = opponent;
                    StrikeAniTimerEvent = function (evt:TimerEvent){
                        var evt:* = evt;
                        if (!OnStage(IMG_FIGHT_BOX1)){
                            inStrikeAni = false;
                            if (strikeBreak){
                                nextFightTimer.start();
                            };
                            StrikeAniTimer.stop();
                            StrikeAniTimer.removeEventListener(TimerEvent.TIMER, StrikeAniTimerEvent);
                            return;
                        };
                        switch (((catapultStrike) ? 4 : weaponType)){
                            case 1:
                                if ((((((((opponent) ? oppWeapon : charWeapon) < 0)) && ((((opponent) ? oppWeapon : charWeapon) > -4)))) || ((((opponent) ? oppWeapon : charWeapon) < -6)))){
                                    switch (strikePhase){
                                        case 0:
                                            if ((strikeVal == 0)){
                                                Play(GetWeaponSound(((opponent) ? oppWeaponType : charWeaponType), ((opponent) ? oppWeapon : charWeapon), 0));
                                            };
                                            strikeVal = (strikeVal + 0.2);
                                            if ((((((opponent) ? oppFlag : charFlag) == 1)) && ((strikeVal >= 0.4)))){
                                                ShieldAlpha = 1;
                                            };
                                            if (strikeVal >= 0.4){
                                                strikePhase++;
                                            };
                                            break;
                                        case 1:
                                            strikeVal = (strikeVal + 0.2);
                                            if (strikeVal >= 1){
                                                strikeVal = 1;
                                                strikePhase++;
                                                damageIndicatorActive = true;
                                                DamageAlpha = 1;
                                                SetLifeBars(((opponent) ? 1 : 2));
                                                var _local3 = actor[LBL_DAMAGE_INDICATOR];
                                                with (_local3) {
                                                    text = ("-" + String(((opponent) ? oppDamage : charDamage)));
                                                    if (text == "-0"){
                                                        if (((opponent) ? oppFlag : charFlag) == 1){
                                                            text = txt[TXT_GEBLOCKT];
                                                            Play(GetWeaponSound(((opponent) ? oppWeaponType : charWeaponType), ((opponent) ? oppWeapon : charWeapon), 2));
                                                        } else {
                                                            text = txt[TXT_AUSGEWICHEN];
                                                        };
                                                    } else {
                                                        Play(GetWeaponSound(((opponent) ? oppWeaponType : charWeaponType), ((opponent) ? oppWeapon : charWeapon), ((((opponent) ? oppFlag : charFlag))==3) ? 3 : 1));
                                                    };
                                                    x = ((POS_SCREEN_TITLE_X + (((opponent) ? -1 : 1) * 200)) - int((textWidth / 2)));
                                                    y = (POS_FIGHT_WEAPONS_Y - 100);
                                                };
                                                if (((((opponent) && ((charLife <= 0)))) || (((!(opponent)) && ((oppLife <= 0)))))){
                                                    DoSkip = true;
                                                };
                                            };
                                            break;
                                        case 2:
                                            DamageAlpha = (DamageAlpha - 0.075);
                                            StrikeAlpha = (StrikeAlpha - 0.2);
                                            ShieldAlpha = (ShieldAlpha - 0.2);
                                            actor[LBL_DAMAGE_INDICATOR].y = (actor[LBL_DAMAGE_INDICATOR].y - 2);
                                            if (ShieldAlpha <= 0){
                                                ShieldAlpha = 0;
                                            };
                                            if (StrikeAlpha <= 0){
                                                StrikeAlpha = 0;
                                            };
                                            if (DamageAlpha <= 0){
                                                DamageAlpha = 0;
                                                inStrikeAni = false;
                                                if (strikeBreak){
                                                    nextFightTimer.start();
                                                };
                                                StrikeAniTimer.stop();
                                                StrikeAniTimer.removeEventListener(TimerEvent.TIMER, StrikeAniTimerEvent);
                                                DoStrikeTimer.start();
                                            };
                                            break;
                                    };
                                } else {
                                    switch (strikePhase){
                                        case 0:
                                            if ((strikeVal == 0)){
                                                Play(GetWeaponSound(((opponent) ? oppWeaponType : charWeaponType), ((opponent) ? oppWeapon : charWeapon), 0));
                                            };
                                            strikeVal = (strikeVal + 0.1);
                                            if ((((((opponent) ? oppFlag : charFlag) == 1)) && ((strikeVal >= 0.5)))){
                                                ShieldAlpha = 1;
                                            };
                                            if (strikeVal >= 0.8){
                                                strikePhase++;
                                            };
                                            break;
                                        case 1:
                                            strikeVal = (strikeVal + 0.15);
                                            if (strikeVal >= 1){
                                                SetCnt(CNT_FIGHT_ONO, onoID, 0, 0, true);
                                                OnoAlpha = 1;
                                                strikeVal = 1;
                                                strikePhase++;
                                                damageIndicatorActive = true;
                                                DamageAlpha = 1;
                                                SetLifeBars(((opponent) ? 1 : 2));
                                                _local3 = actor[LBL_DAMAGE_INDICATOR];
                                                with (_local3) {
                                                    text = ("-" + String(((opponent) ? oppDamage : charDamage)));
                                                    if (text == "-0"){
                                                        if (((opponent) ? oppFlag : charFlag) == 1){
                                                            text = txt[TXT_GEBLOCKT];
                                                            Play(GetWeaponSound(((opponent) ? oppWeaponType : charWeaponType), ((opponent) ? oppWeapon : charWeapon), 2));
                                                        } else {
                                                            text = txt[TXT_AUSGEWICHEN];
                                                        };
                                                    } else {
                                                        Play(GetWeaponSound(((opponent) ? oppWeaponType : charWeaponType), ((opponent) ? oppWeapon : charWeapon), ((((opponent) ? oppFlag : charFlag))==3) ? 3 : 1));
                                                    };
                                                    x = ((POS_SCREEN_TITLE_X + (((opponent) ? -1 : 1) * 200)) - int((textWidth / 2)));
                                                    y = (POS_FIGHT_WEAPONS_Y - 100);
                                                };
                                                if (((((opponent) && ((charLife <= 0)))) || (((!(opponent)) && ((oppLife <= 0)))))){
                                                    DoSkip = true;
                                                };
                                            };
                                            break;
                                        case 2:
                                            DamageAlpha = (DamageAlpha - 0.075);
                                            StrikeAlpha = (StrikeAlpha - 0.2);
                                            ShieldAlpha = (ShieldAlpha - 0.2);
                                            OnoAlpha = (OnoAlpha - 0.2);
                                            actor[LBL_DAMAGE_INDICATOR].y = (actor[LBL_DAMAGE_INDICATOR].y - 2);
                                            if (OnoAlpha <= 0){
                                                OnoAlpha = 0;
                                            };
                                            if (ShieldAlpha <= 0){
                                                ShieldAlpha = 0;
                                            };
                                            if (StrikeAlpha <= 0){
                                                StrikeAlpha = 0;
                                            };
                                            if (DamageAlpha <= 0){
                                                DamageAlpha = 0;
                                                inStrikeAni = false;
                                                if (strikeBreak){
                                                    nextFightTimer.start();
                                                };
                                                StrikeAniTimer.stop();
                                                StrikeAniTimer.removeEventListener(TimerEvent.TIMER, StrikeAniTimerEvent);
                                                DoStrikeTimer.start();
                                            };
                                            break;
                                    };
                                };
                                break;
                            case 2:
                                switch (strikePhase){
                                    case 0:
                                        strikeVal = (strikeVal + 0.15);
                                        if (strikeVal >= 0.4){
                                            strikePhase++;
                                            BulletAlpha = 1;
                                            Play(GetWeaponSound(((opponent) ? oppWeaponType : charWeaponType), ((opponent) ? oppWeapon : charWeapon), 0));
                                        };
                                        break;
                                    case 1:
                                        strikeVal = (strikeVal + 0.15);
                                        if ((((((opponent) ? oppFlag : charFlag) == 1)) && ((strikeVal >= 0.5)))){
                                            ShieldAlpha = 1;
                                        };
                                        if (strikeVal >= 1){
                                            SetCnt(CNT_FIGHT_ONO, onoID, 0, 0, true);
                                            OnoAlpha = 1;
                                            strikeVal = 1;
                                            strikePhase++;
                                            DamageAlpha = 1;
                                            damageIndicatorActive = true;
                                            SetLifeBars(((opponent) ? 1 : 2));
                                            _local3 = actor[LBL_DAMAGE_INDICATOR];
                                            with (_local3) {
                                                text = ("-" + String(((opponent) ? oppDamage : charDamage)));
                                                if (text == "-0"){
                                                    if (((opponent) ? oppFlag : charFlag) == 1){
                                                        text = txt[TXT_GEBLOCKT];
                                                        Play(GetWeaponSound(((opponent) ? oppWeaponType : charWeaponType), ((opponent) ? oppWeapon : charWeapon), 2));
                                                    } else {
                                                        text = txt[TXT_AUSGEWICHEN];
                                                    };
                                                } else {
                                                    Play(GetWeaponSound(((opponent) ? oppWeaponType : charWeaponType), ((opponent) ? oppWeapon : charWeapon), ((((opponent) ? oppFlag : charFlag))==3) ? 3 : 1));
                                                };
                                                x = ((POS_SCREEN_TITLE_X + (((opponent) ? -1 : 1) * 200)) - int((textWidth / 2)));
                                                y = (POS_FIGHT_WEAPONS_Y - 100);
                                            };
                                            if (((((opponent) && ((charLife <= 0)))) || (((!(opponent)) && ((oppLife <= 0)))))){
                                                DoSkip = true;
                                            };
                                        };
                                        break;
                                    case 2:
                                        DamageAlpha = (DamageAlpha - 0.075);
                                        StrikeAlpha = (StrikeAlpha - 0.2);
                                        ShieldAlpha = (ShieldAlpha - 0.2);
                                        BulletAlpha = (BulletAlpha - 0.2);
                                        OnoAlpha = (OnoAlpha - 0.2);
                                        actor[LBL_DAMAGE_INDICATOR].y = (actor[LBL_DAMAGE_INDICATOR].y - 2);
                                        if (OnoAlpha <= 0){
                                            OnoAlpha = 0;
                                        };
                                        if (ShieldAlpha <= 0){
                                            ShieldAlpha = 0;
                                        };
                                        if (StrikeAlpha <= 0){
                                            StrikeAlpha = 0;
                                        };
                                        if (DamageAlpha <= 0){
                                            DamageAlpha = 0;
                                            inStrikeAni = false;
                                            if (strikeBreak){
                                                nextFightTimer.start();
                                            };
                                            StrikeAniTimer.stop();
                                            StrikeAniTimer.removeEventListener(TimerEvent.TIMER, StrikeAniTimerEvent);
                                            DoStrikeTimer.start();
                                        };
                                        break;
                                };
                                break;
                            case 3:
                                switch (strikePhase){
                                    case 0:
                                        strikeVal = (strikeVal + 0.05);
                                        BulletAlpha = 1;
                                        if (strikeVal >= 0.3){
                                            strikePhase++;
                                            Play(GetWeaponSound(((opponent) ? oppWeaponType : charWeaponType), ((opponent) ? oppWeapon : charWeapon), 0));
                                        };
                                        break;
                                    case 1:
                                        strikeVal = (strikeVal + 0.1);
                                        if ((((((opponent) ? oppFlag : charFlag) == 1)) && ((strikeVal >= 0.5)))){
                                            ShieldAlpha = 1;
                                        };
                                        if (strikeVal >= 1){
                                            SetCnt(CNT_FIGHT_ONO, onoID, 0, 0, true);
                                            OnoAlpha = 1;
                                            strikeVal = 1;
                                            strikePhase++;
                                            DamageAlpha = 1;
                                            damageIndicatorActive = true;
                                            SetLifeBars(((opponent) ? 1 : 2));
                                            _local3 = actor[LBL_DAMAGE_INDICATOR];
                                            with (_local3) {
                                                text = ("-" + String(((opponent) ? oppDamage : charDamage)));
                                                if (text == "-0"){
                                                    if (((opponent) ? oppFlag : charFlag) == 1){
                                                        text = txt[TXT_GEBLOCKT];
                                                        Play(GetWeaponSound(((opponent) ? oppWeaponType : charWeaponType), ((opponent) ? oppWeapon : charWeapon), 2));
                                                    } else {
                                                        text = txt[TXT_AUSGEWICHEN];
                                                    };
                                                } else {
                                                    Play(GetWeaponSound(((opponent) ? oppWeaponType : charWeaponType), ((opponent) ? oppWeapon : charWeapon), ((((opponent) ? oppFlag : charFlag))==3) ? 3 : 1));
                                                };
                                                x = ((POS_SCREEN_TITLE_X + (((opponent) ? -1 : 1) * 200)) - int((textWidth / 2)));
                                                y = (POS_FIGHT_WEAPONS_Y - 100);
                                            };
                                            if (((((opponent) && ((charLife <= 0)))) || (((!(opponent)) && ((oppLife <= 0)))))){
                                                DoSkip = true;
                                            };
                                        };
                                        break;
                                    case 2:
                                        DamageAlpha = (DamageAlpha - 0.075);
                                        StrikeAlpha = (StrikeAlpha - 0.2);
                                        ShieldAlpha = (ShieldAlpha - 0.2);
                                        BulletAlpha = (BulletAlpha - 0.2);
                                        OnoAlpha = (OnoAlpha - 0.2);
                                        actor[LBL_DAMAGE_INDICATOR].y = (actor[LBL_DAMAGE_INDICATOR].y - 2);
                                        if (OnoAlpha <= 0){
                                            OnoAlpha = 0;
                                        };
                                        if (ShieldAlpha <= 0){
                                            ShieldAlpha = 0;
                                        };
                                        if (StrikeAlpha <= 0){
                                            StrikeAlpha = 0;
                                        };
                                        if (DamageAlpha <= 0){
                                            DamageAlpha = 0;
                                            inStrikeAni = false;
                                            if (strikeBreak){
                                                nextFightTimer.start();
                                            };
                                            StrikeAniTimer.stop();
                                            StrikeAniTimer.removeEventListener(TimerEvent.TIMER, StrikeAniTimerEvent);
                                            DoStrikeTimer.start();
                                        };
                                        break;
                                };
                                break;
                            case 4:
                                switch (strikePhase){
                                    case 0:
                                        if (strikeVal == 0){
                                            Play(SND_CATAPULT_LAUNCH);
                                            Load(IMG_FIGHT_MUSH);
                                        };
                                        strikeVal = (strikeVal + 0.01);
                                        if (strikeVal >= 0.3){
                                            strikePhase++;
                                            Add(IMG_FIGHT_MUSH);
                                        };
                                        break;
                                    case 1:
                                        strikeVal = (strikeVal + 0.1);
                                        if (strikeVal >= 1){
                                            strikeVal = 1;
                                            strikePhase++;
                                            DamageAlpha = 1;
                                            damageIndicatorActive = true;
                                            SetLifeBars(((opponent) ? 1 : 2));
                                            Play(SND_CATAPULT_HIT);
                                            _local3 = actor[LBL_DAMAGE_INDICATOR];
                                            with (_local3) {
                                                text = ("-" + String(((opponent) ? oppDamage : charDamage)));
                                                x = ((POS_SCREEN_TITLE_X + (((opponent) ? -1 : 1) * 200)) - int((textWidth / 2)));
                                                y = (POS_FIGHT_WEAPONS_Y - 100);
                                            };
                                            if (((((opponent) && ((charLife <= 0)))) || (((!(opponent)) && ((oppLife <= 0)))))){
                                                DoSkip = true;
                                            };
                                        };
                                        break;
                                    case 2:
                                        strikeVal = (strikeVal - 0.1);
                                        DamageAlpha = (DamageAlpha - 0.05);
                                        actor[LBL_DAMAGE_INDICATOR].y = (actor[LBL_DAMAGE_INDICATOR].y - 2);
                                        if (DamageAlpha <= 0){
                                            DamageAlpha = 0;
                                            inStrikeAni = false;
                                            if (strikeBreak){
                                                nextFightTimer.start();
                                            };
                                            Remove(IMG_FIGHT_MUSH);
                                            StrikeAniTimer.stop();
                                            StrikeAniTimer.removeEventListener(TimerEvent.TIMER, StrikeAniTimerEvent);
                                            DoStrikeTimer.start();
                                        };
                                        break;
                                };
                                break;
                        };
                        if (catapultStrike){
                            _local3 = actor[IMG_FIGHT_MUSH];
                            with (_local3) {
                                x = ((POS_SCREEN_TITLE_X - 128) + ((230 + (100 * (((strikePhase > 1)) ? (2 - strikeVal) : strikeVal))) * ((opponent) ? -1 : 1)));
                                y = ((0 - 265) + (strikeVal * 500));
                                scaleY = (((strikeVal >= 0.7)) ? (1.7 - strikeVal) : 1);
                            };
                        } else {
                            _local3 = actor[((opponent) ? CNT_WEAPON_OPP : CNT_WEAPON_CHAR)];
                            with (_local3) {
                                if (weaponType == 1){
                                    if ((((((((opponent) ? oppWeapon : charWeapon) < 0)) && ((((opponent) ? oppWeapon : charWeapon) > -4)))) || ((((opponent) ? oppWeapon : charWeapon) < -6)))){
                                        if (((opponent) ? oppWeapon : charWeapon) == -1){
                                            SetCnt(((opponent) ? CNT_WEAPON_OPP : CNT_WEAPON_CHAR), (IMG_WEAPON_CLAW + int((strikeVal * 3.9))));
                                        } else {
                                            if (((opponent) ? oppWeapon : charWeapon) == -3){
                                                SetCnt(((opponent) ? CNT_WEAPON_OPP : CNT_WEAPON_CHAR), (IMG_WEAPON_SPLAT + int((strikeVal * 2.9))));
                                            } else {
                                                if (((opponent) ? oppWeapon : charWeapon) == -7){
                                                    SetCnt(((opponent) ? CNT_WEAPON_OPP : CNT_WEAPON_CHAR), (IMG_WEAPON_FIRE + int((strikeVal * 2.9))));
                                                } else {
                                                    SetCnt(((opponent) ? CNT_WEAPON_OPP : CNT_WEAPON_CHAR), (IMG_WEAPON_SWOOSH + int((strikeVal * 2.9))));
                                                };
                                            };
                                        };
                                        scaleX = (((opponent) ? 1 : -1) * 1);
                                        scaleY = 1;
                                        y = (POS_FIGHT_WEAPONS_Y - 240);
                                        x = (((POS_SCREEN_TITLE_X + ((opponent) ? 231 : 0)) - 115) + ((((opponent) ? -1 : 1) * 560) * ((((opponent) ? oppFlag : charFlag))==1) ? 0.7 : 1));
                                        rotation = (0 * ((opponent) ? -1 : 1));
                                        alpha = StrikeAlpha;
                                        visible = true;
                                    } else {
                                        scaleX = (((opponent) ? 1 : -1) * SPRITE_SCALE);
                                        scaleY = SPRITE_SCALE;
                                        y = (POS_FIGHT_WEAPONS_Y - (Math.cos((strikeVal * (TWOPI / 4))) * (75 + ((((opponent) ? oppFlag : charFlag))==3) ? 75 : 0)));
                                        x = (((POS_SCREEN_TITLE_X + ((opponent) ? 231 : 0)) - 115) + (((((opponent) ? -1 : 1) * 230) * strikeVal) * ((((opponent) ? oppFlag : charFlag))==1) ? 0.7 : 1));
                                        rotation = ((280 + (100 * strikeVal)) * ((opponent) ? -1 : 1));
                                        alpha = StrikeAlpha;
                                        visible = true;
                                    };
                                } else {
                                    if (weaponType == 2){
                                        scaleX = (((opponent) ? -1 : 1) * SPRITE_SCALE);
                                        scaleY = SPRITE_SCALE;
                                        y = POS_FIGHT_WEAPONS_Y;
                                        x = (POS_SCREEN_TITLE_X + (((opponent) ? 1 : -1) * 170));
                                        rotation = (((opponent) ? -1 : 1) * (-30 + (70 * strikeVal)));
                                        alpha = StrikeAlpha;
                                        visible = true;
                                    } else {
                                        if (weaponType == 3){
                                            scaleX = (((opponent) ? -1 : 1) * SPRITE_SCALE);
                                            scaleY = SPRITE_SCALE;
                                            y = (POS_FIGHT_WEAPONS_Y - 140);
                                            if (strikeVal <= 0.3){
                                                x = ((POS_SCREEN_TITLE_X + (((opponent) ? 1 : -1) * 200)) + (((opponent) ? -1 : 1) * ((0.3 / strikeVal) * 10)));
                                            } else {
                                                x = ((POS_SCREEN_TITLE_X + (((opponent) ? 1 : -1) * 200)) + (((1 - strikeVal) * Math.sin(((strikeVal * 4) * TWOPI))) * -10));
                                            };
                                            rotation = ((opponent) ? -42 : 42);
                                            alpha = StrikeAlpha;
                                            visible = true;
                                        };
                                    };
                                };
                            };
                            if (weaponType == 2){
                                SetCnt(((opponent) ? CNT_BULLET_OPP : CNT_BULLET_CHAR), GetArrowID(0, ((opponent) ? 1 : 0), weaponData, true, int((Math.random() * 3))));
                            };
                            _local3 = actor[((opponent) ? CNT_BULLET_OPP : CNT_BULLET_CHAR)];
                            with (_local3) {
                                if (weaponType == 2){
                                    scaleX = ((((opponent) ? -1 : 1) * strikeVal) * 2);
                                    scaleY = (strikeVal * 2);
                                    y = ((POS_FIGHT_WEAPONS_Y - 70) - (height / 2));
                                    x = ((POS_SCREEN_TITLE_X + (((opponent) ? 1 : -1) * 200)) + ((((opponent) ? -1 : 1) * 300) * strikeVal));
                                    rotation = 0;
                                } else {
                                    if (weaponType == 3){
                                        scaleX = ((opponent) ? -1 : 1);
                                        scaleY = 1;
                                        y = (POS_FIGHT_WEAPONS_Y - 110);
                                        if (strikeVal <= 0.3){
                                            x = ((POS_SCREEN_TITLE_X + (((opponent) ? 1 : -1) * 200)) + (((opponent) ? -1 : 1) * ((0.3 / strikeVal) * 10)));
                                        } else {
                                            x = ((POS_SCREEN_TITLE_X + (((opponent) ? 1 : -1) * 200)) + (((((opponent) ? -1 : 1) * 400) * strikeVal) * ((((opponent) ? oppFlag : charFlag))==1) ? 0.7 : 1));
                                        };
                                        rotation = (((opponent) ? -1 : 1) * (42 + ((strikeVal - 0.3) * 6)));
                                    };
                                };
                                alpha = BulletAlpha;
                                visible = (weaponType >= 2);
                            };
                            _local3 = actor[((opponent) ? CNT_SHIELD_CHAR : CNT_SHIELD_OPP)];
                            with (_local3) {
                                scaleX = (((opponent) ? 1 : -1) * SPRITE_SCALE);
                                scaleY = SPRITE_SCALE;
                                y = ((POS_FIGHT_WEAPONS_Y - (Math.cos((strikeVal * TWOPI)) * 20)) - 20);
                                x = (((POS_SCREEN_TITLE_X + ((opponent) ? 0 : 231)) - 115) + ((((opponent) ? -1 : 1) * 50) * (((((strikeVal > 0.9)) && ((weaponType == 1)))) ? (strikeVal + 0.2) : 1)));
                                alpha = ShieldAlpha;
                                visible = (((opponent) ? oppFlag : charFlag) == 1);
                            };
                        };
                        if (damageIndicatorActive){
                            _local3 = actor[LBL_DAMAGE_INDICATOR];
                            with (_local3) {
                                visible = true;
                                alpha = DamageAlpha;
                                if (((opponent) ? oppFlag : charFlag) == 4){
                                    defaultTextFormat = FontFormat_CatapultDamage;
                                } else {
                                    if (((opponent) ? oppFlag : charFlag) == 3){
                                        defaultTextFormat = FontFormat_CriticalDamage;
                                    } else {
                                        defaultTextFormat = FontFormat_Damage;
                                    };
                                };
                                text = text;
                            };
                            _local3 = actor[CNT_FIGHT_ONO];
                            with (_local3) {
                                visible = (((((opponent) ? oppFlag : charFlag) == 0)) || ((((opponent) ? oppFlag : charFlag) == 3)));
                                switch (weaponType){
                                    case 1:
                                        x = (POS_SCREEN_TITLE_X + (((opponent) ? -1 : 1) * 200));
                                        y = (POS_FIGHT_WEAPONS_Y - 20);
                                        if (OnoAlpha == 1){
                                            scaleX = 0.6;
                                            scaleY = 0.6;
                                        } else {
                                            if (OnoAlpha > 0){
                                                scaleX = (scaleX + 0.2);
                                                scaleY = (scaleY + 0.2);
                                            };
                                        };
                                        break;
                                    case 2:
                                        x = (POS_SCREEN_TITLE_X + (((opponent) ? -1 : 1) * 230));
                                        y = (POS_FIGHT_WEAPONS_Y - 40);
                                        if (OnoAlpha == 1){
                                            scaleX = 0.3;
                                            scaleY = 0.3;
                                        } else {
                                            if (OnoAlpha > 0){
                                                scaleX = (scaleX + 0.1);
                                                scaleY = (scaleY + 0.1);
                                            };
                                        };
                                        break;
                                    case 3:
                                        x = (POS_SCREEN_TITLE_X + (((opponent) ? -1 : 1) * 235));
                                        y = (POS_FIGHT_WEAPONS_Y - 42);
                                        if (OnoAlpha == 1){
                                            scaleX = (0.4 * ((opponent) ? -1 : 1));
                                            scaleY = 0.4;
                                        } else {
                                            if (OnoAlpha > 0){
                                                scaleX = (scaleX + (0.05 * ((opponent) ? -1 : 1)));
                                                scaleY = (scaleY + 0.05);
                                            };
                                        };
                                        break;
                                };
                                alpha = OnoAlpha;
                            };
                            if (DoSkip){
                                DoSkipFight();
                                DoSkip = false;
                            };
                        };
                    };
                    StrikeAniTimer = new Timer(40);
                    StrikeAlpha = 1;
                    BulletAlpha = 0;
                    ShieldAlpha = 0;
                    DamageAlpha = 0;
                    OnoAlpha = 0;
                    const SPRITE_SCALE:Number = 1.5;
                    const TWOPI:Number = (Math.PI * 2);
                    strikeVal = 0;
                    strikePhase = 0;
                    damageIndicatorActive = false;
                    weaponType = ((opponent) ? oppWeaponType : charWeaponType);
                    onoID = (int((Math.random() * 6)) + IMG_FIGHT_ONO);
                    DoSkip = false;
                    catapultStrike = false;
                    if (((opponent) ? oppFlag : charFlag) == 4){
                        catapultStrike = true;
                    } else {
                        if (weaponType == 2){
                            onoID = GetArrowID(0, ((opponent) ? 1 : 0), weaponData, true, 3);
                        } else {
                            if (weaponType == 3){
                                onoID = IMG_FIGHT_ARROW_SMASH;
                            };
                        };
                    };
                    StrikeAniTimer.addEventListener(TimerEvent.TIMER, StrikeAniTimerEvent);
                    StrikeAniTimer.start();
                    inStrikeAni = true;
                };
                DoStrikeTimer = new Timer(200);
                if (((((isPvP) && (!(isReplay)))) && (!(isGuildBattle)))){
                    if (!WaitingFor(Savegame[SG_PVP_REROLL_TIME])){
                        Savegame[SG_PVP_REROLL_TIME] = (int((GameTime.getTime() / 1000)) + (70 * 60));
                    };
                };
                if (isGuildBattle){
                    RemoveAll();
                    if (towerFightMode){
                        Add(IMG_SCR_TOWER_BG);
                    } else {
                        if (isRaid){
                            Add(IMG_GUILD_RAID_BG);
                        } else {
                            Add(IMG_GUILD_BATTLE_BG);
                        };
                    };
                    if (towerFightMode){
                        Add(LBL_HERO_OF_THE_DAY_TITLE);
                        actor[LBL_HERO_OF_THE_DAY_TITLE].text = txt[TXT_TOWER_LEVEL].split("%1").join(String((towerLevel + 1)));
                        actor[LBL_HERO_OF_THE_DAY_TITLE].x = (POS_SCREEN_TITLE_X - (actor[LBL_HERO_OF_THE_DAY_TITLE].width / 2));
                    } else {
                        if (((isRaid) && (txt[TXT_DUNGEON_NAMES]))){
                            Add(LBL_HERO_OF_THE_DAY_TITLE);
                            actor[LBL_HERO_OF_THE_DAY_TITLE].text = txt[((TXT_DUNGEON_NAMES + raidLevel) - 1)];
                            actor[LBL_HERO_OF_THE_DAY_TITLE].x = (POS_SCREEN_TITLE_X - (actor[LBL_HERO_OF_THE_DAY_TITLE].width / 2));
                        } else {
                            if (((!(isRaid)) && (txt[TXT_FIGHTS_COUNTER]))){
                                Add(LBL_HERO_OF_THE_DAY_TITLE);
                                actor[LBL_HERO_OF_THE_DAY_TITLE].text = txt[TXT_FIGHTS_COUNTER].split("%1").join(String(fightNumber)).split("%2").join(String(guildFightCount));
                                actor[LBL_HERO_OF_THE_DAY_TITLE].x = (POS_SCREEN_TITLE_X - (actor[LBL_HERO_OF_THE_DAY_TITLE].width / 2));
                            };
                        };
                    };
                } else {
                    if (OnStage(IMG_QUESTBAR_BG)){
                        Remove(IMG_QUESTBAR_BG, IMG_QUESTBAR_FILL, IMG_QUESTBAR_LIGHT, LBL_QUESTBAR_TEXT, BTN_QUEST_CANCEL, BTN_QUEST_SKIP, LBL_SCREEN_TITLE);
                    } else {
                        if (isPvP){
                            RemoveAll();
                            switch (tz){
                                case 0:
                                    Add(BNC_SCREEN_ARENA_NIGHT);
                                    break;
                                case 1:
                                    Add(BNC_SCREEN_ARENA_DAWN);
                                    break;
                                case 2:
                                    Add(BNC_SCREEN_ARENA_DAY);
                                    break;
                            };
                        } else {
                            RemoveAll();
                            if (isMQ){
                                if (SelectedDungeon == 100){
                                    Add(IMG_SCR_TOWER_BG);
                                } else {
                                    Add(((IMG_SCR_QUEST_BG_1 + 50) + SelectedDungeon));
                                };
                            } else {
                                if (int(Savegame[SG_ACTION_STATUS]) == 2){
                                    Add(GetQuestBG());
                                };
                            };
                        };
                    };
                };
                SetCnt(CNT_LIFEBAR_OPP, IMG_LIFEBAR_CHAR);
                SetCnt(CNT_LIFEBAR_FILL_OPP, IMG_LIFEBAR_FILL_CHAR);
                SetCnt(CNT_FIGHT_OPP_BORDER, IMG_FIGHT_CHAR_BORDER);
                SetCnt(CNT_FIGHT_BOX3, IMG_FIGHT_BOX1);
                SetCnt(CNT_FIGHT_REWARDGOLD, IMG_IF_GOLD);
                SetCnt(CNT_FIGHT_REWARDSILVER, IMG_IF_SILBER);
                SetCnt(CNT_FIGHT_REWARDMUSH, IMG_IF_PILZE);
                var _local3 = actor[LBL_NAMERANK_CHAR];
                with (_local3) {
                    if (textDir == "right"){
                        text = ((((("(" + String(charLevel)) + " ") + txt[TXT_HALL_LIST_COLUMN_4]) + ") ") + thisCharName);
                    } else {
                        text = (((((thisCharName + " (") + txt[TXT_HALL_LIST_COLUMN_4]) + " ") + String(charLevel)) + ")");
                    };
                    x = ((POS_FIGHT_CHARIMG_X + 150) - int((textWidth / 2)));
                    y = ((POS_OPPIMG_Y + 290) - textHeight);
                };
                _local3 = actor[LBL_NAMERANK_OPP];
                with (_local3) {
                    if (textDir == "right"){
                        text = ((((("(" + String(oppLevel)) + " ") + txt[TXT_HALL_LIST_COLUMN_4]) + ") ") + oppName);
                    } else {
                        text = (((((oppName + " (") + txt[TXT_HALL_LIST_COLUMN_4]) + " ") + String(oppLevel)) + ")");
                    };
                    x = ((POS_OPPIMG_X + 150) - int((textWidth / 2)));
                    y = ((POS_OPPIMG_Y + 290) - textHeight);
                };
                i = 0;
                while (i < 10) {
                    _local3 = actor[(IMG_CHARIMG_BACKGROUND + i)];
                    with (_local3) {
                        x = (POS_FIGHT_CHARIMG_X + 300);
                        y = POS_OPPIMG_Y;
                        scaleX = -1;
                        scaleY = 1;
                    };
                    _local3 = actor[(IMG_CHARIMG_BACKGROUND2 + i)];
                    with (_local3) {
                        x = (POS_FIGHT_CHARIMG_X + 300);
                        y = POS_OPPIMG_Y;
                        scaleX = -1;
                        scaleY = 1;
                    };
                    i = (i + 1);
                };
                Add(BNC_SCREEN_FIGHT);
                if (oppMonster > 0){
                    Add(((IMG_OPPIMG_MONSTER + oppMonster) - 1));
                } else {
                    LoadCharacterImage(((alternateCharOppImg) ? IMG_OPPIMG_BACKGROUND2 : IMG_OPPIMG_BACKGROUND), false, oppVolk, oppMann, oppKaste, oppMouth, oppBeard, oppNose, oppEyes, oppBrows, oppEars, oppHair, oppSpecial, oppSpecial2);
                };
                if ((((thisCharMonster >= 391)) && ((thisCharMonster <= 393)))){
                    Add(((IMG_FIGHT_COPYCAT + thisCharMonster) - 391));
                } else {
                    LoadCharacterImage(((alternateCharOppImg) ? IMG_CHARIMG_BACKGROUND2 : IMG_CHARIMG_BACKGROUND), false, thisCharVolk, thisCharMann, thisCharKaste, thisCharMouth, thisCharBeard, thisCharNose, thisCharEyes, thisCharBrows, thisCharEars, thisCharHair, thisCharSpecial, thisCharSpecial2);
                };
                if (isGuildBattle){
                    alternateCharOppImg = !(alternateCharOppImg);
                };
                AddSome(LBL_NAMERANK_CHAR, LBL_NAMERANK_OPP);
                AddSome(CNT_SHIELD_CHAR, CNT_SHIELD_OPP, CNT_WEAPON_CHAR, CNT_WEAPON_OPP, CNT_BULLET_CHAR, CNT_BULLET_OPP);
                Hide(CNT_SHIELD_CHAR, CNT_SHIELD_OPP, CNT_WEAPON_CHAR, CNT_WEAPON_OPP, CNT_BULLET_CHAR, CNT_BULLET_OPP);
                AddSome(LBL_DAMAGE_INDICATOR, CNT_FIGHT_ONO);
                Hide(LBL_DAMAGE_INDICATOR, CNT_FIGHT_ONO);
                actor[BTN_FIGHT_SKIP].addEventListener(MouseEvent.CLICK, DoSkipFight);
                actor[BTN_BATTLE_SKIP].addEventListener(MouseEvent.CLICK, DoSkipFight);
                actor[BTN_BATTLE_SKIPONE].addEventListener(MouseEvent.CLICK, DoSkipFight);
                if (isGuildBattle){
                    Add(BTN_BATTLE_SKIP);
                    Add(BTN_BATTLE_SKIPONE);
                    Remove(BTN_FIGHT_SKIP);
                    if (!towerFightMode){
                        Add(LBL_FIGHT_PLAYERGUILD);
                        Add(LBL_FIGHT_OPPGUILD);
                    };
                    _local3 = actor[LBL_FIGHT_PLAYERGUILD];
                    with (_local3) {
                        if (towerFightMode){
                            text = txt[TXT_TOWER_GUYS];
                        } else {
                            text = ownGuild;
                        };
                        x = ((POS_FIGHT_CHARIMG_X + 150) - (textWidth / 2));
                    };
                    _local3 = actor[LBL_FIGHT_OPPGUILD];
                    with (_local3) {
                        if (towerFightMode){
                            text = txt[TXT_TOWER_LEVEL].split("%1").join(String((towerLevel + 1)));
                        } else {
                            text = oppGuild;
                        };
                        x = ((POS_OPPIMG_X + 150) - (textWidth / 2));
                    };
                };
                SetLifeBars();
                i = 0;
                while (i < 5) {
                    if (isGuildBattle){
                        actor[(LBL_FIGHT_CHAR_STAERKE + i)].text = "";
                        actor[(LBL_FIGHT_OPP_STAERKE + i)].text = "";
                        if (((towerFightMode) && (!((int(GuildBattleData[(i + 1)]) == 0))))){
                            actor[(LBL_FIGHT_CHAR_STAERKE_CAPTION + i)].text = txt[((TXT_COPYCAT_NAME + int(GuildBattleData[(i + 1)])) - 1)];
                        } else {
                            actor[(LBL_FIGHT_CHAR_STAERKE_CAPTION + i)].text = String(GuildBattleData[(i + 1)]);
                        };
                        if (towerFightMode){
                            actor[(LBL_FIGHT_OPP_STAERKE + i)].text = String(fighterData[(i + 7)]);
                            actor[(LBL_FIGHT_OPP_STAERKE_CAPTION + i)].text = txt[(TXT_CHAR_STAERKE + i)];
                        } else {
                            if (int(GuildBattleData[(i + 7)]) != 0){
                                if (-(int(GuildBattleData[(i + 7)])) >= 400){
                                    actor[(LBL_FIGHT_OPP_STAERKE_CAPTION + i)].text = txt[((TXT_TOWER_ENEMY_NAMES + -(int(GuildBattleData[(i + 7)]))) - 400)].split("|")[0];
                                } else {
                                    if (-(int(GuildBattleData[(i + 7)])) > 220){
                                        actor[(LBL_FIGHT_OPP_STAERKE_CAPTION + i)].text = txt[((TXT_NEW_MONSTER_NAMES + -(int(GuildBattleData[(i + 7)]))) - 221)];
                                    } else {
                                        actor[(LBL_FIGHT_OPP_STAERKE_CAPTION + i)].text = txt[((TXT_MONSTER_NAME + -(int(GuildBattleData[(i + 7)]))) - 1)];
                                    };
                                };
                            } else {
                                actor[(LBL_FIGHT_OPP_STAERKE_CAPTION + i)].text = String(GuildBattleData[(i + 7)]);
                            };
                        };
                    } else {
                        actor[(LBL_FIGHT_CHAR_STAERKE + i)].text = String(fighterData[(i + 1)]);
                        actor[(LBL_FIGHT_OPP_STAERKE + i)].text = String(fighterData[(i + 7)]);
                        actor[(LBL_FIGHT_CHAR_STAERKE_CAPTION + i)].text = txt[(TXT_CHAR_STAERKE + i)];
                        actor[(LBL_FIGHT_OPP_STAERKE_CAPTION + i)].text = txt[(TXT_CHAR_STAERKE + i)];
                    };
                    i = (i + 1);
                };
                if (textDir == "right"){
                    i = 0;
                    while (i < 5) {
                        actor[(LBL_FIGHT_CHAR_STAERKE_CAPTION + i)].x = ((POS_FIGHT_CHAR_PROP_COLUMN_2_X + 30) - actor[(LBL_FIGHT_CHAR_STAERKE_CAPTION + i)].textWidth);
                        actor[(LBL_FIGHT_OPP_STAERKE_CAPTION + i)].x = ((POS_FIGHT_CHAR_PROP_COLUMN_4_X + 30) - actor[(LBL_FIGHT_OPP_STAERKE_CAPTION + i)].textWidth);
                        actor[(LBL_FIGHT_CHAR_STAERKE + i)].x = ((POS_FIGHT_CHAR_PROP_COLUMN_1_X + 40) - actor[(LBL_FIGHT_CHAR_STAERKE + i)].textWidth);
                        actor[(LBL_FIGHT_OPP_STAERKE + i)].x = ((POS_FIGHT_CHAR_PROP_COLUMN_3_X + 40) - actor[(LBL_FIGHT_OPP_STAERKE + i)].textWidth);
                        i = (i + 1);
                    };
                };
                strikeBreak = false;
                var inStrikeAni:* = false;
                DoStrikeTimer.addEventListener(TimerEvent.TIMER, DoStrikeEvent);
                DoStrikeTimer.start();
            };
            isGuildBattle = false;
            if (GuildBattleData){
                isGuildBattle = true;
            };
            this.hasFoughtGuildBattle = isGuildBattle;
            charWeapon = weaponData[this.SG_ITM_PIC];
            oppWeapon = weaponData[(this.SG_ITM_SIZE + this.SG_ITM_PIC)];
            charHasWeapon = (((int(weaponData[this.SG_ITM_TYP]) > 0)) && ((int(weaponData[this.SG_ITM_PIC]) > 0)));
            oppHasWeapon = (((int(weaponData[(this.SG_ITM_SIZE + this.SG_ITM_TYP)]) > 0)) && ((int(weaponData[(this.SG_ITM_SIZE + this.SG_ITM_PIC)]) > 0)));
            charWeaponType = 1;
            oppWeaponType = 1;
            tz = this.Tageszeit();
            this.hasLostMQ = false;
            this.actor[this.LBL_ERROR].text = "";
            if (isGuildBattle){
                this.Remove(this.BNC_GILDE_CHAT);
            };
            switch (tz){
                case 0:
                    this.Load(this.BNC_SCREEN_ARENA_NIGHT);
                    break;
                case 1:
                    this.Load(this.BNC_SCREEN_ARENA_DAWN);
                    break;
                case 2:
                    this.Load(this.BNC_SCREEN_ARENA_DAY);
                    break;
            };
            while (charWeapon > 1000) {
                charWeapon = (charWeapon - 1000);
                charWeaponType = (charWeaponType + 1);
            };
            while (oppWeapon > 1000) {
                oppWeapon = (oppWeapon - 1000);
                oppWeaponType = (oppWeaponType + 1);
            };
            charShield = (int(weaponData[((this.SG_ITM_SIZE * 2) + this.SG_ITM_PIC)]) * (((int(weaponData[((this.SG_ITM_SIZE * 2) + this.SG_ITM_TYP)]) == 0)) ? 0 : 1));
            oppShield = (weaponData[((this.SG_ITM_SIZE * 3) + this.SG_ITM_PIC)] * (((int(weaponData[((this.SG_ITM_SIZE * 3) + this.SG_ITM_TYP)]) == 0)) ? 0 : 1));
            if (charHasWeapon){
                this.Load(this.GetWeaponSound(charWeaponType, charWeapon, 0));
                this.Load(this.GetWeaponSound(charWeaponType, charWeapon, 1));
                if (((!((charWeaponType == 2))) && (!((oppShield == 0))))){
                    this.Load(this.GetWeaponSound(charWeaponType, charWeapon, 2));
                };
                this.Load(this.GetWeaponSound(charWeaponType, charWeapon, 3));
            };
            if (oppHasWeapon){
                this.Load(this.GetWeaponSound(oppWeaponType, oppWeapon, 0));
                this.Load(this.GetWeaponSound(oppWeaponType, oppWeapon, 1));
                if (((!((oppWeaponType == 2))) && (!((charShield == 0))))){
                    this.Load(this.GetWeaponSound(oppWeaponType, oppWeapon, 2));
                };
                this.Load(this.GetWeaponSound(oppWeaponType, oppWeapon, 3));
            } else {
                if (oppWeapon == -1){
                    this.Load(this.IMG_WEAPON_CLAW, this.IMG_WEAPON_CLAW2, this.IMG_WEAPON_CLAW3, this.IMG_WEAPON_CLAW4);
                } else {
                    if (oppWeapon == -3){
                        this.Load(this.IMG_WEAPON_SPLAT, this.IMG_WEAPON_SPLAT2, this.IMG_WEAPON_SPLAT3);
                    } else {
                        if (oppWeapon == -4){
                            this.Load(this.IMG_WEAPON_STICK);
                        } else {
                            if (oppWeapon == -5){
                                this.Load(this.IMG_WEAPON_BONE);
                            } else {
                                if (oppWeapon == -6){
                                    this.Load(this.IMG_WEAPON_STONEFIST);
                                } else {
                                    if (oppWeapon == -7){
                                        this.Load(this.IMG_WEAPON_FIRE, this.IMG_WEAPON_FIRE2, this.IMG_WEAPON_FIRE3);
                                    } else {
                                        if (oppWeapon == -2){
                                            this.Load(this.IMG_WEAPON_SWOOSH, this.IMG_WEAPON_SWOOSH2, this.IMG_WEAPON_SWOOSH3);
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
            i = 0;
            while (i < 6) {
                this.Load((this.IMG_FIGHT_ONO + i));
                i = (i + 1);
            };
            if ((((charWeaponType == 3)) || ((oppWeaponType == 3)))){
                this.Load(this.IMG_FIGHT_ARROW_SMASH);
            };
            this.Load(this.BNC_SCREEN_FIGHT);
            if (int(this.Savegame[this.SG_ACTION_STATUS]) == 2){
                this.Load(this.GetQuestBG());
            };
            if (!charHasWeapon){
                charWeapon = int(weaponData[this.SG_ITM_TYP]);
                this.Load(this.GetWeaponSound(charWeaponType, charWeapon, 0));
                this.Load(this.GetWeaponSound(charWeaponType, charWeapon, 1));
                if (((!((charWeaponType == 2))) && (!((oppShield == 0))))){
                    this.Load(this.GetWeaponSound(charWeaponType, charWeapon, 2));
                };
                this.Load(this.GetWeaponSound(charWeaponType, charWeapon, 3));
                this.SetCnt(this.CNT_WEAPON_CHAR, (((charWeapon == 0)) ? this.IMG_WEAPON_FIST : (((charWeapon == -1)) ? this.IMG_WEAPON_CLAW : this.IMG_WEAPON_SWOOSH)), -30, -30, true);
                this.SetCnt(this.CNT_BULLET_CHAR, this.C_EMPTY);
                charWeaponType = 1;
            } else {
                if (charWeaponType == 1){
                    this.SetCnt(this.CNT_WEAPON_CHAR, this.GetItemID(0, 0, weaponData), -30, -30, true);
                    this.SetCnt(this.CNT_BULLET_CHAR, this.C_EMPTY);
                } else {
                    if (charWeaponType == 2){
                        this.SetCnt(this.CNT_WEAPON_CHAR, this.GetItemID(0, 0, weaponData), 30, -30, true);
                        this.SetCnt(this.CNT_BULLET_CHAR, this.GetArrowID(0, 0, weaponData, true, 0));
                        this.Load(this.GetArrowID(0, 0, weaponData, true, 1), this.GetArrowID(0, 0, weaponData, true, 2), this.GetArrowID(0, 0, weaponData, true, 3));
                    } else {
                        if (charWeaponType == 3){
                            this.SetCnt(this.CNT_WEAPON_CHAR, this.GetItemID(0, 0, weaponData));
                            this.SetCnt(this.CNT_BULLET_CHAR, this.GetArrowID(0, 0, weaponData, true));
                        };
                    };
                };
            };
            if (!oppHasWeapon){
                oppWeapon = int(weaponData[(this.SG_ITM_SIZE + this.SG_ITM_TYP)]);
                this.Load(this.GetWeaponSound(oppWeaponType, oppWeapon, 0));
                this.Load(this.GetWeaponSound(oppWeaponType, oppWeapon, 1));
                if (((!((oppWeaponType == 2))) && (!((charShield == 0))))){
                    this.Load(this.GetWeaponSound(oppWeaponType, oppWeapon, 2));
                };
                this.Load(this.GetWeaponSound(oppWeaponType, oppWeapon, 3));
                if (oppWeapon == -4){
                    this.SetCnt(this.CNT_WEAPON_OPP, this.IMG_WEAPON_STICK, -30, -30, true);
                } else {
                    if (oppWeapon == -5){
                        this.SetCnt(this.CNT_WEAPON_OPP, this.IMG_WEAPON_BONE, -30, -30, true);
                    } else {
                        if (oppWeapon == -6){
                            this.SetCnt(this.CNT_WEAPON_OPP, this.IMG_WEAPON_STONEFIST, -30, -30, true);
                        } else {
                            this.SetCnt(this.CNT_WEAPON_OPP, (((oppWeapon == 0)) ? this.IMG_WEAPON_FIST : this.C_EMPTY), -30, -30, true);
                        };
                    };
                };
                this.SetCnt(this.CNT_BULLET_OPP, this.C_EMPTY);
                oppWeaponType = 1;
            } else {
                if (oppWeaponType == 1){
                    this.SetCnt(this.CNT_WEAPON_OPP, this.GetItemID(0, 1, weaponData), -30, -30, true);
                    this.SetCnt(this.CNT_BULLET_OPP, this.C_EMPTY);
                } else {
                    if (oppWeaponType == 2){
                        this.SetCnt(this.CNT_WEAPON_OPP, this.GetItemID(0, 1, weaponData), 30, -30, true);
                        this.SetCnt(this.CNT_BULLET_OPP, this.GetArrowID(0, 1, weaponData, true, 0));
                        this.Load(this.GetArrowID(0, 1, weaponData, true, 1), this.GetArrowID(0, 1, weaponData, true, 2), this.GetArrowID(0, 1, weaponData, true, 3));
                    } else {
                        if (oppWeaponType == 3){
                            this.SetCnt(this.CNT_WEAPON_OPP, this.GetItemID(0, 1, weaponData));
                            this.SetCnt(this.CNT_BULLET_OPP, this.GetArrowID(0, 1, weaponData, true));
                        };
                    };
                };
            };
            if (charShield > 0){
                this.SetCnt(this.CNT_SHIELD_CHAR, this.GetItemID(0, 2, weaponData), 0, 0, true);
            } else {
                this.SetCnt(this.CNT_SHIELD_CHAR, this.C_EMPTY);
            };
            if (oppShield > 0){
                this.SetCnt(this.CNT_SHIELD_OPP, this.GetItemID(0, 3, weaponData), 0, 0, true);
            } else {
                this.SetCnt(this.CNT_SHIELD_OPP, this.C_EMPTY);
            };
            oppVolk = int(faceData[17]);
            oppMann = (int(faceData[18]) == 1);
            oppKaste = int(faceData[19]);
            thisCharVolk = int(faceData[2]);
            thisCharMann = (int(faceData[3]) == 1);
            thisCharKaste = int(faceData[4]);
            thisCharMouth = int(faceData[5]);
            thisCharBeard = int(faceData[9]);
            thisCharNose = int(faceData[10]);
            thisCharEyes = int(faceData[8]);
            thisCharBrows = int(faceData[7]);
            thisCharEars = int(faceData[11]);
            thisCharHair = int(faceData[6]);
            thisCharSpecial = int(faceData[12]);
            thisCharSpecial2 = int(faceData[13]);
            thisCharMonster = ((int(faceData[5]))<0) ? -(int(faceData[5])) : 0;
            oppMouth = int(faceData[20]);
            oppBeard = int(faceData[24]);
            oppNose = int(faceData[25]);
            oppEyes = int(faceData[23]);
            oppBrows = int(faceData[22]);
            oppEars = int(faceData[26]);
            oppHair = int(faceData[21]);
            oppSpecial = int(faceData[27]);
            oppSpecial2 = int(faceData[28]);
            var oppLevel:* = int(faceData[16]);
            oppMonster = ((int(faceData[20]))<0) ? -(int(faceData[20])) : 0;
            oppName = "";
            if (oppMonster > 0){
                if (oppMonster >= 400){
                    oppName = this.txt[((this.TXT_TOWER_ENEMY_NAMES + oppMonster) - 400)].split("|")[0];
                } else {
                    if (oppMonster > 220){
                        oppName = this.txt[((this.TXT_NEW_MONSTER_NAMES + oppMonster) - 221)];
                    } else {
                        oppName = this.txt[((this.TXT_MONSTER_NAME + oppMonster) - 1)];
                    };
                };
            } else {
                oppName = faceData[15];
                if (!isGuildBattle){
                    this.addSuggestNames(oppName);
                };
            };
            thisCharName = (((faceData[0] == "")) ? this.actor[this.INP_NAME].getChildAt(1).text : faceData[0]);
            if (((isGuildBattle) && (this.towerFightMode))){
                if (thisCharMonster >= 391){
                    thisCharName = this.txt[((this.TXT_COPYCAT_NAME + thisCharMonster) - 391)];
                };
            };
            charFullLife = fighterData[0];
            oppFullLife = fighterData[6];
            charLife = ((isGuildBattle) ? (((int(GuildBattleData[0]) < 0)) ? (charFullLife / -(int(GuildBattleData[0]))) : int(GuildBattleData[0])) : charFullLife);
            charDamage = 0;
            oppLife = ((isGuildBattle) ? (((int(GuildBattleData[6]) < 0)) ? (oppFullLife / -(int(GuildBattleData[6]))) : int(GuildBattleData[6])) : oppFullLife);
            var oppDamage:* = 0;
            charFlag = 0;
            oppFlag = 0;
            fightRound = 0;
            oppStrike = false;
            var charLevel:* = int(faceData[(16 - 15)]);
            isRaid = false;
            if (!isGuildBattle){
                this.alternateCharOppImg = false;
            };
            if (((isGuildBattle) && ((ownGuild == "")))){
                isRaid = true;
            };
            if (oppMonster > 0){
                this.Load(((this.IMG_OPPIMG_MONSTER + oppMonster) - 1));
            } else {
                this.LoadCharacterImage(((this.alternateCharOppImg) ? this.IMG_OPPIMG_BACKGROUND2 : this.IMG_OPPIMG_BACKGROUND), true, oppVolk, oppMann, oppKaste, oppMouth, oppBeard, oppNose, oppEyes, oppBrows, oppEars, oppHair, oppSpecial, oppSpecial2);
            };
            if ((((thisCharMonster >= 391)) && ((thisCharMonster <= 393)))){
                this.Load(((this.IMG_FIGHT_COPYCAT + thisCharMonster) - 391));
            } else {
                this.LoadCharacterImage(((this.alternateCharOppImg) ? this.IMG_CHARIMG_BACKGROUND2 : this.IMG_CHARIMG_BACKGROUND), true, thisCharVolk, thisCharMann, thisCharKaste, thisCharMouth, thisCharBeard, thisCharNose, thisCharEyes, thisCharBrows, thisCharEars, thisCharHair, thisCharSpecial, thisCharSpecial2);
            };
            if (isGuildBattle){
                if (this.towerFightMode){
                    this.Load(this.IMG_SCR_TOWER_BG);
                } else {
                    if (isRaid){
                        this.Load(this.IMG_GUILD_RAID_BG);
                    } else {
                        this.Load(this.IMG_GUILD_BATTLE_BG);
                    };
                };
            };
            this.WhenLoaded(DoShowFightScreen);
        }
        public function GetAdvent():int{
            var tmpNow:Date;
            var tmpAdventEnd:Date;
            var tmpDate:Date;
            var advent:int;
            switch (this.lang_code){
                case "de":
                    break;
                default:
                    return (0);
            };
            tmpNow = new Date();
            tmpAdventEnd = new Date(tmpNow.getFullYear(), 11, 27);
            tmpDate = new Date(tmpNow.getFullYear(), 11, 24);
            while (tmpDate.getDay() != 0) {
                tmpDate.setDate((tmpDate.getDate() - 1));
            };
            if (tmpNow.getTime() < tmpAdventEnd.getTime()){
                advent = 4;
                while (advent >= 1) {
                    trace("Advent", advent, tmpNow.toString());
                    if (tmpNow.getTime() >= tmpDate.getTime()){
                        return (advent);
                    };
                    tmpDate.setDate((tmpDate.getDate() - 7));
                    advent--;
                };
            };
            return (0);
        }
        public function GetQuestBG():int{
            return (((this.IMG_SCR_QUEST_BG_1 + int(this.Savegame[((this.SG_QUEST_OFFER_LOCATION1 + int(this.Savegame[this.SG_ACTION_INDEX])) - 1)])) - 1));
        }
        public function ShowQuestScreen(evt:Event=undefined){
            var DoShowQuestScreen:* = null;
            var evt:* = evt;
            DoShowQuestScreen = function (evt:Event=undefined){
                var questBarTimer:* = null;
                var QuestBarUpdate:* = null;
                var evt:* = evt;
                QuestBarUpdate = function (evt:TimerEvent=undefined){
                    var evt:* = evt;
                    if (!OnStage(IMG_QUESTBAR_BG)){
                        questBarTimer.stop();
                        questBarTimer.removeEventListener(TimerEvent.TIMER, QuestBarUpdate);
                        SetTitleBar(WaitingTime(Savegame[SG_ACTION_ENDTIME]));
                        return;
                    };
                    if (WaitingFor(Savegame[SG_ACTION_ENDTIME])){
                        var _local3 = actor[IMG_QUESTBAR_FILL];
                        with (_local3) {
                            width = (WaitingProgress((Savegame[SG_ACTION_ENDTIME] - Savegame[(SG_QUEST_OFFER_DURATION1 + (Savegame[SG_ACTION_INDEX] - 1))]), Savegame[SG_ACTION_ENDTIME]) * 555);
                            actor[IMG_QUESTBAR_LIGHT].x = ((x + width) - 5);
                        };
                        _local3 = actor[LBL_QUESTBAR_TEXT];
                        with (_local3) {
                            text = WaitingTime(Savegame[SG_ACTION_ENDTIME]);
                            SetTitleBar(text);
                            x = int((POS_QUESTBAR_LABEL_X - (textWidth / 2)));
                        };
                    } else {
                        questBarTimer.stop();
                        questBarTimer.removeEventListener(TimerEvent.TIMER, QuestBarUpdate);
                        SendAction(ACT_SCREEN_TAVERNE);
                    };
                };
                questBarTimer = new Timer(200);
                RemoveAll();
                Add(GetQuestBG());
                Add(BNC_SCREEN_QUEST);
                var _local3 = actor[LBL_SCREEN_TITLE];
                with (_local3) {
                    text = GetQuestTitle((int(Savegame[SG_ACTION_INDEX]) - 1));
                    x = (POS_SCREEN_TITLE_X - int((textWidth / 2)));
                    y = POS_SCREEN_TITLE_Y_QUEST;
                };
                actor[IMG_QUESTBAR_FILL].width = 0;
                actor[IMG_QUESTBAR_LIGHT].x = (actor[IMG_QUESTBAR_FILL].x - 5);
                questBarTimer.addEventListener(TimerEvent.TIMER, QuestBarUpdate);
                questBarTimer.start();
                QuestBarUpdate();
                if (skipAllowed){
                    actor[BTN_QUEST_CANCEL].x = int((POS_QUEST_CANCEL_X + 5));
                    Show(BTN_QUEST_SKIP);
                } else {
                    actor[BTN_QUEST_CANCEL].x = int((POS_QUEST_CANCEL_X - (actor[BTN_QUEST_CANCEL].width / 2)));
                    Hide(BTN_QUEST_SKIP);
                };
                CheckWrongPage(ACT_SCREEN_TAVERNE);
                TryShowTV();
            };
            this.Load(this.BNC_SCREEN_QUEST);
            this.Load(this.GetQuestBG());
            if (this.textDir == "right"){
                this.SetBtnText(this.BTN_QUEST_SKIP, ("~P " + this.txt[this.TXT_SKIP_FIGHT]));
            };
            this.WhenLoaded(DoShowQuestScreen);
        }
        public function RefreshTimeBar(OfferTime:Number=0){
            var tmpTime:* = NaN;
            var tmpText:* = null;
            var OfferTime:int = OfferTime;
            var tmpX:* = 0;
            if (OfferTime < 0){
                if ((Number(this.Savegame[this.SG_TIMEBAR]) + OfferTime) < 0){
                    OfferTime = 0;
                };
            };
            var _local3 = this.actor[this.IMG_TIMEBAR_FILL];
            with (_local3) {
                if (OfferTime < 0){
                    tmpX = (((Number(Savegame[SG_TIMEBAR]) + OfferTime) / 6000) * 555);
                } else {
                    tmpX = ((Number(Savegame[SG_TIMEBAR]) / 6000) * 555);
                };
                width = int(tmpX);
                tmpX = int((x + width));
            };
            _local3 = this.actor[this.CNT_TIMEBAR_FILL];
            with (_local3) {
                if (OfferTime < 0){
                    width = int(((-(OfferTime) / 6000) * 555));
                    x = tmpX;
                } else {
                    width = int(((OfferTime / 6000) * 555));
                    x = tmpX;
                };
            };
            tmpTime = int(this.Savegame[this.SG_TIMEBAR]);
            tmpText = "";
            if (tmpTime > (60 * 60)){
                tmpText = (tmpText + (String(int((tmpTime / (60 * 60)))) + ":"));
                tmpTime = (tmpTime % (60 * 60));
                if ((tmpTime / 60) < 10){
                    tmpText = (tmpText + "0");
                };
            };
            tmpText = (tmpText + (String(int((tmpTime / 60))) + ":"));
            tmpTime = (tmpTime % 60);
            if (tmpTime < 10){
                tmpText = (tmpText + "0");
            };
            tmpText = (tmpText + String(int(tmpTime)));
            if (this.textDir == "right"){
                tmpText = ((tmpText + " :") + this.txt[this.TXT_AUSDAUER]);
            } else {
                tmpText = ((this.txt[this.TXT_AUSDAUER] + ": ") + tmpText);
            };
            if (OfferTime != 0){
                tmpText = (tmpText + (" (" + (((OfferTime > 0)) ? "+" : "-")));
                tmpText = (tmpText + (String(int((Math.abs(OfferTime) / 60))) + ":"));
                if ((Math.abs(OfferTime) % 60) < 10){
                    tmpText = (tmpText + "0");
                };
                tmpText = (tmpText + (String(int((Math.abs(OfferTime) % 60))) + ")"));
            };
            tmpTime = Number(this.Savegame[this.SG_TIMEBAR]);
            if (this.textDir == "right"){
                tmpText = (" :" + this.txt[this.TXT_AUSDAUER]);
                tmpText = (String(Number((tmpTime / 60)).toFixed(1)).split(".0")[0] + tmpText);
            } else {
                tmpText = (this.txt[this.TXT_AUSDAUER] + ": ");
                tmpText = (tmpText + String(Number((tmpTime / 60)).toFixed(1)).split(".0")[0]);
            };
            if (OfferTime != 0){
                if (this.textDir == "right"){
                    tmpText = (((((OfferTime > 0)) ? "+" : "-") + ") ") + tmpText);
                    tmpText = (("(" + String(Number((Math.abs(OfferTime) / 60)).toFixed(1)).split(".0")[0]) + tmpText);
                } else {
                    tmpText = (tmpText + (" (" + (((OfferTime > 0)) ? "+" : "-")));
                    tmpText = (tmpText + (String(Number((Math.abs(OfferTime) / 60)).toFixed(1)).split(".0")[0] + ")"));
                };
            };
            _local3 = this.actor[this.LBL_TIMEBAR_TEXT];
            with (_local3) {
                text = tmpText;
                x = int((POS_TIMEBAR_LABEL_X - (textWidth / 2)));
            };
        }
        public function RequestTV(evt:Event=undefined){
            if (this.tvFunctionName != ""){
                this.trc((("Calling TV function \"" + this.tvFunctionName) + "\" with parameter \"showtv\"!"));
                ExternalInterface.call(this.tvFunctionName, "showtv", (((((this.Savegame[this.SG_PLAYER_ID] + "_") + this.Savegame[this.SG_PAYMENT_ID]) + "_") + this.ServerID) + "_1"), this.Savegame[this.SG_GENDER], this.tvReturnValue);
                this.tvPollTimer.delay = this.tvPollLong;
            } else {
                this.trc("Error: No TV function set!");
            };
            this.tvStatusDest = 0;
        }
        public function TryShowTV(evt:Event=undefined){
            var evt:* = evt;
            if (this.tvTest){
                this.tvStatusDest = 1;
                this.tvTimer.start();
                this.tvTest = false;
            } else {
                if (((((!((this.tvFunctionName == ""))) && (!(this.disableTV)))) && (!(this.preventTv)))){
                    if (!evt){
                        this.tvPollTimer.start();
                        this.tvPollTimer.delay = this.tvPollNormal;
                    } else {
                        if (((!(this.OnStage(this.IMG_TAVERNE_BG))) && (!(this.OnStage(this.IMG_QUESTBAR_BG))))){
                            this.tvPollTimer.stop();
                            return;
                        };
                    };
                    this.trc((("Calling TV function \"" + this.tvFunctionName) + "\" with parameter \"requesttv\"!"));
                    try {
                        this.tvReturnValue = ExternalInterface.call(this.tvFunctionName, "requesttv", (((((this.Savegame[this.SG_PLAYER_ID] + "_") + this.Savegame[this.SG_PAYMENT_ID]) + "_") + this.ServerID) + "_1"), this.Savegame[this.SG_GENDER], 0);
                    } catch(e:Error) {
                        trc(("There was an error: " + e.message));
                        tvPollTimer.delay = tvPollLong;
                    };
                    this.trc(("Return value is " + String(this.tvReturnValue)));
                    if (this.tvReturnValue > 0){
                        this.tvStatusDest = 1;
                        this.tvPollTimer.delay = this.tvPollLong;
                    } else {
                        this.tvStatusDest = 0;
                        if (this.tvReturnValue == -2){
                            this.tvPollTimer.stop();
                        } else {
                            if (this.tvReturnValue == -1){
                                this.tvPollTimer.delay = this.tvPollLong;
                            } else {
                                this.tvPollTimer.delay = this.tvPollNormal;
                            };
                        };
                    };
                    if (this.tvStatusDest != this.tvStatus){
                        this.tvTimer.start();
                    };
                } else {
                    if (((!(this.disableTV)) && (!(this.preventTv)))){
                        this.trc("Notice: No TV function set!");
                    };
                };
            };
        }
        public function ShowTaverneScreen(evt:Event=undefined){
            var DoShowTaverneScreen:* = null;
            var evt:* = evt;
            DoShowTaverneScreen = function (evt:Event=undefined){
                var i:* = 0;
                var questType:* = 0;
                var HutBlinzelTimer:* = null;
                var HutBlinzelStep:* = 0;
                var BarkeeperStep:* = 0;
                var HutBlinzelTimerEvent:* = null;
                var evt:* = evt;
                HutBlinzelTimerEvent = function (evt:TimerEvent){
                    if (OnStage(IMG_TAVERNE_BG)){
                        HutBlinzelStep++;
                        if (HutBlinzelStep > 70){
                            Hide(IMG_TAVERNE_HUTMANN_BLINZELN);
                            HutBlinzelStep = int((Math.random() * 30));
                        } else {
                            if (HutBlinzelStep > 68){
                                Show(IMG_TAVERNE_HUTMANN_BLINZELN);
                            };
                        };
                        BarkeeperStep++;
                        if (BarkeeperStep >= 12){
                            Hide(IMG_TAVERNE_BARKEEPER1);
                            Hide(IMG_TAVERNE_BARKEEPER2);
                            BarkeeperStep = 0;
                        } else {
                            if (BarkeeperStep >= 9){
                                Show(IMG_TAVERNE_BARKEEPER1);
                                Hide(IMG_TAVERNE_BARKEEPER2);
                            } else {
                                if (BarkeeperStep >= 6){
                                    Hide(IMG_TAVERNE_BARKEEPER1);
                                    Show(IMG_TAVERNE_BARKEEPER2);
                                } else {
                                    if (BarkeeperStep >= 3){
                                        Show(IMG_TAVERNE_BARKEEPER1);
                                        Hide(IMG_TAVERNE_BARKEEPER2);
                                    } else {
                                        Hide(IMG_TAVERNE_BARKEEPER1);
                                        Hide(IMG_TAVERNE_BARKEEPER2);
                                    };
                                };
                            };
                        };
                        actor[IMG_TAVERNE_KERZEN].visible = (Math.random() >= 0.5);
                    } else {
                        HutBlinzelTimer.stop();
                        HutBlinzelTimer.removeEventListener(TimerEvent.TIMER, HutBlinzelTimerEvent);
                    };
                };
                questType = GetQuestRandom(0, 5);
                HutBlinzelTimer = new Timer(50);
                HutBlinzelStep = 0;
                BarkeeperStep = 0;
                SetCnt(CNT_TIMEBAR_FILL, IMG_TIMEBAR_FILL);
                SetCnt(CNT_QO_REWARDGOLD, IMG_IF_GOLD);
                SetCnt(CNT_QO_REWARDSILVER, IMG_IF_SILBER);
                RemoveAll();
                Add(BNC_SCREEN_TAVERNE);
                if (GetAdvent() != 0){
                    Add(((IMG_TAVERN_ADVENT + GetAdvent()) - 1));
                };
                if (beerFest){
                    Add(BNC_BEERFEST);
                    i = 0;
                    while (i < 4) {
                        Add((IMG_TV + i));
                        i = (i + 1);
                    };
                    Add(CA_TV);
                };
                if (specialAction > 0){
                    Add(((BNC_SPECIAL_ACTION + specialAction) - 1));
                    actor[((IMG_SPECIAL_ACTION + specialAction) - 1)].mouseEnabled = false;
                    if (!specialActionHint){
                        Add(IMG_TAVERNE_BARKEEPER_HINT);
                        actor[IMG_TAVERNE_BARKEEPER_HINT].mouseEnabled = false;
                        AnimateAch(IMG_TAVERNE_BARKEEPER_HINT, ((100 + REL_TAVERNE_BARKEEPER_Y) - 215));
                    };
                    i = 0;
                    while (i < 4) {
                        Add((IMG_TV + i));
                        i = (i + 1);
                    };
                    Add(CA_TV);
                };
                RefreshTimeBar();
                CheckWrongPage(ACT_SCREEN_TAVERNE);
                Hide(IMG_TAVERNE_HUTMANN_BLINZELN);
                Hide(IMG_TAVERNE_BARKEEPER1);
                Hide(IMG_TAVERNE_BARKEEPER2);
                i = 0;
                while (i < 5) {
                    actor[(IMG_TAVERNE_QUEST1 + i)].visible = (questType == i);
                    i = (i + 1);
                };
                DefineBunch(BNC_TAVERNE_QUESTOVL, (IMG_TAVERNE_QUESTOVL1 + questType));
                HutBlinzelTimer.addEventListener(TimerEvent.TIMER, HutBlinzelTimerEvent);
                TryShowTV();
                if (!lightMode){
                    HutBlinzelTimer.start();
                } else {
                    HutBlinzelTimer.stop();
                };
            };
            if (int(this.Savegame[this.SG_ACTION_STATUS]) == 2){
                this.ShowQuestScreen();
                return;
            };
            this.forceAdventure = false;
            this.actor[this.CNT_QUEST_SLOT].alpha = 1;
            if (this.OnStage(this.IMG_TAVERNE_BG)){
                this.Remove(this.BNC_QUESTOFFER);
                this.Remove(this.BNC_BEEROFFER);
                this.Add(this.BNC_TAVERNE_CAS);
                this.RefreshTimeBar();
                return;
            };
            this.Load(this.BNC_SCREEN_TAVERNE);
            this.Load(this.BNC_QUESTOFFER);
            this.Load(this.BNC_BEEROFFER);
            if (this.beerFest){
                this.Load(this.BNC_BEERFEST);
            };
            if (this.specialAction > 0){
                this.Load(((this.BNC_SPECIAL_ACTION + this.specialAction) - 1));
                this.Load(this.IMG_TAVERNE_BARKEEPER_HINT);
            };
            if (this.GetAdvent() != 0){
                this.Load(((this.IMG_TAVERN_ADVENT + this.GetAdvent()) - 1));
            };
            this.WhenLoaded(DoShowTaverneScreen);
        }
        public function ShowStallScreen(evt:Event=undefined){
            var i:* = 0;
            var DoShowStall:* = null;
            var evt:* = evt;
            DoShowStall = function (){
                var HandTimer:* = null;
                var BauerHandEvent:* = null;
                BauerHandEvent = function (evt:TimerEvent){
                    var iHand:int;
                    var i:int;
                    iHand = int((Math.random() * 5));
                    if (((!(OnStage(IMG_STALL_BG_GUT))) && (!(OnStage(IMG_STALL_BG_BOESE))))){
                        HandTimer.stop();
                        HandTimer.removeEventListener(TimerEvent.TIMER, BauerHandEvent);
                    };
                    i = 0;
                    while (i < 5) {
                        actor[(IMG_STALL_ARME1 + i)].visible = Boolean((i == iHand));
                        i++;
                    };
                };
                HandTimer = new Timer(200);
                RemoveAll();
                actor[LBL_STALL_TITEL].text = txt[TXT_STALL_TITEL];
                if (textDir == "right"){
                    actor[LBL_STALL_TITEL].x = ((actor[LBL_STALL_TEXT].x + actor[LBL_STALL_TEXT].width) - actor[LBL_STALL_TITEL].textWidth);
                };
                actor[LBL_STALL_TEXT].text = txt[TXT_STALL_TEXT];
                Arabize(LBL_STALL_TEXT);
                actor[LBL_STALL_GAIN].text = "";
                if ((((CharVolk >= 5)) && (!(param_censored)))){
                    Add(BNC_STALL_BOESE);
                } else {
                    Add(BNC_STALL_GUT);
                };
                Add(BNC_SCREEN_STALL);
                if (Tageszeit() == 1){
                    Remove(IMG_STALL_NIGHT);
                } else {
                    if (Tageszeit() == 2){
                        Remove(IMG_STALL_NIGHT, IMG_STALL_DAWN);
                    };
                };
                HandTimer.addEventListener(TimerEvent.TIMER, BauerHandEvent);
                HandTimer.start();
            };
            if (((this.OnStage(this.IMG_STALL_BG_GUT)) || (this.OnStage(this.IMG_STALL_BG_BOESE)))){
                return;
            };
            this.Load(this.BNC_SCREEN_STALL);
            if ((((this.CharVolk >= 5)) && (!(this.param_censored)))){
                this.Load(this.BNC_STALL_BOESE);
                this.Load(this.IMG_STALL_OVL_BOESE1, this.IMG_STALL_OVL_BOESE2, this.IMG_STALL_OVL_BOESE3, this.IMG_STALL_OVL_BOESE4);
                i = 0;
                while (i < 4) {
                    this.Load(((this.SND_MOUNT_1 + i) + 4));
                    i = (i + 1);
                };
            } else {
                this.Load(this.BNC_STALL_GUT);
                this.Load(this.IMG_STALL_OVL_GUT1, this.IMG_STALL_OVL_GUT2, this.IMG_STALL_OVL_GUT3, this.IMG_STALL_OVL_GUT4);
                i = 0;
                while (i < 4) {
                    this.Load((this.SND_MOUNT_1 + i));
                    i = (i + 1);
                };
            };
            this.WhenLoaded(DoShowStall);
        }
        public function ShowArenaScreen(oppName:String, oppGilde:String, oppStufe:int){
            var tz:* = 0;
            var DoShowArenaScreen:* = null;
            var PvPDelayCheck:* = null;
            var oppName:* = oppName;
            var oppGilde:* = oppGilde;
            var oppStufe:* = oppStufe;
            DoShowArenaScreen = function (evt:Event=undefined){
                var evt:* = evt;
                RemoveAll();
                switch (tz){
                    case 0:
                        Add(BNC_SCREEN_ARENA_NIGHT);
                        break;
                    case 1:
                        Add(BNC_SCREEN_ARENA_DAWN);
                        break;
                    case 2:
                        Add(BNC_SCREEN_ARENA_DAY);
                        break;
                };
                if (oppName != ""){
                    var _local3 = actor[LBL_WINDOW_TITLE];
                    with (_local3) {
                        text = txt[TXT_ARENA_TITLE];
                        x = ((POS_IF_WIN_X + REL_IF_WIN_WELCOME_X) - int((textWidth / 2)));
                    };
                    Add(BNC_SCREEN_ARENA);
                    if (Capabilities.version.substr(0, 3) != "IOS"){
                        if (lightMode){
                            Remove(IMG_ARENA_FEUER);
                        };
                    };
                    PvPDelayTimer.addEventListener(TimerEvent.TIMER, PvPDelayCheck);
                    PvPDelayTimer.start();
                    PvPDelayCheck();
                    actor[INP_ARENA_ENEMY].getChildAt(1).text = oppName;
                };
            };
            PvPDelayCheck = function (evt:TimerEvent=undefined){
                if (!OnStage(INP_ARENA_ENEMY)){
                    PvPDelayTimer.removeEventListener(TimerEvent.TIMER, PvPDelayCheck);
                    PvPDelayTimer.stop();
                    return;
                };
                if (WaitingFor(Savegame[SG_PVP_REROLL_TIME])){
                    if (textDir == "right"){
                        actor[LBL_ARENA_TEXT].text = (((((((((txt[TXT_ARENA_4] + " (") + String(oppStufe)) + " ") + txt[TXT_HALL_LIST_COLUMN_4]) + ") ") + (((oppGilde == "")) ? "" : (("[" + oppGilde) + "] "))) + oppName) + " ") + txt[TXT_ARENA_3]);
                    } else {
                        actor[LBL_ARENA_TEXT].text = (((((((((txt[TXT_ARENA_3] + " ") + oppName) + (((oppGilde == "")) ? "" : ((" [" + oppGilde) + "]"))) + " (") + txt[TXT_HALL_LIST_COLUMN_4]) + " ") + String(oppStufe)) + ") ") + txt[TXT_ARENA_4]);
                    };
                    actor[LBL_ARENA_DELAY].text = WaitingTime(Savegame[SG_PVP_REROLL_TIME]);
                    SetTitleBar(WaitingTime(Savegame[SG_PVP_REROLL_TIME]));
                    if (textDir == "right"){
                        SetBtnText(BTN_ARENA_OK, ("(~P1) " + txt[TXT_OK]));
                    } else {
                        SetBtnText(BTN_ARENA_OK, (txt[TXT_OK] + " (1~P)"));
                    };
                    Show(LBL_ARENA_DELAY);
                } else {
                    if (textDir == "right"){
                        actor[LBL_ARENA_TEXT].text = (((((((((txt[TXT_ARENA_2] + " (") + String(oppStufe)) + " ") + txt[TXT_HALL_LIST_COLUMN_4]) + ") ") + (((oppGilde == "")) ? "" : (("[" + oppGilde) + "] "))) + oppName) + " ") + txt[TXT_ARENA_1]);
                    } else {
                        actor[LBL_ARENA_TEXT].text = (((((((((txt[TXT_ARENA_1] + " ") + oppName) + (((oppGilde == "")) ? "" : ((" [" + oppGilde) + "]"))) + " (") + txt[TXT_HALL_LIST_COLUMN_4]) + " ") + String(oppStufe)) + ") ") + txt[TXT_ARENA_2]);
                    };
                    Arabize(LBL_ARENA_TEXT);
                    SetBtnText(BTN_ARENA_OK, txt[TXT_OK]);
                    Hide(LBL_ARENA_DELAY);
                    SetTitleBar();
                    PvPDelayTimer.removeEventListener(TimerEvent.TIMER, PvPDelayCheck);
                    PvPDelayTimer.stop();
                };
            };
            tz = this.Tageszeit();
            if ((((int(this.Savegame[this.SG_ACTION_STATUS]) == 1)) && (!(this.hasMirror)))){
                this.ShowWorkScreen();
                return;
            };
            if ((((int(this.Savegame[this.SG_ACTION_STATUS]) == 2)) && (!(this.hasMirror)))){
                this.ShowQuestScreen();
                return;
            };
            this.Load(this.BNC_SCREEN_ARENA);
            switch (tz){
                case 0:
                    this.Load(this.BNC_SCREEN_ARENA_NIGHT);
                    break;
                case 1:
                    this.Load(this.BNC_SCREEN_ARENA_DAWN);
                    break;
                case 2:
                    this.Load(this.BNC_SCREEN_ARENA_DAY);
                    break;
            };
            this.WhenLoaded(DoShowArenaScreen);
        }
        public function Arabize(actorID:int){
            var i:int;
            var ii:int;
            var lines:Array;
            var thisStr:String;
            var nextStr:String;
            var dontCrash:int;
            lines = new Array();
            dontCrash = 0;
            if (this.textDir != "right"){
                return;
            };
            this.actor[actorID].width = (this.actor[actorID].width - 5);
            i = 0;
            while (i < this.actor[actorID].numLines) {
                lines.push(this.actor[actorID].getLineText(i));
                i++;
            };
            this.actor[actorID].width = (this.actor[actorID].width + 5);
            dontCrash = 0;
            i = 0;
            while (i < lines.length) {
                while (((!((lines[i].substr(-1) == " "))) && ((lines[i].length > 0)))) {
                    if (lines[i].length <= 1){
                        break;
                    };
                    if ((((i == (lines.length - 1))) && ((lines[i].length > 0)))){
                        lines.push(" ");
                    };
                    lines[(i + 1)] = (lines[i].substr(-1) + lines[(i + 1)]);
                    lines[i] = lines[i].substr(0, (lines[i].length - 1));
                    dontCrash++;
                    if (dontCrash > 3000){
                        break;
                    };
                };
                i++;
            };
            this.actor[actorID].text = "";
            i = 0;
            while (i < lines.length) {
                this.actor[actorID].text = ((lines[i] + String.fromCharCode(13)) + this.actor[actorID].text);
                i++;
            };
        }
        public function ShowDealerScreen(evt:Event=undefined, loadOnly:Boolean=false){
            var papaya_firebug:* = null;
            var url:* = null;
            var DoShowDealerScreen:* = null;
            var evt:* = evt;
            var loadOnly:Boolean = loadOnly;
            DoShowDealerScreen = function (par:Object=undefined){
                RemoveAll();
                Add(BNC_SCREEN_DEALER);
            };
            papaya_firebug = "0";
            if (this.paramObj["firebug"]){
                if (this.paramObj["firebug"] != ""){
                    papaya_firebug = "1";
                };
            };
            url = ((((((((((((((((((((((this.param_papaya_path + "?playerid=") + this.Savegame[this.SG_PLAYER_ID]) + "&paymentid=") + this.Savegame[this.SG_PAYMENT_ID]) + "&serverid=") + this.ServerID) + "&serverdomain=") + this.server) + "&sessionid=") + this.sessionID) + "&special=") + this.DealerAktion) + "&langcode=") + this.lang_code) + "&volume=") + String((this.so.data.volume / 10))) + "&mpproject=") + this.MPProject) + "&cfgfile=") + this.param_papaya_cfg_file) + "&firebug=") + papaya_firebug);
            if (this.actorURL[this.IMG_SCR_DEALER_BG] != url){
                this.actorURL[this.IMG_SCR_DEALER_BG] = url;
                this.actorLoaded[this.IMG_SCR_DEALER_BG] = 0;
            };
            this.actor[this.IMG_SCR_DEALER_BG].mouseChildren = true;
            this.actor[this.IMG_SCR_DEALER_BG].mouseEnabled = true;
            this.Load(this.BNC_SCREEN_DEALER);
            if (!loadOnly){
                this.WhenLoaded(DoShowDealerScreen);
            };
        }
        public function ShowScreenGildeGruenden(evt:Event=undefined){
            var DoShowScreenGilden:* = null;
            var evt:* = evt;
            DoShowScreenGilden = function (evt:Event=undefined){
                var evt:* = evt;
                RemoveAll();
                Gilde = "";
                myOwnRank = -1;
                myOwnAttackTarget = -1;
                myOwnGuildMoney = -1;
                var _local3 = actor[LBL_WINDOW_TITLE];
                with (_local3) {
                    text = txt[TXT_GILDE_GRUENDEN_TITLE];
                    x = ((POS_IF_WIN_X + REL_IF_WIN_WELCOME_X) - int((textWidth / 2)));
                };
                Add(BNC_SCREEN_GILDE_GRUENDEN);
            };
            this.Load(this.BNC_SCREEN_GILDE_GRUENDEN);
            this.WhenLoaded(DoShowScreenGilden);
        }
        public function GetSpendAmount():String{
            var amount:int;
            amount = 1;
            if (int(this.Savegame[this.SG_LEVEL]) >= 120){
                amount = 100;
            } else {
                if (int(this.Savegame[this.SG_LEVEL]) >= 100){
                    amount = 50;
                } else {
                    if (int(this.Savegame[this.SG_LEVEL]) >= 50){
                        amount = 10;
                    } else {
                        if (int(this.Savegame[this.SG_LEVEL]) >= 25){
                            amount = 5;
                        };
                    };
                };
            };
            return (String(amount));
        }
        public function addSuggestNames(addArray){
            var i:int;
            if (!(addArray is Array)){
                addArray = [addArray];
            };
            i = 0;
            while (i < addArray.length) {
                if (this.suggestNames.indexOf(addArray[i]) == -1){
                    this.suggestNames.push(addArray[i]);
                };
                i++;
            };
            i = 0;
            while (i < this.suggestNames.length) {
                if (this.suggestNames[i].toLowerCase() == this.actor[this.INP_NAME].getChildAt(1).text.toLowerCase()){
                    this.suggestNames.splice(i, 1);
                    i--;
                };
                i++;
            };
        }
        public function crestMoveFn(evt:TimerEvent){
            if (this.actor[this.CNT_GILDE_CREST].y > this.crestMoveDest){
                this.actor[this.CNT_GILDE_CREST].y = (this.actor[this.CNT_GILDE_CREST].y - 5);
            } else {
                if (this.actor[this.CNT_GILDE_CREST].y < this.crestMoveDest){
                    this.actor[this.CNT_GILDE_CREST].y = (this.actor[this.CNT_GILDE_CREST].y + 5);
                } else {
                    this.crestMoveTimer.stop();
                };
            };
        }
        public function getRandomCrest(){
            var i:int;
            var result:Array;
            var guildChecksum:* = 0;
            result = new Array();
            i = 0;
            while (i < this.crestElementPos.length) {
                result.push(int((Math.random() * this.crestElementPos[i][4])));
                i++;
            };
            return (result);
        }
        public function setDefaultCrest(){
            var i:* = 0;
            var lastResult:* = 0;
            var GuildRandom:* = function (val:int):int{
                var result:int;
                result = Math.abs(((lastGuildData[0] + lastResult) % val));
                lastResult = result;
                return (result);
            };
            lastResult = 0;
            this.crest = new Array();
            i = 0;
            while (i < this.crestElementPos.length) {
                this.crest.push(int(GuildRandom(this.crestElementPos[i][4])));
                i = (i + 1);
            };
            i = 0;
            while (i < this.crestColor.length) {
                this.crestColor[i] = GuildRandom(this.heraldicColors.length);
                i = (i + 1);
            };
            this.loadCrest();
        }
        public function getCrestStr():String{
            var result:* = null;
            var i:* = 0;
            var dec2hex:* = function (d:int):String{
                var c:Array;
                var l:int;
                var r:int;
                c = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "A", "B", "C", "D", "E", "F"];
                if (d > 0xFF){
                    d = 0xFF;
                };
                l = (d / 16);
                r = (d % 16);
                return ((c[l] + c[r]));
            };
            result = "";
            i = 0;
            while (i < this.crest.length) {
                result = (result + dec2hex(this.crest[i]));
                i = (i + 1);
            };
            i = 0;
            while (i < this.crestColor.length) {
                result = (result + dec2hex(this.crestColor[i]));
                i = (i + 1);
            };
            return (result);
        }
        public function setCrestStr(str:String){
            var i:int;
            var hex:String;
            var val:int;
            i = 0;
            while (i < this.crest.length) {
                hex = str.substr(0, 2);
                str = str.substr(2);
                val = int(("0x" + hex));
                if (val < 0){
                    val = 0;
                };
                if (val >= this.crestElementPos[i][4]){
                    val = 0;
                };
                this.crest[i] = val;
                i++;
            };
            i = 0;
            while (i < this.crestColor.length) {
                hex = str.substr(0, 2);
                str = str.substr(2);
                val = int(("0x" + hex));
                if (val < 0){
                    val = 0;
                };
                if (val >= this.heraldicColors.length){
                    val = 0;
                };
                this.crestColor[i] = val;
                i++;
            };
            this.loadCrest();
        }
        public function loadCrest(){
            var i:* = 0;
            var newLoad:* = false;
            var url:* = null;
            var localActorID:* = 0;
            var tmpFltFigure:* = null;
            var tmpFltShield:* = null;
            var tmpFlt:* = null;
            tmpFltFigure = new ColorMatrixFilter([this.heraldicColors[this.crestColor[3]][0], 0, 0, 0, 0, this.heraldicColors[this.crestColor[3]][1], 0, 0, 0, 0, this.heraldicColors[this.crestColor[3]][2], 0, 0, 0, 0, 0, 0, 0, 1, 0]);
            tmpFltShield = new ColorMatrixFilter([0, this.heraldicColors[this.crestColor[1]][0], this.heraldicColors[this.crestColor[2]][0], 0, 0, 0, this.heraldicColors[this.crestColor[1]][1], this.heraldicColors[this.crestColor[2]][1], 0, 0, 0, this.heraldicColors[this.crestColor[1]][2], this.heraldicColors[this.crestColor[2]][2], 0, 0, 0, 0, 0, 1, 0]);
            i = 1;
            while (i < 4) {
                tmpFlt = new ColorMatrixFilter([0, this.heraldicColors[this.crestColor[i]][0], 0, 0, 0, 0, this.heraldicColors[this.crestColor[i]][1], 0, 0, 0, 0, this.heraldicColors[this.crestColor[i]][2], 0, 0, 0, 0, 0, 0, 1, 0]);
                this.actor[(this.IMG_GILDE_CREST_COLOR_FILLIN + i)].filters = [tmpFlt];
                this.EnablePopup((this.CNT_GILDE_CREST_COLOR + i), this.txt[(this.TXT_CREST_TINCTUREBOXES + i)].split("%1").join(this.txt[(this.TXT_CREST_TINCTURES + this.crestColor[i])]));
                i = (i + 1);
            };
            i = 0;
            while (i < this.crestElementPos.length) {
                localActorID = (this.IMG_GILDE_CREST + i);
                url = (((((this.img_url[this.img_url_index] + "res/gfx/scr/gilde/crest/tiles/crest_") + String((i + 1))) + "_") + String((this.crest[i] + 1))) + ".png");
                newLoad = !((this.actorURL[localActorID] == url));
                this.actorURL[localActorID] = url;
                if (newLoad){
                    this.actorLoaded[localActorID] = 0;
                    this.Load(localActorID);
                };
                if (i == 2){
                    url = (((((this.img_url[this.img_url_index] + "res/gfx/scr/gilde/crest/tiles/crest_") + String((i + 1))) + "_") + String((this.crest[i] + 1))) + "_color.png");
                    newLoad = !((this.actorURL[this.IMG_GILDE_CREST_SHIELDCOLOR] == url));
                    this.actorURL[this.IMG_GILDE_CREST_SHIELDCOLOR] = url;
                    if (newLoad){
                        this.actorLoaded[this.IMG_GILDE_CREST_SHIELDCOLOR] = 0;
                        this.Load(this.IMG_GILDE_CREST_SHIELDCOLOR);
                    };
                    this.actor[this.IMG_GILDE_CREST_SHIELDCOLOR].filters = [tmpFltShield];
                };
                if (i == 3){
                    var _local2 = this.actor[this.LBL_GILDE_CREST_INSCRIPTION];
                    with (_local2) {
                        y = 210;
                        switch ((crest[i] + 1)){
                            case 7:
                            case 1:
                            case 4:
                            case 5:
                            case 8:
                            case 9:
                                y = (y - 2);
                                break;
                            case 3:
                            case 6:
                                y = (y - 1);
                                break;
                            case 2:
                            case 10:
                            case 11:
                            case 12:
                                break;
                        };
                    };
                };
                if (i == 6){
                    if (this.selecterCrestElement == i){
                        this.actor[(this.IMG_GILDE_CREST + i)].filters = [tmpFltFigure, this.Filter_CrestSelected];
                    } else {
                        this.actor[(this.IMG_GILDE_CREST + i)].filters = [tmpFltFigure];
                    };
                } else {
                    if (this.selecterCrestElement == i){
                        this.actor[(this.IMG_GILDE_CREST + i)].filters = [this.Filter_CrestSelected];
                    } else {
                        this.actor[(this.IMG_GILDE_CREST + i)].filters = [];
                    };
                };
                i = (i + 1);
            };
            if (this.selecterCrestElement >= 0){
                this.actor[this.LBL_GILDE_CREST_ELEMENT].text = this.txt[(this.TXT_CREST_ELEMENT + this.selecterCrestElement)].split("%1").join(String((this.crest[this.selecterCrestElement] + 1))).split("%2").join(String(this.crestElementPos[this.selecterCrestElement][4]));
                this.actor[this.LBL_GILDE_CREST_ELEMENT].x = ((this.POS_GILDE_GEBAEUDE_X + 120) - (this.actor[this.LBL_GILDE_CREST_ELEMENT].textWidth / 2));
            };
        }
        public function clickChatLine(evt){
            var lineText:String;
            var chatAuthor:*;
            if ((evt is MouseEvent)){
                lineText = evt.target.text;
            } else {
                lineText = evt;
            };
            if (this.crestSuggestion[lineText]){
                this.Remove(this.BNC_GILDE_GEBAEUDE);
                this.Add(this.BNC_GILDE_CREST);
                if (this.actor[this.CNT_GILDE_CREST].y == this.POS_GILDE_GEBAEUDE_Y){
                    this.SetAlpha(this.BNC_GILDE_CREST_CONTROLS, 1);
                    this.Add(this.BNC_GILDE_CREST_CONTROLS);
                } else {
                    this.selecterCrestElement = -1;
                };
                if (this.myOwnRank == 1){
                    this.crestSuggested = true;
                    this.SetBtnText(this.BTN_GILDE_CREST_OK, this.txt[this.TXT_CREST_APPLY]);
                } else {
                    this.crestSuggested = false;
                    this.SetBtnText(this.BTN_GILDE_CREST_OK, this.txt[this.TXT_CREST_SUGGEST]);
                };
                this.setCrestStr(this.crestSuggestion[lineText]);
                return;
            };
            chatAuthor = lineText.substr(6);
            if (chatAuthor.indexOf(":") != -1){
                chatAuthor = chatAuthor.substr(0, chatAuthor.indexOf(":"));
                if (chatAuthor.length <= 20){
                    if (chatAuthor.indexOf(" > ") == -1){
                        if (this.actor[this.INP_GILDE_CHAT].getChildAt(0).text == ""){
                            this.actor[this.INP_GILDE_CHAT].getChildAt(0).text = (("/w " + chatAuthor.split(" ").join("#")) + " ");
                        };
                        this.actor[this.INP_GILDE_CHAT].getChildAt(0).setSelection(this.actor[this.INP_GILDE_CHAT].getChildAt(0).text.length, this.actor[this.INP_GILDE_CHAT].getChildAt(0).text.length);
                    };
                };
            };
            stage.focus = this.actor[this.INP_GILDE_CHAT].getChildAt(0);
        }
        public function ShowScreenGilden(guildData:Array, guildDescr:String, guildMembers:Array, ThisGilde:String, isMine:Boolean=true, GildenRang:int=0, GildenEhre:int=0, AttackCost:int=0){
            var DoShowScreenGilden:* = null;
            var guildData:* = guildData;
            var guildDescr:* = guildDescr;
            var guildMembers:* = guildMembers;
            var ThisGilde:* = ThisGilde;
            var isMine:Boolean = isMine;
            var GildenRang:int = GildenRang;
            var GildenEhre:int = GildenEhre;
            var AttackCost:int = AttackCost;
            DoShowScreenGilden = function (evt:Event=undefined){
                var i:* = 0;
                var myRank:* = 0;
                var myAttackStatus:* = 0;
                var scrollLevel:* = 0;
                var selectLevel:* = 0;
                var GoldToDonate:* = 0;
                var MushToDonate:* = 0;
                var DonateTimeout:* = null;
                var thisInstanceID:* = 0;
                var removeListenersTimer:* = null;
                var GoldKosten:* = 0;
                var PilzKosten:* = 0;
                var Nutzen:* = null;
                var Ausbaustufe:* = 0;
                var AusbaustufeEx:* = 0;
                var GoldKostenAvg:* = 0;
                var PilzKostenAvg:* = 0;
                var cheapest:* = 0;
                var countCompleted:* = 0;
                var LeftBoxWidth:* = 0;
                var RightBoxWidth:* = 0;
                var crestView:* = false;
                var startWithCrest:* = false;
                var GuildBtnRepeatTimer:* = null;
                var raidCost:* = NaN;
                var isRaid:* = false;
                var GuildBtnHandler:* = null;
                var DoDonate:* = null;
                var RequestPlayerScreen:* = null;
                var BuildGuildList:* = null;
                var evt:* = evt;
                var removeListeners:* = function (evt:TimerEvent){
                    var evt:* = evt;
                    if (((!((guildInstanceID == thisInstanceID))) || (!(OnStage(IMG_GILDE_RAHMEN))))){
                        removeListenersTimer.stop();
                        var _local3 = removeListenersTimer;
                        with (_local3) {
                            removeEventListener(TimerEvent.TIMER, removeListeners);
                        };
                        actor[BTN_GILDE_SCROLL_UP].removeEventListener(MouseEvent.CLICK, GuildBtnHandler);
                        actor[BTN_GILDE_SCROLL_DOWN].removeEventListener(MouseEvent.CLICK, GuildBtnHandler);
                        actor[BTN_GILDE_DIALOG_CANCEL].removeEventListener(MouseEvent.CLICK, GuildBtnHandler);
                        actor[BTN_GILDE_DIALOG_OK_KICK].removeEventListener(MouseEvent.CLICK, GuildBtnHandler);
                        actor[BTN_GILDE_DIALOG_OK_MASTER].removeEventListener(MouseEvent.CLICK, GuildBtnHandler);
                        actor[BTN_GILDE_DIALOG_OK_INVITE].removeEventListener(MouseEvent.CLICK, GuildBtnHandler);
                        actor[BTN_GILDE_DIALOG_OK_REVOLT].removeEventListener(MouseEvent.CLICK, GuildBtnHandler);
                        actor[BTN_GILDE_DIALOG_OK_RAID].removeEventListener(MouseEvent.CLICK, GuildBtnHandler);
                        actor[BTN_GILDE_INVITE].removeEventListener(MouseEvent.CLICK, GuildBtnHandler);
                        actor[BTN_GILDE_PROFILE].removeEventListener(MouseEvent.CLICK, GuildBtnHandler);
                        actor[BTN_GILDE_KICK].removeEventListener(MouseEvent.CLICK, GuildBtnHandler);
                        actor[BTN_GILDE_PROMOTE].removeEventListener(MouseEvent.CLICK, GuildBtnHandler);
                        actor[BTN_GILDE_DEMOTE].removeEventListener(MouseEvent.CLICK, GuildBtnHandler);
                        actor[BTN_GILDE_MASTER].removeEventListener(MouseEvent.CLICK, GuildBtnHandler);
                        actor[BTN_GILDE_REVOLT].removeEventListener(MouseEvent.CLICK, GuildBtnHandler);
                        actor[BTN_GILDE_GEBAEUDE_IMPROVE].removeEventListener(MouseEvent.CLICK, GuildBtnHandler);
                        actor[(BTN_GILDE_GEBAEUDE_IMPROVE + 1)].removeEventListener(MouseEvent.CLICK, GuildBtnHandler);
                        actor[(BTN_GILDE_GEBAEUDE_IMPROVE + 2)].removeEventListener(MouseEvent.CLICK, GuildBtnHandler);
                        actor[BTN_GILDE_KATAPULT].removeEventListener(MouseEvent.CLICK, GuildBtnHandler);
                        actor[(BTN_GILDE_KATAPULT + 1)].removeEventListener(MouseEvent.CLICK, GuildBtnHandler);
                        actor[(BTN_GILDE_KATAPULT + 2)].removeEventListener(MouseEvent.CLICK, GuildBtnHandler);
                        actor[BTN_GILDE_GOLD].removeEventListener(MouseEvent.MOUSE_DOWN, GuildBtnHandler);
                        actor[BTN_GILDE_MUSH].removeEventListener(MouseEvent.MOUSE_DOWN, GuildBtnHandler);
                        actor[BTN_GILDE_GOLD].removeEventListener(MouseEvent.MOUSE_OUT, DoDonate);
                        actor[BTN_GILDE_MUSH].removeEventListener(MouseEvent.MOUSE_OUT, DoDonate);
                        _local3 = actor[BTN_GILDE_GOLD];
                        with (_local3) {
                            removeEventListener(MouseEvent.MOUSE_DOWN, GuildBtnDownHandler);
                            removeEventListener(MouseEvent.MOUSE_UP, GuildBtnUpHandler);
                            removeEventListener(MouseEvent.MOUSE_OUT, GuildBtnUpHandler);
                        };
                        _local3 = actor[BTN_GILDE_MUSH];
                        with (_local3) {
                            removeEventListener(MouseEvent.MOUSE_DOWN, GuildBtnDownHandler);
                            removeEventListener(MouseEvent.MOUSE_UP, GuildBtnUpHandler);
                            removeEventListener(MouseEvent.MOUSE_OUT, GuildBtnUpHandler);
                        };
                        _local3 = actor[INP_GILDE_TEXT];
                        with (_local3) {
                            removeEventListener(FocusEvent.FOCUS_IN, EnterGuildDesc);
                            removeEventListener(FocusEvent.FOCUS_OUT, LeaveGuildDesc);
                        };
                    };
                };
                var DonateVal:* = function (avg:int, localMax:int):String{
                    var dval:int;
                    dval = 1;
                    if (avg >= 10000){
                        dval = 10;
                    } else {
                        if (avg >= 5000){
                            dval = 10;
                        } else {
                            if (avg >= 1000){
                                dval = 10;
                            } else {
                                if (avg >= 500){
                                    dval = 5;
                                } else {
                                    if (avg >= 100){
                                        dval = 5;
                                    } else {
                                        if (avg >= 50){
                                            dval = 2;
                                        } else {
                                            if (avg >= 10){
                                                dval = 1;
                                            } else {
                                                dval = 1;
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                    if (((!((cheapest == -1))) && ((dval > cheapest)))){
                        dval = cheapest;
                    };
                    if (dval > localMax){
                        dval = localMax;
                    };
                    if (dval < 1){
                        dval = 1;
                    };
                    return (String(dval));
                };
                var GuildBtnDownHandler:* = function (evt:Event){
                    var ClickCount:* = 0;
                    var evt:* = evt;
                    var DoPushGuildBtn:* = function (timerevt:Event){
                        var timerevt:* = timerevt;
                        if (DestroyGuildBtnTimer){
                            DestroyGuildBtnTimer = false;
                            var _local3 = GuildBtnRepeatTimer;
                            with (_local3) {
                                stop();
                                delay = 1000;
                                removeEventListener(TimerEvent.TIMER, DoPushGuildBtn);
                            };
                        } else {
                            ClickCount++;
                            switch (ClickCount){
                                case 1:
                                    GuildBtnRepeatTimer.delay = 500;
                                    break;
                                case 3:
                                    GuildBtnRepeatTimer.delay = 250;
                                    break;
                                case 10:
                                    GuildBtnRepeatTimer.delay = 125;
                                    break;
                                case 20:
                                    GuildBtnRepeatTimer.delay = 62;
                                    break;
                            };
                            if (GuildBtnHandler(evt, true)){
                                Play(SND_CLICK);
                            } else {
                                if (GuildBtnRepeatTimer.running){
                                    DestroyGuildBtnTimer = true;
                                };
                            };
                        };
                    };
                    ClickCount = 0;
                    if (GuildBtnRepeatTimer.running){
                        return;
                    };
                    DestroyGuildBtnTimer = false;
                    var _local3 = GuildBtnRepeatTimer;
                    with (_local3) {
                        delay = 1000;
                        addEventListener(TimerEvent.TIMER, DoPushGuildBtn);
                        start();
                    };
                };
                var GuildBtnUpHandler:* = function (evt:Event){
                    if (GuildBtnRepeatTimer.running){
                        DestroyGuildBtnTimer = true;
                    };
                };
                var EnterGuildDesc:* = function (evt:FocusEvent){
                    var evt:* = evt;
                    var _local3 = actor[INP_GILDE_TEXT].getChildAt(0);
                    with (_local3) {
                        if (type == TextFieldType.INPUT){
                            if (text == txt[TXT_ENTERGUILDDESC]){
                                text = "";
                            };
                        };
                    };
                };
                var LeaveGuildDesc:* = function (evt:FocusEvent){
                    var evt:* = evt;
                    var _local3 = actor[INP_GILDE_TEXT].getChildAt(0);
                    with (_local3) {
                        if (type == TextFieldType.INPUT){
                            if (text != resolveBreaks(guildDescr)){
                                guildDescr = SemiStrip(text);
                                SendAction(ACT_GUILD_SET_DESC, actor[INP_NAME].getChildAt(1).text, Gilde, ((oldCrestStr + "§") + RemoveIllegalChars(SemiStrip(text))), MD5(actor[INP_LOGIN_PASSWORD].getChildAt(1).text));
                            };
                            if (text == ""){
                                text = txt[TXT_ENTERGUILDDESC];
                            };
                        };
                    };
                };
                var PlaceButtonSet:* = function (){
                    var selRank:int;
                    switch (myRank){
                        case 1:
                            Add(BNC_GILDE_SET_MASTER);
                            if (guildData[0] == Savegame[SG_GUILD_INDEX]){
                                Show(BTN_PLAYER_GUILD_INVITE);
                            };
                            break;
                        case 2:
                            Add(BNC_GILDE_SET_OFFICER);
                            if (guildData[0] == Savegame[SG_GUILD_INDEX]){
                                Show(BTN_PLAYER_GUILD_INVITE);
                            };
                            break;
                        case 3:
                        case 0:
                            if (guildData[0] == Savegame[SG_GUILD_INDEX]){
                                Hide(BTN_PLAYER_GUILD_INVITE);
                            };
                            Add(BNC_GILDE_SET_MEMBER);
                            break;
                    };
                    selRank = guildData[((GUILD_MEMBERRANK + selectLevel) + scrollLevel)];
                    if ((((int(guildData[((GUILD_MEMBERID + selectLevel) + scrollLevel)]) == int(Savegame[SG_PLAYER_ID]))) && (isMine))){
                        Add(BTN_GILDE_KICK);
                        Remove(IMG_GILDE_KICK_GRAY);
                        Remove(BTN_GILDE_PROMOTE);
                        Remove(BTN_GILDE_MASTER);
                        AddSome(IMG_GILDE_PROMOTE_GRAY, IMG_GILDE_MASTER_GRAY);
                    } else {
                        if ((((selRank <= 2)) && ((myRank == 2)))){
                            Remove(BTN_GILDE_KICK);
                            Add(IMG_GILDE_KICK_GRAY);
                        };
                    };
                    if (selRank == 4){
                        Remove(BTN_GILDE_PROMOTE);
                        Remove(BTN_GILDE_MASTER);
                        AddSome(IMG_GILDE_PROMOTE_GRAY, IMG_GILDE_MASTER_GRAY);
                    };
                    if (int(guildData[3]) >= int(guildData[5])){
                        Remove(BTN_GILDE_INVITE);
                        if (guildData[0] == Savegame[SG_GUILD_INDEX]){
                            Hide(BTN_PLAYER_GUILD_INVITE);
                        };
                        AddSome(IMG_GILDE_INVITE_GRAY);
                    };
                    if ((((selRank == 2)) && ((myRank == 1)))){
                        Remove(BTN_GILDE_PROMOTE);
                        Add(BTN_GILDE_DEMOTE);
                    };
                    if ((((((((selRank == 1)) && ((int(guildData[12]) < 0)))) && ((myRank <= 3)))) && ((myRank > 0)))){
                        Remove(IMG_GILDE_MASTER_GRAY);
                        Add(BTN_GILDE_REVOLT);
                    };
                };
                GuildBtnHandler = function (evt:Event, typematic:Boolean=false):Boolean{
                    var actorID:* = 0;
                    var selRank:* = 0;
                    var evt:* = evt;
                    var typematic:Boolean = typematic;
                    actorID = GetActorID(evt.target);
                    selRank = guildData[((GUILD_MEMBERRANK + selectLevel) + scrollLevel)];
                    switch (actorID){
                        case BTN_GILDE_SCROLL_UP:
                            scrollLevel = (scrollLevel - 15);
                            if (scrollLevel < 0){
                                scrollLevel = 0;
                            };
                            BuildGuildList();
                            break;
                        case BTN_GILDE_SCROLL_DOWN:
                            scrollLevel = (scrollLevel + 15);
                            if (scrollLevel > (int(guildData[3]) - 15)){
                                scrollLevel = (int(guildData[3]) - 15);
                            };
                            if (scrollLevel < 0){
                                scrollLevel = 0;
                            };
                            BuildGuildList();
                            break;
                        case BTN_GILDE_INVITE:
                            Add(BNC_GILDE_DIALOG_INVITE);
                            actor[INP_GILDE_DIALOG_INVITE].getChildAt(1).text = "";
                            var _local4 = actor[LBL_WINDOW_TITLE];
                            with (_local4) {
                                text = txt[TXT_GILDE_INVITE_TITLE];
                                x = ((POS_IF_WIN_X + REL_IF_WIN_WELCOME_X) - int((textWidth / 2)));
                            };
                            break;
                        case BTN_GILDE_PROFILE:
                            RequestPlayerScreen();
                            break;
                        case BTN_GILDE_REVOLT:
                            Add(BNC_GILDE_DIALOG_REVOLT);
                            _local4 = actor[LBL_WINDOW_TITLE];
                            with (_local4) {
                                text = txt[TXT_REVOLT_WARNING_TITLE];
                                x = ((POS_IF_WIN_X + REL_IF_WIN_WELCOME_X) - int((textWidth / 2)));
                            };
                            break;
                        case BTN_GILDE_KICK:
                            if (selRank == 4){
                                KickMember();
                            } else {
                                Add(BNC_GILDE_DIALOG_KICK);
                                if (int(guildData[((GUILD_MEMBERID + selectLevel) + scrollLevel)]) == int(Savegame[SG_PLAYER_ID])){
                                    Remove(LBL_GILDE_DIALOG_TEXT_KICK);
                                    Add(LBL_GILDE_DIALOG_TEXT_QUIT);
                                    _local4 = actor[LBL_WINDOW_TITLE];
                                    with (_local4) {
                                        text = txt[TXT_GILDE_QUIT_TITLE];
                                        x = ((POS_IF_WIN_X + REL_IF_WIN_WELCOME_X) - int((textWidth / 2)));
                                    };
                                } else {
                                    _local4 = actor[LBL_WINDOW_TITLE];
                                    with (_local4) {
                                        text = txt[TXT_GILDE_KICK_TITLE];
                                        x = ((POS_IF_WIN_X + REL_IF_WIN_WELCOME_X) - int((textWidth / 2)));
                                    };
                                };
                            };
                            break;
                        case BTN_GILDE_PROMOTE:
                        case BTN_GILDE_DEMOTE:
                            ToggleOfficer();
                            break;
                        case BTN_GILDE_MASTER:
                            Add(BNC_GILDE_DIALOG_MASTER);
                            _local4 = actor[LBL_WINDOW_TITLE];
                            with (_local4) {
                                text = txt[TXT_GILDE_MASTER_TITLE];
                                x = ((POS_IF_WIN_X + REL_IF_WIN_WELCOME_X) - int((textWidth / 2)));
                            };
                            break;
                        case BTN_GILDE_DIALOG_OK_KICK:
                            KickMember();
                            break;
                        case BTN_GILDE_DIALOG_OK_MASTER:
                            MakeMaster();
                            break;
                        case BTN_GILDE_DIALOG_OK_INVITE:
                            InvitePlayer();
                            break;
                        case BTN_GILDE_DIALOG_OK_REVOLT:
                            Revolt();
                            break;
                        case BTN_GILDE_DIALOG_OK_RAID:
                            SendAction(ACT_GUILD_COMMENCE_ATTACK, -1);
                            break;
                        case BTN_GILDE_DIALOG_CANCEL:
                            Remove(BNC_GILDE_DIALOG_INVITE);
                            Remove(BNC_GILDE_DIALOG_KICK);
                            Remove(BNC_GILDE_DIALOG_REVOLT);
                            Remove(BNC_GILDE_DIALOG_MASTER);
                            Remove(LBL_GILDE_DIALOG_TEXT_QUIT);
                            Remove(BNC_GILDE_DIALOG_RAID);
                            break;
                        case BTN_GILDE_KATAPULT:
                        case (BTN_GILDE_KATAPULT + 1):
                        case (BTN_GILDE_KATAPULT + 2):
                            SendAction(ACT_GUILD_IMPROVE, actor[INP_NAME].getChildAt(1).text, Gilde, MD5(actor[INP_LOGIN_PASSWORD].getChildAt(1).text), 0);
                            break;
                        case BTN_GILDE_GEBAEUDE_IMPROVE:
                        case (BTN_GILDE_GEBAEUDE_IMPROVE + 1):
                        case (BTN_GILDE_GEBAEUDE_IMPROVE + 2):
                            SendAction(ACT_GUILD_IMPROVE, actor[INP_NAME].getChildAt(1).text, Gilde, MD5(actor[INP_LOGIN_PASSWORD].getChildAt(1).text), ((actorID - BTN_GILDE_GEBAEUDE_IMPROVE) + 1));
                            break;
                        case BTN_GILDE_GOLD:
                            if (int(Savegame[SG_EMAIL_VALID]) == 1){
                                if ((((int(actor[LBL_IF_GOLD].text) >= int(actor[LBL_GILDE_GOLD2].text))) && (((int(actor[LBL_GILDE_GOLD].text) + int(actor[LBL_GILDE_GOLD2].text)) <= 10000000)))){
                                    GoldToDonate = (GoldToDonate + int(actor[LBL_GILDE_GOLD2].text));
                                    actor[LBL_IF_GOLD].text = String((int(actor[LBL_IF_GOLD].text) - int(actor[LBL_GILDE_GOLD2].text)));
                                    actor[LBL_GILDE_GOLD].text = String((int(actor[LBL_GILDE_GOLD].text) + int(actor[LBL_GILDE_GOLD2].text)));
                                    DonateTimeout.stop();
                                    DonateTimeout.start();
                                } else {
                                    DoDonate();
                                    if (int(actor[LBL_IF_GOLD].text) >= int(actor[LBL_GILDE_GOLD2].text)){
                                        ErrorMessage(txt[TXT_ERROR_GUILD_CASH_FULL]);
                                    } else {
                                        if (!typematic){
                                            ErrorMessage(txt[TXT_ERROR_GUILD_TOO_EXPENSIVE]);
                                        };
                                    };
                                    return (false);
                                };
                            } else {
                                ErrorMessage(txt[TXT_ERROR_GUILD_EMAIL_VALIDATE]);
                                return (false);
                            };
                            break;
                        case BTN_GILDE_MUSH:
                            if (int(Savegame[SG_EMAIL_VALID]) == 1){
                                if (int(Savegame[SG_FIRST_PAYMENT]) != 0){
                                    if (int(actor[LBL_IF_PILZE].text) >= int(actor[LBL_GILDE_MUSH2].text)){
                                        MushToDonate = (MushToDonate + int(actor[LBL_GILDE_MUSH2].text));
                                        actor[LBL_IF_PILZE].text = String((int(actor[LBL_IF_PILZE].text) - int(actor[LBL_GILDE_MUSH2].text)));
                                        actor[LBL_GILDE_MUSH].text = String((int(actor[LBL_GILDE_MUSH].text) + int(actor[LBL_GILDE_MUSH2].text)));
                                        EnablePopup(LBL_IF_PILZE);
                                        DonateTimeout.stop();
                                        DonateTimeout.start();
                                    } else {
                                        DoDonate();
                                        if (!typematic){
                                            ErrorMessage(txt[TXT_ERROR_GUILD_TOO_EXPENSIVE]);
                                        };
                                        return (false);
                                    };
                                } else {
                                    ErrorMessage(txt[TXT_ERROR_GUILD_MUSH_FREE]);
                                    return (false);
                                };
                            } else {
                                ErrorMessage(txt[TXT_ERROR_GUILD_EMAIL_VALIDATE]);
                                return (false);
                            };
                            break;
                    };
                    return (true);
                };
                DoDonate = function (evt:Event=undefined){
                    DonateTimeout.stop();
                    if (GoldToDonate > 0){
                        SendAction(ACT_GUILD_DONATE, 1, String((GoldToDonate * 100)));
                    } else {
                        if (MushToDonate > 0){
                            SendAction(ACT_GUILD_DONATE, 2, String(MushToDonate));
                        };
                    };
                    GoldToDonate = 0;
                    MushToDonate = 0;
                };
                RequestPlayerScreen = function (){
                    var playerName:String;
                    var selRank:int;
                    playerName = guildMembers[((selectLevel + scrollLevel) + 1)];
                    if (playerName == ""){
                        return;
                    };
                    selName = playerName;
                    selRank = guildData[((GUILD_MEMBERRANK + selectLevel) + scrollLevel)];
                    selGilde = (((selRank == 4)) ? "" : Gilde);
                    SendAction(ACT_REQUEST_CHAR, playerName);
                };
                var InvitePlayer:* = function (){
                    var selName:String;
                    selName = guildMembers[((selectLevel + scrollLevel) + 1)];
                    if (selName == ""){
                        return;
                    };
                    SendAction(ACT_GUILD_INVITE, actor[INP_NAME].getChildAt(1).text, Gilde, actor[INP_GILDE_DIALOG_INVITE].getChildAt(1).text, MD5(actor[INP_LOGIN_PASSWORD].getChildAt(1).text), "");
                };
                var MakeMaster:* = function (){
                    var selName:String;
                    selName = guildMembers[((selectLevel + scrollLevel) + 1)];
                    if (selName == ""){
                        return;
                    };
                    SendAction(ACT_GUILD_SET_MASTER, actor[INP_NAME].getChildAt(1).text, Gilde, selName, MD5(actor[INP_LOGIN_PASSWORD].getChildAt(1).text));
                };
                var KickMember:* = function (){
                    var selName:String;
                    selName = guildMembers[((selectLevel + scrollLevel) + 1)];
                    if (selName == ""){
                        return;
                    };
                    SendAction(ACT_GUILD_EXPEL, actor[INP_NAME].getChildAt(1).text, Gilde, selName, MD5(actor[INP_LOGIN_PASSWORD].getChildAt(1).text));
                };
                var ToggleOfficer:* = function (){
                    var selName:String;
                    var selRank:int;
                    selName = guildMembers[((selectLevel + scrollLevel) + 1)];
                    selRank = guildData[((GUILD_MEMBERRANK + selectLevel) + scrollLevel)];
                    if (selName == ""){
                        return;
                    };
                    if (selRank == 2){
                        SendAction(ACT_GUILD_SET_OFFICER, actor[INP_NAME].getChildAt(1).text, Gilde, selName, MD5(actor[INP_LOGIN_PASSWORD].getChildAt(1).text), 0);
                    } else {
                        if (selRank == 3){
                            SendAction(ACT_GUILD_SET_OFFICER, actor[INP_NAME].getChildAt(1).text, Gilde, selName, MD5(actor[INP_LOGIN_PASSWORD].getChildAt(1).text), 1);
                        };
                    };
                };
                var Revolt:* = function (){
                    SendAction(ACT_REVOLT);
                };
                BuildGuildList = function (evt:Event=undefined){
                    var i:* = 0;
                    var j:* = 0;
                    var tmpBalken:* = null;
                    var isOnline:* = false;
                    var attackError:* = false;
                    var lvl:* = 0;
                    var attackStatus:* = 0;
                    var avgCount:* = undefined;
                    var evt:* = evt;
                    var AddGuildImage:* = function (rank:int, line:int){
                        var tmpObj:* = null;
                        var rank:* = rank;
                        var line:* = line;
                        if (rank == 0){
                            rank = 4;
                        };
                        tmpObj = new Bitmap(actor[((IMG_GILDE_RANK + (((rank < 4)) ? rank : 3)) - 1)].content.bitmapData.clone());
                        var _local4 = tmpObj;
                        with (_local4) {
                            allowSmoothing = true;
                            forceSmoothing = true;
                            smoothing = true;
                            mouseEnabled = true;
                            if (textDir == "right"){
                                x = 180;
                            } else {
                                x = 2;
                            };
                            y = ((line * REL_GILDE_LIST_Y) + 4);
                            alpha = (((rank == 4)) ? 0.5 : 1);
                        };
                        actor[CNT_GILDE_LIST].addChild(tmpObj);
                    };
                    var BuildGuildPopup:* = function (evt:MouseEvent){
                        var hoverLevel:int;
                        var lvl:int;
                        var attackStatus:int;
                        var attackError:Boolean;
                        var attackHint:String;
                        hoverLevel = int(((actor[CNT_GILDE_LIST].getChildIndex(evt.target) - 1) / 2));
                        lvl = int(guildData[((GUILD_MEMBERLEVEL + hoverLevel) + scrollLevel)]);
                        attackStatus = 0;
                        attackError = false;
                        attackHint = "";
                        while (lvl > 1000) {
                            lvl = (lvl - 1000);
                            attackStatus++;
                        };
                        if (guildData[0] == Savegame[SG_GUILD_INDEX]){
                            if ((((int(guildData[GUILD_ATTACK_TARGET]) > 0)) && (!((attackStatus & 1))))){
                                attackError = true;
                            };
                            if ((((int(guildData[GUILD_DEFENCE_TARGET]) > 0)) && (!((attackStatus & 2))))){
                                attackError = true;
                            };
                        } else {
                            if ((((int(guildData[GUILD_ATTACK_TARGET]) == int(Savegame[SG_GUILD_INDEX]))) && ((attackStatus & 1)))){
                                attackError = true;
                            };
                            if ((((int(guildData[GUILD_DEFENCE_TARGET]) == int(Savegame[SG_GUILD_INDEX]))) && ((attackStatus & 2)))){
                                attackError = true;
                            };
                        };
                        if (((showActivityTime) && (isMine))){
                            if (Number(guildData[((GUILD_MEMBERONLINE + hoverLevel) + scrollLevel)]) > 0){
                                EnablePopup(CNT_GILDE_LIST, TimeStr(guildData[((GUILD_MEMBERONLINE + hoverLevel) + scrollLevel)]));
                            } else {
                                EnablePopup(CNT_GILDE_LIST, ":-(");
                            };
                            return;
                        };
                        if (attackError){
                            if (guildData[0] != Savegame[SG_GUILD_INDEX]){
                                if ((((int(guildData[GUILD_ATTACK_TARGET]) == int(Savegame[SG_GUILD_INDEX]))) && ((attackStatus & 1)))){
                                    attackHint = (attackHint + (String.fromCharCode(13) + txt[(TXT_ATTACK_STATUS + 3)]));
                                };
                                if ((((int(guildData[GUILD_DEFENCE_TARGET]) == int(Savegame[SG_GUILD_INDEX]))) && ((attackStatus & 2)))){
                                    attackHint = (attackHint + (String.fromCharCode(13) + txt[(TXT_ATTACK_STATUS + 4)]));
                                };
                                if (attackHint.length > 0){
                                    attackHint = attackHint.substr(1);
                                    if (textDir == "right"){
                                        EnablePopup(CNT_GILDE_LIST, POPUP_BEGIN_LINE, ((("(" + txt[((TXT_RANKNAME + int(guildData[((GUILD_MEMBERRANK + hoverLevel) + scrollLevel)])) - 1)]) + ") ") + guildMembers[((hoverLevel + scrollLevel) + 1)]), POPUP_END_LINE, POPUP_BEGIN_LINE, ((String(lvl) + " ") + txt[TXT_HALL_LIST_COLUMN_4]), POPUP_END_LINE, POPUP_BEGIN_LINE, FontFormat_GuildListTextAttackErrorOnlinePopup, attackHint, POPUP_END_LINE);
                                    } else {
                                        EnablePopup(CNT_GILDE_LIST, POPUP_BEGIN_LINE, (((guildMembers[((hoverLevel + scrollLevel) + 1)] + " (") + txt[((TXT_RANKNAME + int(guildData[((GUILD_MEMBERRANK + hoverLevel) + scrollLevel)])) - 1)]) + ")"), POPUP_END_LINE, POPUP_BEGIN_LINE, ((txt[TXT_HALL_LIST_COLUMN_4] + " ") + String(lvl)), POPUP_END_LINE, POPUP_BEGIN_LINE, FontFormat_GuildListTextAttackErrorOnlinePopup, attackHint, POPUP_END_LINE);
                                    };
                                } else {
                                    if (textDir == "right"){
                                        EnablePopup(CNT_GILDE_LIST, POPUP_BEGIN_LINE, ((("(" + txt[((TXT_RANKNAME + int(guildData[((GUILD_MEMBERRANK + hoverLevel) + scrollLevel)])) - 1)]) + ") ") + guildMembers[((hoverLevel + scrollLevel) + 1)]), POPUP_END_LINE, POPUP_BEGIN_LINE, ((String(lvl) + " ") + txt[TXT_HALL_LIST_COLUMN_4]), POPUP_END_LINE);
                                    } else {
                                        EnablePopup(CNT_GILDE_LIST, POPUP_BEGIN_LINE, (((guildMembers[((hoverLevel + scrollLevel) + 1)] + " (") + txt[((TXT_RANKNAME + int(guildData[((GUILD_MEMBERRANK + hoverLevel) + scrollLevel)])) - 1)]) + ")"), POPUP_END_LINE, POPUP_BEGIN_LINE, ((txt[TXT_HALL_LIST_COLUMN_4] + " ") + String(lvl)), POPUP_END_LINE);
                                    };
                                };
                            } else {
                                if (textDir == "right"){
                                    EnablePopup(CNT_GILDE_LIST, POPUP_BEGIN_LINE, ((("(" + txt[((TXT_RANKNAME + int(guildData[((GUILD_MEMBERRANK + hoverLevel) + scrollLevel)])) - 1)]) + ") ") + guildMembers[((hoverLevel + scrollLevel) + 1)]), POPUP_END_LINE, POPUP_BEGIN_LINE, ((String(lvl) + " ") + txt[TXT_HALL_LIST_COLUMN_4]), POPUP_END_LINE, POPUP_BEGIN_LINE, txt[TXT_GOLD_SPENT], 170, String(int((guildData[((GUILD_MEMBERGOLDSPENT + hoverLevel) + scrollLevel)] / 100))), POPUP_END_LINE, POPUP_BEGIN_LINE, txt[TXT_MUSH_SPENT], 170, String(guildData[((GUILD_MEMBERMUSHSPENT + hoverLevel) + scrollLevel)]), POPUP_END_LINE, POPUP_BEGIN_LINE, FontFormat_GuildListTextAttackErrorOnlinePopup, txt[(TXT_ATTACK_STATUS + attackStatus)], POPUP_END_LINE);
                                } else {
                                    EnablePopup(CNT_GILDE_LIST, POPUP_BEGIN_LINE, (((guildMembers[((hoverLevel + scrollLevel) + 1)] + " (") + txt[((TXT_RANKNAME + int(guildData[((GUILD_MEMBERRANK + hoverLevel) + scrollLevel)])) - 1)]) + ")"), POPUP_END_LINE, POPUP_BEGIN_LINE, ((txt[TXT_HALL_LIST_COLUMN_4] + " ") + String(lvl)), POPUP_END_LINE, POPUP_BEGIN_LINE, txt[TXT_GOLD_SPENT], 170, String(int((guildData[((GUILD_MEMBERGOLDSPENT + hoverLevel) + scrollLevel)] / 100))), POPUP_END_LINE, POPUP_BEGIN_LINE, txt[TXT_MUSH_SPENT], 170, String(guildData[((GUILD_MEMBERMUSHSPENT + hoverLevel) + scrollLevel)]), POPUP_END_LINE, POPUP_BEGIN_LINE, FontFormat_GuildListTextAttackErrorOnlinePopup, txt[(TXT_ATTACK_STATUS + attackStatus)], POPUP_END_LINE);
                                };
                            };
                        } else {
                            if (guildData[0] != Savegame[SG_GUILD_INDEX]){
                                if (textDir == "right"){
                                    EnablePopup(CNT_GILDE_LIST, POPUP_BEGIN_LINE, ((("(" + txt[((TXT_RANKNAME + int(guildData[((GUILD_MEMBERRANK + hoverLevel) + scrollLevel)])) - 1)]) + ") ") + guildMembers[((hoverLevel + scrollLevel) + 1)]), POPUP_END_LINE, POPUP_BEGIN_LINE, ((String(lvl) + " ") + txt[TXT_HALL_LIST_COLUMN_4]), POPUP_END_LINE);
                                } else {
                                    EnablePopup(CNT_GILDE_LIST, POPUP_BEGIN_LINE, (((guildMembers[((hoverLevel + scrollLevel) + 1)] + " (") + txt[((TXT_RANKNAME + int(guildData[((GUILD_MEMBERRANK + hoverLevel) + scrollLevel)])) - 1)]) + ")"), POPUP_END_LINE, POPUP_BEGIN_LINE, ((txt[TXT_HALL_LIST_COLUMN_4] + " ") + String(lvl)), POPUP_END_LINE);
                                };
                            } else {
                                if (textDir == "right"){
                                    if (attackStatus == 0){
                                        EnablePopup(CNT_GILDE_LIST, POPUP_BEGIN_LINE, ((("(" + txt[((TXT_RANKNAME + int(guildData[((GUILD_MEMBERRANK + hoverLevel) + scrollLevel)])) - 1)]) + ") ") + guildMembers[((hoverLevel + scrollLevel) + 1)]), POPUP_END_LINE, POPUP_BEGIN_LINE, ((String(lvl) + " ") + txt[TXT_HALL_LIST_COLUMN_4]), POPUP_END_LINE, POPUP_BEGIN_LINE, txt[TXT_GOLD_SPENT], 170, String(int((guildData[((GUILD_MEMBERGOLDSPENT + hoverLevel) + scrollLevel)] / 100))), POPUP_END_LINE, POPUP_BEGIN_LINE, txt[TXT_MUSH_SPENT], 170, String(guildData[((GUILD_MEMBERMUSHSPENT + hoverLevel) + scrollLevel)]), POPUP_END_LINE);
                                    } else {
                                        EnablePopup(CNT_GILDE_LIST, POPUP_BEGIN_LINE, ((("(" + txt[((TXT_RANKNAME + int(guildData[((GUILD_MEMBERRANK + hoverLevel) + scrollLevel)])) - 1)]) + ") ") + guildMembers[((hoverLevel + scrollLevel) + 1)]), POPUP_END_LINE, POPUP_BEGIN_LINE, ((String(lvl) + " ") + txt[TXT_HALL_LIST_COLUMN_4]), POPUP_END_LINE, POPUP_BEGIN_LINE, txt[TXT_GOLD_SPENT], 170, String(int((guildData[((GUILD_MEMBERGOLDSPENT + hoverLevel) + scrollLevel)] / 100))), POPUP_END_LINE, POPUP_BEGIN_LINE, txt[TXT_MUSH_SPENT], 170, String(guildData[((GUILD_MEMBERMUSHSPENT + hoverLevel) + scrollLevel)]), POPUP_END_LINE, POPUP_BEGIN_LINE, FontFormat_GuildListTextAttackOkPopup, txt[(TXT_ATTACK_OK_STATUS + attackStatus)], POPUP_END_LINE);
                                    };
                                } else {
                                    if (attackStatus == 0){
                                        EnablePopup(CNT_GILDE_LIST, POPUP_BEGIN_LINE, (((guildMembers[((hoverLevel + scrollLevel) + 1)] + " (") + txt[((TXT_RANKNAME + int(guildData[((GUILD_MEMBERRANK + hoverLevel) + scrollLevel)])) - 1)]) + ")"), POPUP_END_LINE, POPUP_BEGIN_LINE, ((txt[TXT_HALL_LIST_COLUMN_4] + " ") + String(lvl)), POPUP_END_LINE, POPUP_BEGIN_LINE, txt[TXT_GOLD_SPENT], 170, String(int((guildData[((GUILD_MEMBERGOLDSPENT + hoverLevel) + scrollLevel)] / 100))), POPUP_END_LINE, POPUP_BEGIN_LINE, txt[TXT_MUSH_SPENT], 170, String(guildData[((GUILD_MEMBERMUSHSPENT + hoverLevel) + scrollLevel)]), POPUP_END_LINE);
                                    } else {
                                        EnablePopup(CNT_GILDE_LIST, POPUP_BEGIN_LINE, (((guildMembers[((hoverLevel + scrollLevel) + 1)] + " (") + txt[((TXT_RANKNAME + int(guildData[((GUILD_MEMBERRANK + hoverLevel) + scrollLevel)])) - 1)]) + ")"), POPUP_END_LINE, POPUP_BEGIN_LINE, ((txt[TXT_HALL_LIST_COLUMN_4] + " ") + String(lvl)), POPUP_END_LINE, POPUP_BEGIN_LINE, txt[TXT_GOLD_SPENT], 170, String(int((guildData[((GUILD_MEMBERGOLDSPENT + hoverLevel) + scrollLevel)] / 100))), POPUP_END_LINE, POPUP_BEGIN_LINE, txt[TXT_MUSH_SPENT], 170, String(guildData[((GUILD_MEMBERMUSHSPENT + hoverLevel) + scrollLevel)]), POPUP_END_LINE, POPUP_BEGIN_LINE, FontFormat_GuildListTextAttackOkPopup, txt[(TXT_ATTACK_OK_STATUS + attackStatus)], POPUP_END_LINE);
                                    };
                                };
                            };
                        };
                    };
                    var RemoveGuildPopup:* = function (evt:MouseEvent){
                        EnablePopup(CNT_GILDE_LIST);
                    };
                    var AddGuildPlayer:* = function (memberName:String, rank:int, line:int, onlineStatus:Boolean, thisAttackError:Boolean, thisAttackStatus:int){
                        var tmpObj:* = null;
                        var memberName:* = memberName;
                        var rank:* = rank;
                        var line:* = line;
                        var onlineStatus:* = onlineStatus;
                        var thisAttackError:* = thisAttackError;
                        var thisAttackStatus:* = thisAttackStatus;
                        tmpObj = new TextField();
                        DoubleClickHandler(tmpObj, BuildGuildList, RequestPlayerScreen);
                        var _local8 = tmpObj;
                        with (_local8) {
                            addEventListener(MouseEvent.MOUSE_OVER, BuildGuildPopup);
                            addEventListener(MouseEvent.MOUSE_OUT, RemoveGuildPopup);
                            if (thisAttackError){
                                if (isMine){
                                    if ((((thisAttackStatus & 1)) || ((thisAttackStatus & 2)))){
                                        tmpObj.defaultTextFormat = ((onlineStatus) ? FontFormat_GuildListTextAttackErrorOnlineHalf : FontFormat_GuildListTextAttackErrorHalf);
                                    } else {
                                        tmpObj.defaultTextFormat = ((onlineStatus) ? FontFormat_GuildListTextAttackErrorOnline : FontFormat_GuildListTextAttackError);
                                    };
                                } else {
                                    if (!(((thisAttackStatus & 1)) && ((thisAttackStatus & 2)))){
                                        tmpObj.defaultTextFormat = FontFormat_GuildListTextAttackErrorHalf;
                                    } else {
                                        tmpObj.defaultTextFormat = FontFormat_GuildListTextAttackError;
                                    };
                                };
                            } else {
                                tmpObj.defaultTextFormat = ((((onlineStatus) && (isMine))) ? FontFormat_GuildListTextOnline : FontFormat_GuildListText);
                            };
                            autoSize = TextFieldAutoSize.LEFT;
                            background = false;
                            selectable = false;
                            embedFonts = fontEmbedded;
                            antiAliasType = AntiAliasType.ADVANCED;
                            mouseEnabled = true;
                            filters = Filter_Shadow;
                            text = memberName;
                            if (textDir == "right"){
                                x = (172 - textWidth);
                            } else {
                                x = REL_GILDE_LIST_C1;
                            };
                            y = ((line * REL_GILDE_LIST_Y) + 0);
                            alpha = (((rank == 4)) ? 0.5 : 1);
                        };
                        actor[CNT_GILDE_LIST].addChild(tmpObj);
                    };
                    i = 0;
                    j = 0;
                    isOnline = false;
                    attackError = false;
                    lvl = 0;
                    attackStatus = 0;
                    if (guildData[0] == Savegame[SG_GUILD_INDEX]){
                        offlineGuildMembers = new Array();
                    };
                    if ((evt is MouseEvent)){
                        selectLevel = int(((actor[CNT_GILDE_LIST].getChildIndex(evt.target) - 1) / 2));
                    };
                    var _local3 = actor[CNT_GILDE_LIST];
                    with (_local3) {
                        while (numChildren > 0) {
                            removeChildAt(0);
                        };
                        mouseEnabled = true;
                        doubleClickEnabled = true;
                        mouseChildren = true;
                    };
                    tmpBalken = new MovieClip();
                    _local3 = tmpBalken.graphics;
                    with (_local3) {
                        beginFill(CLR_SFORANGE, 0.5);
                        lineStyle(0, 0, 0);
                        drawRect(0, 0, REL_GILDE_LIST_X, REL_GILDE_LIST_Y);
                    };
                    _local3 = tmpBalken;
                    with (_local3) {
                        x = 0;
                        y = (selectLevel * REL_GILDE_LIST_Y);
                        mouseEnabled = true;
                        doubleClickEnabled = true;
                    };
                    actor[CNT_GILDE_LIST].addChild(tmpBalken);
                    j = 0;
                    avgLevel = 0;
                    avgCount = 0;
                    if (scrollLevel == -1){
                        i = 0;
                        while (i < int(guildData[3])) {
                            if (int(guildData[(GUILD_MEMBERID + i)]) == int(Savegame[SG_PLAYER_ID])){
                                scrollLevel = (i - 7);
                            };
                            i = (i + 1);
                        };
                        if (scrollLevel > (int(guildData[3]) - 15)){
                            scrollLevel = (int(guildData[3]) - 15);
                        };
                        if (scrollLevel < 0){
                            scrollLevel = 0;
                        };
                    };
                    i = 0;
                    while (i < int(guildData[3])) {
                        isOnline = WaitingFor((Number(guildData[(GUILD_MEMBERONLINE + i)]) + (60 * 5)));
                        lvl = int(guildData[(GUILD_MEMBERLEVEL + i)]);
                        attackStatus = 0;
                        attackError = false;
                        while (lvl > 1000) {
                            lvl = (lvl - 1000);
                            attackStatus = (attackStatus + 1);
                        };
                        if (int(guildData[(GUILD_MEMBERID + i)]) == int(Savegame[SG_PLAYER_ID])){
                            myRank = int(guildData[(GUILD_MEMBERRANK + i)]);
                            myAttackStatus = int((Number(guildData[(GUILD_MEMBERLEVEL + i)]) / 1000));
                        };
                        if ((((int(guildData[(GUILD_MEMBERRANK + i)]) > 0)) && ((int(guildData[(GUILD_MEMBERRANK + i)]) < 4)))){
                            avgLevel = (avgLevel + lvl);
                            avgCount = (avgCount + 1);
                        };
                        if (guildData[0] == Savegame[SG_GUILD_INDEX]){
                            if (!isOnline){
                                offlineGuildMembers.push(guildMembers[(i + 1)]);
                            };
                            if ((((int(guildData[GUILD_ATTACK_TARGET]) > 0)) && (!((attackStatus & 1))))){
                                attackError = true;
                            };
                            if ((((int(guildData[GUILD_DEFENCE_TARGET]) > 0)) && (!((attackStatus & 2))))){
                                attackError = true;
                            };
                        } else {
                            if ((((int(guildData[GUILD_ATTACK_TARGET]) == int(Savegame[SG_GUILD_INDEX]))) && ((attackStatus & 1)))){
                                attackError = true;
                            };
                            if ((((int(guildData[GUILD_DEFENCE_TARGET]) == int(Savegame[SG_GUILD_INDEX]))) && ((attackStatus & 2)))){
                                attackError = true;
                            };
                        };
                        if ((((i >= scrollLevel)) && ((i < (scrollLevel + 15))))){
                            AddGuildImage(int(guildData[(GUILD_MEMBERRANK + i)]), j);
                            j = (j + 1);
                            AddGuildPlayer(guildMembers[(i + 1)], int(guildData[(GUILD_MEMBERRANK + i)]), j, isOnline, attackError, attackStatus);
                        };
                        i = (i + 1);
                    };
                    avgLevel = (avgLevel / avgCount);
                    PlaceButtonSet();
                    if (textDir == "right"){
                        actor[BTN_GILDE_SCROLL_UP].x = POS_GILDE_LIST_X;
                        actor[BTN_GILDE_SCROLL_DOWN].x = POS_GILDE_LIST_X;
                        actor[BTN_GILDE_CHAT_UP].x = (POS_GILDE_GEBAEUDE_X - 2);
                        actor[BTN_GILDE_CHAT_DOWN].x = (POS_GILDE_GEBAEUDE_X - 2);
                        actor[CNT_GILDE_LIST].x = ((actor[BTN_GILDE_SCROLL_UP].x + actor[BTN_GILDE_SCROLL_UP].width) + 5);
                        actor[INP_GILDE_CHAT].x = ((actor[BTN_GILDE_CHAT_UP].x + actor[BTN_GILDE_CHAT_UP].width) + 5);
                        i = 0;
                        while (i < 40) {
                            actor[(LBL_GILDE_CHAT + i)].x = ((actor[INP_GILDE_CHAT].x + actor[INP_GILDE_CHAT].width) - actor[(LBL_GILDE_CHAT + i)].textWidth);
                            actor[(LBL_GILDE_CHAT + i)].autoSize = "right";
                            i = (i + 1);
                        };
                    };
                };
                i = 0;
                myRank = 0;
                myAttackStatus = 0;
                scrollLevel = -1;
                selectLevel = 0;
                GoldToDonate = 0;
                MushToDonate = 0;
                DonateTimeout = new Timer(2000, 1);
                DonateTimeout.addEventListener(TimerEvent.TIMER, DoDonate);
                guildInstanceID++;
                if (guildInstanceID > 10000){
                    guildInstanceID = 0;
                };
                thisInstanceID = guildInstanceID;
                removeListenersTimer = new Timer(20);
                var _local3 = removeListenersTimer;
                with (_local3) {
                    addEventListener(TimerEvent.TIMER, removeListeners);
                    start();
                };
                GoldKosten = 10;
                PilzKosten = 10;
                Nutzen = "";
                Ausbaustufe = 1;
                AusbaustufeEx = 1;
                GoldKostenAvg = 0;
                PilzKostenAvg = 0;
                cheapest = -1;
                countCompleted = 0;
                i = 0;
                while (i < 3) {
                    Ausbaustufe = guildData[(i + 5)];
                    AusbaustufeEx = (Ausbaustufe + ((i)==0) ? 0 : int(guildData[GUILD_RAID_LEVEL]));
                    GoldKosten = int((GildeBuildingGold[(Ausbaustufe + 1)] / 100));
                    PilzKosten = GildeBuildingPilz[(Ausbaustufe + 1)];
                    switch (i){
                        case 0:
                            if (AusbaustufeEx > 50){
                                Nutzen = "50";
                            } else {
                                Nutzen = String(AusbaustufeEx);
                            };
                            break;
                        case 1:
                            Nutzen = (String((AusbaustufeEx * 2)) + "%");
                            break;
                        case 2:
                            Nutzen = (String((AusbaustufeEx * 2)) + "%");
                            break;
                    };
                    actor[(LBL_GILDE_GEBAEUDE_WERT + i)].text = Nutzen;
                    actor[(LBL_GILDE_GEBAEUDE_STUFE + i)].text = String(AusbaustufeEx);
                    if (textDir == "right"){
                        actor[(LBL_GILDE_GEBAEUDE_NAME + i)].x = (((POS_GILDE_GEBAEUDE_X + REL_GILDE_TEXT_X) + 130) - actor[(LBL_GILDE_GEBAEUDE_NAME + i)].textWidth);
                        actor[(LBL_GILDE_GEBAEUDE_WERT_CAPTION + i)].x = (((POS_GILDE_GEBAEUDE_X + REL_GILDE_TEXT_X) + 130) - actor[(LBL_GILDE_GEBAEUDE_WERT_CAPTION + i)].textWidth);
                        actor[(LBL_GILDE_GEBAEUDE_WERT + i)].x = (((POS_GILDE_GEBAEUDE_X + REL_GILDE_TEXT_X) + 130) - actor[(LBL_GILDE_GEBAEUDE_WERT + i)].textWidth);
                        actor[(LBL_GILDE_GEBAEUDE_STUFE_CAPTION + i)].x = (((POS_GILDE_GEBAEUDE_X + REL_GILDE_TEXT_X) + 130) - actor[(LBL_GILDE_GEBAEUDE_STUFE_CAPTION + i)].textWidth);
                        actor[(LBL_GILDE_GEBAEUDE_STUFE + i)].x = ((actor[(LBL_GILDE_GEBAEUDE_STUFE_CAPTION + i)].x - actor[(LBL_GILDE_GEBAEUDE_STUFE + i)].textWidth) - 5);
                        actor[(BTN_GILDE_GEBAEUDE_IMPROVE + i)].y = actor[(LBL_GILDE_GEBAEUDE_NAME + i)].y;
                        actor[(IMG_GILDE_GEBAEUDE_IMPROVE_GRAY + i)].y = actor[(LBL_GILDE_GEBAEUDE_NAME + i)].y;
                    };
                    SetCnt((CNT_GILDE_GEBAEUDE_GOLD + i), IMG_IF_GOLD);
                    SetCnt((CNT_GILDE_GEBAEUDE_MUSH + i), IMG_IF_PILZE);
                    Hide((LBL_GILDE_GEBAEUDE_KOSTEN_GOLD + i), (CNT_GILDE_GEBAEUDE_GOLD + i));
                    Hide((LBL_GILDE_GEBAEUDE_KOSTEN_MUSH + i), (CNT_GILDE_GEBAEUDE_MUSH + i));
                    if (Ausbaustufe >= 50){
                        countCompleted = (countCompleted + 1);
                        Show((LBL_GILDE_GEBAEUDE_KOSTEN_GOLD + i));
                        actor[(LBL_GILDE_GEBAEUDE_KOSTEN_GOLD + i)].text = txt[TXT_BUILDING_COMPLETE];
                        if (textDir == "right"){
                            actor[(LBL_GILDE_GEBAEUDE_KOSTEN_GOLD + i)].x = (((POS_GILDE_GEBAEUDE_X + REL_GILDE_TEXT_X) + 130) - actor[(LBL_GILDE_GEBAEUDE_KOSTEN_GOLD + i)].textWidth);
                        } else {
                            actor[(LBL_GILDE_GEBAEUDE_KOSTEN_GOLD + i)].x = (POS_GILDE_GEBAEUDE_X + REL_GILDE_TEXT_X);
                        };
                    } else {
                        if (GoldKosten > 0){
                            Show((LBL_GILDE_GEBAEUDE_KOSTEN_GOLD + i), (CNT_GILDE_GEBAEUDE_GOLD + i));
                            actor[(LBL_GILDE_GEBAEUDE_KOSTEN_GOLD + i)].text = String(GoldKosten);
                            if (textDir == "right"){
                                actor[(LBL_GILDE_GEBAEUDE_KOSTEN_GOLD + i)].x = (((POS_GILDE_GEBAEUDE_X + REL_GILDE_TEXT_X) + 130) - actor[(LBL_GILDE_GEBAEUDE_KOSTEN_GOLD + i)].textWidth);
                                actor[(CNT_GILDE_GEBAEUDE_GOLD + i)].x = ((actor[(LBL_GILDE_GEBAEUDE_KOSTEN_GOLD + i)].x - actor[(LBL_GILDE_GEBAEUDE_KOSTEN_GOLD + i)].textWidth) - 7);
                            } else {
                                actor[(LBL_GILDE_GEBAEUDE_KOSTEN_GOLD + i)].x = (POS_GILDE_GEBAEUDE_X + REL_GILDE_TEXT_X);
                                actor[(CNT_GILDE_GEBAEUDE_GOLD + i)].x = ((actor[(LBL_GILDE_GEBAEUDE_KOSTEN_GOLD + i)].x + actor[(LBL_GILDE_GEBAEUDE_KOSTEN_GOLD + i)].textWidth) + 7);
                            };
                            if ((((cheapest == -1)) || ((GoldKosten < cheapest)))){
                                cheapest = GoldKosten;
                            };
                        };
                        if (PilzKosten > 0){
                            Show((LBL_GILDE_GEBAEUDE_KOSTEN_MUSH + i), (CNT_GILDE_GEBAEUDE_MUSH + i));
                            actor[(LBL_GILDE_GEBAEUDE_KOSTEN_MUSH + i)].text = String(PilzKosten);
                            if (textDir == "right"){
                                if (GoldKosten > 0){
                                    actor[(LBL_GILDE_GEBAEUDE_KOSTEN_MUSH + i)].x = ((actor[(CNT_GILDE_GEBAEUDE_GOLD + i)].x - actor[(LBL_GILDE_GEBAEUDE_KOSTEN_MUSH + i)].textWidth) - 10);
                                } else {
                                    actor[(LBL_GILDE_GEBAEUDE_KOSTEN_MUSH + i)].x = (((POS_GILDE_GEBAEUDE_X + REL_GILDE_TEXT_X) + 130) - actor[(LBL_GILDE_GEBAEUDE_KOSTEN_MUSH + i)].textWidth);
                                };
                                actor[(CNT_GILDE_GEBAEUDE_MUSH + i)].x = ((actor[(LBL_GILDE_GEBAEUDE_KOSTEN_MUSH + i)].x - actor[(CNT_GILDE_GEBAEUDE_MUSH + i)].width) - 7);
                            } else {
                                if (GoldKosten > 0){
                                    actor[(LBL_GILDE_GEBAEUDE_KOSTEN_MUSH + i)].x = ((actor[(CNT_GILDE_GEBAEUDE_GOLD + i)].x + actor[(CNT_GILDE_GEBAEUDE_GOLD + i)].width) + 10);
                                } else {
                                    actor[(LBL_GILDE_GEBAEUDE_KOSTEN_MUSH + i)].x = (POS_GILDE_GEBAEUDE_X + REL_GILDE_TEXT_X);
                                };
                                actor[(CNT_GILDE_GEBAEUDE_MUSH + i)].x = ((actor[(LBL_GILDE_GEBAEUDE_KOSTEN_MUSH + i)].x + actor[(LBL_GILDE_GEBAEUDE_KOSTEN_MUSH + i)].textWidth) + 7);
                            };
                        };
                    };
                    GoldKostenAvg = (GoldKostenAvg + GoldKosten);
                    PilzKostenAvg = (PilzKostenAvg + PilzKosten);
                    i = (i + 1);
                };
                GoldKostenAvg = (GoldKostenAvg / 3);
                PilzKostenAvg = (PilzKostenAvg / 3);
                actor[LBL_GILDE_GOLD2].text = GetSpendAmount();
                actor[LBL_GILDE_MUSH2].text = "1";
                actor[CNT_GILDE_GOLD2].x = ((actor[LBL_GILDE_GOLD2].x + actor[LBL_GILDE_GOLD2].textWidth) + 15);
                actor[CNT_GILDE_MUSH2].x = ((actor[LBL_GILDE_GOLD2].x + actor[LBL_GILDE_GOLD2].textWidth) + 15);
                SetCnt(CNT_GILDE_GOLD, IMG_IF_GOLD);
                SetCnt(CNT_GILDE_GOLD2, IMG_IF_GOLD);
                SetCnt(CNT_GILDE_MUSH, IMG_IF_PILZE);
                SetCnt(CNT_GILDE_MUSH2, IMG_IF_PILZE);
                RightBoxWidth = ((((actor[BTN_GILDE_GOLD].width + REL_GILDE_GOLDMUSH_C1) + actor[LBL_GILDE_GOLD2].textWidth) + REL_GILDE_GOLDMUSH_C1) + actor[CNT_GILDE_GOLD2].width);
                if (((((actor[BTN_GILDE_MUSH].width + REL_GILDE_GOLDMUSH_C1) + actor[LBL_GILDE_MUSH2].textWidth) + REL_GILDE_GOLDMUSH_C1) + actor[CNT_GILDE_MUSH2].width) > RightBoxWidth){
                    RightBoxWidth = ((((actor[BTN_GILDE_MUSH].width + REL_GILDE_GOLDMUSH_C1) + actor[LBL_GILDE_MUSH2].textWidth) + REL_GILDE_GOLDMUSH_C1) + actor[CNT_GILDE_MUSH2].width);
                };
                if (textDir == "right"){
                    actor[BTN_GILDE_GOLD].x = (((POS_GILDE_GOLDMUSH_X + REL_GILDE_GOLDMUSH_C2) + int((RightBoxWidth / 2))) - actor[BTN_GILDE_GOLD].width);
                    actor[BTN_GILDE_MUSH].x = actor[BTN_GILDE_GOLD].x;
                    actor[LBL_GILDE_GOLD2].x = ((actor[BTN_GILDE_GOLD].x - actor[LBL_GILDE_GOLD2].textWidth) - REL_GILDE_GOLDMUSH_C1);
                    actor[LBL_GILDE_MUSH2].x = ((actor[BTN_GILDE_MUSH].x - actor[LBL_GILDE_MUSH2].textWidth) - REL_GILDE_GOLDMUSH_C1);
                    actor[CNT_GILDE_GOLD2].x = ((actor[LBL_GILDE_GOLD2].x - actor[CNT_GILDE_GOLD2].width) - REL_GILDE_GOLDMUSH_C1);
                    actor[CNT_GILDE_MUSH2].x = ((actor[LBL_GILDE_MUSH2].x - actor[CNT_GILDE_MUSH2].width) - REL_GILDE_GOLDMUSH_C1);
                } else {
                    actor[BTN_GILDE_GOLD].x = ((POS_GILDE_GOLDMUSH_X + REL_GILDE_GOLDMUSH_C2) - int((RightBoxWidth / 2)));
                    actor[BTN_GILDE_MUSH].x = actor[BTN_GILDE_GOLD].x;
                    actor[LBL_GILDE_GOLD2].x = ((actor[BTN_GILDE_GOLD].x + actor[BTN_GILDE_GOLD].width) + REL_GILDE_GOLDMUSH_C1);
                    actor[LBL_GILDE_MUSH2].x = ((actor[BTN_GILDE_MUSH].x + actor[BTN_GILDE_MUSH].width) + REL_GILDE_GOLDMUSH_C1);
                    actor[CNT_GILDE_GOLD2].x = ((actor[LBL_GILDE_GOLD2].x + actor[LBL_GILDE_GOLD2].textWidth) + REL_GILDE_GOLDMUSH_C1);
                    actor[CNT_GILDE_MUSH2].x = ((actor[LBL_GILDE_MUSH2].x + actor[LBL_GILDE_MUSH2].textWidth) + REL_GILDE_GOLDMUSH_C1);
                };
                _local3 = actor[LBL_GILDE_GOLD];
                with (_local3) {
                    text = String(int((guildData[1] / 100)));
                    LeftBoxWidth = ((textWidth + REL_GILDE_GOLDMUSH_C1) + actor[CNT_GILDE_GOLD].width);
                };
                _local3 = actor[LBL_GILDE_MUSH];
                with (_local3) {
                    text = guildData[2];
                    if (((textWidth + REL_GILDE_GOLDMUSH_C1) + actor[CNT_GILDE_MUSH].width) > LeftBoxWidth){
                        LeftBoxWidth = ((textWidth + REL_GILDE_GOLDMUSH_C1) + actor[CNT_GILDE_MUSH].width);
                    };
                    if (textDir == "right"){
                        actor[CNT_GILDE_MUSH].x = ((POS_GILDE_GOLDMUSH_X + int((LeftBoxWidth / 2))) - actor[CNT_GILDE_MUSH].width);
                        actor[CNT_GILDE_GOLD].x = actor[CNT_GILDE_MUSH].x;
                        actor[LBL_GILDE_GOLD].x = ((actor[CNT_GILDE_GOLD].x - actor[LBL_GILDE_GOLD].textWidth) - REL_GILDE_GOLDMUSH_C1);
                        x = ((actor[CNT_GILDE_MUSH].x - actor[LBL_GILDE_MUSH].textWidth) - REL_GILDE_GOLDMUSH_C1);
                    } else {
                        actor[CNT_GILDE_MUSH].x = (POS_GILDE_GOLDMUSH_X - int((LeftBoxWidth / 2)));
                        actor[CNT_GILDE_GOLD].x = actor[CNT_GILDE_MUSH].x;
                        actor[LBL_GILDE_GOLD].x = ((actor[CNT_GILDE_GOLD].x + actor[CNT_GILDE_GOLD].width) + REL_GILDE_GOLDMUSH_C1);
                        x = ((actor[CNT_GILDE_MUSH].x + actor[CNT_GILDE_MUSH].width) + REL_GILDE_GOLDMUSH_C1);
                    };
                };
                crestView = OnStage(CNT_GILDE_CREST);
                startWithCrest = ((((((((((isMine) || ((guildData[0] == Savegame[SG_GUILD_INDEX])))) && ((guildData[5] >= 50)))) && ((guildData[6] >= 50)))) && ((guildData[7] >= 50)))) && (!(OnStage(BTN_GILDE_SCROLL_UP))));
                if (guildData[0] != lastGuildCrestId){
                    crestView = false;
                };
                lastGuildCrestId = guildData[0];
                RemoveAll();
                Add(BNC_SCREEN_GILDEN);
                if (crestView){
                    if (actor[CNT_GILDE_CREST].y == POS_GILDE_GEBAEUDE_Y){
                        SetAlpha(BNC_GILDE_CREST_CONTROLS, 1);
                        Add(BNC_GILDE_CREST_CONTROLS);
                    };
                    Remove(BNC_GILDE_GEBAEUDE);
                } else {
                    actor[CNT_GILDE_CREST].y = (POS_GILDE_GEBAEUDE_Y + 60);
                    selecterCrestElement = -1;
                    if (((isMine) || ((guildData[0] == Savegame[SG_GUILD_INDEX])))){
                        if (startWithCrest){
                            Remove(BNC_GILDE_GEBAEUDE);
                        } else {
                            Remove(BNC_GILDE_CREST);
                        };
                        actor[CNT_GILDE_CREST].mouseChildren = true;
                    } else {
                        Remove(BTN_GILDE_CREST_GOTO_GEBAEUDE);
                        actor[CNT_GILDE_CREST].mouseChildren = false;
                    };
                    loadCrest();
                };
                if (!((isMine) || ((guildData[0] == Savegame[SG_GUILD_INDEX])))){
                    Remove(BTN_GILDE_CREST_GOTO_GEBAEUDE);
                    actor[CNT_GILDE_CREST].mouseChildren = false;
                };
                if (textDir == "right"){
                    actor[LBL_GILDE_CHAT_CAPTION].x = ((actor[BTN_GILDE_RAID].x - actor[LBL_GILDE_CHAT_CAPTION].textWidth) - 5);
                    actor[CNT_GILDE_LINK].x = ((actor[BTN_GILDE_RAID].x - actor[LBL_GILDE_LINK].textWidth) - 5);
                    actor[INP_GILDE_TEXT].x = (POS_GILDE_TEXT_X - 5);
                    MakeRightTextArea(INP_GILDE_TEXT, 0);
                    MakeRightTextArea(INP_GILDE_CHAT, 0);
                };
                i = 0;
                while (i < 3) {
                    Ausbaustufe = guildData[(i + 5)];
                    if (Ausbaustufe >= 50){
                        Hide((BTN_GILDE_GEBAEUDE_IMPROVE + i));
                        Show((IMG_GILDE_GEBAEUDE_IMPROVE_GRAY + i));
                    };
                    i = (i + 1);
                };
                GuildBtnRepeatTimer = new Timer(1000);
                actor[BTN_GILDE_SCROLL_UP].addEventListener(MouseEvent.CLICK, GuildBtnHandler);
                actor[BTN_GILDE_SCROLL_DOWN].addEventListener(MouseEvent.CLICK, GuildBtnHandler);
                actor[BTN_GILDE_DIALOG_CANCEL].addEventListener(MouseEvent.CLICK, GuildBtnHandler);
                actor[BTN_GILDE_DIALOG_OK_KICK].addEventListener(MouseEvent.CLICK, GuildBtnHandler);
                actor[BTN_GILDE_DIALOG_OK_MASTER].addEventListener(MouseEvent.CLICK, GuildBtnHandler);
                actor[BTN_GILDE_DIALOG_OK_INVITE].addEventListener(MouseEvent.CLICK, GuildBtnHandler);
                actor[BTN_GILDE_DIALOG_OK_REVOLT].addEventListener(MouseEvent.CLICK, GuildBtnHandler);
                actor[BTN_GILDE_DIALOG_OK_RAID].addEventListener(MouseEvent.CLICK, GuildBtnHandler);
                actor[BTN_GILDE_INVITE].addEventListener(MouseEvent.CLICK, GuildBtnHandler);
                actor[BTN_GILDE_PROFILE].addEventListener(MouseEvent.CLICK, GuildBtnHandler);
                actor[BTN_GILDE_KICK].addEventListener(MouseEvent.CLICK, GuildBtnHandler);
                actor[BTN_GILDE_PROMOTE].addEventListener(MouseEvent.CLICK, GuildBtnHandler);
                actor[BTN_GILDE_DEMOTE].addEventListener(MouseEvent.CLICK, GuildBtnHandler);
                actor[BTN_GILDE_MASTER].addEventListener(MouseEvent.CLICK, GuildBtnHandler);
                actor[BTN_GILDE_REVOLT].addEventListener(MouseEvent.CLICK, GuildBtnHandler);
                actor[BTN_GILDE_GEBAEUDE_IMPROVE].addEventListener(MouseEvent.CLICK, GuildBtnHandler);
                actor[(BTN_GILDE_GEBAEUDE_IMPROVE + 1)].addEventListener(MouseEvent.CLICK, GuildBtnHandler);
                actor[(BTN_GILDE_GEBAEUDE_IMPROVE + 2)].addEventListener(MouseEvent.CLICK, GuildBtnHandler);
                actor[BTN_GILDE_KATAPULT].addEventListener(MouseEvent.CLICK, GuildBtnHandler);
                actor[(BTN_GILDE_KATAPULT + 1)].addEventListener(MouseEvent.CLICK, GuildBtnHandler);
                actor[(BTN_GILDE_KATAPULT + 2)].addEventListener(MouseEvent.CLICK, GuildBtnHandler);
                actor[BTN_GILDE_GOLD].addEventListener(MouseEvent.MOUSE_DOWN, GuildBtnHandler);
                actor[BTN_GILDE_MUSH].addEventListener(MouseEvent.MOUSE_DOWN, GuildBtnHandler);
                actor[BTN_GILDE_GOLD].addEventListener(MouseEvent.MOUSE_OUT, DoDonate);
                actor[BTN_GILDE_MUSH].addEventListener(MouseEvent.MOUSE_OUT, DoDonate);
                _local3 = actor[BTN_GILDE_GOLD];
                with (_local3) {
                    addEventListener(MouseEvent.MOUSE_DOWN, GuildBtnDownHandler);
                    addEventListener(MouseEvent.MOUSE_UP, GuildBtnUpHandler);
                    addEventListener(MouseEvent.MOUSE_OUT, GuildBtnUpHandler);
                };
                _local3 = actor[BTN_GILDE_MUSH];
                with (_local3) {
                    addEventListener(MouseEvent.MOUSE_DOWN, GuildBtnDownHandler);
                    addEventListener(MouseEvent.MOUSE_UP, GuildBtnUpHandler);
                    addEventListener(MouseEvent.MOUSE_OUT, GuildBtnUpHandler);
                };
                BuildGuildList();
                if (myRank > 2){
                    Hide(BTN_GILDE_GEBAEUDE_IMPROVE, (BTN_GILDE_GEBAEUDE_IMPROVE + 1), (BTN_GILDE_GEBAEUDE_IMPROVE + 2));
                    Show(IMG_GILDE_GEBAEUDE_IMPROVE_GRAY, (IMG_GILDE_GEBAEUDE_IMPROVE_GRAY + 1), (IMG_GILDE_GEBAEUDE_IMPROVE_GRAY + 2));
                };
                _local3 = actor[LBL_SCREEN_TITLE];
                with (_local3) {
                    text = ThisGilde;
                    x = (POS_SCREEN_TITLE_X - int((textWidth / 2)));
                    y = POS_SCREEN_TITLE_Y_GUILD;
                };
                _local3 = actor[LBL_GILDE_CREST_INSCRIPTION];
                with (_local3) {
                    text = ThisGilde;
                    x = (120 - int((textWidth / 2)));
                };
                _local3 = actor[LBL_GILDE_RANG];
                with (_local3) {
                    if ((((int(guildData[GUILD_RAID_LEVEL]) > 0)) && (txt[(TXT_RAID_TEXT + 18)]))){
                        if (textDir == "right"){
                            text = ((((((((((("50/" + guildData[GUILD_RAID_LEVEL]) + " :") + txt[(TXT_RAID_TEXT + 18)]) + "  ") + String(((GildenEhre)==1) ? 0 : GildenEhre)) + " :") + txt[TXT_HALL_LIST_COLUMN_5]) + "  ") + String(GildenRang)) + " :") + txt[TXT_HALL_LIST_COLUMN_1]);
                        } else {
                            text = (((((((((((txt[TXT_HALL_LIST_COLUMN_1] + ": ") + String(GildenRang)) + "  ") + txt[TXT_HALL_LIST_COLUMN_5]) + ": ") + String(((GildenEhre)==1) ? 0 : GildenEhre)) + "  ") + txt[(TXT_RAID_TEXT + 18)]) + ": ") + guildData[GUILD_RAID_LEVEL]) + "/50");
                        };
                    } else {
                        if (textDir == "right"){
                            text = ((((((String(((GildenEhre)==1) ? 0 : GildenEhre) + " :") + txt[TXT_HALL_LIST_COLUMN_5]) + "     ") + String(GildenRang)) + " :") + txt[TXT_HALL_LIST_COLUMN_1]);
                        } else {
                            text = ((((((txt[TXT_HALL_LIST_COLUMN_1] + ": ") + String(GildenRang)) + "     ") + txt[TXT_HALL_LIST_COLUMN_5]) + ": ") + String(((GildenEhre)==1) ? 0 : GildenEhre));
                        };
                    };
                };
                if (textDir == "right"){
                    actor[CNT_GILDE_RANG].x = (1175 - actor[LBL_GILDE_RANG].textWidth);
                };
                if (guildDescr.indexOf("http://") != -1){
                    guildForumLink = guildDescr.substr(guildDescr.indexOf("http://"));
                    guildForumLink = guildForumLink.split(")").join(" ").split("#").join(" ").split(String.fromCharCode(13)).join(" ").split(String.fromCharCode(10)).join(" ").split(" ")[0];
                    Add(CNT_GILDE_LINK);
                    if (guildForumLink.substr(guildForumLink.length, 1) == "."){
                        guildForumLink = guildForumLink.substr(0, (guildForumLink.length - 1));
                    };
                    EnablePopup(CNT_GILDE_LINK, guildForumLink);
                } else {
                    if (guildDescr.indexOf("www.") != -1){
                        guildForumLink = ("http://" + guildDescr.substr(guildDescr.indexOf("www.")));
                        guildForumLink = guildForumLink.split(")").join(" ").split("#").join(" ").split(String.fromCharCode(13)).join(" ").split(String.fromCharCode(10)).join(" ").split(" ")[0];
                        Add(CNT_GILDE_LINK);
                        if (guildForumLink.substr(guildForumLink.length, 1) == "."){
                            guildForumLink = guildForumLink.substr(0, (guildForumLink.length - 1));
                        };
                        EnablePopup(CNT_GILDE_LINK, guildForumLink);
                    };
                };
                _local3 = actor[INP_GILDE_TEXT];
                with (_local3) {
                    getChildAt(0).text = ((guildDescr)=="") ? (((myRank == 1)) ? txt[TXT_ENTERGUILDDESC] : txt[TXT_GUILDNOTEXT]) : resolveBreaks(guildDescr);
                    getChildAt(0).type = (((((myRank == 1)) && (isMine))) ? TextFieldType.INPUT : TextFieldType.DYNAMIC);
                    mouseEnabled = true;
                    addEventListener(FocusEvent.FOCUS_IN, EnterGuildDesc);
                    addEventListener(FocusEvent.FOCUS_OUT, LeaveGuildDesc);
                    if (textDir == "right"){
                        getChildAt(0).wordWrap = false;
                    };
                };
                Add(IMG_GILDE_RAID_GRAY);
                Add(IMG_GILDE_ATTACK_GRAY);
                Add(IMG_GILDE_DEFEND_GRAY);
                if ((((guildData[5] >= 20)) && ((guildData[0] == Savegame[SG_GUILD_INDEX])))){
                    if (myRank <= 2){
                        if (guildData[4] == 0){
                            Add(BTN_GILDE_KATAPULT);
                        } else {
                            if (guildData[4] == 1){
                                Add((BTN_GILDE_KATAPULT + 1));
                            } else {
                                if (guildData[4] == 2){
                                    Add((BTN_GILDE_KATAPULT + 2));
                                } else {
                                    if (guildData[4] == 3){
                                        Add((IMG_GILDE_KATAPULT_OK + 2));
                                    };
                                };
                            };
                        };
                    } else {
                        if (guildData[4] == 0){
                            Add(IMG_GILDE_KATAPULT_GRAY);
                        } else {
                            if (guildData[4] == 1){
                                Add(IMG_GILDE_KATAPULT_OK);
                            } else {
                                if (guildData[4] == 2){
                                    Add((IMG_GILDE_KATAPULT_OK + 1));
                                } else {
                                    if (guildData[4] == 3){
                                        Add((IMG_GILDE_KATAPULT_OK + 2));
                                    };
                                };
                            };
                        };
                    };
                    i = 0;
                    while (i < 3) {
                        EnablePopup((BTN_GILDE_KATAPULT + i), POPUP_BEGIN_LINE, txt[TXT_CATAPULT], POPUP_END_LINE, POPUP_BEGIN_LINE, txt[(TXT_CATAPULT + 1)].split("%1").join("3").split("#").join(String.fromCharCode(13)), POPUP_END_LINE, POPUP_BEGIN_LINE, txt[(TXT_CATAPULT + 2)], 200, txt[(TXT_CATAPULT + 3)].split("%1").join(String(guildData[4])).split("%2").join("3"), POPUP_END_LINE, POPUP_BEGIN_LINE, txt[(TXT_CATAPULT + 4)], 200, txt[(TXT_CATAPULT + 5)].split("%1").join("5"), actor[IMG_IF_PILZE], POPUP_END_LINE);
                        i = (i + 1);
                    };
                    EnablePopup(IMG_GILDE_KATAPULT_GRAY, POPUP_BEGIN_LINE, txt[TXT_CATAPULT], POPUP_END_LINE, POPUP_BEGIN_LINE, txt[(TXT_CATAPULT + 1)].split("%1").join("3").split("#").join(String.fromCharCode(13)), POPUP_END_LINE, POPUP_BEGIN_LINE, txt[(TXT_CATAPULT + 2)], 200, txt[(TXT_CATAPULT + 3)].split("%1").join(String(guildData[4])).split("%2").join("3"), POPUP_END_LINE, POPUP_BEGIN_LINE, txt[(TXT_CATAPULT + 6)], POPUP_END_LINE);
                    i = 0;
                    while (i < 2) {
                        EnablePopup((IMG_GILDE_KATAPULT_OK + i), POPUP_BEGIN_LINE, txt[TXT_CATAPULT], POPUP_END_LINE, POPUP_BEGIN_LINE, txt[(TXT_CATAPULT + 1)].split("%1").join("3").split("#").join(String.fromCharCode(13)), POPUP_END_LINE, POPUP_BEGIN_LINE, txt[(TXT_CATAPULT + 2)], 200, txt[(TXT_CATAPULT + 3)].split("%1").join(String(guildData[4])).split("%2").join("3"), POPUP_END_LINE, POPUP_BEGIN_LINE, txt[(TXT_CATAPULT + 6)], POPUP_END_LINE);
                        i = (i + 1);
                    };
                    EnablePopup((IMG_GILDE_KATAPULT_OK + 2), POPUP_BEGIN_LINE, txt[TXT_CATAPULT], POPUP_END_LINE, POPUP_BEGIN_LINE, txt[(TXT_CATAPULT + 1)].split("%1").join("3").split("#").join(String.fromCharCode(13)), POPUP_END_LINE, POPUP_BEGIN_LINE, txt[(TXT_CATAPULT + 2)], 200, txt[(TXT_CATAPULT + 3)].split("%1").join(String(guildData[4])).split("%2").join("3"), POPUP_END_LINE);
                };
                raidCost = GildeBuildingGold[(int(guildData[GUILD_RAID_LEVEL]) + 51)];
                if (int(guildData[GUILD_RAID_LEVEL]) == 0){
                    raidCost = (raidCost * 0.2);
                };
                if (int(guildData[GUILD_RAID_LEVEL]) == 1){
                    raidCost = (raidCost * 0.4);
                };
                if (int(guildData[GUILD_RAID_LEVEL]) == 2){
                    raidCost = (raidCost * 0.6);
                };
                if (int(guildData[GUILD_RAID_LEVEL]) == 3){
                    raidCost = (raidCost * 0.8);
                };
                raidCost = Number(int((raidCost / 100)));
                lastRaidCost = raidCost;
                if (txt[TXT_RAID_TEXT]){
                    if (guildData[GUILD_RAID_LEVEL] >= 50){
                        EnablePopup(IMG_GILDE_RAID_GRAY, txt[(TXT_RAID_TEXT + 17)]);
                    } else {
                        EnablePopup(IMG_GILDE_RAID_GRAY, POPUP_BEGIN_LINE, txt[(TXT_RAID_TEXT + 4)], POPUP_END_LINE, POPUP_BEGIN_LINE, txt[(TXT_RAID_TEXT + 15)], (REL_POPUP_TAB + REL_POPUP_TAB_ADD), txt[(TXT_DUNGEON_NAMES + int(guildData[GUILD_RAID_LEVEL]))], (("(" + String((int(guildData[GUILD_RAID_LEVEL]) + 1))) + "/50)"), POPUP_END_LINE, POPUP_BEGIN_LINE, txt[(TXT_RAID_TEXT + 16)], (REL_POPUP_TAB + REL_POPUP_TAB_ADD), String(raidCost), actor[IMG_IF_GOLD], POPUP_END_LINE);
                    };
                };
                EnablePopup(IMG_GILDE_ATTACK_GRAY, txt[(TXT_GUILD_BATTLE_POPUP + 7)]);
                EnablePopup(IMG_GILDE_DEFEND_GRAY, txt[(TXT_GUILD_BATTLE_POPUP + 6)]);
                actor[LBL_GILDE_ATTACK].text = "";
                actor[LBL_GILDE_DEFENCE].text = "";
                lastGuildData = guildData;
                isRaid = !((guildData[GUILD_IS_RAID] == 0));
                SendAction(ACT_REQUEST_GUILD_NAMES, guildData[GUILD_ATTACK_TARGET], guildData[GUILD_DEFENCE_TARGET], ((isMine) ? 0 : 1));
                if (guildData[0] == Savegame[SG_GUILD_INDEX]){
                    myOwnRank = myRank;
                    myOwnAttackTarget = int(guildData[GUILD_ATTACK_TARGET]);
                    myOwnGuildMoney = int(guildData[1]);
                    if ((int(Savegame[SG_SERVER_TIME]) - int(Savegame[SG_GUILD_JOIN_DATE])) > ((60 * 60) * 24)){
                        if ((((myRank == 1)) || ((myRank == 2)))){
                            if (int(guildData[GUILD_ATTACK_TARGET]) == 0){
                                Add(BTN_GILDE_ATTACK);
                                EnablePopup(BTN_GILDE_ATTACK, txt[(TXT_GUILD_BATTLE_POPUP + 0)]);
                                if (guildData[GUILD_RAID_LEVEL] >= 50){
                                    if (txt[TXT_RAID_TEXT]){
                                        EnablePopup(IMG_GILDE_RAID_GRAY, txt[(TXT_RAID_TEXT + 17)]);
                                    };
                                } else {
                                    Add(BTN_GILDE_RAID);
                                    if (txt[TXT_RAID_TEXT]){
                                        EnablePopup(BTN_GILDE_RAID, POPUP_BEGIN_LINE, txt[(TXT_RAID_TEXT + 0)], POPUP_END_LINE, POPUP_BEGIN_LINE, txt[(TXT_RAID_TEXT + 15)], (REL_POPUP_TAB + REL_POPUP_TAB_ADD), txt[(TXT_DUNGEON_NAMES + int(guildData[GUILD_RAID_LEVEL]))], (("(" + String((int(guildData[GUILD_RAID_LEVEL]) + 1))) + "/50)"), POPUP_END_LINE, POPUP_BEGIN_LINE, txt[(TXT_RAID_TEXT + 16)], (REL_POPUP_TAB + REL_POPUP_TAB_ADD), String(raidCost), actor[IMG_IF_GOLD], POPUP_END_LINE);
                                    };
                                };
                            } else {
                                if (int(guildData[GUILD_ATTACK_TARGET]) < 0){
                                    EnablePopup(IMG_GILDE_ATTACK_GRAY, txt[(TXT_GUILD_BATTLE_POPUP + 5)].split("%1").join(TimeStr(lastGuildData[GUILD_ATTACK_TIME])));
                                    if (txt[TXT_RAID_TEXT]){
                                        EnablePopup(IMG_GILDE_RAID_GRAY, txt[(TXT_RAID_TEXT + 3)].split("%1").join(TimeStr(lastGuildData[GUILD_ATTACK_TIME])));
                                    };
                                } else {
                                    if ((myAttackStatus & 1)){
                                        if (isRaid){
                                            Add(IMG_GILDE_RAID_OK);
                                            if (txt[TXT_RAID_TEXT]){
                                                EnablePopup(IMG_GILDE_RAID_OK, txt[(TXT_RAID_TEXT + 2)]);
                                            };
                                            if (txt[TXT_RAID_TEXT]){
                                                EnablePopup(IMG_GILDE_ATTACK_GRAY, txt[(TXT_RAID_TEXT + 10)]);
                                            };
                                        } else {
                                            Add(IMG_GILDE_ATTACK_OK);
                                            EnablePopup(IMG_GILDE_ATTACK_OK, txt[(TXT_GUILD_BATTLE_POPUP + 3)]);
                                            if (txt[TXT_RAID_TEXT]){
                                                EnablePopup(IMG_GILDE_RAID_GRAY, txt[(TXT_RAID_TEXT + 11)]);
                                            };
                                        };
                                    } else {
                                        if (isRaid){
                                            Add(BTN_GILDE_RAID);
                                            if (txt[TXT_RAID_TEXT]){
                                                EnablePopup(BTN_GILDE_RAID, txt[(TXT_RAID_TEXT + 1)]);
                                            };
                                            if (txt[TXT_RAID_TEXT]){
                                                EnablePopup(IMG_GILDE_ATTACK_GRAY, txt[(TXT_RAID_TEXT + 10)]);
                                            };
                                        } else {
                                            Add(BTN_GILDE_ATTACK);
                                            EnablePopup(BTN_GILDE_ATTACK, txt[(TXT_GUILD_BATTLE_POPUP + 1)]);
                                            if (txt[TXT_RAID_TEXT]){
                                                EnablePopup(IMG_GILDE_RAID_GRAY, txt[(TXT_RAID_TEXT + 11)]);
                                            };
                                        };
                                    };
                                };
                            };
                        } else {
                            if (int(guildData[GUILD_ATTACK_TARGET]) == 0){
                            } else {
                                if (int(guildData[GUILD_ATTACK_TARGET]) < 0){
                                    EnablePopup(IMG_GILDE_ATTACK_GRAY, txt[(TXT_GUILD_BATTLE_POPUP + 5)].split("%1").join(TimeStr(lastGuildData[GUILD_ATTACK_TIME])));
                                    if (txt[TXT_RAID_TEXT]){
                                        EnablePopup(IMG_GILDE_RAID_GRAY, txt[(TXT_RAID_TEXT + 3)].split("%1").join(TimeStr(lastGuildData[GUILD_ATTACK_TIME])));
                                    };
                                } else {
                                    if (isRaid){
                                        if ((int(Savegame[SG_GUILD_FIGHT_STATUS]) & 1)){
                                            Add(IMG_GILDE_RAID_OK);
                                            if (txt[TXT_RAID_TEXT]){
                                                EnablePopup(IMG_GILDE_RAID_OK, txt[(TXT_RAID_TEXT + 2)]);
                                            };
                                            if (txt[TXT_RAID_TEXT]){
                                                EnablePopup(IMG_GILDE_ATTACK_GRAY, txt[(TXT_RAID_TEXT + 10)]);
                                            };
                                        } else {
                                            Add(BTN_GILDE_RAID);
                                            if (txt[TXT_RAID_TEXT]){
                                                EnablePopup(BTN_GILDE_RAID, txt[(TXT_RAID_TEXT + 1)]);
                                            };
                                            if (txt[TXT_RAID_TEXT]){
                                                EnablePopup(IMG_GILDE_ATTACK_GRAY, txt[(TXT_RAID_TEXT + 10)]);
                                            };
                                        };
                                    } else {
                                        if ((int(Savegame[SG_GUILD_FIGHT_STATUS]) & 1)){
                                            Add(IMG_GILDE_ATTACK_OK);
                                            EnablePopup(IMG_GILDE_ATTACK_OK, txt[(TXT_GUILD_BATTLE_POPUP + 3)]);
                                            if (txt[TXT_RAID_TEXT]){
                                                EnablePopup(IMG_GILDE_RAID_GRAY, txt[(TXT_RAID_TEXT + 11)]);
                                            };
                                        } else {
                                            Add(BTN_GILDE_ATTACK);
                                            EnablePopup(BTN_GILDE_ATTACK, txt[(TXT_GUILD_BATTLE_POPUP + 1)]);
                                            if (txt[TXT_RAID_TEXT]){
                                                EnablePopup(IMG_GILDE_RAID_GRAY, txt[(TXT_RAID_TEXT + 11)]);
                                            };
                                        };
                                    };
                                };
                            };
                        };
                        if (int(guildData[GUILD_DEFENCE_TARGET]) <= 0){
                            EnablePopup(IMG_GILDE_DEFEND_GRAY, txt[(TXT_GUILD_BATTLE_POPUP + 6)]);
                        } else {
                            if ((int(Savegame[SG_GUILD_FIGHT_STATUS]) & 2)){
                                Add(IMG_GILDE_DEFEND_OK);
                                EnablePopup(IMG_GILDE_DEFEND_OK, txt[(TXT_GUILD_BATTLE_POPUP + 4)]);
                            } else {
                                Add(BTN_GILDE_DEFEND);
                                EnablePopup(BTN_GILDE_DEFEND, txt[(TXT_GUILD_BATTLE_POPUP + 2)]);
                            };
                        };
                    } else {
                        EnablePopup(IMG_GILDE_RAID_GRAY, txt[TXT_GUILD_JOINED_TOO_RECENTLY].split("%1").join(TimeStr((Number(Savegame[SG_GUILD_JOIN_DATE]) + ((60 * 60) * 24)), true)));
                        EnablePopup(IMG_GILDE_ATTACK_GRAY, txt[TXT_GUILD_JOINED_TOO_RECENTLY].split("%1").join(TimeStr((Number(Savegame[SG_GUILD_JOIN_DATE]) + ((60 * 60) * 24)), true)));
                        EnablePopup(IMG_GILDE_DEFEND_GRAY, txt[TXT_GUILD_JOINED_TOO_RECENTLY].split("%1").join(TimeStr((Number(Savegame[SG_GUILD_JOIN_DATE]) + ((60 * 60) * 24)), true)));
                    };
                } else {
                    Remove(BTN_GILDE_RAID);
                    Remove(IMG_GILDE_RAID_GRAY);
                    Remove(IMG_GILDE_RAID_OK);
                    if ((int(Savegame[SG_SERVER_TIME]) - int(Savegame[SG_GUILD_JOIN_DATE])) > ((60 * 60) * 24)){
                        if (myOwnRank == -1){
                            Remove(IMG_GILDE_ATTACK_GRAY);
                            Remove(IMG_GILDE_DEFEND_GRAY);
                        } else {
                            if ((((myOwnRank == 1)) || ((myOwnRank == 2)))){
                                if (int(guildData[GUILD_DEFENCE_TARGET]) == 0){
                                    if (myOwnAttackTarget == 0){
                                        if (myOwnGuildMoney >= AttackCost){
                                            Add(BTN_GILDE_ATTACK);
                                            EnablePopup(BTN_GILDE_ATTACK, POPUP_BEGIN_LINE, txt[(TXT_GUILD_BATTLE_POPUP + 8)], POPUP_END_LINE, POPUP_BEGIN_LINE, txt[(TXT_GUILD_BATTLE_POPUP + 17)], String(int((AttackCost / 100))), actor[IMG_IF_GOLD], POPUP_END_LINE);
                                        } else {
                                            EnablePopup(IMG_GILDE_ATTACK_GRAY, POPUP_BEGIN_LINE, txt[(TXT_GUILD_BATTLE_POPUP + 18)], POPUP_END_LINE, POPUP_BEGIN_LINE, txt[(TXT_GUILD_BATTLE_POPUP + 17)], String(int((AttackCost / 100))), actor[IMG_IF_GOLD], POPUP_END_LINE);
                                        };
                                    } else {
                                        if (myOwnAttackTarget < 0){
                                            EnablePopup(IMG_GILDE_ATTACK_GRAY, txt[(TXT_GUILD_BATTLE_POPUP + 11)]);
                                        } else {
                                            EnablePopup(IMG_GILDE_ATTACK_GRAY, txt[(TXT_GUILD_BATTLE_POPUP + 16)]);
                                        };
                                    };
                                } else {
                                    if (int(guildData[GUILD_DEFENCE_TARGET]) == int(Savegame[SG_GUILD_INDEX])){
                                        Add(IMG_GILDE_ATTACK_OK);
                                        EnablePopup(IMG_GILDE_ATTACK_OK, txt[(TXT_GUILD_BATTLE_POPUP + 12)]);
                                    } else {
                                        if (int(guildData[GUILD_DEFENCE_TARGET]) < 0){
                                            EnablePopup(IMG_GILDE_ATTACK_GRAY, txt[(TXT_GUILD_BATTLE_POPUP + 11)]);
                                        } else {
                                            EnablePopup(IMG_GILDE_ATTACK_GRAY, txt[(TXT_GUILD_BATTLE_POPUP + 13)]);
                                        };
                                    };
                                };
                            } else {
                                if (int(guildData[GUILD_DEFENCE_TARGET]) == int(Savegame[SG_GUILD_INDEX])){
                                    Add(IMG_GILDE_ATTACK_OK);
                                    EnablePopup(IMG_GILDE_ATTACK_OK, txt[(TXT_GUILD_BATTLE_POPUP + 12)]);
                                } else {
                                    EnablePopup(IMG_GILDE_ATTACK_GRAY, txt[(TXT_GUILD_BATTLE_POPUP + 14)]);
                                };
                                if (int(guildData[GUILD_ATTACK_TARGET]) == int(Savegame[SG_GUILD_INDEX])){
                                    if ((int(Savegame[SG_GUILD_FIGHT_STATUS]) & 2)){
                                        Add(IMG_GILDE_DEFEND_OK);
                                        EnablePopup(IMG_GILDE_DEFEND_OK, txt[(TXT_GUILD_BATTLE_POPUP + 4)]);
                                    } else {
                                        Add(BTN_GILDE_DEFEND);
                                        EnablePopup(BTN_GILDE_DEFEND, txt[(TXT_GUILD_BATTLE_POPUP + 9)]);
                                    };
                                } else {
                                    EnablePopup(IMG_GILDE_DEFEND_GRAY, txt[(TXT_GUILD_BATTLE_POPUP + 15)]);
                                };
                            };
                        };
                    } else {
                        if (myOwnRank == -1){
                            Remove(IMG_GILDE_ATTACK_GRAY);
                            Remove(IMG_GILDE_DEFEND_GRAY);
                        } else {
                            EnablePopup(IMG_GILDE_ATTACK_GRAY, txt[TXT_GUILD_JOINED_TOO_RECENTLY].split("%1").join(TimeStr((Number(Savegame[SG_GUILD_JOIN_DATE]) + ((60 * 60) * 24)), true)));
                            EnablePopup(IMG_GILDE_DEFEND_GRAY, txt[TXT_GUILD_JOINED_TOO_RECENTLY].split("%1").join(TimeStr((Number(Savegame[SG_GUILD_JOIN_DATE]) + ((60 * 60) * 24)), true)));
                        };
                    };
                };
                if (((((int(guildData[GUILD_MEMBERLEVEL]) % 1000) < 50)) || (!(txt[TXT_RAID_TEXT])))){
                    Remove(BTN_GILDE_RAID);
                    Remove(IMG_GILDE_RAID_GRAY);
                    Remove(IMG_GILDE_RAID_OK);
                };
                if (countCompleted >= 3){
                };
                if (guildData[0] != Savegame[SG_GUILD_INDEX]){
                    Remove(BNC_GILDE_GEBAEUDE);
                    Remove(BNC_GILDE_CHAT);
                    Remove(IMG_GILDE_GEBAEUDE_IMPROVE_GRAY, (IMG_GILDE_GEBAEUDE_IMPROVE_GRAY + 1), (IMG_GILDE_GEBAEUDE_IMPROVE_GRAY + 2));
                    Remove(BNC_GILDE_SCHATZ);
                };
            };
            this.arrowHallMode = false;
            if (isMine){
                if (int(guildData[0]) != this.GildenID){
                    this.GildenID = int(guildData[0]);
                    this.SendAction(this.ACT_REQUEST_GUILD, guildData[0]);
                };
            };
            this.lastGuildShown = ThisGilde;
            this.lastGuildMembers = guildMembers.join("#").split("#");
            this.addSuggestNames(this.lastGuildMembers);
            this.Load(this.BNC_SCREEN_GILDEN);
            this.Load(this.BNC_GILDE_SET_MEMBER);
            this.Load(this.BNC_GILDE_SET_MASTER);
            this.Load(this.IMG_GILDE_RANK, (this.IMG_GILDE_RANK + 1), (this.IMG_GILDE_RANK + 2));
            this.Load(this.BNC_GILDE_DIALOG_INVITE, this.BNC_GILDE_DIALOG_KICK, this.BNC_GILDE_DIALOG_MASTER);
            this.WhenLoaded(DoShowScreenGilden);
        }
        public function ShowWorkSuccessScreen(evt:Event=undefined):void{
            this.ShowCityScreen();
            this.Add(this.BNC_SCREEN_ARBEITEN_SUCCESS);
            this.actor[this.LBL_WINDOW_TITLE].text = this.txt[this.TXT_TITLE_WORK];
            this.actor[this.LBL_WINDOW_TITLE].x = ((this.POS_IF_WIN_X + this.REL_IF_WIN_WELCOME_X) - int((this.actor[this.LBL_WINDOW_TITLE].textWidth / 2)));
            this.actor[this.LBL_SCR_ARBEITEN_TEXT].text = this.txt[this.TXT_ARBEIT_TEXT5];
            this.actor[this.LBL_SCR_ARBEITEN_TEXT2].text = ((((this.txt[this.TXT_ARBEIT_TEXT6] + " ") + this.Geld(this.VerdientesGeld)) + " ") + this.txt[this.TXT_ARBEIT_TEXT7]);
            this.Play(this.SND_JINGLE);
            this.CheckWrongPage(this.ACT_SCREEN_ARBEITEN);
        }
        public function ShowWorkScreen(evt:Event=undefined):void{
            var ArbeitCountdown:* = null;
            var DoShowWorking:* = null;
            var evt:* = evt;
            ArbeitCountdown = new Timer(100);
            this.ShowCityScreen();
            if (this.Savegame[this.SG_ACTION_STATUS] == 1){
                DoShowWorking = function (){
                    var ArbeitCountdownEvent:* = null;
                    ArbeitCountdownEvent = function (evt:Event):void{
                        var evt:* = evt;
                        var _local3 = actor[LBL_SCR_ARBEITEN_TIME];
                        with (_local3) {
                            if (WaitingFor(Savegame[SG_ACTION_ENDTIME])){
                                if (txt[TXT_WORK_FINISH]){
                                    text = txt[TXT_WORK_FINISH].split("%1").join(WaitingTime(Savegame[SG_ACTION_ENDTIME])).split("%2").join(TimeStr(Savegame[SG_ACTION_ENDTIME], true));
                                } else {
                                    text = WaitingTime(Savegame[SG_ACTION_ENDTIME]);
                                };
                                if (OnStage(LBL_SCR_ARBEITEN_TIME)){
                                    SetTitleBar(text);
                                };
                                actor[CNT_SCR_ARBEITEN_FILL].width = (WaitingProgress((Savegame[SG_ACTION_ENDTIME] - ((Savegame[SG_ACTION_INDEX] * 60) * 60)), Savegame[SG_ACTION_ENDTIME]) * 278);
                            } else {
                                ArbeitCountdown.stop();
                                ArbeitCountdown.removeEventListener(TimerEvent.TIMER, ArbeitCountdownEvent);
                                if (OnStage(LBL_SCR_ARBEITEN_TIME)){
                                    SendAction(ACT_SCREEN_ARBEITEN);
                                };
                            };
                            x = ((POS_IF_WIN_X + REL_IF_WIN_WELCOME_X) - int((actor[LBL_SCR_ARBEITEN_TIME].textWidth / 2)));
                        };
                    };
                    var _local2 = actor[CNT_SCR_ARBEITEN_BAR];
                    with (_local2) {
                        scaleX = 0.5;
                        scaleY = 0.5;
                    };
                    _local2 = actor[CNT_SCR_ARBEITEN_FILL];
                    with (_local2) {
                        width = 0;
                        scaleY = 0.5;
                    };
                    actor[LBL_WINDOW_TITLE].text = txt[TXT_TITLE_WORK];
                    actor[LBL_WINDOW_TITLE].x = ((POS_IF_WIN_X + REL_IF_WIN_WELCOME_X) - int((actor[LBL_WINDOW_TITLE].textWidth / 2)));
                    actor[LBL_SCR_ARBEITEN_TEXT].text = txt[TXT_ARBEIT_TEXT4];
                    ArbeitCountdown.addEventListener(TimerEvent.TIMER, ArbeitCountdownEvent);
                    ArbeitCountdown.start();
                    CheckWrongPage(ACT_SCREEN_ARBEITEN);
                };
                this.Add(this.BNC_SCREEN_ARBEITEN_WAIT);
                this.SetCnt(this.CNT_SCR_ARBEITEN_BAR, this.IMG_QUESTBAR_BG);
                this.SetCnt(this.CNT_SCR_ARBEITEN_FILL, this.IMG_QUESTBAR_FILL);
                this.WhenLoaded(DoShowWorking);
            } else {
                if (this.Savegame[this.SG_ACTION_STATUS] == 0){
                    this.Add(this.BNC_SCREEN_ARBEITEN);
                    this.actor[this.LBL_WINDOW_TITLE].text = this.txt[this.TXT_TITLE_WORK];
                    this.actor[this.LBL_WINDOW_TITLE].x = ((this.POS_IF_WIN_X + this.REL_IF_WIN_WELCOME_X) - int((this.actor[this.LBL_WINDOW_TITLE].textWidth / 2)));
                    this.actor[this.LBL_SCR_ARBEITEN_TEXT].text = this.txt[this.TXT_ARBEIT_TEXT];
                    this.SetSliderValue(this.SLDR_ARBEITEN, 1);
                    this.ArbeitenSliderChange(1);
                };
            };
        }
        public function ArbeitenSliderChange(value:int):void{
            var txtWorkDur:String;
            if (this.txt[this.TXT_ARBEIT_TEXT3] == ""){
                txtWorkDur = this.txt[this.TXT_ARBEIT_TEXT2].split("%hours").join(String(value)).split("%reward").join(this.Geld((value * this.Stundenlohn)));
                if (this.txt[this.TXT_WORK_FINISH]){
                    this.actor[this.LBL_SCR_ARBEITEN_TEXT2].text = this.txt[this.TXT_WORK_FINISH].split("%1").join(txtWorkDur).split("%2").join(this.TimeStr((int((this.GameTime.getTime() / 1000)) + (((value + 1) * 60) * 60)), true));
                } else {
                    this.actor[this.LBL_SCR_ARBEITEN_TEXT2].text = txtWorkDur;
                };
            } else {
                this.actor[this.LBL_SCR_ARBEITEN_TEXT2].text = ((((((value + " ") + this.txt[this.TXT_ARBEIT_TEXT2]) + " ") + this.Geld((value * this.Stundenlohn))) + " ") + this.txt[this.TXT_ARBEIT_TEXT3]);
            };
        }
        public function ShowHallScreen(evt:Event=undefined):void{
            var DoShowHallScreen:* = null;
            var evt:* = evt;
            DoShowHallScreen = function (){
                RemoveAll();
                if (GuildHallMode){
                    ruhmesHalleSuchString = Gilde;
                    ruhmesHalleSuchName = true;
                } else {
                    ruhmesHalleSuchString = actor[INP_NAME].getChildAt(1).text;
                    ruhmesHalleSuchName = true;
                };
                actor[INP_HALLE_GOTO].getChildAt(1).text = txt[TXT_HALLE_SUCHFELD_TEXT];
                Add(BNC_SCREEN_HALLE);
            };
            this.Load(this.BNC_SCREEN_HALLE);
            this.WhenLoaded(DoShowHallScreen);
        }
        public function ShowCityScreen(evt:Event=undefined):void{
            var StatistenBleiben:* = false;
            var doShowCityScreen:* = null;
            var evt:* = evt;
            doShowCityScreen = function (){
                if (((((OnStage(IMG_SCR_CITY_BACKG_NIGHT)) || (OnStage(IMG_SCR_CITY_BACKG_DAWN)))) || (OnStage(IMG_SCR_CITY_BACKG_DAY)))){
                    MakePersistent(BNC_CITY_STATISTEN, BNC_BUBBLES);
                    StatistenBleiben = true;
                };
                RemoveAll();
                switch (Tageszeit()){
                    case 0:
                        Add(BNC_SCREEN_CITY_NIGHT);
                        break;
                    case 1:
                        Add(BNC_SCREEN_CITY_DAWN);
                        break;
                    case 2:
                        Add(BNC_SCREEN_CITY_DAY);
                        break;
                };
                Add(BNC_SCREEN_CITY);
                if (StatistenBleiben){
                    MakeTemporary(BNC_CITY_STATISTEN, BNC_BUBBLES);
                    VisibleToFront(BNC_CITY_STATISTEN, BNC_BUBBLES);
                } else {
                    if (int((Math.random() * 3)) == 0){
                        Add(IMG_CITY_MAGIER1);
                    };
                    if (int((Math.random() * 3)) == 0){
                        Add(IMG_CITY_ORK1);
                        DefineBunch(BNC_CITY_ORK, IMG_CITY_ORK1);
                    };
                    if (int((Math.random() * 3)) == 0){
                        Add(IMG_CITY_SANDWICH1);
                    };
                    if (int((Math.random() * 3)) == 0){
                        Add(IMG_CITY_ZWERG1);
                        DefineBunch(BNC_CITY_ZWERG, IMG_CITY_ZWERG1);
                    };
                    if (int((Math.random() * 3)) == 0){
                        Add(IMG_CITY_ELF1);
                    };
                };
                if (Capabilities.version.substr(0, 3) != "IOS"){
                    actor[IMG_SCR_CITY_CLOUDS_NIGHT].scrollRect = new Rectangle(0, 0, 1000, 265);
                    actor[IMG_SCR_CITY_CLOUDS_DAWN].scrollRect = new Rectangle(0, 0, 1000, 265);
                    actor[IMG_SCR_CITY_CLOUDS_DAY].scrollRect = new Rectangle(0, 0, 1000, 265);
                    if (lightMode){
                        Remove(IMG_SCR_CITY_CLOUDS_NIGHT);
                        Remove(IMG_SCR_CITY_CLOUDS_DAWN);
                        Remove(IMG_SCR_CITY_CLOUDS_DAY);
                    };
                };
                ShowDealerScreen(undefined, true);
            };
            StatistenBleiben = false;
            this.Load(this.BNC_BUBBLES);
            switch (this.Tageszeit()){
                case 0:
                    this.Load(this.BNC_SCREEN_CITY_NIGHT);
                    break;
                case 1:
                    this.Load(this.BNC_SCREEN_CITY_DAWN);
                    break;
                case 2:
                    this.Load(this.BNC_SCREEN_CITY_DAY);
                    break;
            };
            this.Load(this.BNC_SCREEN_CITY);
            this.Load(this.IMG_CITY_ESEL2);
            this.Load(this.IMG_CITY_SANDWICH1);
            this.Load(this.IMG_CITY_SANDWICH2);
            this.WhenLoaded(doShowCityScreen);
        }
        public function ShowPostScreen(par:Array=undefined){
            var DoShowPost:* = null;
            var BuildPostList:* = null;
            var par:* = par;
            DoShowPost = function (evt:Event=undefined){
                var thisInstance:* = 0;
                var postSchonDa:* = false;
                var evt:* = evt;
                var PostSetFocus:* = function (evt:Event=undefined){
                    var evt:* = evt;
                    if (!OnStage(IMG_POST_BG)){
                        return;
                    };
                    if (thisInstance != postInstance){
                        var _local3 = actor[CNT_POST_LIST];
                        with (_local3) {
                            removeEventListener(KeyboardEvent.KEY_DOWN, PostKeyEvent);
                            removeEventListener(FocusEvent.FOCUS_OUT, PostSetFocus);
                        };
                    } else {
                        stage.stageFocusRect = false;
                        stage.focus = actor[CNT_POST_LIST];
                    };
                };
                var PostKeyEvent:* = function (evt:KeyboardEvent){
                    var evt:* = evt;
                    if (((!(OnStage(CNT_POST_LIST))) || (OnStage(BTN_POST_FLUSH_OK)))){
                        return;
                    };
                    if (thisInstance != postInstance){
                        var _local3 = actor[CNT_POST_LIST];
                        with (_local3) {
                            removeEventListener(KeyboardEvent.KEY_DOWN, PostKeyEvent);
                            removeEventListener(FocusEvent.FOCUS_OUT, PostSetFocus);
                        };
                        return;
                    };
                    if (OnStage(CNT_POST_LIST)){
                        if ((((evt.keyCode == Keyboard.DELETE)) || ((evt.keyCode == Keyboard.BACKSPACE)))){
                            PostBtnHandler(undefined, BTN_POST_DELETE);
                        } else {
                            if (evt.keyCode == Keyboard.ENTER){
                                PostBtnHandler(undefined, BTN_POST_READ);
                            } else {
                                if ((((evt.keyCode == Keyboard.UP)) || ((evt.keyCode == Keyboard.DOWN)))){
                                    BuildPostList(evt);
                                };
                            };
                        };
                    };
                };
                postInstance++;
                if (postInstance > 20000){
                    postInstance = 0;
                };
                thisInstance = postInstance;
                postSchonDa = OnStage(SHP_POST_BLACK_SQUARE);
                RemoveAll();
                if ((par is Array)){
                    PostReturnToPlayer = "";
                    BuildPostList();
                };
                Add(BNC_SCREEN_POST);
                var _local3 = actor[CNT_POST_LIST];
                with (_local3) {
                    addEventListener(KeyboardEvent.KEY_DOWN, PostKeyEvent);
                    addEventListener(FocusEvent.FOCUS_OUT, PostSetFocus);
                };
                PostSetFocus();
                if (!(par is Array)){
                    PostReturnToPlayer = selName;
                    actor[INP_POST_ADDRESS].getChildAt(1).type = TextFieldType.INPUT;
                    actor[INP_POST_SUBJECT].getChildAt(1).type = TextFieldType.INPUT;
                    actor[INP_POST_TEXT].getChildAt(1).type = TextFieldType.INPUT;
                    Remove(BNC_POST_LIST);
                    Add(BNC_POST_WRITE);
                    Hide(CNT_POST_GUILD);
                    actor[INP_POST_ADDRESS].getChildAt(1).text = selName;
                    actor[INP_POST_SUBJECT].getChildAt(1).text = txt[TXT_BETREFF];
                    actor[INP_POST_TEXT].getChildAt(1).text = txt[TXT_NACHRICHT];
                };
                if (Tageszeit() != 0){
                    Remove(BNC_POST_NIGHT);
                };
                if (Tageszeit() != 1){
                    Remove(BNC_POST_DAWN);
                };
                if (((((!(postSchonDa)) && ((par is Array)))) && (!(lightMode)))){
                    SetAlpha(BNC_POST_LIST, 0);
                    SetAlpha(SHP_POST_BLACK_SQUARE, 0);
                    FadeIn(BNC_POST_LIST);
                    FadeIn(SHP_POST_BLACK_SQUARE, 20, 0.05, 0.6);
                };
            };
            BuildPostList = function (evt:Event=undefined){
                var tmpArray:* = undefined;
                var selRow:* = 0;
                var tmpBalken:* = null;
                var line:* = undefined;
                var i:* = 0;
                var tmpFmt:* = null;
                var evt:* = evt;
                tmpArray = par[1].split("/");
                if (par[2]){
                    Savegame[SG_MSG_COUNT] = par[2];
                };
                selRow = (((tmpArray[0] == "")) ? 0 : 1);
                var _local3 = actor[LBL_POST_LIMIT];
                with (_local3) {
                    if (int(Savegame[SG_MSG_COUNT]) >= 100){
                        defaultTextFormat = FontFormat_Error;
                    } else {
                        defaultTextFormat = FontFormat_Default;
                    };
                    text = (Savegame[SG_MSG_COUNT] + " / 100");
                    x = (((POS_POST_SQUARE_X + REL_POST_SQUARE_X) - width) + REL_POST_LIMIT_X);
                };
                if ((evt is MouseEvent)){
                    selRow = (int(((actor[CNT_POST_LIST].getChildIndex(evt.target) - 3) / 4)) + 1);
                };
                if ((evt is KeyboardEvent)){
                    selRow = (oldSel + ((KeyboardEvent(evt).keyCode)==Keyboard.UP) ? -1 : 1);
                    if (selRow < 1){
                        PostBtnHandler(undefined, BTN_POST_UP);
                        return;
                    };
                    if (selRow > 15){
                        PostBtnHandler(undefined, BTN_POST_DOWN);
                        return;
                    };
                    if (tmpArray[((selRow - 1) * 3)] == ""){
                        return;
                    };
                };
                if (oldSel == -1){
                    selRow = 15;
                };
                while (tmpArray[((selRow - 1) * 3)] == "") {
                    selRow = (selRow - 1);
                };
                oldSel = selRow;
                _local3 = actor[CNT_POST_LIST];
                with (_local3) {
                    while (numChildren > 0) {
                        removeChildAt(0);
                    };
                    mouseEnabled = true;
                    doubleClickEnabled = true;
                    mouseChildren = true;
                };
                if (textDir == "right"){
                    PostListAddField((REL_POST_LIST_COLUMN_1_X + 180), REL_POST_LIST_LINES_Y, txt[TXT_POST_LIST_COLUMN_1], FontFormat_PostListHeading);
                    PostListAddField((REL_POST_LIST_COLUMN_2_X + 470), REL_POST_LIST_LINES_Y, txt[TXT_POST_LIST_COLUMN_2], FontFormat_PostListHeading);
                    PostListAddField((REL_POST_LIST_COLUMN_3_X + 180), REL_POST_LIST_LINES_Y, txt[TXT_POST_LIST_COLUMN_3], FontFormat_PostListHeading);
                } else {
                    PostListAddField(REL_POST_LIST_COLUMN_1_X, REL_POST_LIST_LINES_Y, txt[TXT_POST_LIST_COLUMN_1], FontFormat_PostListHeading);
                    PostListAddField(REL_POST_LIST_COLUMN_2_X, REL_POST_LIST_LINES_Y, txt[TXT_POST_LIST_COLUMN_2], FontFormat_PostListHeading);
                    PostListAddField(REL_POST_LIST_COLUMN_3_X, REL_POST_LIST_LINES_Y, txt[TXT_POST_LIST_COLUMN_3], FontFormat_PostListHeading);
                };
                PostSel = selRow;
                PostScrollDown = !((tmpArray[(tmpArray.length - 3)] == ""));
                line = 1;
                i = 0;
                while (i < ((tmpArray.length - 1) - 3)) {
                    if (selRow == line){
                        tmpFmt = FontFormat_PostListHighLightSys;
                    } else {
                        tmpFmt = FontFormat_PostListTextSys;
                    };
                    tmpBalken = new MovieClip();
                    _local3 = tmpBalken.graphics;
                    with (_local3) {
                        beginFill(CLR_SFORANGE, 0.5);
                        lineStyle(0, 0, 0);
                        drawRect(0, 0, ((REL_POST_SQUARE_X - (REL_POST_LIST_COLUMN_1_X * 2)) - 10), (REL_POST_LIST_LINE_Y + 3));
                    };
                    _local3 = tmpBalken;
                    with (_local3) {
                        x = (REL_POST_LIST_COLUMN_1_X - 5);
                        y = ((REL_POST_LIST_LINES_Y + (line * REL_POST_LIST_LINE_Y)) - 3);
                        mouseEnabled = true;
                        doubleClickEnabled = true;
                        mouseChildren = false;
                        alpha = (((selRow == line)) ? 1 : 0);
                    };
                    DoubleClickHandler(tmpBalken, BuildPostList, PostBtnHandler);
                    if (tmpArray[i] == ""){
                        fightFlushMode = false;
                        return;
                    };
                    switch (tmpArray[(i + 1)]){
                        case "1":
                            tmpArray[(i + 1)] = txt[TXT_SUBJECT_GUILD_DELETED];
                            break;
                        case "2":
                            tmpArray[(i + 1)] = txt[TXT_SUBJECT_GUILD_DELETED_BY_ADMIN];
                            break;
                        case "3":
                            tmpArray[(i + 1)] = txt[TXT_SUBJECT_GUILD_EXPELLED];
                            break;
                        case "4":
                            tmpArray[(i + 1)] = txt[TXT_SUBJECT_GUILD_EXPELLED_BY_ADMIN];
                            break;
                        case "5":
                            tmpArray[(i + 1)] = txt[TXT_SUBJECT_GUILD_INVITE];
                            break;
                        case "6":
                            if (fightFlushMode){
                                SendAction(ACT_POST_DELETE, ((line + PostScroll) - 1));
                                return;
                            };
                            tmpArray[(i + 1)] = txt[TXT_SUBJECT_PVP].replace("%1", tmpArray[i]);
                            if (selRow == line){
                                tmpFmt = FontFormat_PostListHighLightSysRed;
                            } else {
                                tmpFmt = FontFormat_PostListTextSysRed;
                            };
                            break;
                        case "7":
                            if (fightFlushMode){
                                SendAction(ACT_POST_DELETE, ((line + PostScroll) - 1));
                                return;
                            };
                            tmpArray[(i + 1)] = txt[TXT_SUBJECT_PVP].replace("%1", tmpArray[i]);
                            if (selRow == line){
                                tmpFmt = FontFormat_PostListHighLightSysGreen;
                            } else {
                                tmpFmt = FontFormat_PostListTextSysGreen;
                            };
                            break;
                        case "8":
                            if (txt[TXT_INV_ACC_TITLE] != ""){
                                tmpArray[(i + 1)] = txt[TXT_INV_ACC_TITLE];
                            } else {
                                tmpArray[(i + 1)] = "FRIEND_INVITE_ACCEPTED";
                            };
                            break;
                        case "9":
                            if (txt[TXT_INV_VAL_TITLE] != ""){
                                tmpArray[(i + 1)] = txt[TXT_INV_VAL_TITLE];
                            } else {
                                tmpArray[(i + 1)] = "FRIEND_EMAIL_VERIFIED";
                            };
                            break;
                        case "1  ":
                        case "2  ":
                        case "3  ":
                        case "4  ":
                        case "5  ":
                        case "6  ":
                        case "7  ":
                        case "8  ":
                        case "9  ":
                            tmpArray[(i + 1)] = "Moo!";
                        default:
                            if (selRow == line){
                                tmpFmt = FontFormat_PostListHighLight;
                            } else {
                                tmpFmt = FontFormat_PostListText;
                            };
                    };
                    actor[CNT_POST_LIST].addChild(tmpBalken);
                    addSuggestNames(tmpArray[i]);
                    if (textDir == "right"){
                        i = (i + 1);
                        PostListAddField((REL_POST_LIST_COLUMN_1_X + 180), (REL_POST_LIST_LINES_Y + (line * REL_POST_LIST_LINE_Y)), tmpArray[i], tmpFmt);
                        i = (i + 1);
                        PostListAddField((REL_POST_LIST_COLUMN_2_X + 470), (REL_POST_LIST_LINES_Y + (line * REL_POST_LIST_LINE_Y)), tmpArray[i], tmpFmt);
                        PostListAddField((REL_POST_LIST_COLUMN_3_X + 180), (REL_POST_LIST_LINES_Y + (line * REL_POST_LIST_LINE_Y)), (((int(tmpArray[i]) == 0)) ? "" : TimeStr(tmpArray[i])), tmpFmt);
                    } else {
                        i = (i + 1);
                        PostListAddField(REL_POST_LIST_COLUMN_1_X, (REL_POST_LIST_LINES_Y + (line * REL_POST_LIST_LINE_Y)), tmpArray[i], tmpFmt);
                        i = (i + 1);
                        PostListAddField(REL_POST_LIST_COLUMN_2_X, (REL_POST_LIST_LINES_Y + (line * REL_POST_LIST_LINE_Y)), tmpArray[i], tmpFmt);
                        PostListAddField(REL_POST_LIST_COLUMN_3_X, (REL_POST_LIST_LINES_Y + (line * REL_POST_LIST_LINE_Y)), (((int(tmpArray[i]) == 0)) ? "" : TimeStr(tmpArray[i])), tmpFmt);
                    };
                    line = (line + 1);
                    i = (i + 1);
                };
                fightFlushMode = false;
            };
            var PostListAddField:* = function (pos_x:int, pos_y:int, txt:String, fmt:TextFormat):void{
                var tmpLbl:* = null;
                var pos_x:* = pos_x;
                var pos_y:* = pos_y;
                var txt:* = txt;
                var fmt:* = fmt;
                tmpLbl = new TextField();
                var _local6 = tmpLbl;
                with (_local6) {
                    defaultTextFormat = fmt;
                    autoSize = TextFieldAutoSize.LEFT;
                    background = false;
                    selectable = false;
                    embedFonts = fontEmbedded;
                    antiAliasType = AntiAliasType.ADVANCED;
                    mouseEnabled = true;
                    doubleClickEnabled = true;
                    text = txt;
                    if (textDir == "right"){
                        x = (pos_x - (((tmpLbl is TextField)) ? textWidth : width));
                    } else {
                        x = pos_x;
                    };
                    y = pos_y;
                    visible = true;
                    filters = Filter_Shadow;
                };
                DoubleClickHandler(tmpLbl, BuildPostList, PostBtnHandler);
                actor[CNT_POST_LIST].addChild(tmpLbl);
            };
            this.Load(this.BNC_SCREEN_POST);
            this.WhenLoaded(DoShowPost);
        }
        public function DoubleClickHandler(dispObj:Object, fnClick:Function, fnDoubleClick:Function){
            var dblClickTimer:* = null;
            var waiting:* = false;
            var tmpEvt:* = null;
            var dblClickTimerEvent:* = null;
            var dispObj:* = dispObj;
            var fnClick:* = fnClick;
            var fnDoubleClick:* = fnDoubleClick;
            var dblClickEvent:* = function (evt:MouseEvent){
                if (waiting){
                    fnClick(tmpEvt);
                    fnDoubleClick(evt);
                    dblClickTimer.stop();
                    dblClickTimer.removeEventListener(TimerEvent.TIMER, dblClickTimerEvent);
                    waiting = false;
                } else {
                    tmpEvt = evt;
                    dblClickTimer.addEventListener(TimerEvent.TIMER, dblClickTimerEvent);
                    dblClickTimer.start();
                    waiting = true;
                };
            };
            dblClickTimerEvent = function (evt:TimerEvent){
                waiting = false;
                dblClickTimer.removeEventListener(TimerEvent.TIMER, dblClickTimerEvent);
                fnClick(tmpEvt);
            };
            dblClickTimer = new Timer(300, 1);
            waiting = false;
            var _local5 = dispObj;
            with (_local5) {
                mouseEnabled = true;
                addEventListener(MouseEvent.MOUSE_DOWN, dblClickEvent);
            };
        }
        public function ShowBuildCharacterScreen(evt:Event=undefined):void{
            var RebuildMode:* = false;
            var i:* = 0;
            var evt:* = evt;
            RebuildMode = false;
            if ((((evt is MouseEvent)) && ((this.GetActorID(evt.target) == this.BTN_OPTION_CHANGEIMG)))){
                RebuildMode = true;
            };
            if ((((evt is MouseEvent)) && ((((this.GetActorID(evt.target) == this.CNT_GOTO_LOGIN)) || ((this.GetActorID(evt.target) == this.CNT_GOTO_SIGNUP)))))){
                this.so.data.skipAutoLogin = true;
            };
            if (((((this.so.data.HasAccount) && (!(this.so.data.skipAutoLogin)))) && (!(RebuildMode)))){
                if (this.so.data.userName){
                    this.actor[this.INP_NAME].getChildAt(1).text = String(this.so.data.userName);
                };
                if (this.so.data.password){
                    this.actor[this.INP_LOGIN_PASSWORD].getChildAt(1).text = String(this.so.data.password);
                };
                this.Add(this.BLACK_SQUARE);
                this.RequestLogin();
                return;
            };
            if (((((this.buffedMode) && (!(this.buffedReq)))) && (!(RebuildMode)))){
                this.ShowLoginScreen();
                return;
            };
            this.RemoveAll();
            i = 0;
            while (i < 10) {
                var _local3 = this.actor[(this.IMG_CHARIMG_BACKGROUND + i)];
                with (_local3) {
                    x = ((POS_SCREEN_TITLE_X - 150) + REL_CHARIMG_X);
                    y = (POS_SCREEN_TITLE_Y + REL_CHARIMG_Y);
                    scaleX = 1;
                    scaleY = 1;
                };
                i = (i + 1);
            };
            _local3 = this.actor[this.LBL_SCREEN_TITLE];
            with (_local3) {
                text = txt[TXT_CREATE_CHARACTER];
                x = (POS_SCREEN_TITLE_X - int((textWidth / 2)));
                y = POS_SCREEN_TITLE_Y;
            };
            this.Add(this.BNC_SCREEN_BUILDCHAR);
            if (this.DemoMode){
                this.Remove(this.CNT_CREATE_GOTO_LOGIN, this.CNT_IF_LOGOUT);
            };
            if (this.CharVolk == 0){
                this.RandomizeCharacter();
            };
            if (RebuildMode){
                this.Remove(this.BTN_CREATE_CHARACTER);
                this.revertCharVolk = this.CharVolk;
                this.revertCharMann = this.CharMann;
                this.revertCharColor = this.CharColor;
                this.revertCharMouth = this.CharMouth;
                this.revertCharBeard = this.CharBeard;
                this.revertCharNose = this.CharNose;
                this.revertCharEyes = this.CharEyes;
                this.revertCharBrows = this.CharBrows;
                this.revertCharEars = this.CharEars;
                this.revertCharHair = this.CharHair;
                this.revertCharSpecial = this.CharSpecial;
                this.revertCharSpecial2 = this.CharSpecial2;
                this.KlasseGewählt = true;
            };
            this.LoadCharacterImage();
        }
        public function achLevel(SG:Array, achIndex:int, almode:int=0):int{
            var alresult:int;
            var alnext:int;
            alresult = 0;
            alnext = 0;
            switch (achIndex){
                case 0:
                    alnext = 2;
                    if (int(SG[this.SG_ACHIEVEMENTS]) >= 2){
                        alresult = 1;
                        alnext = 5;
                    };
                    if (int(SG[this.SG_ACHIEVEMENTS]) >= 5){
                        alresult = 2;
                        alnext = 10;
                    };
                    if (int(SG[this.SG_ACHIEVEMENTS]) >= 10){
                        alresult = 3;
                        alnext = 20;
                    };
                    if (int(SG[this.SG_ACHIEVEMENTS]) >= 20){
                        alresult = 4;
                        alnext = 30;
                    };
                    if (int(SG[this.SG_ACHIEVEMENTS]) >= 30){
                        alresult = 5;
                        alnext = 40;
                    };
                    if (int(SG[this.SG_ACHIEVEMENTS]) >= 40){
                        alresult = 6;
                        alnext = 50;
                    };
                    if (int(SG[this.SG_ACHIEVEMENTS]) >= 50){
                        alresult = 7;
                        alnext = 60;
                    };
                    if (int(SG[this.SG_ACHIEVEMENTS]) >= 60){
                        alresult = 8;
                        alnext = 70;
                    };
                    if (int(SG[this.SG_ACHIEVEMENTS]) >= 70){
                        alresult = 9;
                        alnext = 80;
                    };
                    if (int(SG[this.SG_ACHIEVEMENTS]) >= 80){
                        alresult = 10;
                        alnext = 90;
                    };
                    if (int(SG[this.SG_ACHIEVEMENTS]) >= 90){
                        alresult = 11;
                        alnext = 100;
                    };
                    if (int(SG[this.SG_ACHIEVEMENTS]) >= 100){
                        alresult = 12;
                        alnext = 0;
                    };
                    break;
                case 1:
                    alnext = 1;
                    if (int(SG[(this.SG_ACHIEVEMENTS + 1)]) >= 1){
                        alresult = 1;
                        alnext = 5;
                    };
                    if (int(SG[(this.SG_ACHIEVEMENTS + 1)]) >= 5){
                        alresult = 2;
                        alnext = 10;
                    };
                    if (int(SG[(this.SG_ACHIEVEMENTS + 1)]) >= 10){
                        alresult = 3;
                        alnext = 20;
                    };
                    if (int(SG[(this.SG_ACHIEVEMENTS + 1)]) >= 20){
                        alresult = 4;
                        alnext = 30;
                    };
                    if (int(SG[(this.SG_ACHIEVEMENTS + 1)]) >= 30){
                        alresult = 5;
                        alnext = 40;
                    };
                    if (int(SG[(this.SG_ACHIEVEMENTS + 1)]) >= 40){
                        alresult = 6;
                        alnext = 50;
                    };
                    if (int(SG[(this.SG_ACHIEVEMENTS + 1)]) >= 50){
                        alresult = 7;
                        alnext = 60;
                    };
                    if (int(SG[(this.SG_ACHIEVEMENTS + 1)]) >= 60){
                        alresult = 8;
                        alnext = 70;
                    };
                    if (int(SG[(this.SG_ACHIEVEMENTS + 1)]) >= 70){
                        alresult = 9;
                        alnext = 80;
                    };
                    if (int(SG[(this.SG_ACHIEVEMENTS + 1)]) >= 80){
                        alresult = 10;
                        alnext = 90;
                    };
                    if (int(SG[(this.SG_ACHIEVEMENTS + 1)]) >= 90){
                        alresult = 11;
                        alnext = 100;
                    };
                    if (int(SG[(this.SG_ACHIEVEMENTS + 1)]) >= 100){
                        alresult = 12;
                        alnext = 0;
                    };
                    break;
                case 2:
                    alnext = 1;
                    if (int(SG[(this.SG_ACHIEVEMENTS + 2)]) >= 1){
                        alresult = 1;
                        alnext = 5;
                    };
                    if (int(SG[(this.SG_ACHIEVEMENTS + 2)]) >= 5){
                        alresult = 2;
                        alnext = 10;
                    };
                    if (int(SG[(this.SG_ACHIEVEMENTS + 2)]) >= 10){
                        alresult = 3;
                        alnext = 25;
                    };
                    if (int(SG[(this.SG_ACHIEVEMENTS + 2)]) >= 25){
                        alresult = 4;
                        alnext = 50;
                    };
                    if (int(SG[(this.SG_ACHIEVEMENTS + 2)]) >= 50){
                        alresult = 5;
                        alnext = 100;
                    };
                    if (int(SG[(this.SG_ACHIEVEMENTS + 2)]) >= 100){
                        alresult = 6;
                        alnext = 250;
                    };
                    if (int(SG[(this.SG_ACHIEVEMENTS + 2)]) >= 250){
                        alresult = 7;
                        alnext = 500;
                    };
                    if (int(SG[(this.SG_ACHIEVEMENTS + 2)]) >= 500){
                        alresult = 8;
                        alnext = 1000;
                    };
                    if (int(SG[(this.SG_ACHIEVEMENTS + 2)]) >= 1000){
                        alresult = 9;
                        alnext = 2500;
                    };
                    if (int(SG[(this.SG_ACHIEVEMENTS + 2)]) >= 2500){
                        alresult = 10;
                        alnext = 5000;
                    };
                    if (int(SG[(this.SG_ACHIEVEMENTS + 2)]) >= 5000){
                        alresult = 11;
                        alnext = 10000;
                    };
                    if (int(SG[(this.SG_ACHIEVEMENTS + 2)]) >= 10000){
                        alresult = 12;
                        alnext = 0;
                    };
                    break;
                case 3:
                    alnext = 1;
                    if (int(SG[(this.SG_ACHIEVEMENTS + 3)]) >= 1){
                        alresult = 1;
                        alnext = 5;
                    };
                    if (int(SG[(this.SG_ACHIEVEMENTS + 3)]) >= 5){
                        alresult = 2;
                        alnext = 10;
                    };
                    if (int(SG[(this.SG_ACHIEVEMENTS + 3)]) >= 10){
                        alresult = 3;
                        alnext = 25;
                    };
                    if (int(SG[(this.SG_ACHIEVEMENTS + 3)]) >= 25){
                        alresult = 4;
                        alnext = 50;
                    };
                    if (int(SG[(this.SG_ACHIEVEMENTS + 3)]) >= 50){
                        alresult = 5;
                        alnext = 100;
                    };
                    if (int(SG[(this.SG_ACHIEVEMENTS + 3)]) >= 100){
                        alresult = 6;
                        alnext = 250;
                    };
                    if (int(SG[(this.SG_ACHIEVEMENTS + 3)]) >= 250){
                        alresult = 7;
                        alnext = 500;
                    };
                    if (int(SG[(this.SG_ACHIEVEMENTS + 3)]) >= 500){
                        alresult = 8;
                        alnext = 1000;
                    };
                    if (int(SG[(this.SG_ACHIEVEMENTS + 3)]) >= 1000){
                        alresult = 9;
                        alnext = 2500;
                    };
                    if (int(SG[(this.SG_ACHIEVEMENTS + 3)]) >= 2500){
                        alresult = 10;
                        alnext = 5000;
                    };
                    if (int(SG[(this.SG_ACHIEVEMENTS + 3)]) >= 5000){
                        alresult = 11;
                        alnext = 10000;
                    };
                    if (int(SG[(this.SG_ACHIEVEMENTS + 3)]) >= 10000){
                        alresult = 12;
                        alnext = 0;
                    };
                    break;
                case 4:
                    alnext = 1;
                    if (int(SG[(this.SG_ACHIEVEMENTS + 4)]) >= 1){
                        alresult = 1;
                        alnext = 5;
                    };
                    if (int(SG[(this.SG_ACHIEVEMENTS + 4)]) >= 5){
                        alresult = 2;
                        alnext = 10;
                    };
                    if (int(SG[(this.SG_ACHIEVEMENTS + 4)]) >= 10){
                        alresult = 3;
                        alnext = 25;
                    };
                    if (int(SG[(this.SG_ACHIEVEMENTS + 4)]) >= 25){
                        alresult = 4;
                        alnext = 50;
                    };
                    if (int(SG[(this.SG_ACHIEVEMENTS + 4)]) >= 50){
                        alresult = 5;
                        alnext = 100;
                    };
                    if (int(SG[(this.SG_ACHIEVEMENTS + 4)]) >= 100){
                        alresult = 6;
                        alnext = 250;
                    };
                    if (int(SG[(this.SG_ACHIEVEMENTS + 4)]) >= 250){
                        alresult = 7;
                        alnext = 500;
                    };
                    if (int(SG[(this.SG_ACHIEVEMENTS + 4)]) >= 500){
                        alresult = 8;
                        alnext = 1000;
                    };
                    if (int(SG[(this.SG_ACHIEVEMENTS + 4)]) >= 1000){
                        alresult = 9;
                        alnext = 2500;
                    };
                    if (int(SG[(this.SG_ACHIEVEMENTS + 4)]) >= 2500){
                        alresult = 10;
                        alnext = 5000;
                    };
                    if (int(SG[(this.SG_ACHIEVEMENTS + 4)]) >= 5000){
                        alresult = 11;
                        alnext = 10000;
                    };
                    if (int(SG[(this.SG_ACHIEVEMENTS + 4)]) >= 10000){
                        alresult = 12;
                        alnext = 0;
                    };
                    break;
                case 5:
                    alnext = 1;
                    if (int(SG[(this.SG_ACHIEVEMENTS + 5)]) >= 100){
                        alresult = 1;
                        alnext = 5;
                    };
                    if (int(SG[(this.SG_ACHIEVEMENTS + 5)]) >= 500){
                        alresult = 2;
                        alnext = 10;
                    };
                    if (int(SG[(this.SG_ACHIEVEMENTS + 5)]) >= 1000){
                        alresult = 3;
                        alnext = 25;
                    };
                    if (int(SG[(this.SG_ACHIEVEMENTS + 5)]) >= 2500){
                        alresult = 4;
                        alnext = 50;
                    };
                    if (int(SG[(this.SG_ACHIEVEMENTS + 5)]) >= 5000){
                        alresult = 5;
                        alnext = 100;
                    };
                    if (int(SG[(this.SG_ACHIEVEMENTS + 5)]) >= 10000){
                        alresult = 6;
                        alnext = 250;
                    };
                    if (int(SG[(this.SG_ACHIEVEMENTS + 5)]) >= 25000){
                        alresult = 7;
                        alnext = 500;
                    };
                    if (int(SG[(this.SG_ACHIEVEMENTS + 5)]) >= 50000){
                        alresult = 8;
                        alnext = 1000;
                    };
                    if (int(SG[(this.SG_ACHIEVEMENTS + 5)]) >= 100000){
                        alresult = 9;
                        alnext = 2500;
                    };
                    if (int(SG[(this.SG_ACHIEVEMENTS + 5)]) >= 250000){
                        alresult = 10;
                        alnext = 5000;
                    };
                    if (int(SG[(this.SG_ACHIEVEMENTS + 5)]) >= 500000){
                        alresult = 11;
                        alnext = 10000;
                    };
                    if (int(SG[(this.SG_ACHIEVEMENTS + 5)]) >= 1000000){
                        alresult = 12;
                        alnext = 0;
                    };
                    break;
                case 6:
                    alnext = 1000;
                    if (int(SG[(this.SG_ACHIEVEMENTS + 6)]) >= 1000){
                        alresult = 1;
                        alnext = 1500;
                    };
                    if (int(SG[(this.SG_ACHIEVEMENTS + 6)]) >= 1500){
                        alresult = 2;
                        alnext = 2500;
                    };
                    if (int(SG[(this.SG_ACHIEVEMENTS + 6)]) >= 2500){
                        alresult = 3;
                        alnext = 5000;
                    };
                    if (int(SG[(this.SG_ACHIEVEMENTS + 6)]) >= 5000){
                        alresult = 4;
                        alnext = 10000;
                    };
                    if (int(SG[(this.SG_ACHIEVEMENTS + 6)]) >= 10000){
                        alresult = 5;
                        alnext = 15000;
                    };
                    if (int(SG[(this.SG_ACHIEVEMENTS + 6)]) >= 15000){
                        alresult = 6;
                        alnext = 20000;
                    };
                    if (int(SG[(this.SG_ACHIEVEMENTS + 6)]) >= 20000){
                        alresult = 7;
                        alnext = 25000;
                    };
                    if (int(SG[(this.SG_ACHIEVEMENTS + 6)]) >= 25000){
                        alresult = 8;
                        alnext = 30000;
                    };
                    if (int(SG[(this.SG_ACHIEVEMENTS + 6)]) >= 30000){
                        alresult = 9;
                        alnext = 35000;
                    };
                    if (int(SG[(this.SG_ACHIEVEMENTS + 6)]) >= 35000){
                        alresult = 10;
                        alnext = 40000;
                    };
                    if (int(SG[(this.SG_ACHIEVEMENTS + 6)]) >= 40000){
                        alresult = 11;
                        alnext = 50000;
                    };
                    if (int(SG[(this.SG_ACHIEVEMENTS + 6)]) >= 50000){
                        alresult = 12;
                        alnext = 0;
                    };
                    break;
                case 7:
                    alresult = int(SG[(this.SG_ACHIEVEMENTS + 7)]);
                    alnext = (alresult + 1);
                    if (alresult >= 12){
                        alresult = 12;
                        alnext = 0;
                    };
            };
            if (almode == 1){
                if (alresult >= 10){
                    return (4);
                };
                if (alresult >= 7){
                    return (3);
                };
                if (alresult >= 4){
                    return (2);
                };
                if (alresult >= 1){
                    return (1);
                };
                return (0);
            };
            if (almode == 2){
                return (alnext);
            };
            if (almode == 3){
                return (alresult);
            };
            if (almode == 4){
                if (achIndex == 1){
                    return ((((int(SG[(this.SG_ACHIEVEMENTS + achIndex)]) + (((int(SG[this.SG_NEW_DUNGEONS]) >= 2)) ? (int(SG[this.SG_NEW_DUNGEONS]) - 2) : 0)) + (((int(SG[(this.SG_NEW_DUNGEONS + 1)]) >= 2)) ? (int(SG[(this.SG_NEW_DUNGEONS + 1)]) - 2) : 0)) + (((int(SG[this.SG_DUNGEON_13]) >= 122)) ? (int(SG[this.SG_DUNGEON_13]) - 122) : 0)));
                };
                return ((int(SG[(this.SG_ACHIEVEMENTS + achIndex)]) / (((achIndex == 5)) ? 100 : 1)));
            };
            return (alresult);
        }
        public function SingPlur(inpText:String, amount:int, sep:String="*"):String{
            var tmpArray:Array;
            tmpArray = inpText.split(sep);
            if (tmpArray.length == 4){
                return (((tmpArray[0] + tmpArray[(((amount == 1)) ? 1 : 2)]) + tmpArray[3]));
            };
            if (tmpArray.length == 5){
                return (((tmpArray[0] + tmpArray[(((amount == 1)) ? 1 : (((amount == 2)) ? 2 : 3))]) + tmpArray[4]));
            };
            if (tmpArray.length == 6){
                return (((tmpArray[0] + tmpArray[(((amount == 1)) ? 1 : (((amount == 2)) ? 2 : (((amount <= 10)) ? 3 : 4)))]) + tmpArray[4]));
            };
            return (tmpArray.join(""));
        }
        public function AnimateAch(actorID:int, y_level:int=635, AchAniPow:Number=-10){
            var AchAniTimer:* = null;
            var actorID:* = actorID;
            var y_level:Number = y_level;
            var AchAniPow:int = AchAniPow;
            var AchAniEvent:* = function (evt:Event){
                var evt:* = evt;
                var _local3 = actor[actorID];
                with (_local3) {
                    y = (y + AchAniPow);
                    AchAniPow = (AchAniPow + 2);
                    if (y >= y_level){
                        y = y_level;
                        AchAniPow = (AchAniPow * -0.5);
                        if (Math.abs(AchAniPow) <= 3){
                            y = y_level;
                            AchAniTimer.removeEventListener(TimerEvent.TIMER, AchAniEvent);
                            AchAniTimer.stop();
                            return;
                        };
                    };
                };
            };
            AchAniTimer = new Timer(50);
            var AchAniStep:* = 0;
            var _local5 = AchAniTimer;
            with (_local5) {
                addEventListener(TimerEvent.TIMER, AchAniEvent);
                start();
            };
        }
        public function DoAchievements(SG:Array):Boolean{
            var i:int;
            var achPop:Array;
            var achAusfM:String;
            var achAusfF:String;
            var achAusf:int;
            var achCurrentGrade:String;
            var OneUp:Boolean;
            this.Remove(this.BNC_CHAR_ACH);
            achAusfM = "";
            achAusfF = "";
            achAusf = 0;
            achCurrentGrade = "";
            OneUp = false;
            i = 0;
            while (i < ((this.buffedMode) ? 7 : 8)) {
                achAusf = this.achLevel(SG, (i % 8), 1);
                this.Add(((this.CNT_CHAR_ACH + i) + (achAusf * 8)));
                if (this.oldAch[(i % 8)] < 0){
                    this.oldAch[(i % 8)] = -(this.oldAch[(i % 8)]);
                    this.AnimateAch(((this.CNT_CHAR_ACH + i) + (achAusf * 8)));
                    OneUp = true;
                };
                switch (achAusf){
                    case 0:
                        achAusfM = "";
                        achAusfF = "";
                        achCurrentGrade = this.txt[this.TXT_ACH_5];
                        break;
                    default:
                        achAusfM = (this.txt[((this.TXT_ACH_5 + (achAusf * 2)) - 1)] + " ");
                        achAusfF = (this.txt[(this.TXT_ACH_5 + (achAusf * 2))] + " ");
                        achCurrentGrade = this.txt[(this.TXT_ACH_2 + (i % 8))].split("%1").join(String(this.achLevel(SG, (i % 8), 0))).split("%2").join(String(this.achLevel(SG, (i % 8), 4)));
                        if (i == 6){
                            achCurrentGrade = this.txt[this.TXT_NEW_HONOR_ACH].split("%1").join(String(this.achLevel(SG, (i % 8), 0))).split("%2").join(String(this.achLevel(SG, (i % 8), 4)));
                        };
                };
                achPop = new Array();
                if (this.txt[(this.TXT_ACH_4 + 4)]){
                    achPop[achPop.length] = this.txt[(this.TXT_ACH_1 + (i % 8))].split("%1").join(achAusfM).split("%2").join(achAusfF).split("%3").join("");
                } else {
                    achPop[achPop.length] = this.txt[(this.TXT_ACH_1 + (i % 8))].split("%1").join(achAusfM).split("%2").join(achAusfF).split("%3").join(this.txt[(this.TXT_ACH_4 + 3)].split("%1").join(this.FriendLink));
                };
                achPop[achPop.length] = this.SingPlur(achCurrentGrade, this.achLevel(SG, (i % 8), 4));
                if (i == 1){
                    if (SG[this.SG_PLAYER_ID] == this.Savegame[this.SG_PLAYER_ID]){
                        if (this.towerLevel > 0){
                            achPop[achPop.length] = this.SingPlur(this.txt[(this.TXT_ACH_2 + 8)].split("%1").join(String(this.towerLevel)), this.towerLevel);
                        };
                    } else {
                        if (this.playerTowerLevel > 0){
                            achPop[achPop.length] = this.SingPlur(this.txt[(this.TXT_ACH_2 + 8)].split("%1").join(String(this.playerTowerLevel)), this.playerTowerLevel);
                        };
                    };
                };
                if (this.achLevel(SG, (i % 8), 2) > 0){
                    if (i == 6){
                        achPop[achPop.length] = this.SingPlur(this.txt[this.TXT_NEW_HONOR_ACH2].split("%1").join(String(this.achLevel(SG, (i % 8), 2))).split("%2").join(this.txt[(this.TXT_ACH_4 + (((achAusf == 0)) ? 1 : 2))]), this.achLevel(SG, (i % 8), 2));
                    } else {
                        achPop[achPop.length] = this.SingPlur(this.txt[(this.TXT_ACH_3 + (i % 8))].split("%1").join(String(this.achLevel(SG, (i % 8), 2))).split("%2").join(this.txt[(this.TXT_ACH_4 + (((achAusf == 0)) ? 1 : 2))]), this.achLevel(SG, (i % 8), 2));
                    };
                };
                if (this.achLevel(SG, (i % 8), 3) > 0){
                    achPop[achPop.length] = this.txt[this.TXT_ACH_4].split("%1").join(String(this.achLevel(SG, (i % 8), 3)));
                };
                this.EnablePopup(((this.CNT_CHAR_ACH + i) + (this.achLevel(SG, (i % 8), 1) * 8)), achPop);
                i++;
            };
            return (OneUp);
        }
        public function MirrorAniFn(evt:Event){
            var i:int;
            this.mirrorFadeAmount = (this.mirrorFadeAmount - 0.002);
            if (this.mirrorFadeAmount <= 0){
                this.mirrorFadeAmount = 0;
                this.mirrorAniTimer.stop();
            };
            this.mirrorAniStep = (this.mirrorAniStep + 0.1);
            i = 0;
            while (i < 13) {
                this.actor[(this.IMG_MIRROR_PIECE + i)].alpha = (0.3 + (Math.sin((this.mirrorAniStep + (((i / 13) * 2) * Math.PI))) * this.mirrorFadeAmount));
                i++;
            };
        }
        public function ShowCharacterScreen(evt:Event=undefined, NoPrices:Boolean=false):void{
            var DoShowCharacterScreen:* = null;
            var evt:* = evt;
            var NoPrices:Boolean = NoPrices;
            DoShowCharacterScreen = function (){
                var i:* = 0;
                var OneUp:* = false;
                var LevelUpTimer:* = null;
                var MountTimeTimer:* = null;
                var MountTimeEvent:* = null;
                var vanityRandom:* = NaN;
                var findIndex:* = 0;
                var LevelUpAniStep:* = 0;
                var kickIn:* = NaN;
                var LevelUpAniEvent:* = null;
                MountTimeEvent = function (evt:TimerEvent=undefined){
                    if (((!(OnStage(LBL_CHAR_MOUNT_RUNTIME))) || ((Savegame[SG_MOUNT] == 0)))){
                        MountTimeTimer.stop();
                        MountTimeTimer.removeEventListener(TimerEvent.TIMER, MountTimeEvent);
                        return;
                    };
                    if (((txt[TXT_MOUNT_FOREVER]) && ((Savegame[SG_MOUNT_DURATION] == 0x7D2B7500)))){
                        actor[LBL_CHAR_MOUNT_RUNTIME].text = txt[TXT_MOUNT_FOREVER];
                    } else {
                        if (textDir == "right"){
                            actor[LBL_CHAR_MOUNT_RUNTIME].text = ((WaitingTime(Savegame[SG_MOUNT_DURATION]) + " ") + txt[TXT_MOUNT_DURATION]);
                        } else {
                            actor[LBL_CHAR_MOUNT_RUNTIME].text = ((txt[TXT_MOUNT_DURATION] + " ") + WaitingTime(Savegame[SG_MOUNT_DURATION]));
                        };
                    };
                };
                LevelUpTimer = new Timer(20);
                ErrorMessage(" ");
                if (!OnStage(IMG_SCR_CHAR_BG)){
                    SetAlpha(BNC_CHAR_SECONDPROP, 1);
                    SetAlpha(BNC_CHAR_PREISE, 0);
                };
                RemoveAll();
                i = 0;
                while (i < 10) {
                    var _local2 = actor[(IMG_CHARIMG_BACKGROUND + i)];
                    with (_local2) {
                        x = POS_SCR_CHAR_CHARIMG_X;
                        y = POS_SCR_CHAR_CHARIMG_Y;
                        scaleX = 0.86;
                        scaleY = 0.86;
                    };
                    i = (i + 1);
                };
                i = 0;
                while (i < 5) {
                    SetCnt((CNT_SCR_CHAR_GOLD1 + i), IMG_IF_GOLD);
                    SetCnt((CNT_SCR_CHAR_SILBER1 + i), IMG_IF_SILBER);
                    i = (i + 1);
                };
                if (textDir == "right"){
                    actor[LBL_CHAR_MOUNT_NAME].text = ((txt[TXT_NOMOUNT] + " ") + txt[TXT_MOUNT]);
                } else {
                    actor[LBL_CHAR_MOUNT_NAME].text = ((txt[TXT_MOUNT] + " ") + txt[TXT_NOMOUNT]);
                };
                actor[LBL_CHAR_MOUNT_RUNTIME].text = "";
                actor[LBL_CHAR_MOUNT_DESCR].text = "";
                actor[LBL_CHAR_MOUNT_GAIN].text = "";
                if (Savegame[SG_MOUNT] > 0){
                    Add(LBL_CHAR_MOUNT_RUNTIME);
                } else {
                    Remove(LBL_CHAR_MOUNT_RUNTIME);
                };
                MountTimeTimer = new Timer(500);
                MountTimeTimer.addEventListener(TimerEvent.TIMER, MountTimeEvent);
                MountTimeTimer.start();
                i = 0;
                while (i < 8) {
                    if ((((int(Savegame[SG_MOUNT]) > 0)) && (((i + 1) == (int(Savegame[SG_MOUNT]) + (((((Savegame[SG_RACE] >= 5)) && (!(param_censored)))) ? 4 : 0)))))){
                        Show((IMG_CHAR_MOUNT_1 + i));
                        if (textDir == "right"){
                            actor[LBL_CHAR_MOUNT_NAME].text = ((txt[(TXT_STALL_MOUNTTITEL + i)] + " ") + txt[TXT_MOUNT]);
                            actor[LBL_CHAR_MOUNT_DESCR].text = txt[(TXT_STALL_MOUNTTEXT + i)];
                            actor[LBL_CHAR_MOUNT_GAIN].text = txt[(TXT_MOUNT_GAIN1 + i)].split("|")[0];
                        } else {
                            actor[LBL_CHAR_MOUNT_NAME].text = ((txt[TXT_MOUNT] + " ") + txt[(TXT_STALL_MOUNTTITEL + i)]);
                            actor[LBL_CHAR_MOUNT_DESCR].text = txt[(TXT_STALL_MOUNTTEXT + i)];
                            actor[LBL_CHAR_MOUNT_GAIN].text = txt[(TXT_MOUNT_GAIN1 + i)].split("|")[0];
                        };
                        MountTimeEvent();
                    } else {
                        Hide((IMG_CHAR_MOUNT_1 + i));
                    };
                    i = (i + 1);
                };
                if (textDir == "right"){
                    actor[LBL_SCR_CHAR_NAME].text = (((Gilde) ? (("[" + Gilde) + "] ") : "") + actor[INP_NAME].getChildAt(1).text);
                } else {
                    actor[LBL_SCR_CHAR_NAME].text = (actor[INP_NAME].getChildAt(1).text + ((Gilde) ? ((" [" + Gilde) + "]") : ""));
                };
                lastPlayer = actor[INP_NAME].getChildAt(1).text;
                if (Gilde){
                    SelectedGuild = Gilde;
                    actor[CNT_SCR_CHAR_NAME].useHandCursor = true;
                } else {
                    SelectedGuild = "";
                    actor[CNT_SCR_CHAR_NAME].useHandCursor = false;
                };
                TrimTooLong(LBL_SCR_CHAR_NAME, 260);
                i = 0;
                while (i < 3) {
                    if ((int(Savegame[SG_CLASS]) - 1) == i){
                        Show((IMG_SCR_CHAR_KLASSE_1 + i));
                    } else {
                        Hide((IMG_SCR_CHAR_KLASSE_1 + i));
                    };
                    i = (i + 1);
                };
                if (textDir == "right"){
                    actor[LBL_SCR_CHAR_GILDE].text = ((((((Savegame[SG_HONOR] + " :") + txt[TXT_HALL_LIST_COLUMN_5]) + "     ") + Savegame[SG_RANK]) + " :") + txt[TXT_HALL_LIST_COLUMN_1]);
                } else {
                    actor[LBL_SCR_CHAR_GILDE].text = ((((((txt[TXT_HALL_LIST_COLUMN_1] + ": ") + Savegame[SG_RANK]) + "     ") + txt[TXT_HALL_LIST_COLUMN_5]) + ": ") + Savegame[SG_HONOR]);
                };
                actor[LBL_SCR_CHAR_EHRE].text = "";
                _local2 = actor[INP_CHARDESC];
                with (_local2) {
                    getChildAt(0).text = ((PlayerDesc)=="") ? txt[TXT_ENTERDESC] : PlayerDesc;
                    getChildAt(0).type = TextFieldType.INPUT;
                    if (textDir == "right"){
                        getChildAt(0).wordWrap = false;
                    };
                };
                actor[CNT_SCR_CHAR_NAME].x = ((POS_SCR_CHAR_CHARIMG_X + 128) - int((actor[LBL_SCR_CHAR_NAME].textWidth / 2)));
                actor[LBL_SCR_CHAR_EHRE].x = ((actor[LBL_SCR_CHAR_GILDE].x + actor[LBL_SCR_CHAR_GILDE].textWidth) + REL_CHAR_EHRE_X);
                _local2 = actor[IMG_SCR_CHAR_EXPBAR];
                with (_local2) {
                    width = int(((Number(Savegame[SG_EXP]) / Number(Savegame[SG_EXP_FOR_NEXTLEVEL])) * 254));
                };
                _local2 = actor[LBL_SCR_CHAR_EXPLABEL];
                with (_local2) {
                    if (textDir == "right"){
                        text = ((Savegame[SG_LEVEL] + " ") + txt[TXT_HALL_LIST_COLUMN_4]);
                    } else {
                        text = ((txt[TXT_HALL_LIST_COLUMN_4] + " ") + Savegame[SG_LEVEL]);
                    };
                    x = ((POS_EXPERIENCE_BAR_X + 127) - int((textWidth / 2)));
                };
                if (textDir == "right"){
                    EnablePopup(CA_SCR_CHAR_EXPBAR, POPUP_BEGIN_LINE, (":" + txt[TXT_EXP]), (REL_POPUP_TAB + REL_POPUP_TAB_ADD), Savegame[SG_EXP], POPUP_END_LINE, POPUP_BEGIN_LINE, (":" + txt[TXT_EXPNEXTLEVEL]), (REL_POPUP_TAB + REL_POPUP_TAB_ADD), Savegame[SG_EXP_FOR_NEXTLEVEL], POPUP_END_LINE);
                } else {
                    EnablePopup(CA_SCR_CHAR_EXPBAR, POPUP_BEGIN_LINE, (txt[TXT_EXP] + ":"), (REL_POPUP_TAB + REL_POPUP_TAB_ADD), Savegame[SG_EXP], POPUP_END_LINE, POPUP_BEGIN_LINE, (txt[TXT_EXPNEXTLEVEL] + ":"), (REL_POPUP_TAB + REL_POPUP_TAB_ADD), Savegame[SG_EXP_FOR_NEXTLEVEL], POPUP_END_LINE);
                };
                DisplayInventory(undefined, NoPrices);
                vanityRandom = Math.random();
                if ((((((((uint(Savegame[SG_NEW_FLAGS]) & 32)) && ((int(so.data.vanityMode) == 0)))) || ((int(so.data.vanityMode) == 2)))) || ((((int(so.data.vanityMode) == 3)) && ((vanityRandom < 0.5)))))){
                    Add(BNC_SCREEN_CHAR_GOLDEN);
                } else {
                    Add(BNC_SCREEN_CHAR);
                };
                LoadCharacterImage();
                AddSome(CNT_SCR_CHAR_NAME, CNT_SCR_CHAR_GILDE);
                mirrorAniTimer.stop();
                i = 0;
                while (i < 13) {
                    if (MirrorPieces[i]){
                        Add((IMG_MIRROR_PIECE + i));
                        mirrorAniTimer.start();
                    };
                    i = (i + 1);
                };
                if ((((((((uint(Savegame[SG_NEW_FLAGS]) & 32)) && ((int(so.data.vanityMode) == 0)))) || ((int(so.data.vanityMode) == 2)))) || ((((int(so.data.vanityMode) == 3)) && ((vanityRandom < 0.5)))))){
                    AddSome(IMG_GOLDEN_FRAME, CNT_SCR_CHAR_NAME);
                    actor[CNT_SCR_CHAR_NAME].y = (POS_CHAR_NAME_Y + 8);
                    AddFilter(LBL_SCR_CHAR_NAME, Filter_HeavyShadow);
                } else {
                    actor[CNT_SCR_CHAR_NAME].y = POS_CHAR_NAME_Y;
                    AddFilter(LBL_SCR_CHAR_NAME, Filter_Shadow);
                };
                if (txt[(TXT_ACH_4 + 4)]){
                    if (int(Savegame[SG_EMAIL_VALID]) == 1){
                        AddSome(BTN_CHAR_INVITE);
                    };
                };
                if (txt[TXT_ALBUM]){
                    if (Number(Savegame[SG_ALBUM]) >= 10000){
                        Add(BTN_CHAR_ALBUM);
                        EnablePopup(BTN_CHAR_ALBUM, POPUP_BEGIN_LINE, txt[TXT_ITMNAME_13], POPUP_END_LINE, POPUP_BEGIN_LINE, txt[TXT_COLLECTION].split("%1").join(String((Savegame[SG_ALBUM] - 10000))).split("%2").join(String(contentMax)).split("%3").join(String((Math.round((((Savegame[SG_ALBUM] - 10000) / contentMax) * 10000)) / 100))).split("#").join(String.fromCharCode(13)), POPUP_END_LINE, POPUP_BEGIN_LINE, txt[(TXT_COLLECTION + 7)], POPUP_END_LINE);
                        if (AlbumEffect){
                            AnimateAch(BTN_CHAR_ALBUM, POS_CHAR_PLAYERBTN_Y);
                            AlbumEffect = false;
                        };
                    };
                };
                OneUp = DoAchievements(Savegame);
                if (LevelUp){
                    LevelUpAniEvent = function (evt:Event){
                        var evt:* = evt;
                        LevelUpAniStep++;
                        if (LevelUpAniStep > 125){
                            LevelUpTimer.stop();
                            LevelUpTimer.removeEventListener(TimerEvent.TIMER, LevelUpAniEvent);
                            var _local3 = actor[LBL_SCR_CHAR_EXPLABEL];
                            with (_local3) {
                                scaleX = 1;
                                scaleY = 1;
                                x = ((POS_EXPERIENCE_BAR_X + 127) - int((textWidth / 2)));
                                y = (POS_EXPERIENCE_BAR_Y + 2);
                            };
                            return;
                        };
                        if (LevelUpAniStep > 115){
                            if (kickIn > 0){
                                kickIn = (kickIn - 0.1);
                            };
                        } else {
                            if (kickIn < 1){
                                kickIn = (kickIn + 0.1);
                            };
                        };
                        _local3 = actor[LBL_SCR_CHAR_EXPLABEL];
                        with (_local3) {
                            scaleX = (((Math.cos((((LevelUpAniStep / 50) * 2) * Math.PI)) + 1) * kickIn) + 1);
                            scaleY = (((Math.sin((((LevelUpAniStep / 50) * 2) * Math.PI)) + 1) * kickIn) + 1);
                            x = ((POS_EXPERIENCE_BAR_X + 128) - int((width / 2)));
                            y = (((POS_EXPERIENCE_BAR_Y + 17) - int((height / 2))) - (((Math.sin((((LevelUpAniStep / 50) * 2) * Math.PI)) + 1) * kickIn) * 20));
                        };
                    };
                    LevelUpAniStep = 25;
                    kickIn = 0;
                    Add(LBL_SCR_CHAR_EXPLABEL);
                    OneUp = true;
                    LevelUp = false;
                    _local2 = LevelUpTimer;
                    with (_local2) {
                        addEventListener(TimerEvent.TIMER, LevelUpAniEvent);
                        start();
                    };
                };
                if (OneUp){
                    Play(SND_JINGLE);
                };
                if (arrowHallMode){
                    EnablePopup(BTN_PREV_PLAYER, txt[TXT_EHRENHALLE]);
                    EnablePopup(BTN_NEXT_PLAYER, txt[TXT_EHRENHALLE]);
                    indexInHall = -1;
                    findIndex = 0;
                    while (findIndex < lastHallMembers.length) {
                        if (lastHallMembers[findIndex].toLowerCase() == actor[INP_NAME].getChildAt(1).text.toLowerCase()){
                            indexInHall = (findIndex - 1);
                            break;
                        };
                        findIndex = (findIndex + 1);
                    };
                    if (indexInHall < 0){
                        indexInHall = -1;
                    };
                    if (indexInHall != -1){
                        if (indexInHall > 0){
                            Add(BTN_PREV_PLAYER);
                        };
                        if (indexInHall < 14){
                            Add(BTN_NEXT_PLAYER);
                        };
                    };
                } else {
                    EnablePopup(BTN_PREV_PLAYER, txt[TXT_GILDEN]);
                    EnablePopup(BTN_NEXT_PLAYER, txt[TXT_GILDEN]);
                    indexInGuild = -1;
                    findIndex = 0;
                    while (findIndex < lastGuildMembers.length) {
                        if (lastGuildMembers[findIndex].toLowerCase() == actor[INP_NAME].getChildAt(1).text.toLowerCase()){
                            indexInGuild = (findIndex - 1);
                            break;
                        };
                        findIndex = (findIndex + 1);
                    };
                    if (indexInGuild < 0){
                        indexInGuild = -1;
                    };
                    if (indexInGuild != -1){
                        if (indexInGuild > 0){
                            Add(BTN_PREV_PLAYER);
                        };
                        if (indexInGuild < (int(lastGuildData[3]) - 1)){
                            Add(BTN_NEXT_PLAYER);
                        };
                    };
                };
            };
            if ((((((uint(this.Savegame[this.SG_NEW_FLAGS]) & 32)) && ((int(this.so.data.vanityMode) == 0)))) || ((int(this.so.data.vanityMode) > 1)))){
                this.Load(this.IMG_SCR_CHAR_BG_GOLDEN, this.IMG_GOLDEN_FRAME);
            };
            this.Load(this.IMG_SCR_CHAR_BG, this.IMG_SCR_CHAR_EXPBAR, this.IMG_SCR_CHAR_BG_RIGHT);
            this.WhenLoaded(DoShowCharacterScreen);
        }
        public function ShowPlayerScreen(PlayerSG:Array, PlayerName:String, PlayerGilde:String, PlayerComment:String):void{
            var i:* = 0;
            var binStr:* = null;
            var PlayerMirrorPieces:* = null;
            var DoShowPlayerScreen:* = null;
            var PlayerSG:* = PlayerSG;
            var PlayerName:* = PlayerName;
            var PlayerGilde:* = PlayerGilde;
            var PlayerComment:* = PlayerComment;
            DoShowPlayerScreen = function (){
                var i:* = 0;
                var vanityRandom:* = NaN;
                var PvPDelayCheck:* = null;
                var findIndex:* = 0;
                PvPDelayCheck = function (evt:TimerEvent=undefined){
                    var evt:* = evt;
                    if (!OnStage(BTN_CHAR_ATTACK)){
                        PvPDelayTimer.removeEventListener(TimerEvent.TIMER, PvPDelayCheck);
                        PvPDelayTimer.stop();
                        return;
                    };
                    if (WaitingFor(Savegame[SG_PVP_REROLL_TIME])){
                        SetTitleBar(WaitingTime(Savegame[SG_PVP_REROLL_TIME]));
                        if (textDir == "right"){
                            SetBtnText(BTN_CHAR_ATTACK, ("(~P1) " + txt[TXT_ATTACK]));
                        } else {
                            SetBtnText(BTN_CHAR_ATTACK, (txt[TXT_ATTACK] + " (1~P)"));
                        };
                        Show(LBL_CHAR_DELAY);
                        var _local3 = actor[LBL_CHAR_DELAY];
                        with (_local3) {
                            text = WaitingTime(Savegame[SG_PVP_REROLL_TIME]);
                            x = (((280 + 500) + REL_CHAR_DELAY_X) - (textWidth / 2));
                        };
                    } else {
                        SetTitleBar();
                        SetBtnText(BTN_CHAR_ATTACK, txt[TXT_ATTACK]);
                        Hide(LBL_CHAR_DELAY);
                        PvPDelayTimer.removeEventListener(TimerEvent.TIMER, PvPDelayCheck);
                        PvPDelayTimer.stop();
                    };
                };
                RemoveAll();
                dragDropProhibit = true;
                i = 0;
                while (i < 15) {
                    actor[(CNT_CHAR_SLOT_1 + i)].mouseEnabled = false;
                    i = (i + 1);
                };
                i = 0;
                while (i < 10) {
                    var _local2 = actor[(IMG_CHARIMG_BACKGROUND + i)];
                    with (_local2) {
                        x = POS_SCR_CHAR_CHARIMG_X;
                        y = POS_SCR_CHAR_CHARIMG_Y;
                        scaleX = 0.86;
                        scaleY = 0.86;
                    };
                    i = (i + 1);
                };
                i = 0;
                while (i < 5) {
                    SetCnt((CNT_SCR_CHAR_GOLD1 + i), IMG_IF_GOLD);
                    SetCnt((CNT_SCR_CHAR_SILBER1 + i), IMG_IF_SILBER);
                    i = (i + 1);
                };
                if (textDir == "right"){
                    actor[LBL_CHAR_MOUNT_NAME].text = ((txt[TXT_NOMOUNT] + " ") + txt[TXT_MOUNT]);
                } else {
                    actor[LBL_CHAR_MOUNT_NAME].text = ((txt[TXT_MOUNT] + " ") + txt[TXT_NOMOUNT]);
                };
                actor[LBL_CHAR_MOUNT_RUNTIME].text = "";
                actor[LBL_CHAR_MOUNT_DESCR].text = "";
                actor[LBL_CHAR_MOUNT_GAIN].text = "";
                i = 0;
                while (i < 8) {
                    if ((((int(PlayerSG[SG_MOUNT]) > 0)) && (((i + 1) == (int(PlayerSG[SG_MOUNT]) + (((((PlayerSG[SG_RACE] >= 5)) && (!(param_censored)))) ? 4 : 0)))))){
                        Show((IMG_CHAR_MOUNT_1 + i));
                        if (textDir == "right"){
                            actor[LBL_CHAR_MOUNT_NAME].text = ((txt[(TXT_STALL_MOUNTTITEL + i)] + " ") + txt[TXT_MOUNT]);
                            actor[LBL_CHAR_MOUNT_DESCR].text = txt[(TXT_STALL_MOUNTTEXT + i)];
                            actor[LBL_CHAR_MOUNT_GAIN].text = txt[(TXT_MOUNT_GAIN1 + i)].split("|")[0];
                        } else {
                            actor[LBL_CHAR_MOUNT_NAME].text = ((txt[TXT_MOUNT] + " ") + txt[(TXT_STALL_MOUNTTITEL + i)]);
                            actor[LBL_CHAR_MOUNT_DESCR].text = txt[(TXT_STALL_MOUNTTEXT + i)];
                            actor[LBL_CHAR_MOUNT_GAIN].text = txt[(TXT_MOUNT_GAIN1 + i)].split("|")[0];
                        };
                    } else {
                        Hide((IMG_CHAR_MOUNT_1 + i));
                    };
                    i = (i + 1);
                };
                if (textDir == "right"){
                    actor[LBL_SCR_CHAR_NAME].text = (((PlayerGilde == "")) ? "" : ((("[" + PlayerGilde) + "] ") + PlayerName));
                } else {
                    actor[LBL_SCR_CHAR_NAME].text = (PlayerName + (((PlayerGilde == "")) ? "" : ((" [" + PlayerGilde) + "]")));
                };
                TrimTooLong(LBL_SCR_CHAR_NAME, 260);
                lastPlayer = PlayerName;
                if (PlayerGilde){
                    SelectedGuild = PlayerGilde;
                    actor[CNT_SCR_CHAR_NAME].useHandCursor = true;
                } else {
                    SelectedGuild = "";
                    actor[CNT_SCR_CHAR_NAME].useHandCursor = false;
                };
                i = 0;
                while (i < 3) {
                    if ((int(PlayerSG[SG_CLASS]) - 1) == i){
                        Show((IMG_SCR_CHAR_KLASSE_1 + i));
                    } else {
                        Hide((IMG_SCR_CHAR_KLASSE_1 + i));
                    };
                    i = (i + 1);
                };
                if (textDir == "right"){
                    actor[LBL_SCR_CHAR_GILDE].text = ((((((PlayerSG[SG_HONOR] + " :") + txt[TXT_HALL_LIST_COLUMN_5]) + "     ") + PlayerSG[SG_RANK]) + " :") + txt[TXT_HALL_LIST_COLUMN_1]);
                } else {
                    actor[LBL_SCR_CHAR_GILDE].text = ((((((txt[TXT_HALL_LIST_COLUMN_1] + ": ") + PlayerSG[SG_RANK]) + "     ") + txt[TXT_HALL_LIST_COLUMN_5]) + ": ") + PlayerSG[SG_HONOR]);
                };
                actor[LBL_SCR_CHAR_EHRE].text = "";
                _local2 = actor[INP_CHARDESC];
                with (_local2) {
                    getChildAt(0).text = ((PlayerComment)=="") ? txt[TXT_NODESC] : PlayerComment;
                    getChildAt(0).type = TextFieldType.DYNAMIC;
                };
                actor[CNT_SCR_CHAR_NAME].x = ((POS_SCR_CHAR_CHARIMG_X + 128) - int((actor[LBL_SCR_CHAR_NAME].textWidth / 2)));
                actor[LBL_SCR_CHAR_EHRE].x = ((actor[LBL_SCR_CHAR_GILDE].x + actor[LBL_SCR_CHAR_GILDE].textWidth) + REL_CHAR_EHRE_X);
                _local2 = actor[IMG_SCR_CHAR_EXPBAR];
                with (_local2) {
                    width = int(((Number(PlayerSG[SG_EXP]) / Number(PlayerSG[SG_EXP_FOR_NEXTLEVEL])) * 254));
                };
                _local2 = actor[LBL_SCR_CHAR_EXPLABEL];
                with (_local2) {
                    if (textDir == "right"){
                        text = ((PlayerSG[SG_LEVEL] + " ") + txt[TXT_HALL_LIST_COLUMN_4]);
                    } else {
                        text = ((txt[TXT_HALL_LIST_COLUMN_4] + " ") + PlayerSG[SG_LEVEL]);
                    };
                    x = ((POS_EXPERIENCE_BAR_X + 127) - int((textWidth / 2)));
                };
                EnablePopup(CA_SCR_CHAR_EXPBAR);
                SetAlpha(BNC_CHAR_SECONDPROP, 1);
                SetAlpha(BNC_CHAR_PREISE, 0);
                DisplayInventory(PlayerSG);
                vanityRandom = Math.random();
                if ((((((((uint(PlayerSG[SG_NEW_FLAGS]) & 32)) && ((int(so.data.vanityMode) == 0)))) || ((int(so.data.vanityMode) == 2)))) || ((((int(so.data.vanityMode) == 3)) && ((vanityRandom < 0.5)))))){
                    Add(BNC_SCREEN_CHAR_GOLDEN);
                } else {
                    Add(BNC_SCREEN_CHAR);
                };
                if (((!((PlayerGilde == Gilde))) && (!((Gilde == ""))))){
                    Add(BTN_PLAYER_GUILD_INVITE);
                };
                if (txt[TXT_ALBUM]){
                    if (Number(PlayerSG[SG_ALBUM]) >= 10000){
                        Add(IMG_CHAR_ALBUM);
                        EnablePopup(IMG_CHAR_ALBUM, POPUP_BEGIN_LINE, txt[TXT_ITMNAME_13], POPUP_END_LINE, POPUP_BEGIN_LINE, txt[TXT_COLLECTION].split("%1").join(String((PlayerSG[SG_ALBUM] - 10000))).split("%2").join(String(contentMax)).split("%3").join(String((Math.round((((PlayerSG[SG_ALBUM] - 10000) / contentMax) * 10000)) / 100))).split("#").join(String.fromCharCode(13)), POPUP_END_LINE);
                    };
                };
                if ((((PlayerGilde == Gilde)) && (!((Gilde == ""))))){
                    AddSome(BTN_CHAR_MESSAGE, BTN_CHAR_GILDE);
                } else {
                    AddSome(BTN_CHAR_MESSAGE);
                    if ((((Savegame[SG_ACTION_STATUS] == 0)) || ((((Savegame[SG_ACTION_STATUS] >= 1)) && (hasMirror))))){
                        if (canRob){
                            AddSome(BTN_CHAR_ATTACK, LBL_CHAR_DELAY);
                        } else {
                            AddSome(BTN_CHAR_ATTACK, LBL_CHAR_DELAY);
                        };
                    };
                };
                DoAchievements(PlayerSG);
                PvPDelayTimer.addEventListener(TimerEvent.TIMER, PvPDelayCheck);
                PvPDelayTimer.start();
                PvPDelayCheck();
                i = 0;
                while (i < 5) {
                    Remove((BTN_SCR_CHAR_STEIGERN1 + i));
                    i = (i + 1);
                };
                Remove(LBL_CHAR_MOUNT_RUNTIME);
                LoadCharacterImage(IMG_CHARIMG_BACKGROUND, false, PlayerSG[SG_RACE], (int(PlayerSG[SG_GENDER]) == 1), PlayerSG[SG_CLASS], PlayerSG[SG_FACE_1], PlayerSG[SG_FACE_5], PlayerSG[SG_FACE_6], PlayerSG[SG_FACE_4], PlayerSG[SG_FACE_3], PlayerSG[SG_FACE_7], PlayerSG[SG_FACE_2], PlayerSG[SG_FACE_8], PlayerSG[SG_FACE_9]);
                AddSome(CNT_SCR_CHAR_NAME, CNT_SCR_CHAR_GILDE);
                if ((((((((uint(PlayerSG[SG_NEW_FLAGS]) & 32)) && ((int(so.data.vanityMode) == 0)))) || ((int(so.data.vanityMode) == 2)))) || ((((int(so.data.vanityMode) == 3)) && ((vanityRandom < 0.5)))))){
                    AddSome(IMG_GOLDEN_FRAME, CNT_SCR_CHAR_NAME);
                    actor[CNT_SCR_CHAR_NAME].y = (POS_CHAR_NAME_Y + 8);
                    AddFilter(LBL_SCR_CHAR_NAME, Filter_HeavyShadow);
                } else {
                    actor[CNT_SCR_CHAR_NAME].y = POS_CHAR_NAME_Y;
                    AddFilter(LBL_SCR_CHAR_NAME, Filter_Shadow);
                };
                if (arrowHallMode){
                    EnablePopup(BTN_PREV_PLAYER, txt[TXT_EHRENHALLE]);
                    EnablePopup(BTN_NEXT_PLAYER, txt[TXT_EHRENHALLE]);
                    indexInHall = -1;
                    findIndex = 0;
                    while (findIndex < lastHallMembers.length) {
                        if (lastHallMembers[findIndex].toLowerCase() == PlayerName.toLowerCase()){
                            indexInHall = (findIndex - 1);
                            break;
                        };
                        findIndex = (findIndex + 1);
                    };
                    if (indexInHall < 0){
                        indexInHall = -1;
                    };
                    if (indexInHall != -1){
                        if (indexInHall > 0){
                            Add(BTN_PREV_PLAYER);
                        };
                        if (indexInHall < 14){
                            Add(BTN_NEXT_PLAYER);
                        };
                    };
                } else {
                    EnablePopup(BTN_PREV_PLAYER, txt[TXT_GILDEN]);
                    EnablePopup(BTN_NEXT_PLAYER, txt[TXT_GILDEN]);
                    indexInGuild = -1;
                    findIndex = 0;
                    while (findIndex < lastGuildMembers.length) {
                        if (lastGuildMembers[findIndex].toLowerCase() == PlayerName.toLowerCase()){
                            indexInGuild = (findIndex - 1);
                            break;
                        };
                        findIndex = (findIndex + 1);
                    };
                    if (indexInGuild < 0){
                        indexInGuild = -1;
                    };
                    if (indexInGuild != -1){
                        if (indexInGuild > 0){
                            Add(BTN_PREV_PLAYER);
                        };
                        if (indexInGuild < (int(lastGuildData[3]) - 1)){
                            Add(BTN_NEXT_PLAYER);
                        };
                    };
                };
            };
            this.playerTowerLevel = int((PlayerSG[this.SG_MOUNT] / 65536));
            PlayerSG[this.SG_MOUNT] = (PlayerSG[this.SG_MOUNT] - (this.playerTowerLevel * 65536));
            binStr = Number(PlayerSG[this.SG_GENDER]).toString(2);
            while (binStr.length < 32) {
                binStr = ("0" + binStr);
            };
            PlayerMirrorPieces = new Array();
            i = 0;
            while (i < 13) {
                PlayerMirrorPieces[i] = (binStr.substr((i + 1), 1) == "1");
                i = (i + 1);
            };
            var playerHasMirror:* = (binStr.substr(23, 1) == "1");
            if (binStr.substr(31) == "1"){
                PlayerSG[this.SG_GENDER] = 1;
            } else {
                PlayerSG[this.SG_GENDER] = 2;
            };
            i = 0;
            while (i < this.SG_BACKPACK_SIZE) {
                this.ExpandItemStructure(PlayerSG, (this.SG_BACKPACK_OFFS + (i * this.SG_ITM_SIZE)));
                i = (i + 1);
            };
            i = 0;
            while (i < this.SG_INVENTORY_SIZE) {
                this.ExpandItemStructure(PlayerSG, (this.SG_INVENTORY_OFFS + (i * this.SG_ITM_SIZE)));
                i = (i + 1);
            };
            i = 0;
            while (i < 6) {
                this.ExpandItemStructure(PlayerSG, (this.SG_SHAKES_ITEM1 + (i * this.SG_ITM_SIZE)));
                this.ExpandItemStructure(PlayerSG, (this.SG_FIDGET_ITEM1 + (i * this.SG_ITM_SIZE)));
                i = (i + 1);
            };
            i = 0;
            while (i < 3) {
                this.ExpandItemStructure(PlayerSG, (this.SG_QUEST_OFFER_REWARD_ITM1 + (i * this.SG_ITM_SIZE)));
                i = (i + 1);
            };
            if ((((((uint(PlayerSG[this.SG_NEW_FLAGS]) & 32)) && ((int(this.so.data.vanityMode) == 0)))) || ((int(this.so.data.vanityMode) > 1)))){
                this.Load(this.IMG_SCR_CHAR_BG_GOLDEN, this.IMG_GOLDEN_FRAME);
            };
            this.Load(this.IMG_SCR_CHAR_BG, this.IMG_SCR_CHAR_EXPBAR, this.IMG_SCR_CHAR_BG_RIGHT);
            this.WhenLoaded(DoShowPlayerScreen);
        }
        public function TrimTooLong(actorIDObj:Object, maxWidth:int):String{
            var tmpStr:* = null;
            var remainLength:* = 0;
            var actorID:* = 0;
            var Shortened:* = false;
            var actorIDObj:* = actorIDObj;
            var maxWidth:* = maxWidth;
            Shortened = false;
            var _local4 = (((actorIDObj is int)) ? this.actor[actorIDObj] : actorIDObj);
            with (_local4) {
                tmpStr = text;
                remainLength = tmpStr.length;
                while (textWidth > maxWidth) {
                    remainLength--;
                    Shortened = true;
                    if (textDir == "right"){
                        text = ("..." + tmpStr.substr(-(remainLength), remainLength));
                        if (tmpStr.indexOf("]") >= 0){
                            text = ("[" + text);
                        };
                    } else {
                        text = (tmpStr.substr(0, remainLength) + "...");
                        if (tmpStr.indexOf("[") >= 0){
                            text = (text + "]");
                        };
                    };
                };
            };
            if ((actorIDObj is int)){
                if (Shortened){
                    this.EnablePopup(int(actorIDObj), tmpStr);
                } else {
                    this.EnablePopup(int(actorIDObj));
                };
            };
            return (((Shortened) ? tmpStr : ""));
        }
        public function RequestLogout(evt:Event=undefined, keepData:Boolean=false):void{
            this.RemoveAll();
            this.nextPxl = 0;
            this.actor[this.LBL_ERROR].text = "";
            if (!keepData){
                this.so.data.userName = "";
                this.so.data.password = "";
                this.actor[this.INP_NAME].getChildAt(1).text = "";
                this.actor[this.INP_LOGIN_PASSWORD].getChildAt(1).text = "";
                this.so.flush();
                this.actor[this.INP_EMAIL].getChildAt(1).text = "";
                this.actor[this.INP_PASSWORD].getChildAt(1).text = "";
            };
            this.SendAction(this.ACT_LOGOUT);
            this.Savegame = new Array();
            this.CharVolk = 0;
            this.Gilde = "";
            this.myOwnRank = -1;
            this.myOwnAttackTarget = -1;
            this.myOwnGuildMoney = -1;
            this.guildAttackTime = 0;
            this.guildDefenceTime = 0;
            this.guildAttacked = "";
            this.guildAttacking = "";
            this.PulseTaverne = false;
            this.PulseArbeiten = false;
            this.PulseGilde = false;
            this.PulseGildeOnHistory = false;
            this.PulsePost = false;
            this.PulseDealer = false;
            this.guildBlinkReady = false;
            this.sessionID = "";
            this.fightFlushMode = false;
            if (!keepData){
                this.ShowLoginScreen();
            };
        }
        public function RequestCancelArbeiten(evt:Event=undefined):void{
            this.SendAction(this.ACT_ARBEIT_CANCEL);
        }
        public function RequestArbeiten(evt:Event=undefined):void{
            this.SendAction(this.ACT_ARBEIT, this.GetSliderValue(this.SLDR_ARBEITEN));
        }
        public function RequestCreateCharacter(evt:Event=undefined):void{
        }
        public function RequestChangeFace(evt:Event=undefined):void{
            if ((((((((((((((((((((((((this.CharVolk == this.revertCharVolk)) && ((this.CharMann == this.revertCharMann)))) && ((this.CharColor == this.revertCharColor)))) && ((this.CharMouth == this.revertCharMouth)))) && ((this.CharBeard == this.revertCharBeard)))) && ((this.CharNose == this.revertCharNose)))) && ((this.CharEyes == this.revertCharEyes)))) && ((this.CharBrows == this.revertCharBrows)))) && ((this.CharEars == this.revertCharEars)))) && ((this.CharHair == this.revertCharHair)))) && ((this.CharSpecial == this.revertCharSpecial)))) && ((this.CharSpecial2 == this.revertCharSpecial2)))){
                this.SendAction(this.ACT_SCREEN_OPTIONEN);
            } else {
                this.SendAction(this.ACT_CHANGE_FACE, this.actor[this.INP_NAME].getChildAt(1).text, this.actor[this.INP_LOGIN_PASSWORD].getChildAt(1).text, this.CharVolk, ((this.CharMann) ? 1 : 2), (((((((((((((((((this.CharMouth + "/") + this.CharHair) + "/") + this.CharBrows) + "/") + this.CharEyes) + "/") + this.CharBeard) + "/") + this.CharNose) + "/") + this.CharEars) + "/") + this.CharSpecial) + "/") + this.CharSpecial2) + "/"));
            };
        }
        public function RequestCharScreen(evt:Event=undefined):void{
            this.arrowHallMode = false;
            this.SendAction(this.ACT_SCREEN_CHAR);
        }
        public function RequestCityScreen(evt:Event=undefined):void{
        }
        public function CheckWrongPage(correctAct:int){
            if (correctAct != this.lastAct){
                if (correctAct == this.ACT_SCREEN_TAVERNE){
                    switch (this.lastAct){
                        case this.ACT_SCREEN_ARENA:
                            if (!this.hasMirror){
                                this.ErrorMessage(this.txt[this.TXT_ERROR_TAVERNE_ARENA]);
                            };
                            break;
                        case this.ACT_SCREEN_ARBEITEN:
                            this.ErrorMessage(this.txt[this.TXT_ERROR_TAVERNE_ARBEITEN]);
                            break;
                        case this.ACT_SCREEN_WELTKARTE:
                            if (!this.hasMirror){
                                this.ErrorMessage(this.txt[this.TXT_ERROR_TAVERNE_MAINQUEST]);
                            };
                            break;
                    };
                } else {
                    if (correctAct == this.ACT_SCREEN_ARBEITEN){
                        switch (this.lastAct){
                            case this.ACT_SCREEN_ARENA:
                                this.ErrorMessage(this.txt[this.TXT_ERROR_ARBEITEN_ARENA]);
                                break;
                            case this.ACT_SCREEN_TAVERNE:
                                this.ErrorMessage(this.txt[this.TXT_ERROR_ARBEITEN_TAVERNE]);
                                break;
                            case this.ACT_SCREEN_WELTKARTE:
                                this.ErrorMessage(this.txt[this.TXT_ERROR_ARBEITEN_MAINQUEST]);
                                break;
                        };
                    };
                };
            };
        }
        public function ShowMainQuestsScreen(NextEnemies:Array){
            var i:* = 0;
            var countDone:* = 0;
            var Background:* = 0;
            var DoShowMainQuestsScreen:* = null;
            var NextEnemies:* = NextEnemies;
            var doShowCongrats:* = function (){
                RemoveAll();
                Add(BNC_DUNGEON_CONGRATS);
            };
            DoShowMainQuestsScreen = function (){
                var thisMQSInstance:* = 0;
                var DungeonLevel:* = null;
                var NextEnemy:* = null;
                var PlayUnlockSound:* = false;
                var i:* = undefined;
                var MainQuestsClick:* = function (evt:MouseEvent){
                    var evt:* = evt;
                    if (thisMQSInstance != MQSInstance){
                        i = 0;
                        while (i < 9) {
                            var _local3 = actor[(IMG_MQS_BUTTON + i)].content;
                            with (_local3) {
                                removeEventListener(MouseEvent.CLICK, MainQuestsClick);
                            };
                            i++;
                        };
                        return;
                    };
                    if (GetActorID(evt.target) == (CNT_HLMQS_BUTTON + 4)){
                        SendAction(ACT_SCREEN_TOWER);
                    } else {
                        if (countDone == 9){
                            ShowMainQuestScreen(9, (int(NextEnemies[9]) - 1));
                        } else {
                            if (countDone == 10){
                                ShowMainQuestScreen(10, (int(NextEnemies[10]) - 1));
                            } else {
                                if (countDone == 11){
                                    ShowMainQuestScreen(11, (int(NextEnemies[11]) - 1));
                                } else {
                                    if (countDone == 12){
                                        ShowMainQuestScreen(12, (int(NextEnemies[12]) - 1));
                                    } else {
                                        ShowMainQuestScreen((GetActorID(evt.target) - CNT_MQS_BUTTON), (int(NextEnemies[(GetActorID(evt.target) - CNT_MQS_BUTTON)]) - 1));
                                    };
                                };
                            };
                        };
                    };
                };
                MQSInstance++;
                if (MQSInstance > 1000){
                    MQSInstance = 0;
                };
                thisMQSInstance = MQSInstance;
                DungeonLevel = "";
                NextEnemy = "";
                PlayUnlockSound = false;
                RemoveAll();
                Add(Background);
                Add((((countDone >= 9)) ? BNC_SCREEN_HLMAINQUESTS : BNC_SCREEN_MAINQUESTS));
                var _local2 = actor[LBL_MAINQUESTS_TITLE];
                with (_local2) {
                    x = (POS_SCREEN_TITLE_X - int((textWidth / 2)));
                };
                _local2 = actor[LBL_HLMAINQUESTS_TITLE];
                with (_local2) {
                    x = (POS_SCREEN_TITLE_X - int((textWidth / 2)));
                };
                if (countDone < 9){
                    i = 0;
                    while (i < 9) {
                        if (int(NextEnemies[i]) >= 500){
                            NextEnemy = txt[((TXT_COPYCAT_NAME + int(NextEnemies[i])) - 500)];
                        } else {
                            if (int(NextEnemies[i]) > 220){
                                NextEnemy = txt[((TXT_NEW_MONSTER_NAMES + int(NextEnemies[i])) - 221)];
                            } else {
                                NextEnemy = txt[((int(NextEnemies[i]))==-1) ? TXT_ENEMY_SELF : ((TXT_MONSTER_NAME + int(NextEnemies[i])) - 1)];
                            };
                        };
                        SetCnt((CNT_MQS_DISABLED + i), IMG_MQS_DISABLED);
                        SetCnt((CNT_MQS_COMPLETED + i), IMG_MQS_COMPLETED);
                        _local2 = actor[(CNT_MQS_DISABLED + i)];
                        with (_local2) {
                            visible = (int(Savegame[(SG_DUNGEON_LEVEL + i)]) <= 1);
                            alpha = 1;
                        };
                        actor[(CNT_MQS_COMPLETED + i)].visible = (int(Savegame[(SG_DUNGEON_LEVEL + i)]) >= 12);
                        SetCnt((CNT_MQS_BUTTON + i), (IMG_MQS_BUTTON + i));
                        DungeonLevel = String((int(Savegame[(SG_DUNGEON_LEVEL + i)]) - 1));
                        if (DungeonLevel == "0"){
                            PlayUnlockSound = true;
                            FadeOut((CNT_MQS_DISABLED + i), 20, 0.05, 0, true);
                            DungeonLevel = "1";
                        };
                        EnablePopup((CNT_MQS_BUTTON + i), POPUP_BEGIN_LINE, txt[(TXT_DUNGEON_NAME + i)].split("|")[0], POPUP_END_LINE, POPUP_BEGIN_LINE, FontFormat_EpicItemQuote, txt[(TXT_DUNGEON_NAME + i)].split("|")[1], FontFormat_Popup, POPUP_END_LINE, POPUP_BEGIN_LINE, txt[TXT_DUNGEON_INFO].split("%1").join(DungeonLevel).split("%2").join(NextEnemy), POPUP_END_LINE);
                        _local2 = actor[(CNT_MQS_BUTTON + i)];
                        with (_local2) {
                            addEventListener(MouseEvent.CLICK, MainQuestsClick);
                            buttonMode = true;
                            useHandCursor = true;
                            mouseChildren = false;
                        };
                        i = (i + 1);
                    };
                } else {
                    i = 0;
                    while (i < 5) {
                        if (i < 4){
                            SetCnt((CNT_HLMQS_DISABLED + i), IMG_MQS_DISABLED);
                            SetCnt((CNT_HLMQS_COMPLETED + i), IMG_MQS_COMPLETED);
                            if (i == 0){
                                DungeonLevel = Savegame[(SG_DUNGEON_LEVEL + 9)];
                                if (countDone > 9){
                                    actor[(CNT_HLMQS_DISABLED + i)].visible = false;
                                    actor[(CNT_HLMQS_COMPLETED + i)].visible = true;
                                } else {
                                    actor[(CNT_HLMQS_COMPLETED + i)].visible = false;
                                    actor[(CNT_HLMQS_DISABLED + i)].alpha = 1;
                                    if (DungeonLevel == "0"){
                                        actor[(CNT_HLMQS_DISABLED + i)].visible = true;
                                        PlayUnlockSound = true;
                                        FadeOut((CNT_HLMQS_DISABLED + i), 20, 0.05, 0, true);
                                        DungeonLevel = "1";
                                    } else {
                                        DungeonLevel = String((int(DungeonLevel) - 1));
                                        actor[(CNT_HLMQS_DISABLED + i)].visible = false;
                                    };
                                };
                                switch (DungeonLevel){
                                    case "1":
                                        NextEnemy = txt[2300];
                                        break;
                                    case "2":
                                        NextEnemy = txt[2314];
                                        break;
                                    case "3":
                                        NextEnemy = txt[2358];
                                        break;
                                    case "4":
                                        NextEnemy = txt[2220];
                                        break;
                                    case "5":
                                        NextEnemy = txt[2260];
                                        break;
                                    case "6":
                                        NextEnemy = txt[2362];
                                        break;
                                    case "7":
                                        NextEnemy = txt[2360];
                                        break;
                                    case "8":
                                        NextEnemy = txt[2358];
                                        break;
                                    case "9":
                                        NextEnemy = txt[2357];
                                        break;
                                    case "10":
                                        NextEnemy = txt[2364];
                                        break;
                                };
                            } else {
                                if (i == 1){
                                    if (countDone > 10){
                                        actor[(CNT_HLMQS_DISABLED + i)].visible = false;
                                        actor[(CNT_HLMQS_COMPLETED + i)].visible = true;
                                    } else {
                                        if (countDone == 10){
                                            actor[(CNT_HLMQS_COMPLETED + i)].visible = false;
                                            actor[(CNT_HLMQS_DISABLED + i)].alpha = 1;
                                            DungeonLevel = Savegame[(SG_NEW_DUNGEONS + 0)];
                                            if (DungeonLevel == "0"){
                                                actor[(CNT_HLMQS_DISABLED + i)].visible = true;
                                                PlayUnlockSound = true;
                                                FadeOut((CNT_HLMQS_DISABLED + i), 20, 0.05, 0, true);
                                                DungeonLevel = "1";
                                            } else {
                                                DungeonLevel = String((int(DungeonLevel) - 1));
                                                actor[(CNT_HLMQS_DISABLED + i)].visible = false;
                                            };
                                        } else {
                                            actor[(CNT_HLMQS_COMPLETED + i)].visible = false;
                                            actor[(CNT_HLMQS_DISABLED + i)].alpha = 1;
                                            actor[(CNT_HLMQS_DISABLED + i)].visible = true;
                                        };
                                    };
                                    NextEnemy = txt[((2372 + int(DungeonLevel)) - 1)];
                                } else {
                                    if (i == 2){
                                        if (countDone > 11){
                                            actor[(CNT_HLMQS_DISABLED + i)].visible = false;
                                            actor[(CNT_HLMQS_COMPLETED + i)].visible = true;
                                        } else {
                                            if (countDone == 11){
                                                actor[(CNT_HLMQS_COMPLETED + i)].visible = false;
                                                actor[(CNT_HLMQS_DISABLED + i)].alpha = 1;
                                                DungeonLevel = Savegame[(SG_NEW_DUNGEONS + 1)];
                                                if (DungeonLevel == "0"){
                                                    actor[(CNT_HLMQS_DISABLED + i)].visible = true;
                                                    PlayUnlockSound = true;
                                                    FadeOut((CNT_HLMQS_DISABLED + i), 20, 0.05, 0, true);
                                                    DungeonLevel = "1";
                                                } else {
                                                    DungeonLevel = String((int(DungeonLevel) - 1));
                                                    actor[(CNT_HLMQS_DISABLED + i)].visible = false;
                                                };
                                            } else {
                                                actor[(CNT_HLMQS_COMPLETED + i)].visible = false;
                                                actor[(CNT_HLMQS_DISABLED + i)].alpha = 1;
                                                actor[(CNT_HLMQS_DISABLED + i)].visible = true;
                                            };
                                        };
                                        NextEnemy = txt[((2382 + int(DungeonLevel)) - 1)];
                                    } else {
                                        if (i == 3){
                                            if (countDone > 12){
                                                actor[(CNT_HLMQS_DISABLED + i)].visible = false;
                                                actor[(CNT_HLMQS_COMPLETED + i)].visible = true;
                                            } else {
                                                if (countDone == 12){
                                                    actor[(CNT_HLMQS_COMPLETED + i)].visible = false;
                                                    actor[(CNT_HLMQS_DISABLED + i)].alpha = 1;
                                                    DungeonLevel = String((int(Savegame[SG_DUNGEON_13]) - 120));
                                                    if (DungeonLevel == "0"){
                                                        actor[(CNT_HLMQS_DISABLED + i)].visible = true;
                                                        PlayUnlockSound = true;
                                                        FadeOut((CNT_HLMQS_DISABLED + i), 20, 0.05, 0, true);
                                                        DungeonLevel = "1";
                                                    } else {
                                                        DungeonLevel = String((int(DungeonLevel) - 1));
                                                        actor[(CNT_HLMQS_DISABLED + i)].visible = false;
                                                    };
                                                } else {
                                                    actor[(CNT_HLMQS_COMPLETED + i)].visible = false;
                                                    actor[(CNT_HLMQS_DISABLED + i)].alpha = 1;
                                                    actor[(CNT_HLMQS_DISABLED + i)].visible = true;
                                                };
                                            };
                                            NextEnemy = txt[((9032 + int(DungeonLevel)) - 1)];
                                        };
                                    };
                                };
                            };
                        } else {
                            SetCnt((CNT_HLMQS_COMPLETED + i), IMG_HLMQS_TOWER_DISABLED);
                            NextEnemy = txt[(TXT_TOWER_ENEMY_NAMES + towerLevel)].split("|")[0];
                            DungeonLevel = String((towerLevel + 1));
                            if (towerLevel >= 100){
                                actor[(CNT_HLMQS_COMPLETED + i)].visible = true;
                            } else {
                                actor[(CNT_HLMQS_COMPLETED + i)].visible = false;
                            };
                        };
                        SetCnt((CNT_HLMQS_BUTTON + i), (IMG_HLMQS_BUTTON + i));
                        EnablePopup((CNT_HLMQS_BUTTON + i), POPUP_BEGIN_LINE, txt[(TXT_HL_MAINQUESTS_NAME + i)].split("|")[0], POPUP_END_LINE, POPUP_BEGIN_LINE, FontFormat_EpicItemQuote, txt[(TXT_HL_MAINQUESTS_NAME + i)].split("|")[1], FontFormat_Popup, POPUP_END_LINE, POPUP_BEGIN_LINE, txt[(((i == 4)) ? TXT_TOWER_INFO : TXT_DUNGEON_INFO)].split("%1").join(DungeonLevel).split("%2").join(NextEnemy).split("%3").join(String(towerLevel)), POPUP_END_LINE);
                        _local2 = actor[(CNT_HLMQS_BUTTON + i)];
                        with (_local2) {
                            addEventListener(MouseEvent.CLICK, MainQuestsClick);
                            buttonMode = true;
                            useHandCursor = true;
                            mouseChildren = false;
                        };
                        i = (i + 1);
                    };
                };
                if (PlayUnlockSound){
                    Play(SND_MAINQUESTS_UNLOCK);
                };
            };
            countDone = 0;
            i = 0;
            while (i < 10) {
                if (int(this.Savegame[(this.SG_DUNGEON_LEVEL + i)]) >= 12){
                    countDone = (countDone + 1);
                };
                i = (i + 1);
            };
            i = 0;
            while (i < 2) {
                if (int(this.Savegame[(this.SG_NEW_DUNGEONS + i)]) >= 12){
                    countDone = (countDone + 1);
                };
                i = (i + 1);
            };
            if (int(this.Savegame[this.SG_DUNGEON_13]) >= (120 + 12)){
                countDone = (countDone + 1);
            };
            Background = (this.IMG_SCR_QUEST_BG_1 + 50);
            this.Load(Background);
            this.Load((((countDone >= 9)) ? this.BNC_SCREEN_HLMAINQUESTS : this.BNC_SCREEN_MAINQUESTS));
            this.Load(this.IMG_MQS_DISABLED);
            this.Load(this.IMG_MQS_COMPLETED);
            if (countDone >= 9){
                this.Load(this.IMG_HLMQS_TOWER_DISABLED);
                this.Load(this.IMG_HLMQS_TOWER_COMPLETED);
            };
            i = 0;
            while (i < 9) {
                this.Load((this.IMG_MQS_BUTTON + i));
                i = (i + 1);
            };
            this.WhenLoaded(DoShowMainQuestsScreen);
        }
        public function ShowMainQuestScreen(DungeonNr:int=0, Enemy:int=0){
            var DoShowMainQuestScreen:* = null;
            var MQDelayCheck:* = null;
            var DungeonNr:int = DungeonNr;
            var Enemy:int = Enemy;
            DoShowMainQuestScreen = function (){
                var DungeonLevel:* = null;
                var i:* = 0;
                DungeonLevel = "";
                if (DungeonNr == 100){
                    DungeonLevel = String((towerLevel + 1));
                } else {
                    if (DungeonNr == 12){
                        DungeonLevel = String((int(Savegame[SG_DUNGEON_13]) - 121));
                    } else {
                        if (DungeonNr >= 10){
                            DungeonLevel = String((int(Savegame[((SG_NEW_DUNGEONS + DungeonNr) - 10)]) - 1));
                        } else {
                            DungeonLevel = String((int(Savegame[(SG_DUNGEON_LEVEL + DungeonNr)]) - 1));
                        };
                    };
                };
                RemoveAll();
                if (DungeonNr != 100){
                    if (DungeonLevel == "0"){
                        DungeonLevel = "1";
                    };
                    if (int(DungeonLevel) >= 120){
                        DungeonLevel = "1";
                    };
                    var _local2 = actor[LBL_MAINQUEST_TITLE];
                    with (_local2) {
                        text = txt[(TXT_DUNGEON_INFO + 3)].split("%1").join(txt[(TXT_DUNGEON_NAME + DungeonNr)].split("|")[0]).split("%2").join(DungeonLevel);
                        x = (POS_SCREEN_TITLE_X - (textWidth / 2));
                    };
                } else {
                    _local2 = actor[LBL_MAINQUEST_TITLE];
                    with (_local2) {
                        text = ((txt[TXT_TOWER_LEVEL].split("%1").join(DungeonLevel) + " - ") + txt[((TXT_TOWER_ENEMY_NAMES + Enemy) - 399)].split("|")[0]);
                        x = (POS_SCREEN_TITLE_X - (textWidth / 2));
                    };
                };
                _local2 = actor[LBL_MAINQUEST_TEXT];
                with (_local2) {
                    text = questText.split("#").join(String.fromCharCode(13));
                };
                Arabize(LBL_MAINQUEST_TEXT);
                if (textDir == "right"){
                    SetBtnText(BTN_MAINQUEST_START, (((WaitingFor(Savegame[SG_MQ_REROLL_TIME])) ? "(~P1) " : "") + txt[TXT_OK]));
                } else {
                    SetBtnText(BTN_MAINQUEST_START, (txt[TXT_OK] + ((WaitingFor(Savegame[SG_MQ_REROLL_TIME])) ? " (1~P)" : "")));
                };
                if (WaitingFor(Savegame[SG_MQ_REROLL_TIME])){
                    Show(LBL_MAINQUEST_MUSHHINT);
                    actor[LBL_MAINQUEST_MUSHHINT].text = txt[TXT_MQ_MUSHHINT].split("%1").join(WaitingTime(Savegame[SG_MQ_REROLL_TIME]));
                    Arabize(LBL_MAINQUEST_MUSHHINT);
                    MQDelayTimer.addEventListener(TimerEvent.TIMER, MQDelayCheck);
                    MQDelayTimer.start();
                } else {
                    Hide(LBL_MAINQUEST_MUSHHINT);
                };
                if (DungeonNr == 100){
                    Add(IMG_SCR_TOWER_BG);
                } else {
                    Add(((IMG_SCR_QUEST_BG_1 + 50) + DungeonNr));
                };
                SetCnt(CNT_MAINQUEST_ENEMY_BORDER, IMG_FIGHT_CHAR_BORDER);
                Add(BNC_SCREEN_MAINQUEST);
                if (Enemy < 0){
                    i = 0;
                    while (i < 10) {
                        _local2 = actor[(IMG_CHARIMG_BACKGROUND + i)];
                        with (_local2) {
                            x = actor[CNT_MAINQUEST_ENEMY].x;
                            y = actor[CNT_MAINQUEST_ENEMY].y;
                            scaleX = 1;
                            scaleY = 1;
                        };
                        i = (i + 1);
                    };
                    LoadCharacterImage();
                } else {
                    SetCnt(CNT_MAINQUEST_ENEMY, (IMG_OPPIMG_MONSTER + Enemy));
                };
                SelectedDungeon = DungeonNr;
            };
            MQDelayCheck = function (evt:TimerEvent=undefined){
                if (!OnStage(SHP_MAINQUEST)){
                    MQDelayTimer.removeEventListener(TimerEvent.TIMER, MQDelayCheck);
                    MQDelayTimer.stop();
                    return;
                };
                if (WaitingFor(Savegame[SG_MQ_REROLL_TIME])){
                    Show(LBL_MAINQUEST_MUSHHINT);
                    actor[LBL_MAINQUEST_MUSHHINT].text = txt[TXT_MQ_MUSHHINT].split("%1").join(WaitingTime(Savegame[SG_MQ_REROLL_TIME]));
                    SetTitleBar(WaitingTime(Savegame[SG_MQ_REROLL_TIME]));
                } else {
                    Hide(LBL_MAINQUEST_MUSHHINT);
                    SetTitleBar();
                    MQDelayTimer.removeEventListener(TimerEvent.TIMER, MQDelayCheck);
                    MQDelayTimer.stop();
                };
                if (textDir == "right"){
                    SetBtnText(BTN_MAINQUEST_START, (((WaitingFor(Savegame[SG_MQ_REROLL_TIME])) ? "(~P1) " : "") + txt[TXT_OK]));
                } else {
                    SetBtnText(BTN_MAINQUEST_START, (txt[TXT_OK] + ((WaitingFor(Savegame[SG_MQ_REROLL_TIME])) ? " (1~P)" : "")));
                };
            };
            var questText:* = "";
            if (this.Savegame[this.SG_DUNGEON_13] < 122){
                this.Savegame[this.SG_DUNGEON_13] = 122;
            };
            if (DungeonNr == 100){
                questText = this.txt[(this.TXT_TOWER_ENEMY_NAMES + this.towerLevel)].split("|")[1];
            } else {
                if (DungeonNr == 12){
                    questText = this.txt[((this.TXT_QUEST_TEXT + (DungeonNr * 10)) + ((((int(this.Savegame[this.SG_DUNGEON_13]) - 2) < 120)) ? 0 : ((int(this.Savegame[this.SG_DUNGEON_13]) - 2) - 120)))];
                } else {
                    if (DungeonNr >= 10){
                        questText = this.txt[((this.TXT_QUEST_TEXT + (DungeonNr * 10)) + ((((int(this.Savegame[((this.SG_NEW_DUNGEONS + DungeonNr) - 10)]) - 2) < 0)) ? 0 : (int(this.Savegame[((this.SG_NEW_DUNGEONS + DungeonNr) - 10)]) - 2)))];
                    } else {
                        questText = this.txt[((this.TXT_QUEST_TEXT + (DungeonNr * 10)) + ((((int(this.Savegame[(this.SG_DUNGEON_LEVEL + DungeonNr)]) - 2) < 0)) ? 0 : (int(this.Savegame[(this.SG_DUNGEON_LEVEL + DungeonNr)]) - 2)))];
                    };
                };
            };
            this.hasLostMQ = false;
            this.LastDungeonNr = DungeonNr;
            this.LastDungeonEnemy = Enemy;
            this.Load(this.BNC_SCREEN_MAINQUEST);
            if (DungeonNr == 100){
                this.Load(this.IMG_SCR_TOWER_BG);
            } else {
                this.Load(((this.IMG_SCR_QUEST_BG_1 + 50) + DungeonNr));
            };
            this.Load(this.IMG_FIGHT_CHAR_BORDER);
            if (Enemy >= 0){
                this.Load((this.IMG_OPPIMG_MONSTER + Enemy));
            };
            this.WhenLoaded(DoShowMainQuestScreen);
        }
        public function MakeRightTextArea(actorID:int, child:int=0, createHandler:Boolean=true){
            var tmpTextFormat:* = null;
            var actorID:* = actorID;
            var child:int = child;
            var createHandler:Boolean = createHandler;
            var makeRightHandler:* = function (evt:Event){
                MakeRightTextArea(actorID, child, false);
            };
            if (this.textDir != "right"){
                return;
            };
            tmpTextFormat = this.actor[actorID].getChildAt(child).defaultTextFormat;
            tmpTextFormat.align = "right";
            if (!this.actor[actorID].hasHandler){
                if (createHandler){
                    this.actor[actorID].hasHandler = true;
                };
            };
            this.actor[actorID].getChildAt(child).defaultTextFormat = tmpTextFormat;
            this.actor[actorID].getChildAt(child).setTextFormat(tmpTextFormat);
        }
        public function DisplayInventory(SG:Array=undefined, NoPrices:Boolean=false, towerMode:Boolean=false, copyCatIdRaw:int=0, witchMode:Boolean=false):void{
            var i:* = 0;
            var ii:* = 0;
            var HideBackPack:* = false;
            var boostPrice:* = 0;
            var boostGold:* = 0;
            var boostSilver:* = 0;
            var preisX:* = 0;
            var popupLines:* = null;
            var tempBonus:* = 0;
            var tmpHealth:* = 0;
            var potionDuration:* = null;
            var copyCatId:* = undefined;
            var popupLinesCpc:* = null;
            var DamageReductionCpc:* = 0;
            var DamageReductionMaxCpc:* = 0;
            var tmpKritische:* = NaN;
            var tmpDamageMin:* = 0;
            var tmpDamageMax:* = 0;
            var tmpDamageFactor:* = NaN;
            var tmpLifeFactor:* = NaN;
            var SchadenLblID:* = 0;
            var SchadenID:* = 0;
            var tmpItmClass:* = 0;
            var tmpItmPic:* = 0;
            var hasEpic:* = false;
            var DamageReduction:* = 0;
            var DamageReductionMax:* = 0;
            var SG:* = SG;
            var NoPrices:Boolean = NoPrices;
            var towerMode:Boolean = towerMode;
            var copyCatIdRaw:int = copyCatIdRaw;
            var witchMode:Boolean = witchMode;
            var GetBoostPrice:* = function (boostCount:int):Number{
                return (int(TrueAttPreis[boostCount]));
            };
            HideBackPack = false;
            tempBonus = 0;
            tmpHealth = 0;
            var hours:* = 0;
            potionDuration = "";
            copyCatId = 0;
            if (towerMode){
                copyCatId = (this.TSG_COPYCATS + (this.SIZE_COPYCAT * copyCatIdRaw));
                i = 0;
                while (i < 3) {
                    if (i == copyCatIdRaw){
                        if (int(SG[(copyCatId + this.CPC_LEVEL)]) >= int(this.Savegame[this.SG_LEVEL])){
                            this.Hide((this.BTN_TOWER_STEIGERN1 + i));
                            this.Hide((this.LBL_TOWER_BOOSTPRICELABEL + i));
                        } else {
                            this.Show((this.BTN_TOWER_STEIGERN1 + i));
                            this.Show((this.LBL_TOWER_BOOSTPRICELABEL + i));
                        };
                    } else {
                        this.Hide((this.BTN_TOWER_STEIGERN1 + i));
                        this.Hide((this.LBL_TOWER_BOOSTPRICELABEL + i));
                    };
                    i = (i + 1);
                };
                i = 0;
                while (i < 5) {
                    ii = 0;
                    while (ii < 12) {
                        SG[((this.TSG_LOOT_SACK + (i * 12)) + ii)] = this.Savegame[((this.SG_BACKPACK_OFFS + (i * 12)) + ii)];
                        ii = (ii + 1);
                    };
                    i = (i + 1);
                };
                if (SG[(copyCatId + this.CPC_LEVEL)] != 0){
                    this.actor[this.LBL_SCR_CHAR_NAME].text = this.txt[(this.TXT_COPYCAT_NAME + copyCatIdRaw)];
                } else {
                    this.actor[this.LBL_SCR_CHAR_NAME].text = "";
                };
                this.actor[this.CNT_SCR_CHAR_NAME].x = ((this.POS_SCR_CHAR_CHARIMG_X + 128) - int((this.actor[this.LBL_SCR_CHAR_NAME].textWidth / 2)));
                var _local7 = this.actor[this.IMG_SCR_CHAR_EXPBAR];
                with (_local7) {
                    width = int(((Number(SG[(copyCatId + CPC_GOLD_STOLEN)]) / Number(SG[(copyCatId + CPC_GOLD_STOLEN_NEXT)])) * 254));
                };
                i = 0;
                while (i < 3) {
                    this.Hide((this.IMG_TOWER_NO_PORTRAIT + i));
                    this.Hide((this.IMG_TOWER_PORTRAIT + i));
                    _local7 = this.actor[(this.IMG_TOWER_NO_PORTRAIT + i)];
                    with (_local7) {
                        scaleX = 0.86;
                        scaleY = 0.86;
                    };
                    _local7 = this.actor[(this.IMG_TOWER_PORTRAIT + i)];
                    with (_local7) {
                        scaleX = 0.86;
                        scaleY = 0.86;
                    };
                    i = (i + 1);
                };
                _local7 = this.actor[this.LBL_TOWER_EXPLABEL];
                with (_local7) {
                    if (SG[(copyCatId + CPC_LEVEL)] != 0){
                        Show((IMG_TOWER_PORTRAIT + copyCatIdRaw));
                        if (textDir == "right"){
                            text = ((SG[(copyCatId + CPC_LEVEL)] + " ") + txt[TXT_HALL_LIST_COLUMN_4]);
                        } else {
                            text = ((txt[TXT_HALL_LIST_COLUMN_4] + " ") + SG[(copyCatId + CPC_LEVEL)]);
                        };
                    } else {
                        Show((IMG_TOWER_NO_PORTRAIT + copyCatIdRaw));
                        text = "";
                    };
                    if (towerLevelLabelPos > (POS_SCR_CHAR_CHARIMG_X + 3)){
                        x = ((POS_SCR_CHAR_CHARIMG_X + 127) - int((actor[LBL_TOWER_EXPLABEL].textWidth / 2)));
                    } else {
                        x = (POS_SCR_CHAR_CHARIMG_X + 3);
                    };
                };
                popupLinesCpc = new Array();
                popupLinesCpc.push([this.POPUP_BEGIN_LINE, ((this.txt[163] + ": ") + SG[(copyCatId + this.CPC_ARMOR)]), this.POPUP_END_LINE]);
                DamageReductionCpc = int((Number(SG[(copyCatId + this.CPC_ARMOR)]) / Number(SG[(copyCatId + this.CPC_LEVEL)])));
                DamageReductionMaxCpc = 50;
                switch (int(SG[(copyCatId + this.CPC_CLASS)])){
                    case 2:
                        DamageReductionMaxCpc = 10;
                        break;
                    case 3:
                        DamageReductionMaxCpc = 25;
                        break;
                };
                if (DamageReductionCpc > DamageReductionMaxCpc){
                    DamageReductionCpc = DamageReductionMaxCpc;
                };
                if (this.textDir == "right"){
                    popupLinesCpc[popupLinesCpc.length] = [this.POPUP_BEGIN_LINE, this.FontFormat_Attrib, ((((((((("(" + this.txt[this.TXT_MAX]) + " -") + String(DamageReductionMaxCpc)) + "%) ") + String(DamageReductionCpc)) + "% :") + SG[(copyCatId + this.CPC_LEVEL)]) + " ") + this.txt[this.TXT_RUESTUNG_SUM_HINT]), this.POPUP_END_LINE];
                } else {
                    popupLinesCpc[popupLinesCpc.length] = [this.POPUP_BEGIN_LINE, this.FontFormat_Attrib, (((((((((this.txt[this.TXT_RUESTUNG_SUM_HINT] + " ") + SG[(copyCatId + this.CPC_LEVEL)]) + ": -") + String(DamageReductionCpc)) + "% (") + this.txt[this.TXT_MAX]) + " -") + String(DamageReductionMaxCpc)) + "%)"), this.POPUP_END_LINE];
                };
                if (this.txt[this.TXT_SHIELD_FORMULA]){
                    popupLinesCpc[popupLinesCpc.length] = [this.POPUP_BEGIN_LINE, this.FontFormat_Attrib, this.txt[this.TXT_SHIELD_FORMULA], this.POPUP_END_LINE];
                };
                this.EnablePopup(this.LBL_TOWER_EXPLABEL, popupLinesCpc);
                i = 0;
                while (i < 3) {
                    _local7 = this.actor[(this.LBL_TOWER_BOOSTPRICELABEL + i)];
                    with (_local7) {
                        x = ((POS_EXPERIENCE_BAR_X + 196) - textWidth);
                    };
                    i = (i + 1);
                };
                this.SetCnt(this.CNT_TOWER_BOOSTCOIN, this.IMG_IF_GOLD);
            } else {
                if (!(SG is Array)){
                    SG = this.Savegame;
                } else {
                    HideBackPack = true;
                };
            };
            i = 0;
            while (i < 5) {
                if (int(SG[(((towerMode) ? (copyCatId + this.CPC_ATTRIBS_BONUS) : this.SG_ATTR_STAERKE_BONUS) + i)]) > 0){
                    this.actor[(this.LBL_SCR_CHAR_STAERKE + i)].defaultTextFormat = this.FontFormat_AttribBonus;
                } else {
                    this.actor[(this.LBL_SCR_CHAR_STAERKE + i)].defaultTextFormat = this.FontFormat_Attrib;
                };
                this.actor[(this.LBL_SCR_CHAR_STAERKE + i)].text = String((int(SG[(((towerMode) ? (copyCatId + this.CPC_ATTRIBS) : this.SG_ATTR_STAERKE) + i)]) + int(SG[(((towerMode) ? (copyCatId + this.CPC_ATTRIBS_BONUS) : this.SG_ATTR_STAERKE_BONUS) + i)])));
                popupLines = new Array();
                popupLines[popupLines.length] = [this.POPUP_BEGIN_LINE, this.FontFormat_Attrib, this.txt[(this.TXT_CHAR_SCHADEN + i)], this.POPUP_END_LINE];
                if (this.textDir == "right"){
                    popupLines[popupLines.length] = [this.POPUP_BEGIN_LINE, this.FontFormat_Attrib, (this.actor[(this.LBL_SCR_CHAR_STAERKE_CAPTION + i)].text + " ÷ 2 ="), this.POPUP_END_LINE];
                } else {
                    popupLines[popupLines.length] = [this.POPUP_BEGIN_LINE, this.FontFormat_Attrib, (("= " + this.actor[(this.LBL_SCR_CHAR_STAERKE_CAPTION + i)].text) + " / 2"), this.POPUP_END_LINE];
                };
                this.EnablePopup((this.LBL_SCR_CHAR_SCHADEN + i), popupLines);
                this.EnablePopup((this.LBL_SCR_CHAR_SCHADEN_CAPTION + i), popupLines);
                popupLines = new Array();
                popupLines[popupLines.length] = [this.POPUP_BEGIN_LINE, this.FontFormat_Attrib, this.actor[(this.LBL_SCR_CHAR_STAERKE_CAPTION + i)].text, this.POPUP_END_LINE];
                popupLines[popupLines.length] = [this.POPUP_BEGIN_LINE, this.FontFormat_Attrib, this.txt[(this.TXT_ATTRIBHELP + i)], this.POPUP_END_LINE];
                if ((((((towerMode) ? (copyCatIdRaw + 1) : int(SG[this.SG_CLASS])) == 1)) && ((i == 0)))){
                    popupLines[popupLines.length] = [this.POPUP_BEGIN_LINE, this.FontFormat_Attrib, this.txt[this.TXT_ATTRIBHELP_WARRIOR], this.POPUP_END_LINE];
                } else {
                    if ((((((towerMode) ? (copyCatIdRaw + 1) : int(SG[this.SG_CLASS])) == 3)) && ((i == 1)))){
                        popupLines[popupLines.length] = [this.POPUP_BEGIN_LINE, this.FontFormat_Attrib, this.txt[this.TXT_ATTRIBHELP_HUNTER], this.POPUP_END_LINE];
                    } else {
                        if ((((((towerMode) ? (copyCatIdRaw + 1) : int(SG[this.SG_CLASS])) == 2)) && ((i == 2)))){
                            popupLines[popupLines.length] = [this.POPUP_BEGIN_LINE, this.FontFormat_Attrib, this.txt[this.TXT_ATTRIBHELP_MAGE], this.POPUP_END_LINE];
                        } else {
                            if (i <= 2){
                                popupLines[popupLines.length] = [this.POPUP_BEGIN_LINE, this.FontFormat_Attrib, this.txt[(this.TXT_ATTRIBHELP_EXT + i)], this.POPUP_END_LINE];
                            };
                        };
                    };
                };
                popupLines[popupLines.length] = [this.POPUP_BEGIN_LINE, this.FontFormat_Attrib, this.txt[this.TXT_BASIS], this.REL_POPUP_TAB, String(int(SG[(((towerMode) ? (copyCatId + this.CPC_ATTRIBS) : this.SG_ATTR_STAERKE) + i)])), this.POPUP_END_LINE];
                tempBonus = 0;
                tempBonus = int(SG[(((towerMode) ? (copyCatId + this.CPC_ATTRIBS_BONUS) : this.SG_ATTR_STAERKE_BONUS) + i)]);
                if (!towerMode){
                    ii = 0;
                    while (ii < 3) {
                        if (int(SG[(this.SG_POTION_TYPE + ii)]) == 16){
                            tmpHealth = int(SG[(this.SG_POTION_GAIN + ii)]);
                        } else {
                            if (((int(SG[(this.SG_POTION_TYPE + ii)]) - 1) % 5) == i){
                                potionDuration = this.TimeStr(SG[(this.SG_POTION_DURATION + ii)], true);
                                if (int(SG[(this.SG_POTION_GAIN + ii)]) <= 25){
                                    tempBonus = ((int(SG[(this.SG_ATTR_STAERKE + i)]) + int(SG[(this.SG_ATTR_STAERKE_BONUS + i)])) / ((100 + int(SG[(this.SG_POTION_GAIN + ii)])) / 100));
                                    if (HideBackPack){
                                        popupLines[popupLines.length] = [this.POPUP_BEGIN_LINE, this.FontFormat_AttribTemp, this.txt[this.TXT_TEMPORARY], this.REL_POPUP_TAB, String(Math.round(((int(SG[(this.SG_POTION_GAIN + ii)]) / 100) * tempBonus))), this.POPUP_END_LINE];
                                    } else {
                                        if (this.textDir == "right"){
                                            popupLines[popupLines.length] = [this.POPUP_BEGIN_LINE, this.FontFormat_AttribTemp, this.txt[this.TXT_TEMPORARY], this.REL_POPUP_TAB, ((((("(" + potionDuration) + " ") + this.txt[this.TXT_UNTIL]) + ") ") + String(Math.round(((int(SG[(this.SG_POTION_GAIN + ii)]) / 100) * tempBonus)))), this.POPUP_END_LINE];
                                        } else {
                                            popupLines[popupLines.length] = [this.POPUP_BEGIN_LINE, this.FontFormat_AttribTemp, this.txt[this.TXT_TEMPORARY], this.REL_POPUP_TAB, (((((String(Math.round(((int(SG[(this.SG_POTION_GAIN + ii)]) / 100) * tempBonus))) + " (") + this.txt[this.TXT_UNTIL]) + " ") + potionDuration) + ")"), this.POPUP_END_LINE];
                                        };
                                    };
                                    tempBonus = (tempBonus - int(SG[(this.SG_ATTR_STAERKE + i)]));
                                } else {
                                    if (HideBackPack){
                                        popupLines[popupLines.length] = [this.POPUP_BEGIN_LINE, this.FontFormat_AttribTemp, this.txt[this.TXT_TEMPORARY], this.REL_POPUP_TAB, String(int(SG[(this.SG_POTION_GAIN + ii)])), this.POPUP_END_LINE];
                                    } else {
                                        if (this.textDir == "right"){
                                            popupLines[popupLines.length] = [this.POPUP_BEGIN_LINE, this.FontFormat_AttribTemp, this.txt[this.TXT_TEMPORARY], this.REL_POPUP_TAB, ((((("(" + potionDuration) + " ") + this.txt[this.TXT_UNTIL]) + ") ") + String(int(SG[(this.SG_POTION_GAIN + ii)]))), this.POPUP_END_LINE];
                                        } else {
                                            popupLines[popupLines.length] = [this.POPUP_BEGIN_LINE, this.FontFormat_AttribTemp, this.txt[this.TXT_TEMPORARY], this.REL_POPUP_TAB, (((((String(int(SG[(this.SG_POTION_GAIN + ii)])) + " (") + this.txt[this.TXT_UNTIL]) + " ") + potionDuration) + ")"), this.POPUP_END_LINE];
                                        };
                                    };
                                    tempBonus = (int(SG[(this.SG_ATTR_STAERKE_BONUS + i)]) - int(SG[(this.SG_POTION_GAIN + ii)]));
                                };
                                break;
                            };
                        };
                        ii = (ii + 1);
                    };
                };
                if (tempBonus > 0){
                    popupLines[popupLines.length] = [this.POPUP_BEGIN_LINE, this.FontFormat_AttribBonus, this.txt[this.TXT_BONUS], this.REL_POPUP_TAB, String(tempBonus), this.POPUP_END_LINE];
                };
                this.EnablePopup((this.LBL_SCR_CHAR_STAERKE + i), popupLines);
                this.EnablePopup((this.LBL_SCR_CHAR_STAERKE_CAPTION + i), popupLines);
                if (!towerMode){
                    boostPrice = GetBoostPrice(SG[(this.SG_ATTR_STAERKE_GEKAUFT + i)]);
                    if (boostPrice > 9999){
                        boostPrice = (int((boostPrice / 100)) * 100);
                    };
                    if (boostPrice > 0x3B9ACA00){
                        boostPrice = 0x3B9ACA00;
                    };
                    this.canBoost[i] = Boolean((boostPrice <= Number(SG[this.SG_GOLD])));
                    boostGold = int((boostPrice / 100));
                    boostSilver = (boostPrice % 100);
                    this.Hide((this.LBL_SCR_CHAR_PREIS1 + i), (this.CNT_SCR_CHAR_GOLD1 + i), (this.LBL_SCR_CHAR_SILBER1 + i), (this.CNT_SCR_CHAR_SILBER1 + i));
                    preisX = (this.POS_CHAR_PROP_COLUMN_4_X + (((this.textDir == "right")) ? 240 : 0));
                    if (boostGold > 0){
                        _local7 = this.actor[(this.LBL_SCR_CHAR_PREIS1 + i)];
                        with (_local7) {
                            text = String(boostGold);
                            if (textDir == "right"){
                                x = (preisX - textWidth);
                                preisX = (x - 8);
                            } else {
                                x = preisX;
                                preisX = ((x + textWidth) + 8);
                            };
                        };
                        _local7 = this.actor[(this.CNT_SCR_CHAR_GOLD1 + i)];
                        with (_local7) {
                            if (textDir == "right"){
                                x = (preisX - width);
                                preisX = (x - 10);
                            } else {
                                x = preisX;
                                preisX = ((x + width) + 10);
                            };
                        };
                        this.Show((this.LBL_SCR_CHAR_PREIS1 + i), (this.CNT_SCR_CHAR_GOLD1 + i));
                    };
                    if (boostSilver > 0){
                        _local7 = this.actor[(this.LBL_SCR_CHAR_SILBER1 + i)];
                        with (_local7) {
                            text = String(boostSilver);
                            if (textDir == "right"){
                                x = (preisX - textWidth);
                                preisX = (x - 8);
                            } else {
                                x = preisX;
                                preisX = ((x + textWidth) + 8);
                            };
                        };
                        _local7 = this.actor[(this.CNT_SCR_CHAR_SILBER1 + i)];
                        with (_local7) {
                            if (textDir == "right"){
                                x = (preisX - width);
                                preisX = (x - 10);
                            } else {
                                x = preisX;
                                preisX = ((x + width) + 10);
                            };
                        };
                        this.Show((this.LBL_SCR_CHAR_SILBER1 + i), (this.CNT_SCR_CHAR_SILBER1 + i));
                    };
                };
                i = (i + 1);
            };
            tmpKritische = (Math.round(((((int(SG[((towerMode) ? ((copyCatId + this.CPC_ATTRIBS) + 4) : this.SG_ATTR_WILLENSKRAFT)]) + int(SG[((towerMode) ? ((copyCatId + this.CPC_ATTRIBS_BONUS) + 4) : this.SG_ATTR_WILLENSKRAFT_BONUS)])) * 25) / (Number(SG[((towerMode) ? (copyCatId + this.CPC_LEVEL) : this.SG_LEVEL)]) * 10)) * 100)) / 100);
            if (tmpKritische < 0){
                tmpKritische = 0;
            };
            if (tmpKritische > 50){
                tmpKritische = 50;
            };
            tmpDamageMin = SG[((towerMode) ? (copyCatId + this.CPC_DAMAGE_MIN) : this.SG_DAMAGE_MIN)];
            tmpDamageMax = SG[((towerMode) ? (copyCatId + this.CPC_DAMAGE_MAX) : this.SG_DAMAGE_MAX)];
            tmpDamageFactor = 0;
            tmpLifeFactor = 5;
            SchadenLblID = 0;
            switch (int(((towerMode) ? (copyCatIdRaw + 1) : SG[this.SG_CLASS]))){
                case 1:
                    SchadenLblID = this.LBL_SCR_CHAR_SCHADEN_CAPTION;
                    SchadenID = this.LBL_SCR_CHAR_SCHADEN;
                    tmpDamageFactor = (1 + ((Number(SG[((towerMode) ? (copyCatId + this.CPC_ATTRIBS) : this.SG_ATTR_STAERKE)]) + Number(SG[((towerMode) ? (copyCatId + this.CPC_ATTRIBS_BONUS) : this.SG_ATTR_STAERKE_BONUS)])) / 10));
                    tmpLifeFactor = 5;
                    break;
                case 2:
                    SchadenLblID = this.LBL_SCR_CHAR_LEBEN_CAPTION;
                    SchadenID = this.LBL_SCR_CHAR_LEBEN;
                    tmpDamageFactor = (1 + ((Number(SG[((towerMode) ? ((copyCatId + this.CPC_ATTRIBS) + 2) : this.SG_ATTR_AUSDAUER)]) + Number(SG[((towerMode) ? ((copyCatId + this.CPC_ATTRIBS_BONUS) + 2) : this.SG_ATTR_AUSDAUER_BONUS)])) / 10));
                    tmpLifeFactor = 2;
                    break;
                case 3:
                    SchadenLblID = this.LBL_SCR_CHAR_KAMPFWERT_CAPTION;
                    SchadenID = this.LBL_SCR_CHAR_KAMPFWERT;
                    tmpDamageFactor = (1 + ((Number(SG[((towerMode) ? ((copyCatId + this.CPC_ATTRIBS) + 1) : this.SG_ATTR_BEWEGLICHKEIT)]) + Number(SG[((towerMode) ? ((copyCatId + this.CPC_ATTRIBS_BONUS) + 1) : this.SG_ATTR_BEWEGLICHKEIT_BONUS)])) / 10));
                    tmpLifeFactor = 4;
                    break;
            };
            tmpDamageMin = Math.round((tmpDamageMin * tmpDamageFactor));
            tmpDamageMax = Math.round((tmpDamageMax * tmpDamageFactor));
            this.actor[this.LBL_SCR_CHAR_SCHADEN].text = int(((Number(SG[((towerMode) ? (copyCatId + this.CPC_ATTRIBS) : this.SG_ATTR_STAERKE)]) + Number(SG[((towerMode) ? (copyCatId + this.CPC_ATTRIBS_BONUS) : this.SG_ATTR_STAERKE_BONUS)])) / 2));
            this.actor[this.LBL_SCR_CHAR_KAMPFWERT].text = int(((Number(SG[((towerMode) ? ((copyCatId + this.CPC_ATTRIBS) + 1) : this.SG_ATTR_BEWEGLICHKEIT)]) + Number(SG[((towerMode) ? ((copyCatId + this.CPC_ATTRIBS_BONUS) + 1) : this.SG_ATTR_BEWEGLICHKEIT_BONUS)])) / 2));
            this.actor[this.LBL_SCR_CHAR_LEBEN].text = int(((Number(SG[((towerMode) ? ((copyCatId + this.CPC_ATTRIBS) + 2) : this.SG_ATTR_AUSDAUER)]) + Number(SG[((towerMode) ? ((copyCatId + this.CPC_ATTRIBS_BONUS) + 2) : this.SG_ATTR_AUSDAUER_BONUS)])) / 2));
            this.actor[this.LBL_SCR_CHAR_RUESTUNG].defaultTextFormat = (((tmpHealth > 0)) ? this.FontFormat_AttribBonus : this.FontFormat_Attrib);
            this.actor[this.LBL_SCR_CHAR_RUESTUNG].text = int(((((Number(SG[((towerMode) ? ((copyCatId + this.CPC_ATTRIBS) + 3) : this.SG_ATTR_INTELLIGENZ)]) + Number(SG[((towerMode) ? ((copyCatId + this.CPC_ATTRIBS_BONUS) + 3) : this.SG_ATTR_INTELLIGENZ_BONUS)])) * (tmpLifeFactor * 2)) * (((tmpHealth > 0)) ? (Number((tmpHealth + 100)) / 100) : 1)) * (0.5 + (SG[((towerMode) ? (copyCatId + this.CPC_LEVEL) : this.SG_LEVEL)] / 2))));
            this.actor[this.LBL_SCR_CHAR_WIDERSTAND].text = (String(tmpKritische) + String("%"));
            popupLines = new Array();
            popupLines[popupLines.length] = [this.POPUP_BEGIN_LINE, this.FontFormat_Attrib, this.txt[this.TXT_SCHADEN], this.POPUP_END_LINE];
            if (this.textDir == "right"){
                popupLines[popupLines.length] = [this.POPUP_BEGIN_LINE, this.FontFormat_Attrib, (((this.txt[this.TXT_WAFFENSCHADEN] + " × (1 + ") + this.actor[((this.LBL_SCR_CHAR_STAERKE_CAPTION + SchadenID) - this.LBL_SCR_CHAR_SCHADEN)].text) + " ÷ 10) ="), this.POPUP_END_LINE];
            } else {
                popupLines[popupLines.length] = [this.POPUP_BEGIN_LINE, this.FontFormat_Attrib, (((("= " + this.txt[this.TXT_WAFFENSCHADEN]) + " * (1 + ") + this.actor[((this.LBL_SCR_CHAR_STAERKE_CAPTION + SchadenID) - this.LBL_SCR_CHAR_SCHADEN)].text) + " / 10)"), this.POPUP_END_LINE];
            };
            this.EnablePopup(SchadenID, popupLines);
            this.EnablePopup(SchadenLblID, popupLines);
            popupLines = new Array();
            popupLines[popupLines.length] = [this.POPUP_BEGIN_LINE, this.FontFormat_Attrib, this.actor[this.LBL_SCR_CHAR_RUESTUNG_CAPTION].text, this.POPUP_END_LINE];
            if (this.textDir == "right"){
                popupLines[popupLines.length] = [this.POPUP_BEGIN_LINE, this.FontFormat_Attrib, (((((((((((tmpHealth > 0)) ? "(" : "") + this.actor[(this.LBL_SCR_CHAR_STAERKE_CAPTION + 3)].text) + " × ") + String(tmpLifeFactor)) + " × (") + this.txt[this.TXT_HALL_LIST_COLUMN_4]) + " + 1)") + (((tmpHealth > 0)) ? ((") + " + String(tmpHealth)) + "%") : "")) + " ="), this.POPUP_END_LINE];
            } else {
                popupLines[popupLines.length] = [this.POPUP_BEGIN_LINE, this.FontFormat_Attrib, (((((((("= " + (((tmpHealth > 0)) ? "(" : "")) + this.actor[(this.LBL_SCR_CHAR_STAERKE_CAPTION + 3)].text) + " * ") + String(tmpLifeFactor)) + " * (") + this.txt[this.TXT_HALL_LIST_COLUMN_4]) + " + 1)") + (((tmpHealth > 0)) ? ((") + " + String(tmpHealth)) + "%") : "")), this.POPUP_END_LINE];
            };
            this.EnablePopup((this.LBL_SCR_CHAR_SCHADEN + 3), popupLines);
            this.EnablePopup((this.LBL_SCR_CHAR_SCHADEN_CAPTION + 3), popupLines);
            popupLines = new Array();
            popupLines[popupLines.length] = [this.POPUP_BEGIN_LINE, this.FontFormat_Attrib, this.actor[this.LBL_SCR_CHAR_WIDERSTAND_CAPTION].text, this.POPUP_END_LINE];
            if (this.textDir == "right"){
                popupLines[popupLines.length] = [this.POPUP_BEGIN_LINE, this.FontFormat_Attrib, (((this.actor[(this.LBL_SCR_CHAR_STAERKE_CAPTION + 4)].text + " × 5 ÷ (") + this.txt[this.TXT_GEGNERSTUFE]) + " × 2) ="), this.POPUP_END_LINE];
            } else {
                popupLines[popupLines.length] = [this.POPUP_BEGIN_LINE, this.FontFormat_Attrib, (((("= " + this.actor[(this.LBL_SCR_CHAR_STAERKE_CAPTION + 4)].text) + " * 5 / (") + this.txt[this.TXT_GEGNERSTUFE]) + " * 2)"), this.POPUP_END_LINE];
            };
            popupLines[popupLines.length] = [this.POPUP_BEGIN_LINE, this.FontFormat_Attrib, this.txt[this.TXT_KRITISCHMINMAX], this.POPUP_END_LINE];
            this.EnablePopup((this.LBL_SCR_CHAR_SCHADEN + 4), popupLines);
            this.EnablePopup((this.LBL_SCR_CHAR_SCHADEN_CAPTION + 4), popupLines);
            this.actor[this.LBL_SCR_CHAR_SCHADEN_CAPTION].text = this.txt[this.TXT_CHAR_SCHADEN];
            this.actor[this.LBL_SCR_CHAR_LEBEN_CAPTION].text = this.txt[this.TXT_CHAR_LEBEN];
            this.actor[this.LBL_SCR_CHAR_KAMPFWERT_CAPTION].text = this.txt[this.TXT_CHAR_KAMPFWERT];
            if (SchadenLblID > 0){
                this.actor[SchadenLblID].text = this.txt[this.TXT_SCHADEN];
                this.actor[SchadenID].text = ((tmpDamageMin + (((String(tmpDamageMin).length >= 6)) ? "-" : " - ")) + tmpDamageMax);
            };
            if (this.textDir == "right"){
                this.actor[this.LBL_SCR_CHAR_SCHADEN].x = ((this.POS_CHAR_PROP_COLUMN_6_X - 15) - this.actor[this.LBL_SCR_CHAR_SCHADEN].textWidth);
                this.actor[this.LBL_SCR_CHAR_KAMPFWERT].x = ((this.POS_CHAR_PROP_COLUMN_6_X - 15) - this.actor[this.LBL_SCR_CHAR_KAMPFWERT].textWidth);
                this.actor[this.LBL_SCR_CHAR_LEBEN].x = ((this.POS_CHAR_PROP_COLUMN_6_X - 15) - this.actor[this.LBL_SCR_CHAR_LEBEN].textWidth);
                this.actor[this.LBL_SCR_CHAR_RUESTUNG].x = ((this.POS_CHAR_PROP_COLUMN_6_X - 15) - this.actor[this.LBL_SCR_CHAR_RUESTUNG].textWidth);
                this.actor[this.LBL_SCR_CHAR_WIDERSTAND].x = ((this.POS_CHAR_PROP_COLUMN_6_X - 15) - this.actor[this.LBL_SCR_CHAR_WIDERSTAND].textWidth);
                this.actor[this.LBL_SCR_CHAR_SCHADEN_CAPTION].x = ((this.POS_CHAR_PROP_COLUMN_6_X + 110) - this.actor[this.LBL_SCR_CHAR_SCHADEN_CAPTION].textWidth);
                this.actor[this.LBL_SCR_CHAR_KAMPFWERT_CAPTION].x = ((this.POS_CHAR_PROP_COLUMN_6_X + 110) - this.actor[this.LBL_SCR_CHAR_KAMPFWERT_CAPTION].textWidth);
                this.actor[this.LBL_SCR_CHAR_LEBEN_CAPTION].x = ((this.POS_CHAR_PROP_COLUMN_6_X + 110) - this.actor[this.LBL_SCR_CHAR_LEBEN_CAPTION].textWidth);
                this.actor[this.LBL_SCR_CHAR_RUESTUNG_CAPTION].x = ((this.POS_CHAR_PROP_COLUMN_6_X + 110) - this.actor[this.LBL_SCR_CHAR_RUESTUNG_CAPTION].textWidth);
                this.actor[this.LBL_SCR_CHAR_WIDERSTAND_CAPTION].x = ((this.POS_CHAR_PROP_COLUMN_6_X + 110) - this.actor[this.LBL_SCR_CHAR_WIDERSTAND_CAPTION].textWidth);
                i = 0;
                while (i < 5) {
                    this.actor[(this.LBL_SCR_CHAR_STAERKE + i)].x = ((this.POS_CHAR_PROP_COLUMN_1_X + 50) - this.actor[(this.LBL_SCR_CHAR_STAERKE + i)].textWidth);
                    this.actor[(this.LBL_SCR_CHAR_STAERKE_CAPTION + i)].x = ((this.POS_CHAR_PROP_COLUMN_1_X + 150) - this.actor[(this.LBL_SCR_CHAR_STAERKE_CAPTION + i)].textWidth);
                    i = (i + 1);
                };
                if (!towerMode){
                    this.actor[this.LBL_CHAR_MOUNT_NAME].x = (((this.POS_CHAR_MOUNT_X + this.REL_CHAR_MOUNT_IMG_X) - 20) - this.actor[this.LBL_CHAR_MOUNT_NAME].textWidth);
                    this.actor[this.LBL_CHAR_MOUNT_DESCR].width = (this.REL_CHAR_MOUNT_IMG_X - 20);
                    this.actor[this.LBL_CHAR_MOUNT_RUNTIME].x = (((this.POS_CHAR_MOUNT_X + this.REL_CHAR_MOUNT_IMG_X) - 20) - this.actor[this.LBL_CHAR_MOUNT_RUNTIME].textWidth);
                    this.actor[this.LBL_CHAR_MOUNT_GAIN].x = (((this.POS_CHAR_MOUNT_X + this.REL_CHAR_MOUNT_IMG_X) - 20) - this.actor[this.LBL_CHAR_MOUNT_GAIN].textWidth);
                    this.MakeRightTextArea(this.INP_CHARDESC);
                    this.actor[this.CNT_SCR_CHAR_GILDE].x = ((((this.POS_GILDEEHRE_X + this.REL_GILDEEHRE_X) + 40) + 280) - this.actor[this.LBL_SCR_CHAR_GILDE].textWidth);
                };
            };
            if (!towerMode){
                i = 0;
                while (i < 3) {
                    this.SetCnt((this.CNT_CHAR_POTION + i), ((int(SG[(this.SG_POTION_TYPE + i)]))==0) ? this.C_EMPTY : this.GetItemID(12, int(SG[(this.SG_POTION_TYPE + i)]), 0, 0));
                    if (int(SG[(this.SG_POTION_TYPE + i)]) == 0){
                        this.EnablePopup((this.CNT_CHAR_POTION + i));
                    } else {
                        if (HideBackPack){
                            this.EnablePopup((this.CNT_CHAR_POTION + i), this.POPUP_BEGIN_LINE, this.txt[((this.TXT_ITMNAME_12 + int(SG[(this.SG_POTION_TYPE + i)])) - 1)], this.POPUP_END_LINE, this.POPUP_BEGIN_LINE, this.txt[(((int(SG[(this.SG_POTION_TYPE + i)]) == 16)) ? this.TXT_ITEM_ATTRIB_CLASS_12 : (this.TXT_ITEM_ATTRIB_CLASS_1 + ((int(SG[(this.SG_POTION_TYPE + i)]) - 1) % 5)))], this.REL_POPUP_TAB, (("+ " + SG[(this.SG_POTION_GAIN + i)]) + (((((int(SG[(this.SG_POTION_TYPE + i)]) == 16)) || ((SG[(this.SG_POTION_GAIN + i)] <= 25)))) ? "%" : "")), this.POPUP_END_LINE);
                        } else {
                            this.EnablePopup((this.CNT_CHAR_POTION + i), this.POPUP_BEGIN_LINE, this.txt[((this.TXT_ITMNAME_12 + int(SG[(this.SG_POTION_TYPE + i)])) - 1)], this.POPUP_END_LINE, this.POPUP_BEGIN_LINE, this.txt[(((int(SG[(this.SG_POTION_TYPE + i)]) == 16)) ? this.TXT_ITEM_ATTRIB_CLASS_12 : (this.TXT_ITEM_ATTRIB_CLASS_1 + ((int(SG[(this.SG_POTION_TYPE + i)]) - 1) % 5)))], this.REL_POPUP_TAB, (("+ " + SG[(this.SG_POTION_GAIN + i)]) + (((((int(SG[(this.SG_POTION_TYPE + i)]) == 16)) || ((SG[(this.SG_POTION_GAIN + i)] <= 25)))) ? "%" : "")), this.POPUP_END_LINE, this.POPUP_BEGIN_LINE, this.txt[this.TXT_REMAINING], this.REL_POPUP_TAB, this.TimeStr(SG[(this.SG_POTION_DURATION + i)], true), this.POPUP_END_LINE, this.POPUP_BEGIN_LINE, this.txt[this.TXT_POTION_KILL_INSTRUCTIONS], this.POPUP_END_LINE);
                        };
                    };
                    i = (i + 1);
                };
            };
            this.Move(this.CNT_CHAR_SLOT_1, this.POS_CHAR_SLOTS_LEFT_X, this.POS_CHAR_SLOTS_TOP_Y);
            this.Move(this.CNT_CHAR_SLOT_2, this.POS_CHAR_SLOTS_LEFT_X, this.POS_CHAR_SLOTS_ROW2_Y);
            this.Move(this.CNT_CHAR_SLOT_3, this.POS_CHAR_SLOTS_LEFT_X, this.POS_CHAR_SLOTS_ROW3_Y);
            this.Move(this.CNT_CHAR_SLOT_4, this.POS_CHAR_SLOTS_LEFT_X, this.POS_CHAR_SLOTS_ROW4_Y);
            this.Move(this.CNT_CHAR_SLOT_5, this.POS_CHAR_SLOTS_RIGHT_X, this.POS_CHAR_SLOTS_TOP_Y);
            this.Move(this.CNT_CHAR_SLOT_6, this.POS_CHAR_SLOTS_RIGHT_X, this.POS_CHAR_SLOTS_ROW2_Y);
            this.Move(this.CNT_CHAR_SLOT_7, this.POS_CHAR_SLOTS_RIGHT_X, this.POS_CHAR_SLOTS_ROW3_Y);
            this.Move(this.CNT_CHAR_SLOT_8, this.POS_CHAR_SLOTS_RIGHT_X, this.POS_CHAR_SLOTS_ROW4_Y);
            this.Move(this.CNT_CHAR_SLOT_9, this.POS_CHAR_SLOTS_R4C2_X, this.POS_CHAR_SLOTS_ROW4_Y);
            this.Move(this.CNT_CHAR_SLOT_10, this.POS_CHAR_SLOTS_R4C3_X, this.POS_CHAR_SLOTS_ROW4_Y);
            this.Move(this.CNT_CHAR_SLOT_11, this.POS_CHAR_SLOTS_LEFT_X, this.POS_CHAR_SLOTS_ROW5_Y);
            this.Move(this.CNT_CHAR_SLOT_12, this.POS_CHAR_SLOTS_R5C2_X, this.POS_CHAR_SLOTS_ROW5_Y);
            this.Move(this.CNT_CHAR_SLOT_13, this.POS_CHAR_SLOTS_R5C3_X, this.POS_CHAR_SLOTS_ROW5_Y);
            this.Move(this.CNT_CHAR_SLOT_14, this.POS_CHAR_SLOTS_R5C4_X, this.POS_CHAR_SLOTS_ROW5_Y);
            this.Move(this.CNT_CHAR_SLOT_15, this.POS_CHAR_SLOTS_RIGHT_X, this.POS_CHAR_SLOTS_ROW5_Y);
            this.Move(this.CNT_CHAR_SLOT_FIDGET_1, this.POS_SHOP_SLOTS_C1_X, this.POS_SHOP_SLOTS_R1_Y);
            this.Move(this.CNT_CHAR_SLOT_FIDGET_2, this.POS_SHOP_SLOTS_C2_X, this.POS_SHOP_SLOTS_R1_Y);
            this.Move(this.CNT_CHAR_SLOT_FIDGET_3, this.POS_SHOP_SLOTS_C3_X, this.POS_SHOP_SLOTS_R1_Y);
            this.Move(this.CNT_CHAR_SLOT_FIDGET_4, this.POS_SHOP_SLOTS_C1_X, this.POS_SHOP_SLOTS_R2_Y);
            this.Move(this.CNT_CHAR_SLOT_FIDGET_5, this.POS_SHOP_SLOTS_C2_X, this.POS_SHOP_SLOTS_R2_Y);
            this.Move(this.CNT_CHAR_SLOT_FIDGET_6, this.POS_SHOP_SLOTS_C3_X, this.POS_SHOP_SLOTS_R2_Y);
            this.Move(this.CNT_CHAR_SLOT_SHAKES_1, this.POS_SHOP_SLOTS_C1_X, this.POS_SHOP_SLOTS_R1_Y);
            this.Move(this.CNT_CHAR_SLOT_SHAKES_2, this.POS_SHOP_SLOTS_C2_X, this.POS_SHOP_SLOTS_R1_Y);
            this.Move(this.CNT_CHAR_SLOT_SHAKES_3, this.POS_SHOP_SLOTS_C3_X, this.POS_SHOP_SLOTS_R1_Y);
            this.Move(this.CNT_CHAR_SLOT_SHAKES_4, this.POS_SHOP_SLOTS_C1_X, this.POS_SHOP_SLOTS_R2_Y);
            this.Move(this.CNT_CHAR_SLOT_SHAKES_5, this.POS_SHOP_SLOTS_C2_X, this.POS_SHOP_SLOTS_R2_Y);
            this.Move(this.CNT_CHAR_SLOT_SHAKES_6, this.POS_SHOP_SLOTS_C3_X, this.POS_SHOP_SLOTS_R2_Y);
            tmpItmClass = 0;
            tmpItmPic = 0;
            tmpItmPic = int(SG[((((towerMode) ? (copyCatId + this.CPC_ITEMS) : this.SG_INVENTORY_OFFS) + (8 * this.SG_ITM_SIZE)) + this.SG_ITM_PIC)]);
            tmpItmClass = 0;
            while (tmpItmPic >= 1000) {
                tmpItmPic = (tmpItmPic - 1000);
                tmpItmClass = (tmpItmClass + 1);
            };
            i = 0;
            while (i < 15) {
                if ((((i < 10)) || (!(towerMode)))){
                    if (int(SG[((((towerMode) ? (copyCatId + this.CPC_ITEMS) : this.SG_INVENTORY_OFFS) + (i * this.SG_ITM_SIZE)) + this.SG_ITM_TYP)]) == 0){
                        SG[((((towerMode) ? (copyCatId + this.CPC_ITEMS) : this.SG_INVENTORY_OFFS) + (i * this.SG_ITM_SIZE)) + this.SG_ITM_PIC)] = 0;
                    };
                };
                if ((((i > 9)) && (HideBackPack))){
                    this.SetCnt((this.CNT_CHAR_SLOT_1 + i), this.C_EMPTY);
                    this.EnablePopup((this.CNT_CHAR_SLOT_1 + i));
                } else {
                    if ((((i == 9)) && ((tmpItmClass >= 1)))){
                        this.SetCnt((this.CNT_CHAR_SLOT_1 + i), this.GetArrowID(((towerMode) ? (copyCatId + this.CPC_ITEMS) : this.SG_INVENTORY_OFFS), 8, SG, true, ((tmpItmClass)==1) ? 1 : -1));
                        this.actor[(this.CNT_CHAR_SLOT_1 + i)].mouseEnabled = false;
                    } else {
                        this.SetCnt((this.CNT_CHAR_SLOT_1 + i), this.GetItemID(((towerMode) ? (((i > 9)) ? this.TSG_LOOT_SACK : (copyCatId + this.CPC_ITEMS)) : this.SG_INVENTORY_OFFS), ((((towerMode) && ((i > 9)))) ? (i - 10) : i), SG, ((towerMode) ? (((i > 9)) ? -1 : (-(this.copyCatSel) - 3)) : -2)));
                        this.ItemPopup((this.CNT_CHAR_SLOT_1 + i), (((towerMode) ? (((i > 9)) ? this.TSG_LOOT_SACK : (copyCatId + this.CPC_ITEMS)) : this.SG_INVENTORY_OFFS) + (((((towerMode) && ((i > 9)))) ? (i - 10) : i) * this.SG_ITM_SIZE)), SG, HideBackPack, NoPrices, towerMode, witchMode);
                        this.actor[(this.CNT_CHAR_SLOT_1 + i)].mouseEnabled = !((int(SG[((((towerMode) ? (((i > 9)) ? this.TSG_LOOT_SACK : (copyCatId + this.CPC_ITEMS)) : this.SG_INVENTORY_OFFS) + (((((towerMode) && ((i > 9)))) ? (i - 10) : i) * this.SG_ITM_SIZE)) + this.SG_ITM_TYP)]) == 0));
                    };
                };
                if (HideBackPack){
                    this.dragDropProhibit = true;
                } else {
                    this.dragDropProhibit = false;
                };
                i = (i + 1);
            };
            if (!towerMode){
                var IsEpic:* = function (pic:int):Boolean{
                    while (pic > 1000) {
                        pic = (pic - 1000);
                    };
                    return ((pic >= 50));
                };
                hasEpic = false;
                i = 0;
                while (i < 6) {
                    if (int(SG[((this.SG_FIDGET_ITEM1 + (i * this.SG_ITM_SIZE)) + this.SG_ITM_TYP)]) == 0){
                        SG[((this.SG_FIDGET_ITEM1 + (i * this.SG_ITM_SIZE)) + this.SG_ITM_PIC)] = 0;
                    };
                    this.SetCnt((this.CNT_CHAR_SLOT_FIDGET_1 + i), this.GetItemID(this.SG_FIDGET_ITEM1, i, SG));
                    this.ItemPopup((this.CNT_CHAR_SLOT_FIDGET_1 + i), (this.SG_FIDGET_ITEM1 + (i * this.SG_ITM_SIZE)), SG, HideBackPack);
                    if (((IsEpic(SG[((this.SG_FIDGET_ITEM1 + (i * this.SG_ITM_SIZE)) + this.SG_ITM_PIC)])) && (this.OnStage(this.IMG_SCR_FIDGET_BG)))){
                        hasEpic = true;
                    };
                    if (int(SG[((this.SG_SHAKES_ITEM1 + (i * this.SG_ITM_SIZE)) + this.SG_ITM_TYP)]) == 0){
                        SG[((this.SG_SHAKES_ITEM1 + (i * this.SG_ITM_SIZE)) + this.SG_ITM_PIC)] = 0;
                    };
                    this.SetCnt((this.CNT_CHAR_SLOT_SHAKES_1 + i), this.GetItemID(this.SG_SHAKES_ITEM1, i, SG));
                    this.ItemPopup((this.CNT_CHAR_SLOT_SHAKES_1 + i), (this.SG_SHAKES_ITEM1 + (i * this.SG_ITM_SIZE)), SG, HideBackPack);
                    if (((IsEpic(SG[((this.SG_SHAKES_ITEM1 + (i * this.SG_ITM_SIZE)) + this.SG_ITM_PIC)])) && (this.OnStage(this.IMG_SCR_SHAKES_BG)))){
                        hasEpic = true;
                    };
                    i = (i + 1);
                };
                if (!hasEpic){
                    this.BlockReroll = false;
                } else {
                    if (this.RollFrenzy.running){
                        this.ErrorMessage("Yay!");
                        this.Play(this.SND_JINGLE);
                        this.RollFrenzy.stop();
                    };
                };
                if (this.textDir == "right"){
                    this.actor[this.LBL_CHAR_RUESTUNG].text = ((SG[this.SG_ARMOR] + " :") + this.txt[this.TXT_RUESTUNG_SUM]);
                } else {
                    this.actor[this.LBL_CHAR_RUESTUNG].text = ((this.txt[this.TXT_RUESTUNG_SUM] + ": ") + SG[this.SG_ARMOR]);
                };
                DamageReduction = int((Number(SG[this.SG_ARMOR]) / Number(SG[this.SG_LEVEL])));
                DamageReductionMax = 50;
                switch (int(SG[this.SG_CLASS])){
                    case 2:
                        DamageReductionMax = 10;
                        break;
                    case 3:
                        DamageReductionMax = 25;
                        break;
                };
                if (DamageReduction > DamageReductionMax){
                    DamageReduction = DamageReductionMax;
                };
                popupLines = new Array();
                popupLines[popupLines.length] = [this.POPUP_BEGIN_LINE, this.FontFormat_Attrib, this.txt[this.TXT_RUESTUNG_SUM], this.POPUP_END_LINE];
                if (this.textDir == "right"){
                    popupLines[popupLines.length] = [this.POPUP_BEGIN_LINE, this.FontFormat_Attrib, ((((((((("(" + this.txt[this.TXT_MAX]) + " -") + String(DamageReductionMax)) + "%) ") + String(DamageReduction)) + "% :") + SG[this.SG_LEVEL]) + " ") + this.txt[this.TXT_RUESTUNG_SUM_HINT]), this.POPUP_END_LINE];
                } else {
                    popupLines[popupLines.length] = [this.POPUP_BEGIN_LINE, this.FontFormat_Attrib, (((((((((this.txt[this.TXT_RUESTUNG_SUM_HINT] + " ") + SG[this.SG_LEVEL]) + ": -") + String(DamageReduction)) + "% (") + this.txt[this.TXT_MAX]) + " -") + String(DamageReductionMax)) + "%)"), this.POPUP_END_LINE];
                };
                if (this.txt[this.TXT_SHIELD_FORMULA]){
                    popupLines[popupLines.length] = [this.POPUP_BEGIN_LINE, this.FontFormat_Attrib, this.txt[this.TXT_SHIELD_FORMULA], this.POPUP_END_LINE];
                };
                this.EnablePopup(this.LBL_CHAR_RUESTUNG, popupLines);
                this.EnablePopup(this.IMG_CHAR_RUESTUNG, popupLines);
            };
        }
        public function ItemPopup(slotID:int, sgIndex:int, SG:Array=undefined, HideBackPack:Boolean=false, NoPrices:Boolean=false, towerMode:Boolean=false, witchMode:Boolean=false){
            var attribLines:Array;
            var shopLines:Array;
            var i:int;
            var ii:int;
            var iii:int;
            var goldRaw:int;
            var gold:int;
            var silber:int;
            var pilze:int;
            var compareIndex:int;
            var compareVal:int;
            var compareFound:Boolean;
            var lossFound:Boolean;
            var hours:int;
            var socket:int;
            var socketPower:int;
            var enchant:int;
            var enchantPower:int;
            var itmColor:Number;
            var itmClass:int;
            var itmPic:int;
            var attribSum:int;
            var itmName:String;
            var itmQuote:String;
            var quoteArray:Array;
            towerMode = this.OnStage(this.BTN_PREV_COPYCAT);
            attribLines = new Array();
            shopLines = new Array();
            if (!(SG is Array)){
                SG = this.Savegame;
            };
            if (SG[(sgIndex + this.SG_ITM_TYP)] > 0){
                ii = 0;
                iii = 0;
                goldRaw = SG[(sgIndex + this.SG_ITM_GOLD)];
                if (witchMode){
                    if (SG[(sgIndex + this.SG_ITM_TYP)] == this.witchDesiredType){
                        goldRaw = (goldRaw * 2);
                    } else {
                        goldRaw = 0;
                    };
                };
                gold = int((goldRaw / 100));
                silber = int((goldRaw % 100));
                pilze = int((SG[(sgIndex + this.SG_ITM_MUSH)] % 100));
                compareIndex = 0;
                compareFound = false;
                lossFound = false;
                socket = int(SG[(sgIndex + this.SG_ITM_EXT_SOCKET)]);
                socketPower = int(SG[(sgIndex + this.SG_ITM_EXT_SOCKET_POWER)]);
                enchant = int(SG[(sgIndex + this.SG_ITM_EXT_ENCHANT)]);
                enchantPower = int(SG[(sgIndex + this.SG_ITM_EXT_ENCHANT_POWER)]);
                if (((!(HideBackPack)) && (!(NoPrices)))){
                    shopLines[shopLines.length] = this.FontFormat_Popup;
                    if (gold > 0){
                        if (silber > 0){
                            shopLines[shopLines.length] = [this.POPUP_BEGIN_LINE, String(gold), this.actor[this.IMG_IF_GOLD], String(silber), this.actor[this.IMG_IF_SILBER], this.POPUP_END_LINE];
                        } else {
                            shopLines[shopLines.length] = [this.POPUP_BEGIN_LINE, String(gold), this.actor[this.IMG_IF_GOLD], this.POPUP_END_LINE];
                        };
                    } else {
                        if (silber > 0){
                            shopLines[shopLines.length] = [this.POPUP_BEGIN_LINE, String(silber), this.actor[this.IMG_IF_SILBER], this.POPUP_END_LINE];
                        };
                    };
                    if (pilze > 0){
                        shopLines[shopLines.length] = [this.POPUP_BEGIN_LINE, String(pilze), this.actor[this.IMG_IF_PILZE], this.POPUP_END_LINE];
                    };
                    if (witchMode){
                        if (SG[(sgIndex + this.SG_ITM_TYP)] != this.witchDesiredType){
                            shopLines.push([this.POPUP_BEGIN_LINE, this.txt[this.TXT_WITCH_WRONGTYPE], this.POPUP_END_LINE]);
                        };
                    } else {
                        if ((((((pilze + gold) + silber) == 0)) && ((SG[(sgIndex + this.SG_ITM_TYP)] <= 10)))){
                            shopLines.push([this.POPUP_BEGIN_LINE, this.txt[this.TXT_TOILET_ITEM], this.POPUP_END_LINE]);
                        };
                    };
                };
                itmColor = 0;
                itmClass = 0;
                itmPic = int(SG[(sgIndex + this.SG_ITM_PIC)]);
                i = 0;
                while (i < 8) {
                    itmColor = (itmColor + Number(SG[((sgIndex + this.SG_ITM_SCHADEN_MIN) + i)]));
                    i++;
                };
                itmColor = (itmColor % 5);
                while (itmPic >= 1000) {
                    itmPic = (itmPic - 1000);
                    itmClass++;
                };
                if (this.C_DISPLAY_ITEM_INFO){
                    shopLines[shopLines.length] = [this.POPUP_BEGIN_LINE, this.actorURL[this.GetItemID(sgIndex, 0, SG)], this.POPUP_END_LINE];
                    shopLines[shopLines.length] = [this.POPUP_BEGIN_LINE, "Typ: ", this.REL_POPUP_TAB, String(SG[(sgIndex + this.SG_ITM_TYP)]), this.POPUP_END_LINE];
                    shopLines[shopLines.length] = [this.POPUP_BEGIN_LINE, "Pic: ", this.REL_POPUP_TAB, String(itmPic), this.POPUP_END_LINE];
                    shopLines[shopLines.length] = [this.POPUP_BEGIN_LINE, "Color: ", this.REL_POPUP_TAB, String((itmColor + 1)), this.POPUP_END_LINE];
                    shopLines[shopLines.length] = [this.POPUP_BEGIN_LINE, "Class: ", this.REL_POPUP_TAB, String((itmClass + 1)), this.POPUP_END_LINE];
                    shopLines[shopLines.length] = [this.POPUP_BEGIN_LINE, "Sock: ", this.REL_POPUP_TAB, String(socket), this.POPUP_END_LINE];
                    shopLines[shopLines.length] = [this.POPUP_BEGIN_LINE, "SockPwr: ", this.REL_POPUP_TAB, String(socketPower), this.POPUP_END_LINE];
                    shopLines[shopLines.length] = [this.POPUP_BEGIN_LINE, "Enchant: ", this.REL_POPUP_TAB, String(enchant), this.POPUP_END_LINE];
                    shopLines[shopLines.length] = [this.POPUP_BEGIN_LINE, "EnchantPwr: ", this.REL_POPUP_TAB, String(enchantPower), this.POPUP_END_LINE];
                };
                i = 0;
                while (i < 10) {
                    this.suggestionSlot[slotID] = 0;
                    if (int(SG[(sgIndex + this.SG_ITM_TYP)]) == this.CorrectItemType[i]){
                        if ((((slotID >= this.CNT_CHAR_SLOT_11)) && ((slotID <= this.CNT_CHAR_SLOT_SHAKES_6)))){
                            this.suggestionSlot[slotID] = (i + this.CNT_CHAR_SLOT_1);
                            if (SG[((this.SG_INVENTORY_OFFS + (this.SG_ITM_SIZE * i)) + this.SG_ITM_TYP)] > 0){
                                if (((this.compareItems) && (!(towerMode)))){
                                    compareIndex = (this.SG_INVENTORY_OFFS + (this.SG_ITM_SIZE * i));
                                };
                            };
                        };
                        break;
                    };
                    i++;
                };
                attribSum = 0;
                i = 0;
                while (i < 3) {
                    if ((((int(SG[((sgIndex + this.SG_ITM_ATTRIBTYP1) + i)]) > 0)) && ((int(SG[((sgIndex + this.SG_ITM_ATTRIBVAL1) + i)]) > 0)))){
                        var _temp1 = ii;
                        ii = (ii + 1);
                        var _local33 = _temp1;
                        attribLines[_local33] = this.POPUP_BEGIN_LINE;
                        if (int(SG[((sgIndex + this.SG_ITM_ATTRIBTYP1) + i)]) <= 6){
                            var _temp2 = ii;
                            ii = (ii + 1);
                            var _local34 = _temp2;
                            attribLines[_local34] = this.FontFormat_Popup;
                        } else {
                            var _temp3 = ii;
                            ii = (ii + 1);
                            _local34 = _temp3;
                            attribLines[_local34] = this.FontFormat_Popup;
                        };
                        var _temp4 = ii;
                        ii = (ii + 1);
                        _local34 = _temp4;
                        attribLines[_local34] = this.txt[(this.TXT_ITEM_ATTRIB_CLASSES + int(SG[((sgIndex + this.SG_ITM_ATTRIBTYP1) + i)]))];
                        var _temp5 = ii;
                        ii = (ii + 1);
                        var _local35 = _temp5;
                        attribLines[_local35] = (this.REL_POPUP_TAB + this.REL_POPUP_TAB_ADD);
                        if (int(SG[((sgIndex + this.SG_ITM_ATTRIBTYP1) + i)]) == 11){
                            hours = int(SG[((sgIndex + this.SG_ITM_ATTRIBVAL1) + i)]);
                            var _temp6 = ii;
                            ii = (ii + 1);
                            var _local36 = _temp6;
                            attribLines[_local36] = (((int((hours / 24)))>0) ? (((String(int((hours / 24))) + " ") + this.txt[(((int((hours / 24)) == 1)) ? this.TXT_DAY : this.TXT_DAYS)]) + ((((hours % 24) > 0)) ? ", " : "")) : "" + ((((hours % 24) > 0)) ? ((String((hours % 24)) + " ") + this.txt[((((hours % 24) == 1)) ? this.TXT_HOUR : this.TXT_HOURS)]) : ""));
                        } else {
                            if (int(SG[((sgIndex + this.SG_ITM_ATTRIBTYP1) + i)]) == 12){
                                var _temp7 = ii;
                                ii = (ii + 1);
                                _local36 = _temp7;
                                attribLines[_local36] = this.REL_POPUP_TAB;
                                var _temp8 = ii;
                                ii = (ii + 1);
                                var _local37 = _temp8;
                                attribLines[_local37] = (("+ " + SG[((sgIndex + this.SG_ITM_ATTRIBVAL1) + i)]) + "%");
                            } else {
                                if (SG[(sgIndex + this.SG_ITM_TYP)] == 12){
                                    var _temp9 = ii;
                                    ii = (ii + 1);
                                    _local36 = _temp9;
                                    attribLines[_local36] = this.REL_POPUP_TAB;
                                    if (SG[((sgIndex + this.SG_ITM_ATTRIBVAL1) + i)] <= 25){
                                        var _temp10 = ii;
                                        ii = (ii + 1);
                                        _local37 = _temp10;
                                        attribLines[_local37] = (("+ " + SG[((sgIndex + this.SG_ITM_ATTRIBVAL1) + i)]) + "%");
                                    } else {
                                        var _temp11 = ii;
                                        ii = (ii + 1);
                                        _local37 = _temp11;
                                        attribLines[_local37] = ("+ " + SG[((sgIndex + this.SG_ITM_ATTRIBVAL1) + i)]);
                                    };
                                } else {
                                    var _temp12 = ii;
                                    ii = (ii + 1);
                                    _local36 = _temp12;
                                    attribLines[_local36] = SG[((sgIndex + this.SG_ITM_ATTRIBVAL1) + i)];
                                };
                            };
                        };
                        if (compareIndex > 0){
                            compareFound = false;
                            iii = 0;
                            while (iii < 3) {
                                if ((((((int(SG[((compareIndex + this.SG_ITM_ATTRIBTYP1) + iii)]) == int(SG[((sgIndex + this.SG_ITM_ATTRIBTYP1) + i)]))) && ((int(SG[((compareIndex + this.SG_ITM_ATTRIBVAL1) + iii)]) > 0)))) && ((int(SG[((sgIndex + this.SG_ITM_ATTRIBVAL1) + i)]) > 0)))){
                                    compareVal = (int(SG[((sgIndex + this.SG_ITM_ATTRIBVAL1) + i)]) - int(SG[((compareIndex + this.SG_ITM_ATTRIBVAL1) + iii)]));
                                    if (int(SG[((compareIndex + this.SG_ITM_ATTRIBTYP1) + iii)]) == 6){
                                        compareVal = (compareVal * 5);
                                    };
                                    attribSum = (attribSum + compareVal);
                                    var _temp13 = ii;
                                    ii = (ii + 1);
                                    _local36 = _temp13;
                                    attribLines[_local36] = (((compareVal == 0)) ? this.FontFormat_Popup : (((compareVal > 0)) ? this.FontFormat_PopupCompareBetter : this.FontFormat_PopupCompareWorse));
                                    var _temp14 = ii;
                                    ii = (ii + 1);
                                    _local37 = _temp14;
                                    attribLines[_local37] = this.REL_COMPARE_TAB;
                                    var _temp15 = ii;
                                    ii = (ii + 1);
                                    var _local38 = _temp15;
                                    attribLines[_local38] = (((compareVal >= 0)) ? (((compareVal == 0)) ? "+-" : "+") : "-");
                                    var _temp16 = ii;
                                    ii = (ii + 1);
                                    var _local39 = _temp16;
                                    attribLines[_local39] = String(Math.abs(compareVal));
                                    var _temp17 = ii;
                                    ii = (ii + 1);
                                    var _local40 = _temp17;
                                    attribLines[_local40] = this.FontFormat_Popup;
                                    compareFound = true;
                                    break;
                                };
                                iii++;
                            };
                            if (!compareFound){
                                var _temp18 = ii;
                                ii = (ii + 1);
                                _local36 = _temp18;
                                attribLines[_local36] = this.FontFormat_PopupCompareBetter;
                                var _temp19 = ii;
                                ii = (ii + 1);
                                _local37 = _temp19;
                                attribLines[_local37] = this.REL_COMPARE_TAB;
                                var _temp20 = ii;
                                ii = (ii + 1);
                                _local38 = _temp20;
                                attribLines[_local38] = "+";
                                var _temp21 = ii;
                                ii = (ii + 1);
                                _local39 = _temp21;
                                attribLines[_local39] = String((SG[((sgIndex + this.SG_ITM_ATTRIBVAL1) + i)] * (((SG[((sgIndex + this.SG_ITM_ATTRIBTYP1) + i)] == 6)) ? 5 : 1)));
                                var _temp22 = ii;
                                ii = (ii + 1);
                                _local40 = _temp22;
                                attribLines[_local40] = this.FontFormat_Popup;
                                attribSum = (attribSum + (SG[((sgIndex + this.SG_ITM_ATTRIBVAL1) + i)] * (((SG[((sgIndex + this.SG_ITM_ATTRIBTYP1) + i)] == 6)) ? 5 : 1)));
                            };
                        };
                        var _temp23 = ii;
                        ii = (ii + 1);
                        _local36 = _temp23;
                        attribLines[_local36] = this.POPUP_END_LINE;
                    };
                    if ((((((compareIndex > 0)) && ((int(SG[((compareIndex + this.SG_ITM_ATTRIBTYP1) + i)]) > 0)))) && ((int(SG[((compareIndex + this.SG_ITM_ATTRIBVAL1) + i)]) > 0)))){
                        lossFound = false;
                        iii = 0;
                        while (iii < 3) {
                            if ((((((int(SG[((compareIndex + this.SG_ITM_ATTRIBTYP1) + i)]) == int(SG[((sgIndex + this.SG_ITM_ATTRIBTYP1) + iii)]))) && ((int(SG[((compareIndex + this.SG_ITM_ATTRIBVAL1) + i)]) > 0)))) && ((int(SG[((sgIndex + this.SG_ITM_ATTRIBVAL1) + iii)]) > 0)))){
                                lossFound = true;
                                break;
                            };
                            iii++;
                        };
                        if (!lossFound){
                            var _temp24 = ii;
                            ii = (ii + 1);
                            _local33 = _temp24;
                            attribLines[_local33] = this.POPUP_BEGIN_LINE;
                            var _temp25 = ii;
                            ii = (ii + 1);
                            _local34 = _temp25;
                            attribLines[_local34] = this.txt[(this.TXT_ITEM_ATTRIB_CLASSES + int(SG[((compareIndex + this.SG_ITM_ATTRIBTYP1) + i)]))];
                            var _temp26 = ii;
                            ii = (ii + 1);
                            _local35 = _temp26;
                            attribLines[_local35] = (this.REL_POPUP_TAB + this.REL_POPUP_TAB_ADD);
                            var _temp27 = ii;
                            ii = (ii + 1);
                            _local36 = _temp27;
                            attribLines[_local36] = "-";
                            var _temp28 = ii;
                            ii = (ii + 1);
                            _local37 = _temp28;
                            attribLines[_local37] = this.FontFormat_PopupCompareWorse;
                            var _temp29 = ii;
                            ii = (ii + 1);
                            _local38 = _temp29;
                            attribLines[_local38] = this.REL_COMPARE_TAB;
                            var _temp30 = ii;
                            ii = (ii + 1);
                            _local39 = _temp30;
                            attribLines[_local39] = "-";
                            var _temp31 = ii;
                            ii = (ii + 1);
                            _local40 = _temp31;
                            attribLines[_local40] = String((SG[((compareIndex + this.SG_ITM_ATTRIBVAL1) + i)] * (((SG[((compareIndex + this.SG_ITM_ATTRIBTYP1) + i)] == 6)) ? 5 : 1)));
                            var _temp32 = ii;
                            ii = (ii + 1);
                            var _local41 = _temp32;
                            attribLines[_local41] = this.FontFormat_Popup;
                            var _temp33 = ii;
                            ii = (ii + 1);
                            var _local42 = _temp33;
                            attribLines[_local42] = this.POPUP_END_LINE;
                            attribSum = (attribSum - (SG[((compareIndex + this.SG_ITM_ATTRIBVAL1) + i)] * (((SG[((compareIndex + this.SG_ITM_ATTRIBTYP1) + i)] == 6)) ? 5 : 1)));
                        };
                    };
                    i++;
                };
                itmName = this.GetItemName(sgIndex, SG);
                itmQuote = "";
                quoteArray = new Array();
                if (itmName.indexOf("|") > 0){
                    itmQuote = itmName.split("|")[1];
                    itmName = itmName.split("|")[0];
                    quoteArray[0] = this.POPUP_BEGIN_LINE;
                    quoteArray[1] = ((SG[(sgIndex + this.SG_ITM_TYP)])==14) ? this.FontFormat_ItemEnchantment : this.FontFormat_EpicItemQuote;
                    quoteArray[2] = itmQuote;
                    quoteArray[3] = this.FontFormat_Popup;
                    quoteArray[4] = this.POPUP_END_LINE;
                };
                if (SG[(sgIndex + this.SG_ITM_TYP)] < 8){
                    if ((itmClass + 1) != ((towerMode) ? (this.copyCatSel + 1) : this.Savegame[this.SG_CLASS])){
                        quoteArray.push(this.POPUP_BEGIN_LINE);
                        quoteArray.push(this.FontFormat_Error);
                        quoteArray.push(this.txt[this.TXT_NECESSARY_CLASS].split("%1").join(this.txt[((this.TXT_NECESSARY_CLASS + itmClass) + 1)]));
                        quoteArray.push(this.FontFormat_Popup);
                        quoteArray.push(this.POPUP_END_LINE);
                    };
                };
                if (SG[(sgIndex + this.SG_ITM_EXT_ENCHANT)] > 0){
                    if (SG[(sgIndex + this.SG_ITM_TYP)] == 14){
                        itmName = this.txt[this.TXT_SCROLL_NAME].split("%1").join(itmName);
                    } else {
                        quoteArray.push(this.POPUP_BEGIN_LINE);
                        quoteArray.push(this.FontFormat_ItemEnchantment);
                        quoteArray.push(this.txt[this.TXT_ENCHANT_HINT]);
                        quoteArray.push((this.REL_POPUP_TAB + this.REL_POPUP_TAB_ADD));
                        quoteArray.push(this.txt[((this.TXT_ITMNAME_14 + int(SG[(sgIndex + this.SG_ITM_EXT_ENCHANT)])) - 1)].split("|")[0]);
                        quoteArray.push(this.FontFormat_Popup);
                        quoteArray.push(this.POPUP_END_LINE);
                    };
                    quoteArray.push(this.POPUP_BEGIN_LINE);
                    quoteArray.push(this.FontFormat_ItemEnchantment);
                    quoteArray.push(this.txt[((this.TXT_ENCHANT_NAMES + int(SG[(sgIndex + this.SG_ITM_EXT_ENCHANT)])) - 1)]);
                    quoteArray.push((this.REL_POPUP_TAB + this.REL_POPUP_TAB_ADD));
                    quoteArray.push(this.txt[((this.TXT_ENCHANT_VALUES + int(SG[(sgIndex + this.SG_ITM_EXT_ENCHANT)])) - 1)].split("%1").join(String(SG[(sgIndex + this.SG_ITM_EXT_ENCHANT_POWER)])));
                    quoteArray.push(this.FontFormat_Popup);
                    quoteArray.push(this.POPUP_END_LINE);
                };
                if (int(SG[(sgIndex + this.SG_ITM_TYP)]) == 1){
                    if (compareIndex > 0){
                        compareVal = (Math.round(((Number(SG[(sgIndex + this.SG_ITM_SCHADEN_MIN)]) + Number(SG[(sgIndex + this.SG_ITM_SCHADEN_MAX)])) / 2)) - Math.round(((Number(SG[(compareIndex + this.SG_ITM_SCHADEN_MIN)]) + Number(SG[(compareIndex + this.SG_ITM_SCHADEN_MAX)])) / 2)));
                        this.EnablePopup(slotID, itmName, quoteArray, this.POPUP_BEGIN_LINE, this.txt[this.TXT_SCHADEN], (this.REL_POPUP_TAB + this.REL_POPUP_TAB_ADD), ((SG[(sgIndex + this.SG_ITM_SCHADEN_MIN)] + "-") + SG[(sgIndex + this.SG_ITM_SCHADEN_MAX)]), (("(~" + String(Math.round(((Number(SG[(sgIndex + this.SG_ITM_SCHADEN_MIN)]) + Number(SG[(sgIndex + this.SG_ITM_SCHADEN_MAX)])) / 2)))) + ")"), (((compareVal == 0)) ? this.FontFormat_Popup : (((compareVal > 0)) ? this.FontFormat_PopupCompareBetter : this.FontFormat_PopupCompareWorse)), this.REL_COMPARE_TAB, ((((compareVal >= 0)) ? (((compareVal == 0)) ? "+- " : "+ ") : "- ") + String(Math.abs(compareVal))), this.FontFormat_Popup, this.POPUP_END_LINE, attribLines, shopLines);
                    } else {
                        this.EnablePopup(slotID, itmName, quoteArray, this.POPUP_BEGIN_LINE, this.txt[this.TXT_SCHADEN], (this.REL_POPUP_TAB + this.REL_POPUP_TAB_ADD), ((SG[(sgIndex + this.SG_ITM_SCHADEN_MIN)] + "-") + SG[(sgIndex + this.SG_ITM_SCHADEN_MAX)]), (("(~" + String(Math.round(((Number(SG[(sgIndex + this.SG_ITM_SCHADEN_MIN)]) + Number(SG[(sgIndex + this.SG_ITM_SCHADEN_MAX)])) / 2)))) + ")"), this.POPUP_END_LINE, attribLines, shopLines);
                    };
                } else {
                    if (int(SG[(sgIndex + this.SG_ITM_TYP)]) == 2){
                        if (compareIndex > 0){
                            compareVal = (int(SG[(sgIndex + this.SG_ITM_SCHADEN_MIN)]) - int(SG[(compareIndex + this.SG_ITM_SCHADEN_MIN)]));
                            this.EnablePopup(slotID, itmName, quoteArray, this.POPUP_BEGIN_LINE, this.txt[this.TXT_BLOCKEN], (this.REL_POPUP_TAB + this.REL_POPUP_TAB_ADD), (SG[(sgIndex + this.SG_ITM_SCHADEN_MIN)] + " %"), (((compareVal == 0)) ? this.FontFormat_Popup : (((compareVal > 0)) ? this.FontFormat_PopupCompareBetter : this.FontFormat_PopupCompareWorse)), this.REL_COMPARE_TAB, ((((compareVal >= 0)) ? (((compareVal == 0)) ? "+- " : "+ ") : "- ") + String(Math.abs(compareVal))), this.FontFormat_Popup, this.POPUP_END_LINE, attribLines, shopLines);
                        } else {
                            this.EnablePopup(slotID, itmName, quoteArray, this.POPUP_BEGIN_LINE, this.txt[this.TXT_BLOCKEN], (this.REL_POPUP_TAB + this.REL_POPUP_TAB_ADD), (SG[(sgIndex + this.SG_ITM_SCHADEN_MIN)] + " %"), this.POPUP_END_LINE, attribLines, shopLines);
                        };
                    } else {
                        if (int(SG[(sgIndex + this.SG_ITM_SCHADEN_MIN)]) > 0){
                            if (compareIndex > 0){
                                compareVal = (int(SG[(sgIndex + this.SG_ITM_SCHADEN_MIN)]) - int(SG[(compareIndex + this.SG_ITM_SCHADEN_MIN)]));
                                this.EnablePopup(slotID, itmName, quoteArray, this.POPUP_BEGIN_LINE, this.txt[this.TXT_RUESTUNG], (this.REL_POPUP_TAB + this.REL_POPUP_TAB_ADD), SG[(sgIndex + this.SG_ITM_SCHADEN_MIN)], (((compareVal == 0)) ? this.FontFormat_Popup : (((compareVal > 0)) ? this.FontFormat_PopupCompareBetter : this.FontFormat_PopupCompareWorse)), this.REL_COMPARE_TAB, ((((compareVal >= 0)) ? (((compareVal == 0)) ? "+- " : "+ ") : "- ") + String(Math.abs(compareVal))), this.FontFormat_Popup, this.POPUP_END_LINE, attribLines, shopLines);
                            } else {
                                this.EnablePopup(slotID, itmName, quoteArray, this.POPUP_BEGIN_LINE, this.txt[this.TXT_RUESTUNG], (this.REL_POPUP_TAB + this.REL_POPUP_TAB_ADD), SG[(sgIndex + this.SG_ITM_SCHADEN_MIN)], this.POPUP_END_LINE, attribLines, shopLines);
                            };
                        } else {
                            this.EnablePopup(slotID, itmName, quoteArray, attribLines, shopLines);
                        };
                    };
                };
            } else {
                this.EnablePopup(slotID);
            };
        }
        public function getHlIndex(inStr:String):int{
            return (int(this.DecodeChat(inStr, true)));
        }
        public function DecodeChat(inStr:String, getHLMode:Boolean=false, getGBMode:Boolean=false):String{
            var namePart:String;
            var timePart:String;
            var crestStr:String;
            var authorStr:String;
            var dateStr:String;
            if (this.textDir == "right"){
                if (inStr.indexOf("§") != -1){
                    namePart = inStr.split("§")[0];
                    if (namePart.substr(-1, 1) == ":"){
                        namePart = namePart.substr(0, (namePart.length - 1));
                    };
                    timePart = namePart.substr(0, namePart.indexOf(" "));
                    namePart = namePart.substr((namePart.indexOf(" ") + 1));
                    inStr = ((((inStr.split("§")[1] + " §:") + namePart) + " ") + timePart);
                };
            };
            inStr = inStr.split("§").join(((getHLMode) ? "§" : ""));
            if (((!((inStr.indexOf("#?") == -1))) && ((inStr.indexOf("##") == -1)))){
                crestStr = inStr.split("#?")[1];
                authorStr = inStr.split("#?")[0];
                dateStr = inStr.substr(0, 5);
                authorStr = authorStr.substr(6);
                authorStr = authorStr.substr(0, (authorStr.length - 3));
                inStr = ((dateStr + " ") + this.txt[this.TXT_CREST_SUGGESTION].split("%1").join(authorStr));
                if (!this.crestSuggestion[inStr]){
                    this.newCrestSuggested = inStr;
                };
                this.crestSuggestion[inStr] = crestStr;
            };
            inStr = inStr.split("#{").join("/");
            inStr = inStr.split("#}").join(";");
            inStr = inStr.split("##").join("#");
            inStr = inStr.split("%u20AC").join("€");
            if (inStr.substr(0, 1) == "#"){
                if (this.textDir == "right"){
                    if (inStr.substr(0, 4) == "#dg#"){
                        inStr = ((((((((this.txt[this.TXT_DONATE_GOLD_2] + " ") + String((Number(inStr.split("#")[3]) / 100))) + " ") + this.txt[this.TXT_DONATE_GOLD_1]) + " ") + inStr.split("#")[2].split(" ")[1]) + " ") + inStr.split("#")[2].split(" ")[0]);
                    } else {
                        if (inStr.substr(0, 4) == "#dm#"){
                            inStr = ((((((((this.txt[this.TXT_DONATE_MUSH_2] + " ") + inStr.split("#")[3]) + " ") + this.txt[this.TXT_DONATE_MUSH_1]) + " ") + inStr.split("#")[2].split(" ")[1]) + " ") + inStr.split("#")[2].split(" ")[0]);
                        } else {
                            if (inStr.substr(0, 4) == "#sr#"){
                                if (this.txt[this.TXT_SERVER_STARTED]){
                                    inStr = this.txt[this.TXT_SERVER_STARTED].split("%1").join(this.TimeStr(int(inStr.split("#")[2])));
                                } else {
                                    inStr = "Server restarted at %1".split("%1").join(this.TimeStr(int(inStr.split("#")[2])));
                                };
                            } else {
                                if (inStr.substr(0, 4) == "#bd#"){
                                    if (int(inStr.split("#")[3]) == 0){
                                        inStr = this.txt[(this.TXT_CATAPULT + 7)];
                                    } else {
                                        inStr = ((((this.txt[this.TXT_BUILDING_1].split("%1").join(this.txt[((this.TXT_GILDE_GEBAEUDE_NAME1 + int(inStr.split("#")[3])) - 1)]) + " ") + inStr.split("#")[2].split(" ")[1]) + " ") + inStr.split("#")[2].split(" ")[0]);
                                    };
                                } else {
                                    if (inStr.substr(0, 4) == "#ra#"){
                                        inStr = ((((((((this.txt[(this.TXT_RANKMSG_6 + int(inStr.split("#")[3]))] + " ") + inStr.split("#")[4]) + " ") + this.txt[(this.TXT_RANKMSG_1 + int(inStr.split("#")[3]))]) + " ") + inStr.split("#")[2].split(" ")[1]) + " ") + inStr.split("#")[2].split(" ")[0]);
                                    } else {
                                        if (inStr.substr(0, 4) == "#in#"){
                                            inStr = ((((this.txt[this.TXT_GUILD_JOINED] + " ") + inStr.split("#")[2].split(" ")[1]) + " ") + inStr.split("#")[2].split(" ")[0]);
                                        } else {
                                            if (inStr.substr(0, 4) == "#ou#"){
                                                inStr = ((((this.txt[this.TXT_GUILD_QUIT] + " ") + inStr.split("#")[2].split(" ")[1]) + " ") + inStr.split("#")[2].split(" ")[0]);
                                            } else {
                                                if (inStr.substr(0, 4) == "#rv#"){
                                                    inStr = this.txt[this.TXT_REVOLT_CHAT_MSG].split("%1").join(inStr.split("#")[2]).split("%2").join(inStr.split("#")[3]).split("%3").join(inStr.split("#")[4]);
                                                } else {
                                                    if (inStr.substr(0, 4) == "#a+#"){
                                                        inStr = this.txt[this.TXT_GUILD_ATTACK_SUCCESS].split("%1").join(((inStr.split("#")[2].split(" ")[1] + " ") + inStr.split("#")[2].split(" ")[0])).split("%2").join(inStr.split("#")[3]);
                                                        if (getGBMode){
                                                            return ("1");
                                                        };
                                                    } else {
                                                        if (inStr.substr(0, 4) == "#a-#"){
                                                            inStr = this.txt[this.TXT_GUILD_ATTACK_FAIL].split("%1").join(((inStr.split("#")[2].split(" ")[1] + " ") + inStr.split("#")[2].split(" ")[0])).split("%2").join(inStr.split("#")[3]);
                                                            if (getGBMode){
                                                                return ("1");
                                                            };
                                                        } else {
                                                            if (inStr.substr(0, 4) == "#d+#"){
                                                                inStr = this.txt[this.TXT_GUILD_DEFENSE_SUCCESS].split("%1").join(((inStr.split("#")[2].split(" ")[1] + " ") + inStr.split("#")[2].split(" ")[0])).split("%2").join(inStr.split("#")[3]);
                                                                if (getGBMode){
                                                                    return ("1");
                                                                };
                                                            } else {
                                                                if (inStr.substr(0, 4) == "#d-#"){
                                                                    inStr = this.txt[this.TXT_GUILD_DEFENSE_FAIL].split("%1").join(((inStr.split("#")[2].split(" ")[1] + " ") + inStr.split("#")[2].split(" ")[0])).split("%2").join(inStr.split("#")[3]);
                                                                    if (getGBMode){
                                                                        return ("1");
                                                                    };
                                                                } else {
                                                                    if (inStr.substr(0, 4) == "#r+#"){
                                                                        inStr = this.txt[this.TXT_GUILD_RAID_SUCCESS].split("%1").join(((("(50/" + inStr.split("#")[2]) + ") ") + this.txt[((this.TXT_DUNGEON_NAMES + int(inStr.split("#")[2])) - 1)]));
                                                                        if (getGBMode){
                                                                            return ("1");
                                                                        };
                                                                    } else {
                                                                        if (inStr.substr(0, 4) == "#r-#"){
                                                                            inStr = this.txt[this.TXT_GUILD_RAID_FAIL].split("%1").join(((("(50/" + inStr.split("#")[2]) + ") ") + this.txt[((this.TXT_DUNGEON_NAMES + int(inStr.split("#")[2])) - 1)]));
                                                                            if (getGBMode){
                                                                                return ("1");
                                                                            };
                                                                        } else {
                                                                            if (inStr.substr(0, 4) == "#lu#"){
                                                                                inStr = this.txt[this.TXT_GUILD_LEVEL_UP].split("%1").join(inStr.split("#")[2]).split("%2").join(inStr.split("#")[3]);
                                                                            } else {
                                                                                if (inStr.substr(0, 4) == "#du#"){
                                                                                    inStr = this.txt[this.TXT_GUILD_DUNGEON_COMPLETED].split("%1").join(inStr.split("#")[2]).split("%2").join(this.txt[(((inStr.split("#")[3] == 100)) ? 9538 : ((this.TXT_DUNGEON_NAME + (1 * inStr.split("#")[3])) - 1))].split("|")[0]).split("%3").join(inStr.split("#")[4]);
                                                                                } else {
                                                                                    if (inStr.substr(0, 4) == "#ep#"){
                                                                                        inStr = this.txt[this.TXT_GUILD_EPICITEM].split("%1").join(inStr.split("#")[2]).split("%2").join(this.GetItemName(0, inStr.split("#")[3].split("/")));
                                                                                    };
                                                                                };
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                } else {
                    if (inStr.substr(0, 4) == "#dg#"){
                        inStr = ((((((inStr.split("#")[2] + " ") + this.txt[this.TXT_DONATE_GOLD_1]) + " ") + String((Number(inStr.split("#")[3]) / 100))) + " ") + this.txt[this.TXT_DONATE_GOLD_2]);
                    } else {
                        if (inStr.substr(0, 4) == "#dm#"){
                            inStr = ((((((inStr.split("#")[2] + " ") + this.txt[this.TXT_DONATE_MUSH_1]) + " ") + inStr.split("#")[3]) + " ") + this.txt[this.TXT_DONATE_MUSH_2]);
                        } else {
                            if (inStr.substr(0, 4) == "#sr#"){
                                if (this.txt[this.TXT_SERVER_STARTED]){
                                    inStr = this.txt[this.TXT_SERVER_STARTED].split("%1").join(this.TimeStr(int(inStr.split("#")[2])));
                                } else {
                                    inStr = "Server restarted at %1".split("%1").join(this.TimeStr(int(inStr.split("#")[2])));
                                };
                            } else {
                                if (inStr.substr(0, 4) == "#bd#"){
                                    if (int(inStr.split("#")[3]) == 0){
                                        inStr = ((inStr.split("#")[2] + " ") + this.txt[(this.TXT_CATAPULT + 7)]);
                                    } else {
                                        inStr = ((inStr.split("#")[2] + " ") + this.txt[this.TXT_BUILDING_1].split("%1").join(this.txt[((this.TXT_GILDE_GEBAEUDE_NAME1 + int(inStr.split("#")[3])) - 1)]));
                                    };
                                } else {
                                    if (inStr.substr(0, 4) == "#ra#"){
                                        inStr = ((((((inStr.split("#")[2] + " ") + this.txt[(this.TXT_RANKMSG_1 + int(inStr.split("#")[3]))]) + " ") + inStr.split("#")[4]) + " ") + this.txt[(this.TXT_RANKMSG_6 + int(inStr.split("#")[3]))]);
                                    } else {
                                        if (inStr.substr(0, 4) == "#in#"){
                                            inStr = ((inStr.split("#")[2] + " ") + this.txt[this.TXT_GUILD_JOINED]);
                                        } else {
                                            if (inStr.substr(0, 4) == "#ou#"){
                                                inStr = ((inStr.split("#")[2] + " ") + this.txt[this.TXT_GUILD_QUIT]);
                                            } else {
                                                if (inStr.substr(0, 4) == "#rv#"){
                                                    inStr = this.txt[this.TXT_REVOLT_CHAT_MSG].split("%1").join(inStr.split("#")[2]).split("%2").join(inStr.split("#")[3]).split("%3").join(inStr.split("#")[4]);
                                                } else {
                                                    if (inStr.substr(0, 4) == "#a+#"){
                                                        inStr = this.txt[this.TXT_GUILD_ATTACK_SUCCESS].split("%1").join(inStr.split("#")[2]).split("%2").join(inStr.split("#")[3]);
                                                        if (getGBMode){
                                                            return ("1");
                                                        };
                                                    } else {
                                                        if (inStr.substr(0, 4) == "#a-#"){
                                                            inStr = this.txt[this.TXT_GUILD_ATTACK_FAIL].split("%1").join(inStr.split("#")[2]).split("%2").join(inStr.split("#")[3]);
                                                            if (getGBMode){
                                                                return ("1");
                                                            };
                                                        } else {
                                                            if (inStr.substr(0, 4) == "#d+#"){
                                                                inStr = this.txt[this.TXT_GUILD_DEFENSE_SUCCESS].split("%1").join(inStr.split("#")[2]).split("%2").join(inStr.split("#")[3]);
                                                                if (getGBMode){
                                                                    return ("1");
                                                                };
                                                            } else {
                                                                if (inStr.substr(0, 4) == "#d-#"){
                                                                    inStr = this.txt[this.TXT_GUILD_DEFENSE_FAIL].split("%1").join(inStr.split("#")[2]).split("%2").join(inStr.split("#")[3]);
                                                                    if (getGBMode){
                                                                        return ("1");
                                                                    };
                                                                } else {
                                                                    if (inStr.substr(0, 4) == "#r+#"){
                                                                        inStr = this.txt[this.TXT_GUILD_RAID_SUCCESS].split("%1").join((((this.txt[((this.TXT_DUNGEON_NAMES + int(inStr.split("#")[2])) - 1)] + " (") + inStr.split("#")[2]) + "/50)"));
                                                                        if (getGBMode){
                                                                            return ("1");
                                                                        };
                                                                    } else {
                                                                        if (inStr.substr(0, 4) == "#r-#"){
                                                                            inStr = this.txt[this.TXT_GUILD_RAID_FAIL].split("%1").join((((this.txt[((this.TXT_DUNGEON_NAMES + int(inStr.split("#")[2])) - 1)] + " (") + inStr.split("#")[2]) + "/50)"));
                                                                            if (getGBMode){
                                                                                return ("1");
                                                                            };
                                                                        } else {
                                                                            if (inStr.substr(0, 4) == "#lu#"){
                                                                                inStr = this.txt[this.TXT_GUILD_LEVEL_UP].split("%1").join(inStr.split("#")[2]).split("%2").join(inStr.split("#")[3]);
                                                                            } else {
                                                                                if (inStr.substr(0, 4) == "#du#"){
                                                                                    inStr = this.txt[this.TXT_GUILD_DUNGEON_COMPLETED].split("%1").join(inStr.split("#")[2]).split("%2").join(this.txt[(((inStr.split("#")[3] == 100)) ? 9538 : ((this.TXT_DUNGEON_NAME + (1 * inStr.split("#")[3])) - 1))].split("|")[0]).split("%3").join(inStr.split("#")[4]);
                                                                                } else {
                                                                                    if (inStr.substr(0, 4) == "#ep#"){
                                                                                        inStr = this.txt[this.TXT_GUILD_EPICITEM].split("%1").join(inStr.split("#")[2]).split("%2").join(this.GetItemName(0, inStr.split("#")[3].split("/")));
                                                                                    };
                                                                                };
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
                if (this.OnStage(this.LBL_GILDE_TITEL)){
                    this.SendAction(this.ACT_SCREEN_GILDEN);
                };
                if (getGBMode){
                    return ("0");
                };
                if (getHLMode){
                    return (String(inStr.length));
                };
            };
            if (getHLMode){
                return (String(inStr.indexOf("§")));
            };
            return (inStr);
        }
        public function ChatLine(line:String, isError:Boolean=false, hlIndex:int=-1, isWhisper:Boolean=false){
            var i:* = 0;
            var nextLine:* = null;
            var line:* = line;
            var isError:Boolean = isError;
            var hlIndex:int = hlIndex;
            var isWhisper:Boolean = isWhisper;
            nextLine = "";
            var seekSpace:* = false;
            var noSpace:* = false;
            var indent:* = 0;
            if (this.GildeChatScroll > 0){
                this.GildeChatScroll++;
            };
            if (this.GildeChatScroll > 35){
                this.GildeChatScroll = 35;
            };
            line = this.SwapWords(line);
            while (line.split("  ").length > 1) {
                line = line.split("  ").join(" ");
            };
            i = 0;
            while (i < 39) {
                var _local6 = this.actor[(this.LBL_GILDE_CHAT + i)];
                with (_local6) {
                    defaultTextFormat = actor[((LBL_GILDE_CHAT + i) + 1)].defaultTextFormat;
                    htmlText = actor[((LBL_GILDE_CHAT + i) + 1)].htmlText;
                    y = (POS_GILDE_CHAT_Y + (((i + GildeChatScroll) - 35) * REL_GILDE_CHAT_Y));
                    visible = ((((i + GildeChatScroll) >= 35)) && (((i + GildeChatScroll) < 40)));
                };
                i = (i + 1);
            };
            _local6 = this.actor[(this.LBL_GILDE_CHAT + 39)];
            with (_local6) {
                defaultTextFormat = ((isError) ? FontFormat_ChatError : FontFormat_Chat);
                if (isWhisper){
                    defaultTextFormat = FontFormat_ChatWhisper;
                };
                do  {
                    text = line;
                    if ((((textWidth > SIZE_GILDE_TEXT_X)) || (seekSpace))){
                        if (!noSpace){
                            seekSpace = true;
                        };
                        if ((((textWidth <= SIZE_GILDE_TEXT_X)) && ((line.substr((line.length - 1)) == " ")))){
                            seekSpace = false;
                        } else {
                            nextLine = (line.substr((line.length - 1)) + nextLine);
                        };
                        line = line.substr(0, (line.length - 1));
                        if (line == ""){
                            line = nextLine;
                            nextLine = "";
                            noSpace = true;
                            seekSpace = false;
                            text = line;
                        };
                    };
                } while ((((textWidth > SIZE_GILDE_TEXT_X)) || (seekSpace)));
                if (hlIndex > -1){
                    if (hlIndex > text.length){
                        hlIndex = text.length;
                    };
                    if (isWhisper){
                        if (textDir == "right"){
                            setTextFormat(FontFormat_HighlightWhisper, hlIndex, length);
                        } else {
                            setTextFormat(FontFormat_HighlightWhisper, 0, hlIndex);
                        };
                    } else {
                        if (textDir == "right"){
                            setTextFormat(FontFormat_Highlight, hlIndex, length);
                        } else {
                            setTextFormat(FontFormat_Highlight, 0, hlIndex);
                        };
                    };
                };
                if (GildeChatScroll == 0){
                    y = (POS_GILDE_CHAT_Y + ((39 - 35) * REL_GILDE_CHAT_Y));
                    visible = true;
                };
            };
            if (nextLine != ""){
                this.ChatLine(nextLine, isError, -1, isWhisper);
            };
        }
        public function PayMethod(DealerMenu:int):int{
            if (DealerMenu > (this.PayMethods.length - 1)){
                return (0);
            };
            return (this.PayMethods[DealerMenu]);
        }
        public function ShowBetResult(won:Boolean){
            var doShowBetResults:* = null;
            var won:* = won;
            doShowBetResults = function (){
                var BallX:* = 0;
                Add(((won) ? BNC_HUTMANN_WON : BNC_HUTMANN_LOST));
                SetBtnText(BTN_HUTMANN_OK, txt[((won) ? TXT_HUTMANN_BTN_YEAH : TXT_HUTMANN_BTN_DAMN)]);
                Add(BTN_HUTMANN_OK);
                var _local2 = actor[LBL_HUTMANN_TEXT];
                with (_local2) {
                    text = txt[((won) ? TXT_HUTMANN_WIN : TXT_HUTMANN_LOSE)];
                    x = (POS_SCREEN_TITLE_X - (textWidth / 2));
                };
                switch (CupChosen){
                    case 0:
                        Add(IMG_HUTBECHER_1_CLICK);
                        Remove(IMG_HUTBECHER_1_IDLE);
                        if (won){
                            BallX = POS_HUTMANN_KUGEL_X1;
                        } else {
                            BallX = ((Math.random())<0.5) ? POS_HUTMANN_KUGEL_X2 : POS_HUTMANN_KUGEL_X3;
                        };
                        break;
                    case 1:
                        Add(IMG_HUTBECHER_2_CLICK);
                        Remove(IMG_HUTBECHER_2_IDLE);
                        if (won){
                            BallX = POS_HUTMANN_KUGEL_X2;
                        } else {
                            BallX = ((Math.random())<0.5) ? POS_HUTMANN_KUGEL_X1 : POS_HUTMANN_KUGEL_X3;
                        };
                        break;
                    case 2:
                        Add(IMG_HUTBECHER_3_CLICK);
                        Remove(IMG_HUTBECHER_3_IDLE);
                        if (won){
                            BallX = POS_HUTMANN_KUGEL_X3;
                        } else {
                            BallX = ((Math.random())<0.5) ? POS_HUTMANN_KUGEL_X1 : POS_HUTMANN_KUGEL_X2;
                        };
                        break;
                };
                actor[IMG_HUTKUGEL].x = BallX;
                if (won){
                    Play(SND_JINGLE);
                    Add(IMG_HUTKUGEL);
                    actor[LBL_HUTMANN_GOLDBET].text = String((int(actor[LBL_HUTMANN_GOLDBET].text) * 2));
                    actor[LBL_HUTMANN_MUSHBET].text = String((int(actor[LBL_HUTMANN_MUSHBET].text) * 2));
                } else {
                    actor[LBL_HUTMANN_GOLDBET].text = "0";
                    actor[LBL_HUTMANN_MUSHBET].text = "0";
                };
            };
            this.Load(((won) ? this.BNC_HUTMANN_WON : this.BNC_HUTMANN_LOST));
            switch (this.CupChosen){
                case 0:
                    this.Load(this.IMG_HUTBECHER_1_CLICK);
                    break;
                case 1:
                    this.Load(this.IMG_HUTBECHER_2_CLICK);
                    break;
                case 2:
                    this.Load(this.IMG_HUTBECHER_3_CLICK);
                    break;
            };
            if (won){
                this.Load(this.IMG_HUTKUGEL);
            };
            this.WhenLoaded(doShowBetResults);
        }
        public function toiletTankAdjustEvent(evt:TimerEvent=undefined){
            this.actor[(this.IMG_TOILET + 1)].y = ((190 + 122) - (this.toiletTankCurrent * 118));
            if (this.toiletTankCurrent > (this.toiletTankDest + 0.01)){
                this.toiletTankCurrent = (this.toiletTankCurrent - 0.01);
            } else {
                if (this.toiletTankCurrent < (this.toiletTankDest - 0.01)){
                    this.toiletTankCurrent = (this.toiletTankCurrent + 0.01);
                } else {
                    this.toiletTankCurrent = this.toiletTankDest;
                    this.toiletTankAdjustTimer.stop();
                };
            };
        }
        public function ShowToilet(isFull:int, toiletLevel:int, toiletExp:Number, toiletMaxExp:Number, itemAdded:int=-1){
            var doShowToilet:* = null;
            var isFull:* = isFull;
            var toiletLevel:* = toiletLevel;
            var toiletExp:* = toiletExp;
            var toiletMaxExp:* = toiletMaxExp;
            var itemAdded:int = itemAdded;
            doShowToilet = function (buildScreen:Boolean=true){
                var i:* = 0;
                var toiletItemAddFrame:* = 0;
                var toiletItemAddTimer:* = null;
                var gatheredItemId:* = 0;
                var itemDestX:* = NaN;
                var itemDestY:* = NaN;
                var toiletItemAddFrameEvent:* = null;
                var buildScreen:Boolean = buildScreen;
                toiletTankDest = (toiletExp / toiletMaxExp);
                toiletTankAdjustTimer.stop();
                if (buildScreen){
                    toiletTankCurrent = toiletTankDest;
                    Remove(BNC_CHAR_RIGHTPANE);
                    Add(BNC_SCREEN_TOILET);
                    Hide(BNC_TOILET_OVERLAYS);
                    Show(IMG_TOILET_CHAIN);
                };
                DisplayInventory(undefined, true);
                EnablePopup(CA_TOILET_TANK, txt[TXT_TOILET_HINT].split("%1").join(String(int((toiletTankDest * 100)))).split("%2").join(String(toiletExp)).split("%3").join(String(toiletMaxExp)));
                if (isFull == 0){
                    Hide(IMG_TOILET_IDLE);
                } else {
                    Show(IMG_TOILET_IDLE);
                };
                Hide(IMG_TOILET_DROP);
                actor[LBL_TOILET_AURA].text = txt[(TXT_TOILET_HINT + 4)].split("#").join(String.fromCharCode(13)).split("%1").join(String(toiletLevel));
                actor[LBL_TOILET_AURA].x = ((POS_SCR_SHOP_BG_X + 248) - (actor[LBL_TOILET_AURA].textWidth / 2));
                toiletTankAdjustEvent();
                if (toiletTankDest != toiletTankCurrent){
                    toiletTankAdjustTimer.start();
                };
                if (itemAdded >= 0){
                    toiletItemAddFrameEvent = function (evt:TimerEvent){
                        if ((((toiletItemAddFrame >= 50)) || (!(OnStage(IMG_TOILET))))){
                            actor[gatheredItemId].x = itemDestX;
                            actor[gatheredItemId].y = itemDestY;
                            actor[gatheredItemId].alpha = 1;
                            toiletItemAddTimer.stop();
                            toiletItemAddTimer.removeEventListener(TimerEvent.TIMER, toiletItemAddFrameEvent);
                        } else {
                            if (toiletItemAddFrame >= 35){
                                actor[gatheredItemId].alpha = 1;
                                actor[gatheredItemId].x = ((actor[gatheredItemId].x + itemDestX) / 2);
                                actor[gatheredItemId].y = ((actor[gatheredItemId].y + itemDestY) / 2);
                            } else {
                                actor[gatheredItemId].alpha = (toiletItemAddFrame / 35);
                                actor[gatheredItemId].y = (actor[gatheredItemId].y - 5);
                            };
                        };
                        i = 0;
                        while (i < 7) {
                            Hide((IMG_TOILET_FLUSH + i));
                            i++;
                        };
                        Show((IMG_TOILET_FLUSH + int(((toiletItemAddFrame / 50) * 7))));
                        toiletItemAddFrame++;
                    };
                    toiletItemAddFrame = 0;
                    toiletItemAddTimer = new Timer(25);
                    Play(SND_TOILET_FLUSH);
                    toiletItemAddTimer.addEventListener(TimerEvent.TIMER, toiletItemAddFrameEvent);
                    toiletItemAddTimer.start();
                    gatheredItemId = (CNT_CHAR_SLOT_11 + itemAdded);
                    switch (itemAdded){
                        case 0:
                            itemDestX = POS_CHAR_SLOTS_LEFT_X;
                            itemDestY = POS_CHAR_SLOTS_ROW5_Y;
                            break;
                        case 1:
                            itemDestX = POS_CHAR_SLOTS_R5C2_X;
                            itemDestY = POS_CHAR_SLOTS_ROW5_Y;
                            break;
                        case 2:
                            itemDestX = POS_CHAR_SLOTS_R5C3_X;
                            itemDestY = POS_CHAR_SLOTS_ROW5_Y;
                            break;
                        case 3:
                            itemDestX = POS_CHAR_SLOTS_R5C4_X;
                            itemDestY = POS_CHAR_SLOTS_ROW5_Y;
                            break;
                        case 4:
                            itemDestX = POS_CHAR_SLOTS_RIGHT_X;
                            itemDestY = POS_CHAR_SLOTS_ROW5_Y;
                            break;
                    };
                    actor[gatheredItemId].alpha = 0;
                    actor[gatheredItemId].x = (POS_SCR_SHOP_BG_X + 205);
                    actor[gatheredItemId].y = 590;
                };
            };
            if (this.OnStage(this.IMG_TOILET)){
                doShowToilet(false);
                return;
            };
            this.Load(this.BNC_SCREEN_TOILET);
            this.ShowCharacterScreen();
            this.WhenLoaded(doShowToilet);
        }
        public function ShowWitch(witchData:Array, chaldronBubble:Boolean=false, enchantCost:int=0){
            var doShowWitch:* = null;
            var witchData:* = witchData;
            var chaldronBubble:Boolean = chaldronBubble;
            var enchantCost:int = enchantCost;
            doShowWitch = function (buildScreen:Boolean=true){
                var i:int;
                if (buildScreen){
                    Remove(BNC_CHAR_RIGHTPANE);
                    Add(BNC_SCREEN_WITCH);
                };
                if (!lightMode){
                    witchAniTimer.start();
                };
                witchDesiredType = witchData[3];
                DisplayInventory(undefined, false, false, 0, true);
                i = 0;
                while (i < int(witchData[7])) {
                    Load(GetItemID(14, int(witchData[(9 + (3 * i))]), undefined, 0));
                    SetCnt((CNT_WITCH_SCROLL + i), GetItemID(14, int(witchData[(9 + (3 * i))]), undefined, 0));
                    suggestionSlot[(CNT_WITCH_SCROLL + i)] = (CNT_CHAR_SLOT_1 + CorrectItemType.indexOf(Math.floor((int(witchData[(9 + (3 * i))]) / 10))));
                    trace(i, Savegame[((SG_INVENTORY_OFFS + (CorrectItemType.indexOf(Math.floor((int(witchData[(9 + (3 * i))]) / 10))) * SG_ITM_SIZE)) + SG_ITM_EXT_ENCHANT)]);
                    if (Savegame[((SG_INVENTORY_OFFS + (CorrectItemType.indexOf(Math.floor((int(witchData[(9 + (3 * i))]) / 10))) * SG_ITM_SIZE)) + SG_ITM_EXT_ENCHANT)] != 0){
                        actor[(CNT_WITCH_SCROLL + i)].alpha = 0.5;
                        EnablePopup((CNT_WITCH_SCROLL + i), POPUP_BEGIN_LINE, txt[((TXT_ITMNAME_14 + int(witchData[(9 + (3 * i))])) - 1)].split("|")[0], POPUP_END_LINE, POPUP_BEGIN_LINE, txt[((TXT_ITMNAME_14 + int(witchData[(9 + (3 * i))])) - 1)].split("|")[1], POPUP_END_LINE, POPUP_BEGIN_LINE, txt[TXT_SCROLL_DATE].split("%1").join(TimeStr(Number(witchData[(10 + (3 * i))]), true)), POPUP_END_LINE, POPUP_BEGIN_LINE, txt[TXT_SCROLL_BOUGHT], POPUP_END_LINE);
                    } else {
                        if (enchantCost){
                            actor[(CNT_WITCH_SCROLL + i)].alpha = 1;
                            EnablePopup((CNT_WITCH_SCROLL + i), POPUP_BEGIN_LINE, txt[((TXT_ITMNAME_14 + int(witchData[(9 + (3 * i))])) - 1)].split("|")[0], POPUP_END_LINE, POPUP_BEGIN_LINE, txt[((TXT_ITMNAME_14 + int(witchData[(9 + (3 * i))])) - 1)].split("|")[1], POPUP_END_LINE, POPUP_BEGIN_LINE, txt[TXT_SCROLL_DATE].split("%1").join(TimeStr(Number(witchData[(10 + (3 * i))]), true)), POPUP_END_LINE, POPUP_BEGIN_LINE, txt[TXT_SCROLL_BUYNOW], POPUP_END_LINE, POPUP_BEGIN_LINE, actor[IMG_IF_GOLD], String(Math.floor((enchantCost / 100))), POPUP_END_LINE);
                        } else {
                            actor[(CNT_WITCH_SCROLL + i)].alpha = 1;
                            EnablePopup((CNT_WITCH_SCROLL + i), POPUP_BEGIN_LINE, txt[((TXT_ITMNAME_14 + int(witchData[(9 + (3 * i))])) - 1)].split("|")[0], POPUP_END_LINE, POPUP_BEGIN_LINE, txt[((TXT_ITMNAME_14 + int(witchData[(9 + (3 * i))])) - 1)].split("|")[1], POPUP_END_LINE, POPUP_BEGIN_LINE, txt[TXT_SCROLL_DATE].split("%1").join(TimeStr(Number(witchData[(10 + (3 * i))]), true)), POPUP_END_LINE, POPUP_BEGIN_LINE, txt[TXT_SCROLL_BUYHINT], POPUP_END_LINE);
                        };
                    };
                    actor[(CNT_WITCH_SCROLL + i)].scaleX = 0.8;
                    actor[(CNT_WITCH_SCROLL + i)].scaleY = 0.8;
                    Add((CNT_WITCH_SCROLL + i));
                    i++;
                };
                if (witchData[2] == -1){
                    EnablePopup(CA_WITCH, txt[(TXT_WITCH_HINT + 6)]);
                    EnablePopup(CA_CHALDRON, txt[(TXT_WITCH_HINT + 7)]);
                } else {
                    if (witchData[5] == 0){
                        EnablePopup(CA_WITCH, txt[TXT_WITCH_HINT].split("%1").join(txt[((TXT_WITCH_HINT + 12) + int(witchData[3]))]));
                        EnablePopup(CA_CHALDRON, POPUP_BEGIN_LINE, txt[(TXT_WITCH_HINT + 2)], (REL_POPUP_TAB + 100), txt[((TXT_WITCH_HINT + 12) + int(witchData[3]))], POPUP_END_LINE, POPUP_BEGIN_LINE, txt[(TXT_WITCH_HINT + 3)], (REL_POPUP_TAB + 100), txt[(TXT_WITCH_HINT + 4)].split("%1").join(String((Math.round(((witchData[1] / witchData[2]) * 100000)) / 1000))).split("%2").join(String(witchData[2])), POPUP_END_LINE);
                    } else {
                        EnablePopup(CA_WITCH, txt[(TXT_WITCH_HINT + 1)]);
                        EnablePopup(CA_CHALDRON, txt[(TXT_WITCH_HINT + 5)]);
                    };
                };
            };
            if (chaldronBubble){
                this.Play(this.SND_TOILET_DROP);
            };
            if (this.OnStage(this.IMG_WITCH)){
                doShowWitch(false);
                return;
            };
            this.Load(this.BNC_SCREEN_WITCH);
            this.ShowCharacterScreen(undefined, true);
            this.WhenLoaded(doShowWitch);
        }
        public function NextFight(evt:TimerEvent){
            var guildFightExp:int;
            var guildFightHonor:int;
            var par:Array;
            var thisRoundFighterName:String;
            var GuildBattleData:Array;
            var tmpStr:*;
            guildFightExp = 0;
            guildFightHonor = 0;
            if (this.fights.length < 2){
                this.fights = new Array();
                return;
            };
            thisRoundFighterName = "";
            var nextRoundFighterName:String = "";
            var thisRoundOppName:String = "";
            if (this.skipGuildFights > 0){
                while (this.fights.length > 3) {
                    if (thisRoundFighterName != ""){
                        this.lastRoundFighterName = thisRoundFighterName;
                    };
                    if (this.fights[0].split(";")[2].split("/")[5] > 0){
                        thisRoundFighterName = this.fights[0].split(";")[2].split("/")[0];
                    } else {
                        thisRoundFighterName = "?";
                    };
                    thisRoundOppName = this.fights[0].split(";")[2].split("/")[15];
                    if (thisRoundFighterName.toLowerCase() == this.actor[this.INP_NAME].getChildAt(1).text.toLowerCase()){
                        if (this.skipGuildFights == 1){
                            this.skipGuildFights = -1;
                            break;
                        };
                    };
                    if (this.fights[2]){
                        nextRoundFighterName = this.fights[2].split(";")[2].split("/")[0];
                        if (this.lastRoundFighterName == thisRoundFighterName){
                            if (this.winners[("name_" + thisRoundFighterName)]){
                                var _local10 = this.winners;
                                var _local11 = ("name_" + thisRoundFighterName);
                                var _local12 = (_local10[_local11] + 1);
                                _local10[_local11] = _local12;
                            } else {
                                this.winners[("name_" + thisRoundFighterName)] = 1;
                            };
                        };
                    };
                    this.fights.shift();
                    this.fights.shift();
                };
            };
            thisRoundFighterName = this.fights[0].split(";")[2].split("/")[0];
            if (thisRoundFighterName.toLowerCase() == this.actor[this.INP_NAME].getChildAt(1).text.toLowerCase()){
                if (this.skipGuildFights == 1){
                    this.skipGuildFights = -1;
                };
            };
            par = this.fights.shift().split(";");
            GuildBattleData = this.fights.shift().split("/");
            if (this.fights.length == 1){
                tmpStr = this.fights.pop();
                guildFightExp = tmpStr.split(";")[1];
                guildFightHonor = tmpStr.split(";")[2];
            };
            this.PostFightMode = false;
            this.fightNumber = ((this.guildFightCount - int(((this.fights.length + 1) / 2))) + (((this.guildFightCount % 2))==0) ? 1 : 0);
            if (this.fightNumber > this.guildFightCount){
                this.fightNumber = 1;
            };
            this.ShowFightScreen(par[0].split("/"), par[1].split("/"), (par[6] == "1"), par[2].split("/"), (par[5] == "2"), ((par[3] + "/") + par[4]).split("/"), int(par[7]), int(par[8]), (par[5] == "3"), false, int(par[9]), GuildBattleData, (this.fights.length <= 1), guildFightExp, guildFightHonor, par[10], par[11], par[12]);
        }
        public function guildFightTimerFn(evt:TimerEvent){
            if (this.guildAttackTime != 0){
                if (!this.WaitingFor(this.guildAttackTime)){
                    if (this.OnStage(this.LBL_GILDE_CHAT_CAPTION)){
                        this.SendAction(this.ACT_SCREEN_GILDEN);
                    } else {
                        this.PulseGilde = true;
                    };
                    this.guildAttackTime = 0;
                };
            };
            if (this.guildDefenceTime != 0){
                if (!this.WaitingFor(this.guildDefenceTime)){
                    if (this.OnStage(this.LBL_GILDE_CHAT_CAPTION)){
                        this.SendAction(this.ACT_SCREEN_GILDEN);
                    } else {
                        this.PulseGilde = true;
                    };
                    this.guildDefenceTime = 0;
                };
            };
        }
        public function ActionHandler(event:DataEvent){
            var dataStr:* = null;
            var act:* = 0;
            var parStr:* = null;
            var i:* = 0;
            var ii:* = 0;
            var tmpArray:* = null;
            var tmpFmt:* = null;
            var line:* = 0;
            var HallListName:* = null;
            var HallListGilde:* = null;
            var isMine:* = false;
            var logInAfterPixel:* = false;
            var par:* = null;
            var pa:* = null;
            var pas:* = null;
            var pxlStr:* = null;
            var pxlArr:* = null;
            var inVar:* = false;
            var pixel:* = undefined;
            var DoActZauberladen:* = null;
            var DoActSchmiede:* = null;
            var tmpByteArray:* = null;
            var bitArray:* = null;
            var PaymentLink:* = null;
            var externalWhisperer:* = null;
            var postReadText:* = null;
            var tmpFighterArray:* = undefined;
            var ichAnfg:* = undefined;
            var erAnfg:* = undefined;
            var tmpFightArray:* = undefined;
            var ichEnde:* = undefined;
            var erEnde:* = undefined;
            var rundenZahl:* = undefined;
            var tmpHonor:* = undefined;
            var tmpGold:* = undefined;
            var tmpSilver:* = undefined;
            var alertWords:* = null;
            var event:* = event;
            var LoadTrackingPixel:* = function (url:String){
                var req:* = null;
                var variables:* = null;
                var pixelLoader:* = null;
                var pixel_success:* = null;
                var pixel_failed:* = null;
                var url:* = url;
                trc("Tracking Pixel Load:", url);
                if (url.indexOf("?") == -1){
                    url = (url + "?random=");
                } else {
                    url = (url + "&random=");
                };
                url = (url + String(int((Math.random() * 100000))));
                url = (url + (("&" + "had_account=") + ((hadAccount) ? "1" : "0")));
                if (param_reload_pixel){
                    trc("Tracking Pixel Reload Mode for:", url);
                    trc("CID userd", param_cid);
                    trc("Action", act);
                    req = new URLRequest("index.php");
                    req.method = URLRequestMethod.POST;
                    variables = new URLVariables();
                    variables.pixel_url = url;
                    variables.pixel_cid = param_cid;
                    variables.pixel_player_id = Savegame[SG_PLAYER_ID];
                    variables.pixel_action = (((nextPxl == 0)) ? act : Math.abs(nextPxl));
                    req.data = variables;
                    logInAfterPixel = false;
                    navigateToURL(req, "_self");
                } else {
                    if (param_internal_pixel){
                        pixel_success = function (evt:Event){
                            var pixelData:String;
                            pixelData = pixelLoader.data;
                            if ((((pixelData.toLowerCase().substr(0, 7) == "http://")) || ((pixelData.toLowerCase().substr(0, 8) == "https://")))){
                                ExternalInterface.call("loadpixel", pixelData);
                            };
                            pixelLoader.removeEventListener(Event.COMPLETE, pixel_success);
                            pixelLoader.removeEventListener(IOErrorEvent.IO_ERROR, pixel_failed);
                            pixelLoader.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, pixel_failed);
                        };
                        pixel_failed = function (evt:Event){
                            pixelLoader.removeEventListener(Event.COMPLETE, pixel_success);
                            pixelLoader.removeEventListener(IOErrorEvent.IO_ERROR, pixel_failed);
                            pixelLoader.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, pixel_failed);
                        };
                        pixelLoader = new URLLoader();
                        pixelLoader.addEventListener(Event.COMPLETE, pixel_success);
                        pixelLoader.addEventListener(IOErrorEvent.IO_ERROR, pixel_failed);
                        pixelLoader.addEventListener(SecurityErrorEvent.SECURITY_ERROR, pixel_failed);
                        pixelLoader.load(new URLRequest(url));
                    } else {
                        ExternalInterface.call("loadpixel", url);
                    };
                };
            };
            DoActZauberladen = function (){
                ErrorMessage(" ");
                Remove(BNC_CHAR_RIGHTPANE);
                Remove(IMG_FIDGET_EPCIOVL);
                Remove(IMG_SHAKES_EPCIOVL);
                Add(BNC_SCREEN_FIDGET);
                if (Savegame[SG_LEVEL] >= 66){
                    Add(CA_GOTO_WITCH);
                };
                if ((((specialAction == 2)) || ((specialAction == 5)))){
                    Add(IMG_FIDGET_EPCIOVL);
                    actor[IMG_FIDGET_EPCIOVL].mouseEnabled = false;
                };
                if (!SleepTime()){
                    Remove(BNC_FIDGET_NIGHT);
                } else {
                    Remove(BNC_FIDGET_DAY);
                };
                if (Capabilities.version.substr(0, 3) != "IOS"){
                    if (lightMode){
                        Remove(IMG_FIDGET_TAGKERZE);
                        Remove(IMG_FIDGET_NACHTKERZE);
                    };
                };
                Remove(IMG_FIDGET_BLINZELN);
            };
            DoActSchmiede = function (){
                ErrorMessage(" ");
                Remove(BNC_CHAR_RIGHTPANE);
                Remove(IMG_FIDGET_EPCIOVL);
                Remove(IMG_SHAKES_EPCIOVL);
                Add(BNC_SCREEN_SHAKES);
                if ((((specialAction == 2)) || ((specialAction == 5)))){
                    Add(IMG_SHAKES_EPCIOVL);
                    actor[IMG_SHAKES_EPCIOVL].mouseEnabled = false;
                };
                Remove(IMG_SHAKES_IDLE, IMG_SHAKES_IDLE1, IMG_SHAKES_IDLE2, IMG_SHAKES_IDLE3);
                if (!SleepTime()){
                    Remove(IMG_SHAKES_NIGHT, IMG_SHAKES_BLINZELN1, IMG_SHAKES_BLINZELN2);
                } else {
                    Remove(IMG_SHAKES_DAY);
                };
            };
            var ParseSavegame:* = function (strSaveGame:String, FillFaceVariables:Boolean=true, noSpoil:Boolean=false){
                var i:* = 0;
                var debugInfo:* = null;
                var binStr:* = null;
                var strSaveGame:* = strSaveGame;
                var FillFaceVariables:Boolean = FillFaceVariables;
                var noSpoil:Boolean = noSpoil;
                debugInfo = "";
                Savegame = ("0/" + strSaveGame).split("/");
                if (!noSpoil){
                    towerLevel = int((Savegame[SG_MOUNT] / 65536));
                };
                Savegame[SG_MOUNT] = (Savegame[SG_MOUNT] - (towerLevel * 65536));
                binStr = Number(Savegame[SG_GENDER]).toString(2);
                while (binStr.length < 32) {
                    binStr = ("0" + binStr);
                };
                i = 0;
                while (i < 13) {
                    MirrorPieces[i] = (binStr.substr((i + 1), 1) == "1");
                    i = (i + 1);
                };
                hasMirror = (binStr.substr(23, 1) == "1");
                canRob = (binStr.substr(22, 1) == "1");
                if (binStr.substr(31) == "1"){
                    Savegame[SG_GENDER] = 1;
                } else {
                    Savegame[SG_GENDER] = 2;
                };
                if ((Savegame[SG_ALBUM] - 10000) > contentMax){
                    Savegame[SG_ALBUM] = (contentMax + 10000);
                };
                i = 0;
                while (i < SG_BACKPACK_SIZE) {
                    ExpandItemStructure(Savegame, (SG_BACKPACK_OFFS + (i * SG_ITM_SIZE)));
                    i = (i + 1);
                };
                i = 0;
                while (i < SG_INVENTORY_SIZE) {
                    ExpandItemStructure(Savegame, (SG_INVENTORY_OFFS + (i * SG_ITM_SIZE)));
                    i = (i + 1);
                };
                i = 0;
                while (i < 6) {
                    ExpandItemStructure(Savegame, (SG_SHAKES_ITEM1 + (i * SG_ITM_SIZE)));
                    ExpandItemStructure(Savegame, (SG_FIDGET_ITEM1 + (i * SG_ITM_SIZE)));
                    i = (i + 1);
                };
                i = 0;
                while (i < 3) {
                    ExpandItemStructure(Savegame, (SG_QUEST_OFFER_REWARD_ITM1 + (i * SG_ITM_SIZE)));
                    i = (i + 1);
                };
                i = 0;
                while (i < Savegame.length) {
                    debugInfo = (debugInfo + (((String(i) + "=") + Savegame[i]) + ", "));
                    i = (i + 1);
                };
                if (((!((LastLevel == 0))) && ((int(Savegame[SG_LEVEL]) > LastLevel)))){
                    LevelUp = true;
                    PulseChar = true;
                };
                LastLevel = int(Savegame[SG_LEVEL]);
                FriendLink = ((("http://" + server) + "/index.php?rec=") + Savegame[SG_PLAYER_ID]);
                if (oldAch.length != 0){
                    i = 0;
                    while (i < 8) {
                        if (achLevel(Savegame, i) > oldAch[i]){
                            oldAch[i] = -(achLevel(Savegame, i));
                        } else {
                            oldAch[i] = achLevel(Savegame, i);
                        };
                        i = (i + 1);
                    };
                } else {
                    i = 0;
                    while (i < 8) {
                        oldAch[i] = achLevel(Savegame, i);
                        i = (i + 1);
                    };
                };
                if ((((oldAlbum >= 0)) && ((Savegame[SG_ALBUM] > oldAlbum)))){
                    AlbumEffect = true;
                };
                oldAlbum = Savegame[SG_ALBUM];
                if (FillFaceVariables){
                    CharVolk = Savegame[SG_RACE];
                    CharMann = (Savegame[SG_GENDER] == 1);
                    CharKaste = Savegame[SG_CLASS];
                    CharMouth = Savegame[SG_FACE_1];
                    CharBeard = Savegame[SG_FACE_5];
                    CharNose = Savegame[SG_FACE_6];
                    CharEyes = Savegame[SG_FACE_4];
                    CharBrows = Savegame[SG_FACE_3];
                    CharEars = Savegame[SG_FACE_7];
                    CharHair = Savegame[SG_FACE_2];
                    CharSpecial = Savegame[SG_FACE_8];
                    CharSpecial2 = Savegame[SG_FACE_9];
                    i = CharHair;
                    CharColor = 0;
                    while (i > 100) {
                        i = (i - 100);
                        CharColor++;
                    };
                };
                if (!noSpoil){
                    if (textDir == "right"){
                        var _local5 = actor[IMG_IF_GOLD];
                        with (_local5) {
                            x = POS_IF_LBL_GOLDPILZE_X;
                        };
                        _local5 = actor[LBL_IF_GOLD];
                        with (_local5) {
                            text = String(int((Savegame[SG_GOLD] / 100)));
                            x = ((POS_IF_LBL_GOLDPILZE_X - textWidth) - 10);
                        };
                        _local5 = actor[IMG_IF_SILBER];
                        with (_local5) {
                            x = ((actor[LBL_IF_GOLD].x - width) - 10);
                        };
                        _local5 = actor[LBL_IF_SILBER];
                        with (_local5) {
                            text = ((((int((Savegame[SG_GOLD] % 100)) < 10)) ? "0" : "") + String(int((Savegame[SG_GOLD] % 100))));
                            x = ((actor[IMG_IF_SILBER].x - textWidth) - 10);
                        };
                        _local5 = actor[LBL_IF_PILZE];
                        with (_local5) {
                            text = Savegame[SG_MUSH];
                            x = ((POS_IF_LBL_GOLDPILZE_X - textWidth) - 10);
                        };
                        if (txt[TXT_MUSHROOMS_BOUGHT]){
                            EnablePopup(LBL_IF_PILZE, txt[TXT_MUSHROOMS_BOUGHT].split("%1").join(Savegame[SG_MUSHROOMS_MAY_DONATE]));
                        };
                    } else {
                        _local5 = actor[LBL_IF_SILBER];
                        with (_local5) {
                            text = ((((int((Savegame[SG_GOLD] % 100)) < 10)) ? "0" : "") + String(int((Savegame[SG_GOLD] % 100))));
                            x = ((POS_IF_LBL_GOLDPILZE_X - textWidth) - 10);
                        };
                        _local5 = actor[IMG_IF_GOLD];
                        with (_local5) {
                            x = ((actor[LBL_IF_SILBER].x - 24) - 10);
                        };
                        _local5 = actor[LBL_IF_GOLD];
                        with (_local5) {
                            text = String(int((Savegame[SG_GOLD] / 100)));
                            x = ((actor[IMG_IF_GOLD].x - textWidth) - 10);
                        };
                        _local5 = actor[LBL_IF_PILZE];
                        with (_local5) {
                            text = Savegame[SG_MUSH];
                            x = ((POS_IF_LBL_GOLDPILZE_X - textWidth) - 10);
                        };
                        if (txt[TXT_MUSHROOMS_BOUGHT]){
                            EnablePopup(LBL_IF_PILZE, txt[TXT_MUSHROOMS_BOUGHT].split("%1").join(Savegame[SG_MUSHROOMS_MAY_DONATE]));
                        };
                    };
                };
                Add(BNC_IF_STATS);
                if (Number(Savegame[SG_SERVER_TIME]) > 0){
                    ServerTime.setTime(((1000 * Number(Savegame[SG_SERVER_TIME])) - ((1000 * 60) * 60)));
                    LocalTime = new Date();
                    TimeCalc.start();
                };
                if (sessionID == ""){
                    trc("Fehler: Keine Session ID für PHP-Tunneling vergeben. PHP-Tunneling wird deaktiviert.");
                    ShowLoginScreen();
                } else {
                    trc("Session ID für PHP Tunneling:", sessionID);
                };
                if (int(Savegame[SG_GUILD_INDEX]) != GildenID){
                    GildenID = int(Savegame[SG_GUILD_INDEX]);
                    if (GildenID != 0){
                        SendAction(ACT_REQUEST_GUILD, Savegame[SG_GUILD_INDEX]);
                    };
                };
                if ((((int(Savegame[SG_UNREAD_MESSAGES]) > 0)) && (!(OnStage(CNT_POST_LIST))))){
                    PulsePost = true;
                };
                if (int(Savegame[SG_LOCKDURATION]) != 0){
                    RequestLogout();
                };
                if (nextPxl < 0){
                    nextPxl = Math.abs(nextPxl);
                };
            };
            var RequestPlayerScreen:* = function (evt:MouseEvent){
                var selIndex:int;
                var selRow:int;
                selIndex = actor[CNT_HALL_LIST].getChildIndex(evt.target);
                if (selIndex < 5){
                    return;
                };
                selRow = (int(((selIndex - 5) / 6)) + 1);
                selName = HallListName[selRow];
                selGilde = HallListGilde[selRow];
                if (selName == ""){
                    return;
                };
                SendAction(ACT_REQUEST_CHAR, selName);
            };
            var RequestPlayerGuildScreen:* = function (evt:MouseEvent){
                var selIndex:int;
                var selRow:int;
                selIndex = actor[CNT_HALL_LIST].getChildIndex(evt.target);
                if (selIndex < 5){
                    return;
                };
                selRow = (int(((selIndex - 5) / 6)) + 1);
                selName = HallListName[selRow];
                selGilde = HallListGilde[selRow];
                if (selGilde == txt[TXT_NOGUILD]){
                    return;
                };
                if (selGilde == ""){
                    return;
                };
                if (selGilde == Gilde){
                    SendAction(ACT_SCREEN_GILDEN);
                } else {
                    SendAction(ACT_SCREEN_FREMDGILDE, selGilde);
                };
            };
            var HallListAddField:* = function (pos_x:int, pos_y:int, txt:String, fmt:TextFormat, maxWidth:int=0, isGuild:Boolean=false):void{
                var tmpObj:* = null;
                var thisFieldPopup:* = null;
                var pos_x:* = pos_x;
                var pos_y:* = pos_y;
                var txt:* = txt;
                var fmt:* = fmt;
                var maxWidth:int = maxWidth;
                var isGuild:Boolean = isGuild;
                var InstallHallPopup:* = function (evt:Event){
                    if (thisFieldPopup != ""){
                        EnablePopup(CNT_HALL_LIST, thisFieldPopup);
                    } else {
                        EnablePopup(CNT_HALL_LIST);
                    };
                };
                thisFieldPopup = "";
                if (txt == "[K]"){
                    tmpObj = new Bitmap(actor[IMG_IF_KRIEGER].content.bitmapData.clone());
                    var _local8 = tmpObj;
                    with (_local8) {
                        allowSmoothing = true;
                        forceSmoothing = true;
                        smoothing = true;
                        mouseEnabled = true;
                    };
                } else {
                    if (txt == "[M]"){
                        tmpObj = new Bitmap(actor[IMG_IF_MAGIER].content.bitmapData.clone());
                        _local8 = tmpObj;
                        with (_local8) {
                            allowSmoothing = true;
                            forceSmoothing = true;
                            smoothing = true;
                            mouseEnabled = true;
                        };
                    } else {
                        if (txt == "[J]"){
                            tmpObj = new Bitmap(actor[IMG_IF_JAEGER].content.bitmapData.clone());
                            _local8 = tmpObj;
                            with (_local8) {
                                allowSmoothing = true;
                                forceSmoothing = true;
                                smoothing = true;
                                mouseEnabled = true;
                            };
                        } else {
                            tmpObj = new TextField();
                            _local8 = tmpObj;
                            with (_local8) {
                                defaultTextFormat = fmt;
                                autoSize = TextFieldAutoSize.LEFT;
                                background = false;
                                selectable = false;
                                embedFonts = fontEmbedded;
                                antiAliasType = AntiAliasType.ADVANCED;
                                text = txt;
                            };
                            if (maxWidth > 0){
                                thisFieldPopup = TrimTooLong(tmpObj, maxWidth);
                            };
                        };
                    };
                };
                _local8 = tmpObj;
                with (_local8) {
                    if (isGuild){
                        addEventListener(MouseEvent.CLICK, RequestPlayerGuildScreen);
                    } else {
                        addEventListener(MouseEvent.CLICK, RequestPlayerScreen);
                    };
                    addEventListener(MouseEvent.MOUSE_OVER, InstallHallPopup);
                    if (textDir == "right"){
                        x = (pos_x - width);
                    } else {
                        x = pos_x;
                    };
                    y = pos_y;
                    visible = true;
                };
                actor[CNT_HALL_LIST].addChild(tmpObj);
            };
            dataStr = String(event.data);
            isMine = false;
            logInAfterPixel = false;
            if (dataStr.charAt(0) == "+"){
                dataStr = dataStr.substr(1);
                if (this.guildBlinkReady){
                    this.SendAction(this.ACT_GET_CHAT_HISTORY);
                    this.PulseGildeOnHistory = true;
                };
            };
            if (dataStr.charAt(0) == "E"){
                act = -(int(dataStr.slice(1, 4)));
                parStr = dataStr.slice(4);
            } else {
                act = int(dataStr.slice(0, 3));
                parStr = dataStr.slice(3);
            };
            par = parStr.split(";");
            if (this.OnStage(this.BTN_FIGHT_SKIP)){
                return;
            };
            this.SetTitleBar();
            if (act != this.ERR_SERVER_DOWN){
                this.intervalMultiplierReconnect = 1;
            };
            this.skipAllowed = false;
            switch (act){
                case this.ERR_TOWER_CLOSED:
                    break;
                case this.RESP_TOWER_SAVE:
                    ParseSavegame(par[0]);
                    this.ShowTowerScreen(par);
                    break;
                case this.RESP_TOILET_LOCKED:
                    this.Remove(this.IMG_TAVERNE_BARKEEPER_HINT);
                    this.Remove(this.BNC_TAVERNE_CAS);
                    this.Add(this.BNC_BEEROFFER);
                    this.EnablePopup(this.CNT_QO_REWARDGOLD);
                    this.EnablePopup(this.CNT_QO_REWARDSILVER);
                    this.EnablePopup(this.LBL_QO_REWARDGOLD);
                    this.EnablePopup(this.LBL_QO_REWARDSILVER);
                    this.EnablePopup(this.LBL_QO_REWARDEXP);
                    var _local3 = this.actor[this.LBL_QO_QUESTNAME];
                    with (_local3) {
                        text = txt[(TXT_TOILET_HINT + 5)];
                        x = ((POS_QO_BLACK_SQUARE_X + REL_QO_QUESTNAME_X) - int((textWidth / 2)));
                    };
                    _local3 = this.actor[this.LBL_QO_QUESTTEXT];
                    with (_local3) {
                        text = txt[(TXT_TOILET_HINT + 6)].split("#").join(String.fromCharCode(13));
                    };
                    this.Arabize(this.LBL_QO_QUESTTEXT);
                    this.actor[this.LBL_QO_TIME].text = "";
                    this.actor[this.LBL_QO_REWARDEXP].text = "";
                    this.Remove(this.BTN_BO_BUY);
                    this.Add(this.IMG_BO_PORTRAIT_TH);
                    break;
                case this.RESP_TOILET_UNLOCKED:
                    this.Play(this.SND_MAINQUESTS_UNLOCK);
                case this.RESP_TOILET_DROPPED:
                case this.RESP_TOILET_FULL:
                case this.RESP_TOILET_FLUSHED:
                case this.ACT_SCREEN_TOILET:
                case this.RESP_TOILET_TANKFULL:
                case this.REPS_TOILET_DROPTWICE:
                    if (act == this.RESP_TOILET_DROPPED){
                        this.Play(this.SND_TOILET_DROP);
                    };
                    ParseSavegame(par[0]);
                    if (par.length > 1){
                        if (act == this.RESP_TOILET_FLUSHED){
                            this.ShowToilet(par[1], par[2], par[3], par[4], par[5]);
                        } else {
                            this.ShowToilet(par[1], par[2], par[3], par[4]);
                        };
                    };
                    if (act == this.RESP_TOILET_FULL){
                        this.ErrorMessage(this.txt[this.TXT_TOILET_FULL]);
                    } else {
                        if (act == this.RESP_TOILET_TANKFULL){
                            this.ErrorMessage(this.txt[this.TXT_TOILET_TANKFULL]);
                        } else {
                            if (act == this.REPS_TOILET_DROPTWICE){
                                this.ErrorMessage(this.txt[this.TXT_TOILET_DROPTWICE]);
                            } else {
                                this.ErrorMessage("");
                            };
                        };
                    };
                    break;
                case this.RESP_SCREEN_WITCH:
                    ParseSavegame(par[0]);
                    this.ShowWitch(par[1].split("/"), (par[2].split("/")[0] == "1"), par[2].split("/")[1]);
                    break;
                case this.ERR_NO_SLOT_FOR_FLUSHING:
                    this.ErrorMessage(this.txt[this.TXT_ERR_NO_SLOT_FOR_FLUSHING]);
                    break;
                case this.ERR_TOILET_EMPTY:
                    this.ErrorMessage(this.txt[this.TXT_ERR_TOILET_EMPTY]);
                    break;
                case this.ERR_GUILD_DESCR_TOO_LONG:
                    this.ErrorMessage(this.txt[this.TXT_ERR_GUILD_DESCR_TOO_LONG]);
                    break;
                case this.ERR_NO_CHAT_INFO:
                    break;
                case this.ERR_NO_CHAT_OVERFLOW:
                    break;
                case this.ERR_GUILD_RANK_WRONG:
                    this.ErrorMessage(this.txt[this.TXT_ERROR_GUILD_RANK_WRONG]);
                    break;
                case this.RESP_ALBUM:
                    tmpByteArray = Base64.decodeToByteArray(par.join("/"));
                    bitArray = new Array();
                    i = 0;
                    while (i < tmpByteArray.length) {
                        bitArray.push(((tmpByteArray[i] & 128) / 128));
                        bitArray.push(((tmpByteArray[i] & 64) / 64));
                        bitArray.push(((tmpByteArray[i] & 32) / 32));
                        bitArray.push(((tmpByteArray[i] & 16) / 16));
                        bitArray.push(((tmpByteArray[i] & 8) / 8));
                        bitArray.push(((tmpByteArray[i] & 4) / 4));
                        bitArray.push(((tmpByteArray[i] & 2) / 2));
                        bitArray.push((tmpByteArray[i] & 1));
                        i = (i + 1);
                    };
                    this.AlbumContent = bitArray;
                    this.ShowScreenAlbum();
                    break;
                case this.RESP_INVITE_SUCCESS:
                    this.Show(this.BNC_INVITE_SUCCESS);
                    this.Hide(this.BNC_INVITE_INPUTDIALOGUE);
                    break;
                case this.ERR_INVITE_NOT_VALIDATED:
                case this.ERR_INVITE_TOO_MANY:
                case this.ERR_INVITE_EMAIL_REJECTED:
                    this.ErrorMessage(this.txt[((this.TXT_ERROR_INVITE_NOT_VALIDATED - act) + this.ERR_INVITE_NOT_VALIDATED)]);
                    break;
                case this.RESP_LOGOUT_SUCCESS:
                    break;
                case this.ERR_SERVER_DOWN:
                    this.ShowDisconnectScreen();
                    if ((this.param_reconnect * this.intervalMultiplierReconnect) < ((1000 * 60) * 2)){
                        this.intervalMultiplierReconnect = (this.intervalMultiplierReconnect + 0.1);
                    };
                    break;
                case this.ERR_JOINED_TOO_RECENTLY:
                    ParseSavegame(par[0]);
                    this.ErrorMessage(this.txt[this.TXT_GUILD_JOINED_TOO_RECENTLY].split("%1").join(this.TimeStr((Number(this.Savegame[this.SG_GUILD_JOIN_DATE]) + ((60 * 60) * 24)), true)));
                    break;
                case this.RESP_ATTACK_NOT_EXIST:
                    this.ErrorMessage(this.txt[this.TXT_ERROR_PLAYER_NOT_FOUND]);
                    break;
                case this.ERR_GUILD_FIGHT_TOO_EXPENSIVE:
                case this.ERR_GUILD_ALREADY_UNDER_ATTACK:
                case this.ERR_GUILD_ATTACK_DELAY:
                case this.ERR_GUILD_ALREADY_ATTACKING:
                case this.ERR_GUILD_ATTACK_STATUS:
                    this.ErrorMessage(this.txt[((this.TXT_ERROR_GUILD_FIGHT_TOO_EXPENSIVE - act) + this.ERR_GUILD_FIGHT_TOO_EXPENSIVE)]);
                    break;
                case this.RESP_GUILD_NAMES:
                    if (par[0] == ""){
                        if (this.lastGuildData[this.GUILD_IS_RAID] != 0){
                            if (this.txt[this.TXT_RAID_TEXT]){
                                this.actor[this.LBL_GILDE_ATTACK].text = this.txt[(this.TXT_RAID_TEXT + ((this.IsToday(this.lastGuildData[this.GUILD_ATTACK_TIME])) ? 13 : 12))].split("%1").join(this.txt[(this.TXT_DUNGEON_NAMES + int(this.lastGuildData[this.GUILD_RAID_LEVEL]))]).split("%2").join(this.TimeStr(this.lastGuildData[this.GUILD_ATTACK_TIME], true));
                            } else {
                                this.actor[this.LBL_GILDE_ATTACK].text = "";
                            };
                        } else {
                            this.actor[this.LBL_GILDE_ATTACK].text = "";
                        };
                    } else {
                        this.actor[this.LBL_GILDE_ATTACK].text = this.txt[(this.TXT_GUILD_BATTLE_MSG + ((this.IsToday(this.lastGuildData[this.GUILD_ATTACK_TIME])) ? 2 : 0))].split("%1").join(par[0]).split("%2").join(this.TimeStr(this.lastGuildData[this.GUILD_ATTACK_TIME], true));
                    };
                    this.actor[this.LBL_GILDE_DEFENCE].text = ((par[1])=="") ? "" : this.txt[((this.TXT_GUILD_BATTLE_MSG + 1) + ((this.IsToday(this.lastGuildData[this.GUILD_DEFENCE_TIME])) ? 2 : 0))].split("%1").join(par[1]).split("%2").join(this.TimeStr(this.lastGuildData[this.GUILD_DEFENCE_TIME], true));
                    if (par[2]){
                        if (this.lastGuildData[this.GUILD_IS_RAID] != 0){
                            if (this.txt[this.TXT_RAID_TEXT]){
                                this.EnablePopup(this.CNT_GILDE_ATTACK, this.txt[(this.TXT_RAID_TEXT + 14)].split("%1").join(par[2]));
                            };
                        } else {
                            if ((((par[0] == "")) || ((par[2] == "")))){
                                this.EnablePopup(this.CNT_GILDE_ATTACK);
                            } else {
                                if (this.txt[this.TXT_GUILD_ATTACK_PLAYER]){
                                    this.EnablePopup(this.CNT_GILDE_ATTACK, this.txt[this.TXT_GUILD_ATTACK_PLAYER].split("%1").join(par[2]));
                                } else {
                                    this.EnablePopup(this.CNT_GILDE_ATTACK, par[2]);
                                };
                            };
                        };
                    } else {
                        this.EnablePopup(this.CNT_GILDE_ATTACK);
                    };
                    this.guildAttackTime = this.lastGuildData[this.GUILD_ATTACK_TIME];
                    this.guildDefenceTime = this.lastGuildData[this.GUILD_DEFENCE_TIME];
                    this.guildAttacked = par[0];
                    this.guildAttacking = par[1];
                    break;
                case this.ERR_SESSION_ID_EXPIRED:
                    this.trc("Achtung, sessionID ist abgelaufen.");
                    this.sessionID = "";
                    this.fightFlushMode = false;
                    this.ShowLoginScreen();
                    break;
                case this.ERR_MSG_LEVEL_TOO_LOW:
                    if (this.txt[this.TXT_ERROR_MSG_LEVEL_TOO_LOW]){
                        this.ErrorMessage(this.txt[this.TXT_ERROR_MSG_LEVEL_TOO_LOW]);
                    } else {
                        this.ErrorMessage("Error: You need to reach at least level 10 to send messages.");
                    };
                    break;
                case this.ERR_MSG_NOT_VALIDATED:
                    if (this.txt[this.TXT_ERROR_MSG_NOT_VALIDATED]){
                        this.ErrorMessage(this.txt[this.TXT_ERROR_MSG_NOT_VALIDATED]);
                    } else {
                        this.ErrorMessage("Error: Your email address has to be validated in order to send messages.");
                    };
                    break;
                case this.ERR_INVENTORY_FULL:
                    this.ErrorMessage(this.txt[this.TXT_ERROR_INVENTORY_FULL]);
                    break;
                case this.ERR_INVENTORY_FULL_ADV:
                    if (this.txt[this.TXT_ERROR_INVENTORY_FULL_ADV]){
                        this.ErrorMessage(this.txt[this.TXT_ERROR_INVENTORY_FULL_ADV]);
                    } else {
                        this.ErrorMessage(this.txt[this.TXT_ERROR_INVENTORY_FULL]);
                    };
                    this.FadeOut(this.CNT_QUEST_SLOT, 20, 0.04, 0.3);
                    this.forceAdventure = true;
                    break;
                case this.ERR_PLACE_BET:
                    break;
                case this.RESP_BET_WON:
                    ParseSavegame(par[0]);
                    this.ShowBetResult(true);
                    break;
                case this.RESP_BET_LOST:
                    ParseSavegame(par[0]);
                    this.ShowBetResult(false);
                    break;
                case this.ERR_ACCOUNTS_PER_IP:
                    this.ErrorMessage(this.txt[this.TXT_ERRROR_ACCOUNTS_PER_IP]);
                    break;
                case this.ERR_TOO_SOON:
                    break;
                case this.ERR_LOCKED_PAYMENT:
                    this.ErrorMessage(this.txt[this.TXT_ERRROR_LOCKED_PAYMENT].split("%supportemail%").join(this.param_support_email).split("%gamestaffemail%").join(this.param_gamestaff_email));
                    break;
                case this.ERR_LOCKED_ADMIN:
                    if (par[2]){
                        if (this.txt[((this.TXT_LOCK_REASON + int(par[1])) - 1)]){
                            this.ErrorMessage(this.txt[((this.TXT_LOCK_REASON + int(par[1])) - 1)].split("%1").join(String((1 + int((par[2] / ((60 * 60) * 24)))))));
                        } else {
                            this.ErrorMessage(this.txt[this.TXT_ERRROR_LOCKED_ADMIN]);
                        };
                    } else {
                        this.ErrorMessage(this.txt[this.TXT_ERRROR_LOCKED_ADMIN]);
                    };
                    break;
                case this.RESP_REQUEST_GUILD_QUIET:
                    this.DestroyGuildBtnTimer = true;
                    if (this.OnStage(this.LBL_GILDE_CHAT_CAPTION)){
                        this.SendAction(this.ACT_SCREEN_GILDEN);
                    };
                    break;
                case this.RESP_REQUEST_GUILD:
                    this.DestroyGuildBtnTimer = true;
                    if (this.OnStage(this.LBL_GILDE_CHAT_CAPTION)){
                        this.SendAction(this.ACT_SCREEN_GILDEN);
                    } else {
                        this.PulseGilde = true;
                    };
                    break;
                case this.ERR_GUILD_DONATE_FRA:
                    this.ErrorMessage(this.txt[this.TXT_ERROR_GUILD_DONATE_FRA]);
                    break;
                case this.ERR_GUILD_DONATE_NEG:
                    this.ErrorMessage(this.txt[this.TXT_ERROR_GUILD_DONATE_NEG]);
                    break;
                case this.ERR_MAIL_EXISTS:
                    this.ErrorMessage(this.txt[this.TXT_ERROR_MAIL_EXISTS]);
                    break;
                case this.RESP_VALIDATE_OK:
                    if (par[0]){
                        this.param_cid = par[0];
                        this.trc("cid set by server:", this.param_cid);
                    };
                    this.ShowEmailNagScreen(1);
                    break;
                case this.ERR_VALIDATE:
                    this.ShowEmailNagScreen(2);
                    break;
                case this.RESP_PASSWORD_SENT:
                    this.ShowLoginScreen();
                    break;
                case this.ERR_REQUEST_PW:
                    this.ErrorMessage(this.txt[this.TXT_ERROR_REQUEST_PW]);
                    break;
                case this.RESP_TRANS_COUNT:
                    PaymentLink = ((((((("http://www.payment.playa-games.com/legal/wiretransfer_" + this.lang_code) + ".php?amount=") + String(int((this.tmpAmount / 100)))) + (((this.lang_code == "de")) ? "," : ".")) + String((this.tmpAmount % 100))) + "&use=") + par[0]);
                    navigateToURL(new URLRequest(PaymentLink), "_blank");
                    break;
                case this.RESP_DEALER_AKTION:
                case this.RESP_DEALER_SPONSOR:
                case this.RESP_EMAIL_RESENT:
                    this.actor[this.LBL_EMAIL_RESEND].htmlText = this.txt[this.TXT_EMAIL_RESENT];
                    this.Arabize(this.LBL_EMAIL_RESEND);
                    this.actor[this.LBL_OPTION_FIELD1].htmlText = this.txt[this.TXT_EMAIL_RESENT];
                    this.Arabize(this.LBL_OPTION_FIELD1);
                    this.Remove(this.BTN_OPTION_DOCHANGE);
                    break;
                case this.RESP_CHAT_HISTORY:
                    if (par[0] != this.lastChatHist){
                        this.lastChatHist = par[0];
                        this.intervalMultiplierChat = 1;
                    } else {
                        if (this.intervalMultiplierChat < 5){
                            this.intervalMultiplierChat = (this.intervalMultiplierChat + 0.1);
                        } else {
                            if (this.intervalMultiplierChat < 30){
                                this.intervalMultiplierChat = (this.intervalMultiplierChat + 1);
                            };
                        };
                    };
                    if (par[0] == ""){
                        tmpArray = [];
                    } else {
                        tmpArray = par[0].split("/");
                    };
                    this.firstChatFill = false;
                    if (this.lastChatIndex == 0){
                        this.firstChatFill = true;
                        i = 0;
                        while (i < 40) {
                            _local3 = this.actor[(this.LBL_GILDE_CHAT + i)];
                            with (_local3) {
                                defaultTextFormat = FontFormat_Chat;
                                text = "";
                            };
                            i = (i + 1);
                        };
                    };
                    if (tmpArray.length > 0){
                        i = (tmpArray.length - 1);
                        while (i >= 0) {
                            if (!par[3]){
                                if (((!((this.lastChatIndex == 0))) && ((this.DecodeChat(tmpArray[i], false, true) == "1")))){
                                    this.Remove(this.BNC_GILDE_CHAT);
                                };
                                this.ChatLine(this.DecodeChat(tmpArray[i]), false, this.getHlIndex(tmpArray[i]));
                                if (((((!((tmpArray[i].indexOf("§") == -1))) || (!(this.so.data.noPulseOnSysMsg)))) && (this.PulseGildeOnHistory))){
                                    this.PulseGilde = true;
                                };
                                if (this.lastChatIndex != 0){
                                    ii = 0;
                                    while (ii < this.offlineGuildMembers.length) {
                                        if (tmpArray[i].toLowerCase().indexOf((this.offlineGuildMembers[ii].toLowerCase() + ":§")) != -1){
                                            if (this.OnStage(this.INP_GILDE_CHAT)){
                                                this.SendAction(this.ACT_SCREEN_GILDEN);
                                            };
                                            break;
                                        };
                                        ii = (ii + 1);
                                    };
                                };
                            } else {
                                if (par[3].split("/")[i] > this.lastChatIndex){
                                    if (((!(this.firstChatFill)) && (this.chatSound))){
                                        this.Play(this.SND_ERROR);
                                    };
                                    this.lastChatIndex = par[3].split("/")[i];
                                    if (((!((this.lastChatIndex == 0))) && ((this.DecodeChat(tmpArray[i], false, true) == "1")))){
                                        this.Remove(this.BNC_GILDE_CHAT);
                                    };
                                    this.ChatLine(this.DecodeChat(tmpArray[i]), false, this.getHlIndex(tmpArray[i]));
                                    if (((((!((tmpArray[i].indexOf("§") == -1))) || (!(this.so.data.noPulseOnSysMsg)))) && (this.PulseGildeOnHistory))){
                                        this.PulseGilde = true;
                                    };
                                    ii = 0;
                                    while (ii < this.offlineGuildMembers.length) {
                                        if (tmpArray[i].toLowerCase().indexOf((this.offlineGuildMembers[ii].toLowerCase() + ":§")) != -1){
                                            if (this.OnStage(this.INP_GILDE_CHAT)){
                                                this.SendAction(this.ACT_SCREEN_GILDEN);
                                            };
                                            break;
                                        };
                                        ii = (ii + 1);
                                    };
                                };
                            };
                            i = (i - 1);
                        };
                        this.PulseGildeOnHistory = false;
                    };
                    if (((par[1]) && (!(par[3])))){
                        this.lastChatIndex = Number(par[1]);
                    };
                    if (par[2]){
                        tmpArray = par[2].split("/");
                    } else {
                        tmpArray = [];
                    };
                    if (tmpArray.length > 0){
                        if (this.chatSound){
                            this.Play(this.SND_ERROR);
                        };
                        i = (tmpArray.length - 1);
                        while (i >= 0) {
                            this.PulseGilde = true;
                            externalWhisperer = tmpArray[i].substr(6);
                            externalWhisperer = externalWhisperer.substr(0, externalWhisperer.indexOf(":§"));
                            this.ChatLine(this.DecodeChat(tmpArray[i]), false, this.getHlIndex(tmpArray[i]), true);
                            this.addSuggestNames(externalWhisperer);
                            if (this.lastChatIndex != 0){
                                ii = 0;
                                while (ii < this.offlineGuildMembers.length) {
                                    if (tmpArray[i].toLowerCase().indexOf((this.offlineGuildMembers[ii].toLowerCase() + ":§")) != -1){
                                        if (this.OnStage(this.INP_GILDE_CHAT)){
                                            this.SendAction(this.ACT_SCREEN_GILDEN);
                                        };
                                        break;
                                    };
                                    ii = (ii + 1);
                                };
                            };
                            i = (i - 1);
                        };
                    };
                    this.guildBlinkReady = true;
                    if (((((!((this.newCrestSuggested == ""))) && (!(this.firstChatFill)))) && (this.OnStage(this.INP_GILDE_CHAT)))){
                        this.clickChatLine(this.newCrestSuggested);
                    };
                    this.newCrestSuggested = "";
                    break;
                case this.RESP_WHISPER_SUCCESS:
                    this.addSuggestNames(this.lastWhisperTarget);
                    this.ChatLine(this.DecodeChat(par[0]), false, this.getHlIndex(par[0]), true);
                    break;
                case this.ERR_GUILD_NAME_REJECTED:
                    this.ErrorMessage(this.txt[this.TXT_ERROR_GUILD_NAME_REJECTED]);
                    break;
                case this.ERR_GUILD_NAME_LENGTH:
                    this.ErrorMessage(this.txt[this.TXT_ERROR_GUILD_NAME_LENGTH]);
                    break;
                case this.ERR_GUILD_NAME_CHARACTERS:
                    this.ErrorMessage(this.txt[this.TXT_ERROR_GUILD_NAME_CHARACTERS]);
                    break;
                case this.ERR_GUILD_EMAIL_VALIDATE:
                    this.ErrorMessage(this.txt[this.TXT_ERROR_GUILD_EMAIL_VALIDATE]);
                    break;
                case this.ERR_GUILD_MUSH_FREE:
                    this.ErrorMessage(this.txt[this.TXT_ERROR_GUILD_MUSH_FREE]);
                    break;
                case this.RESP_CHAT_LINE:
                    if (this.DecodeChat(par[0], false, true) == "1"){
                        this.Remove(this.BNC_GILDE_CHAT);
                    };
                    this.ChatLine(this.DecodeChat(par[0]), false, this.getHlIndex(par[0]));
                    if (!this.OnStage(this.INP_GILDE_CHAT)){
                        this.PulseGilde = true;
                    };
                    break;
                case this.RESP_GUILD_DONATE_SUCCESS:
                    ParseSavegame(par[0]);
                    this.SendAction(this.ACT_SCREEN_GILDEN);
                    break;
                case this.RESP_NO_LOGIN:
                    this.RequestLogout(undefined, true);
                    this.ShowLoginScreen();
                    break;
                case this.RESP_DELETE_ACCOUNT_OK:
                    this.RequestLogout();
                    break;
                case this.RESP_CHANGE_PASS_OK:
                    this.so.data.password = this.optionNewData;
                    this.so.flush();
                    this.actor[this.INP_LOGIN_PASSWORD].getChildAt(1).text = this.optionNewData;
                    this.ShowOptionScreen();
                    this.ErrorMessage(this.txt[this.TXT_PASSWORD_CHANGED]);
                    break;
                case this.RESP_CHANGE_NAME_OK:
                    this.so.data.userName = this.optionNewData;
                    this.so.flush();
                    this.actor[this.INP_NAME].getChildAt(1).text = this.optionNewData;
                    ParseSavegame(par[0]);
                    this.ShowOptionScreen();
                    this.ErrorMessage(this.txt[this.TXT_NAME_CHANGED]);
                    break;
                case this.RESP_CHANGE_MAIL_OK:
                    this.ShowOptionScreen();
                    this.ErrorMessage(this.txt[this.TXT_EMAIL_CHANGED]);
                    break;
                case this.RESP_CHANGE_FACE_OK:
                    ParseSavegame(par[0]);
                case this.ACT_SCREEN_OPTIONEN:
                    this.ShowOptionScreen();
                    break;
                case this.RESP_DEMO_SCREEN:
                    this.ShowDemoScreen();
                    break;
                case this.RESP_PLAYER_SCREEN:
                    this.ShowPlayerScreen(("0/" + par[0]).split("/"), this.selName, par[2], this.resolveBreaks(par[1]));
                    break;
                case this.RESP_PLAYER_DESC_SUCCESS:
                    this.PlayerDesc = this.actor[this.INP_CHARDESC].getChildAt(0).text;
                    break;
                case this.RESP_GUILD_CHANGE_DESC_SUCCESS:
                    break;
                case this.RESP_GUILD_DATA:
                    if (int(par[1]) == int(this.Savegame[this.SG_GUILD_INDEX])){
                        this.Gilde = par[0];
                    };
                    this.lastChatIndex = 0;
                    this.SendAction(this.ACT_GET_CHAT_HISTORY);
                    break;
                case this.RESP_MAINQUEST:
                    this.Hide(this.BNC_IF_STATS);
                    ParseSavegame(par[10]);
                    this.PulseChar = false;
                case this.RESP_QUEST_DONE:
                case this.RESP_QUEST_DONE_PIXEL:
                case this.RESP_QUEST_DONE_PIXEL_2:
                    this.fightLock = true;
                    this.PostFightMode = false;
                    this.ShowFightScreen(par[0].split("/"), par[1].split("/"), (par[6] == "1"), par[2].split("/"), (par[5] == "2"), ((par[3] + "/") + par[4]).split("/"), int(par[7]), int(par[8]), (par[5] == "3"), false, int(par[9]));
                    break;
                case this.RESP_GUILD_FIGHT:
                    this.towerFightMode = false;
                    this.alternateCharOppImg = true;
                    this.fightLock = true;
                    this.winners = new Array();
                    this.lastRoundFighterName = "";
                    this.fights = parStr.split("§");
                    this.guildFightCount = int(((this.fights.length - 1) / 2));
                    this.skipGuildFights = 0;
                    this.nextFightTimer.start();
                    break;
                case this.RESP_TOWER_FIGHT:
                    this.towerFightMode = true;
                    this.alternateCharOppImg = true;
                    this.fightLock = true;
                    this.winners = new Array();
                    this.lastRoundFighterName = "";
                    this.fights = parStr.split("§");
                    ParseSavegame(this.fights.pop(), true, true);
                    this.guildFightCount = int(((this.fights.length - 1) / 2));
                    this.skipGuildFights = 0;
                    this.nextFightTimer.start();
                    break;
                case this.RESP_QUEST_SKIP_ALLOWED_START:
                    this.skipAllowed = true;
                case this.RESP_QUEST_START:
                    ParseSavegame(par[0]);
                    this.ShowQuestScreen();
                    break;
                case this.RESP_QUEST_SKIP_ALLOWED:
                    this.skipAllowed = true;
                case this.ACT_SCREEN_TAVERNE:
                case this.RESP_QUEST_STOP:
                    ParseSavegame(par[0]);
                    if (par[1]){
                        this.specialAction = par[1];
                    } else {
                        if (act != this.RESP_QUEST_STOP){
                            this.specialAction = 0;
                        } else {
                            this.trc("Quest cancelled, preserving special action flag!");
                        };
                    };
                    this.trc("Tavern says special action is", this.specialAction);
                    if (par[2] != undefined){
                        this.preventTv = (par[2] == 1);
                    };
                    this.ShowTaverneScreen();
                    break;
                case this.ACT_SCREEN_GILDE_GRUENDEN:
                    this.ShowScreenGildeGruenden();
                    break;
                case this.RESP_GUILD_FOUND_SUCCESS:
                    _local3 = this.actor[this.LBL_IF_GOLD];
                    with (_local3) {
                        text = String((int(text) - 10));
                        x = ((actor[IMG_IF_GOLD].x - textWidth) - 10);
                    };
                case this.RESP_GUILD_RENAME_SUCCESS:
                case this.RESP_GUILD_IMPROVE_SUCCESS:
                case this.RESP_GUILD_OFFICER_SUCCESS:
                case this.RESP_GUILD_EXPEL_SUCCESS:
                case this.RESP_GUILD_INVITE_SUCCESS:
                case this.RESP_GUILD_MASTER_SUCCESS:
                case this.RESP_GUILD_JOIN_SUCCESS:
                    this.SendAction(this.ACT_SCREEN_GILDEN);
                    break;
                case this.RESP_GUILD_DELETE_SUCCESS:
                    this.Gilde = "";
                    this.myOwnRank = -1;
                    this.myOwnAttackTarget = -1;
                    this.myOwnGuildMoney = -1;
                    this.ShowCityScreen();
                    break;
                case this.RESP_GUILD_COMMENCE_ATTACK_OK:
                case this.RESP_GUILD_JOIN_ATTACK_OK:
                case this.RESP_GUILD_JOIN_DEFENSE_OK:
                    ParseSavegame(par[0]);
                    this.SendAction(this.ACT_SCREEN_GILDEN);
                    break;
                case this.ACT_SCREEN_GILDEN:
                    this.Savegame[this.SG_GUILD_INDEX] = par[0].split("/")[0];
                    this.Gilde = par[3];
                    isMine = true;
                    this.intervalMultiplierChat = 1;
                case this.RESP_OTHER_GUILD:
                    this.DestroyGuildBtnTimer = true;
                    if (((((((!(this.OnStage(this.CNT_GILDE_CREST))) || ((act == this.RESP_OTHER_GUILD)))) || (!((this.lastGuildCrestId == par[0].split("/")[0]))))) || (((isMine) && ((this.oldCrestStr == this.getCrestStr())))))){
                        if (par[1].indexOf("§") != -1){
                            this.setCrestStr(par[1].split("§")[0]);
                            par[1] = par[1].substr((par[1].indexOf("§") + 1));
                        } else {
                            this.lastGuildData = par[0].split("/");
                            this.setDefaultCrest();
                        };
                        this.oldCrestStr = this.getCrestStr();
                    } else {
                        if (par[1].indexOf("§") != -1){
                            par[1] = par[1].substr((par[1].indexOf("§") + 1));
                        };
                    };
                    if (this.lastGuildCrestId != par[0].split("/")[0]){
                        this.oldCrestStr = this.getCrestStr();
                    };
                    this.ShowScreenGilden(par[0].split("/"), ((isMine) ? par[1] : (((par[1].indexOf("///") > -1)) ? par[1].split("///")[1] : par[1])), par[2].split("/"), par[3], isMine, int(par[5]), int(par[4]), ((par[6]) ? par[6] : 0));
                    break;
                case this.ACT_SCREEN_STALL:
                    this.Stundenlohn = Number(par[0]);
                    this.ShowStallScreen();
                    break;
                case this.ERR_ATTACK_AGAIN:
                    this.ErrorMessage(this.txt[this.TXT_ERROR_ATTACK_AGAIN]);
                    break;
                case this.ACT_SCREEN_ARENA:
                    this.ShowArenaScreen(par[0], par[2], par[1]);
                    break;
                case this.ERR_INBOX_FULL:
                    this.ErrorMessage(this.txt[this.TXT_ERROR_INBOX_FULL]);
                    break;
                case this.ERR_RECIPIENT_NOT_FOUND:
                    this.ErrorMessage(this.txt[this.TXT_ERROR_RECIPIENT_NOT_FOUND]);
                    break;
                case this.ERR_RECIPIENT_SELF:
                    this.ErrorMessage(this.txt[this.TXT_ERROR_RECIPIENT_SELF]);
                    break;
                case this.RESP_MESSAGE_SENT:
                    this.addSuggestNames(this.lastMessageTarget);
                    this.Remove(this.BNC_POST_WRITE);
                    this.Remove(this.BNC_POST_READ);
                    this.Add(this.BNC_POST_LIST);
                    break;
                case this.RESP_READ_MESSAGE:
                    this.RemoveAll();
                    this.Add(this.BNC_SCREEN_POST);
                    if (this.Tageszeit() != 0){
                        this.Remove(this.BNC_POST_NIGHT);
                    };
                    if (this.Tageszeit() != 1){
                        this.Remove(this.BNC_POST_DAWN);
                    };
                    this.Remove(this.BNC_POST_LIST);
                    this.Add(this.BNC_POST_READ);
                    if (((this.PostSel + this.PostScroll) - 1) == 1){
                        this.Remove(this.BTN_POST_READ_PREV);
                    };
                    if (((this.PostSel + this.PostScroll) - 1) == this.Savegame[this.SG_MSG_COUNT]){
                        this.Remove(this.BTN_POST_READ_NEXT);
                    };
                    if (int(par[4]) > 0){
                        this.InviteGildenID = int(par[4]);
                        this.Add(this.BTN_POST_ACCEPT);
                    };
                    _local3 = this.actor[this.INP_POST_ADDRESS].getChildAt(1);
                    with (_local3) {
                        type = TextFieldType.DYNAMIC;
                        text = ((((((txt[TXT_POST_FROM] + " ") + par[0]) + " ") + txt[TXT_POST_TIME]) + " ") + TimeStr(par[2]));
                    };
                    _local3 = this.actor[this.INP_POST_SUBJECT].getChildAt(1);
                    with (_local3) {
                        type = TextFieldType.DYNAMIC;
                        ReplyAddress = par[0];
                        switch (par[1]){
                            case "1  ":
                            case "2  ":
                            case "3  ":
                            case "4  ":
                            case "5  ":
                            case "6  ":
                            case "7  ":
                            case "8  ":
                            case "9  ":
                                par[1] = "Moo!";
                                par[3] = "Holy Cow!";
                                break;
                            case "1":
                                par[1] = txt[TXT_SUBJECT_GUILD_DELETED];
                                par[3] = txt[TXT_BODY_GUILD_DELETED].replace("%1", par[0]).replace("%2", par[3]);
                                break;
                            case "2":
                                par[1] = txt[TXT_SUBJECT_GUILD_DELETED_BY_ADMIN];
                                par[3] = txt[TXT_BODY_GUILD_DELETED_BY_ADMIN].replace("%1", par[0]).replace("%2", par[3]);
                                break;
                            case "3":
                                par[1] = txt[TXT_SUBJECT_GUILD_EXPELLED];
                                par[3] = txt[TXT_BODY_GUILD_EXPELLED].replace("%1", par[0]).replace("%2", par[3]);
                                break;
                            case "4":
                                par[1] = txt[TXT_SUBJECT_GUILD_EXPELLED_BY_ADMIN];
                                par[3] = txt[TXT_BODY_GUILD_EXPELLED_BY_ADMIN].replace("%1", par[0]).replace("%2", par[3]);
                                break;
                            case "5":
                                par[1] = txt[TXT_SUBJECT_GUILD_INVITE];
                                par[3] = txt[TXT_BODY_GUILD_INVITE].replace("%1", par[0]).replace("%2", par[3]);
                                break;
                            case "6":
                            case "7":
                                par[1] = txt[TXT_SUBJECT_PVP].replace("%1", par[0]);
                                tmpBattleInfo = par[3];
                                tmpFighterArray = tmpBattleInfo.split("#")[0].split("/");
                                ichAnfg = tmpFighterArray[0];
                                erAnfg = tmpFighterArray[6];
                                tmpFightArray = tmpBattleInfo.split("#")[1].split("/");
                                ichEnde = tmpFightArray[(tmpFightArray.length - 7)];
                                erEnde = tmpFightArray[(tmpFightArray.length - 4)];
                                rundenZahl = int((tmpFightArray.length / 6));
                                tmpHonor = Math.abs(tmpBattleInfo.split("#")[7]);
                                tmpGold = Math.abs(int((tmpBattleInfo.split("#")[8] / 100)));
                                tmpSilver = Math.abs(int((tmpBattleInfo.split("#")[8] % 100)));
                                par[3] = txt[TXT_BODY_PVP].replace("%1", par[0]).replace("%2", par[3]).replace("%3", String(ichAnfg)).replace("%4", String(erAnfg)).replace("%5", String(ichEnde)).replace("%6", String(erEnde)).replace("%7", String(rundenZahl)).replace("%8", txt[(((ichEnde > erEnde)) ? TXT_DU_GEWONNEN : TXT_DU_VERLOREN)]).replace("%9", (((rundenZahl == 1)) ? "" : txt[TXT_ROUNDS_PLURAL])).split("%10").join(String(tmpHonor)).split("%11").join(String(tmpGold)).split("%12").join(String(tmpSilver)).split("%13").join(txt[(((ichEnde > erEnde)) ? TXT_DU_WAS_GEWONNEN : TXT_DU_WAS_VERLOREN)]).split("#").join(String.fromCharCode(13));
                                Add(BTN_POST_VIEWFIGHT);
                                break;
                            case "8":
                                if (txt[TXT_INV_ACC_TITLE] != ""){
                                    par[1] = txt[TXT_INV_ACC_TITLE];
                                    par[3] = txt[TXT_INV_ACC_TEXT].split("%1").join(par[0]);
                                } else {
                                    par[1] = "FRIEND_LINK_ACCEPTED";
                                    par[3] = (((("You are seeing this message in english because it has not been translated for your location yet. " + par[0]) + " has accepted your invitation to the game. Please wait for ") + par[0]) + " to verify email address in order to get your bonus.");
                                };
                                Add(BTN_POST_REPLY);
                                break;
                            case "9":
                                if (txt[TXT_INV_VAL_TITLE] != ""){
                                    par[1] = txt[TXT_INV_VAL_TITLE];
                                    par[3] = txt[TXT_INV_VAL_TEXT].split("%1").join(par[0]);
                                } else {
                                    par[1] = "FRIEND_EMAIL_VERIFIED";
                                    par[3] = (par[0] + " has verified his/her email address.");
                                };
                                Add(BTN_POST_REPLY);
                                break;
                            default:
                                Add(BTN_POST_REPLY);
                        };
                        ReplySubject = par[1];
                        text = par[1].split("%u20AC").join("€");
                    };
                    postReadText = par[3];
                    if (this.txt[this.TXT_ALERT_WORDS]){
                        alertWords = this.txt[this.TXT_ALERT_WORDS].split(" ");
                        i = 0;
                        while (i < alertWords.length) {
                            if (postReadText.toLowerCase().indexOf(alertWords[i].toLowerCase()) != -1){
                                postReadText = this.txt[this.TXT_ALERT_TEXT].split("%1").join(postReadText);
                                break;
                            };
                            i = (i + 1);
                        };
                    };
                    _local3 = this.actor[this.INP_POST_TEXT].getChildAt(1);
                    with (_local3) {
                        type = TextFieldType.DYNAMIC;
                        text = SwapWords(postReadText).split("#").join(String.fromCharCode(13)).split("%u20AC").join("€");
                    };
                    this.forwardText = postReadText;
                    break;
                case this.ACT_SCREEN_POST:
                    this.ShowPostScreen(par);
                    break;
                case this.ACT_SCREEN_PILZDEALER:
                    if (par[0]){
                        this.DealerAktion = int(par[0]);
                    } else {
                        this.DealerAktion = 0;
                    };
                    this.PulseDealer = false;
                    this.ShowDealerScreen();
                    break;
                case this.ACT_SCREEN_WELTKARTE:
                    ParseSavegame(par[0]);
                    this.ShowMainQuestsScreen(par[1].split("/"));
                    break;
                case this.ACT_SCREEN_EHRENHALLE:
                    this.lastGuildShown = "";
                case this.RESP_SCREEN_GILDENHALLE:
                    this.GuildHallMode = (act == this.RESP_SCREEN_GILDENHALLE);
                    if (this.GuildHallMode){
                        this.Hide(this.LBL_HALL_GOTO_SPIELER_HL, this.LBL_HALL_GOTO_GILDEN);
                        this.Show(this.LBL_HALL_GOTO_SPIELER, this.LBL_HALL_GOTO_GILDEN_HL);
                    } else {
                        this.lastHallMembers = new Array();
                        this.lastHallMembers.push("");
                        this.Show(this.LBL_HALL_GOTO_SPIELER_HL, this.LBL_HALL_GOTO_GILDEN);
                        this.Hide(this.LBL_HALL_GOTO_SPIELER, this.LBL_HALL_GOTO_GILDEN_HL);
                    };
                    if (par[1]){
                        this.ruhmesHalleSuchString = par[1];
                        this.ruhmesHalleSuchName = true;
                    };
                    if (!this.OnStage(this.IMG_SCR_HALLE_BG)){
                        this.ShowHallScreen();
                    };
                    _local3 = this.actor[this.CNT_HALL_LIST];
                    with (_local3) {
                        while (numChildren > 0) {
                            removeChildAt(0);
                        };
                    };
                    if (this.textDir == "right"){
                        HallListAddField((this.REL_HALL_LIST_COLUMN_6_X + 40), this.REL_HALL_LIST_LINES_Y, this.txt[this.TXT_HALL_LIST_COLUMN_1], this.FontFormat_HallListHeading);
                        HallListAddField((this.REL_HALL_LIST_COLUMN_6_X - 10), this.REL_HALL_LIST_LINES_Y, this.txt[((this.GuildHallMode) ? this.TXT_HALL_LIST_COLUMN_3 : this.TXT_HALL_LIST_COLUMN_2)], this.FontFormat_HallListHeading);
                        HallListAddField((this.REL_HALL_LIST_COLUMN_2_X - 10), this.REL_HALL_LIST_LINES_Y, this.txt[this.TXT_HALL_LIST_COLUMN_5], this.FontFormat_HallListHeading);
                        HallListAddField((this.REL_HALL_LIST_COLUMN_4_X + 20), this.REL_HALL_LIST_LINES_Y, this.txt[((this.GuildHallMode) ? this.TXT_GUILDHALL_LEADER : this.TXT_HALL_LIST_COLUMN_3)], this.FontFormat_HallListHeading);
                        HallListAddField((this.REL_HALL_LIST_COLUMN_3_X + 25), this.REL_HALL_LIST_LINES_Y, this.txt[((this.GuildHallMode) ? this.TXT_GUILDHALL_MEMBERS : this.TXT_HALL_LIST_COLUMN_4)], this.FontFormat_HallListHeading);
                    } else {
                        HallListAddField(this.REL_HALL_LIST_COLUMN_1_X, this.REL_HALL_LIST_LINES_Y, this.txt[this.TXT_HALL_LIST_COLUMN_1], this.FontFormat_HallListHeading);
                        HallListAddField(this.REL_HALL_LIST_COLUMN_2_X, this.REL_HALL_LIST_LINES_Y, this.txt[((this.GuildHallMode) ? this.TXT_HALL_LIST_COLUMN_3 : this.TXT_HALL_LIST_COLUMN_2)], this.FontFormat_HallListHeading);
                        HallListAddField(this.REL_HALL_LIST_COLUMN_6_X, this.REL_HALL_LIST_LINES_Y, this.txt[this.TXT_HALL_LIST_COLUMN_5], this.FontFormat_HallListHeading);
                        HallListAddField(this.REL_HALL_LIST_COLUMN_4_X, this.REL_HALL_LIST_LINES_Y, this.txt[((this.GuildHallMode) ? this.TXT_GUILDHALL_LEADER : this.TXT_HALL_LIST_COLUMN_3)], this.FontFormat_HallListHeading);
                        HallListAddField(this.REL_HALL_LIST_COLUMN_5_X, this.REL_HALL_LIST_LINES_Y, this.txt[((this.GuildHallMode) ? this.TXT_GUILDHALL_MEMBERS : this.TXT_HALL_LIST_COLUMN_4)], this.FontFormat_HallListHeading);
                    };
                    HallListName = new Array();
                    HallListGilde = new Array();
                    tmpArray = par[0].split("/");
                    line = 1;
                    i = 0;
                    while (i < (tmpArray.length - 1)) {
                        if ((((((((!(this.GuildHallMode)) && (!(this.ruhmesHalleSuchName)))) && ((tmpArray[i] < 0)))) ? "-" : "") + this.ruhmesHalleSuchString.toLowerCase()) == tmpArray[(i + ((this.ruhmesHalleSuchName) ? ((this.GuildHallMode) ? 2 : 1) : 0))].toLowerCase()){
                            tmpFmt = this.FontFormat_HallListHighLight;
                        } else {
                            if (((this.GuildHallMode) && ((int(tmpArray[(i + 3)]) < 0)))){
                                tmpFmt = this.FontFormat_GuildHallNoAttack;
                            } else {
                                if (((!(this.GuildHallMode)) && (!((this.lastAttacked.indexOf(tmpArray[(i + 1)].toLowerCase()) == -1))))){
                                    tmpFmt = this.FontFormat_GuildHallNoAttack;
                                } else {
                                    tmpFmt = this.FontFormat_HallListText;
                                };
                            };
                        };
                        this.lastHallMembers.push(tmpArray[(i + 1)]);
                        this.arrowHallMode = true;
                        if (this.textDir == "right"){
                            HallListAddField((this.REL_HALL_LIST_COLUMN_6_X + 40), (this.REL_HALL_LIST_LINES_Y + (line * this.REL_HALL_LIST_LINE_Y)), Math.abs(tmpArray[i]), tmpFmt, 0, this.GuildHallMode);
                            HallListAddField((this.REL_HALL_LIST_COLUMN_6_X - 10), ((this.REL_HALL_LIST_LINES_Y + (line * this.REL_HALL_LIST_LINE_Y)) + 5), ((this.GuildHallMode) ? "" : (((tmpArray[i] < 0)) ? "[J]" : (((tmpArray[(i + 3)] < 0)) ? "[M]" : "[K]"))), tmpFmt);
                            i = (i + 1);
                            HallListName[line] = tmpArray[i];
                            i = (i + 1);
                            HallListAddField(((this.GuildHallMode) ? (this.REL_HALL_LIST_COLUMN_4_X + 20) : (this.REL_HALL_LIST_COLUMN_6_X - 30)), (this.REL_HALL_LIST_LINES_Y + (line * this.REL_HALL_LIST_LINE_Y)), tmpArray[i], tmpFmt, ((this.GuildHallMode) ? ((this.REL_HALL_LIST_COLUMN_5_X - this.REL_HALL_LIST_COLUMN_4_X) - 10) : ((this.REL_HALL_LIST_COLUMN_4_X - this.REL_HALL_LIST_COLUMN_3_X) - 10)));
                            HallListGilde[line] = tmpArray[i];
                            i = (i + 1);
                            HallListAddField(((this.GuildHallMode) ? (this.REL_HALL_LIST_COLUMN_6_X - 10) : (this.REL_HALL_LIST_COLUMN_4_X + 20)), (this.REL_HALL_LIST_LINES_Y + (line * this.REL_HALL_LIST_LINE_Y)), (((tmpArray[i] == "")) ? this.txt[this.TXT_NOGUILD] : tmpArray[(i - 1)]), tmpFmt, ((this.GuildHallMode) ? ((this.REL_HALL_LIST_COLUMN_4_X - this.REL_HALL_LIST_COLUMN_2_X) - 10) : ((this.REL_HALL_LIST_COLUMN_5_X - this.REL_HALL_LIST_COLUMN_4_X) - 10)), true);
                            i = (i + 1);
                            HallListAddField((this.REL_HALL_LIST_COLUMN_3_X + 25), (this.REL_HALL_LIST_LINES_Y + (line * this.REL_HALL_LIST_LINE_Y)), Math.abs(tmpArray[i]), tmpFmt, 0, this.GuildHallMode);
                            HallListAddField((this.REL_HALL_LIST_COLUMN_2_X - 10), (this.REL_HALL_LIST_LINES_Y + (line * this.REL_HALL_LIST_LINE_Y)), (((tmpArray[i] == 1)) ? 0 : tmpArray[i]), tmpFmt, 0, this.GuildHallMode);
                        } else {
                            HallListAddField(this.REL_HALL_LIST_COLUMN_1_X, (this.REL_HALL_LIST_LINES_Y + (line * this.REL_HALL_LIST_LINE_Y)), Math.abs(tmpArray[i]), tmpFmt, 0, this.GuildHallMode);
                            HallListAddField(this.REL_HALL_LIST_COLUMN_2_X, ((this.REL_HALL_LIST_LINES_Y + (line * this.REL_HALL_LIST_LINE_Y)) + 5), ((this.GuildHallMode) ? "" : (((tmpArray[i] < 0)) ? "[J]" : (((tmpArray[(i + 3)] < 0)) ? "[M]" : "[K]"))), tmpFmt);
                            i = (i + 1);
                            HallListName[line] = tmpArray[i];
                            i = (i + 1);
                            HallListAddField(((this.GuildHallMode) ? this.REL_HALL_LIST_COLUMN_4_X : this.REL_HALL_LIST_COLUMN_3_X), (this.REL_HALL_LIST_LINES_Y + (line * this.REL_HALL_LIST_LINE_Y)), tmpArray[i], tmpFmt, ((this.GuildHallMode) ? ((this.REL_HALL_LIST_COLUMN_5_X - this.REL_HALL_LIST_COLUMN_4_X) - 10) : ((this.REL_HALL_LIST_COLUMN_4_X - this.REL_HALL_LIST_COLUMN_3_X) - 10)));
                            HallListGilde[line] = tmpArray[i];
                            i = (i + 1);
                            HallListAddField(((this.GuildHallMode) ? this.REL_HALL_LIST_COLUMN_2_X : this.REL_HALL_LIST_COLUMN_4_X), (this.REL_HALL_LIST_LINES_Y + (line * this.REL_HALL_LIST_LINE_Y)), (((tmpArray[i] == "")) ? this.txt[this.TXT_NOGUILD] : tmpArray[(i - 1)]), tmpFmt, ((this.GuildHallMode) ? ((this.REL_HALL_LIST_COLUMN_4_X - this.REL_HALL_LIST_COLUMN_2_X) - 10) : ((this.REL_HALL_LIST_COLUMN_5_X - this.REL_HALL_LIST_COLUMN_4_X) - 10)), true);
                            i = (i + 1);
                            HallListAddField(this.REL_HALL_LIST_COLUMN_5_X, (this.REL_HALL_LIST_LINES_Y + (line * this.REL_HALL_LIST_LINE_Y)), Math.abs(tmpArray[i]), tmpFmt, 0, this.GuildHallMode);
                            HallListAddField(this.REL_HALL_LIST_COLUMN_6_X, (this.REL_HALL_LIST_LINES_Y + (line * this.REL_HALL_LIST_LINE_Y)), (((tmpArray[i] == 1)) ? 0 : tmpArray[i]), tmpFmt, 0, this.GuildHallMode);
                        };
                        line = (line + 1);
                        i = (i + 1);
                    };
                    break;
                case this.RESP_ARBEIT_START:
                case this.RESP_ARBEIT_STOP:
                    ParseSavegame(par[0]);
                    this.ShowWorkScreen();
                    break;
                case this.RESP_ARBEIT_ERLEDIGT:
                    ParseSavegame(par[0]);
                    this.VerdientesGeld = par[1];
                    this.ShowWorkSuccessScreen();
                    break;
                case this.ACT_SCREEN_ARBEITEN:
                    this.Stundenlohn = Number(par[0]);
                    this.ShowWorkScreen();
                    break;
                case this.RESP_SAVEGAME_STAY_ERROR:
                    this.ErrorMessage(this.txt[this.TXT_ERROR_SELL_ITEM]);
                case this.RESP_SAVEGAME_STAY:
                case this.RESP_SAVEGAME_SHARD:
                case this.RESP_SAVEGAME_MIRROR:
                case this.RESP_MOVE_TOWER_ITEM:
                    ParseSavegame(par[0]);
                    if (this.OnStage(this.IMG_SCR_CHAR_BG)){
                        if (act == this.RESP_MOVE_TOWER_ITEM){
                            this.ShowTowerScreen(par);
                        } else {
                            if (act == this.RESP_SAVEGAME_SHARD){
                                this.Play(this.SND_SHARD);
                                this.mirrorFadeAmount = 0.2;
                                this.mirrorAniTimer.start();
                            };
                            if (act == this.RESP_SAVEGAME_MIRROR){
                                this.Play(this.SND_MIRROR);
                            };
                            this.DisplayInventory(undefined, this.OnStage(this.IMG_SCR_CHAR_BG_RIGHT));
                            i = 0;
                            while (i < 13) {
                                if (this.MirrorPieces[i]){
                                    this.Add((this.IMG_MIRROR_PIECE + i));
                                } else {
                                    this.Remove((this.IMG_MIRROR_PIECE + i));
                                };
                                i = (i + 1);
                            };
                        };
                    };
                    break;
                case this.ACT_SCREEN_CHAR:
                    ParseSavegame(par[0]);
                    this.PlayerDesc = this.resolveBreaks(par[1]);
                    if (this.Savegame[this.SG_FACE_1] == 0){
                        this.ShowBuildCharacterScreen();
                    } else {
                        this.ShowCharacterScreen(undefined, true);
                    };
                    break;
                case this.ACT_SCREEN_ZAUBERLADEN:
                    ParseSavegame(par[0]);
                    if (par[1]){
                        this.specialAction = par[1];
                    } else {
                        this.specialAction = 0;
                    };
                    this.trc("Magic shop says special action is", this.specialAction);
                    if (this.OnStage(this.IMG_SCR_FIDGET_BG)){
                        this.DisplayInventory();
                    } else {
                        this.Load(this.IMG_SCR_FIDGET_BG);
                        this.ShowCharacterScreen();
                        this.WhenLoaded(DoActZauberladen);
                    };
                    break;
                case this.ACT_SCREEN_SCHMIEDE:
                    ParseSavegame(par[0]);
                    if (par[1]){
                        this.specialAction = par[1];
                    } else {
                        this.specialAction = 0;
                    };
                    this.trc("Weapon shop says special action is", this.specialAction);
                    if (this.OnStage(this.IMG_SCR_SHAKES_BG)){
                        this.DisplayInventory();
                    } else {
                        this.Load(this.IMG_SCR_SHAKES_BG);
                        this.ShowCharacterScreen();
                        this.WhenLoaded(DoActSchmiede);
                    };
                    break;
                case this.RESP_UPDATE_CHECK:
                    ExternalInterface.call("refresh");
                    break;
                case this.RESP_LOGIN_SUCCESS_BOUGHT:
                case this.RESP_LOGIN_SUCCESS:
                    this.mirrorFadeAmount = 0.2;
                    this.admin_login = "";
                    if (act == this.RESP_LOGIN_SUCCESS_BOUGHT){
                        this.MushBought = int(par[3]);
                    } else {
                        this.MushBought = 0;
                    };
                    this.beerFest = false;
                    if (par[5]){
                        this.beerFest = !((int(par[5]) == 0));
                    };
                    if (par[4]){
                        this.param_server_version_act = par[4];
                    };
                    this.sessionID = "";
                    if (par[2]){
                        this.sessionID = par[2];
                    };
                    this.LevelUp = false;
                    this.LastLevel = 0;
                    this.oldAch = new Array();
                    this.oldAlbum = -1;
                    this.AlbumEffect = false;
                    this.PreviousLogin = true;
                    this.GildenID = 0;
                    ParseSavegame(par[0], false);
                    if (par[1]){
                        this.DealerAktion = int(par[1]);
                    } else {
                        this.DealerAktion = 0;
                    };
                    if (this.DealerAktion > 0){
                        this.PulseDealer = true;
                    } else {
                        this.PulseDealer = false;
                    };
                    this.so.data.skipAutoLogin = false;
                    if (!this.so.data.HasAccount){
                        this.so.data.PaymentMethod = 4;
                    };
                    this.so.data.HasAccount = true;
                    this.so.data.userName = this.actor[this.INP_NAME].getChildAt(1).text;
                    this.so.data.password = this.actor[this.INP_LOGIN_PASSWORD].getChildAt(1).text;
                    this.so.flush();
                    this.Add(this.CNT_IF_LOGOUT);
                    if (this.Savegame[this.SG_FACE_1] == 0){
                        this.trc("Fehler: Charakter nicht initialisiert.");
                        this.RequestLogout();
                    } else {
                        ParseSavegame(par[0]);
                        if (this.view_player != ""){
                            this.selName = this.view_player;
                            this.SendAction(this.ACT_REQUEST_CHAR, this.view_player);
                        } else {
                            if (this.param_hall != ""){
                                this.SendAction(this.ACT_SCREEN_EHRENHALLE, this.param_hall, "-2");
                                this.param_valid = "";
                            } else {
                                if ((((int(this.Savegame[this.SG_EMAIL_VALID]) < 1)) && ((int(this.Savegame[this.SG_SERVER_TIME]) > (int(this.Savegame[this.SG_EMAIL_DATE]) + (((2 * 60) * 24) * 60)))))){
                                    if (this.param_valid != ""){
                                        this.SendAction(this.ACT_VALIDATE, this.param_valid);
                                        this.param_valid = "";
                                    } else {
                                        this.ShowEmailNagScreen();
                                    };
                                } else {
                                    if (int(this.Savegame[this.SG_EMAIL_VALID]) == 1){
                                        if (this.param_valid != ""){
                                            this.ShowEmailNagScreen(3);
                                        } else {
                                            this.ShowCityScreen();
                                        };
                                    } else {
                                        if (this.param_valid != ""){
                                            this.SendAction(this.ACT_VALIDATE, this.param_valid);
                                            this.param_valid = "";
                                        } else {
                                            this.ShowCityScreen();
                                        };
                                    };
                                };
                            };
                        };
                    };
                    break;
                case this.ERR_ALREADY_IN_GUILD:
                case this.ERR_NO_INDEX_FREE:
                case this.ERR_FIGHT_SELF:
                case this.ERR_GUILD_NOT_FOUND:
                case this.ERR_GUILD_NOT_ALLOWED:
                case this.ERR_GUILD_LACK_MUSH:
                case this.ERR_GUILD_LACK_GOLD:
                case this.ERR_GUILD_BUILDING_NOT_FOUND:
                case this.ERR_GUILD_BUILDING_MAX:
                case this.ERR_GUILD_NOT_MEMBER:
                case this.ERR_GUILD_MASTER_CANT_BE_OFFICER:
                case this.ERR_GUILD_IS_FULL:
                case this.ERR_GUILD_ALREADY_YOU_OTHER:
                case this.ERR_GUILD_NOT_REAL_MEMBER:
                case this.ERR_GUILD_ALREADY_YOU_THIS:
                case this.ERR_GUILD_PLAYER_NOT_FOUND:
                case this.ERR_SUBJECT_TOO_SHORT:
                case this.ERR_GUILD_TOO_EXPENSIVE:
                case this.ERR_GUILD_CHAT_NOT_MEMBER:
                case this.ERR_GUILD_CHAT_HISTORY:
                case this.ERR_GUILD_CHAT_TEXT_ERROR:
                case this.ERR_BEER:
                case this.ERR_NO_MUSH_BAR:
                case this.ERR_NO_ENDURANCE:
                case this.ERR_WORSE_MOUNT:
                case this.ERR_GUILD_ALREADY_MEMBER:
                case this.ERR_NOT_INVITED:
                case this.ERR_NO_MUSH_PVP:
                case this.ERR_NO_MUSH_MQ:
                    this.ErrorMessage(this.txt[((this.TXT_ERROR_ALREADY_IN_GUILD - Math.abs(this.ERR_ALREADY_IN_GUILD)) + Math.abs(act))]);
                    break;
                case this.ERR_BOOST:
                    break;
                case this.RESP_ACCOUNT_SUCCESS:
                    this.actor[this.INP_LOGIN_PASSWORD].getChildAt(1).text = this.actor[this.INP_PASSWORD].getChildAt(1).text;
                    this.so.data.skipAutoLogin = false;
                    this.so.data.HasAccount = true;
                    this.so.data.hadAccount = true;
                    this.so.data.userName = this.actor[this.INP_NAME].getChildAt(1).text;
                    this.so.data.password = this.actor[this.INP_LOGIN_PASSWORD].getChildAt(1).text;
                    this.so.data.advpar = this.paramObj;
                    this.so.flush();
                    logInAfterPixel = true;
                    break;
                case this.ERR_NAME_EXISTS:
                    this.ErrorMessage(this.txt[this.TXT_ERROR_NAME_EXISTS]);
                    break;
                case this.ERR_NAME_TOO_SHORT:
                    this.ErrorMessage(this.txt[this.TXT_ERROR_NAME_TOO_SHORT]);
                    break;
                case this.ERR_PASSWORD_TOO_SHORT:
                    this.ErrorMessage(this.txt[this.TXT_ERROR_PASSWORD_TOO_SHORT]);
                    break;
                case this.ERR_EMAIL_REJECTED:
                    this.ErrorMessage(this.txt[this.TXT_ERROR_EMAIL_REJECTED]);
                    break;
                case this.ERR_NAME_REJECTED:
                    this.ErrorMessage(this.txt[this.TXT_ERROR_NAME_REJECTED]);
                    break;
                case this.ERR_LOGIN_FAILED:
                    this.so.data.skipAutoLogin = true;
                    this.so.data.password = "";
                    this.so.flush();
                    this.actor[this.INP_EMAIL].getChildAt(1).text = "";
                    this.actor[this.INP_PASSWORD].getChildAt(1).text = "";
                    this.CharVolk = 0;
                    this.ShowLoginScreen(undefined, true, true);
                    this.ErrorMessage(this.txt[this.TXT_ERROR_LOGIN_FAILED]);
                    break;
                case this.ERR_TOO_EXPENSIVE:
                    if (this.OnStage(this.BTN_MODIFY_CHARACTER)){
                        this.CharVolk = this.revertCharVolk;
                        this.CharMann = this.revertCharMann;
                        this.CharColor = this.revertCharColor;
                        this.CharMouth = this.revertCharMouth;
                        this.CharBeard = this.revertCharBeard;
                        this.CharNose = this.revertCharNose;
                        this.CharEyes = this.revertCharEyes;
                        this.CharBrows = this.revertCharBrows;
                        this.CharEars = this.revertCharEars;
                        this.CharHair = this.revertCharHair;
                        this.CharSpecial = this.revertCharSpecial;
                        this.CharSpecial2 = this.revertCharSpecial2;
                        this.ShowOptionScreen();
                    };
                    this.ErrorMessage(this.txt[this.TXT_ERROR_TOO_EXPENSIVE]);
                    break;
                case this.ERR_WRONG_PASSWORD:
                    this.ErrorMessage(this.txt[this.TXT_ERROR_WRONG_PASSWORD]);
                    break;
                case this.ERR_FACE_DATA_INCORRECT:
                    this.ErrorMessage(this.txt[this.TXT_ERROR_FACE_DATA_INCORRECT]);
                    break;
                case this.ERR_EMAIL_WRONG:
                    this.ErrorMessage(this.txt[this.TXT_ERROR_EMAIL_WRONG]);
                    break;
                case this.RESP_PLAYER_NOT_FOUND:
                    this.ErrorMessage(this.txt[this.TXT_ERROR_PLAYER_NOT_FOUND]);
                    break;
                    if (act < 0){
                        this.ErrorMessage((((this.txt[this.TXT_ERROR_UNKNOWN] + " (#") + String(act)) + ")"));
                    } else {
                        this.trc((("Warning: Action unknown: " + act) + ". Ignored!"));
                    };
            };
            if (this.defined_pixel_calls[act]){
                ExternalInterface.call(this.defined_pixel_calls[act], String(act), this.param_cid, ((act)==this.RESP_ACCOUNT_SUCCESS) ? par[0] : this.Savegame[this.SG_PLAYER_ID], this.paramObj, this.so.data.advpar);
            };
            pas = new Array();
            pxlStr = "";
            inVar = false;
            for each (pixel in this.trackPixels) {
                if ((((int(pixel[0]) == act)) || ((((this.nextPxl > 0)) && ((this.nextPxl == int(pixel[0]))))))){
                    pas = new Array();
                    for each (pa in pixel[1].split(",")) {
                        if (pa.indexOf("-") != -1){
                            i = int(pa.split("-")[0]);
                            while (i <= int(pa.split("-")[1])) {
                                pas.push(int(i));
                                i = (i + 1);
                            };
                        } else {
                            pas.push(int(pa));
                        };
                    };
                    if ((((pixel[1] == "")) || (!((pas.indexOf(int(this.param_adv)) == -1))))){
                        pxlStr = pixel[2].split("%playerid%").join(this.Savegame[this.SG_PLAYER_ID]);
                        pxlStr = pxlStr.split("%cid%").join(this.param_cid);
                        pxlStr = pxlStr.split("%mushbought%").join(String((this.MushBought / 100)));
                        if (this.so.data.advpar){
                            pxlArr = pxlStr.split("<").join(">").split(">");
                            pxlStr = "";
                            inVar = false;
                            i = 0;
                            while (i < pxlArr.length) {
                                if (inVar){
                                    if (this.so.data.advpar[pxlArr[i]]){
                                        pxlStr = (pxlStr + String(this.so.data.advpar[pxlArr[i]]));
                                    } else {
                                        this.trc("Warning: Constructing tracking pixel url: Variable", pxlArr[i], "was not within the stored parameters.");
                                    };
                                } else {
                                    pxlStr = (pxlStr + pxlArr[i]);
                                };
                                inVar = !(inVar);
                                i = (i + 1);
                            };
                        };
                        if (int(this.Savegame[this.SG_PLAYER_ID]) == 0){
                            this.nextPxl = -(act);
                        } else {
                            LoadTrackingPixel(pxlStr);
                        };
                    };
                };
            };
            if (this.nextPxl > 0){
                this.nextPxl = 0;
            };
            if (logInAfterPixel){
                this.RequestLogin(event);
            };
        }
        public function ExpandItemStructure(arr:Array, offset:int){
            var typeOriginal:Number;
            var picOriginal:Number;
            var mushOriginal:Number;
            var enchantment:int;
            var socket:int;
            var enchantmentPower:int;
            var socketPower:int;
            typeOriginal = arr[(offset + this.SG_ITM_TYP)];
            picOriginal = arr[(offset + this.SG_ITM_PIC)];
            mushOriginal = arr[(offset + this.SG_ITM_MUSH)];
            enchantment = int((typeOriginal / Math.pow(2, 24)));
            socket = (typeOriginal - (enchantment * Math.pow(2, 24)));
            socket = (socket / Math.pow(2, 16));
            typeOriginal = ((typeOriginal - (enchantment * Math.pow(2, 24))) - (socket * Math.pow(2, 16)));
            enchantmentPower = int((picOriginal / Math.pow(2, 16)));
            picOriginal = (picOriginal - (enchantmentPower * Math.pow(2, 16)));
            socketPower = int((mushOriginal / Math.pow(2, 16)));
            mushOriginal = (mushOriginal - (socketPower * Math.pow(2, 16)));
            arr[(offset + this.SG_ITM_TYP)] = typeOriginal;
            arr[(offset + this.SG_ITM_PIC)] = picOriginal;
            arr[(offset + this.SG_ITM_MUSH)] = mushOriginal;
            arr[(offset + this.SG_ITM_EXT_SOCKET)] = socket;
            arr[(offset + this.SG_ITM_EXT_ENCHANT)] = enchantment;
            arr[(offset + this.SG_ITM_EXT_ENCHANT_POWER)] = enchantmentPower;
            arr[(offset + this.SG_ITM_EXT_SOCKET_POWER)] = socketPower;
        }
        public function WaitingFor(targetTime:Number):Boolean{
            var tmpTime:Date;
            tmpTime = new Date();
            tmpTime.setTime(((targetTime * 1000) - ((1000 * 60) * 60)));
            return ((this.GameTime.getTime() < tmpTime.getTime()));
        }
        public function WaitingTime(targetTime:Number):String{
            var tmpTime:* = null;
            var timeDiff:* = null;
            var targetTime:* = targetTime;
            tmpTime = new Date();
            timeDiff = new Date();
            var diffDays:* = 0;
            tmpTime.setTime(((targetTime * 1000) - ((1000 * 60) * 60)));
            timeDiff.setTime((tmpTime.getTime() - this.GameTime.getTime()));
            var _local3 = timeDiff;
            diffDays = ((((timeDiff.getTime() / 1000) / 60) / 60) / 24);
            return ((((diffDays > 0)) ? ((String((diffDays + 1)) + " ") + txt[(((diffDays == 0)) ? TXT_TAG : TXT_TAGE)]) : ((((((getUTCHours())>0) ? (String((getUTCHours() - 0)) + ":") : "" + ((getUTCMinutes())<10) ? "0" : "") + String(getUTCMinutes())) + ((getUTCSeconds())<10) ? ":0" : ":") + String(getUTCSeconds()))));
        }
        public function WaitingProgress(startTime:Number, targetTime:Number):Number{
            var tmpTime:Date;
            var tmpTime2:Date;
            tmpTime = new Date();
            tmpTime2 = new Date();
            tmpTime.setTime(((targetTime * 1000) - ((1000 * 60) * 60)));
            tmpTime2.setTime(((startTime * 1000) - ((1000 * 60) * 60)));
            return (((this.GameTime.getTime() - tmpTime2.getTime()) / (tmpTime.getTime() - tmpTime2.getTime())));
        }
        public function IsToday(reqTime:Number):Boolean{
            return ((((this.TimeStr(reqTime, true).indexOf(".") == -1)) && ((this.TimeStr(reqTime, true).indexOf("/") == -1))));
        }
        public function TimeStr(reqTime:Number, short:Boolean=false):String{
            var resTime:* = null;
            var nowTime:* = null;
            var reqTime:* = reqTime;
            var short:Boolean = short;
            var lz:* = function (val:int):String{
                return ((((val)<10) ? "0" : "" + String(val)));
            };
            resTime = new Date();
            nowTime = new Date();
            resTime.setTime((((reqTime * 1000) - ((1000 * 60) * 60)) - (this.ServerTime.getTime() - this.LocalTime.getTime())));
            if (this.lang_code == "de"){
                if (short){
                    return (((((((((resTime.getDate() + ".") + String((resTime.getMonth() + 1))) == ((nowTime.getDate() + ".") + String((nowTime.getMonth() + 1))))) ? "" : (((resTime.getDate() + ".") + String((resTime.getMonth() + 1))) + ". ")) + lz(resTime.getHours())) + ":") + lz(resTime.getMinutes())));
                };
                return (((((((((((resTime.getDate() + ".") + String((resTime.getMonth() + 1))) + ".") + resTime.getFullYear()) + " ") + lz(resTime.getHours())) + ":") + lz(resTime.getMinutes())) + ":") + lz(resTime.getSeconds())));
            };
            if (this.lang_code == "pl"){
                if (short){
                    return (((((((((resTime.getDate() + "/") + String((resTime.getMonth() + 1))) == ((nowTime.getDate() + "/") + String((nowTime.getMonth() + 1))))) ? "" : (((resTime.getDate() + "/") + String((resTime.getMonth() + 1))) + "/ ")) + lz(resTime.getHours())) + ":") + lz(resTime.getMinutes())));
                };
                return (((((((((((resTime.getDate() + "/") + String((resTime.getMonth() + 1))) + "/") + resTime.getFullYear()) + " ") + lz(resTime.getHours())) + ":") + lz(resTime.getMinutes())) + ":") + lz(resTime.getSeconds())));
            };
            if (short){
                return (((((((((resTime.getDate() + ".") + String((resTime.getMonth() + 1))) == ((nowTime.getDate() + ".") + String((nowTime.getMonth() + 1))))) ? "" : (((String((resTime.getMonth() + 1)) + "/") + resTime.getDate()) + " ")) + lz(resTime.getHours())) + ":") + lz(resTime.getMinutes())));
            };
            return (((((((((((String((resTime.getMonth() + 1)) + "/") + resTime.getDate()) + "/") + resTime.getFullYear()) + " ") + lz(resTime.getHours())) + ":") + lz(resTime.getMinutes())) + ":") + lz(resTime.getSeconds())));
        }
        public function TimeCalcEvent(evt:Event):void{
            var currentTime:Date;
            currentTime = new Date();
            if ((((this.slmCount > 23)) && ((this.ststep == 8)))){
                this.Add(this.IMG_FILLSPACE);
                this.slmCount = 0;
            };
            this.GameTime.setTime((currentTime.getTime() + (this.ServerTime.getTime() - this.LocalTime.getTime())));
        }
        public function RequestSignup(evt:Event):void{
            var inpText:String;
            if ((evt is KeyboardEvent)){
                if (((((!((KeyboardEvent(evt).keyCode == 13))) && (!((KeyboardEvent(evt).keyCode == 10))))) && (!((KeyboardEvent(evt).keyCode == 16777230))))){
                    inpText = this.actor[this.INP_NAME].getChildAt(1).text;
                    if (inpText.substr(0, 7) == "xxxtest"){
                        this.actor[this.INP_EMAIL].getChildAt(1).text = (inpText + "@playagames.com");
                        this.actor[this.INP_PASSWORD].getChildAt(1).text = "12345";
                        this.Add(this.CB_AGB_CHECKED);
                    };
                    return;
                };
            };
            if (getChildByName(this.actor[this.CB_AGB_CHECKED].name)){
                if (((!((this.param_bullshit_text == ""))) && (this.OnStage(this.CB_FUCK_CHECKED)))){
                    this.param_cid = this.param_bullshit_cid;
                    this.so.data.cid = this.param_cid;
                    this.so.flush();
                };
                this.SendAction(this.ACT_ACCOUNT_CREATE, this.actor[this.INP_NAME].getChildAt(1).text, this.actor[this.INP_PASSWORD].getChildAt(1).text, this.actor[this.INP_EMAIL].getChildAt(1).text, this.param_rec, ((this.buffedReq) ? ("buf" + this.buffed_id) : this.param_adv), this.CharVolk, ((this.CharMann) ? 1 : 2), this.CharKaste, (((((((((((((((((this.CharMouth + "/") + this.CharHair) + "/") + this.CharBrows) + "/") + this.CharEyes) + "/") + this.CharBeard) + "/") + this.CharNose) + "/") + this.CharEars) + "/") + this.CharSpecial) + "/") + this.CharSpecial2) + "/"), this.param_cid);
            } else {
                this.ErrorMessage(this.txt[this.TXT_ERROR_AGB]);
            };
        }
        public function RequestLogin(evt:Event=undefined):void{
            var tmpPw:String;
            if ((evt is KeyboardEvent)){
                if (((((!((KeyboardEvent(evt).keyCode == 13))) && (!((KeyboardEvent(evt).keyCode == 10))))) && (!((KeyboardEvent(evt).keyCode == 16777230))))){
                    return;
                };
            };
            tmpPw = this.actor[this.INP_LOGIN_PASSWORD].getChildAt(1).text;
            if (this.C_MD5){
                if (tmpPw.length < 32){
                    tmpPw = this.MD5(tmpPw);
                };
            };
            this.SendAction(this.ACT_LOGIN, this.actor[this.INP_NAME].getChildAt(1).text, tmpPw, "v1.70");
        }
        public function ShowLoginScreen(evt:Event=undefined, noBC:Boolean=false, noCookie:Boolean=false):void{
            var playername:String;
            if (((((((((!(this.so.data.HasAccount)) && (!((evt is MouseEvent))))) && (!(noBC)))) && (!(this.buffedMode)))) && (!(this.ssoMode)))){
                this.ShowBuildCharacterScreen();
                return;
            };
            this.RemoveAll();
            this.actor[this.INP_LOGIN_PASSWORD].getChildAt(1).visible = true;
            this.actor[this.LBL_WINDOW_TITLE].text = this.txt[this.TXT_WELCOME];
            this.actor[this.LBL_WINDOW_TITLE].x = ((this.POS_IF_WIN_X + this.REL_IF_WIN_WELCOME_X) - int((this.actor[this.LBL_WINDOW_TITLE].textWidth / 2)));
            this.actor[this.INP_NAME].addEventListener(KeyboardEvent.KEY_DOWN, this.RequestLogin);
            this.actor[this.INP_LOGIN_PASSWORD].addEventListener(KeyboardEvent.KEY_DOWN, this.RequestLogin);
            if (!noCookie){
                if (this.so.data.userName){
                    this.actor[this.INP_NAME].getChildAt(1).text = String(this.so.data.userName);
                };
                if (this.so.data.password){
                    this.actor[this.INP_LOGIN_PASSWORD].getChildAt(1).text = String(this.so.data.password);
                };
            };
            this.Add(this.BNC_WINDOW_LOGIN);
            this.LogonRTL();
            if (this.buffedMode){
                this.actor[this.LBL_GOTO_SIGNUP].htmlText = this.buffedLinkText;
                this.actor[this.CNT_GOTO_SIGNUP].x = ((this.POS_IF_WIN_X + this.REL_IF_WIN_WELCOME_X) - int((this.actor[this.LBL_GOTO_SIGNUP].textWidth / 2)));
            };
            if (this.ssoMode){
                this.actor[this.INP_NAME].getChildAt(1).type = TextFieldType.DYNAMIC;
                this.actor[this.INP_LOGIN_PASSWORD].getChildAt(1).type = TextFieldType.DYNAMIC;
                playername = ExternalInterface.call("sso_get_uid");
                this.actor[this.INP_NAME].getChildAt(1).text = playername;
                this.actor[this.INP_LOGIN_PASSWORD].getChildAt(1).text = this.mp_api_user_token;
            };
        }
        public function LogonRTL(){
            if (this.textDir == "right"){
                this.actor[this.LBL_NAME].x = (((this.POS_IF_WIN_X + this.REL_IF_GOTO_LOGIN_X) - 15) - this.actor[this.LBL_NAME].textWidth);
                this.actor[this.LBL_LOGIN_PASSWORD].x = (((this.POS_IF_WIN_X + this.REL_IF_GOTO_LOGIN_X) - 15) - this.actor[this.LBL_LOGIN_PASSWORD].textWidth);
                this.actor[this.LBL_EMAIL].x = (((this.POS_IF_WIN_X + this.REL_IF_GOTO_LOGIN_X) - 15) - this.actor[this.LBL_EMAIL].textWidth);
                this.actor[this.LBL_PASSWORD].x = (((this.POS_IF_WIN_X + this.REL_IF_GOTO_LOGIN_X) - 15) - this.actor[this.LBL_PASSWORD].textWidth);
                this.actor[this.INP_NAME].x = (this.POS_IF_WIN_X + this.REL_IF_WIN_INPUTS_X);
                this.actor[this.INP_LOGIN_PASSWORD].x = (this.POS_IF_WIN_X + this.REL_IF_WIN_INPUTS_X);
                this.actor[this.INP_EMAIL].x = (this.POS_IF_WIN_X + this.REL_IF_WIN_INPUTS_X);
                this.actor[this.INP_PASSWORD].x = (this.POS_IF_WIN_X + this.REL_IF_WIN_INPUTS_X);
            };
        }
        public function ShowSignupScreen(evt:Event=undefined):void{
            var i:* = 0;
            var j:* = 0;
            var jumpTimer:* = null;
            var playername:* = null;
            var email:* = null;
            var DoJump:* = null;
            var evt:* = evt;
            jumpTimer = new Timer(200, 20);
            if (this.KlasseGewählt){
                this.RemoveAll();
                this.actor[this.INP_PASSWORD].getChildAt(1).visible = true;
                this.actor[this.LBL_WINDOW_TITLE].text = this.txt[this.TXT_TITLE_SIGNUP];
                this.actor[this.LBL_WINDOW_TITLE].x = ((this.POS_IF_WIN_X + this.REL_IF_WIN_WELCOME_X) - int((this.actor[this.LBL_WINDOW_TITLE].textWidth / 2)));
                this.actor[this.INP_NAME].addEventListener(KeyboardEvent.KEY_UP, this.RequestSignup);
                this.actor[this.INP_PASSWORD].addEventListener(KeyboardEvent.KEY_DOWN, this.RequestSignup);
                this.actor[this.INP_EMAIL].addEventListener(KeyboardEvent.KEY_DOWN, this.RequestSignup);
                if (this.buffedReq){
                    this.actor[this.INP_NAME].getChildAt(1).text = this.buffed_name;
                    this.actor[this.INP_EMAIL].getChildAt(1).text = this.buffed_email;
                };
                if (this.ssoMode){
                    this.actor[this.INP_EMAIL].getChildAt(1).type = TextFieldType.DYNAMIC;
                    this.actor[this.INP_PASSWORD].getChildAt(1).type = TextFieldType.DYNAMIC;
                    playername = ExternalInterface.call("sso_get_uid");
                    this.actor[this.INP_NAME].getChildAt(1).text = playername;
                    email = ExternalInterface.call("sso_get_email");
                    this.actor[this.INP_EMAIL].getChildAt(1).text = email;
                    this.actor[this.INP_PASSWORD].getChildAt(1).text = this.mp_api_user_token;
                };
                this.LogonRTL();
                this.Hide(this.IMG_PASSWORD_SMILEY_SAD, this.IMG_PASSWORD_SMILEY_NEUTRAL, this.IMG_PASSWORD_SMILEY_HAPPY);
                this.Add(this.BNC_WINDOW_SIGNUP);
                if (this.param_bullshit_text != ""){
                    this.Add(this.BNC_FUCK);
                };
            } else {
                this.ErrorMessage(this.txt[this.TXT_ERROR_SELECTCLASS]);
                if (!this.SignupJumpRunning){
                    DoJump = function (evt:TimerEvent){
                        if (j <= 2){
                            i = 0;
                            while (i < 2) {
                                AnimateAch(((IMG_KASTE_1_IDLE + i) + (j * 2)), actor[((IMG_KASTE_1_IDLE + i) + (j * 2))].y);
                                i++;
                            };
                        };
                        j++;
                        if (j > 10){
                            jumpTimer.stop();
                            jumpTimer.removeEventListener(TimerEvent.TIMER, DoJump);
                            SignupJumpRunning = false;
                        };
                    };
                    this.SignupJumpRunning = true;
                    jumpTimer.addEventListener(TimerEvent.TIMER, DoJump);
                    j = 0;
                    jumpTimer.start();
                };
            };
        }
        public function ModifyCharacter(evt:Event):void{
            var actorID:* = 0;
            var evt:* = evt;
            var RemoveColorOffset:* = function (val:int, type:int):int{
                if ((getCharImageBound(CharVolk, CharMann, 11) & type)){
                    while (val >= 100) {
                        val = (val - 100);
                    };
                };
                return (val);
            };
            var AddColorOffset:* = function (val:int, type:int):int{
                if ((getCharImageBound(CharVolk, CharMann, 11) & type)){
                    val = (val + (100 * CharColor));
                };
                return (val);
            };
            actorID = this.GetActorID(evt.target);
            this.CharHair = RemoveColorOffset(this.CharHair, this.C_HAIR);
            this.CharBrows = RemoveColorOffset(this.CharBrows, this.C_BROWS);
            this.CharBeard = RemoveColorOffset(this.CharBeard, this.C_BEARD);
            this.CharSpecial2 = RemoveColorOffset(this.CharSpecial2, this.C_SPECIAL2);
            switch (actorID){
                case this.BTN_MOUTH_MINUS:
                    this.CharMouth--;
                    if (this.CharMouth < 1){
                        this.CharMouth = this.getCharImageBound(this.CharVolk, this.CharMann, 1);
                    };
                    break;
                case this.BTN_MOUTH_PLUS:
                    this.CharMouth++;
                    if (this.CharMouth > this.getCharImageBound(this.CharVolk, this.CharMann, 1)){
                        this.CharMouth = 1;
                    };
                    break;
                case this.BTN_HAIR_MINUS:
                    this.CharHair--;
                    if (this.CharHair < 1){
                        this.CharHair = this.getCharImageBound(this.CharVolk, this.CharMann, 7);
                    };
                    break;
                case this.BTN_HAIR_PLUS:
                    this.CharHair++;
                    if (this.CharHair > this.getCharImageBound(this.CharVolk, this.CharMann, 7)){
                        this.CharHair = 1;
                    };
                    break;
                case this.BTN_BROWS_MINUS:
                    this.CharBrows--;
                    if (this.CharBrows < 1){
                        this.CharBrows = this.getCharImageBound(this.CharVolk, this.CharMann, 5);
                    };
                    break;
                case this.BTN_BROWS_PLUS:
                    this.CharBrows++;
                    if (this.CharBrows > this.getCharImageBound(this.CharVolk, this.CharMann, 5)){
                        this.CharBrows = 1;
                    };
                    break;
                case this.BTN_EYES_MINUS:
                    this.CharEyes--;
                    if (this.CharEyes < 1){
                        this.CharEyes = this.getCharImageBound(this.CharVolk, this.CharMann, 4);
                    };
                    break;
                case this.BTN_EYES_PLUS:
                    this.CharEyes++;
                    if (this.CharEyes > this.getCharImageBound(this.CharVolk, this.CharMann, 4)){
                        this.CharEyes = 1;
                    };
                    break;
                case this.BTN_BEARD_MINUS:
                    this.CharBeard--;
                    if (this.CharBeard < 1){
                        this.CharBeard = this.getCharImageBound(this.CharVolk, this.CharMann, 2);
                    };
                    break;
                case this.BTN_BEARD_PLUS:
                    this.CharBeard++;
                    if (this.CharBeard > this.getCharImageBound(this.CharVolk, this.CharMann, 2)){
                        this.CharBeard = 1;
                    };
                    break;
                case this.BTN_NOSE_MINUS:
                    this.CharNose--;
                    if (this.CharNose < 1){
                        this.CharNose = this.getCharImageBound(this.CharVolk, this.CharMann, 3);
                    };
                    break;
                case this.BTN_NOSE_PLUS:
                    this.CharNose++;
                    if (this.CharNose > this.getCharImageBound(this.CharVolk, this.CharMann, 3)){
                        this.CharNose = 1;
                    };
                    break;
                case this.BTN_EARS_MINUS:
                    this.CharEars--;
                    if (this.CharEars < 1){
                        this.CharEars = this.getCharImageBound(this.CharVolk, this.CharMann, 6);
                    };
                    break;
                case this.BTN_EARS_PLUS:
                    this.CharEars++;
                    if (this.CharEars > this.getCharImageBound(this.CharVolk, this.CharMann, 6)){
                        this.CharEars = 1;
                    };
                    break;
                case this.BTN_SPECIAL_MINUS:
                    this.CharSpecial--;
                    if (this.CharSpecial < 1){
                        this.CharSpecial = this.getCharImageBound(this.CharVolk, this.CharMann, 8);
                    };
                    break;
                case this.BTN_SPECIAL_PLUS:
                    this.CharSpecial++;
                    if (this.CharSpecial > this.getCharImageBound(this.CharVolk, this.CharMann, 8)){
                        this.CharSpecial = 1;
                    };
                    break;
                case this.BTN_SPECIAL2_MINUS:
                    this.CharSpecial2--;
                    if (this.CharSpecial2 < 1){
                        this.CharSpecial2 = this.getCharImageBound(this.CharVolk, this.CharMann, 9);
                    };
                    break;
                case this.BTN_SPECIAL2_PLUS:
                    this.CharSpecial2++;
                    if (this.CharSpecial2 > this.getCharImageBound(this.CharVolk, this.CharMann, 9)){
                        this.CharSpecial2 = 1;
                    };
                    break;
                case this.BTN_COLOR_PLUS:
                    this.CharColor++;
                    if (this.CharColor > this.getCharImageBound(this.CharVolk, this.CharMann, 10)){
                        this.CharColor = 1;
                    };
                    break;
                case this.BTN_COLOR_MINUS:
                    this.CharColor--;
                    if (this.CharColor < 1){
                        this.CharColor = this.getCharImageBound(this.CharVolk, this.CharMann, 10);
                    };
                    break;
            };
            this.CharHair = AddColorOffset(this.CharHair, this.C_HAIR);
            this.CharBrows = AddColorOffset(this.CharBrows, this.C_BROWS);
            this.CharBeard = AddColorOffset(this.CharBeard, this.C_BEARD);
            this.CharSpecial2 = AddColorOffset(this.CharSpecial2, this.C_SPECIAL2);
            this.LoadCharacterImage();
        }
        public function LoadCharacterImage(actorID:int=0, loadOnly:Boolean=false, isVolk:int=0, isMann:Boolean=false, isKaste:int=0, isMouth:int=0, isBeard:int=0, isNose:int=0, isEyes:int=0, isBrows:int=0, isEars:int=0, isHair:int=0, isSpecial:int=0, isSpecial2:int=0):void{
            var charPrefix:* = null;
            var i:* = 0;
            var actorOffset:* = 0;
            var actorID:int = actorID;
            var loadOnly:Boolean = loadOnly;
            var isVolk:int = isVolk;
            var isMann:Boolean = isMann;
            var isKaste:int = isKaste;
            var isMouth:int = isMouth;
            var isBeard:int = isBeard;
            var isNose:int = isNose;
            var isEyes:int = isEyes;
            var isBrows:int = isBrows;
            var isEars:int = isEars;
            var isHair:int = isHair;
            var isSpecial:int = isSpecial;
            var isSpecial2:int = isSpecial2;
            var LoadCharacterItemImage:* = function (localActorID:int, parURL:String, itemIndex:int):void{
                var newLoad:Boolean;
                var url:String;
                url = (img_url[img_url_index] + parURL);
                if ((((itemIndex > 0)) && ((getCharImageBound(isVolk, isMann, itemIndex) == 0)))){
                    url = (img_url[img_url_index] + "res/gfx/empty.png");
                };
                newLoad = !((actorURL[localActorID] == url));
                actorURL[localActorID] = url;
                if (newLoad){
                    actorLoaded[localActorID] = 0;
                    Load(localActorID);
                };
            };
            charPrefix = this.getCharPrefix(false, isVolk, isMann, isKaste);
            if (actorID == this.C_EMPTY){
                if (this.OnStage(this.IMG_SCR_BUILDCHAR_BACKGROUND)){
                    var _local16 = this.actor[this.LBL_CREATE_RACE];
                    with (_local16) {
                        text = txt[((TXT_RACENAME + CharVolk) - 1)];
                        if (textDir == "right"){
                            x = ((actor[LBL_CREATE_RACE_DESC].x + actor[LBL_CREATE_RACE_DESC].width) - textWidth);
                        };
                    };
                    _local16 = this.actor[this.LBL_CREATE_RACE_DESC];
                    with (_local16) {
                        text = txt[((TXT_RACEDESC + CharVolk) - 1)];
                        y = ((actor[LBL_CREATE_RACE].y + actor[LBL_CREATE_RACE].textHeight) + REL_BUILDCHAR_LINES_Y);
                    };
                    this.Arabize(this.LBL_CREATE_RACE_DESC);
                    _local16 = this.actor[this.LBL_CREATE_CLASS];
                    with (_local16) {
                        text = txt[((KlasseGewählt) ? ((TXT_CLASSNAME + CharKaste) - 1) : TXT_NOCLASS)];
                        y = ((actor[LBL_CREATE_RACE_DESC].y + actor[LBL_CREATE_RACE_DESC].textHeight) + REL_BUILDCHAR_LINES_Y);
                        if (textDir == "right"){
                            x = ((actor[LBL_CREATE_RACE_DESC].x + actor[LBL_CREATE_RACE_DESC].width) - textWidth);
                        };
                    };
                    _local16 = this.actor[this.LBL_CREATE_CLASS_DESC];
                    with (_local16) {
                        text = txt[((KlasseGewählt) ? ((TXT_CLASSDESC + CharKaste) - 1) : TXT_NOCLASS_DESC)];
                        y = ((actor[LBL_CREATE_CLASS].y + actor[LBL_CREATE_CLASS].textHeight) + REL_BUILDCHAR_LINES_Y);
                    };
                    this.Arabize(this.LBL_CREATE_CLASS_DESC);
                };
                this.LoadCharacterImage(this.IMG_CHARIMG_BACKGROUND, loadOnly, this.CharVolk, this.CharMann, this.CharKaste, this.CharMouth, this.CharBeard, this.CharNose, this.CharEyes, this.CharBrows, this.CharEars, this.CharHair, this.CharSpecial, this.CharSpecial2);
                if (this.OnStage(this.IMG_SCR_BUILDCHAR_BACKGROUND)){
                    this.Remove(this.BNC_VOLK_BTNS_ALL);
                    this.Add(this.IMG_F_IDLE);
                    this.Add(this.IMG_M_IDLE);
                    if (this.CharMann){
                        this.Add(this.BNC_VOLK_BTNS_M);
                        this.Add(((this.IMG_VOLK_1_M_ACT + this.CharVolk) - 1));
                        this.Add(this.IMG_M_ACT);
                    } else {
                        this.Add(this.BNC_VOLK_BTNS_F);
                        this.Add(((this.IMG_VOLK_1_F_ACT + this.CharVolk) - 1));
                        this.Add(this.IMG_F_ACT);
                    };
                    this.Add(this.IMG_KASTE_1_IDLE);
                    this.Add(this.IMG_KASTE_2_IDLE);
                    this.Add(this.IMG_KASTE_3_IDLE);
                    if (this.KlasseGewählt){
                        this.Add((this.IMG_KASTE_1_ACT + ((this.CharKaste - 1) * 2)));
                    };
                    i = 1;
                    while (i < 11) {
                        if (this.getCharImageBound(this.CharVolk, this.CharMann, i) == 0){
                            this.Remove((this.BTN_MOUTH_MINUS + ((i - 1) * 2)));
                            this.Remove((this.BTN_MOUTH_PLUS + ((i - 1) * 2)));
                            this.Remove((this.LBL_MOUTH + (i - 1)));
                        } else {
                            this.Add((this.BTN_MOUTH_MINUS + ((i - 1) * 2)));
                            this.Add((this.BTN_MOUTH_PLUS + ((i - 1) * 2)));
                            this.Add((this.LBL_MOUTH + (i - 1)));
                        };
                        i = (i + 1);
                    };
                    this.PositionModifyCharacterButtons();
                    if (!this.OnStage(this.BTN_CREATE_CHARACTER)){
                        this.Remove(this.CNT_CREATE_GOTO_LOGIN, this.IMG_KASTE_1_IDLE, this.IMG_KASTE_2_IDLE, this.IMG_KASTE_3_IDLE, this.IMG_KASTE_1_ACT, this.IMG_KASTE_2_ACT, this.IMG_KASTE_3_ACT, this.BTN_CREATE_CHARACTER, this.BLACK_SQUARE);
                        this.AddSome(this.BTN_MODIFY_CHARACTER, this.BTN_IF_EXIT);
                    };
                };
                return;
            };
            LoadCharacterItemImage(actorID, (charPrefix + this.getCharSuffix(0, isKaste)), 0);
            LoadCharacterItemImage((actorID + 1), (charPrefix + this.getCharSuffix(1, isMouth)), 1);
            LoadCharacterItemImage((actorID + 2), (charPrefix + this.getCharSuffix(2, isBeard)), 2);
            LoadCharacterItemImage((actorID + 3), (charPrefix + this.getCharSuffix(3, isNose)), 3);
            LoadCharacterItemImage((actorID + 4), (charPrefix + this.getCharSuffix(4, isEyes)), 4);
            LoadCharacterItemImage((actorID + 5), (charPrefix + this.getCharSuffix(5, isBrows)), 5);
            LoadCharacterItemImage((actorID + 6), (charPrefix + this.getCharSuffix(6, isEars)), 6);
            LoadCharacterItemImage((actorID + 7), (charPrefix + this.getCharSuffix(7, isHair)), 7);
            LoadCharacterItemImage((actorID + 8), (charPrefix + this.getCharSuffix(8, isSpecial)), 8);
            LoadCharacterItemImage((actorID + 9), (charPrefix + this.getCharSuffix(9, isSpecial2)), 9);
            actorOffset = (actorID - this.IMG_CHARIMG_BACKGROUND);
            if (!loadOnly){
                this.Add((this.BNC_CHARIMG + actorOffset));
                if ((((isVolk == 2)) && (isMann))){
                    this.AddBMO(this.BNC_CHARIMG_SPECIALOVL_ELF_M, actorOffset);
                };
                if ((((isVolk == 7)) && (isMann))){
                    this.AddBMO(this.BNC_CHARIMG_SPECIALOVL_GOBLIN_M, actorOffset);
                };
                if ((((isVolk == 6)) && (isMann))){
                    this.AddBMO(this.BNC_CHARIMG_SPECIALOVL_DARKELF_M, actorOffset);
                };
                if ((((isVolk == 3)) && (isMann))){
                    this.AddBMO(this.BNC_CHARIMG_SPECIALOVL_DWARF_M, actorOffset);
                };
                if ((((isVolk == 1)) && (isMann))){
                    this.AddBMO(this.BNC_CHARIMG_SPECIALOVL_HUMAN_M, actorOffset);
                };
                if ((((isVolk == 4)) && (isMann))){
                    this.AddBMO(this.BNC_CHARIMG_SPECIALOVL_GNOM_M, actorOffset);
                };
                if ((((isVolk == 7)) && (!(isMann)))){
                    this.AddBMO(this.BNC_CHARIMG_SPECIALOVL_GOBLIN_F, actorOffset);
                };
                if ((((isVolk == 5)) && (!(isMann)))){
                    this.AddBMO(this.BNC_CHARIMG_SPECIALOVL_ORC_F, actorOffset);
                };
                if ((((isVolk == 2)) && (!(isMann)))){
                    this.AddBMO(this.BNC_CHARIMG_SPECIALOVL_ELF_F, actorOffset);
                };
                if ((((isVolk == 1)) && (!(isMann)))){
                    this.AddBMO(this.BNC_CHARIMG_SPECIALOVL_HUMAN_F, actorOffset);
                };
                if ((((isVolk == 3)) && (!(isMann)))){
                    this.AddBMO(this.BNC_CHARIMG_SPECIALOVL_DWARF_F, actorOffset);
                };
            };
        }
        public function PositionModifyCharacterButtons():void{
            var i:* = 0;
            var positionModifyCharacterBtn:* = function (actorID:int):void{
                if (OnStage(actorID)){
                    actor[actorID].y = (POS_MODIFY_CHARACTER_BUTTONS_Y + (iPosi++ * REL_MODIFY_CHARACTER_BUTTONS_1));
                };
            };
            var iPosi:* = 0;
            positionModifyCharacterBtn(this.BTN_EYES_PLUS);
            positionModifyCharacterBtn(this.BTN_BROWS_PLUS);
            positionModifyCharacterBtn(this.BTN_MOUTH_PLUS);
            positionModifyCharacterBtn(this.BTN_NOSE_PLUS);
            positionModifyCharacterBtn(this.BTN_EARS_PLUS);
            positionModifyCharacterBtn(this.BTN_HAIR_PLUS);
            positionModifyCharacterBtn(this.BTN_COLOR_PLUS);
            positionModifyCharacterBtn(this.BTN_BEARD_PLUS);
            positionModifyCharacterBtn(this.BTN_SPECIAL_PLUS);
            positionModifyCharacterBtn(this.BTN_SPECIAL2_PLUS);
            i = 0;
            while (i < 10) {
                if (this.textDir == "right"){
                    this.actor[(this.LBL_MOUTH + i)].x = ((this.POS_MODIFY_CHARACTER_BUTTONS_X - this.actor[(this.LBL_MOUTH + i)].textWidth) + 20);
                    this.actor[(this.BTN_MOUTH_MINUS + (i * 2))].x = (this.POS_MODIFY_CHARACTER_BUTTONS_X + this.REL_MODIFY_CHARACTER_LABEL_X);
                    this.actor[(this.BTN_MOUTH_PLUS + (i * 2))].x = (this.actor[(this.BTN_MOUTH_MINUS + (i * 2))].x + this.REL_MODIFY_CHARACTER_BUTTONS_2);
                    this.actor[(this.BTN_MOUTH_MINUS + (i * 2))].y = this.actor[(this.BTN_MOUTH_PLUS + (i * 2))].y;
                    this.actor[(this.LBL_MOUTH + i)].y = (this.actor[(this.BTN_MOUTH_PLUS + (i * 2))].y + this.REL_MODIFY_CHARACTER_LABEL_Y);
                } else {
                    this.actor[(this.BTN_MOUTH_MINUS + (i * 2))].x = this.POS_MODIFY_CHARACTER_BUTTONS_X;
                    this.actor[(this.BTN_MOUTH_PLUS + (i * 2))].x = (this.actor[(this.BTN_MOUTH_MINUS + (i * 2))].x + this.REL_MODIFY_CHARACTER_BUTTONS_2);
                    this.actor[(this.BTN_MOUTH_MINUS + (i * 2))].y = this.actor[(this.BTN_MOUTH_PLUS + (i * 2))].y;
                    this.actor[(this.LBL_MOUTH + i)].x = (this.actor[(this.BTN_MOUTH_PLUS + (i * 2))].x + this.REL_MODIFY_CHARACTER_LABEL_X);
                    this.actor[(this.LBL_MOUTH + i)].y = (this.actor[(this.BTN_MOUTH_PLUS + (i * 2))].y + this.REL_MODIFY_CHARACTER_LABEL_Y);
                };
                i = (i + 1);
            };
        }
        public function getCharSuffix(itemIndex:int, itemValue:int):String{
            var strItem:String;
            var strExt:String;
            var colorIndex:int;
            var colorString:String;
            strExt = this.C_CHAREXT;
            colorIndex = 0;
            colorString = "";
            while (itemValue > 100) {
                itemValue = (itemValue - 100);
                colorIndex++;
            };
            if (colorIndex > 0){
                colorString = (("_" + String(colorIndex)) + "_");
            };
            switch (itemIndex){
                case 0:
                    strExt = ".jpg";
                    switch (itemValue){
                        case 1:
                            strItem = "body_hunter";
                            break;
                        case 2:
                            strItem = "body_mage";
                            break;
                        case 3:
                            strItem = "body_warrior";
                            break;
                    };
                    break;
                case 1:
                    strItem = ("mund" + String(itemValue));
                    break;
                case 2:
                    strItem = (("bart" + colorString) + String(itemValue));
                    break;
                case -2:
                    strItem = ("tattoo" + String(itemValue));
                    break;
                case 3:
                    strItem = ("nase" + String(itemValue));
                    break;
                case 4:
                    strItem = ("augen" + String(itemValue));
                    break;
                case 5:
                    strItem = (("brauen" + colorString) + String(itemValue));
                    break;
                case 6:
                    strItem = ("ohren" + String(itemValue));
                    break;
                case 7:
                    strItem = (("haare" + colorString) + String(itemValue));
                    break;
                case 8:
                    strItem = ("special" + String(itemValue));
                    break;
                case 9:
                    strItem = (("special2" + colorString) + String(itemValue));
                    break;
            };
            return ((strItem + strExt));
        }
        public function RandomizeCharacter(evt:Event=undefined):void{
            this.CharVolk = (int((Math.random() * 8)) + 1);
            this.CharMann = (Math.random() > 0.5);
            if (this.paramObj["playerclass"]){
                this.CharKaste = int(this.paramObj["playerclass"]);
                if (this.CharKaste < 1){
                    this.CharKaste = 1;
                };
                if (this.CharKaste > 3){
                    this.CharKaste = 3;
                };
                this.KlasseGewählt = true;
            } else {
                this.CharKaste = (int((Math.random() * 3)) + 1);
                this.KlasseGewählt = false;
            };
            this.RandomizeCharImage();
        }
        public function RandomizeCharImage(evt:Event=undefined):void{
            var evt:* = evt;
            var ColorOffset:* = function (ItemID:int):int{
                if ((getCharImageBound(CharVolk, CharMann, 11) & ItemID)){
                    return ((CharColor * 100));
                };
                return (0);
            };
            this.CharColor = int(((Math.random() * this.getCharImageBound(this.CharVolk, this.CharMann, 10)) + 1));
            this.CharMouth = int(((Math.random() * this.getCharImageBound(this.CharVolk, this.CharMann, 1)) + 1));
            this.CharBeard = (int(((Math.random() * this.getCharImageBound(this.CharVolk, this.CharMann, 2)) + 1)) + ColorOffset(this.C_BEARD));
            this.CharNose = int(((Math.random() * this.getCharImageBound(this.CharVolk, this.CharMann, 3)) + 1));
            this.CharEyes = int(((Math.random() * this.getCharImageBound(this.CharVolk, this.CharMann, 4)) + 1));
            this.CharBrows = (int(((Math.random() * this.getCharImageBound(this.CharVolk, this.CharMann, 5)) + 1)) + ColorOffset(this.C_BROWS));
            this.CharEars = int(((Math.random() * this.getCharImageBound(this.CharVolk, this.CharMann, 6)) + 1));
            this.CharHair = (int(((Math.random() * this.getCharImageBound(this.CharVolk, this.CharMann, 7)) + 1)) + ColorOffset(this.C_HAIR));
            this.CharSpecial = int(((Math.random() * this.getCharImageBound(this.CharVolk, this.CharMann, 8)) + 1));
            this.CharSpecial2 = (int(((Math.random() * this.getCharImageBound(this.CharVolk, this.CharMann, 9)) + 1)) + ColorOffset(this.C_SPECIAL2));
            this.LoadCharacterImage();
        }
        public function getCharImageBound(isVolk:int, isMann:Boolean, itemIndex):int{
            if (isMann){
                switch (isVolk){
                    case 1:
                        switch (itemIndex){
                            case 1:
                                return (9);
                            case 2:
                                return (13);
                            case 3:
                                return (6);
                            case 4:
                                return (7);
                            case 5:
                                return (7);
                            case 6:
                                return (5);
                            case 7:
                                return (11);
                            case 8:
                                return (17);
                            case 9:
                                return (0);
                            case 10:
                                return (5);
                            case 11:
                                return (((this.C_BROWS + this.C_HAIR) + this.C_BEARD));
                        };
                    case 2:
                        switch (itemIndex){
                            case 1:
                                return (8);
                            case 2:
                                return (7);
                            case 3:
                                return (7);
                            case 4:
                                return (8);
                            case 5:
                                return (5);
                            case 6:
                                return (4);
                            case 7:
                                return (10);
                            case 8:
                                return (13);
                            case 9:
                                return (0);
                            case 10:
                                return (3);
                            case 11:
                                return (((this.C_HAIR + this.C_BROWS) + this.C_BEARD));
                        };
                    case 3:
                        switch (itemIndex){
                            case 1:
                                return (5);
                            case 2:
                                return (5);
                            case 3:
                                return (5);
                            case 4:
                                return (8);
                            case 5:
                                return (5);
                            case 6:
                                return (5);
                            case 7:
                                return (10);
                            case 8:
                                return (13);
                            case 9:
                                return (0);
                            case 10:
                                return (5);
                            case 11:
                                return (((this.C_BROWS + this.C_HAIR) + this.C_BEARD));
                        };
                    case 4:
                        switch (itemIndex){
                            case 1:
                                return (10);
                            case 2:
                                return (12);
                            case 3:
                                return (6);
                            case 4:
                                return (9);
                            case 5:
                                return (9);
                            case 6:
                                return (6);
                            case 7:
                                return (12);
                            case 8:
                                return (17);
                            case 9:
                                return (0);
                            case 10:
                                return (5);
                            case 11:
                                return (((this.C_HAIR + this.C_BEARD) + this.C_BROWS));
                        };
                    case 5:
                        switch (itemIndex){
                            case 1:
                                return (7);
                            case 2:
                                return (5);
                            case 3:
                                return (5);
                            case 4:
                                return (6);
                            case 5:
                                return (5);
                            case 6:
                                return (5);
                            case 7:
                                return (10);
                            case 8:
                                return (9);
                            case 9:
                                return (0);
                            case 10:
                                return (5);
                            case 11:
                                return ((this.C_HAIR + this.C_BEARD));
                        };
                    case 6:
                        switch (itemIndex){
                            case 1:
                                return (6);
                            case 2:
                                return (6);
                            case 3:
                                return (5);
                            case 4:
                                return (5);
                            case 5:
                                return (5);
                            case 6:
                                return (5);
                            case 7:
                                return (8);
                            case 8:
                                return (12);
                            case 9:
                                return (0);
                            case 10:
                                return (3);
                            case 11:
                                return (((this.C_HAIR + this.C_BEARD) + this.C_BROWS));
                        };
                    case 7:
                        switch (itemIndex){
                            case 1:
                                return (6);
                            case 2:
                                return (8);
                            case 3:
                                return (5);
                            case 4:
                                return (9);
                            case 5:
                                return (6);
                            case 6:
                                return (5);
                            case 7:
                                return (12);
                            case 8:
                                return (12);
                            case 9:
                                return (0);
                            case 10:
                                return (0);
                            case 11:
                                return (0);
                        };
                    case 8:
                        switch (itemIndex){
                            case 1:
                                return (9);
                            case 2:
                                return (10);
                            case 3:
                                return (6);
                            case 4:
                                return (7);
                            case 5:
                                return (5);
                            case 6:
                                return (5);
                            case 7:
                                return (0);
                            case 8:
                                return (17);
                            case 9:
                                return (11);
                            case 10:
                                return (5);
                            case 11:
                                return ((this.C_BEARD + this.C_SPECIAL2));
                        };
                };
            } else {
                switch (isVolk){
                    case 1:
                        switch (itemIndex){
                            case 1:
                                return (8);
                            case 2:
                                return (0);
                            case 3:
                                return (6);
                            case 4:
                                return (6);
                            case 5:
                                return (6);
                            case 6:
                                return (6);
                            case 7:
                                return (8);
                            case 8:
                                return (5);
                            case 9:
                                return (0);
                            case 10:
                                return (4);
                            case 11:
                                return ((this.C_BROWS + this.C_HAIR));
                        };
                    case 2:
                        switch (itemIndex){
                            case 1:
                                return (8);
                            case 2:
                                return (0);
                            case 3:
                                return (8);
                            case 4:
                                return (7);
                            case 5:
                                return (8);
                            case 6:
                                return (7);
                            case 7:
                                return (8);
                            case 8:
                                return (5);
                            case 9:
                                return (0);
                            case 10:
                                return (4);
                            case 11:
                                return ((this.C_HAIR + this.C_BROWS));
                        };
                    case 3:
                        switch (itemIndex){
                            case 1:
                                return (9);
                            case 2:
                                return (0);
                            case 3:
                                return (6);
                            case 4:
                                return (6);
                            case 5:
                                return (8);
                            case 6:
                                return (4);
                            case 7:
                                return (8);
                            case 8:
                                return (4);
                            case 9:
                                return (0);
                            case 10:
                                return (4);
                            case 11:
                                return ((this.C_HAIR + this.C_BROWS));
                        };
                    case 4:
                        switch (itemIndex){
                            case 1:
                                return (7);
                            case 2:
                                return (0);
                            case 3:
                                return (7);
                            case 4:
                                return (6);
                            case 5:
                                return (6);
                            case 6:
                                return (6);
                            case 7:
                                return (8);
                            case 8:
                                return (5);
                            case 9:
                                return (0);
                            case 10:
                                return (4);
                            case 11:
                                return ((this.C_HAIR + this.C_BROWS));
                        };
                    case 5:
                        switch (itemIndex){
                            case 1:
                                return (7);
                            case 2:
                                return (0);
                            case 3:
                                return (5);
                            case 4:
                                return (6);
                            case 5:
                                return (5);
                            case 6:
                                return (4);
                            case 7:
                                return (8);
                            case 8:
                                return (7);
                            case 9:
                                return (0);
                            case 10:
                                return (4);
                            case 11:
                                return (this.C_HAIR);
                        };
                    case 6:
                        switch (itemIndex){
                            case 1:
                                return (9);
                            case 2:
                                return (0);
                            case 3:
                                return (6);
                            case 4:
                                return (6);
                            case 5:
                                return (6);
                            case 6:
                                return (3);
                            case 7:
                                return (6);
                            case 8:
                                return (5);
                            case 9:
                                return (0);
                            case 10:
                                return (3);
                            case 11:
                                return (this.C_HAIR);
                        };
                    case 7:
                        switch (itemIndex){
                            case 1:
                                return (9);
                            case 2:
                                return (0);
                            case 3:
                                return (5);
                            case 4:
                                return (6);
                            case 5:
                                return (5);
                            case 6:
                                return (4);
                            case 7:
                                return (8);
                            case 8:
                                return (4);
                            case 9:
                                return (0);
                            case 10:
                                return (4);
                            case 11:
                                return (this.C_HAIR);
                        };
                    case 8:
                        switch (itemIndex){
                            case 1:
                                return (8);
                            case 2:
                                return (5);
                            case 3:
                                return (7);
                            case 4:
                                return (6);
                            case 5:
                                return (5);
                            case 6:
                                return (4);
                            case 7:
                                return (7);
                            case 8:
                                return (6);
                            case 9:
                                return (4);
                            case 10:
                                return (3);
                            case 11:
                                return (this.C_HAIR);
                        };
                };
            };
            return (0);
        }
        public function getCharPrefix(isGut:Boolean, isVolk:int, isMann:Boolean, isKaste:int):String{
            var strTemp:String;
            var strRace:String;
            strTemp = "res/gfx/char/";
            strRace = "";
            switch (isVolk){
                case 1:
                    strRace = "human";
                    break;
                case 2:
                    strRace = "elf";
                    break;
                case 3:
                    strRace = "dwarf";
                    break;
                case 4:
                    strRace = "gnome";
                    break;
                case 5:
                    strRace = "orc";
                    break;
                case 6:
                    strRace = "dunkelelf";
                    break;
                case 7:
                    strRace = "goblin";
                    break;
                case 8:
                    strRace = "demon";
                    break;
            };
            strTemp = (strTemp + (strRace + " "));
            strTemp = (strTemp + ((isMann) ? "m" : "f"));
            strTemp = (strTemp + (("/" + strRace) + "_"));
            if (!isMann){
                strTemp = (strTemp + "female_");
            };
            return (strTemp);
        }
        public function DrachenSetzen():void{
            var i:int;
            var d:int;
            var x:int;
            var y:int;
            i = this.CNT_IF_DRAGON_1;
            while (i <= this.CNT_IF_DRAGON_13) {
                x = this.actor[i].x;
                y = this.actor[i].y;
                delete this.actor[i];
                d = (Math.random() * 5);
                this.actorBitmap[i] = d;
                switch (d){
                    case 0:
                        this.actor[i] = new interface_dragon1_png();
                        break;
                    case 1:
                        this.actor[i] = new interface_dragon2_png();
                        break;
                    case 2:
                        this.actor[i] = new interface_dragon3_png();
                        break;
                    case 3:
                        this.actor[i] = new interface_dragon4_png();
                        break;
                    case 4:
                    case 5:
                        this.actor[i] = new interface_dragon6_png();
                        break;
                };
                this.actor[i].x = x;
                this.actor[i].y = y;
                addChild(this.actor[i]);
                i++;
            };
        }
        public function ErrorMessage(msg:String=""):void{
            var msg:String = msg;
            if (msg == ""){
            } else {
                this.trc(("Error message: " + msg));
                if (this.OnStage(this.SHP_FUCK_BLACK_SQUARE)){
                    var _local3 = this.actor[this.LBL_ERROR];
                    with (_local3) {
                        text = msg;
                        scaleX = 1;
                        scaleY = 1;
                        x = (POS_IF_ERROR_X - int((textWidth / 2)));
                        y = (POS_IF_ERROR_Y + 60);
                    };
                    this.Add(this.LBL_ERROR);
                } else {
                    if (this.OnStage(this.CNT_GILDE_LIST)){
                        if (msg.split(" ").join("") != ""){
                            this.ChatLine(msg, true);
                        };
                    } else {
                        if (((this.OnStage(this.BTN_CREATE_CHARACTER)) && (!(this.OnStage(this.IMG_IF_WINDOW))))){
                            _local3 = this.actor[this.LBL_CREATE_RACE_DESC];
                            with (_local3) {
                                defaultTextFormat = FontFormat_ClassError;
                                text = msg;
                                defaultTextFormat = FontFormat_DefaultLeft;
                            };
                            this.actor[this.LBL_CREATE_CLASS].text = "";
                            this.actor[this.LBL_CREATE_CLASS_DESC].text = "";
                        } else {
                            _local3 = this.actor[this.LBL_ERROR];
                            with (_local3) {
                                text = msg;
                                scaleX = 1;
                                scaleY = 1;
                                if (OnStage(BTN_SHOPS_NEWWAREZ)){
                                    x = (POS_SHOP_ERROR_X - int((textWidth / 2)));
                                    y = POS_SHOP_ERROR_Y;
                                } else {
                                    if (OnStage(IMG_TOILET)){
                                        x = ((POS_SHOP_ERROR_X - 15) - int((textWidth / 2)));
                                        y = 720;
                                    } else {
                                        if (OnStage(BTN_QUEST_CANCEL)){
                                            x = (POS_IF_ERROR_X - int((textWidth / 2)));
                                            y = POS_QUEST_ERROR_Y;
                                        } else {
                                            if (OnStage(IMG_POST_BG)){
                                                x = (POS_IF_ERROR_X - int((textWidth / 2)));
                                                y = POS_POST_ERROR_Y;
                                            } else {
                                                if (OnStage(LBL_STALL_TITEL)){
                                                    x = (POS_IF_ERROR_X - int((textWidth / 2)));
                                                    y = POS_STALL_ERROR_Y;
                                                } else {
                                                    if (OnStage(BTN_CHAR_ATTACK)){
                                                        scaleX = 0.7;
                                                        scaleY = 0.7;
                                                        x = (((280 + 500) + 235) - (width / 2));
                                                        y = (100 + 657);
                                                    } else {
                                                        if (OnStage(SHP_MAINQUEST)){
                                                            x = (POS_IF_ERROR_X - int((textWidth / 2)));
                                                            y = POS_MQ_ERROR_Y;
                                                        } else {
                                                            x = (POS_IF_ERROR_X - int((textWidth / 2)));
                                                            y = POS_IF_ERROR_Y;
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                            this.Add(this.LBL_ERROR);
                        };
                    };
                };
            };
        }
        public function InterfaceBtnHandler(evt:Event):void{
            var tmpAction:int;
            tmpAction = 0;
            switch (this.GetActorID(evt.target)){
                case this.CA_CITY_SHAKES:
                case this.BTN_IF_SCHMIEDE:
                    tmpAction = this.ACT_SCREEN_SCHMIEDE;
                    break;
                case this.CA_CITY_RUHMESHALLE:
                case this.BTN_IF_EHRENHALLE:
                    this.ruhmesHalleSuchString = this.actor[this.INP_NAME].getChildAt(1).text;
                    this.SendAction(this.ACT_SCREEN_EHRENHALLE, this.actor[this.INP_NAME].getChildAt(1).text, -1);
                    break;
                case this.CA_CITY_ARENA:
                case this.BTN_IF_ARENA:
                    tmpAction = this.ACT_SCREEN_ARENA;
                    break;
                case this.CA_CITY_ESEL:
                case this.BTN_IF_STALL:
                    tmpAction = this.ACT_SCREEN_STALL;
                    break;
                case this.CA_CITY_POST:
                case this.BTN_IF_POST:
                    this.PostScroll = 1;
                    this.SendAction(this.ACT_SCREEN_POST, 1);
                    break;
                case this.CA_CITY_WACHE:
                case this.BTN_IF_ARBEITEN:
                    tmpAction = this.ACT_SCREEN_ARBEITEN;
                    break;
                case this.BTN_IF_TAVERNE:
                case this.CA_CITY_TAVERNE:
                case this.BTN_HUTMANN_BACK:
                    tmpAction = this.ACT_SCREEN_TAVERNE;
                    break;
                case this.CA_CITY_ZAUBERLADEN:
                case this.BTN_IF_ZAUBERLADEN:
                    tmpAction = this.ACT_SCREEN_ZAUBERLADEN;
                    break;
                case this.BTN_IF_PILZDEALER:
                case this.CA_CITY_DEALER:
                    tmpAction = this.ACT_SCREEN_PILZDEALER;
                    break;
                case this.BTN_FIGHT_OK:
                    tmpAction = ((this.PostFightMode) ? this.ACT_SCREEN_POST : this.ACT_SCREEN_CHAR);
                    if (this.hasFoughtGuildBattle){
                        if (this.towerFightMode){
                            tmpAction = this.ACT_SCREEN_TOWER;
                        } else {
                            tmpAction = this.ACT_SCREEN_GILDEN;
                        };
                    };
                    if (this.hasLostMQ){
                        this.hasLostMQ = false;
                        tmpAction = 0;
                        this.ShowMainQuestScreen(this.LastDungeonNr, this.LastDungeonEnemy);
                    };
                    break;
                case this.BTN_IF_CHARAKTER:
                    this.arrowHallMode = false;
                    tmpAction = this.ACT_SCREEN_CHAR;
                    break;
                case this.BTN_IF_GILDEN:
                    this.PulseGilde = false;
                    this.PulseGildeOnHistory = false;
                    tmpAction = this.ACT_SCREEN_GILDEN;
                    break;
                case this.BTN_IF_WELTKARTE:
                    tmpAction = this.ACT_SCREEN_WELTKARTE;
                    break;
                case this.BTN_IF_OPTIONEN:
                    tmpAction = this.ACT_SCREEN_OPTIONEN;
                    break;
                case this.CA_CITY_BUH:
                    this.slmCount++;
                    break;
            };
            if (tmpAction > 0){
                this.SendAction(tmpAction);
            };
        }
        public function EnablePopup(actorID:int, ... _args){
            var i:* = 0;
            var popupWidth:* = 0;
            var textY:* = 0;
            var textX:* = 0;
            var myStamp:* = 0;
            var ShowPopup:* = null;
            var PositionPopup:* = null;
            var HidePopup:* = null;
            var actorID:* = actorID;
            var args:* = _args;
            ShowPopup = function (evt:MouseEvent):void{
                var tmpTextField:* = null;
                var lastTextHeight:* = 0;
                var ii:* = 0;
                var dist:* = 0;
                var evt:* = evt;
                if (evt.buttonDown){
                    return;
                };
                if (actorPopupStamp[actorID] != myStamp){
                    removeEventListener(MouseEvent.MOUSE_OVER, ShowPopup);
                    removeEventListener(MouseEvent.MOUSE_MOVE, PositionPopup);
                    removeEventListener(MouseEvent.MOUSE_OUT, HidePopup);
                    removeEventListener(MouseEvent.MOUSE_DOWN, HidePopup);
                    removeEventListener(MouseEvent.MOUSE_UP, HidePopup);
                    return;
                };
                if (OnStage(POPUP_INFO)){
                    Remove(POPUP_INFO);
                };
                actor[POPUP_INFO] = new MovieClip();
                if (suggestionSlot[actorID]){
                    actor[IMG_SLOT_SUGGESTION].x = actor[suggestionSlot[actorID]].x;
                    actor[IMG_SLOT_SUGGESTION].y = actor[suggestionSlot[actorID]].y;
                    if (!OnStage(IMG_SLOT_SUGGESTION)){
                        AddSome(IMG_SLOT_SUGGESTION, suggestionSlot[actorID]);
                        actor[IMG_SLOT_SUGGESTION].alpha = 0;
                        FadeIn(IMG_SLOT_SUGGESTION);
                    };
                };
                var tmpTextFormat:* = FontFormat_Popup;
                lastTextHeight = 0;
                popupWidth = ((textDir)=="right") ? 50 : 0;
                if (textDir == "right"){
                    textX = popupWidth;
                };
                textY = 10;
                i = 0;
                while (i < args.length) {
                    var processArg:* = function (arg){
                        var iArray:* = 0;
                        var tmpDO:* = null;
                        var arg:* = arg;
                        if ((arg is Array)){
                            iArray = 0;
                            while (iArray < arg.length) {
                                processArg(arg[iArray]);
                                iArray = (iArray + 1);
                            };
                        } else {
                            if ((arg is int)){
                                if (arg < 0){
                                    popupWidth = -(arg);
                                } else {
                                    if (arg == 0){
                                        textX = ((textDir)=="right") ? popupWidth : 0;
                                        textY = (textY + (lastTextHeight + 10));
                                    } else {
                                        if (textDir == "right"){
                                            textX = (popupWidth - arg);
                                        } else {
                                            textX = arg;
                                        };
                                    };
                                };
                            } else {
                                if ((arg is TextFormat)){
                                    tmpTextFormat = arg;
                                } else {
                                    if ((arg is DisplayObject)){
                                        tmpDO = new Bitmap(arg.content.bitmapData.clone());
                                        var _local3 = tmpDO;
                                        with (_local3) {
                                            if (textDir == "right"){
                                                if (textX < popupWidth){
                                                    x = (textX - width);
                                                    textX = (textX - (width + 5));
                                                    y = textY;
                                                } else {
                                                    x = ((popupWidth - 5) - width);
                                                    y = textY;
                                                    textY = (textY + (textHeight + 10));
                                                };
                                            } else {
                                                if (textX > 0){
                                                    x = textX;
                                                    textX = (textX + (width + 5));
                                                    y = textY;
                                                } else {
                                                    x = 5;
                                                    y = textY;
                                                    textY = (textY + (textHeight + 10));
                                                };
                                            };
                                        };
                                        actor[POPUP_INFO].addChild(tmpDO);
                                    } else {
                                        if ((arg is String)){
                                            arg = arg.split("#").join(String.fromCharCode(13));
                                            tmpTextField = new TextField();
                                            _local3 = tmpTextField;
                                            with (_local3) {
                                                autoSize = ((textDir)=="right") ? TextFieldAutoSize.RIGHT : TextFieldAutoSize.LEFT;
                                                background = false;
                                                selectable = false;
                                                embedFonts = fontEmbedded;
                                                defaultTextFormat = tmpTextFormat;
                                                htmlText = arg;
                                                lastTextHeight = textHeight;
                                                if (textDir == "right"){
                                                    if (textX < popupWidth){
                                                        x = (textX - textWidth);
                                                        textX = (textX - (textWidth + 5));
                                                        y = textY;
                                                    } else {
                                                        x = ((popupWidth - 5) - textWidth);
                                                        y = textY;
                                                        textY = (textY + (textHeight + 10));
                                                    };
                                                } else {
                                                    if (textX > 0){
                                                        x = textX;
                                                        textX = (textX + (textWidth + 5));
                                                        y = textY;
                                                    } else {
                                                        x = 5;
                                                        y = textY;
                                                        textY = (textY + (textHeight + 10));
                                                    };
                                                    if (((x + textWidth) + 10) > popupWidth){
                                                        popupWidth = ((x + textWidth) + 10);
                                                    };
                                                };
                                            };
                                            actor[POPUP_INFO].addChild(tmpTextField);
                                        };
                                    };
                                };
                            };
                        };
                    };
                    processArg(args[i]);
                    i++;
                };
                var _local3 = actor[POPUP_INFO];
                with (_local3) {
                    i = 0;
                    while (i < numChildren) {
                        if (getChildAt(i).x < 5){
                            dist = (5 - getChildAt(i).x);
                            ii = 0;
                            while (ii < numChildren) {
                                getChildAt(ii).x = (getChildAt(ii).x + dist);
                                if (((getChildAt(ii).x + getChildAt(ii).width) + 5) > popupWidth){
                                    popupWidth = ((getChildAt(ii).x + getChildAt(ii).width) + 5);
                                };
                                ii++;
                            };
                        };
                        i++;
                    };
                    mouseEnabled = false;
                    mouseChildren = false;
                    allowSmoothing = true;
                    forceSmoothing = true;
                    smoothing = true;
                };
                _local3 = actor[POPUP_INFO].graphics;
                with (_local3) {
                    beginFill(0, 0);
                    lineStyle(0, 0, 0);
                    drawRect(0, 0, popupWidth, textY);
                    beginFill(CLR_BLACK, 0.8);
                    lineStyle(1, CLR_SFORANGE, 1);
                    drawRect(1, 1, (popupWidth - 1), (textY - 1));
                };
                PositionPopup(evt);
                Add(POPUP_INFO);
            };
            PositionPopup = function (evt:MouseEvent):void{
                var evt:* = evt;
                var _local3 = actor[POPUP_INFO];
                with (_local3) {
                    x = (evt.stageX - int((popupWidth / 2)));
                    y = ((evt.stageY - 20) - textY);
                    if (x < 0){
                        x = 0;
                    };
                    if (y < 0){
                        y = 0;
                    };
                    if (x > (RES_X - popupWidth)){
                        x = (RES_X - popupWidth);
                    };
                    if (y > (RES_Y - textY)){
                        y = (RES_Y - textY);
                    };
                    if ((((((((evt.stageX > (x - 20))) && ((evt.stageX < ((x + popupWidth) + 15))))) && ((evt.stageY > (y - 20))))) && ((evt.stageY < ((y + textY) + 15))))){
                        if (evt.stageY < (textY + 20)){
                            y = (evt.stageY + 40);
                        };
                        if ((((((((evt.stageX > (x - 20))) && ((evt.stageX < ((x + popupWidth) + 15))))) && ((evt.stageY > (y - 20))))) && ((evt.stageY < ((y + textY) + 15))))){
                            if (evt.stageX > ((RES_X - popupWidth) - 20)){
                                x = ((evt.stageX - popupWidth) - 20);
                            };
                        };
                    };
                };
            };
            HidePopup = function (evt:MouseEvent):void{
                Remove(IMG_SLOT_SUGGESTION);
                Remove(POPUP_INFO);
            };
            myStamp = this.popupStamp++;
            if (this.popupStamp > 10000){
                this.popupStamp = 0;
            };
            if (args.length > 0){
                var _local4 = this.actor[actorID];
                with (_local4) {
                    addEventListener(MouseEvent.MOUSE_OVER, ShowPopup);
                    addEventListener(MouseEvent.MOUSE_MOVE, PositionPopup);
                    addEventListener(MouseEvent.MOUSE_OUT, HidePopup);
                    addEventListener(MouseEvent.MOUSE_DOWN, HidePopup);
                    addEventListener(MouseEvent.MOUSE_UP, HidePopup);
                };
            };
            this.actorPopupStamp[actorID] = myStamp;
        }
        public function GuildChatPollFn(e:Event){
            if (this.param_poll_tunnel_url == ""){
                if (this.Gilde == ""){
                    this.GuildChatPoll.delay = 1000;
                    return;
                };
                if (this.OnStage(this.INP_GILDE_CHAT)){
                    this.GuildChatPoll.delay = (1000 * this.intervalMultiplierChat);
                } else {
                    if (this.param_idle_polling > 0){
                        this.GuildChatPoll.delay = (1000 * this.param_idle_polling);
                    } else {
                        this.GuildChatPoll.delay = (1000 * 60);
                    };
                };
            } else {
                this.GuildChatPoll.delay = 1000;
                if (this.Gilde == ""){
                    return;
                };
            };
            this.SendAction(this.ACT_GET_CHAT_HISTORY, this.lastChatIndex);
        }
        public function ChatPollIntervalReset(){
            if (this.param_poll_tunnel_url != ""){
                this.GuildChatPoll.stop();
                this.GuildChatPoll.start();
            };
        }
        public function trc(... _args){
            var i:uint;
            var outStr:String;
            outStr = "";
            i = 0;
            while (i < _args.length) {
                outStr = (outStr + (String(_args[i]) + " "));
                i++;
            };
            outStr = outStr.substr(0, (outStr.length - 1));
            trace(outStr);
            if (this.paramObj["firebug"]){
                if (this.paramObj["firebug"] != ""){
                    ExternalInterface.call("console.log", outStr);
                };
            };
        }
        function frame1(){
            this.paramObj = LoaderInfo(this.root.loaderInfo).parameters;
            this.mp_api_user_id = "notset";
            this.mp_api_user_token = "notset";
            this.ssoMode = false;
            this.param_id = "";
            this.param_rec = "";
            this.param_adv = "";
            this.param_valid = "";
            this.param_hall = "";
            this.param_cid = "";
            this.param_cid_original = false;
            this.param_imgsvr = 0;
            this.param_forceport = 0;
            this.view_player = "";
            this.admin_login = "";
            this.PayMethods = new Array();
            this.ServerID = 0;
            this.MPProject = "sfgame2";
            this.image_timeout = 3;
            this.response_timeout = 10;
            this.param_sponsor = "";
            this.param_sponsor_url = "";
            this.param_reroll_img = 0;
            this.param_reconnect = 5000;
            this.param_php_tunnel_url = "";
            this.param_poll_tunnel_url = "";
            this.trackPixels = new Array();
            this.intervalMultiplierChat = 1;
            this.intervalMultiplierReconnect = 1;
            this.param_support_email = "support@sfgame.de";
            this.param_gamestaff_email = this.param_support_email;
            this.param_papaya_path = "";
            this.param_papaya_cfg_file = "";
            this.param_fail_tries = 1;
            this.param_idle_polling = 0;
            this.param_allow_skip_quest = false;
            this.param_happy_hour = false;
            this.param_censored = false;
            this.param_internal_pixel = false;
            this.param_reload_pixel = false;
            this.noMush = false;
            this.param_server_version_cfg = "unknown";
            this.param_server_version_act = "unknown";
            this.param_no_cid_save = false;
            this.hadAccount = false;
            this.param_languages = new Array();
            this.param_language_names = new Array();
            this.param_lowres_url = "";
            this.param_bullshit_text = "";
            this.param_bullshit_cid = "";
            this.param_social_buttons = new Array();
            this.defined_pixel_calls = new Array();
            this.beerFest = false;
            this.towerLevelLabelPos = (this.POS_SCR_CHAR_CHARIMG_X + 127);
            this.login_background_id = "3";
            this.worlds = new Array();
            this.preventTv = false;
            this.buffed_reg = "";
            this.buffed_stuff = new Array();
            this.buffed_id = "";
            this.buffed_name = "";
            this.buffed_email = "";
            this.buffedReq = false;
            this.buffedMode = false;
            this.buffedLinkText = "";
            this.buffedLinkURL = "";
            if (this.paramObj["reg"] != undefined){
                this.buffedReq = true;
                this.buffed_reg = ExternalInterface.call("get_base64");
                if (((this.buffed_reg) && (!((this.buffed_reg == ""))))){
                    this.buffed_stuff = this.buffed_reg.split(";");
                    if (this.buffed_stuff.length == 3){
                        this.buffed_id = this.buffed_stuff[0];
                        this.buffed_name = this.buffed_stuff[1];
                        this.buffed_email = this.buffed_stuff[2];
                    };
                };
            };
            this.lang_code = "de";
            this.original_lang_code = "de";
            this.smoothing = true;
            this.forceSmoothing = true;
            this.allowSmoothing = true;
            this.img_url = new Array();
            this.snd_url = new Array();
            this.img_url_index = 0;
            this.snd_url_index = 0;
            this.lang_url = "";
            this.forum_url = "";
            this.shop_url = "";
            this.imprint_url = "";
            this.legal_url = "";
            this.dataprot_url = "";
            this.instr_url = "";
            this.no_crossdomain = false;
            this.FriendLink = "";
            this.sessionID = "";
            this.server = "localhost";
            this.lastAct = 0;
            this.sendLock = false;
            this.fightLock = false;
            this.pollLock = false;
            this.txt = new Array();
            while (this.txt.length < 20000) {
                this.txt.push("");
            };
            this.pendingLanguageFile = false;
            this.chosenLangFont = "Komika Text";
            this.countryName = new Array();
            this.pendingConfigurationFile = false;
            this.actor = new Array();
            this.actorURL = new Array();
            this.actorLoaded = new Array();
            this.actorPersistent = new Array();
            this.actorBitmap = new Array();
            this.actorSoundLoader = new Array();
            this.actorPopupStamp = new Array();
            this.stObject = new SoundTransform();
            this.pendingLoaders = 0;
            this.dragDropActive = false;
            this.dragDropProhibit = false;
            this.dragNotYet = false;
            this.WhenLoadedFn = new Array();
            this.WhenLoadedActive = false;
            this.WhenLoadedTimeout = new Timer((1000 * this.image_timeout), 1);
            this.WhenLoadedTimeout.addEventListener(TimerEvent.TIMER, this.WhenLoadedTimeoutEvent);
            this.toErrorCount = 0;
            this.ioErrorCount = 0;
            this.pendingDebugFile = false;
            this.FontFormat_Error = new TextFormat();
            this.FontFormat_Book = new TextFormat();
            this.FontFormat_BookHint = new TextFormat();
            this.FontFormat_BookLeft = new TextFormat();
            this.FontFormat_Default = new TextFormat();
            this.FontFormat_AttackLabel = new TextFormat();
            this.FontFormat_Speech = new TextFormat();
            this.FontFormat_Grayed = new TextFormat();
            this.FontFormat_GrayedHighLight = new TextFormat();
            this.FontFormat_ClassError = new TextFormat();
            this.FontFormat_Chat = new TextFormat();
            this.FontFormat_ChatWhisper = new TextFormat();
            this.FontFormat_ChatError = new TextFormat();
            this.FontFormat_GuildBuilding = new TextFormat();
            this.FontFormat_GuildMoney = new TextFormat();
            this.FontFormat_DefaultLeft = new TextFormat();
            this.FontFormat_Highlight = new TextFormat();
            this.FontFormat_HighlightWhisper = new TextFormat();
            this.FontFormat_Heading = new TextFormat();
            this.FontFormat_ScreenTitle = new TextFormat();
            this.FontFormat_Popup = new TextFormat();
            this.FontFormat_PopupCompare = new TextFormat();
            this.FontFormat_PopupCompareSum = new TextFormat();
            this.FontFormat_PopupCompareBetter = new TextFormat();
            this.FontFormat_PopupCompareWorse = new TextFormat();
            this.FontFormat_PopupCompareBetterHL = new TextFormat();
            this.FontFormat_PopupCompareWorseHL = new TextFormat();
            this.FontFormat_EpicItemQuote = new TextFormat();
            this.FontFormat_ItemEnchantment = new TextFormat();
            this.FontFormat_LogoutLink = new TextFormat();
            this.FontFormat_LogoutLinkHighLight = new TextFormat();
            this.FontFormat_HallListHeading = new TextFormat();
            this.FontFormat_HallListText = new TextFormat();
            this.FontFormat_GuildHallNoAttack = new TextFormat();
            this.FontFormat_HallListHighLight = new TextFormat();
            this.FontFormat_AttribBonus = new TextFormat();
            this.FontFormat_AttribTemp = new TextFormat();
            this.FontFormat_Attrib = new TextFormat();
            this.FontFormat_PayIcon = new TextFormat();
            this.FontFormat_PostListHeading = new TextFormat();
            this.FontFormat_PostListText = new TextFormat();
            this.FontFormat_PostListTextSys = new TextFormat();
            this.FontFormat_GuildListText = new TextFormat();
            this.FontFormat_GuildListTextOnline = new TextFormat();
            this.FontFormat_GuildListTextAttackError = new TextFormat();
            this.FontFormat_GuildListTextAttackErrorOnline = new TextFormat();
            this.FontFormat_GuildListTextAttackErrorHalf = new TextFormat();
            this.FontFormat_GuildListTextAttackErrorOnlineHalf = new TextFormat();
            this.FontFormat_GuildListTextAttackErrorOnlinePopup = new TextFormat();
            this.FontFormat_GuildListTextAttackOk = new TextFormat();
            this.FontFormat_GuildListTextAttackOkPopup = new TextFormat();
            this.FontFormat_PostListHighLight = new TextFormat();
            this.FontFormat_PostListHighLightSys = new TextFormat();
            this.FontFormat_PostListTextSysRed = new TextFormat();
            this.FontFormat_PostListHighLightSysRed = new TextFormat();
            this.FontFormat_PostListTextSysGreen = new TextFormat();
            this.FontFormat_PostListHighLightSysGreen = new TextFormat();
            this.FontFormat_QuestBar = new TextFormat();
            this.FontFormat_TimeBar = new TextFormat();
            this.FontFormat_LifeBar = new TextFormat();
            this.FontFormat_Damage = new TextFormat();
            this.FontFormat_CriticalDamage = new TextFormat();
            this.FontFormat_Bullshit = new TextFormat();
            this.FontFormat_CatapultDamage = new TextFormat();
            this.FontFormat_HighStakes = new TextFormat();
            this.FontFormat_HighStakesHighLight = new TextFormat();
            this.FontFormat_HighStakesGrayed = new TextFormat();
            this.FontFormat_HighStakesHighLightGrayed = new TextFormat();
            this.FontFormat_ToiletAura = new TextFormat();
            this.textDir = "left";
            this.SetFont(new SFGameFont().fontName);
            this.gameFont = "";
            this.fontEmbedded = true;
            this.sizeMod = 0;
            this.Filter_Shadow = [new DropShadowFilter(3, 45, 0, 0.8), new GradientGlowFilter(0, 45, [this.CLR_BLACK, this.CLR_BLACK], [0, 0.3], [0, 32], 1, 1, 5, 15, "outer")];
            this.Filter_HeavyShadow = [new DropShadowFilter(2, 45, 0, 1, 5, 5, 3, 3), new GradientGlowFilter(0, 45, [this.CLR_BLACK, this.CLR_BLACK], [0, 0.3], [0, 32], 1, 1, 5, 15, "outer")];
            this.CharVolk = 0;
            this.CharMann = true;
            this.CharKaste = 1;
            this.CharColor = 1;
            this.CharMouth = 1;
            this.CharBeard = 1;
            this.CharNose = 1;
            this.CharEyes = 1;
            this.CharBrows = 1;
            this.CharEars = 1;
            this.CharHair = 1;
            this.CharSpecial = 1;
            this.CharSpecial2 = 1;
            this.revertCharVolk = 0;
            this.revertCharMann = true;
            this.slmCount = 0;
            this.ststep = 0;
            this.revertCharColor = 1;
            this.revertCharMouth = 1;
            this.revertCharBeard = 1;
            this.revertCharNose = 1;
            this.revertCharEyes = 1;
            this.revertCharBrows = 1;
            this.revertCharEars = 1;
            this.revertCharHair = 1;
            this.revertCharSpecial = 1;
            this.revertCharSpecial2 = 1;
            this.Savegame = new Array();
            this.MirrorPieces = new Array();
            this.hasMirror = false;
            this.canRob = false;
            this.towerLevel = 0;
            this.ServerTime = new Date();
            this.LocalTime = new Date();
            this.GameTime = new Date();
            this.Stundenlohn = 10;
            this.VerdientesGeld = 0;
            this.Gilde = "";
            this.GildenID = 0;
            this.PostScroll = 1;
            this.PostMax = 1;
            this.PostSel = 0;
            this.PostScrollDown = false;
            this.DealerMenuSelect = 0;
            this.SelectedQuest = 1;
            this.PlayerDesc = "";
            this.PreviousLogin = false;
            this.DemoMode = false;
            this.selName = "";
            this.selGilde = "";
            this.InviteGildenID = 0;
            this.ReplyAddress = "";
            this.ReplySubject = "";
            this.optionNewData = "";
            this.ruhmesHalleSuchString = "";
            this.ruhmesHalleSuchName = true;
            this.GildeBuildingGold = new Array();
            this.GildeBuildingPilz = new Array();
            this.GildeChatScroll = 0;
            this.tmpBattleInfo = "";
            this.KlasseGewählt = false;
            this.PostFightMode = false;
            this.tmpAmount = 0;
            this.PulseTaverne = false;
            this.PulseArbeiten = false;
            this.PulseGilde = false;
            this.PulseGildeOnHistory = false;
            this.PulsePost = false;
            this.PulseChar = false;
            this.PulseDealer = false;
            this.notFirstVolChange = true;
            this.notSecondVolChange = true;
            this.LevelUp = false;
            this.LastLevel = 0;
            this.canBoost = new Array();
            this.GuildHallMode = false;
            this.DealerAktion = 0;
            this.SelectedGuild = "";
            this.SelectedDungeon = 0;
            this.lightMode = false;
            this.chatSound = false;
            this.compareItems = false;
            this.light_mode_default = false;
            this.disableTV = false;
            this.tvTest = false;
            this.tvFunctionName = "";
            this.tvPollNormal = 5000;
            this.tvPollLong = 300000;
            this.CupChosen = 0;
            this.oldAlbum = -1;
            this.PresetGold = 0;
            this.PresetMush = 0;
            this.MushBought = 0;
            this.specialAction = 0;
            this.nextPxl = 0;
            this.BlockReroll = false;
            this.FrenzyMode = false;
            this.fightFlushMode = false;
            this.RollFrenzy = new Timer(1000);
            this.forceAdventure = false;
            this.lastAttacked = new Array();
            this.forwardText = "";
            this.TimeCalc = new Timer(50);
            this.TimeCalc.addEventListener(TimerEvent.TIMER, this.TimeCalcEvent);
            this.Start();
            this.albumCat = 0;
            this.albumPage = 0;
            this.contentMax = 1700;
            this.copyCatSel = 0;
            this.towerScroll = 0;
            this.towerScrollDest = 0;
            this.towerScrollSpeed = 0;
            this.towerScrollTimer = new Timer(25);
            this.towerScrollGrabPos = -1;
            this.towerScrollTimer.addEventListener(TimerEvent.TIMER, this.TowerTimerFn);
            this.alternateCharOppImg = false;
            this.hasFoughtGuildBattle = false;
            this.skipAllowed = false;
            this.tvStatus = 0;
            this.tvStatusDest = 0;
            this.tvWobble = 0;
            this.tvAni = 0;
            this.tvReturnValue = 0;
            this.tvTimer = new Timer(100);
            this.tvTimer.addEventListener(TimerEvent.TIMER, function (evt:TimerEvent){
                var i:int;
                tvWobble = (tvWobble + 0.1);
                while (tvWobble > (2 * Math.PI)) {
                    tvWobble = (tvWobble - (2 * Math.PI));
                };
                if ((tvStatusDest - tvStatus) >= 0.1){
                    tvStatus = (tvStatus + 0.1);
                } else {
                    if ((tvStatus - tvStatusDest) >= 0.1){
                        tvStatus = (tvStatus - 0.1);
                    } else {
                        tvStatus = tvStatusDest;
                    };
                };
                tvAni++;
                if (tvAni >= 4){
                    tvAni = 0;
                };
                if (tvStatus == 1){
                    Show(CA_TV);
                };
                if (tvStatus == 0){
                    Hide(CA_TV);
                };
                i = 0;
                while (i < 4) {
                    actor[(IMG_TV + i)].scaleX = tvStatus;
                    actor[(IMG_TV + i)].scaleY = tvStatus;
                    actor[(IMG_TV + i)].rotation = (Math.sin(tvWobble) * 5);
                    actor[(IMG_TV + i)].alpha = tvStatus;
                    if ((((i == tvAni)) && ((tvStatus > 0)))){
                        Show((IMG_TV + i));
                    } else {
                        Hide((IMG_TV + i));
                    };
                    i++;
                };
                if (!OnStage(IMG_TV)){
                    tvTimer.stop();
                    i = 0;
                    while (i < 4) {
                        Hide((IMG_TV + i));
                        i++;
                    };
                    tvStatus = 0;
                    tvStatusDest = 0;
                };
            });
            this.tvPollTimer = new Timer(5000);
            this.tvPollTimer.addEventListener(TimerEvent.TIMER, this.TryShowTV);
            this.specialActionHint = false;
            this.PvPDelayTimer = new Timer(500);
            this.suggestNames = new Array();
            this.crestElementPos = [[55, 8, 130, 90, 21], [0, 50, 240, 150, 34], [65, 75, 108, 114, 23], [15, 194, 210, 45, 12], [85, 17, 73, 70, 24], [98, 176, 43, 40, 16], [85, 100, 70, 70, 68]];
            this.selecterCrestElement = -1;
            this.crestSuggested = false;
            this.crestColorSelection = 0;
            this.crest = this.getRandomCrest();
            this.heraldicColors = [[0, 0, 1], [1, 0, 0], [0.7, 0, 0.8], [0.1, 0.1, 0.1], [0, 0.6, 0], [1, 0.8, 0], [0.9, 0.9, 0.9], [0.7, 0.4, 0.2], [0.5, 0.5, 0.5], [0.7, 0, 0], [0.5, 0, 0.3], [1, 0.6, 0], [1, 0.8, 0.8]];
            this.crestColor = [0, 0, 0, 0];
            this.crestMoveTimer = new Timer(25);
            this.Filter_CrestSelected = new GradientGlowFilter(0, 0, [16777026, 16777026], [0, 0.6], [0, 127], 26, 26, 1, 1, "outer");
            this.crestMoveTimer.addEventListener(TimerEvent.TIMER, this.crestMoveFn);
            this.oldCrestStr = "";
            this.guildInstanceID = 0;
            this.myOwnRank = -1;
            this.myOwnAttackTarget = -1;
            this.myOwnGuildMoney = -1;
            this.lastGuildShown = "";
            this.lastGuildData = new Array();
            this.lastRaidCost = 0;
            this.lastGuildMembers = new Array();
            this.lastHallMembers = new Array();
            this.arrowHallMode = false;
            this.offlineGuildMembers = new Array();
            this.showActivityTime = false;
            this.guildForumLink = "";
            this.showAlbumOffset = false;
            this.avgLevel = 0;
            this.DestroyGuildBtnTimer = false;
            this.PostReturnToPlayer = "";
            this.oldSel = 0;
            this.postInstance = 0;
            this.mirrorFadeAmount = 0.2;
            this.mirrorAniTimer = new Timer(25);
            this.mirrorAniTimer.addEventListener(TimerEvent.TIMER, this.MirrorAniFn);
            this.lastPlayer = "";
            this.AlbumEffect = false;
            this.mirrorAniStep = 0;
            this.indexInGuild = 0;
            this.indexInHall = 0;
            this.playerTowerLevel = 0;
            this.MQSInstance = 0;
            this.MQDelayTimer = new Timer(500);
            this.LastDungeonNr = 0;
            this.LastDungeonEnemy = 0;
            this.hasLostMQ = false;
            this.CorrectItemType = [6, 3, 5, 4, 8, 7, 9, 10, 1, 2];
            this.crestSuggestion = new Array();
            this.newCrestSuggested = "";
            this.ChatHist = new Array();
            this.toiletTankAdjustTimer = new Timer(25);
            this.toiletTankCurrent = 0;
            this.toiletTankDest = 0;
            this.toiletTankAdjustTimer.addEventListener(TimerEvent.TIMER, this.toiletTankAdjustEvent);
            this.witchAniStep = 0;
            this.witchAniTimer = new Timer(50);
            this.witchAniTimer.addEventListener(TimerEvent.TIMER, function (evt:TimerEvent){
                var i:int;
                witchAniStep++;
                if (witchAniStep >= 15){
                    witchAniStep = 0;
                };
                i = 0;
                while (i < 15) {
                    if (i == witchAniStep){
                        Show((IMG_WITCH_ANI + i));
                    } else {
                        Hide((IMG_WITCH_ANI + i));
                    };
                    i++;
                };
                if (!OnStage(IMG_WITCH)){
                    witchAniTimer.stop();
                };
            });
            this.witchDesiredType = -1;
            this.nextFightTimer = new Timer(10, 1);
            this.towerFightMode = false;
            this.fights = new Array();
            this.guildFightCount = 0;
            this.fightNumber = 0;
            this.skipGuildFights = 0;
            this.lastRoundFighterName = "";
            this.lastWhisperTarget = "";
            this.lastMessageTarget = "";
            this.nextFightTimer.addEventListener(TimerEvent.TIMER, this.NextFight);
            this.guildFightTimer = new Timer(1000);
            this.guildFightTimer.addEventListener(TimerEvent.TIMER, this.guildFightTimerFn);
            this.guildFightTimer.start();
            this.guildAttackTime = 0;
            this.guildDefenceTime = 0;
            this.guildAttacked = "";
            this.guildAttacking = "";
            this.lastChatHist = "";
            this.lastChatIndex = 0;
            this.guildBlinkReady = false;
            this.firstChatFill = false;
            this.SignupJumpRunning = false;
            this.suggestionSlot = new Array();
            this.popupStamp = 0;
            this.GuildChatPoll = new Timer(1000);
            this.GuildChatPoll.addEventListener(TimerEvent.TIMER, this.GuildChatPollFn);
            this.GuildChatPoll.start();
        }

    }
}//package sfgame_fla
﻿